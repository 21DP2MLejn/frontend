{"version":3,"sources":["i18n.js","queries/system/auth.js","tools/cs_error_codes.js","tools/cs_local_storage.js","tools/authentication.js","components/settings/general/date_time/queries.js","components/organization/organization/queries.js","components/ui/CSStandalonePageWide.jsx","components/ui/CSStandalonePageLoader.jsx","components/context/AppSettingsContext.js","components/context/OrganizationContext.js","components/settings/shop/features/queries.js","components/SiteWrapperShop.js","components/shop/ShopCheckoutProgress.jsx","components/ui/ButtonBack.jsx","components/shop/ShopBase.jsx","components/shop/cookie_policy/CookiePolicyBase.jsx","components/shop/cookie_policy/CookiePolicy.jsx","tools/string_tools.js","components/ui/StatusIcon.jsx","components/schedule/classes/tools.js","queries/system/get_user.js","tools/user_tools.js","components/HasPermissionWrapper.js","queries/system/get_user_profile.js","components/home/home/queries.js","components/SiteWrapper.js","components/home/home/HomeHomeBase.jsx","components/home/home/HomeHome.jsx","components/automation/home/AutomationHomeItemButton.jsx","components/automation/home/AutomationHome.jsx","components/general/ContentCard.jsx","components/automation/queries.js","components/automation/AutomationBack.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditsBase.jsx","components/automation/AutomationTaskResultStatus.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCredits.jsx","components/automation/account/subscription/credits/yupSchema.js","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditForm.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditAdd.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesBase.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoices.jsx","components/automation/account/subscription/invoices/yupSchema.js","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesForm.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesAdd.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionBase.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollections.jsx","components/automation/account/subscription/mollie_collection/yupSchema.js","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionForm.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionAdd.jsx","components/ui/HomeItemButton.jsx","components/finance/home/FinanceHome.jsx","components/finance/costcenters/queries.js","components/ui/ButtonAdd.jsx","components/finance/costcenters/FinanceCostCentersBase.jsx","components/finance/costcenters/FinanceCostCenters.jsx","components/finance/costcenters/yupSchema.js","components/finance/costcenters/FinanceCostCenterAdd.jsx","components/finance/costcenters/FinanceCostCenterEdit.jsx","components/ui/ButtonExport.jsx","components/finance/expenses/FinanceExpensesBase.jsx","tools/refresh_token_and_open_export_link.js","components/ui/FileProtectedDownloadTableButton.jsx","tools/confirm_action.js","components/ui/ButtonConfirm.jsx","components/finance/expenses/queries.js","tools/confirm_delete.js","components/finance/expenses/FinanceExpensesList.jsx","components/finance/expenses/tools.js","components/ui/CSDatePicker.jsx","components/finance/expenses/FinanceExpensesFilter.jsx","components/finance/expenses/FinanceExpenses.jsx","tools/date_tools.js","components/finance/expenses/yupSchema.js","tools/custom_file_input_label_style.js","components/ui/ButtonFormSubmit.jsx","components/ui/ButtonFormCancel.jsx","components/finance/expenses/FinanceExpenseForm.jsx","components/finance/expenses/FinanceExpenseAdd.jsx","components/finance/expenses/FinanceExpenseEdit.jsx","components/finance/expenses/export/yupSchema.js","components/finance/expenses/export/FinanceExpensesExportForm.jsx","components/finance/expenses/export/FinanceExpensesExport.jsx","components/finance/glaccounts/queries.js","components/finance/glaccounts/FinanceGLAccountsBase.jsx","components/finance/glaccounts/FinanceGLAccounts.jsx","components/finance/glaccounts/yupSchema.js","components/finance/glaccounts/FinanceGLAccountAdd.jsx","components/finance/glaccounts/FinanceGLAccountEdit.jsx","components/finance/invoices/tools.js","components/finance/invoices/FinanceInvoicesFilter.jsx","components/finance/invoices/FinanceInvoicesBase.jsx","components/ui/FinanceInvoiceStatus.jsx","components/finance/invoices/queries.js","components/finance/invoices/FinanceInvoicesList.jsx","components/finance/invoices/FinanceInvoices.jsx","components/finance/invoices/export/yupSchema.js","components/finance/invoices/export/FinanceInvoicesExportForm.jsx","components/finance/invoices/export/FinanceInvoicesExport.jsx","components/finance/invoices/edit/FinanceInvoiceEditBase.jsx","components/finance/invoices/edit/FinanceInvoiceItemAdd.jsx","components/finance/invoices/edit/FinanceInvoiceItemDelete.jsx","components/finance/invoices/edit/FinanceInvoiceItemEditForm.jsx","components/finance/invoices/edit/FinanceInvoiceItemEdit.jsx","components/finance/invoices/edit/FinanceInvoiceEditItems.jsx","plugin_config/tinymce.js","components/finance/invoices/edit/FinanceInvoiceEditTermsForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditFooterForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditNoteForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditAdditional.jsx","components/finance/invoices/edit/FinanceInvoiceEditBalance.jsx","components/finance/invoices/edit/FinanceInvoiceEditOptionsForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditOptions.jsx","components/finance/invoices/edit/FinanceInvoiceEditOrganization.jsx","components/finance/invoices/edit/FinanceInvoiceEditSummaryForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditSummary.jsx","components/finance/invoices/edit/FinanceInvoiceEditTo.jsx","components/finance/invoices/edit/FinanceInvoiceEditPaymentDelete.jsx","components/finance/invoices/edit/FinanceInvoiceEditPayments.jsx","components/finance/invoices/edit/FinanceInvoiceEdit.jsx","components/finance/invoices/edit_to/FinanceInvoiceEditToBase.jsx","components/finance/invoices/edit_to/FinanceInvoiceEditToForm.jsx","components/finance/invoices/edit_to/FinanceInvoiceEditTo.jsx","components/ui/BadgeBoolean.jsx","components/finance/invoices/groups/queries.js","components/finance/invoices/groups/FinanceInvoiceGroupsBase.jsx","components/finance/invoices/groups/FinanceInvoiceGroups.jsx","components/finance/invoices/groups/yupSchema.js","components/finance/invoices/groups/FinanceInvoiceGroupForm.jsx","components/finance/invoices/groups/FinanceInvoiceGroupAdd.jsx","components/finance/invoices/groups/FinanceInvoiceGroupEdit.jsx","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaultsBase.jsx","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaultForm.jsx","components/finance/invoices/groups/defaults/yupSchema.js","components/finance/invoices/groups/defaults/queries.js","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaults.jsx","components/finance/invoices/payments/queries.js","components/finance/invoices/payments/FinanceInvoicePaymentBase.jsx","components/finance/invoices/payments/FinanceInvoicePaymentForm.jsx","components/finance/invoices/payments/FinanceInvoicePaymentAdd.jsx","components/finance/invoices/payments/FinanceInvoicePaymentEdit.jsx","components/finance/orders/tools.js","components/finance/orders/FinanceOrdersFilter.jsx","components/finance/orders/FinanceOrdersBase.jsx","components/finance/orders/FinanceOrderStatus.jsx","components/finance/orders/queries.js","components/finance/orders/FinanceOrderDelete.jsx","components/finance/orders/FinanceOrders.jsx","components/finance/payment_batches/tools.js","components/ui/BadgeFinancePaymentBatchStatus.jsx","components/finance/payment_batches/FinancePaymentBatchesBase.jsx","components/finance/payment_batches/queries.js","components/finance/payment_batches/FinancePaymentBatches.jsx","components/finance/payment_batches/FinancePaymentBatchAddWhat.jsx","components/ui/FinancePaymentBatchCategory.jsx","components/finance/payment_batches/FinancePaymentBatchViewBase.jsx","components/finance/payment_batches/FinancePaymentBatchView.jsx","components/finance/payment_batches/yupSchema.js","components/finance/payment_batches/FinancePaymentCollectionBatchForm.jsx","components/finance/payment_batches/FinancePaymentCollectionBatchAdd.jsx","components/finance/payment_batches/FinancePaymentCollectionBatchEdit.jsx","components/finance/payment_batch_categories/tools.js","components/finance/payment_batch_categories/FinancePaymentBatchCategoriesBase.jsx","components/finance/payment_batch_categories/queries.js","components/finance/payment_batch_categories/FinancePaymentBatchCategories.jsx","components/finance/payment_batch_categories/FinancePaymentBatchCategoryForm.jsx","components/finance/payment_batch_categories/yupSchema.js","components/finance/payment_batch_categories/FinancePaymentBatchCategoryAdd.jsx","components/finance/payment_batch_categories/FinancePaymentBatchCategoryEdit.jsx","components/finance/orders/edit/queries.js","components/finance/orders/edit/FinanceOrderEditForm.jsx","components/finance/orders/edit/FinanceOrderEditBase.jsx","components/finance/orders/edit/FinanceOrderEdit.jsx","components/finance/payment_methods/FinancePaymentMethodsBase.jsx","components/finance/payment_methods/queries.js","components/finance/payment_methods/FinancePaymentMethods.jsx","components/finance/payment_methods/yupSchema.js","components/finance/payment_methods/FinancePaymentMethodForm.jsx","components/finance/payment_methods/FinancePaymentMethodAdd.jsx","components/finance/payment_methods/FinancePaymentMethodEdit.jsx","components/finance/quotes/tools.js","components/finance/quotes/FinanceQuotesFilter.jsx","components/finance/quotes/FinanceQuotesBase.jsx","components/ui/FinanceQuoteStatus.jsx","components/finance/quotes/queries.js","components/finance/quotes/FinanceQuotesList.jsx","components/finance/quotes/FinanceQuotes.jsx","components/finance/quotes/export/yupSchema.js","components/finance/quotes/export/FinanceQuotesExportForm.jsx","components/finance/quotes/export/FinanceQuotesExport.jsx","components/finance/quotes/edit/FinanceQuoteEditBase.jsx","components/finance/quotes/edit/FinanceQuoteItemAdd.jsx","components/finance/quotes/edit/FinanceQuoteItemDelete.jsx","components/finance/quotes/edit/FinanceQuoteItemEditForm.jsx","components/finance/quotes/edit/FinanceQuoteItemEdit.jsx","components/finance/quotes/edit/FinanceQuoteEditItems.jsx","components/finance/quotes/edit/FinanceQuoteEditTermsForm.jsx","components/finance/quotes/edit/FinanceQuoteEditFooterForm.jsx","components/finance/quotes/edit/FinanceQuoteEditNoteForm.jsx","components/finance/quotes/edit/FinanceQuoteEditAdditional.jsx","components/finance/quotes/edit/FinanceQuoteEditBalance.jsx","components/finance/quotes/edit/FinanceQuoteEditOptionsForm.jsx","components/finance/quotes/edit/FinanceQuoteEditOptions.jsx","components/finance/quotes/edit/FinanceQuoteEditOrganization.jsx","components/finance/quotes/edit/FinanceQuoteEditSummaryForm.jsx","components/finance/quotes/edit/FinanceQuoteEditSummary.jsx","components/finance/quotes/edit/FinanceQuoteEditTo.jsx","components/finance/quotes/edit/FinanceQuoteEdit.jsx","components/finance/quotes/edit_to/FinanceQuoteEditToBase.jsx","components/finance/quotes/edit_to/FinanceQuoteEditToForm.jsx","components/finance/quotes/edit_to/FinanceQuoteEditTo.jsx","components/finance/quotes/groups/queries.js","components/finance/quotes/groups/FinanceQuoteGroupsBase.jsx","components/finance/quotes/groups/FinanceQuoteGroups.jsx","components/finance/quotes/groups/yupSchema.js","components/finance/quotes/groups/FinanceQuoteGroupForm.jsx","components/finance/quotes/groups/FinanceQuoteGroupAdd.jsx","components/finance/quotes/groups/FinanceQuoteGroupEdit.jsx","components/finance/taxrates/FinanceTaxRatesBase.jsx","components/finance/taxrates/queries.js","components/finance/taxrates/FinanceTaxRates.jsx","components/finance/taxrates/yupSchema.js","components/finance/taxrates/FinanceTaxRateAdd.jsx","components/finance/taxrates/FinanceTaxRateEdit.jsx","components/finance/taxrates_summary/yupSchema.js","components/finance/taxrates_summary/FinanceTaxRatesSummaryFilter.jsx","components/finance/taxrates_summary/FinanceTaxRatesSummaryBase.jsx","components/finance/taxrates_summary/queries.js","components/finance/taxrates_summary/FinanceTaxRatesSummary.jsx","components/insight/home/InsightHome.jsx","components/insight/inactive_accounts/InsightInactiveAccountsBase.jsx","components/insight/inactive_accounts/queries.js","components/insight/inactive_accounts/InsightInactiveAccounts.jsx","components/insight/inactive_accounts/InsightInactiveAccountsForm.jsx","components/insight/inactive_accounts/InsightInactiveAccountsAdd.jsx","components/ui/ButtonDelete.jsx","components/insight/inactive_accounts/InsightInactiveAccountsViewBase.jsx","components/insight/inactive_accounts/InsightInactiveAccountsView.jsx","components/insight/classpasses/queries.js","components/insight/InsightBackHome.jsx","components/insight/classpasses/InsightClasspassesBase.jsx","components/insight/classpasses/InsightClasspasses.jsx","components/insight/revenue/queries.js","components/insight/revenue/InsightRevenueBase.jsx","components/insight/revenue/InsightRevenueDisplay.jsx","components/insight/revenue/InsightRevenue.jsx","components/insight/instructor_classes/yupSchema.js","components/insight/instructor_classes/queries.js","components/insight/instructor_classes/InsightInstructorClassesMonthBase.jsx","components/insight/instructor_classes/InsightInstructorClassesForm.jsx","components/insight/instructor_classes/InsightInstructorClassesMonth.jsx","components/insight/subscriptions/queries.js","components/insight/subscriptions/InsightSubscriptionsBase.jsx","components/insight/subscriptions/InsightSubscriptions.jsx","components/insight/trialpasses/queries.js","components/insight/trialpasses/InsightTrialpassesFilter.jsx","components/insight/trialpasses/tools.js","components/insight/trialpasses/InsightTrialpassesBase.jsx","components/insight/trialpasses/InsightTrialpasses.jsx","components/organization/home/OrganizationHome.jsx","components/organization/organization/yupSchema.js","components/organization/organization/OrganizationForm.jsx","components/organization/organization/OrganizationEditBase.jsx","components/organization/organization/OrganizationEdit.jsx","components/organization/organization/branding/OrganizationBrandingBase.jsx","components/organization/organization/branding/OrganizationBrandingEditColorsForm.jsx","components/organization/organization/branding/OrganizationBranding.jsx","components/organization/organization/branding/OrganizationBrandingEditForm.jsx","components/organization/organization/branding/OrganizationBrandingEdit.jsx","components/organization/announcements/OrganizationAnnouncementsBase.jsx","components/organization/announcements/queries.js","components/organization/announcements/OrganizationAnnouncements.jsx","components/organization/announcements/yupSchema.js","components/organization/announcements/OrganizationAnnouncementForm.jsx","components/organization/announcements/OrganizationAnnouncementAdd.jsx","components/organization/announcements/OrganizationAnnouncementEdit.jsx","components/organization/classpasses/OrganizationClasspassesBase.jsx","components/organization/classpasses/queries.js","components/organization/classpasses/OrganizationClasspasses.jsx","components/organization/classpasses/yupSchema.js","components/organization/classpasses/OrganizationClasspassForm.jsx","components/organization/classpasses/OrganizationClasspassAdd.jsx","components/organization/classpasses/OrganizationClasspassEdit.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupsBase.jsx","components/organization/classpasses_groups/queries.js","components/organization/classpasses_groups/OrganizationClasspassesGroups.jsx","components/organization/classpasses_groups/yupSchema.js","components/organization/classpasses_groups/OrganizationClasspassesGroupAdd.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupEdit.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupEditPasses.jsx","components/organization/classtypes/tools.js","components/organization/classtypes/queries.js","components/organization/classtypes/OrganizationClasstypesBase.jsx","components/organization/classtypes/OrganizationClasstypes.jsx","components/organization/classtypes/yupSchema.js","components/organization/classtypes/OrganizationClasstypeAdd.jsx","components/organization/classtypes/OrganizationClasstypeEdit.jsx","components/organization/classtypes/OrganizationClasstypeEditImage.jsx","components/organization/discovery/queries.js","components/organization/discovery/OrganizationDiscoveriesBase.jsx","components/organization/discovery/OrganizationDiscoveries.jsx","components/organization/discovery/yupSchema.js","components/organization/discovery/OrganizationDiscoveryAdd.jsx","components/organization/discovery/OrganizationDiscoveryEdit.jsx","components/organization/documents/OrganizationDocuments.jsx","components/ui/ISODateString.jsx","components/ui/FileDownloadTableButton.jsx","components/organization/documents/OrganizationDocumentsBase.jsx","components/organization/documents/queries.js","components/organization/documents/OrganizationDocumentDelete.jsx","components/organization/documents/tools.js","components/organization/documents/OrganizationListDocuments.jsx","components/organization/documents/OrganizationDocumentAdd.jsx","components/organization/documents/OrganizationDocumentEdit.jsx","components/organization/holidays/OrganizationHolidaysBase.jsx","components/organization/holidays/queries.js","components/organization/holidays/OrganizationHolidays.jsx","components/organization/holidays/yupSchema.js","components/organization/holidays/OrganizationHolidayForm.jsx","components/organization/holidays/OrganizationHolidayAdd.jsx","components/organization/holidays/OrganizationHolidayEdit.jsx","components/organization/holidays/OrganizationHolidayEditLocations.jsx","components/organization/languages/OrganizationLanguagesBase.jsx","components/organization/languages/queries.js","components/organization/languages/OrganizationLanguages.jsx","components/organization/languages/yupSchema.js","components/organization/languages/OrganizationLanguageForm.jsx","components/organization/languages/OrganizationLanguageAdd.jsx","components/organization/languages/OrganizationLanguageEdit.jsx","components/organization/locations/queries.js","components/organization/locations/OrganizationLocationsBase.jsx","components/organization/locations/OrganizationLocations.jsx","components/organization/locations/yupSchema.js","components/organization/locations/OrganizationLocationAdd.jsx","components/organization/locations/OrganizationLocationEdit.jsx","components/organization/locations/rooms/queries.js","components/organization/locations/rooms/OrganizationLocationRoomsBase.jsx","components/organization/locations/rooms/OrganizationLocationRooms.jsx","components/organization/locations/rooms/yupSchema.js","components/organization/locations/rooms/OrganizationLocationRoomForm.jsx","components/organization/locations/rooms/OrganizationLocationRoomAdd.jsx","components/organization/locations/rooms/OrganizationLocationRoomEdit.jsx","components/organization/levels/OrganizationLevelsBase.jsx","components/organization/levels/queries.js","components/organization/levels/OrganizationLevels.jsx","components/organization/levels/yupSchema.js","components/organization/levels/OrganizationLevelForm.jsx","components/organization/levels/OrganizationLevelAdd.jsx","components/organization/levels/OrganizationLevelEdit.jsx","components/ui/ButtonEdit.jsx","components/organization/products/queries.js","tools/confirm_archive.js","components/ui/ButtonArchive.jsx","tools/confirm_unarchive.js","components/ui/ButtonUnArchive.jsx","components/organization/products/OrganizationProductArchive.jsx","components/organization/products/OrganizationProductsBase.jsx","components/organization/products/OrganizationProducts.jsx","components/organization/products/yupSchema.js","components/organization/products/OrganizationProductForm.jsx","components/organization/products/OrganizationProductAdd.jsx","components/organization/products/OrganizationProductEdit.jsx","components/organization/shifts/OrganizationShiftsBase.jsx","components/organization/shifts/queries.js","components/organization/shifts/OrganizationShifts.jsx","components/organization/shifts/yupSchema.js","components/organization/shifts/OrganizationShiftForm.jsx","components/organization/shifts/OrganizationShiftAdd.jsx","components/organization/shifts/OrganizationShiftEdit.jsx","components/organization/subscriptions/OrganizationSubscriptionsBase.jsx","components/organization/subscriptions/queries.js","components/organization/subscriptions/OrganizationSubscriptions.jsx","components/organization/subscriptions/yupSchema.js","components/organization/subscriptions/OrganizationSubscriptionForm.jsx","components/organization/subscriptions/OrganizationSubscriptionAdd.jsx","components/organization/subscriptions/OrganizationSubscriptionEdit.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupsBase.jsx","components/organization/subscriptions_groups/queries.js","components/organization/subscriptions_groups/OrganizationSubscriptionsGroups.jsx","components/organization/subscriptions_groups/yupSchema.js","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupForm.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupAdd.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEdit.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEditSubscriptions.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionsPricesBase.jsx","components/organization/subscriptions/prices/queries.js","components/organization/subscriptions/prices/OrganizationSubscriptionsPrices.jsx","components/organization/subscriptions/prices/yupSchema.js","components/organization/subscriptions/prices/OrganizationSubscriptionPriceForm.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceAdd.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceEdit.jsx","components/relations/home/RelationsHome.jsx","components/general/InputSearch.jsx","components/relations/accounts/tools.js","components/relations/accounts/RelationsAccountsBase.jsx","components/relations/accounts/queries.js","components/relations/accounts/RelationsAccounts.jsx","components/relations/accounts/yupSchema.js","components/relations/accounts/RelationsAccountForm.jsx","components/relations/accounts/RelationsAccountAdd.jsx","tools/iso_country_codes.js","components/relations/accounts/RelationsAccountProfileForm.jsx","components/ui/ProfileCardSmall.jsx","components/relations/accounts/ProfileMenu.jsx","components/relations/accounts/RelationsAccountProfileBase.jsx","components/relations/accounts/RelationsAccountProfile.jsx","components/relations/accounts/RelationsAccountProfileImageForm.jsx","components/relations/accounts/RelationsAccountProfileImage.jsx","components/relations/accounts/RelationsAccountsBack.jsx","components/ui/DocumentType.jsx","components/relations/accounts/accepted_documents/queries.js","components/relations/accounts/accepted_documents/AcceptedDocuments.jsx","components/relations/accounts/bank_accounts/queries.js","components/relations/accounts/bank_accounts/mandates/queries.js","components/relations/accounts/bank_accounts/RelationsAccountBankAccountBase.jsx","components/relations/accounts/bank_accounts/RelationsAccountBankAccountForm.jsx","components/relations/accounts/bank_accounts/RelationsAccountBankAccount.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateForm.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateAdd.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateEdit.jsx","components/ui/BadgeBookingStatus.jsx","components/relations/accounts/classes/AccountClassesBase.jsx","components/relations/accounts/classes/queries.js","components/schedule/classes/class/attendance/queries.js","components/relations/accounts/classes/AccountClassDelete.jsx","components/relations/accounts/classes/AccountClasses.jsx","components/relations/accounts/enrollments/AccountEnrollmentsBase.jsx","components/schedule/classes/all/enrollments/queries.js","components/relations/accounts/enrollments/queries.js","components/schedule/classes/all/enrollments/tools.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentDelete.jsx","components/relations/accounts/enrollments/AccountEnrollments.jsx","components/schedule/classes/all/enrollments/yupSchema.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentForm.jsx","components/relations/accounts/enrollments/AccountEnrollmentBack.jsx","components/relations/accounts/enrollments/AccountEnrollmentEdit.jsx","queries/accounts/get_account.js","components/ui/BadgePublic.jsx","components/schedule/classes/queries.js","components/ui/SearchClassesOnDate.jsx","components/relations/accounts/enrollments/AccountEnrollmentFindClass.jsx","components/relations/accounts/tools/queries.js","components/relations/accounts/tools/RelationsAccountMollieCustomerForm.jsx","components/relations/accounts/tools/RelationsAccountPasswordForm.jsx","components/relations/accounts/tools/RelationsAccountTools.jsx","components/relations/accounts/classpasses/queries.js","components/relations/accounts/classpasses/AccountClasspasses.jsx","components/relations/accounts/classpasses/yupSchema.js","components/relations/accounts/classpasses/AccountClasspassForm.jsx","components/relations/accounts/classpasses/AccountClasspassAdd.jsx","components/relations/accounts/classpasses/AccountClasspassEdit.jsx","components/relations/accounts/classpass_classes/queries.js","components/relations/accounts/classpass_classes/AccountClasspassClasses.jsx","components/relations/accounts/documents/queries.js","components/relations/accounts/documents/AccountDocuments.jsx","components/relations/accounts/documents/AccountDocumentForm.jsx","components/relations/accounts/documents/AccountDocumentAdd.jsx","components/relations/accounts/documents/yupSchema.js","components/relations/accounts/documents/AccountDocumentFormEdit.jsx","components/relations/accounts/documents/AccountDocumentEdit.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemsBase.jsx","components/relations/accounts/finance_payment_batch_category_items/queries.js","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItems.jsx","components/relations/accounts/finance_payment_batch_category_items/yupSchema.js","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemsForm.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemAdd.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemEdit.jsx","components/relations/accounts/invoices/queries.js","components/relations/accounts/invoices/AccountInvoicesBase.jsx","components/relations/accounts/invoices/AccountInvoices.jsx","components/relations/accounts/invoices/AccountInvoiceAddForm.jsx","components/relations/accounts/invoices/AccountInvoiceAdd.jsx","components/general/LoadMoreOnBottomScroll.jsx","components/relations/accounts/notes/AccountNotesBase.jsx","components/relations/accounts/notes/queries.js","components/relations/accounts/notes/tools.js","components/relations/accounts/notes/AccountNotes.jsx","components/relations/accounts/notes/AccountNoteForm.jsx","components/relations/accounts/notes/AccountNoteAdd.jsx","components/relations/accounts/notes/AccountNoteEdit.jsx","components/relations/accounts/orders/AccountOrdersBase.jsx","components/relations/accounts/orders/queries.js","components/relations/accounts/orders/AccountOrderDelete.jsx","components/relations/accounts/orders/AccountOrders.jsx","components/relations/accounts/products/queries.js","components/relations/accounts/products/AccountProducts.jsx","components/ui/CSStoreCard.jsx","components/relations/accounts/products/AccountProductAdd.jsx","components/relations/accounts/quotes/queries.js","components/relations/accounts/quotes/AccountQuotesBase.jsx","components/relations/accounts/quotes/AccountQuotes.jsx","components/relations/accounts/quotes/AccountQuoteAddForm.jsx","components/relations/accounts/quotes/AccountQuoteAdd.jsx","components/relations/accounts/schedule_event_tickets/AccountScheduleEventTicketsBase.jsx","components/schedule/events/tickets/customers/queries.js","components/relations/accounts/schedule_event_tickets/queries.js","components/relations/accounts/schedule_event_tickets/AccountScheduleEventTickets.jsx","components/relations/accounts/subscriptions/queries.js","components/relations/accounts/subscriptions/AccountSubscriptions.jsx","components/relations/accounts/subscriptions/yupSchema.js","components/relations/accounts/subscriptions/AccountSubscriptionForm.jsx","components/relations/accounts/subscriptions/AccountSubscriptionAdd.jsx","components/ui/CardTabs.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditTabs.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditBaseBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEdit.jsx","components/relations/accounts/subscriptions/edit/alt_prices/queries.js","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditListBaseBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditListBase.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceDelete.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPrices.jsx","components/relations/accounts/subscriptions/edit/alt_prices/yupSchema.js","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceBase.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceForm.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceAdd.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceEdit.jsx","components/relations/accounts/subscriptions/edit/blocks/queries.js","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockDelete.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlocks.jsx","components/relations/accounts/subscriptions/edit/blocks/yupSchema.js","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockBase.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockForm.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockAdd.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockEdit.jsx","components/relations/accounts/subscriptions/edit/credits/queries.js","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditDelete.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCredits.jsx","components/relations/accounts/subscriptions/edit/credits/yupSchema.js","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditBase.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAddForm.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAdd.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEditForm.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEdit.jsx","components/relations/accounts/subscriptions/edit/invoices/queries.js","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceDelete.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoices.jsx","components/relations/accounts/subscriptions/edit/invoices/yupSchema.js","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAddBase.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAddForm.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAdd.jsx","components/relations/accounts/subscriptions/edit/pauses/queries.js","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseDelete.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauses.jsx","components/relations/accounts/subscriptions/edit/pauses/yupSchema.js","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseBase.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseForm.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseAdd.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseEdit.jsx","components/relations/accounts/instructor_profile/queries.js","components/relations/accounts/instructor_profile/yupSchema.js","components/relations/accounts/instructor_profile/RelationsAccountInstructorProfileForm.jsx","components/relations/accounts/instructor_profile/RelationsAccountInstructorProfile.jsx","components/relations/b2b/tools.js","components/relations/b2b/RelationsB2BBase.jsx","components/relations/b2b/queries.js","components/relations/b2b/RelationsB2B.jsx","components/relations/b2b/RelationB2BAddForm.jsx","components/relations/b2b/RelationsB2BAdd.jsx","components/relations/b2b/RelationsB2BEditMenu.jsx","components/relations/b2b/RelationsB2BEditBase.jsx","components/relations/b2b/RelationsB2BEditForm.jsx","components/relations/b2b/RelationsB2BEdit.jsx","components/relations/b2b/invoices/queries.js","components/relations/b2b/invoices/RelationsB2BInvoices.jsx","components/relations/b2b/invoices/RelationsB2BInvoiceAddForm.jsx","components/relations/b2b/invoices/RelationsB2BInvoiceAdd.jsx","components/schedule/home/ScheduleHome.jsx","components/ui/ButtonListWeekChooser.jsx","components/schedule/classes/ScheduleClassesFilter.jsx","components/schedule/classes/ScheduleClassesBase.jsx","components/schedule/classes/ScheduleClasses.jsx","components/schedule/classes/yupSchema.js","components/ui/CSTimePicker.jsx","components/schedule/classes/ScheduleClassForm.jsx","components/schedule/classes/ScheduleClassAddBase.jsx","components/schedule/classes/ScheduleClassAdd.jsx","components/schedule/classes/all/edit/queries.js","components/schedule/classes/all/ClassEditMenu.jsx","components/schedule/classes/all/ClassEditBaseBase.jsx","components/schedule/classes/all/tools.js","components/schedule/classes/all/ClassEditBase.jsx","components/schedule/classes/all/edit/ScheduleClassEditAll.jsx","components/schedule/classes/all/ClassEditBack.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollments.jsx","queries/accounts/account_search_queries.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentsSearch.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentAdd.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentBack.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentEdit.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollSubscriptions.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentOptions.jsx","components/ui/FormHelp.jsx","components/schedule/classes/all/classpasses/ScheduleClassClasspassForm.jsx","components/schedule/classes/all/classpasses/yupSchema.js","components/schedule/classes/all/classpasses/queries.js","components/schedule/classes/all/classpasses/ScheduleClassClasspasses.jsx","components/schedule/classes/all/subscriptions/ScheduleClassSubscriptionForm.jsx","components/schedule/classes/all/subscriptions/yupSchema.js","components/schedule/classes/all/subscriptions/queries.js","components/schedule/classes/all/subscriptions/ScheduleClassSubscriptions.jsx","components/schedule/classes/all/instructors/queries.js","components/schedule/classes/all/instructors/ScheduleClassInstructors.jsx","components/schedule/classes/all/instructors/yupSchema.js","components/schedule/classes/all/instructors/ScheduleClassInstructorForm.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorBack.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorAdd.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorEdit.jsx","components/schedule/classes/class/attendance/tools.js","components/schedule/classes/class/attendance/ScheduleClassAttendanceSearch.jsx","components/schedule/classes/class/ScheduleClassBack.jsx","components/schedule/classes/class/ClassMenu.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceBaseBase.jsx","components/schedule/classes/class/tools.js","components/schedule/classes/class/attendance/ScheduleClassAttendanceBase.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceDelete.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendance.jsx","components/schedule/classes/class/ScheduleClassEditBase.jsx","components/schedule/classes/class/attendance_chart/queries.js","components/schedule/classes/class/attendance_chart/ScheduleClassAttendanceChart.jsx","components/schedule/classes/class/book/ScheduleClassBookBack.jsx","components/schedule/classes/class/book/queries.js","components/schedule/classes/class/book/tools.js","components/schedule/classes/class/book/ScheduleClassBookClasspassBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookClasspasses.jsx","components/schedule/classes/class/book/ScheduleClassBookSubscriptionBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookSubscriptions.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceDropin.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceTrial.jsx","components/schedule/classes/class/book/ScheduleClassBook.jsx","components/schedule/classes/class/edit/queries.js","components/schedule/classes/class/edit/yupSchema.js","components/schedule/classes/class/edit/ScheduleClassEditForm.jsx","components/schedule/classes/class/edit/ScheduleClassWeeklyOTCDelete.jsx","components/schedule/classes/class/edit/ScheduleClassEdit.jsx","components/schedule/classes/all/prices/queries.js","components/schedule/classes/all/prices/ScheduleClassPriceDelete.jsx","components/schedule/classes/all/prices/ScheduleClassPrices.jsx","components/schedule/classes/all/prices/ScheduleClassPriceForm.jsx","components/schedule/classes/all/prices/ScheduleClassPriceBack.jsx","components/schedule/classes/all/prices/ScheduleClassPriceAdd.jsx","components/schedule/classes/all/prices/ScheduleClassPriceEdit.jsx","components/schedule/events/ScheduleEventsBase.jsx","components/schedule/events/queries.js","components/schedule/events/tools.js","components/schedule/events/ScheduleEventArchive.jsx","components/schedule/events/ScheduleEvents.jsx","components/schedule/events/yupSchema.js","components/schedule/events/ScheduleEventForm.jsx","components/schedule/events/ScheduleEventAdd.jsx","components/schedule/events/edit/ScheduleEventEditMenu.jsx","components/schedule/events/edit/ScheduleEventEditBaseBase.jsx","components/schedule/events/edit/ScheduleEventEditBase.jsx","components/schedule/events/edit/ScheduleEventEdit.jsx","components/schedule/events/activities/queries.js","components/schedule/events/edit/ScheduleEventEditListBase.jsx","components/schedule/events/activities/ScheduleEventActivityDelete.jsx","components/schedule/events/activities/ScheduleEventActivities.jsx","components/schedule/events/activities/yupSchema.js","components/schedule/events/activities/ScheduleEventActivityBack.jsx","components/schedule/events/activities/ScheduleEventActivityForm.jsx","components/schedule/events/activities/ScheduleEventActivityAdd.jsx","components/schedule/events/activities/ScheduleEventActivityTabs.jsx","components/schedule/events/activities/ScheduleEventActivityEditBase.jsx","components/schedule/events/activities/ScheduleEventActivityEdit.jsx","components/schedule/events/activities/attendance/queries.js","components/schedule/events/activities/attendance/ScheduleEventActivityAttendanceBase.jsx","components/schedule/events/activities/attendance/ScheduleEventActivityAttendance.jsx","components/schedule/events/earlybirds/queries.js","components/schedule/events/earlybirds/ScheduleEventEarlybirdDelete.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirds.jsx","components/schedule/events/earlybirds/yupSchema.js","components/schedule/events/earlybirds/ScheduleEventEarlybirdForm.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdAdd.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdEdit.jsx","components/schedule/events/media/queries.js","components/schedule/events/media/ScheduleEventMediaDelete.jsx","components/schedule/events/media/ScheduleEventMedia.jsx","components/schedule/events/media/yupSchema.js","components/schedule/events/media/ScheduleEventMediaBack.jsx","components/schedule/events/media/ScheduleEventMediaForm.jsx","components/schedule/events/media/ScheduleEventMediaAdd.jsx","components/schedule/events/media/ScheduleEventMediaEditBase.jsx","components/schedule/events/media/ScheduleEventMediaEdit.jsx","components/schedule/events/subscription_group_discounts/queries.js","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountDelete.jsx","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscounts.jsx","components/schedule/events/subscription_group_discounts/yupSchema.js","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountForm.jsx","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountAdd.jsx","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountEdit.jsx","components/schedule/events/tickets/queries.js","components/schedule/events/tickets/ScheduleEventTicketDelete.jsx","components/ui/BadgeSoldOut.jsx","components/schedule/events/tickets/ScheduleEventTickets.jsx","components/schedule/events/tickets/yupSchema.js","components/schedule/events/tickets/ScheduleEventTicketBack.jsx","components/schedule/events/tickets/ScheduleEventTicketForm.jsx","components/schedule/events/tickets/ScheduleEventTicketAdd.jsx","components/schedule/events/tickets/ScheduleEventTicketTabs.jsx","components/schedule/events/tickets/ScheduleEventTicketEditBase.jsx","components/schedule/events/tickets/ScheduleEventTicketEdit.jsx","components/schedule/events/tickets/activities/queries.js","components/schedule/events/tickets/activities/yupSchema.js","components/schedule/events/tickets/activities/ScheduleEventTicketEditActivityForm.jsx","components/schedule/events/tickets/activities/ScheduleEventTicketEditActivities.jsx","components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomers.jsx","components/schedule/events/tickets/customers/tools.js","components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomersSearch.jsx","components/schedule/shifts/tools.js","components/schedule/shifts/ScheduleShiftsFilter.jsx","components/schedule/shifts/ScheduleShiftsBase.jsx","components/schedule/shifts/queries.js","components/schedule/shifts/ScheduleShifts.jsx","components/schedule/shifts/yupSchema.js","components/schedule/shifts/ScheduleShiftForm.jsx","components/schedule/shifts/ScheduleShiftAddBase.jsx","components/schedule/shifts/ScheduleShiftAdd.jsx","components/schedule/shifts/all/edit/queries.js","components/schedule/shifts/all/ShiftEditBack.jsx","components/schedule/shifts/all/ShiftEditMenu.jsx","components/schedule/shifts/all/ShiftEditBaseBase.jsx","components/schedule/shifts/all/ShiftEditBase.jsx","components/schedule/shifts/all/tools.js","components/schedule/shifts/all/edit/ScheduleShiftEditAll.jsx","components/schedule/shifts/shift/edit/queries.js","components/schedule/shifts/shift/edit/ScheduleShiftEditForm.jsx","components/schedule/shifts/shift/ScheduleShiftBack.jsx","components/schedule/shifts/shift/ScheduleShiftEditBase.jsx","components/schedule/shifts/shift/edit/ScheduleShiftWeeklyOTCDelete.jsx","components/schedule/shifts/shift/edit/ScheduleShiftEdit.jsx","components/schedule/shifts/shift/tools.js","components/schedule/shifts/all/employees/queries.js","components/schedule/shifts/all/employees/ScheduleShiftEmployees.jsx","components/schedule/shifts/all/employees/yupSchema.js","components/schedule/shifts/all/employees/ScheduleShiftEmployeeForm.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeBack.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeAdd.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeEdit.jsx","components/SiteWrapperSelfCheckin.js","components/selfcheckin/SelfCheckinBase.jsx","components/selfcheckin/Checkin/queries.js","components/selfcheckin/Checkin/tools.js","components/selfcheckin/Checkin/Checkin.jsx","components/selfcheckin/BookingOptions/queries.js","components/selfcheckin/BookingOptions/BookingOptions.jsx","components/selfcheckin/Locations/queries.js","components/selfcheckin/Locations/Locations.jsx","components/selfcheckin/LocationClasses/queries.js","components/selfcheckin/LocationClasses/LocationClasses.jsx","components/settings/queries.js","components/settings/SettingsBack.jsx","components/settings/SettingsBase.jsx","components/settings/about/SettingsAbout.jsx","components/settings/finance/bank_accounts/SettingsFinanceBankAccountsForm.jsx","components/settings/finance/bank_accounts/SettingsFinanceBankAccounts.jsx","components/settings/finance/currency/SettingsFinanceCurrencyForm.jsx","components/settings/finance/currency/SettingsFinanceCurrency.jsx","components/settings/general/date_time/yupSchema.js","components/settings/general/date_time/SettingsGeneralDateTimeForm.jsx","components/settings/general/date_time/SettingsGeneralDateTime.jsx","components/settings/general/system/SettingsGeneralSystemForm.jsx","components/settings/general/system/SettingsGeneralSystem.jsx","components/settings/home/SettingsHome.jsx","components/settings/integration/mailchimp/SettingsIntegrationMailChimpForm.jsx","components/settings/integration/mailchimp/SettingsIntegrationMailChimp.jsx","components/settings/integration/mollie/SettingsIntegrationMollieForm.jsx","components/settings/integration/mollie/SettingsIntegrationMollieCreateAccount.jsx","components/settings/integration/mollie/SettingsIntegrationMollie.jsx","components/settings/mail/mailchimp_lists/queries.js","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListsBase.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListDelete.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpLists.jsx","components/settings/mail/mailchimp_lists/yupSchema.js","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListForm.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListAdd.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListEdit.jsx","components/settings/mail/notifications/queries.js","components/settings/mail/notifications/SettingsMailNotificationsBase.jsx","components/settings/mail/notifications/SettingsMailNotificationButtonDeleteAccount.jsx","components/settings/mail/notifications/SettingsMailNotifications.jsx","components/settings/mail/notifications/SettingsMailNotificationButtonAddAccount.jsx","components/ui/SearchAccounts.jsx","components/settings/mail/notifications/SettingsMailNotificationsAddAccount.jsx","components/settings/mail/templates/SettingsMailTemplatesBase.jsx","components/settings/mail/templates/queries.js","components/settings/mail/templates/SettingsMailTemplates.jsx","components/settings/mail/templates/SettingsMailTemplateEditBase.jsx","components/settings/mail/templates/SettingsMailTemplateEditForm.jsx","components/settings/mail/templates/SettingsMailTemplateEdit.jsx","components/settings/mail/templates/tools.js","components/settings/shop/account_profiles/SettingsShopAccountProfileForm.jsx","components/settings/shop/account_profiles/SettingsShopAccountProfile.jsx","components/settings/shop/features/yupSchema.js","components/settings/shop/features/SettingsShopFeaturesForm.jsx","components/settings/shop/features/SettingsShopFeatures.jsx","components/settings/workflow/class_booking/SettingsWorkflowClassBookingForm.jsx","components/settings/workflow/class_booking/SettingsWorkflowClassBooking.jsx","components/settings/workflow/shop/SettingsWorkflowShopForm.jsx","components/settings/workflow/shop/SettingsWorkflowShop.jsx","components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPausesForm.jsx","components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPauses.jsx","components/settings/workflow/trial/SettingsWorkflowTrialForm.jsx","components/settings/workflow/trial/SettingsWorkflowTrial.jsx","components/shop/account/home/ShopAccountHomeBase.jsx","components/shop/account/home/ShopAccountHomeButton.jsx","components/shop/account/home/ShopAccountHome.jsx","components/shop/tools.js","components/shop/account/class_cancel/queries.js","components/shop/account/class_cancel/ShopAccountClassCancelBase.jsx","components/shop/account/class_cancel/ShopAccountClassCancel.jsx","components/shop/account/class_uncancel/queries.js","components/shop/account/class_uncancel/ShopAccountClassUnCancelBase.jsx","components/shop/account/class_uncancel/ShopAccountClassUnCancel.jsx","components/shop/checkout/class_info/queries.js","components/shop/checkout/class_info/ShopCheckoutClassInfo.jsx","components/shop/account/class_info/ShopAccountClassInfoBase.jsx","components/shop/account/class_info/ShopAccountClassInfo.jsx","components/shop/account/classpasses/queries.js","components/shop/account/ShopAccountBack.jsx","components/shop/account/classpasses/ShopAccountClasspassesBase.jsx","components/shop/account/classpasses/ShopAccountClasspasses.jsx","components/shop/account/ShopAccountProfileBase.jsx","components/shop/account/event_tickets/ShopAccountEventTickets.jsx","components/shop/account/invoice_payment/queries.js","components/shop/account/invoice_payment/ShopAccountInvoicePaymentBase.jsx","components/shop/account/invoice_payment/ShopAccountInvoicePayment.jsx","components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatusBase.jsx","components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatus.jsx","components/shop/account/invoices/queries.js","components/shop/account/invoices/ShopAccountInvoicesBase.jsx","components/shop/account/invoices/ShopAccountInvoices.jsx","components/shop/account/invoice/queries.js","components/shop/account/invoice/ShopAccountInvoiceBase.jsx","components/shop/account/invoice/ShopAccountInvoice.jsx","components/shop/account/mailing_lists/queries.js","components/shop/account/mailing_lists/ShopAccountMailingListsBase.jsx","components/shop/account/mailing_lists/ShopAccountMailingListCard.jsx","components/shop/account/mailing_lists/ShopAccountMailingLists.jsx","components/shop/account/orders/queries.js","components/shop/account/orders/ShopAccountOrdersBase.jsx","components/shop/account/orders/tools.js","components/shop/account/orders/ShopAccountOrders.jsx","components/shop/account/orders/ShopAccountOrderCancel.jsx","components/shop/account/profile/queries.js","components/shop/account/profile/ShopAccountProfileBtnDownloadData.jsx","components/shop/account/profile/ShopAccountProfileBase.jsx","components/shop/account/profile/ShopAccountProfileForm.jsx","components/shop/account/profile/yupSchema.js","components/shop/account/profile/ShopAccountProfile.jsx","components/shop/account/subscriptions/queries.js","components/shop/account/subscriptions/ShopAccountSubscriptionsBase.jsx","components/shop/account/subscriptions/ShopAccountSubscriptions.jsx","components/shop/account/subscriptions/credits/queries.js","components/shop/account/subscriptions/credits/ShopAccountSubscriptionCreditsBase.jsx","components/shop/account/subscriptions/credits/ShopAccountSubscriptionCredits.jsx","components/shop/classes/book/ShopClassBookBack.jsx","components/shop/classes/book/ShopClassBookBase.jsx","components/shop/classes/book/ShopClassBookClasspassBtn.jsx","components/shop/classes/book/ShopClassBookClasspasses.jsx","components/shop/classes/book/ShopClassBookSubscriptionBtn.jsx","components/shop/classes/book/ShopClassBookSubscriptions.jsx","components/shop/classes/book/ShopClassBookPriceBtn.jsx","components/shop/classes/book/ShopClassBookPriceDropin.jsx","components/shop/classes/book/ShopClassBookPriceTrial.jsx","components/shop/classes/book/queries.js","components/shop/classes/book/ShopClassBook.jsx","components/shop/classes/booked/ShopClassBookedBase.jsx","components/shop/queries.js","components/shop/classes/booked/ShopClassBooked.jsx","components/shop/classes/schedule/ShopClassesScheduleBase.jsx","components/shop/classes/schedule/tools.js","components/shop/classes/schedule/ShopClassesScheduleFilter.jsx","components/shop/classes/schedule/ShopClassesScheduleButtonBook.jsx","components/shop/classes/schedule/ShopClassesSchedule.jsx","components/shop/contact/ShopContactBase.jsx","components/shop/contact/ShopContact.jsx","components/shop/events/ShopEventsBase.jsx","components/shop/events/queries.js","components/shop/events/ShopEvents.jsx","components/shop/event/ShopEventBase.jsx","components/shop/event/ShopEventTicketPricingCard.jsx","components/shop/event/queries.js","components/shop/event/ShopEvent.jsx","components/shop/event_ticket/ShopEventTicketBase.jsx","tools/cs_django_links.js","components/shop/ShopCheckoutForm.jsx","components/shop/event_ticket/queries.js","components/shop/event_ticket/ShopEventTicket.jsx","components/shop/home/queries.js","components/shop/home/ShopHomeBase.jsx","components/shop/home/ShopHome.jsx","components/shop/checkout/payment/ShopCheckoutPaymentBase.jsx","components/shop/checkout/queries.js","components/shop/checkout/order_summary/ShopCheckoutOrderSummary.jsx","components/shop/checkout/payment/queries.js","components/shop/checkout/payment/ShopCheckoutPayment.jsx","components/shop/checkout/complete/ShopCheckoutCompleteBase.jsx","components/shop/checkout/complete/ShopCheckoutComplete.jsx","components/shop/account/classes/queries.js","components/shop/account/classes/ShopAccountClassesBase.jsx","components/shop/account/classes/ShopAccountClasses.jsx","components/shop/classpasses/ShopClasspassesBase.jsx","components/shop/classpass/ShopClasspassPricingCard.jsx","components/shop/classpasses/queries.js","components/shop/classpasses/ShopClasspasses.jsx","components/shop/classpass/ShopClasspassBase.jsx","components/shop/classpass/queries.js","components/shop/classpass/ShopClasspass.jsx","components/shop/subscriptions/ShopSubscriptionsBase.jsx","components/shop/subscription/ShopSubscriptionPricingCard.jsx","components/shop/subscriptions/queries.js","components/shop/subscriptions/ShopSubscriptions.jsx","components/shop/subscription/CheckoutCardMollie.jsx","components/shop/subscription/CheckoutCardBankAccountRequired.jsx","components/shop/subscription/CheckoutCardDirectDebitForm.jsx","components/shop/subscription/yupSchemaDirectDebit.js","components/shop/subscription/CheckoutCardDirectDebit.jsx","components/shop/subscription/ShopSubscriptionBase.jsx","components/shop/subscription/queries.js","components/shop/subscription/ShopSubscription.jsx","components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivatedBase.jsx","components/shop/subscription_directdebit_activated/queries.js","components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivated.jsx","components/user/password/yupSchema.js","components/user/password/UserPasswordChangeForm.jsx","components/ui/CSStandaloneFormPage.jsx","components/user/password/UserPasswordChange.jsx","components/user/login/UserLoginForm.jsx","components/user/login/UserLogin.jsx","components/user/login/UserLoginRequired.jsx","components/user/login/UserLogout.jsx","components/user/session/UserSessionExpired.jsx","components/user/welcome/UserWelcome.jsx","components/Error404.js","components/shop/account/bank_account/queries.js","components/shop/account/bank_account/ShopAccountBankAccountForm.jsx","components/shop/account/bank_account/yupSchema.js","components/shop/account/bank_account/ShopAccountBankAccount.jsx","AppRoot.js","App.js","serviceWorker.js","index.js"],"names":["resources","en_US","common","console","log","i18n","use","LanguageDetector","initReactI18next","init","lng","fallbackLng","ns","defaultNS","debug","keySeparator","interpolation","escapeValue","TOKEN_AUTH","gql","_templateObject","_taggedTemplateLiteral","TOKEN_REFRESH","_templateObject2","_templateObject3","TOKEN_COOKIE_DELETE","_templateObject4","_templateObject5","TOKEN_REFRESH_COOKIE_DELETE","_templateObject6","UPDATE_ACCOUNT_PASSWORD","_templateObject7","cs_error_codes","USER_NOT_LOGGED_IN","cs_local_storage_keys","AUTH_TOKEN","AUTH_TOKEN_EXP","AUTH_TOKEN_ORIGIAT","AUTH_REFRESH_TOKEN","AUTH_REFRESH_TOKEN_EXP","AUTH_LOGIN_NEXT","FINANCE_EXPENSES_FILTER_DATE_FROM","FINANCE_EXPENSES_FILTER_DATE_UNTIL","FINANCE_EXPENSES_FILTER_SUPPLIER","FINANCE_INVOICES_FILTER_STATUS","FINANCE_INVOICES_EDIT_RETURN","FINANCE_ORDERS_FILTER_STATUS","FINANCE_QUOTES_EDIT_RETURN","FINANCE_QUOTES_FILTER_STATUS","FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE","INSIGHT_CLASSPASSES_YEAR","INSIGHT_REVENUE_YEAR","INSIGHT_SUBSCRIPTIONS_YEAR","INSIGHT_TRIALPASSES_YEAR","INSIGHT_TRIALPASSES_MONTH","ORGANIZATION_CLASSTYPES_ARCHIVED","RELATIONS_ACCOUNTS_FILTER_TYPE","RELATIONS_ACCOUNTS_SEARCH","RELATIONS_ACCOUNTS_IS_ACTIVE","RELATIONS_ACCOUNT_NOTES_NOTE_TYPE","RELATIONS_ACCOUNT_PROFILE_RETURN","RELATIONS_BUSINESSES_SHOW_ARCHIVE","RELATIONS_BUSINESSES_SEARCH","SCHEDULE_APPOINTMENTS_DATE_FROM","SCHEDULE_APPOINTMENTS_DATE_UNTIL","SCHEDULE_APPOINTMENTS_ORDER_BY","SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE","SCHEDULE_APPOINTMENTS_FILTER_LOCATION","SCHEDULE_CLASSES_DATE_FROM","SCHEDULE_CLASSES_DATE_UNTIL","SCHEDULE_CLASSES_ORDER_BY","SCHEDULE_CLASSES_FILTER_CLASSTYPE","SCHEDULE_CLASSES_FILTER_INSTRUCTOR","SCHEDULE_CLASSES_FILTER_LEVEL","SCHEDULE_CLASSES_FILTER_LOCATION","SCHEDULE_CLASSES_ENROLLMENT_SEARCH","SCHEDULE_CLASSES_ENROLLMENT_RETURN","SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH","SCHEDULE_EVENTS_ARCHIVED","SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH","SCHEDULE_SHIFTS_DATE_FROM","SCHEDULE_SHIFTS_DATE_UNTIL","SCHEDULE_SHIFTS_ORDER_BY","SCHEDULE_SHIFTS_FILTER_SHIFT","SCHEDULE_SHIFTS_FILTER_LOCATION","SELFCHECKIN_CHECKIN_SEARCH","SHOP_ACCOUNT_BANK_ACCOUNT_NEXT","SHOP_ACCOUNT_PROFILE_NEXT","SHOP_CLASSES_DATE_FROM","SHOP_CLASSES_DATE_UNTIL","SHOP_CLASSES_ORDER_BY","SHOP_CLASSES_FILTER_CLASSTYPE","SHOP_CLASSES_FILTER_INSTRUCTOR","SHOP_CLASSES_FILTER_LEVEL","SHOP_CLASSES_FILTER_LOCATION","CSAuth","login","tokenData","localStorage","setItem","CSLS","payload","exp","origIat","refreshExpiresIn","removeItem","updateTokenInfo","refreshTokenData","cleanup","warn","logout","arguments","length","undefined","this","GET_APP_SETTINGS_QUERY","UPDATE_APP_SETTINGS","GET_ORGANIZATION_QUERY","UPDATE_ORGANIZATION","withTranslation","_ref","t","_ref$urlLogo","urlLogo","children","_jsx","Page","className","Container","Grid","Row","_jsxs","src","alt","ToastContainer","autoClose","transition","Slide","CSStandalonePageWide","Dimmer","active","loader","AppSettingsContext","React","createContext","AppSettingsProvider","Provider","Consumer","OrganizationContext","OrganizationProvider","GET_SHOP_FEATURES_QUERY","UPDATE_SHOP_FEATURES","getNavBarItems","loading","error","data","shopFeatures","systemFeatureShop","items","push","value","to","icon","LinkComponent","withRouter","NavLink","useExact","subscriptions","classpasses","classes","events","refreshTokenExp","getItem","accountTitle","accountLink","Date","now","match","history","_useQuery","useQuery","organization","useContext","CSStandalonePageLoader","headerImageUrl","imageURL","urlLogoShopHeader","getHeaderImageUrl","Site","Wrapper","headerProps","href","navItems","Nav","Item","type","user","instructor","employee","Link","Button","outline","size","color","navProps","itemsObjects","routerContextComponentType","RouterContextProvider","footerProps","copyright","target","rel","getFullYear","nav","Col","auto","_ref$checkoutProgress","checkoutProgress","color_order","color_payment","color_complete","Tag","List","addOn","Icon","name","returnUrl","_ref$className","title","subTitle","_ref$pageHeaderOption","pageHeaderOptions","SiteWrapperShop","Header","ButtonBack","md","ShopCheckoutProgress","ShopBase","CookiePolicyBase","Card","Body","capitalize","word","lower","toLowerCase","charAt","toUpperCase","slice","_ref$color","get_list_query_variables","orderBy","organizationClasstype","organizationLevel","organizationLocation","queryVars","dateFrom","dateUntil","represent_instructor","role","badge","Badge","Fragment","represent_class_status","status","StatusIcon","get_class_messages","description","holiday","holidayName","GET_USER","get_all_permissions","permissions","groups","edges","edge_index","group_edge","node","group_node","permission_index","permission_edge","codename_split","codename","split","Set","add","has_permission","permission","resource","you_shall_not_pass","has","_ref$hideLoading","hideLoading","check_permission","GET_USER_PROFILE","GET_BACKEND_ANNOUNCEMENTS_QUERY","avatarURL","urlImageThumbnailSmall","accountDropdown","firstName","lastName","options","isDivider","SiteWrapper","timeFormat","timeFormatMoment","loadingUser","errorUser","dataUser","_useQuery2","skip","variables","accountId","moment","format","fetchPolicy","HomeHomeBase","announcements","organizationAnnouncements","upcomingClasses","i","scheduleClasses","cards","deck","map","_ref2","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","content","v4","_ref3","date","_ref4","scheduleItemId","frequencyType","organizationLocationRoom","timeStart","timeEnd","spaces","countAttendingAndBooked","xs","sm","HasPermissionWrapper","link","_ref$linkTitle","linkTitle","block","params","AutomationHomeItemButton","ContentCard","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","apply","concat","handleOnScroll","scrollTop","document","documentElement","body","scrollHeight","clientHeight","window","innerHeight","Math","ceil","pageInfo","props","hasNextPage","onLoadMore","_createClass","key","addEventListener","removeEventListener","cardTitle","headerContent","isLoadingMore","cardTabs","hasCardBody","Title","Footer","onClick","Component","defaultProps","f","GET_TASK_RESULT_QUERY","_ref$returnUrl","_ref$showNewTask","showNewTask","AutomationBack","dateTimeFormatMoment","taskName","pollInterval","fetchMore","AutomationAccountSubscriptionCreditsBase","taskResults","djangoCeleryResultTaskResults","after","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","__typename","_toConsumableArray","Table","ColHeader","AutomationTaskResultStatus","dateDone","taskKwargs","result","AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA","Yup","shape","subscriptionYear","required","positive","min","max","subscriptionMonth","isSubmitting","errors","FoForm","Form","Group","label","Field","autoComplete","ErrorMessage","component","disabled","ADD_TASK","_useMutation","useMutation","addTask","_slicedToArray","Formik","initialValues","getMonth","validationSchema","onSubmit","values","setSubmitting","input","month","year","refetchQueries","query","then","toast","success","position","POSITION","BOTTOM_RIGHT","catch","AutomationAccountSubscriptionCreditForm","AutomationAccountSubscriptionInvoicesBase","AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA","invoiceDate","AutomationAccountSubscriptionInvoicesForm","AutomationAccountSubscriptionMollieCollectionBase","AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA","AutomationAccountSubscriptionMollieCollectionForm","FinanceHome","linkTitleView","lg","HomeItemButton","GET_COSTCENTERS_QUERY","GET_COSTCENTER_QUERY","ADD_COSTCENTER","UPDATE_COSTCENTER","ARCHIVE_COSTCENTER","addUrl","_ref$buttonText","buttonText","_ref$showBack","showBack","ButtonAdd","_useState","useState","_useState2","archived","setArchived","refetch","archiveCostcenter","headerOptions","Options","FinanceCostCentersBase","costcenters","financeCostcenters","code","id","prefix","COSTCENTER_SCHEMA","addCostcenter","parseInt","updateCostcenter","initialData","financeCostcenter","url","_ref$showListButtons","showListButtons","ButtonExport","refreshTokenAndOpenExportLinkInNewTab","doTokenRefresh","exportUrl","refreshToken","dataurl","createElement","appendChild","click","removeChild","download","protectedMediaUrl","_ref$showLabel","showLabel","RootComponent","confirm_action","msgConfirm","msgDescription","msgSuccess","actionFunction","functionVariables","confirmAlert","customUI","onClose","duplicateFinanceExpense","financeExpenseId","financeExpense","actionFunctionVariables","_ref$buttonClass","buttonClass","_ref$buttonIcon","buttonIcon","_ref$buttonTextColor","buttonTextColor","GET_EXPENSES_QUERY","GET_EXPENSE_QUERY","GET_INPUT_VALUES_QUERY","CREATE_FINANCE_EXPENSE","UPDATE_FINANCE_EXPENSE","DUPLICATE_FINANCE_EXPENSE","DELETE_FINANCE_EXPENSE","confirm_delete","deleteFunction","expenses","dateFormat","showColRelation","_useMutation3","deleteFinanceExpense","supplier","summary","totalAmountDisplay","percentageDisplay","totalTaxDisplay","financeGlaccount","FileProtectedDownloadTableButton","urlProtectedDocument","ButtonConfirm","expenseNumber","selected","_ref$onChange","onChange","_ref$onBlur","onBlur","_ref$isClearable","isClearable","_ref$placeholderText","placeholderText","DatePicker","todayButton","showMonthDropdown","showYearDropdown","dropdownMode","getDefaultValueDate","lsKey","dateValue","startOf","endOf","lsValue","updateLocalStorageAndRefetch","setSupplier","_useState3","_useState4","setDateFrom","_useState5","_useState6","setDateUntil","s","class","event","businesses","CSDatePicker","dateStr","dateFromDefault","dateUntilDefault","location","FinanceExpensesBase","financeExpenses","FinanceExpensesFilter","vars","FinanceExpensesList","dateToLocalISO","dateToLocalISOTime","getHours","getMinutes","TimeStringToJSDateOBJ","time_string","date_obj","time_split","setHours","setMinutes","getWeekdayNames","getMonthNamesShort","EXPENSE_SCHEMA","amount","tax","percentage","financeTaxRate","customFileInputLabelStyle","whiteSpace","display","overflow","inputData","setFieldTouched","setFieldValue","inputFileName","fileInputLabel","_ref$handleFileInputC","handleFileInputChange","financeGlaccounts","ref","style","ButtonFormSubmit","ButtonFormCancel","createFinanceExpense","fileName","setFileName","useRef","files","inputVars","documentFileName","reader","FileReader","onload","reader_event","b64_enc_file","file","current","readAsDataURL","FinanceExpenseForm","updateFinanceExpense","initialSupplier","initialGlaccount","initialCostcenter","doUpdate","EXPENSES_EXPORT_SCHEMA","dateStart","dateEnd","setDateStart","setDateEnd","prepared","setPrepared","_useState7","_useState8","setExportUrl","isoDateStart","isoDateEnd","touched","FinanceExpensesExportForm","GET_GLACCOUNTS_QUERY","GET_GLACCOUNT_QUERY","ADD_GLACCOUNT","UPDATE_GLACCOUNT","ARCHIVE_GLACCOUNT","archiveGlaccount","FinanceGLAccountsBase","glaccounts","GLACCOUNT_SCHEMA","addGlaccount","updateGlaccount","getDefaultValue","defaultValue","FinanceInvoicesFilter","FinanceInvoicesStatus","GET_INVOICES_QUERY","GET_INVOICE_QUERY","UPDATE_INVOICE","CANCEL_AND_CREATE_CREDIT_INVOICE","DELETE_FINANCE_INVOICE","CREATE_INVOICE_ITEM","UPDATE_INVOICE_ITEM","DELETE_INVOICE_ITEM","_templateObject8","DELETE_INVOICE_PAYMENT","_templateObject9","invoices","_ref$showBtnPDF","showBtnPDF","_ref$showColRelation","deleteFinanceInvoice","business","invoiceNumber","Text","Small","trunc","account","fullName","dateSent","dateDue","totalDisplay","balanceDisplay","pathname","FinanceInvoicesBase","financeInvoices","FinanceInvoicesList","INVOICES_EXPORT_SCHEMA","setStatus","_useState9","_useState10","FinanceInvoicesExportForm","addInvoiceItem","financeInvoice","deleteInvoiceItem","productName","handleChange","e","quantity","price","financeTaxRates","rateType","FinanceInvoiceItemDelete","Object","keys","updateInvoiceItem","setTouched","FinanceInvoiceItemEditForm","refetchInvoice","updateItem","updating","setUpdating","DragDropContext","onDragEnd","draggableId","destination","source","reason","droppableId","index","node_id","line_number","lineNumber","setTimeout","updateLineNumber","statusColor","FinanceInvoiceItemAdd","Droppable","provided","snapshot","_objectSpread","innerRef","droppableProps","idx","Draggable","draggableProps","dragHandleProps","FinanceInvoiceItemEdit","placeholder","tinymceBasicConf","resize","menubar","plugins","statusbar","toolbar","Editor","tinymceScriptSrc","textareaName","initialValue","terms","getContent","footer","submitForm","note","updateInvoice","TabbedCard","initialTab","Tab","FinanceInvoiceEditTermsForm","_ref5","_ref6","_ref7","FinanceInvoiceEditFooterForm","_ref8","_ref9","_ref10","FinanceInvoiceEditNoteForm","subtotalDisplay","taxDisplay","paidDisplay","financePaymentMethod","financePaymentMethods","initialPaymentMethod","FinanceInvoiceEditOptionsForm","address","phone","email","registration","taxRegistration","FinanceInvoiceEditSummaryForm","creditInvoiceId","Alert","creditInvoiceNumber","relationCompany","relationCompanyRegistration","relationCompanyTaxRegistration","relationContactName","relationAddress","relationPostcode","relationCity","relationCountry","deleteInvoicePayment","amountDisplay","paymentAddUrl","payments","onlinePaymentId","FinanceInvoiceEditPaymentDelete","cancelAndCreateCreditInvoice","FinanceInvoiceEditBase","export_url","payment_add_url","shopAccountInvoiceUrl","protocol","host","Dropdown","toggle","triggerContent","cancelAndCreateCreditFinanceInvoice","FinanceInvoiceEditSummary","ml","FinanceInvoiceEditOrganization","FinanceInvoiceEditTo","FinanceInvoiceEditBalance","FinanceInvoiceEditOptions","FinanceInvoiceEditItems","FinanceInvoiceEditAdditional","FinanceInvoiceEditPayments","pageTitle","Label","checked","customTo","_Fragment","FinanceInvoiceEditToBase","initialBusiness","FinanceInvoiceEditToForm","GET_INVOICE_GROUPS_QUERY","GET_INVOICE_GROUP_QUERY","UPDATE_INVOICE_GROUP","ADD_INVOICE_GROUP","ARCHIVE_INVOICE_GROUP","_ref$showEditBack","showEditBack","archiveInvoiceGroup","FinanceInvoiceGroupsBase","invoiceGroups","financeInvoiceGroups","nextId","dueAfterDays","prefixYear","autoResetPrefixYear","BadgeBoolean","displayPublic","INVOICE_GROUP_SCHEMA","moreThan","_ref$edit","edit","addInvoiceGroup","FinanceInvoiceGroupForm","updateInvoiceGroup","financeInvoiceGroup","INVOICE_GROUP_DEFAULT_SCHEMA","GET_INVOICE_GROUPS_DEFAULTS_QUERY","UPDATE_INVOICE_GROUP_DEFAULT","fetch_default_type_name","itemType","updateDefaultGroup","FinanceInvoiceGroupDefaultsBase","financeInvoiceGroupDefaults","FinanceInvoiceGroupDefaultForm","GET_INVOICE_PAYMENT_QUERY","ADD_FINANCE_INVOICE_PAYMENT","UPDATE_FINANCE_INVOICE_PAYMENT","_ref$form_type","form_type","invoiceId","invoice_id","queryLoading","queryError","invoice_number","padding","relationName","onCompleted","addInvoicePayment","FinanceInvoicePaymentBase","balance","FinanceInvoicePaymentForm","invoiceQueryLoading","invoiceQueryError","invoiceData","paymentQueryLoading","paymentQueryError","paymentData","updateInvoicePayment","financeInvoicePayment","initialDate","FinanceOrdersFilter","FinanceOrderStatus","GET_ORDERS_QUERY","DELETE_FINANCE_ORDER","deleteOrder","orderNumber","dateTimeFormat","FinanceOrdersBase","orders","financeOrders","createdAt","FinanceOrderDelete","batchType","_ref$showAdd","showAdd","batch_type","GET_PAYMENT_BATCHES_QUERY","GET_PAYMENT_BATCH_QUERY","GET_INPUT_VALUES","ADD_PAYMENT_BATCH","UPDATE_PAYMENT_BATCH","DELETE_PAYMENT_BATCH","msgEmptyList","deletePaymentBatch","FinancePaymentBatchesBase","financePaymentBatches","BadgeFinancePaymentBatchStatus","executionDate","financePaymentBatchCategory","unstyled","get_add_options_collection","get_add_options_payment","FinancePaymentBatchCategory","categoryType","batchId","setDisabled","updateFinancePaymentBatch","sentToBankColor","approvedColor","awaitingApprovalColor","rejectedColor","onClickStatusButton","newStatus","appSettings","FinancePaymentBatchViewBase","financePaymentBatch","includeZeroAmounts","countItems","exports","accountHolder","accountNumber","accountBic","currency","PAYMENT_BATCH_INVOICES_SCHEMA","PAYMENT_BATCH_CATEGORY_SCHEMA","PAYMENT_BATCH_EDIT_SCHEMA","_ref$create","create","_ref$category","category","financePaymentBatchCategories","batchCategoryType","category_type","addFinancePaymentBatch","yupSchema","createFinancePaymentBatch","FinancePaymentCollectionBatchForm","inputValues","showArchive","GET_PAYMENT_BATCH_CATEGORIES_QUERY","GET_PAYMENT_BATCH_CATEGORY_QUERY","ARCHIVE_PAYMENT_BATCH_CATEGORY","archivePaymentBatchCategory","FinancePaymentBatchCategoriesBase","payment_batch_categories","ADD_PAYMENT_BATCH_CATEGORY","addFinancePaymentBatchCategory","FinancePaymentBatchCategoryForm","UPDATE_PAYMENT_BATCH_CATEGORY","paymentBatchCategoryId","updateFinancePaymentBatchCategory","GET_FINANCE_ORDER_QUERY","UPDATE_ORDER","updateOrder","FinanceOrderEditBase","order","financeOrder","FinanceOrderEditForm","priceDisplay","message","GET_PAYMENT_METHODS_QUERY","GET_PAYMENT_METHOD_QUERY","ADD_PAYMENT_METHOD","UPDATE_PAYMENT_METHOD","ARCHIVE_PAYMENT_METHOD","archivePaymentMethod","FinancePaymentMethodsBase","paymentMethods","systemMethod","PAYMENT_METHOD_SCHEMA","addPaymentMethod","FinancePaymentMethodForm","updatePaymentMethod","FinanceQuotesFilter","FinanceQuoteStatus","GET_QUOTES_QUERY","GET_QUOTE_QUERY","UPDATE_QUOTE","DELETE_FINANCE_QUOTE","CREATE_QUOTE_ITEM","UPDATE_QUOTE_ITEM","DELETE_QUOTE_ITEM","quotes","deleteFinanceQuote","quoteNumber","dateExpire","FinanceQuotesBase","financeQuotes","FinanceQuotesList","QUOTES_EXPORT_SCHEMA","FinanceQuotesExportForm","addQuoteItem","financeQuote","deleteQuoteItem","FinanceQuoteItemDelete","updateQuoteItem","FinanceQuoteItemEditForm","refetchQuote","FinanceQuoteItemAdd","FinanceQuoteItemEdit","updateQuote","FinanceQuoteEditTermsForm","FinanceQuoteEditFooterForm","FinanceQuoteEditNoteForm","FinanceQuoteEditOptionsForm","FinanceQuoteEditSummaryForm","FinanceQuoteEditBase","FinanceQuoteEditSummary","FinanceQuoteEditOrganization","FinanceQuoteEditTo","FinanceQuoteEditBalance","FinanceQuoteEditOptions","FinanceQuoteEditItems","FinanceQuoteEditAdditional","FinanceQuoteEditToBase","FinanceQuoteEditToForm","GET_QUOTE_GROUPS_QUERY","GET_QUOTE_GROUP_QUERY","UPDATE_QUOTE_GROUP","ADD_QUOTE_GROUP","ARCHIVE_QUOTE_GROUP","archiveQuoteGroup","FinanceQuoteGroupsBase","quoteGroups","financeQuoteGroups","expiresAfterDays","QUOTE_GROUP_SCHEMA","addQuoteGroup","FinanceQuoteGroupForm","updateQuoteGroup","financeQuoteGroup","GET_TAXRATES_QUERY","GET_TAXRATE_QUERY","ADD_TAXRATE","UPDATE_TAXRATE","ARCHIVE_TAXRATE","archiveTaxrate","FinanceTaxRatesBase","taxrates","TAX_RATE_SCHEMA","typeError","addFinanceTaxrate","updateTaxrate","TAX_SUMMARY_SCHEMA","_ref$setFieldTouched","_ref$setFieldValue","FinanceTaxRatesSummaryFilter","GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY","FinanceTaxRatesSummaryBase","taxRatesSummary","insightFinanceTaxRateSummary","InsightHome","GET_INSIGHT_ACCOUNTS_INACTIVES","GET_INSIGHT_ACCOUNTS_INACTIVE","ADD_INSIGHT_ACCOUNTS_INACTIVE","DELETE_INSIGHT_ACCOUNTS_INACTIVE","DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS","deleteInsightAccountsInactive","InsightInactiveAccountsBase","insightAccountInactives","noActivityAfterDate","countInactiveAccounts","countDeletedInactiveAccounts","created_at","addInsightAccountsInactive","subtract","InsightInactiveAccountsForm","deleteFunctionVariables","pageHeaderButtonList","deleteAccounts","InsightInactiveAccountsViewBase","insightAccountInactive","ButtonDelete","accounts","lastLogin","GET_INSIGHT_CLASSPASSES_QUERY","InsightBackHome","previousYear","currentYear","nextYear","export_url_active","export_url_sold","InsightClasspassesBase","monthNames","chartData","insightAccountClasspasses","months","item","monthName","ResponsiveContainer","width","aspect","AreaChart","height","margin","top","right","left","bottom","XAxis","dataKey","YAxis","Tooltip","Legend","Area","stroke","colors","fillOpacity","fill","GET_REVENUE_QUERY","_ref$refetch","BarChart","Bar","stackId","InsightRevenueBase","InsightRevenueDisplay","insightRevenueTotal","insightRevenueSubscriptions","insightRevenueClasspasses","insightRevenueEventTickets","insightRevenueOther","INSIGHT_INSTRUCTOR_CLASSES_SCHEMA","GET_INSTRUCTORS_QUERY","GET_INSTRUCTORS_CLASSES_MONTH_CLASSES","instructors","_useLazyQuery","useLazyQuery","_useLazyQuery2","getInstructoClassesInMonth","_useLazyQuery2$","calledReport","called","loadingReport","errorReport","dataReport","InsightInstructorClassesMonthBase","InsightInstructorClassesForm","insightInstructorClassesMonth","GET_INSIGHT_SUBSCRIPTIONS_QUERY","export_url_stopped","InsightSubscriptionsBase","insightAccountSubscriptions","LineChart","CartesianGrid","strokeDasharray","Line","GET_TRIALPASSES_QUERY","getListQueryVariables","dateStartFrom","firstDayMonth","getFirstDayMonth","dateStartUntil","getLastDayMonth","listVariables","InsightTrialpassesFilter","InsightTrialpassesBase","accountClasspasses","organizationClasspass","organizationSubscription","OrganizationHome","ORGANIZATION_SCHEMA","updateOrganization","OrganizationEditBase","OrganizationForm","formTitle","colorBackground","colorText","colorAccent","colorSecondary","OrganizationBrandingBase","GalleryCard","Image","urlLogoLogin","Details","urlLogoInvoice","urlLogoEmail","urlLogoSelfCheckin","brandingColorBackground","brandingColorText","brandingColorAccent","brandingColorSecondary","OrganizationBrandingEditColorsForm","updateField","update_field","logoLoginFileName","logoLogin","logoInvoiceFileName","logoInvoice","logoEmailFileName","logoEmail","logoShopHeaderFileName","logoShopHeader","logoSelfCheckinFileName","logoSelfCheckin","OrganizationBrandingEditForm","GET_ANNOUNCEMENTS_QUERY","GET_ANNOUNCEMENT_QUERY","ADD_ANNOUNCEMENT","UPDATE_ANNOUNCEMENT","DELETE_ANNOUNCEMENT","deleteAnnouncement","OrganizationAnnouncementsBase","displayShop","displayBackend","priority","ANNOUNCEMENT_SCHEMA","addAnnouncement","OrganizationAnnouncementForm","announcementId","updateAnnouncement","organizationAnnouncement","GET_CLASSPASSES_QUERY","GET_CLASSPASS_QUERY","CREATE_CLASSPASS","UPDATE_CLASSPASS","ARCHIVE_CLASSPASS","archiveClasspass","OrganizationClasspassesBase","organizationClasspasses","trialPass","unlimited","validity","validityUnitDisplay","CLASSPASS_SCHEMA","validityUnit","quickStatsAmount","OrganizationClasspassForm","unlimied","createClasspass","updateClasspass","initialTaxRate","GET_CLASSPASS_GROUPS_QUERY","GET_CLASSPASS_GROUP_QUERY","GET_CLASSPASS_GROUP_PASSES_QUERY","ADD_CLASSPASS_GROUP","UPDATE_CLASSPASS_GROUP","DELETE_CLASSPASS_GROUP","ADD_CARD_TO_GROUP","DELETE_CARD_FROM_GROUP","deleteClasspassGroup","OrganizationClasspassesGroupsBase","classpass_groups","organizationClasspassGroups","substring","CLASSPASS_GROUP_SCHEMA","addClasspassGroup","hasExtraSpace","updateClasspassGroup","organizationClasspassGroup","groupId","addCardToGroup","deleteCardFromGroup","passes","group","group_passes","pass_id","GET_CLASSTYPES_QUERY","GET_CLASSTYPE_QUERY","ADD_CLASSTYPE","UPDATE_CLASSTYPE","UPDATE_CLASSTYPE_IMAGE","ARCHIVE_CLASSTYPE","archiveClasstype","OrganizationClasstypesBase","classtypes","organizationClasstypes","Avatar","CLASSTYPE_SCHEMA","urlWebsite","addClasstype","image","updateClasstype","classtypeId","uploadImage","imageFileName","GET_DISCOVERIES_QUERY","GET_DISCOVERY_QUERY","ADD_DISCOVERY","UPDATE_DISCOVERY","ARCHIVE_DISCOVERY","archiveDiscovery","OrganizationDiscoveriesBase","discoveries","organizationDiscoveries","DISCOVERY_SCHEMA","addDiscovery","updateDiscovery","organizationDiscovery","organizationId","organization_id","docTypes","docType","FormatISODateStr","ISODateStr","mediaUrl","_ref$target","GET_DOCUMENTS_QUERY","GET_DOCUMENT_QUERY","ADD_DOCUMENT","UPDATE_DOCUMENT","DELETE_DOCUMENT","deleteOrganizationDocument","confirmDelete","version","documentType","getSubtitle","document_type","OrganizationDocumentsBase","organizationDocuments","ISODateString","FileDownloadTableButton","urlDocument","OrganizationDocumentsDelete","addDocument","updateDocument","organizationDocument","GET_HOLIDAYS_QUERY","GET_HOLIDAY_QUERY","ADD_HOLIDAY","UPDATE_HOLIDAY","DELETE_HOLIDAY","GET_HOLIDAY_LOCATIONS_QUERY","ADD_LOCATION_TO_HOLIDAY","DELETE_LOCATION_FROM_HOLIDAY","deleteHoliday","OrganizationHolidaysBase","holidays","organizationHolidays","organizationLocations","HOLIDAY_SCHEMA","addHoliday","OrganizationHolidayForm","updateHoliday","organizationHoliday","holidayId","addLocationToHoliday","deleteLocationFromHoliday","locations","holiday_locations","locationId","GET_LANGUAGES_QUERY","GET_LANGUAGE_QUERY","ADD_LANGUAGE","UPDATE_LANGUAGE","ARCHIVE_LANGUAGE","archiveLanguage","OrganizationLanguagesBase","languages","organizationLanguages","LANGUAGE_SCHEMA","addLanguage","OrganizationLanguageForm","updateLanguage","organizationLanguage","GET_LOCATIONS_QUERY","GET_LOCATION_QUERY","ADD_LOCATION","UPDATE_LOCATION","ARCHIVE_LOCATION","archiveLocation","OrganizationLocationsBase","LOCATION_SCHEMA","addLocation","updateLocation","GET_LOCATION_ROOMS_QUERY","GET_LOCATION_ROOM_QUERY","ADD_LOCATION_ROOM","UPDATE_LOCATION_ROOM","ARCHIVE_LOCATION_ROOM","location_id","organizationLocationId","archiveLocationRoom","OrganizationLocationRoomsBase","locationRooms","organizationLocationRooms","organizationLocationsRooms","LOCATION_ROOM_SCHEMA","addLocationRoom","OrganizationLocationRoomForm","updateLocationRoom","GET_LEVELS_QUERY","GET_LEVEL_QUERY","ADD_LEVEL","UPDATE_LEVEL","ARCHIVE_LEVEL","archiveLevel","OrganizationLevelsBase","levels","organizationLevels","LEVEL_SCHEMA","addLevel","OrganizationLevelForm","updateLevel","editUrl","GET_ORGANIZATION_PRODUCTS_QUERY","GET_ORGANIZATION_PRODUCT_QUERY","ADD_ORGANIZATION_PRODUCT","UPDATE_ORGANIZATION_PRODUCT","ARCHIVE_ORGANIZATION_PRODUCT","confirm_archive","archiveFunction","archiveFunctionVariables","confirm_unarchive","unArchiveFunction","unArchiveFunctionVariables","archiveProduct","ButtonUnArchive","ButtonArchive","OrganizationProductsBase","products","organizationProducts","ButtonEdit","OrganizationProductArchive","PRODUCT_SCHEMA","addOrganizationProduct","OrganizationProductForm","updateOrganizationProduct","organizationProduct","updateProduct","GET_SHIFTS_QUERY","GET_SHIFT_QUERY","ADD_SHIFT","UPDATE_SHIFT","ARCHIVE_SHIFT","archiveShift","OrganizationShiftsBase","shifts","organizationShifts","SHIFT_SCHEMA","addShift","OrganizationShiftForm","updateShift","organizationShift","GET_SUBSCRIPTIONS_QUERY","GET_SUBSCRIPTION_QUERY","CREATE_SUBSCRIPTION","UPDATE_SUBSCRIPTION","ARCHIVE_SUBSCRIPTION","archiveSubscription","OrganizationSubscriptionsBase","organizationSubscriptions","subscriptionUnitDisplay","priceTodayDisplay","SUBSCRIPTION_SCHEMA","sortOrder","minDuration","subscriptionUnit","creditValidity","reconciliationClasses","termsAndConditions","createSubscription","organizationMembership","OrganizationSubscriptionForm","updateSubscription","initialMembership","GET_SUBSCRIPTION_GROUPS_QUERY","GET_SUBSCRIPTION_GROUP_QUERY","GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY","ADD_SUBSCRIPTION_GROUP","UPDATE_SUBSCRIPTION_GROUP","DELETE_SUBSCRIPTION_GROUP","deleteSubscriptionGroup","OrganizationGroupsSubscriptionsBase","subscription_groups","organizationSubscriptionGroups","SUBSCRIPTION_GROUP_SCHEMA","addSubscriptionGroup","OrganizationSubscriptionsGroupsBase","OrganizationSubscriptionGroupForm","updateSubscriptionGroup","organizationSubscriptionGroup","group_subscriptions","subscriptionId","subscription_id","GET_SUBSCRIPTION_PRICES_QUERY","GET_SUBSCRIPTION_PRICE_QUERY","ADD_SUBSCRIPTION_PRICE","UPDATE_SUBSCRIPTION_PRICE","DELETE_SUBSCRIPTION_PRICE","deleteSubscriptionPrice","OrganizationSubscriptionsPricesBase","subscriptionPrices","organizationSubscriptionPrices","organizationSubscriptionsPrices","SUBSCRIPTION_PRICE_SCHEMA","addSubscriptionPrice","OrganizationSubscriptionPriceForm","updateSubscriptionPrice","organizationSubscriptionPrice","RelationsHome","InputSearch","inputValue","createRef","initialValueKey","state","submitValue","doneTypingInterval","typingTimer","focus","clearTimeout","_this2","setState","_this3","onKeyUp","onInputKeyUp","bind","onInputChange","onClear","isActive","customer","search","searchName","Select","GET_ACCOUNTS_QUERY","GET_ACCOUNT_QUERY","ADD_ACCOUNT","UPDATE_ACCOUNT","UPDATE_ACCOUNT_ACTIVE","DELETE_ACCOUNT","setIsLoadingMore","onError","updateAccountActive","deleteAccount","RelationsAccountsBase","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","subscriptionsLatest","subscription","classpassesLatest","classpass","classesRemainingDisplay","SocialNetworksList","inline","placement","mobile","first_name","last_name","ACCOUNT_SCHEMA","addAccount","createAccount","RelationsAccountForm","ISO_COUNTRY_CODES","dateOfBirth","emergency","postcode","city","country","Code","Name","invoiceToBusiness","keyNumber","profile_active","subscriptions_active","classpasses_active","classes_active","documents_active","tickets_active","instructor_profile_active","orders_active","invoices_active","bank_account_active","notes_active","finance_payment_batch_category_item_active","accepted_documents_active","_ref$avatarSize","avatarSize","Media","activeLink","transparent","GroupItem","back","_ref$pageHeaderButton","_ref$activeLink","_ref$user","account_id","headerTitle","ProfileCardSmall","ProfileMenu","updateAccount","RelationsAccountProfileBase","gender","input_vars","RelationsAccountProfileForm","updateImage","RelationsAccountProfileImageForm","GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY","acceptedDocuments","accountAcceptedDocuments","RelationsAccountsBack","DocumentType","dateAccepted","clientIp","GET_ACCOUNT_BANK_ACCOUNTS_QUERY","UPDATE_ACCOUNT_BANK_ACCOUNT","GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY","CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE","UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE","DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE","_ref$bankAccountId","bankAccountId","holder","number","bic","updateAccountBankAccount","deleteAccountBankAccountMandate","RelationsAccountBankAccountBase","accountBankAccount","accountBankAccounts","mandates","RelationsAccountBankAccountForm","reference","signatureDate","bank_account_id","createAccountBankAccountMandate","refrence","RelationsAccountBankAccountMandateForm","mandateId","updateAccountBankAccountMandate","mandate","accountBankAccountMandate","signDate","_ref$account","GET_ACCOUNT_CLASSES_QUERY","GET_SCHEDULE_CLASS_ATTENDANCE_QUERY","GET_SCHEDULE_CLASS_QUERY","DELETE_SCHEDULE_CLASS_ATTENDANCE","UPDATE_SCHEDULE_ITEM_ATTENDANCE","RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE","deleteScheduleItemAttendance","scheduleItem","AccountClassesBase","scheduleItemAttendances","BadgeBookingStatus","bookingStatus","AccountClassDelete","GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY","GET_SCHEDULE_ITEM_ENROLLMENT_QUERY","GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY","GET_ACCOUNT_SUBSCRIPTION_QUERY","CREATE_SCHEDULE_ITEM_ENROLLMENT","UPDATE_SCHEDULE_ITEM_ENROLLMENT","DELETE_SCHEDULE_ITEM_ENROLLMENT","GET_ACCOUNT_ENROLLMENTS_QUERY","getAccountsQueryVariables","getEnrollmentsListQueryVariables","dateEnd_Isnull","deleteScheduleItemEnrollment","accountSubscription","weekdayNames","AccountEnrollmentsBase","scheduleItemEnrollments","frequencyInterval","ScheduleClassEnrollmentDelete","SCHEDULE_CLASS_ENROLLMENT_SCHEMA","menuActiveLink","AccountEnrollmentBack","updateScheduleClassEnrollment","scheduleItemEnrollment","ScheduleClassEnrollmentForm","GET_ACCOUNT","isPublic","GET_CLASSES_QUERY","GET_CLASS_QUERY","CREATE_CLASS","get_classes_query_variables","searchDate","btnAction","localStorateKeySearchValue","btnDisableClassesIds","btnDisabledMessage","selectedDate","setSelectedDate","renderActionButton","scheduleClassId","Search","account2","role2","BadgePublic","SearchClassesOnDate","mollieCustomerId","passwordNew","updateAccountPassword","RelationsAccountPasswordForm","RelationsAccountMollieCustomerForm","GET_ACCOUNT_CLASSPASSES_QUERY","GET_ACCOUNT_CLASSPASS_QUERY","CREATE_ACCOUNT_CLASSPASS","UPDATE_ACCOUNT_CLASSPASS","DELETE_ACCOUNT_CLASSPASS","deleteAccountClasspass","nullable","createAccountClasspass","classpassId","accountClasspass","AccountClasspassForm","initialdata","GET_ACCOUNT_CLASSPASS_CLASSES_QUERY","cardTitleWithCardInfo","deleteAccountDocument","accountDocuments","addAccountDocument","AccountDocumentForm","DOCUMENT_SCHEMA","accountDocument","AccountDocumentFormEdit","GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY","GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY","CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","deleteAccountFinancePaymentBatchCategoryItem","AccountFinancePaymentBatchCategoryItemsBase","batchCategoryItems","accountFinancePaymentBatchCategoryItems","replace","ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA","addAccountFinancePaymentBatchCategoryItem","AccountFinancePaymentBatchCategoryItemsForm","accountFinancePaymentBatchCategoryItemId","updateAccountFinancePaymentBatchCategoryItem","accountFinancePaymentBatchCategoryItem","GET_ACCOUNT_INVOICES_QUERY","CREATE_ACCOUNT_INVOICE","pageHeader","AccountInvoicesBase","createInvoice","firstInvoiceGroup","createFinanceInvoice","AccountInvoiceAddForm","LoadMoreOnBottomScroll","GET_ACCOUNT_NOTES_QUERY","GET_ACCOUNT_NOTE_QUERY","CREATE_ACCOUNT_NOTE","UPDATE_ACCOUNT_NOTE","DELETE_ACCOUNT_NOTE","noteType","setNoteType","deleteAccountNote","AccountNotesBase","notes","accountNotes","injury","noteBy","addNote","AccountNoteForm","noteId","updateNote","accountNote","GET_ACCOUNT_ORDERS_QUERY","AccountOrdersBase","AccountOrderDelete","GET_ACCOUNT_PRODUCTS_QUERY","CREATE_ACCOUNT_PRODUCT","DELETE_ACCOUNT_PRODUCT","deleteAccountProduct","accountProducts","invoiceItems","subtitle","imgUrl","imgAlt","_ref$buttonOnClick","buttonOnClick","classname","buttonTextAdd","createAccountProduct","CSStoreCard","urlImageThumbnailLarge","GET_ACCOUNT_QUOTES_QUERY","CREATE_ACCOUNT_QUOTE","AccountQuotesBase","createQuote","quoteToBusiness","firstQuoteGroup","createFinanceQuote","AccountQuoteAddForm","GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY","ADD_ACCOUNT_SCHEDULE_EVENT_TICKET","UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET","updateAccountScheduleEventTicket","AccountScheduleEventTicketsBase","accountScheduleEventTickets","scheduleEventTicket","scheduleEvent","cancelled","infoMailSent","GET_ACCOUNT_SUBSCRIPTIONS_QUERY","CREATE_ACCOUNT_SUBSCRIPTION","UPDATE_ACCOUNT_SUBSCRIPTION","DELETE_ACCOUNT_SUBSCRIPTION","deleteAccountSubscription","accountSubscriptions","table","creditTotal","registrationFeePaid","createAccountSubscription","AccountSubscriptionForm","_ref$position","tabs","class_tabs_position","CardTabs","_ref$subscription","activeTab","credits","AccountSubscriptionEditTabs","AccountSubscriptionEditBaseBase","AccountSubscriptionEditBase","GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY","GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE","AccountSubscriptionEditListBaseBase","deleteAccountSubscriptionAltPrice","query_vars","AccountSubscriptionEditListBase","accountSubscriptionAltPrices","AccountSubscriptionEditAltPriceDelete","ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA","_ref$formTitle","ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE","addSubscriptionAltPrice","AccountSubscriptionEditAltPriceBase","AccountSubscriptionEditAltPriceForm","UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE","updateSubscriptionAltPrice","accountSubscriptionAltPrice","GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY","GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_BLOCK","deleteAccountSubscriptionBlock","accountSubscriptionBlocks","AccountSubscriptionEditBlockDelete","ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_BLOCK","addSubscriptionBlock","AccountSubscriptionEditBlockBase","AccountSubscriptionEditBlockForm","UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK","updateSubscriptionBlock","accountSubscriptionBlock","GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY","GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY","ADD_ACCOUNT_SUBSCRIPTION_CREDIT","UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT","DELETE_ACCOUNT_SUBSCRIPTION_CREDIT","deleteAccountSubscriptionCredit","accountSubscriptionCredits","reconciled","expiration","expired","scheduleItemAttendance","AccountSubscriptionEditCreditDelete","ACCOUNT_SUBSCRIPTION_CREDIT_ADD_SCHEMA","ACCOUNT_SUBSCRIPTION_CREDIT_EDIT_SCHEMA","addSubscriptionCredit","AccountSubscriptionEditCreditBase","AccountSubscriptionEditCreditAddForm","updateSubscriptionCredit","accountSubscriptionCredit","AccountSubscriptionEditCreditEditForm","GET_FINANCE_INVOICE_ITEM_QUERY","deleteAccountSubscriptionInvoice","financeInvoiceItems","AccountSubscriptionEditInvoiceDelete","ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA","queryData","addFinanceInvoice","AccountSubscriptionEditInvoiceAddBase","financeInvoiceId","AccountSubscriptionEditInvoiceAddForm","GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY","GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_PAUSE","deleteAccountSubscriptionPause","accountSubscriptionPauses","AccountSubscriptionEditPauseDelete","ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_PAUSE","addSubscriptionPause","AccountSubscriptionEditPauseBase","AccountSubscriptionEditPauseForm","UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE","updateSubscriptionPause","accountSubscriptionPause","GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY","UPDATE_ACCOUNT_INSTRUCTOR_PROFILE","ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA","appointments","education","bio","urlBio","updateAccountInstructorProfile","accountInstructorProfiles","showArchived","GET_BUSINESSES_QUERY","GET_BUSINESS_QUERY","UPDATE_BUSINESS","DELETE_BUSINESS","updateBusiness","deleteBusiness","RelationsB2BBase","vip","show_archive","ADD_BUSINESS","addBusiness","b2b","businessId","createBusiness","RelationsB2BAddForm","_ref$pageTitle","business_id","titleB2B","RelationsB2BEditMenu","emailContact","emailBilling","phone2","RelationsB2BEditBase","RelationsB2BEditForm","CREATE_B2B_INVOICE","B2BInvoiceAddForm","ScheduleHome","_ref$onClickPrevious","onClickPrevious","_ref$onClickNext","onClickNext","_ref$onClickCurrent","onClickCurrent","_ref$showCurrent","showCurrent","selectClass","setLocation","classtype","setClasstype","setInstructor","level","setLevel","tooltip","nextWeekFrom","nextWeekUntil","ButtonListWeekChooser","currentWeekFrom","currentWeekUntil","ScheduleClassesFilter","DELETE_SCHEDULE_CLASS","deleteScheduleClass","ScheduleClassesBase","ItemDivider","badgeType","CLASS_SCHEMA","walkInSpaces","enrollmentSpaces","_ref$clearable","clearable","showTimeSelect","showTimeSelectOnly","timeIntervals","timeCaption","infoMailEnabled","CSTimePicker","infoMailContent","createScheduleClass","ScheduleClassAddBase","classId","ScheduleClassForm","UPDATE_CLASS","_ref$subTitle","_ref$cardTitle","_ref$defaultCard","defaultCard","_ref$menuActiveLink","class_id","ClassEditMenu","represent_instructor_role","ClassEditBaseBase","initialTimeStart","locationRoom","starttime","weekdayName","isoWeekday","class_edit_all_subtitle","updateScheduleClass","ClassEditBase","menu_activeLink","initialLevelID","initialTimeEnd","setShowCurrent","ButtonAddEnrollment","ClassEditBack","enrollments","countEnrollments","queryEnrollmentsData","setSearchName","accountSubscriptionId","account_subscription_id","nextUrl","addScheduleClassEnrollment","using","ScheduleClassEnrollmentBack","allowed","scheduleClassEnrollmentOptions","ScheduleClassEnrollSubscriptions","shopBook","attend","FormHelp","SCHEDULE_CLASS_CLASSPASS_SCHEMA","GET_SCHEDULE_CLASS_CLASSPASSES_QUERY","UPDATE_SCHEDULE_CLASS_CLASSPASS","updateScheduleClassClasspass","scheduleItemOrganizationClasspassGroups","awaitRefetchQueries","ScheduleClassClasspassForm","enroll","SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA","GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY","UPDATE_SCHEDULE_CLASS_SUBSCRIPTION","updateScheduleClassSubscription","scheduleItemOrganizationSubscriptionGroups","ScheduleClassSubscriptionForm","GET_SCHEDULE_CLASS_ACCOUNTS_QUERY","GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY","ADD_SCHEDULE_CLASS_INSTRUCTOR","UPDATE_SCHEDULE_CLASS_INSTRUCTOR","DELETE_SCHEDULE_CLASS_INSTRUCTOR","deleteScheduleItemAccount","ButtonAddInstructor","scheduleItemAccounts","SCHEDULE_CLASS_INSTRUCTOR_SCHEMA","ScheduleClassInstructorBack","addScheduleClassInstructor","ScheduleClassInstructorForm","updateScheduleClassInstructor","scheduleItemAccount","initialAccount2","get_accounts_query_variables","get_attendance_list_query_variables","schedule_item_id","checkedInIds","classStatus","showSearchResults","setShowSearchResults","class_date","getAccounts","queryAccountsData","includes","classDate","attendance_active","attendancechart_active","edit_active","pageSubTitle","ScheduleClassBack","previousWeek","ClassMenu","class_subtitle","ScheduleClassAttendanceBaseBase","scheduleClass","setAttendanceStatus","updateAttendance","_ref$setAttendanceRef","setAttendanceRefetching","attendanceRefetching","resendInfoMail","ScheduleClassAttendanceBase","countAttending","countBooked","ScheduleClassAttendanceSearch","ScheduleClassAttendanceDelete","GET_CLASS_ATTENDANCE_COUNT_YEAR","ScheduleClassEditBase","insightClassAttendanceCountYear","weeks","weekName","week","interval","GET_BOOKING_OPTIONS_QUERY","CREATE_SCHEDULE_ITEM_ATTENDANCE","getUrlFromReturnTo","returnTo","_ref$locationId","createInput","_useMutation2","classCheckin","_useMutation2$","_ref$returnTo","onClickCheckin","ClasspassCheckinButton","blocked","paused","creditsOnDate","SubscriptionCheckinButton","priceDropin","ScheduleClassBookPriceBtn","locationID","priceTrial","listType","scheduleClassBookingOptions","prices","scheduleItemPrices","ScheduleClassBookBack","ScheduleClassBookSubscriptions","ScheduleClassBookClasspasses","organizationClasspassDropin","ScheduleClassBookPriceDropin","organizationClasspassTrial","hasReachedTrialLimit","ScheduleClassBookPriceTrial","GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY","DELETE_SCHEDULE_CLASS_WEEKLY_OTC","UPDATE_SCHEDULE_CLASS_WEEKLY_OTC","SCHEDULE_CLASS_EDIT_OTC_SCHEMA","notRequired","deleteClassOTC","showDelete","updateScheduleClassWeeklyOTC","scheduleItemWeeklyOtcs","graphQLErrors","ScheduleClassEditForm","ScheduleClassWeeklyOTCDelete","GET_SCHEDULE_ITEM_PRICES_QUERY","GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY","ADD_SCHEDULE_ITEM_PRICE","UPDATE_SCHEDULE_ITEM_PRICE","DELETE_SCHEDULE_ITEM_PRICE","deleteClassPrice","ScheduleClassPriceDelete","ScheduleClassPriceBack","addScheduleClassPrice","ScheduleClassPriceForm","editScheduleClassPrice","initialOrganizationClasspassDropin","initialOrganizationClasspassTrial","scheduleItemPrice","GET_SCHEDULE_EVENTS_QUERY","GET_SCHEDULE_EVENT_QUERY","ARCHIVE_SCHEDULE_EVENT","DUPLICATE_SCHEDULE_EVENT","archiveScheduleEvent","duplicateScheduleEvent","cardHeaderContent","ScheduleEventsBase","scheduleEvents","ScheduleEventArchive","SCHEDULE_EVENT_EDIT_SCHEMA","autoSendInfoMail","instructor2","tagline","preview","CREATE_SCHEDULE_EVENT","createScheduleEvent","autoSentInfoMail","ScheduleEventForm","eventId","event_id","ScheduleEventEditMenu","ScheduleEventEditBaseBase","cardSubTitle","UPDATE_SCHEDULE_EVENT","updateScheduleEvent","ScheduleEventEditBase","initialOrgranizationlevel","initialInstructor","initialInstructor2","GET_SCHEDULE_EVENT_ACTIVITIES_QUERY","GET_SCHEDULE_EVENT_ACTIVITY_QUERY","DELETE_SCHEDULE_EVENT_ACTIVITY","_ref$pageSubTitle","deleteScheduleEventActivity","ScheduleEventEditListBase","scheduleItems","ScheduleEventActivityDelete","SCHEDULE_EVENT_ACTIVITY_SCHEMA","ADD_SCHEDULE_EVENT_ACTIVITY","addScheduleEventTicket","sidebarContent","ScheduleEventActivityBack","scheduleItemType","ScheduleEventActivityForm","loadingActivity","errorActivity","dataActivity","ScheduleEventActivityTabs","cardActivitySubtitle","UPDATE_SCHEDULE_EVENT_ACTIVITY","updateScheduleEventTicket","ScheduleEventActivityEditBase","initialDateStart","GET_SCHEDULE_ITEM_ATTENDANCES_QUERY","schedule_item","ScheduleEventActivityAttendanceBase","GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY","GET_SCHEDULE_EVENT_EARLYBIRD_QUERY","ADD_SCHEDULE_EVENT_EARLYBIRD","UPDATE_SCHEDULE_EVENT_EARLYBIRD","DELETE_SCHEDULE_EVENT_EARLYBIRD","deleteScheduleEventEarlybird","scheduleEventEarlybirds","discountPercentage","ScheduleEventEarlybirdDelete","SCHEDULE_EVENT_EARLYBIRDS_SCHEMA","addScheduleEventEarlybird","ScheduleEventEarlybirdForm","scheduleEventEarlybirdId","updateScheduleEventEarlybird","scheduleEventEarlybird","initialDateEnd","GET_SCHEDULE_EVENT_MEDIAS_QUERY","GET_SCHEDULE_EVENT_MEDIA_QUERY","DELETE_SCHEDULE_EVENT_MEDIA","deleteScheduleEventMedia","scheduleEventMedias","ScheduleEventMediaDelete","SCHEDULE_EVENT_MEDIA_SCHEMA","ADD_SCHEDULE_EVENT_MEDIA","addScheduleEventMedia","ScheduleEventMediaBack","ScheduleEventMediaForm","scheduleEventMediaId","loadingMedia","errorMedia","dataMedia","scheduleEventMedia","UPDATE_SCHEDULE_EVENT_MEDIA","updateScheduleEventMedia","ScheduleEventMediaEditBase","updateMedia","GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY","GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_QUERY","ADD_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT","UPDATE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT","DELETE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT","deleteScheduleEventSubscriptionGroupDiscount","scheduleEventSubscriptionGroupDiscounts","ScheduleEventSubscriptionGroupDiscountDelete","SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA","scheduleEventSubscriptionGroupDiscountId","updateScheduleEventSubscriptionGroupDiscount","scheduleEventSubscriptionGroupDiscount","ScheduleEventSubscriptionGroupDiscountForm","GET_SCHEDULE_EVENT_TICKETS_QUERY","GET_SCHEDULE_EVENT_TICKET_QUERY","DELETE_SCHEDULE_EVENT_TICKET","deleteScheduleEventTicket","scheduleEventTickets","isSoldOut","BadgeSoldOut","deletable","ScheduleEventTicketDelete","SCHEDULE_EVENT_TICKET_SCHEMA","ADD_SCHEDULE_EVENT_TICKET","ScheduleEventTicketBack","ScheduleEventTicketForm","ticketId","_ref$searchResults","searchResults","loadingTicket","errorTicket","dataTicket","ScheduleEventTicketTabs","ticket","cardTicketSubtitle","UPDATE_SCHEDULE_EVENT_TICKET","ScheduleEventTicketEditBase","initialFinanceTaxRate","initialFinanceGlaccount","initialFinanceCostcenter","GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY","SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA","included","UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM","updateScheduleEventTicketScheduleItem","scheduleEventTicketActivities","scheduleEventTicketScheduleItems","ScheduleEventTicketEditActivityForm","fullEvent","addAccountScheduleEventTicket","accountIdsWithTickets","a","represent_shift_status","shift","setShift","ScheduleShiftsFilter","CREATE_SHIFT","DELETE_SCHEDULE_SHIFT","deleteScheduleShift","ScheduleShiftsBase","scheduleShifts","createScheduleShift","ScheduleShiftAddBase","ScheduleShiftForm","shiftId","shift_id","ShiftEditMenu","ShiftEditBaseBase","shift_edit_all_subtitle","ShiftEditBack","updateScheduleShift","ShiftEditBase","GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY","DELETE_SCHEDULE_ITEM_WEEKLY_OTC","UPDATE_SCHEDULE_ITEM_WEEKLY_OTC","ScheduleShiftBack","shiftDate","deleteScheduleShiftOTC","updateScheduleITEMWeeklyOTC","ScheduleShiftEditBase","shiftSubtitle","ScheduleShiftWeeklyOTCDelete","ScheduleShiftEditForm","GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY","GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY","ADD_SCHEDULE_SHIFT_ACCOUNT","UPDATE_SCHEDULE_SHIFT_ACCOUNT","DELETE_SCHEDULE_SHIFT_ACCOUNT","SCHEDULE_SHIFT_EMPLOYEE_SCHEMA","ScheduleShiftEmployeeBack","addScheduleShiftAccount","ScheduleShiftEmployeeForm","updateScheduleShiftAccount","SiteWrapperSelfCheckin","setRefetchingAttendance","showSearch","setShowSearch","refetchingAttendance","queryAttendanceLoading","queryAttendanceError","queryAttendanceData","fetchMoreAccounts","queryAccountsLoading","queryAccountsError","SelfCheckinBase","GET_ORGANIZATION_LOCATIONS_QUERY","action","GET_LOCATION_CLASSES_QUERY","today","GET_SYSTEM_SETTINGS_QUERY","UPDATE_SYSTEM_SETTING","_ref$headerSubTitle","headerSubTitle","_ref$alertBanner","alertBanner","SettingsBack","setting","loadingVersion","errorVersion","dataVersion","loadingPatch","errorPatch","dataPatch","SettingsBase","patch","systemSettings","finance_bank_accounts_iban","updateSettings","iban","settings","toString","SettingsFinanceBankAccountsForm","finance_currency","finance_currency_symbol","sidebarActive","loadingCurrency","errorCurrency","dataCurrency","loadingSymbol","errorSymbol","dataSymbol","symbol","SettingsFinanceCurrencyForm","DATETIME_SCHEMA","SettingsGeneralDateTimeForm","system_hostname","queryVariables","hostname","SettingsGeneralSystemForm","mailchimp_api_key","mailchimp_server_prefix","loadingKey","errorKey","mcUser","mcApiKey","SettingsIntegrationMailChimpForm","mollie_api_key","mollieApiKey","H4","SettingsIntegrationMollieCreateAccount","SettingsIntegrationMollieForm","GET_MAILCHIMP_LISTS_QUERY","GET_MAILCHIMP_LIST_QUERY","ADD_MAILCHIMP_LIST","UPDATE_MAILCHIMP_LIST","DELETE_MAILCHIMP_LIST","deleteMailChimpList","SettingsMailMailChimpListsBase","mailchimpLists","systemMailchimpLists","organizationmailchimpLists","mailchimpListId","SettingsMailMailChimpListDelete","MAILCHIMP_LIST_SCHEMA","frequency","addMailChimpList","SettingsMailMailChimpListForm","updateMailchimpList","systemMailchimpList","GET_NOTIFICATIONS_QUERY","CREATE_NOTIFICATION_ACCOUNT","DELETE_NOTIFICATION_ACCOUNT","notificationId","deleteNotificationAccount","systemNotification","SettingsMailNotificationsBase","notifications","systemNotifications","accountNode","SettingsMailNotificationButtonDeleteAccount","createNotificationAccount","_ref$localStorateKeyS","_ref$placeholderSearc","placeholderSearch","_ref$btnDisableAccoun","btnDisableAccountIds","_ref$btnDisabledMessa","SettingsMailNotificationButtonAddAccount","SearchAccounts","GET_SYSTEM_MAIL_TEMPLATES_QUERY","GET_SYSTEM_MAIL_TEMPLATE_QUERY","UPDATE_SYSTEM_MAIL_TEMPLATE","SettingsMailTemplatesBase","mailTemplates","systemMailTemplates","_ref$help","help","subject","comments","SettingsMailTemplateEditBase","templateInfo","template_name","helpTexts","suffix","getTemplateInfo","systemMailTemplate","SettingsMailTemplateEditForm","shop_account_profile_required_fields","SettingsShopAccountProfileForm","SHOP_FEATURES_SCHEMA","memberships","SettingsShopFeaturesForm","workflow_class_book_days_advance","workflow_class_cancel_until","loadingDaysAdvance","errorDaysAdvance","dataDaysAdvance","loadingCancelUntil","errorCancelUntil","dataCancelUntil","SettingsWorkflowClassBookingForm","workflow_shop_subscription_payment_method","loadingSubscriptionPayment","errorSubscriptionPayment","dataSubscriptionPayment","SettingsWorkflowShopForm","workflow_subscription_pauses_min_duration_in_days","workflow_subscription_pauses_max_pauses_in_year","loadingMinDuration","errorMinDuration","dataMinDuration","loadingMaxPauses","errorMaxPauses","dataMaxPauses","SettingsWorkflowSubscriptionPausesForm","workflow_trial_pass_limit","loadingTrialClassLimit","errorTrialClassLimit","dataTrialClassLimit","SettingsWorkflowTrialForm","ShopAccountHomeBase","ShopAccountHomeButton","DisplayClassInfo","classData","showTimeEnd","GET_ACCOUNT_CLASS_QUERY","_ref$accountName","accountName","attendanceId","attendance_id","loadingAttendance","errorAttendance","dataAttendance","updateScheduleItemAttendance","ShopAccountClassCancelBase","cancellationPossible","ShopAccountClassUnCancelBase","uncancellationPossible","_ref$complete","complete","ShopAccountClassInfoBase","ShopCheckoutClassInfo","QUERY_ACCOUNT_CLASSPASSES","ShopAccountBack","ShopAccountClasspassesBase","ShopAccountProfileBase","eventTickets","CREATE_PAYMENT_LINK","cardTitleLoadingError","btnPayNow","initialBtnText","btn_text","setBtnText","createPaymentLink","ShopAccountInvoicePaymentBase","invoice","setAttribute","paymentLink","createFinanceInvoicePaymentLink","financeInvoicePaymentLink","ShopAccountInvoicePaymentStatusBase","alert","QUERY_ACCOUNT_INVOICES","onlinePaymentsAvailable","ShopAccountInvoicesBase","QUERY_ACCOUNT_INVOICE","ShopAccountInvoiceBase","parseFloat","QUERY_SYSTEM_MAILCHIMP_LISTS","UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS","mailingList","btnLink","updateSubscriptionStatus","doUpdateSubscriptionStatus","subscribed","ShopAccountMailingListsBase","mailingLists","ShopAccountMailingListCard","QUERY_ACCOUNT_ORDERS","get_order_card_status_color","ShopAccountOrdersBase","cancelFunction","cancelOrder","UPDATE_PROFILE","ShopAccountProfileBtnDownloadData","ACCOUNT_SCHEMA_MINIMAL","ACCOUNT_SCHEMA_CONTACT","updateProfile","profilePolicy","ShopAccountProfileForm","QUERY_ACCOUNT_SUBSCRIPTIONS","ShopAccountSubscriptionsBase","QUERY_ACCOUNT_SUBSCRIPTION_CREDITS","ShopAccountSubscriptionCreditsBase","subscriptionCredits","xl","ShopClassBookClasspassBtn","ShopClassBookSubscriptionBtn","ShopClassBookPriceBtn","ShopClassBookBase","ShopClassBookBack","extensions","alreadyBooked","classType","class_info","bookingOpenOn","ShopClassBookSubscriptions","ShopClassBookClasspasses","ShopClassBookPriceDropin","ShopClassBookPriceTrial","CREATE_ORDER","ShopClassBookedBase","buttonBook","isBefore","notifyOnNetworkStatusChange","prevWeekFrom","prevWeekUntil","ShopClassesScheduleBase","ShopClassesScheduleFilter","availableSpacesOnline","ShopClassesScheduleButtonBook","clear","Progress","ShopContactBase","ShopEventsBase","media","dateString","IconGroup","IconItem","pt","_ref$title","eventTicket","_ref$showButton","showButton","_ref$active","ticketScheduleItems","PricingCard","Category","Price","totalPriceDisplay","AttributeList","AttributeItem","isEarlybirdPrice","isSubscriptionDiscountPrice","tempTitle","userIsAuthenticated","ShopEventBase","tickets","ShopEventTicketPricingCard","eventID","cs_django_links","EXPORT_TERMS_AND_CONDITIONS","EXPORT_PRIVACY_POLICY","scheduleEventTicketId","createOrder","ShopEventTicketBase","createOrderInput","orderId","createFinanceOrder","ShopCheckoutForm","GET_SHOP_ANNOUNCEMENTS_QUERY","ShopHomeBase","GET_ORDER_QUERY","_step","orderItems","_iterator","_createForOfIteratorHelper","n","done","attendanceDate","err","ShopCheckoutPaymentBase","msgNextStep","buttonNext","total","hasCompleteEnoughProfile","createFinanceOrderPaymentLink","financeOrderPaymentLink","ShopCheckoutOrderSummary","ShopCheckoutCompleteBase","subHeader","contentText","paymentText","ShopAccountClassesBase","GET_ORGANIZATION_CLASSPASSES_QUERY","ShopClasspassesBase","ShopClasspassPricingCard","loadingClass","errorClass","dataClass","ShopClasspassBase","ShopClasspassesPricingCard","_ref$displayCheckoutI","displayCheckoutInfo","unit","priceFirstMonthDisplay","accountRegistrationFee","accountRegistrationFeeDisplay","GET_ORGANIZATION_SUBSCRIPTIONS_QUERY","ShopSubscriptionsBase","ShopSubscriptionPricingCard","organizationSubscriptionId","ACCOUNT_SUBSCRIPTION_SCHEMA","CheckoutCardDirectDebitForm","ShopSubscriptionBase","CheckoutCard","shopPaymentMethod","hasBankAccountInfo","CheckoutCardDirectDebit","CheckoutCardBankAccountRequired","CheckoutCardMollie","ShopSubscriptionDirectDebitActivatedBase","PASSWORD_CHANGE_SCHEMA","passwordCurrent","passwordNew2","oneOf","updatePassword","CSStandaloneFormPage","messages","UserPasswordChangeForm","etFieldValue","esetFieldTouched","preventDefault","password","accountSignupEnabled","doTokenAuth","username","tokenAuth","UserLoginForm","setActive","deleteCookie","deleteRefreshCookie","info","offsetMd","Error404","Error404Page","GET_ACCOUNT_BANK_ACCOUNTS","UPDATE_BANK_ACCOUNT","ACCOUNT_BANK_ACCOUNT_SCHEMA","updateBankAccount","bankAccount","ShopAccountBankAccountForm","PrivateRoute","rest","_objectWithoutProperties","_excluded","refreshingToken","setRefreshingToken","authTokenExpired","path","ContinueAsYouAre","Route","render","WaitAsYouAre","LoginRequired","Redirect","tokenExp","SetCurrentUrlAsNext","loadingAppSettings","errorAppSettings","dataAppSettings","loadingOrganization","errorOrganization","dataOrganization","HashRouter","Switch","exact","CookiePolicy","HomeHome","AutomationHome","AutomationAccountSubscriptionCredits","AutomationAccountSubscriptionCreditAdd","AutomationAccountSubscriptionInvoices","AutomationAccountSubscriptionInvoicesAdd","AutomationAccountSubscriptionMollieCollections","AutomationAccountSubscriptionMollieCollectionAdd","FinanceCostCenters","FinanceCostCenterAdd","FinanceCostCenterEdit","FinanceExpenses","FinanceExpenseAdd","FinanceExpenseEdit","FinanceExpensesExport","FinanceInvoices","FinanceInvoicesExport","FinanceInvoiceEdit","FinanceInvoiceGroups","FinanceInvoiceGroupAdd","FinanceInvoiceGroupEdit","FinanceInvoiceGroupDefaults","FinanceInvoicePaymentAdd","FinanceInvoicePaymentEdit","FinanceGLAccounts","FinanceGLAccountAdd","FinanceGLAccountEdit","FinanceOrders","FinanceOrderEdit","FinancePaymentBatches","FinancePaymentBatchAddWhat","FinancePaymentBatchView","FinancePaymentCollectionBatchAdd","FinancePaymentCollectionBatchEdit","FinancePaymentBatchCategories","FinancePaymentBatchCategoryAdd","FinancePaymentBatchCategoryEdit","FinancePaymentMethods","FinancePaymentMethodAdd","FinancePaymentMethodEdit","FinanceQuotes","FinanceQuotesExport","FinanceQuoteEdit","FinanceQuoteGroups","FinanceQuoteGroupAdd","FinanceQuoteGroupEdit","FinanceTaxRates","FinanceTaxRatesAdd","FinanceTaxRatesEdit","FinanceTaxRatesSummary","OrganizationEdit","OrganizationBranding","OrganizationBrandingEdit","OrganizationDocuments","OrganizationListDocuments","OrganizationDocumentAdd","OrganizationDocumentEdit","OrganizationAnnouncements","OrganizationAnnouncementAdd","OrganizationAnnouncementEdit","OrganizationAppointmentCategories","OrganizationAppointmentCategoryAdd","OrganizationAppointmentCategoryEdit","OrganizationAppointments","OrganizationAppointmentAdd","OrganizationAppointmentEdit","OrganizationAppointmentPrices","OrganizationAppointmentPriceAdd","OrganizationAppointmentPriceEdit","OrganizationClasspasses","OrganizationClasspassAdd","OrganizationClasspassEdit","OrganizationClasspassesGroups","OrganizationClasspassesGroupAdd","OrganizationClasspassesGroupEdit","OrganizationClasspassesGroupEditPasses","OrganizationClasstypes","OrganizationClasstypeAdd","OrganizationClasstypeEdit","OrganizationClasstypeEditImage","OrganizationDiscoveries","OrganizationDiscoveryAdd","OrganizationDiscoveryEdit","OrganizationHolidays","OrganizationHolidayAdd","OrganizationHolidayEdit","OrganizationHolidayEditLocations","OrganizationLanguages","OrganizationLanguageAdd","OrganizationLanguageEdit","OrganizationLevels","OrganizationLevelAdd","OrganizationLevelEdit","OrganizationLocations","OrganizationLocationAdd","OrganizationLocationEdit","OrganizationLocationRooms","OrganizationLocationRoomAdd","OrganizationLocationRoomEdit","OrganizationProducts","OrganizationProductAdd","OrganizationProductEdit","OrganizationShifts","OrganizationShiftAdd","OrganizationShiftEdit","OrganizationSubscriptions","OrganizationSubscriptionAdd","OrganizationSubscriptionEdit","OrganizationSubscriptionsGroups","OrganizationSubscriptionsGroupAdd","OrganizationSubscriptionsGroupEdit","OrganizationSubscriptionsGroupEditSubscriptions","OrganizationSubscriptionsPrices","OrganizationSubscriptionPriceAdd","OrganizationSubscriptionPriceEdit","RelationsAccounts","RelationsAccountAdd","RelationsAccountProfile","RelationsAccountProfileImage","AccountAcceptedDocuments","RelationsAccountBankAccount","RelationsAccountBankAccountMandateAdd","RelationsAccountBankAccountMandateEdit","RelationsAccountClasses","AccountClasspasses","AccountClasspassAdd","AccountClasspassEdit","AccountClasspassClasses","AccountDocuments","AccountDocumentAdd","AccountDocumentEdit","RelationsAccountEnrollments","RelationsAccountEnrollmentEdit","RelationsAccountEnrollmentFindClass","AccountFinancePaymentBatchCategoryItems","AccountFinancePaymentBatchCategoryItemAdd","AccountFinancePaymentBatchCategoryItemEdit","AccountInvoices","AccountInvoiceAdd","AccountMemberships","AccountMembershipAdd","AccountMembershipEdit","AccountNotes","AccountNoteAdd","AccountNoteEdit","AccountOrders","AccountProducts","AccountProductAdd","AccountQuotes","AccountQuoteAdd","AccountScheduleEventTickets","AccountSubscriptions","AccountSubscriptionAdd","AccountSubscriptionEdit","AccountSubscriptionEditAltPrices","AccountSubscriptionEditAltPriceAdd","AccountSubscriptionEditAltPriceEdit","AccountSubscriptionEditBlocks","AccountSubscriptionEditBlockAdd","AccountSubscriptionEditBlockEdit","AccountSubscriptionEditCredits","AccountSubscriptionEditCreditAdd","AccountSubscriptionEditCreditEdit","AccountSubscriptionEditInvoices","AccountSubscriptionEditInvoiceAdd","AccountSubscriptionEditPauses","AccountSubscriptionEditPauseAdd","AccountSubscriptionEditPauseEdit","RelationsAccountTools","RelationsAccountInstructorProfile","RelationsB2B","RelationsB2BAdd","RelationsB2BEdit","RelationsB2BInvoices","RelationsB2BInvoiceAdd","ScheduleAppointments","ScheduleAppointmentAdd","ScheduleAppointmentEditAll","ScheduleClasses","ScheduleClassAdd","ScheduleClassEditAll","ScheduleClassClasspasses","ScheduleClassEnrollments","ScheduleClassEnrollmentsSearch","ScheduleClassEnrollmentAdd","ScheduleClassEnrollmentEdit","ScheduleClassEnrollmentOptions","ScheduleClassPrices","ScheduleClassPriceAdd","ScheduleClassPriceEdit","ScheduleClassSubscriptions","ScheduleClassInstructors","ScheduleClassInstructorAdd","ScheduleClassInstructorEdit","ScheduleClassAttendance","ScheduleClassAttendanceChart","ScheduleClassBook","ScheduleClassEdit","ScheduleEvents","ScheduleEventAdd","ScheduleEventEdit","ScheduleEventActivities","ScheduleEventActivityAdd","ScheduleEventActivityEdit","ScheduleEventActivityAttendance","ScheduleEventEarlybirds","ScheduleEventEarlybirdAdd","ScheduleEventEarlybirdEdit","ScheduleEventMedia","ScheduleEventMediaAdd","ScheduleEventMediaEdit","ScheduleEventSubscriptionGroupDiscounts","ScheduleEventSubscriptionGroupDiscountAdd","ScheduleEventSubscriptionGroupDiscountEdit","ScheduleEventTickets","ScheduleEventTicketAdd","ScheduleEventTicketEdit","ScheduleEventTicketEditActivities","ScheduleEventTicketEditCustomers","ScheduleEventTicketEditCustomersSearch","ScheduleShifts","ScheduleShiftAdd","ScheduleShiftEditAll","ScheduleShiftEdit","ScheduleShiftEmployees","ScheduleShiftEmployeeAdd","ScheduleShiftEmployeeEdit","InsightInactiveAccounts","InsightInactiveAccountsAdd","InsightInactiveAccountsView","InsightClasspasses","InsightInstructorClassesMonth","InsightRevenue","InsightSubscriptions","InsightTrialpasses","SelfCheckinCheckin","SelfCheckinBookingOptions","SelfCheckinLocations","SelfCheckinLocationClasses","ShopHome","ShopAccountHome","ShopAccountBankAccount","ShopAccountClassCancel","ShopAccountClassUnCancel","ShopAccountClassInfo","ShopClasses","ShopAccountClasspasses","ShopAccountEventTickets","ShopAccountInvoicePayment","ShopAccountInvoicePaymentStatus","ShopAccountInvoices","ShopAccountInvoice","ShopAccountMailingLists","ShopAccountOrders","ShopAccountProfile","ShopAccountSubscriptions","ShopAccountSubscriptionCredits","ShopCheckoutPayment","ShopCheckoutComplete","ShopClassesSchedule","ShopClassBook","ShopClassBooked","ShopClasspasses","ShopClasspass","ShopContact","ShopEvents","ShopEvent","ShopEventTicket","ShopSubscriptions","ShopSubscription","ShopSubscriptionDirectDebitActivated","SettingsHome","SettingsAbout","SettingsFinanceBankAccounts","SettingsFinanceCurrency","SettingsGeneralDateTime","SettingsGeneralSystem","SettingsIntegrationMailChimp","SettingsIntegrationMollie","SettingsMailMailChimpLists","SettingsMailMailChimpListAdd","SettingsMailMailChimpListEdit","SettingsMailNotifications","SettingsMailNotificationsAddAccount","SettingsMailTemplates","SettingsMailTemplateEdit","SettingsShopAccountProfile","SettingsShopFeatures","SettingsWorkflowClassBooking","SettingsWorkflowShop","SettingsWorkflowSubscriptionPauses","SettingsWorkflowTrial","UserChangePassword","UserLogin","UserLoginRequired","UserLogout","UserSessionExpired","UserWelcome","String","prototype","substr","csrftoken","errorLink","networkError","operation","forward","response","user_not_logged_in_within_response_errors","forEach","CSEC","Observable","observer","client","mutate","mutation","subscriber","subscribe","reload","getCsrfToken","_getCsrfToken","_callee2","_context2","abrupt","fetch","json","Cookies","get","sent","httpLink","createHttpLink","uri","credentials","csrfMiddleware","ApolloLink","set","setContext","headers","_x","_x2","ApolloClient","from","cache","InMemoryCache","typePolicies","Query","fields","relayStylePagination","App","ApolloProvider","AppRoot","Boolean","ReactDOM","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"o2/EAgBMA,EAAY,CACdC,MAAO,CACHC,O,SAIRC,QAAQC,IAAIJ,GAGZK,IAMGC,IAAIC,KAEJD,IAAIE,KAGJC,KAAK,CACJT,YACAU,IAAK,QACLC,YAAa,QACbC,GAAI,CAAC,UACLC,UAAW,SACXC,OAAO,EAGPC,aAAc,IAEdC,cAAe,CACbC,aAAa,KAIFZ,EAAI,E,OAAJA,I,2JCjDJa,EAAaC,YAAGC,MAAAC,YAAA,6MAoBhBC,GATeH,YAAGI,MAAAF,YAAA,kHASFF,YAAGK,MAAAH,YAAA,8IAqBnBI,GATeN,YAAGO,MAAAL,YAAA,uIASIF,YAAGQ,MAAAN,YAAA,6EASzBO,EAA8BT,YAAGU,MAAAR,YAAA,mFASjCS,EAA0BX,YAAGY,MAAAV,YAAA,qJC1D3BW,EAJQ,CACnBC,mBAAoB,sBC8DTC,EA/De,CAC1BC,WAAY,wBACZC,eAAgB,2BAChBC,mBAAoB,+BACpBC,mBAAoB,+BACpBC,uBAAwB,8BACxBC,gBAAiB,4BACjBC,kCAAmC,4CACnCC,mCAAoC,6CACpCC,iCAAkC,4CAClCC,+BAAgC,0CAChCC,6BAA8B,wCAC9BC,6BAA8B,wCAC9BC,2BAA4B,sCAC5BC,6BAA8B,wCAC9BC,8CAA+C,uDAC/CC,yBAA0B,qCAC1BC,qBAAsB,iCACtBC,2BAA4B,uCAC5BC,yBAA0B,qCAC1BC,0BAA2B,sCAC3BC,iCAAkC,6CAClCC,+BAAgC,0CAChCC,0BAA2B,sCAC3BC,6BAA8B,wCAC9BC,kCAAmC,4CACnCC,iCAAkC,4CAClCC,kCAAmC,6CACnCC,4BAA6B,uCAC7BC,gCAAiC,2CACjCC,iCAAkC,4CAClCC,+BAAgC,0CAChCC,uCAAwC,kDACxCC,sCAAuC,iDACvCC,2BAA4B,sCAC5BC,4BAA6B,uCAC7BC,0BAA2B,qCAC3BC,kCAAmC,6CACnCC,mCAAoC,8CACpCC,8BAA+B,yCAC/BC,iCAAkC,4CAClCC,mCAAoC,8CACpCC,mCAAoC,8CACpCC,yCAA0C,mDAC1CC,yBAA0B,qCAC1BC,yCAA0C,mDAC1CC,0BAA2B,qCAC3BC,2BAA4B,sCAC5BC,yBAA0B,oCAC1BC,6BAA8B,uCAC9BC,gCAAiC,2CACjCC,2BAA4B,uCAC5BC,+BAAgC,yCAChCC,0BAA2B,qCAC3BC,uBAAwB,kCACxBC,wBAAyB,mCACzBC,sBAAuB,iCACvBC,8BAA+B,yCAC/BC,+BAAgC,0CAChCC,0BAA2B,qCAC3BC,6BAA8B,yCCzDrBC,EAAS,CAClBC,MAAK,SAACC,GAEFC,aAAaC,QAAQC,EAAKhE,eAAgB6D,EAAUI,QAAQC,KAC5DJ,aAAaC,QAAQC,EAAK/D,mBAAoB4D,EAAUI,QAAQE,SAEhEL,aAAaC,QAAQC,EAAK7D,uBAAwB0D,EAAUO,kBAC5DN,aAAaO,WAAWL,EAAK5D,gBACjC,EACAkE,gBAAe,SAACC,GACZxG,QAAQC,IAAI,kBACZD,QAAQC,IAAIuG,GAEZT,aAAaC,QAAQC,EAAKhE,eAAgBuE,EAAiBN,QAAQC,KACnEJ,aAAaC,QAAQC,EAAK/D,mBAAoBsE,EAAiBN,QAAQE,SAEvEL,aAAaC,QAAQC,EAAK7D,uBAAwBoE,EAAiBH,iBACvE,EACAI,QAAO,WACHzG,QAAQ0G,KAAK,0BAIbX,aAAaO,WAAWL,EAAKhE,gBAC7B8D,aAAaO,WAAWL,EAAK/D,oBAE7B6D,aAAaO,WAAWL,EAAK7D,uBACjC,EACAuE,OAAM,WAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,KAGNG,KAAKN,UACLV,aAAaO,WAAWL,EAAK5D,iBAErC,G,kFClCS2E,GAAyBhG,YAAGC,MAAAC,YAAA,mPAc5B+F,GAAsBjG,YAAGI,MAAAF,YAAA,yKCdzBgG,GAAyBlG,YAAGC,MAAAC,YAAA,gaAuB5BiG,GAAsBnG,YAAGI,MAAAF,YAAA,+J,iBCWvBkG,sBAxBf,SAA6BC,GAAIA,EAADC,EAA2B,IAA1BC,EAAAF,EAAEG,eAAO,IAAAD,EAAC,GAAEA,EAAEE,EAAQJ,EAARI,SAE7C,OACEC,eAACC,KAAI,CAAAF,SACHC,eAAA,OAAKE,UAAU,cAAaH,SAC1BC,eAACG,KAAS,CAAAJ,SACRC,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,eAAA,OAAKE,UAAU,mBAAkBH,SAC5BD,EAAWE,eAAA,OAAKO,IAAKT,EAASI,UAAU,MAAMM,IAAI,SAAY,KAElET,EACDC,eAACS,KAAc,CACbC,UAAW,IACXC,WAAYC,iBAQ5B,IChBelB,I,MAAAA,kBAVf,WACE,OACEM,eAACa,GAAoB,CAAAd,SACnBC,eAAA,OAAKE,UAAU,cAAaH,SAC1BC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,OAItC,ICfMC,GAAqBC,IAAMC,cAAc,CAAC,GAEnCC,GAAsBH,GAAmBI,SAGvCJ,IAFoBA,GAAmBK,SAEvCL,ICLTM,GAAsBL,IAAMC,cAAc,CAAC,GAEpCK,GAAuBD,GAAoBF,SAGzCE,IAFqBA,GAAoBD,SAEzCC,ICJFE,I,cAA0BnI,YAAGC,QAAAC,YAAA,6MAa7BkI,GAAuBpI,YAAGI,QAAAF,YAAA,iMCoCjCmI,GAAiB,SAAC/B,EAAGgC,EAASC,EAAOC,GACzC,IAAMC,EAAeD,EAAKE,kBAEtBC,EAAQ,GAGZ,GAAIL,EASF,OARAK,EAAMC,KAAK,CACTC,MAAOvC,EAAE,6BACTwC,GAAI,IACJC,KAAM,GACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAGLR,EAGT,GAAIJ,EASF,OARAI,EAAMC,KAAK,CACTC,MAAOvC,EAAE,4BACTwC,GAAI,IACJC,KAAM,GACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAGLR,EAGTA,EAAMC,KAAK,CACTC,MAAOvC,EAAE,mBACTwC,GAAI,IACJC,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIRV,EAAaW,eACfT,EAAMC,KAAK,CACTC,MAAOvC,EAAE,4BACTwC,GAAI,sBACJC,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIVV,EAAaY,aACfV,EAAMC,KAAK,CACTC,MAAOvC,EAAE,0BACTwC,GAAI,oBACJC,KAAM,cACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIVV,EAAaa,SACfX,EAAMC,KAAK,CACTC,MAAOvC,EAAE,sBACTwC,GAAI,gBACJC,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIVV,EAAac,QACfZ,EAAMC,KAAK,CACTC,MAAOvC,EAAE,qBACTwC,GAAI,eACJC,KAAM,WACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIdR,EAAMC,KAAK,CACTC,MAAOvC,EAAE,sBACTwC,GAAI,gBACJC,KAAM,iBACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIZ,IAAMK,EAAkBzE,aAAa0E,QAAQxE,EAAK7D,wBAC9CsI,EAAepD,EAAE,sBACjBqD,EAAc,gBAclB,OAbI,IAAIC,KAAS,KAAQJ,GAAsC,MAAnBA,KAC1CE,EAAepD,EAAE,mBACjBqD,EAAc,eAGhBhB,EAAMC,KAAK,CACTC,MAAOa,EACPZ,GAAIa,EACJZ,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAGLR,CACT,EAcA,IAAMkB,GAAM,IAAID,KA2IDxD,sBAzIf,SAAwBC,GAAiC,IAA/BC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAC3CuD,EAAiCC,YAAS9B,IAAlCG,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAClB0B,EAAeC,qBAAWlC,IAEhC,GAAIK,EAAS,OAAO5B,eAAC0D,GAAsB,IAC3C,GAAI7B,EAAO,OAAO7B,eAAA,KAAAD,SAAIH,EAAE,+BAExB,IAAM+D,EArBR,SAA2BH,GACzB,IAAII,EAAW,+CAQf,OANIJ,GACEA,EAAaK,oBACfD,EAAWJ,EAAaK,mBAIrBD,CACT,CAWyBE,CAAkBN,GAEzC,OACElD,gBAACyD,KAAKC,QAAO,CACXC,YAAa,CACTC,KAAM,IACN1D,IAAK,cACLoD,SAAUD,EACVQ,SACEnE,eAACoE,KAAIC,KAAI,CAACC,KAAK,MAAMpE,UAAU,mBAAkBH,SAC7C+B,EAAKyC,OAASzC,EAAKyC,KAAKC,YAAc1C,EAAKyC,KAAKE,UAAYzE,eAAC0E,IAAI,CAACtC,GAAG,gBAAerC,SACpFC,eAAC2E,KAAM,CACLzE,UAAU,OACVmC,KAAK,OACLuC,SAAO,EACPC,KAAK,KACLC,MAAM,UAAS/E,SAEdH,EAAE,kBAEQ,MAuCrBmF,SAAU,CAAEC,aAAcrD,GAAe/B,EAAGgC,EAASC,EAAOC,IAC5DmD,2BAA4B1C,YAAW2C,MACvCC,YAAa,CAaXC,UACEpF,eAACkB,WAAc,CAAAnB,SACbO,gBAAA,SAAAP,SAAA,CAAO,wBAELO,gBAAA,KACE4D,KAAK,0BACLmB,OAAO,SACPC,IAAI,sBAAqBvF,SAAA,CAExB,IAAI,iBAEF,KAAK,4BACaoD,GAAIoC,cAAc,SAI/CC,IACElF,gBAACY,WAAc,CAAAnB,SAAA,CACbC,eAACI,KAAKqF,IAAG,CAACC,MAAM,EAAK3F,SACnBC,eAAC0E,IAAI,CAACtC,GAAG,iBAAgBrC,SACtBH,EAAE,2BAWPI,eAACI,KAAKqF,IAAG,CAACC,MAAM,QAapB3F,SAAA,CAEHA,EACDC,eAACS,KAAc,CACbC,UAAW,IACXC,WAAYC,SAIpB,ICjQelB,qBAAkB6C,aAxCjC,SAA6B5C,GAA8C,IAA3CC,EAACD,EAADC,EAAiB+F,GAAThG,EAALyD,MAAczD,EAAP0D,QAAO1D,EAAEiG,kBAC7CC,EAAc,GACdC,EAAgB,GAChBC,EAAiB,GAErB,YALiE,IAAAJ,EAAC,GAAEA,GAMlE,IAAK,QACHE,EAAc,OACd,MACF,IAAK,UACHA,EAAc,UACdC,EAAgB,OAChB,MACF,IAAK,WACHD,EAAc,UACdC,EAAgB,UAChBC,EAAiB,UAMrB,OACE/F,eAAA,OAAKE,UAAU,qCAAoCH,SACnDO,gBAAC0F,KAAIC,KAAI,CAAAlG,SAAA,CACPC,eAACgG,KAAG,CAAClB,MAAOe,EAAaK,MAAOlG,eAACmG,KAAI,CAACC,KAAK,kBAAkBrG,SAC1DH,EAAE,kCAELI,eAACgG,KAAG,CAAClB,MAAOgB,EAAeI,MAAOlG,eAACmG,KAAI,CAACC,KAAK,gBAAiBrG,SAC3DH,EAAE,oCAELI,eAACgG,KAAG,CAAClB,MAAOiB,EAAgBG,MAAOlG,eAACmG,KAAI,CAACC,KAAK,UAAWrG,SACtDH,EAAE,yCAKX,KC5BeF,kBAXI,SAAHC,GAAA,IAAMC,EAACD,EAADC,EAAGyG,EAAS1G,EAAT0G,UAASC,EAAA3G,EAAEO,iBAAS,IAAAoG,EAAC,GAAEA,EAAA,OAC9CtG,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLzE,UAAWA,EACX4E,MAAM,YACNzC,KAAK,aAAYtC,SACdH,EAAE,mBAEF,ICyBMF,qBAAkB6C,aA5BjC,SAAiB5C,GAAIA,EAADC,EAAQD,EAALyD,MAAczD,EAAP0D,QAAgG,IAAvFtD,EAAQJ,EAARI,SAAUwG,EAAK5G,EAAL4G,MAAOC,EAAQ7G,EAAR6G,SAAUH,EAAS1G,EAAT0G,UAASI,EAAA9G,EAAE+G,yBAAiB,IAAAD,EAAC,GAAEA,EAAAd,EAAAhG,EAAEiG,wBAAgB,IAAAD,GAAMA,EAEvH,OACE3F,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAOA,EAAOC,SAAUA,EAASzG,SAC5CO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAE/BsG,EAAarG,eAAC6G,GAAU,CAACR,UAAWA,IAAgB,GACrDK,OAGJ1G,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACb6F,EACA5F,eAAC+G,GAAoB,CAACnB,iBAAkBA,IACtC,GACF7F,aAOlB,KCtBeL,qBAAkB6C,aAVjC,SAAyB5C,GAAyD,IAAtDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ0G,EAAA9G,EAAE+G,yBAAiB,IAAAD,EAAC,GAAEA,EAE3E,OACEzG,eAACgH,GAAQ,CAACT,MAAO3G,EAAE,uBAAwB8G,kBAAmBA,EAAkB3G,SAC7EA,GAGP,KCSeL,qBAAkB6C,aAbjC,SAAqB5C,GAAyB,IAAtBC,EAACD,EAADC,EACtB,OAD8BD,EAALyD,MAAczD,EAAP0D,QAE9BrD,eAACiH,GAAgB,CAAAlH,SACfC,eAACkH,KAAI,CAAAnH,SACHC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,kCAKb,K,kDCnBO,SAASwH,GAAWC,GACvB,IAAMC,EAAQD,EAAKE,cACnB,OAAOF,EAAKG,OAAO,GAAGC,cAAgBH,EAAMI,MAAM,EACpD,CC2BahI,I,GAAAA,kBAxBf,SAAmBC,GAAc,IAC3BO,EAD0ByH,EAAAhI,EAAXmF,MAGnB,YAHwB,IAAA6C,EAAC,GAAEA,GAIzB,IAAK,UACHzH,EAAU,aACV,MACF,IAAK,UACHA,EAAU,aACV,MACF,IAAK,SACHA,EAAU,YACV,MACF,IAAK,UACHA,EAAU,aACV,MACF,QACEA,EAAU,eAGd,OAAOF,eAAA,QAAME,UAAW,eAAiBA,GAC3C,IChBO,SAAS0H,KACd,IAAIC,EACAC,EACAtD,EACAuD,EACAC,EAEAC,EAAY,CACdC,SAAU7J,aAAa0E,QAAQxE,EAAKhC,4BACpC4L,UAAW9J,aAAa0E,QAAQxE,EAAK/B,8BAsCvC,OAnCAqL,EAAUxJ,aAAa0E,QAAQxE,EAAK9B,8BAElCwL,EAAUJ,QAAUA,GAGtBC,EAAwBzJ,aAAa0E,QAAQxE,EAAK7B,mCAEhDuL,EAAUH,sBADRA,GAGgC,GAGpCtD,EAAanG,aAAa0E,QAAQxE,EAAK5B,oCAErCsL,EAAUzD,WADRA,GAGqB,GAGzBuD,EAAoB1J,aAAa0E,QAAQxE,EAAK3B,+BAE5CqL,EAAUF,kBADRA,GAG4B,GAGhCC,EAAuB3J,aAAa0E,QAAQxE,EAAK1B,kCAE/CoL,EAAUD,qBADRA,GAG+B,GAGnC1P,QAAQC,IAAI0P,GAELA,CACT,CAGO,SAASG,GAAqBhC,EAAMiC,GACzC,IAAIC,EAEJ,OAAQD,GACN,IAAK,MACHC,EAAQtI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,YAAE,2CAClC,MACF,IAAK,YACH0I,EAAQtI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,YAAE,iDAClC,MACF,IAAK,QACH0I,EAAQtI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,YAAE,6CAMtC,OAAOU,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CAACC,eAACmG,KAAI,CAACC,KAAK,SAAQ,IAAEA,EAAK,IAAEkC,IACrD,CAGO,SAASG,GAAuBC,GACrC,IAAI5D,EAEJ,OAAQ4D,GACN,IAAK,MACH5D,EAAQ,UACR,MACF,IAAK,YACHA,EAAQ,UACR,MACF,IAAK,OACHA,EAAQ,SACR,MACF,QACEA,EAAQ,UAGZ,OAAO9E,eAAC2I,GAAU,CAAC7D,MAAOA,GAC5B,CAGO,SAAS8D,GAAmBhJ,EAAG8I,EAAQG,EAAaC,EAASC,GAClE,OAAID,EACKxI,gBAAA,QAAAP,SAAA,CAAOH,EAAE,mBAAmB,KAAGmJ,EAAY,OAGrC,cAAXL,EACKG,OADT,CAGF,CC9GA,IAsCeG,GAtCE1P,YAAGC,QAAAC,YAAA,uvBCFb,SAASyP,GAAoB1E,GAChC,IAAM2E,EAAc,CAAC,EACfC,EAAS5E,EAAK4E,OACpB,GAAIA,EAAOC,MACT,IAAK,IAAIC,KAAcF,EAAOC,MAAO,CACnC,IAAIE,EAAaH,EAAOC,MAAMC,GAC9B,GAAIC,EAAWC,KAAM,CACnB,IAAIC,EAAaF,EAAWC,KAC5B,GAAIC,EAAWN,YAAYE,MACzB,IAAK,IAAIK,KAAoBD,EAAWN,YAAYE,MAAO,CACzD,IAAIM,EAAkBF,EAAWN,YAAYE,MAAMK,GACnD,GAAIC,EAAgBH,KAAM,CACtB,IAEII,EAFkBD,EAAgBH,KACPK,SACDC,MAAM,KAE9BF,EAAe,KAAMT,IAC3BA,EAAYS,EAAe,IAAM,IAAIG,KAGrCZ,EAAYS,EAAe,IAAII,IAAIJ,EAAe,GACtD,CACF,CAEJ,CACF,CAGF,OAAOT,CACX,CAGO,IAAMc,GAAiB,SAACd,EAAae,EAAYC,GACtD,IAAIC,GAAqB,EAQzB,OANID,KAAYhB,GACVA,EAAYgB,GAAUE,IAAIH,KAC5BE,GAAqB,IAIjBA,CACV,ECDezK,I,MAAAA,kBArBf,SAA6BC,GAA0D,IAAxDC,EAACD,EAADC,EAAGqK,EAAUtK,EAAVsK,WAAYC,EAAQvK,EAARuK,SAAUnK,EAAQJ,EAARI,SAAQsK,EAAA1K,EAAE2K,mBAAW,IAAAD,GAAMA,EACjF/G,EAA+BC,YAASyF,IAAjCpH,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAEvB,OAAIF,EACG0I,EAGI,GAFAtK,eAAA,KAAAD,SAAIH,EAAE,+BAKbiC,EAAc7B,eAAA,KAAAD,SAAG,6BAtBvB,SAA0BmJ,EAAae,EAAYC,GACjD,IAAIC,GAAqB,EAQzB,OANID,KAAYhB,GACVA,EAAYgB,GAAUE,IAAIH,KAC5BE,GAAqB,IAIjBA,CACV,CAgBMI,CAFgBtB,GAAoBnH,EAAKyC,MAEX0F,EAAYC,GACrCnK,EAEA,EAEX,ICZeyK,GAzBUlR,YAAGC,QAAAC,YAAA,yUCAfiR,GAAkCnR,YAAGC,QAAAC,YAAA,wkDCgD5CmI,GAAiB,SAAC/B,EAAG2E,GACzB,IAAItC,EAAQ,GACRiH,EAAcD,GAAoB1E,GAgHtC,OA9GAtC,EAAMC,KAAK,CACTC,MAAOvC,EAAE,cACTwC,GAAI,WACJC,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAKTuH,GAAed,EAAa,OAAQ,YAErCjH,EAAMC,KAAK,CACTC,MAAOvC,EAAE,mBACTwC,GAAI,aACJC,KAAM,QACNC,cAAeC,YAAWC,QAM3BwH,GAAed,EAAa,OAAQ,kBACpCc,GAAed,EAAa,OAAQ,mBAErCjH,EAAMC,KAAK,CACTC,MAAOvC,EAAE,kBACTwC,GAAI,YACJC,KAAM,WACNC,cAAeC,YAAWC,QAM3BwH,GAAed,EAAa,OAAQ,sBACpCc,GAAed,EAAa,OAAQ,qBACpCc,GAAed,EAAa,OAAQ,oBAErCjH,EAAMC,KAAK,CACTC,MAAOvC,EAAE,iBACTwC,GAAI,WACJC,KAAM,cACNC,cAAeC,YAAWC,QAM3BwH,GAAed,EAAa,OAAQ,0BACpCc,GAAed,EAAa,OAAQ,0BACpCc,GAAed,EAAa,OAAQ,0BACpCc,GAAed,EAAa,OAAQ,yBACpCc,GAAed,EAAa,OAAQ,2BACpCc,GAAed,EAAa,OAAQ,kBAEtCjH,EAAMC,KAAK,CACRC,MAAOvC,EAAE,sBACTwC,GAAI,gBACJC,KAAM,UACNC,cAAeC,YAAWC,OAM3BwH,GAAed,EAAa,OAAQ,YAErCjH,EAAMC,KAAK,CACTC,MAAOvC,EAAE,iBACTwC,GAAI,WACJC,KAAM,cACNC,cAAeC,YAAWC,OAM3BwH,GAAed,EAAa,OAAQ,eAErCjH,EAAMC,KAAK,CACTC,MAAOvC,EAAE,oBACTwC,GAAI,cACJC,KAAM,SACNC,cAAeC,YAAWC,OA0BvBP,CAET,EAEMkB,GAAM,IAAID,KAqJDxD,sBAnJf,SAAoBC,GAAiC,IAA/BC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UACvCuD,EAAiCC,YAASyF,IAAlCnH,EAAKyB,EAALzB,MAAOD,EAAO0B,EAAP1B,QAASE,EAAIwB,EAAJxB,KAExB,GAAIF,EAAS,OAAO5B,eAAC0D,GAAsB,IAC3C,GAAI7B,EAAO,OAAO7B,eAAA,KAAAD,SAAIH,EAAE,+BAExB,IAAI8K,EAAY,IAKhB,OAJI5I,EAAKyC,KAAKoG,yBACZD,EAAY5I,EAAKyC,KAAKoG,wBAItBrK,gBAACyD,KAAKC,QAAO,CACXC,YAAa,CACTC,KAAM,IACN1D,IAAK,cACLoD,SAAU,+CACVO,SACE7D,gBAAC8D,KAAIC,KAAI,CAACC,KAAK,MAAMpE,UAAU,mBAAkBH,SAAA,CAC/CC,eAAC0E,IAAI,CAACtC,GAAG,YAAWrC,SAClBC,eAAC2E,KAAM,CACLzE,UAAU,OACVmC,KAAK,WACLuC,SAAO,EACPC,KAAK,KACLC,MAAM,UAAS/E,SAEdH,EAAE,wBAGPI,eAAC0E,IAAI,CAACtC,GAAG,gBAAerC,SACtBC,eAAC2E,KAAM,CACLzE,UAAU,OACVmC,KAAK,OACLuC,SAAO,EACPC,KAAK,KACLC,MAAM,UAAS/E,SAEdH,EAAE,qBA2BXgL,gBAAiB,CACjBF,UAAWA,EACXtE,KAAMtE,EAAKyC,KAAKsG,UAAY,IAAM/I,EAAKyC,KAAKuG,SAC5CjC,YAAa,GACbkC,QAAS,CAEP,CAAE1I,KAAM,OAAQF,MAAOvC,EAAE,8BAA+BwC,GAAI,4BAC5D,CAAE4I,WAAW,GACb,CAAE3I,KAAM,OAAQF,MAAOvC,EAAE,sBAAuBwC,GAAI,oBACpD,CAAE4I,WAAW,GACb,CAAE3I,KAAM,UAAWF,MAAOvC,EAAE,qBAAsBwC,GAAI,sBAK1D2C,SAAU,CAAEC,aAAcrD,GAAe/B,EAAGkC,EAAKyC,OACjDU,2BAA4B1C,YAAW2C,MACvCC,YAAa,CAaXC,UACEpF,eAACkB,WAAc,CAAAnB,SACbO,gBAAA,SAAAP,SAAA,CAAO,iBACOoD,GAAIoC,cAAc,IAC9BjF,gBAAA,KACE4D,KAAK,0BACLmB,OAAO,SACPC,IAAI,sBAAqBvF,SAAA,CAExB,IAAI,sBAEF,KAAK,4BAKhByF,IACElF,gBAACY,WAAc,CAAAnB,SAAA,CACbC,eAACI,KAAKqF,IAAG,CAACC,MAAM,IAUhB1F,eAACI,KAAKqF,IAAG,CAACC,MAAM,QAapB3F,SAAA,CAEDA,EACDC,eAACS,KAAc,CACbC,UAAW,IACXC,WAAYC,SAItB,ICjSelB,qBAAkB6C,aAfjC,SAAqB5C,GAAmC,IAAhCC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAEzC,OACEC,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,6BACrBG,QAKX,KC6MeL,qBAAkB6C,aA3MjC,SAAiB5C,GAAgB,IAAbC,EAACD,EAADC,EAEZsL,GAFoBvL,EAALyD,MACDK,qBAAWxC,IACAkK,kBAG/B7H,EAAmEC,YAASiH,IAA3DY,EAAW9H,EAApB1B,QAA6ByJ,EAAS/H,EAAhBzB,MAAwByJ,EAAQhI,EAAdxB,KAChDyJ,EAAiChI,YAASkH,GAAiC,CACzEe,KAAMJ,GAAeC,IAAcC,EACnCG,UAAW,CACTjH,WAAY8G,GAAYA,EAAS/G,KAAO+G,EAAS/G,KAAKmH,UAAY,KAClExD,SAAUyD,OAASC,OAAO,cAC1BzD,UAAWwD,OAAS5B,IAAI,EAAG,QAAQ6B,OAAO,cAC1C/D,QAAS,aAEXgE,YAAa,iBARPjK,EAAO2J,EAAP3J,QAASC,EAAK0J,EAAL1J,MAAOC,EAAIyJ,EAAJzJ,KAWxB,GAAIF,GAAWwJ,EAAc,OAC3BpL,eAAC8L,GAAY,CAAA/L,SACVH,EAAE,+BAGP,GAAIiC,GAASwJ,EAAY,OACvBrL,eAAC8L,GAAY,CAAA/L,SACVH,EAAE,2CAIP,IAAMmM,EAAgBjK,EAAKkK,0BAG3B,IAAKD,EAAc3C,MAAMjK,OAAQ,OAC/Ba,eAAC8L,GAAY,CAAA/L,SACVH,EAAE,wCAIPtH,QAAQC,IAAIuJ,GAEZ,IADA,IAAImK,GAAkB,EACZC,EAAE,EAAGA,EAAEpK,EAAKqK,gBAAgBhN,OAAQ+M,IACxCpK,EAAKqK,gBAAgBD,GAAY,QAAE/M,SACrC8M,GAAkB,GAMtB,OACE3L,gBAACwL,GAAY,CAAA/L,SAAA,CACXC,eAAA,MAAAD,SAAKH,EAAE,sCACPI,eAACI,KAAKC,IAAG,CAAC+L,OAAK,EAACC,MAAI,EAAAtM,SAChBgM,EAAc3C,MAAMjK,OAAU4M,EAAc3C,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC7DvJ,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAACX,MAAOgD,EAAKhD,MAAMxG,SACtBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,OAAKwM,wBAAyB,CAAEC,OAAQC,KAAUC,SAASpD,EAAKqD,iBAHhDC,eAMX,IACR,KAILZ,GAAmB3L,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CAClCC,eAAA,MAAAD,SAAKH,EAAE,8CACHkC,EAAKqK,gBAAgBG,KAAI,SAAAQ,GAAA,IAAGC,EAAID,EAAJC,KAAMnK,EAAOkK,EAAPlK,QAAO,OACxCA,EAAQzD,OAAcmB,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACpCO,gBAAA,MAAAP,SAAA,CACGqH,GAAWuE,KAAOoB,GAAMnB,OAAO,SAAS,IAAE,IAC3C5L,eAAA,SAAOE,UAAU,aAAYH,SACtB4L,KAAOoB,GAAMnB,OAAO,WAG5BhJ,EAAQ0J,KAAI,SAAAU,GAAA,IACTC,EAAcD,EAAdC,eACAC,EAAaF,EAAbE,cACAH,EAAIC,EAAJD,KACArE,EAAMsE,EAANtE,OACAI,EAAOkE,EAAPlE,QACAC,EAAWiE,EAAXjE,YACAF,EAAWmE,EAAXnE,YACAsE,EAAwBH,EAAxBG,yBACArF,EAAqBkF,EAArBlF,sBACAC,EAAiBiF,EAAjBjF,kBACAqF,EAASJ,EAATI,UACAC,EAAOL,EAAPK,QACAC,EAAMN,EAANM,OACAC,EAAuBP,EAAvBO,wBAAuB,OACrBvN,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAAC+H,GAAI,EAAGC,GAAI,EAAG3G,GAAI,GAAG/G,SAAA,CAC7BC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAGzN,SACfO,gBAAA,MAAAP,SAAA,CACG0I,GAAuBC,GACxBpI,gBAAA,QAAMJ,UAAU,OAAMH,SAAA,CAErB+H,EAAsB1B,KAAK,IAAG,IAE9BuF,KAAOoB,EAAO,IAAMK,GAAWxB,OAAOV,GAAY,IAAE,MACpDS,KAAOoB,EAAO,IAAMM,GAASzB,OAAOV,GAAY,IAAG,OAEnDnD,GAAqB/H,eAAA,SAAOE,UAAU,aAAYH,SAChDgI,EAAkB3B,cAK3BpG,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAAC+H,GAAI,GAAGzN,SAAA,CAEfC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAE+G,EAAyBnF,qBAAqB5B,KACpE9F,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAC,MAAIoN,EAAyB/G,gBAIjEpG,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,EAAGC,GAAI,EAAG3G,GAAI,EAAE/G,SAC5BC,eAAC0N,GAAoB,CAAYzD,WAAW,OAAOC,SAAS,yBAAwBnK,SAClFC,eAAC0E,IAAI,CAACxE,UAAU,cAAckC,GAAI,sCAAwC6K,EAAiB,IAAMF,EAAKhN,SACpGC,eAAC2E,KAAM,CACLE,KAAK,KACLC,MAAM,YACNzC,KAAK,eAActC,SAEhBH,EAAE,2BAPgBiN,qBAa/BvM,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,EAAGC,GAAI,EAAG3G,GAAI,GAAG/G,SAC7BO,gBAAA,OAAKJ,UAAU,OAAMH,SAAA,CAEC,aAAlBmN,EACAlN,eAACuI,KAAK,CAACzD,MAAM,UAAU5E,UAAU,OAAMH,SAAEH,EAAE,kBAC3C,KACkB,0BAAlBsN,EACAlN,eAACuI,KAAK,CAACzD,MAAM,UAAU5E,UAAU,OAAMH,SAAEH,EAAE,qBAC3C,KACW,cAAX8I,EACA1I,eAACuI,KAAK,CAACzD,MAAM,UAAU5E,UAAU,OAAMH,SAAEH,EAAE,uBAC3C,KACAU,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAACC,eAAA,SAAO4I,GAAmBhJ,EAAG8I,EAAQG,EAAaC,EAASC,WAG/F/I,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,EAAGC,GAAI,EAAG3G,GAAI,EAAE/G,SAE5BO,gBAAA,SAAOJ,UAAU,mBAAkBH,SAAA,CAACC,eAACmG,KAAI,CAACC,KAAK,UAAU,IAAEmH,EAAwB,IAAED,cA7DlFT,eAiEJ,MAvF6BA,gBAA1B,EA0FA,OAGvB,OAGP,KCjKenN,qBAAkB6C,aAdjC,SAA+B5C,GAA+B,IAA5BC,EAACD,EAADC,EAAG+N,EAAIhO,EAAJgO,KAAIC,EAAAjO,EAAEkO,iBAAS,IAAAD,EAAC,KAAIA,EACvD,OACE5N,eAAC0E,IAAI,CAACtC,GAAIuL,EAAK5N,SACbO,gBAACqE,KAAM,CACLC,SAAO,EACPkJ,OAAK,EACLhJ,MAAM,UAAS/E,SAAA,CAEd8N,GAAuBjO,EAAE,6BAA6B,IAACI,eAACmG,KAAI,CAACC,KAAK,sBAI3E,KCsCe1G,qBAAkB6C,aA/CjC,SAAuB5C,GAAwB,IAArBC,EAACD,EAADC,EACxB,OADgCD,EAALyD,MAAazD,EAANoO,OAEhC/N,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBACtBU,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,8CAETI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,qDACNA,EAAE,yDACHI,eAAA,SAAMA,eAAA,SACNA,eAACgO,GAAwB,CAACL,KAAK,sDAIrC3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,oDACNA,EAAE,wDACHI,eAAA,SAAMA,eAAA,SACNA,eAACgO,GAAwB,CAACL,KAAK,qDAIrC3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,8DACNA,EAAE,kEACHI,eAAA,SAAMA,eAAA,SACNA,eAACgO,GAAwB,CAACL,KAAK,yEASjD,K,6CClDMM,GAAW,SAAAC,GAAAC,aAAAF,EAAAC,GAAA,IAAAE,EAAAC,aAAAJ,GAAA,SAAAA,IAAA,IAAAK,EAAAC,aAAA,KAAAN,GAAA,QAAAO,EAAAtP,UAAAC,OAAAsP,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAAzP,UAAAyP,GA4BZ,OA5BYL,EAAAF,EAAAQ,KAAAC,MAAAT,EAAA,OAAAU,OAAAL,KASbM,eAAiB,WAEf,IAAIC,EACDC,SAASC,iBAAmBD,SAASC,gBAAgBF,WACtDC,SAASE,KAAKH,UACZI,EACDH,SAASC,iBAAmBD,SAASC,gBAAgBE,cACtDH,SAASE,KAAKC,aACZC,EACFJ,SAASC,gBAAgBG,cAAgBC,OAAOC,YAElD,GADuBC,KAAKC,KAAKT,EAAYK,IAAiBD,EACxC,CACpB,IAAMM,EAAWpB,EAAKqB,MAAMD,SACxBA,GACEA,EAASE,aACXtB,EAAKqB,MAAME,YAGjB,CACF,EAACvB,CAAA,CAwCA,OAxCAwB,aAAA7B,EAAA,EAAA8B,IAAA,oBAAA5N,MA3BD,WACEmN,OAAOU,iBAAiB,SAAU3Q,KAAK0P,eACzC,GAAC,CAAAgB,IAAA,uBAAA5N,MAED,WACEmN,OAAOW,oBAAoB,SAAU5Q,KAAK0P,eAC5C,GAAC,CAAAgB,IAAA,SAAA5N,MAuBD,WACE,IAAMvC,EAAIP,KAAKsQ,MAAM/P,EACfsQ,EAAY7Q,KAAKsQ,MAAMO,UACvBC,EAAgB9Q,KAAKsQ,MAAMQ,cAC3BN,EAAaxQ,KAAKsQ,MAAME,WACxBO,EAAgB/Q,KAAKsQ,MAAMS,cAC3BV,EAAWrQ,KAAKsQ,MAAMD,SACtB3P,EAAWV,KAAKsQ,MAAM5P,SACtBsQ,EAAWhR,KAAKsQ,MAAMU,SACtBC,EAAcjR,KAAKsQ,MAAMW,YAG/B,OACEhQ,gBAAC4G,KAAI,CAAAnH,SAAA,CACHO,gBAAC4G,KAAKN,OAAM,CAAA7G,SAAA,CACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,IACZC,KAEFE,EACCC,EACAtQ,eAACkH,KAAKC,KAAI,CAAApH,SAAEA,IACZA,EAEFC,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRqQ,EAAiBpQ,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,EAAKjB,SAAC,YACnD2P,EACCA,EAASE,YACR5P,eAAC2E,KAAM,CACLgJ,MAAI,EACJ8C,QAASZ,EAAW9P,SAEnBH,EAAE,uBAELA,EAAE,sBARQ,OAaxB,KAACqO,CAAA,CApEY,CAASyC,aAuE1BzC,GAAY0C,aAAe,CACzBd,WAAY,SAAAe,GAAC,OAAEA,CAAC,EAChBN,aAAa,EACbF,eAAe,GAGF1Q,I,GAAAA,iBAAkBuO,ICrFpB4C,GAAwBvX,YAAGC,QAAAC,YAAA,miBCSzBkG,sBANf,SAAuBC,GAAIA,EAADC,EAA+B,IAA9BkR,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,cAAaA,EAClD,OACE9Q,eAAC6G,GAAU,CAACR,UAAWA,GAE3B,ICiCe3G,qBAAkB6C,aA5BjC,SAAiD5C,GAA6E,IAA3EC,EAACD,EAADC,EAAmBG,GAATJ,EAAP0D,QAAc1D,EAALyD,MAAezD,EAARI,UAAQgR,EAAApR,EAAEqR,mBAAW,IAAAD,GAAMA,EAAAD,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,cAAaA,EACxH,OACE9Q,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,oBAAoBG,SACxCO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAACiR,GAAc,CAAC5K,UAAWA,IACzB2K,EACAhR,eAAC0E,IAAI,CAACtC,GAAI,gDAAgDrC,SACxDC,eAAC2E,KAAM,CAACG,MAAM,UAAU5E,UAAU,OAAMH,SACrCH,EAAE,wBAGL,QAGRI,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCTeL,qBAAkB6C,aAnBjC,SAAmC5C,GAA+B,IAA7BC,EAACD,EAADC,EACnC,OAD6CD,EAAP0D,QAAc1D,EAALyD,MAAazD,EAAN+I,QAEpD,IAAK,UACH,OAAO1I,eAACuI,KAAK,CAACzD,MAAM,YAAW/E,SAAEH,EAAE,8CACrC,IAAK,UACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,8CACnC,IAAK,UACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,8CACnC,IAAK,UACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,SAAQ/E,SAAEH,EAAE,8CAClC,IAAK,QACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,4CACnC,IAAK,UACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,8CACnC,QACE,MAAO,iBAEb,KC+FeF,qBAAkB6C,aAzGjC,SAA6C5C,GAAuB,IAArBC,EAACD,EAADC,EAEvCsR,GAFiDvR,EAAP0D,QAAc1D,EAALyD,MACrCK,qBAAWxC,IACUiQ,sBAEzC5N,EAA4CC,YAASsN,GAAuB,CAC1EpF,UAAW,CACT0F,SAAU,mGAEZC,aAAc,MAJRvP,EAAKyB,EAALzB,MAAOD,EAAO0B,EAAP1B,QAASE,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAQ9B,GAAIzP,EAAS,OACX5B,eAACsR,GAAwC,CAACN,aAAa,EAAKjR,SAC1DC,eAAA,KAAAD,SAAIH,EAAE,iCAIV,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEV7B,eAACsR,GAAwC,CAACN,aAAa,EAAKjR,SAC1DC,eAAA,KAAAD,SAAIH,EAAE,gCAKZ,IAAM2R,EAAczP,EAAK0P,8BAGzB,OACExR,eAACsR,GAAwC,CAACN,aAAa,EAAKjR,SAC1DC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,uDACb8P,SAAU6B,EAAY7B,SACtBY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOF,EAAY7B,SAASgC,WAE9BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBL,8BAA8BpI,MACzDsG,EAAWmC,EAAgBL,8BAA8B9B,SAE/D,OAAOoC,EAAS3S,OACZ,CAGEqS,8BAA+B,CAC7BO,WAAYH,EAAeJ,8BAA8BO,WACzD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeJ,8BAA8BpI,OAAK4I,aAAKF,IACnEpC,aAGJkC,CACJ,GAEJ,EAAE7R,SAEEwR,EAAYnI,MAAMjK,OAOpBmB,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,uCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oCACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRwR,EAAYnI,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACmS,GAA0B,CAACzJ,OAAQa,EAAKb,WAE3C1I,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAK6I,UAAUxG,OAAOsF,KAEhClR,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK8I,aAERrS,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK+I,SAERtS,eAACiS,KAAMxM,IAAG,MAbIoH,eAgBJ,SAjClB7M,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,8DAwCpB,K,iBCxHa2S,GAAgDC,OAAaC,MAAM,CAC9EC,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,MC+CMpT,I,GAAAA,iBAAkB6C,aA5CjC,SAAgD5C,GAAkD,IAA/CC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UACnF,OACE/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,6BAA6BG,SAAA,CAChDC,eAACsT,KAAK,CAAChP,KAAK,SACJ8B,KAAK,mBACLlG,UAAY+S,EAAOP,iBAAoB,0BAA4B,eACnEa,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,0BAGrEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,8BAA8BG,SAAA,CACjDC,eAACsT,KAAK,CAAChP,KAAK,SACJ8B,KAAK,oBACLlG,UAAY+S,EAAOF,kBAAqB,0BAA4B,eACpEQ,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,+BAK1EI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVO,gBAACqE,KAAM,CACNG,MAAM,UACL5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAAA,CAEtBH,EAAE,oBAAoB,IAACI,eAACmG,KAAI,CAACC,KAAK,qBAErCpG,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACjBH,EAAE,2BAMf,KChCM+T,GAAWra,YAAGC,QAAAC,YAAA,0MAgELkG,qBAAkB6C,aAvDjC,SAA+C5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACnDuQ,EAAkBC,YAAYF,IAAvBG,EAAgCC,YAAAH,EAAA,GAAzB,GACRvN,EAAY,4CAElB,OACErG,eAACsR,GAAwC,CAACjL,UAAWA,EAAUtG,SAC7DO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,0DAEjBI,eAACgU,KAAM,CACLC,cAAe,CACbvB,kBAAkB,IAAIxP,MAAOqC,cAC7BwN,mBAAmB,IAAI7P,MAAOgR,WAAa,GAC7CC,iBAAkB5B,GAClB6B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBR,EAAQ,CAAErI,UAAW,CACnB8I,MAAO,CACLC,MAAOH,EAAOtB,kBACd0B,KAAMJ,EAAO3B,mBAEdgC,eAAgB,CACf,CAACC,MAAO9D,GACNpF,UAAW,CACT0F,SAAU,uGAGjByD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,8DAAgE,CAC7EmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACpBjT,eAACmV,GAAuC,CACtCnC,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,GACX,QAMhB,KC7Ce3G,qBAAkB6C,aA5BjC,SAAkD5C,GAA6E,IAA3EC,EAACD,EAADC,EAAmBG,GAATJ,EAAP0D,QAAc1D,EAALyD,MAAezD,EAARI,UAAQgR,EAAApR,EAAEqR,mBAAW,IAAAD,GAAMA,EAAAD,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,cAAaA,EACzH,OACE9Q,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,oBAAoBG,SACxCO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAACiR,GAAc,CAAC5K,UAAWA,IACzB2K,EACAhR,eAAC0E,IAAI,CAACtC,GAAI,iDAAiDrC,SACzDC,eAAC2E,KAAM,CAACG,MAAM,UAAU5E,UAAU,OAAMH,SACvCH,EAAE,wBAGH,QAGRI,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCoFeL,qBAAkB6C,aA1GjC,SAA8C5C,GAAuB,IAArBC,EAACD,EAADC,EAExCsR,GAFkDvR,EAAP0D,QAAc1D,EAALyD,MACtCK,qBAAWxC,IACUiQ,sBAEzC5N,EAA4CC,YAASsN,GAAuB,CAC1EpF,UAAW,CACT0F,SAAU,qGAEZC,aAAc,MAJRvP,EAAKyB,EAALzB,MAAOD,EAAO0B,EAAP1B,QAASE,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAS9B,GAAIzP,EAAS,OACX5B,eAACoV,GAAyC,CAACpE,aAAa,EAAKjR,SAC3DC,eAAA,KAAAD,SAAIH,EAAE,iCAIV,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEV7B,eAACoV,GAAyC,CAACpE,aAAa,EAAKjR,SAC3DC,eAAA,KAAAD,SAAIH,EAAE,gCAKZtH,QAAQC,IAAI,6BACZD,QAAQC,IAAIuJ,GACZ,IAAMyP,EAAczP,EAAK0P,8BAKzB,OACExR,eAACoV,GAAyC,CAACpE,aAAa,EAAKjR,SAC3DC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,wDACb8P,SAAU6B,EAAY7B,SACtBY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOF,EAAY7B,SAASgC,WAE9BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBL,8BAA8BpI,MACzDsG,EAAWmC,EAAgBL,8BAA8B9B,SAE/D,OAAOoC,EAAS3S,OACZ,CAGEqS,8BAA+B,CAC7BO,WAAYH,EAAeJ,8BAA8BO,WACzD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeJ,8BAA8BpI,OAAK4I,aAAKF,IACnEpC,aAGJkC,CACJ,GAEJ,EAAE7R,SAEEwR,EAAYnI,MAAMjK,OAOpBmB,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,uCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sCAJNiN,kBAOlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRwR,EAAYnI,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACmS,GAA0B,CAACzJ,OAAQa,EAAKb,WAE3C1I,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAK6I,UAAUxG,OAAOsF,KAEhClR,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK8I,aAERrS,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK+I,WAXMzF,eAaJ,SA7BlB7M,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,+DAoCpB,KCxHayV,GAAkD7C,OAAaC,MAAM,CAChFC,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,IACPwC,YAAa9C,OACVG,aCoEUjT,I,GAAAA,iBAAkB6C,aAnEjC,SAAkD5C,GAAkD,IAA/CC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UACrF,OACE/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,6BAA6BG,SAAA,CAChDC,eAACsT,KAAK,CAAChP,KAAK,SACJ8B,KAAK,mBACLlG,UAAY+S,EAAOP,iBAAoB,0BAA4B,eACnEa,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,0BAGrEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,8BAA8BG,SAAA,CACjDC,eAACsT,KAAK,CAAChP,KAAK,SACJ8B,KAAK,oBACLlG,UAAY+S,EAAOF,kBAAqB,0BAA4B,eACpEQ,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,0BAGtEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0DAA0DG,SAAA,CAC7EO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,cACLlG,UAAY+S,EAAOqC,YAAe,0BAA4B,eAC9D/B,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,QAAOpC,SAAaH,EAAE,oDAATiN,gBAC3B7M,eAAA,UAAQmC,MAAM,iBAAgBpC,SAAaH,EAAE,2EAATiN,mBAEtC7M,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,6BAIlEF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,+BAKpEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVO,gBAACqE,KAAM,CACNG,MAAM,UACL5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAAA,CAEtBH,EAAE,oBAAoB,IAACI,eAACmG,KAAI,CAACC,KAAK,qBAErCpG,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACjBH,EAAE,2BAMf,KC/DM+T,GAAWra,YAAGC,QAAAC,YAAA,gNAqELkG,qBAAkB6C,aA5DjC,SAA+C5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACnDuQ,EAAkBC,YAAYF,IAAvBG,EAAgCC,YAAAH,EAAA,GAAzB,GACRvN,EAAY,6CAElB,OACErG,eAACoV,GAAyC,CAAC/O,UAAWA,EAAUtG,SAC9DO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,2DAEjBI,eAACgU,KAAM,CACLC,cAAe,CACbvB,kBAAkB,IAAIxP,MAAOqC,cAC7BwN,mBAAmB,IAAI7P,MAAOgR,WAAa,EAC3CrL,YAAa,GACbyM,YAAa,SAEfnB,iBAAkBkB,GAClBjB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBR,EAAQ,CAAErI,UAAW,CACnB8I,MAAO,CACLC,MAAOH,EAAOtB,kBACd0B,KAAMJ,EAAO3B,iBACb7J,YAAawL,EAAOxL,YACpByM,YAAajB,EAAOiB,cAErBZ,eAAgB,CACf,CAACC,MAAO9D,GACNpF,UAAW,CACT0F,SAAU,yGAGjByD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,+DAAiE,CAC9EmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACpBjT,eAACuV,GAAyC,CACxCvC,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,GACX,QAMhB,KC1Ce3G,qBAAkB6C,aA5BjC,SAA0D5C,GAA6E,IAA3EC,EAACD,EAADC,EAAmBG,GAATJ,EAAP0D,QAAc1D,EAALyD,MAAezD,EAARI,UAAQgR,EAAApR,EAAEqR,mBAAW,IAAAD,GAAMA,EAAAD,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,cAAaA,EACjI,OACE9Q,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,oBAAoBG,SACxCO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAACiR,GAAc,CAAC5K,UAAWA,IACzB2K,EACAhR,eAAC0E,IAAI,CAACtC,GAAI,2DAA2DrC,SACnEC,eAAC2E,KAAM,CAACG,MAAM,UAAU5E,UAAU,OAAMH,SACvCH,EAAE,wBAGH,QAGRI,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCuFeL,qBAAkB6C,aA7GjC,SAAuD5C,GAAuB,IAArBC,EAACD,EAADC,EAEjDsR,GAF2DvR,EAAP0D,QAAc1D,EAALyD,MAC/CK,qBAAWxC,IACUiQ,sBAEzC5N,EAA4CC,YAASsN,GAAuB,CAC1EpF,UAAW,CACT0F,SAAU,uHAEZC,aAAc,MAJRvP,EAAKyB,EAALzB,MAAOD,EAAO0B,EAAP1B,QAASE,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAQ9B,GAAIzP,EAAS,OACX5B,eAACwV,GAAiD,CAACxE,aAAa,EAAKjR,SACnEC,eAAA,KAAAD,SAAIH,EAAE,iCAIV,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEV7B,eAACwV,GAAiD,CAACxE,aAAa,EAAKjR,SACnEC,eAAA,KAAAD,SAAIH,EAAE,gCAKZtH,QAAQC,IAAI,sCACZD,QAAQC,IAAIuJ,GACZ,IAAMyP,EAAczP,EAAK0P,8BAIzB,OACExR,eAACwV,GAAiD,CAACxE,aAAa,EAAKjR,SACnEC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,iEACb8P,SAAU6B,EAAY7B,SACtBY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOF,EAAY7B,SAASgC,WAE9BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBL,8BAA8BpI,MACzDsG,EAAWmC,EAAgBL,8BAA8B9B,SAE/D,OAAOoC,EAAS3S,OACZ,CAGEqS,8BAA+B,CAC7BO,WAAYH,EAAeJ,8BAA8BO,WACzD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeJ,8BAA8BpI,OAAK4I,aAAKF,IACnEpC,aAGJkC,CACJ,GAEJ,EAAE7R,SAECwR,EAAYnI,MAAMjK,OAOnBmB,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,uCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oCACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRwR,EAAYnI,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACmS,GAA0B,CAACzJ,OAAQa,EAAKb,WAE3C1I,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAK6I,UAAUxG,OAAOsF,KAEhClR,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK8I,aAERrS,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK+I,SAERtS,eAACiS,KAAMxM,IAAG,MAbIoH,eAgBJ,SAjClB7M,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,wEAwCpB,KC1Ha6V,GAA2DjD,OAAaC,MAAM,CACzFC,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,MC+CMpT,I,GAAAA,iBAAkB6C,aA5CjC,SAA0D5C,GAAkD,IAA/CC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UAC7F,OACE/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,6BAA6BG,SAAA,CAChDC,eAACsT,KAAK,CAAChP,KAAK,SACJ8B,KAAK,mBACLlG,UAAY+S,EAAOP,iBAAoB,0BAA4B,eACnEa,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,0BAGrEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,8BAA8BG,SAAA,CACjDC,eAACsT,KAAK,CAAChP,KAAK,SACJ8B,KAAK,oBACLlG,UAAY+S,EAAOF,kBAAqB,0BAA4B,eACpEQ,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,+BAK1EI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVO,gBAACqE,KAAM,CACNG,MAAM,UACL5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAAA,CAEtBH,EAAE,oBAAoB,IAACI,eAACmG,KAAI,CAACC,KAAK,qBAErCpG,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACjBH,EAAE,2BAMf,KChCM+T,GAAWra,YAAGC,QAAAC,YAAA,0QAkELkG,qBAAkB6C,aAvDjC,SAAyD5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC7DuQ,EAAkBC,YAAYF,IAAvBG,EAAgCC,YAAAH,EAAA,GAAzB,GACRvN,EAAY,uDAElB,OACErG,eAACsR,GAAwC,CAACjL,UAAWA,EAAUtG,SAC7DO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,oEAEjBI,eAACgU,KAAM,CACLC,cAAe,CACbvB,kBAAkB,IAAIxP,MAAOqC,cAC7BwN,mBAAmB,IAAI7P,MAAOgR,WAAa,GAC7CC,iBAAkBsB,GAClBrB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBR,EAAQ,CAAErI,UAAW,CACnB8I,MAAO,CACLC,MAAOH,EAAOtB,kBACd0B,KAAMJ,EAAO3B,mBAEdgC,eAAgB,CACf,CAACC,MAAO9D,GACNpF,UAAW,CACT0F,SAAU,iHAGjByD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,wEAA0E,CACvFmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACpBjT,eAAC0V,GAAiD,CAChD1C,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,GACX,QAMhB,KCjEe3G,I,eAAAA,iBAAkB6C,aAdjC,SAAuB5C,GAA+B,IAA5BC,EAACD,EAADC,EAAG+N,EAAIhO,EAAJgO,KAAIC,EAAAjO,EAAEkO,iBAAS,IAAAD,EAAC,KAAIA,EAC/C,OACE5N,eAAC0E,IAAI,CAACtC,GAAIuL,EAAK5N,SACbO,gBAACqE,KAAM,CACLC,SAAO,EACPkJ,OAAK,EACLhJ,MAAM,UAAS/E,SAAA,CAEd8N,GAAuBjO,EAAE,2BAA2B,IAACI,eAACmG,KAAI,CAACC,KAAK,sBAIzE,KCPMuP,GAAW,SAAAzH,GAAAC,aAAAwH,EAAAzH,GAAA,IAAAE,EAAAC,aAAAsH,GACf,SAAAA,EAAYhG,GAAQ,IAADrB,EAGC,OAHDC,aAAA,KAAAoH,GACjBrH,EAAAF,EAAAQ,KAAA,KAAMe,GACNrX,QAAQC,IAAI,uBACZD,QAAQC,IAAIoX,GAAMrB,CACpB,CA8KI,OA9KHwB,aAAA6F,EAAA,EAAA5F,IAAA,SAAA5N,MAGD,WACE,IAAMvC,EAAIP,KAAKsQ,MAAM/P,EACfiO,EAAYjO,EAAE,kBACdgW,EAAgBhW,EAAE,gBAExB,OACEI,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,mBACtBU,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,kCAETI,eAAC0N,GAAoB,CAACzD,WAAW,OACrBC,SAAS,eAAcnK,SACjCC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,0BACNA,EAAE,8BACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,6BAKnD3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,4BACNA,EAAE,gCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,6BAIjD3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,0BACNA,EAAE,8BACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,2BAIjD3N,eAAC0N,GAAoB,CAACzD,WAAW,OACrBC,SAAS,iBAAgBnK,SACnCC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,4BACNA,EAAE,gCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,kCAMrDrN,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,oCAETI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,8BACNA,EAAE,kCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,+BAIjD3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,+BACNA,EAAE,mCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,gCAIjD3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,mCACNA,EAAE,uCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,sCAKnDrN,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,gCAETI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,4BACNA,EAAE,gCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,6BAIjD3N,eAAC0N,GAAoB,CAACzD,WAAW,OACrBC,SAAS,+BAA8BnK,SACjDC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,oCACNA,EAAE,wCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAW+H,EAAejI,KAAK,0CAMzDrN,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,kCAETI,eAAC0N,GAAoB,CAACzD,WAAW,OACrBC,SAAS,sBAAqBnK,SACxCC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,6CACNA,EAAE,iDACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,gDAKnD3N,eAAC0N,GAAoB,CAACzD,WAAW,OACrBC,SAAS,sBAAqBnK,SACxCC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,0CACNA,EAAE,8CACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,6CAKnD3N,eAAC0N,GAAoB,CAACzD,WAAW,OACrBC,SAAS,8BAA6BnK,SAChDC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,4CACNA,EAAE,gDACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,sDAS5D,KAACgI,CAAA,CAnLW,CAASjF,aAuLXhR,iBAAkB6C,YAAWoT,KCpM/BI,GAAwBzc,YAAGC,QAAAC,YAAA,4aAqB3Bwc,GAAuB1c,YAAGI,QAAAF,YAAA,gJAW1Byc,GAAiB3c,YAAGK,QAAAH,YAAA,yNAapB0c,GAAoB5c,YAAGO,QAAAL,YAAA,2MAYvB2c,GAAqB7c,YAAGQ,QAAAN,YAAA,sMClCtBkG,sBAjBf,SAAkBC,GAA8C,IAA3CC,EAACD,EAADC,EAAGwW,EAAMzW,EAANyW,OAAM9P,EAAA3G,EAAEO,iBAAS,IAAAoG,EAAC,GAAEA,EAAA+P,EAAA1W,EAAE2W,kBAAU,IAAAD,EAAC,GAAEA,EAKzD,OAJKC,IACHA,EAAa1W,EAAE,gBAIfI,eAAC0E,IAAI,CAACtC,GAAIgU,EAAOrW,SACfC,eAAC2E,KAAM,CACLzE,UAAWA,EACX4E,MAAM,UACNzC,KAAK,cAAatC,SACfuW,KAIX,ICqBe5W,qBAAkB6C,aA7BjC,SAA+B5C,GAA4E,IAA1EC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EAAAzF,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,uBAAsBA,EACrG,OACE9Q,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAWA,IAEvBrG,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,mBAAkBnK,SAC/CC,eAACyW,GAAS,CAACL,OAAQ,mCAK3BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCoIeL,qBAAkB6C,aArJjC,SAA2B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC9BqT,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACpB1G,EAAYtQ,EAAE,6BACpB0D,EAAqDC,YAASwS,GAAuB,CACnFtK,UAAW,CAAEoL,SAAUA,KADjBjV,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAGvCuC,EAA8BC,YAAYsC,IAAlCa,EAAqDjD,YAAAH,EAAA,GAApC,GAEnBqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAIP,GAAIgC,EAAS,OACX5B,eAACmX,GAAsB,CAAApX,SACrBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACmX,GAAsB,CAAApX,SACrBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,2CAKZ,IAAMwX,EAActV,EAAKuV,mBAGzB,OAAKD,EAAYhO,MAAMjK,OAYrBa,eAACmX,GAAsB,CAAApX,SACrBC,eAACiO,GAAW,CAACiC,UAAWA,EACVC,cAAe8G,EACfvH,SAAU0H,EAAY1H,SACtBY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO2F,EAAY1H,SAASgC,WAE9BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBwF,mBAAmBjO,MAC9CsG,EAAWmC,EAAgBwF,mBAAmB3H,SAEpD,OAAOoC,EAAS3S,OACZ,CAGEkY,mBAAoB,CAClBtF,WAAYH,EAAeyF,mBAAmBtF,WAC9C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeyF,mBAAmBjO,OAAK4I,aAAKF,IACxDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNqX,EAAYhO,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK+N,MADQzK,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,6BAA+BqH,EAAKgO,GAAG,EACnEzS,MAAM,YAAW/E,SACtBH,EAAE,kBAGPI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACdP,EAAkB,CAAEvL,UAAW,CAC7B8I,MAAO,CACPgD,KACAV,UAAWA,IAEhBnC,eAAgB,CACf,CAACC,MAAOoB,GAAuBtK,UAAW,CAAC,SAAYoL,OACvDjC,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZiX,EAAc,qBAAyB,oBAAqB,CAC3D9B,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,cAnCYyG,kBAPzBA,eA6CJ,aA/FxB7M,eAACmX,GAAsB,CAAApX,SACrBC,eAACiO,GAAW,CAACiC,UAAWA,EACVC,cAAe8G,EAAclX,SACzCC,eAAA,KAAAD,SACuDH,EAAlDiX,EAAoD,oCAAtC,uCAkG3B,KCvKaY,GAAoBjF,OAAaC,MAAM,CAChDrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACd0X,KAAM9E,SCuFK9S,qBAAkB6C,aA5EjC,SAA6B5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC3BgD,EAAY,uBAClBuN,EAA0BC,YAAYoC,IAA9ByB,EAA6C3D,YAAAH,EAAA,GAAhC,GAErB,OACE5T,eAACmX,GAAsB,CAACX,UAAU,EAAKzW,SACrCC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,iCAAiCG,SAC9CC,eAACgU,KAAM,CACHC,cAAe,CAAE7N,KAAM,GAAIkR,KAAM,IACjCnD,iBAAkBsD,GAClBrD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBoD,EAAc,CAAEjM,UAAW,CACzB8I,MAAO,CACLnO,KAAMiO,EAAOjO,KACbkR,KAAMK,SAAStD,EAAOiD,QAEvB5C,eAAgB,CACf,CAACC,MAAOoB,GAAuBtK,UAAW,CAAC,UAAY,OAE1DmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,yCAA2C,CACxDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACpB3S,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAOqE,KAAQ,0BAA4B,eACvD/D,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAG3DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACjBH,EAAE,2BAIN,OAMzB,KC4CeF,qBAAkB6C,aA/GjC,SAA8B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAClCkU,EAAKnU,EAAM2K,OAAOwJ,GAClBrH,EAAYtQ,EAAE,kCACdyG,EAAY,uBAClB/C,EAAiCC,YAASyS,GAAsB,CAC9DvK,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA6BC,YAAYqC,IAAjC0B,EAAmD7D,YAAAH,EAAA,GAAnC,GAExB,GAAIhS,EAAS,OACX5B,eAACmX,GAAsB,CAACX,UAAU,EAAKzW,SACrCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACmX,GAAsB,CAACX,UAAU,EAAKzW,SACrCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZ,IAAMiY,EAAc/V,EAAKgW,kBAEzB,OACE9X,eAACmX,GAAsB,CAACX,UAAU,EAAKzW,SACrCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACHC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClBkR,KAAMO,EAAYP,MAEpBnD,iBAAkBsD,GAClBrD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZuD,EAAiB,CAAEnM,UAAW,CAC5B8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,KACbkR,KAAMK,SAAStD,EAAOiD,QAEvB5C,eAAgB,CACf,CAACC,MAAOoB,GAAuBtK,UAAW,CAAC,UAAY,OAE1DmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,0CAA4C,CACzDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAcjG,EAANqH,OAAM,OAC5B/T,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAOqE,KAAQ,0BAA4B,eACvD/D,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAGzDI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAETH,EAAE,2BAIR,OAMzB,KC3GeF,sBAjBf,SAAqBC,GAA2C,IAAxCC,EAACD,EAADC,EAAGmY,EAAGpY,EAAHoY,IAAGzR,EAAA3G,EAAEO,iBAAS,IAAAoG,EAAC,GAAEA,EAAA+P,EAAA1W,EAAE2W,kBAAU,IAAAD,EAAC,GAAEA,EAKzD,OAJKC,IACHA,EAAa1W,EAAE,mBAIfI,eAAC0E,IAAI,CAACtC,GAAI2V,EAAIhY,SACZC,eAAC2E,KAAM,CACLzE,UAAWA,EACX4E,MAAM,YACNzC,KAAK,iBAAgBtC,SAClBuW,KAIX,ICsBe5W,qBAAkB6C,aA3BjC,SAA4B5C,GAAwE,IAApEC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAmBsG,GAAF1G,EAAPoX,QAAkBpX,EAAT0G,WAAS2R,EAAArY,EAAEsY,uBAAe,IAAAD,GAAMA,EAC7F,OACEhY,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CACjCsG,GAAarG,eAAC6G,GAAU,CAACR,UAAWA,IAEnC4R,EACF3X,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACkY,GAAY,CAACH,IAAI,2BAA2B7X,UAAU,SACvDF,eAACyW,GAAS,CAACL,OAAO,wBAAwBlW,UAAU,YAClC,QAGxBF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KC5BO,SAASoY,GAAsCvY,EAAGwY,EAAgB/U,EAASgV,GAChFD,IACGxD,MAAK,SAAAjV,GAAa,IAAXmC,EAAInC,EAAJmC,KACNxJ,QAAQC,IAAIuJ,GACZ5D,EAAOW,gBAAgBiD,EAAKwW,cAflC,SAAkBC,GAChB,IAAI5K,EAAOsB,SAASuJ,cAAc,KAClC7K,EAAKzJ,KAAOqU,EACZ5K,EAAKtI,OAAS,SAEd4J,SAASE,KAAKsJ,YAAY9K,GAC1BA,EAAK+K,QAELzJ,SAASE,KAAKwJ,YAAYhL,EAC5B,CASMiL,CAASP,EACX,IAAGnD,OAAM,SAACrT,GACRvJ,QAAQC,IAAIsJ,GAIZgT,KAAMhT,MAAMjC,EAAE,gCAAiC,CAC7CmV,SAAUF,KAAMG,SAASC,cAE7B,GACJ,CCEevV,qBAAkB6C,aAnBjC,SAAyC5C,GAAmE,IAAhEC,EAACD,EAADC,EAAYiZ,GAAFlZ,EAAP0D,QAA0B1D,EAAjBkZ,mBAAiBC,EAAAnZ,EAAEoZ,iBAAS,IAAAD,GAAKA,EAAAxS,EAAA3G,EAAEO,iBAAS,IAAAoG,EAAC,GAAEA,EACrGsN,EAAyBC,YAAYpa,GAA9B2e,EAA4CrE,YAAAH,EAAA,GAA9B,GAErB,OACE5T,eAAC2E,KAAM,CACLG,MAAO,aAAe5E,EACtB2E,KAAK,KACLxC,KAAK,iBACL2W,cAAc,IACdzS,MAAM,WACNkK,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAASwV,EAC/B,EAAC9Y,SAEEgZ,GAAanZ,EAAE,qBAGvB,K,SCoBeqZ,GA5CQ,SAAHtZ,GAAwG,IAAnGC,EAACD,EAADC,EAAG2G,EAAK5G,EAAL4G,MAAOlD,EAAO1D,EAAP0D,QAAS6V,EAAUvZ,EAAVuZ,WAAYC,EAAcxZ,EAAdwZ,eAAgBC,EAAUzZ,EAAVyZ,WAAYC,EAAc1Z,EAAd0Z,eAAgBC,EAAiB3Z,EAAjB2Z,kBAChGC,wBAAa,CACXC,SAAU,SAAAjN,GAAkB,IAAfkN,EAAOlN,EAAPkN,QACX,OACEnZ,gBAAA,OAAKJ,UAAU,YAAWH,SAAA,CACxBC,eAAA,MAAAD,SAAKwG,IACJ2S,EACAC,EACDnZ,eAAA,UAAQE,UAAU,0BAA0BuQ,QAASgJ,EAAQ1Z,SAAEH,EAAE,+BACjEU,gBAAA,UACEJ,UAAU,kBACVuQ,QAAS,WACP4I,EAAeC,GACZ1E,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KAGP,GAFAxJ,QAAQC,IAAI,WAAYuJ,GAEpBA,EAAK4X,wBAAyB,CAChCphB,QAAQC,IAAI,8BACZ,IAAMohB,EAAmB7X,EAAK4X,wBAAwBE,eAAerC,GACrElU,EAAQnB,KAAK,0BAAD4M,OAA2B6K,GACzC,CAGA9E,KAAMC,QACJsE,EAAY,CACVrE,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,IACF4X,GACF,EAAE1Z,SAAA,CAEFC,eAACmG,KAAI,CAACC,KAAK,UAAU,IAAExG,EAAE,mCAIjC,GAEJ,ECDaF,I,qBAAAA,iBAAkB6C,aAtCjC,SAA4B5C,GAcxB,IAbFC,EAACD,EAADC,EAEAyD,GADK1D,EAALyD,MACOzD,EAAP0D,SACAkD,EAAK5G,EAAL4G,MACA2S,EAAUvZ,EAAVuZ,WACAC,EAAcxZ,EAAdwZ,eACAC,EAAUzZ,EAAVyZ,WACAC,EAAc1Z,EAAd0Z,eACAQ,EAAuBla,EAAvBka,wBAAuBC,EAAAna,EACvBoa,mBAAW,IAAAD,EAAC,WAAUA,EAAAE,EAAAra,EACtBsa,kBAAU,IAAAD,EAAC,GAAEA,EAAA3D,EAAA1W,EACb2W,kBAAU,IAAAD,EAAC,GAAEA,EAAA6D,EAAAva,EACbwa,uBAAe,IAAAD,EAAC,GAAEA,EAElB,OACEla,eAAA,UAAQE,UAAS,OAAA4O,OAASiL,EAAW,WAEnCtJ,QAAS,WACPwI,GAAe,CACbrZ,EAAGA,EACH2G,MAAOA,EACPlD,QAASA,EACT6V,WAAYlZ,eAAA,KAAAD,SAAImZ,IAChBC,eAAgBA,EAChBC,WAAYA,EACZC,eAAgBA,EAChBC,kBAAmBO,GAEzB,EAAE9Z,SACAO,gBAAA,QAAMJ,UAAWia,EAAgBpa,SAAA,CAC9Bka,EAAW,IAAE3D,MAItB,KC5Ca8D,GAAqB9gB,YAAGC,QAAAC,YAAA,0sCAyDxB6gB,GAAoB/gB,YAAGI,QAAAF,YAAA,2sCA0EvB8gB,GAAyBhhB,YAAGK,QAAAH,YAAA,01BAkD5B+gB,GAAyBjhB,YAAGO,QAAAL,YAAA,qLAU5BghB,GAAyBlhB,YAAGQ,QAAAN,YAAA,qLAU5BihB,GAA4BnhB,YAAGU,QAAAR,YAAA,8LAU/BkhB,GAAyBphB,YAAGY,QAAAV,YAAA,kJCzK1BmhB,GApCQ,SAAHhb,GAAwF,IAAnFC,EAACD,EAADC,EAAGsZ,EAAUvZ,EAAVuZ,WAAYC,EAAcxZ,EAAdwZ,eAAgBC,EAAUzZ,EAAVyZ,WAAYwB,EAAcjb,EAAdib,eAAgBtB,EAAiB3Z,EAAjB2Z,kBAChFC,wBAAa,CACXC,SAAU,SAAAjN,GAAkB,IAAfkN,EAAOlN,EAAPkN,QACX,OACEnZ,gBAAA,OAAKJ,UAAU,YAAWH,SAAA,CACxBC,eAAA,MAAAD,SAAKH,EAAE,4BACNsZ,EACAC,EACDnZ,eAAA,UAAQE,UAAU,0BAA0BuQ,QAASgJ,EAAQ1Z,SAAEH,EAAE,+BACjEU,gBAAA,UACEJ,UAAU,iBACVuQ,QAAS,WACPmK,EAAetB,GACZ1E,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACPxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACJsE,EAAY,CACVrE,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,IACF4X,GACF,EAAE1Z,SAAA,CAEFC,eAACmG,KAAI,CAACC,KAAK,YAAY,IAAExG,EAAE,mCAInC,GAEJ,EC+FaF,qBAAkB6C,aAhHjC,SAA4B5C,GAAwD,IAAtDC,EAACD,EAADC,EAAmBib,GAATlb,EAAP0D,QAAc1D,EAALyD,MAAezD,EAARkb,UAEzCC,GAFiDnb,EAAEob,gBACrCtX,qBAAWxC,IACA6Z,YAE/BlH,EAAoCC,YAAY4G,IAAxCf,EAAkE3F,YAAAH,EAAA,GAA3C,GAC/BoH,EAAiCnH,YAAY6G,IAArCO,EAA4DlH,YAAAiH,EAAA,GAAxC,GAE5B,OACE1a,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACRC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBU,gBAAC2R,KAAMC,UAAS,CAAChS,UAAU,kCAAiCH,SAAA,CAAEH,EAAE,mBAAmB,MAAIA,EAAE,0BAEzFU,gBAAC2R,KAAMC,UAAS,CAAAnS,SAAA,CAAEH,EAAE,kBAAkB,MAAIA,EAAE,kBAC5CU,gBAAC2R,KAAMC,UAAS,CAAAnS,SAAA,CAAEH,EAAE,2BAA2B,MAAIA,EAAE,yBACrDI,eAACiS,KAAMC,UAAS,MANFrF,kBASlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACR8a,EAASzR,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACzBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACP4L,KAAOpC,EAAKwD,MAAMnB,OAAOkP,GAAY,IAAC9a,eAAA,SACtCuJ,EAAK2R,UAAYlb,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEwJ,EAAK2R,SAAS9U,SAF1CyG,gBAIhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAK4R,QAAQ,IAACnb,eAAA,SACfA,eAAA,SAAOE,UAAU,aAAYH,SAAEwJ,EAAKV,iBAKtCvI,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAK6R,mBAAmB,IAACpb,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEwJ,EAAK8R,oBAA0Brb,eAAA,SACjFM,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAEwJ,EAAK+R,gBAAgB,IAACtb,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEwJ,EAAK8R,0BAEpF/a,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKgS,kBAAoBvb,eAAA,QAAAD,SACxBO,gBAACiI,KAAK,CAACzD,MAAM,UAAS/E,SAAA,CAAEwJ,EAAKgS,iBAAiBnV,KAAK,IAAEmD,EAAKgS,iBAAiBjE,MAAQhX,gBAAA,QAAAP,SAAA,CAAM,IAAEwJ,EAAKgS,iBAAiBjE,KAAK,YAChH,IAACtX,eAAA,SACTA,eAAA,SAAOE,UAAU,aAAYH,SAC1BwJ,EAAKuO,mBAAqB9X,eAAA,QAAAD,SACzBO,gBAACiI,KAAK,CAACzD,MAAM,UAAS/E,SAAA,CAAEwJ,EAAKuO,kBAAkB1R,KAAK,IAAEmD,EAAKuO,kBAAkBR,MAAQhX,gBAAA,QAAAP,SAAA,CAAM,IAAEwJ,EAAKuO,kBAAkBR,KAAK,iBAI/HhX,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAE/BC,eAACwb,GAAgC,CAC/B3C,kBAAmBtP,EAAKkS,qBACxB1C,WAAW,IAGb/Y,eAAC0N,GAAoB,CAAYzD,WAAW,MAAMC,SAAS,iBAAgBnK,SACvEC,eAAC0b,GAAa,CACZnV,MAAO3G,EAAE,sCACTsZ,WAAY5Y,gBAAA,KAAAP,SAAA,CAAGO,gBAAA,KAAAP,SAAA,CAAI4L,KAAOpC,EAAKwD,MAAMnB,OAAOkP,GAAY,MAAIvR,EAAK4R,WAAYnb,eAAA,SAAK,IAAEuJ,EAAKV,eACzFuQ,WAAaxZ,EAAE,4CACfyZ,eAAgBK,EAChBG,wBAAyB,CACvBpO,UAAW,CAAC8I,MAAO,CAACgD,GAAIhO,EAAKgO,KAC7B7C,eAAgB,CACd,CAAEC,MAAOyF,MAGbL,YAAY,gBACZE,WAAYja,eAACmG,KAAI,CAACC,KAAK,SACvBkQ,WAAY1W,EAAE,qBACdua,gBAAgB,MAfKtN,gBAmB3B7M,eAAC0E,IAAI,CAACtC,GAAI,0BAA4BmH,EAAKgO,GAAGxX,SAC5CC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,uCACduZ,eAAgBnZ,eAAA,KAAAD,SAAIwJ,EAAKoS,gBACzBvC,WAAYxZ,EAAE,4BACdgb,eAAgBK,EAChB3B,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAACC,MAAOyF,OAKlB,EAAEra,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBAvDfyG,kBA1BzBA,eAoFN,QAKtB,KCrIO,SAASjF,KACd,IAAIK,EAAY,CAAC,EAGbiT,EAAW7c,aAAa0E,QAAQxE,EAAKzD,kCAEvCmN,EAAUiT,SADRA,QAGmB9b,EAIvB,IAAI8I,EAAW7J,aAAa0E,QAAQxE,EAAK3D,mCAEvCqN,EAAUC,SADRA,QAGmB9I,EAIvB,IAAI+I,EAAY9J,aAAa0E,QAAQxE,EAAK1D,oCAS1C,OAPEoN,EAAUE,UADRA,QAGoB/I,EAGxB9G,QAAQC,IAAI0P,GAELA,CACT,C,yBCSevI,sBAlCf,SAAqBC,GAA8G,IAG7Hmb,EAHkBlb,EAACD,EAADC,EAAGgc,EAAQjc,EAARic,SAAQC,EAAAlc,EAAEmc,gBAAQ,IAAAD,EAAC,SAAAjL,GAAC,OAAEA,CAAC,EAAAiL,EAAAE,EAAApc,EAAEqc,cAAM,IAAAD,EAAC,SAAAnL,GAAC,OAAEA,CAAC,EAAAmL,EAAAzV,EAAA3G,EAAEO,iBAAS,IAAAoG,EAAC,eAAcA,EAAA2V,EAAAtc,EAAEuc,mBAAW,IAAAD,GAAKA,EAAAE,EAAAxc,EAAEyc,uBAAe,IAAAD,EAAC,GAAEA,EAK7H,OAJoB1Y,qBAAWxC,IACG6Z,YAIhC,IAAK,aACHA,EAAa,aACb,MACF,IAAK,aACHA,EAAa,aACb,MACF,QACEA,EAAa,aAIjB,OACE9a,eAACqc,KAAU,CACPC,YAAa1c,EAAE,iBACfkb,WAAYA,EACZc,SAAUA,EACVQ,gBAAkBA,GAAqCxc,EAAE,0BACzDsc,YAAaA,EACbhc,UAAWA,EACXqc,mBAAiB,EACjBC,kBAAgB,EAChBC,aAAa,SACbX,SAAU,SAAC/O,GAAI,OAAK+O,EAAS/O,EAAK,EAClCiP,OAAQ,kBAAMA,GAAQ,GAG9B,ICfA,SAASU,GAAoBC,GAC3B,IAAIC,EAEFA,EADED,IAAUpe,EAAK3D,kCACL,IAAIsI,KAAKyI,OAASkR,QAAQ,YAE1B,IAAI3Z,KAAKyI,OAASmR,MAAM,YAGtC,IAAMC,EAAU1e,aAAa0E,QAAQ4Z,GAOrC,OANII,IACFH,EAAY,IAAI1Z,KAAK6Z,IAKhBH,CACT,CAEA,SAASI,GAA6BjN,EAAK5N,EAAO4U,GAChD1Y,aAAaC,QAAQyR,EAAK5N,GAC1B4U,EAAQnP,KACV,CAsGelI,qBAAkB6C,aAjGjC,SAA8B5C,GAAiC,IAnCtCgd,EAmCQ/c,EAACD,EAADC,EAAYkC,GAAFnC,EAAP0D,QAAa1D,EAAJmC,MAAMiV,EAAOpX,EAAPoX,QACjDL,EAA8BC,oBApCPgG,EAoCgCpe,EAAKzD,iCAnCzCuD,aAAa0E,QAAQ4Z,IAI/B,KA+BqF/F,EAAA7C,YAAA2C,EAAA,GAAzFwE,EAAQtE,EAAA,GAAEqG,EAAWrG,EAAA,GAC1BsG,EAA8BvG,mBAAS+F,GAAoBne,EAAK3D,oCAAmCuiB,EAAApJ,YAAAmJ,EAAA,GAA9FhV,EAAQiV,EAAA,GAAEC,EAAWD,EAAA,GAC1BE,EAAgC1G,mBAAS+F,GAAoBne,EAAK1D,qCAAoCyiB,EAAAvJ,YAAAsJ,EAAA,GAAjGlV,EAASmV,EAAA,GAAEC,EAAYD,EAAA,GAE5B,OACEtd,eAAA,OAAKE,UAAU,OAAMH,SAEnBO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAACoQ,GAAI,EAAG/O,GAAI,EAAG0W,EAAG,EAAGhQ,GAAI,GAAGzN,SAAA,CAEnCC,eAAA,SAAOyd,MAAM,OAAM1d,SAAEH,EAAE,4CACvBU,gBAAA,UACEJ,UAhBQ,kCAiBRiC,MAAO+Y,EACPY,SAAW,SAAC4B,GACVT,EAAYS,EAAMrY,OAAOlD,OACzB6a,GACEze,EAAKzD,iCACL4iB,EAAMrY,OAAOlD,MACb4U,EAEJ,EAAEhX,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,yCAATiN,gBACrB/K,EAAK6b,WAAWvU,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAChCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,UAI7DvM,gBAACF,KAAKqF,IAAG,CAACoQ,GAAI,EAAG/O,GAAI,EAAG0W,EAAG,EAAGhQ,GAAI,GAAGzN,SAAA,CACnCC,eAAA,SAAOyd,MAAM,OAAM1d,SAAEH,EAAE,6CACvBI,eAAC4d,GAAY,CACX1d,UAAU,oBACV0b,SAAU1T,EACVgU,aAAa,EACbJ,SAAU,SAAC/O,GACT,IAAI8Q,EAAUlS,KAAOoB,GAAMnB,OAAO,cAClCwR,EAAYrQ,GACZiQ,GACEze,EAAK3D,kCACLijB,EACA9G,EAEJ,EACAqF,gBAAiBxc,EAAE,gDAGvBU,gBAACF,KAAKqF,IAAG,CAACoQ,GAAI,EAAG/O,GAAI,EAAG0W,EAAG,EAAGhQ,GAAI,GAAGzN,SAAA,CACnCC,eAAA,SAAOyd,MAAM,OAAM1d,SAAEH,EAAE,8CACvBI,eAAC4d,GAAY,CACX1d,UAAU,oBACV0b,SAAUzT,EACV+T,aAAa,EACbJ,SAAU,SAAC/O,GACT,IAAI8Q,EAAUlS,KAAOoB,GAAMnB,OAAO,cAClC2R,EAAaxQ,GACbiQ,GACEze,EAAK1D,mCACLgjB,EACA9G,EAEJ,EACAqF,gBAAiBxc,EAAE,iDAGvBI,eAACI,KAAKqF,IAAG,CAACoQ,GAAI,EAAG/O,GAAI,EAAG0W,EAAG,EAAGhQ,GAAI,GAAGzN,SACnCC,eAAC2E,KAAM,CACLzE,UAAU,cACV4E,MAAM,OACND,KAAK,KACL4L,QAAS,WAEPpS,aAAaC,QAAQC,EAAKzD,iCAAkC,IAC5DmiB,EAAY,IAEZ,IAAMa,EAAkBnS,OAASkR,QAAQ,WACzCxe,aAAaC,QAAQC,EAAK3D,kCACxBkjB,EAAgBlS,OAAO,eACzBwR,EAAY,IAAIla,KAAK4a,IAErB,IAAMC,EAAmBpS,OAASmR,MAAM,WACxCze,aAAaC,QAAQC,EAAK1D,mCACxBkjB,EAAiBnS,OAAO,eAC1B2R,EAAa,IAAIra,KAAK6a,IAEtBhH,EAAQnP,KACV,EAAE7H,SAEDH,EAAE,gCAMf,KC1CeF,qBAAkB6C,aArFjC,SAAwB5C,GAA4B,IAAzBC,EAACD,EAADC,EAEzB0D,GAFoC3D,EAARqe,SAAiBre,EAAP0D,QAEeE,YAAS6W,GAAoB,CAChF3O,UAAW7D,KACXiE,YAAa,kBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAWvC,GAAIzP,EAAS,OACX5B,eAACie,GAAmB,CAAClH,QAASA,EAAQhX,SACpCC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0BAA0BG,SAClDC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACie,GAAmB,CAAClH,QAASA,EAAQhX,SACpCC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0BAA0BG,SAClDC,eAAA,KAAAD,SAAIH,EAAE,wCAKZ,IAAMib,EAAW/Y,EAAKoc,gBAGtB,OAAKrD,EAASzR,MAAMjK,OAYlBmB,gBAAC2d,GAAmB,CAAClH,QAASA,EAASkB,iBAAiB,EAAKlY,SAAA,CAC3DC,eAACme,GAAqB,CAACrc,KAAMA,EAAMiV,QAxCvC,SAAcqH,GACZrH,EAAQnP,MACRtP,QAAQC,IAAI6lB,EACd,IAsCIpe,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,0BACb0Q,aAAa,EACbZ,SAAUmL,EAASnL,SACnBG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOoJ,EAASnL,SAASgC,WAE3BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBqM,gBAAgB9U,MAC3CsG,EAAWmC,EAAgBqM,gBAAgBxO,SAEjD,OAAOoC,EAAS3S,OACZ,CAGE+e,gBAAiB,CACfnM,WAAYH,EAAesM,gBAAgBnM,WAC3C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAesM,gBAAgB9U,OAAK4I,aAAKF,IACrDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFC,eAACqe,GAAmB,CAClBxD,SAAUA,EACVE,iBAAiB,SA3CvBza,gBAAC2d,GAAmB,CAAClH,QAASA,EAASkB,iBAAiB,EAAKlY,SAAA,CAC3DC,eAACme,GAAqB,CAACrc,KAAMA,EAAMiV,QAASA,IAC5C/W,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0BAA0BG,SAClDC,eAAA,KAAAD,SACGH,EAAE,qCA4Cb,KCnGO,SAAS0e,GAAevR,GAC3B,OAAOpB,KAAOoB,GAAMnB,OAAO,aAQ/B,CAEO,SAAS2S,GAAmBxR,GAC/B,OAAIA,aAAgB7J,KACT6J,EAAKyR,WAAa,KACjB,IAAMzR,EAAK0R,cAAc/W,OAAO,GAEjCqF,CAEf,CAGO,SAAS2R,GAAsBC,GAElC,IAAIC,EAAW,IAAI1b,KACf2b,EAAaF,EAAY9U,MAAM,KAInC,OAHA+U,EAASE,SAASD,EAAW,IAC7BD,EAASG,WAAWF,EAAW,IAExBD,CACX,CAcO,SAASI,GAAgBpf,GAC5B,MAAO,CACHA,EAAE,+BACFA,EAAE,gCACFA,EAAE,kCACFA,EAAE,iCACFA,EAAE,+BACFA,EAAE,iCACFA,EAAE,+BAEV,CAEO,SAASqf,GAAmBrf,GAC/B,MAAO,CACHA,EAAE,iCACFA,EAAE,kCACFA,EAAE,+BACFA,EAAE,+BACFA,EAAE,6BACFA,EAAE,8BACFA,EAAE,8BACFA,EAAE,gCACFA,EAAE,mCACFA,EAAE,iCACFA,EAAE,kCACFA,EAAE,iCAEV,CCrEO,IAAMsf,GAAiB1M,OAAaC,MAAM,CAC/C1F,KAAMyF,OACLG,SAAS/S,YAAE,uBACZub,QAAS3I,OACNK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdiJ,YAAa2J,OACb2M,OAAQ3M,OACLG,SAAS/S,YAAE,uBACdwf,IAAK5M,OACFG,SAAS/S,YAAE,uBACdyf,WAAY7M,OACTK,IAAI,GACJC,IAAI,KACJH,SAAS/S,YAAE,uBACd0f,eAAgB9M,OAChB+I,iBAAkB/I,OAClBsF,kBAAmBtF,SCpBR+M,GAA4B,CACrCC,WAAY,SACZC,QAAS,QACTC,SAAU,UCeChgB,kBAXU,SAAHC,GAAA,IAAMC,EAACD,EAADC,EAAG8T,EAAQ/T,EAAR+T,SAAQpN,EAAA3G,EAAEO,iBAAS,IAAAoG,EAAC,GAAEA,EAAA,OACnDtG,eAAC2E,KAAM,CACLL,KAAK,SACLoP,SAAUA,EACVxT,UAAS,cAAA4O,OAAgB5O,GACzB4E,MAAM,UAAS/E,SAEZH,EAAE,mBACE,ICKIF,kBAZU,SAAHC,GAAA,IAAMC,EAACD,EAADC,EAAGyG,EAAS1G,EAAT0G,UAASC,EAAA3G,EAAEO,iBAAS,IAAAoG,EAAC,GAAEA,EAAA,OACpDtG,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACL0D,KAAK,SACLnI,UAAWA,EACX4E,MAAM,OAAM/E,SAETH,EAAE,qBAEF,ICmJMF,qBAAkB6C,aAnJjC,SAA2B5C,GAavB,IAZFC,EAACD,EAADC,EAEAqT,GADOtT,EAAP0D,QACM1D,EAANsT,QACAoB,EAAM1U,EAAN0U,OACAsL,EAAShgB,EAATggB,UACA3M,EAAYrT,EAAZqT,aACA4M,EAAejgB,EAAfigB,gBACAC,EAAalgB,EAAbkgB,cACAxZ,EAAS1G,EAAT0G,UACAyZ,EAAangB,EAAbmgB,cACAC,EAAcpgB,EAAdogB,eAAcC,EAAArgB,EACdsgB,6BAAqB,IAAAD,EAAC,SAAApP,GAAC,OAAEA,CAAC,EAAAoP,EAE1B,OACE1f,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAOlG,KAAQ,0BAA4B,eACvD6O,SAAUvH,EAAOtH,KACjB+O,SAAU,SAAC/O,GACT8S,EAAc,OAAQ9S,GACtB6S,EAAgB,QAAQ,EAC1B,EACA5D,OAAQ,kBAAM4D,EAAgB,QAAQ,EAAK,IAE7C5f,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAGzDF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,UACLlG,UAAY+S,EAAOkI,QAAW,0BAA4B,eAC1D5H,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAI9DF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,4BAIlEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACR8B,KAAK,SACLlG,UAAY+S,EAAOkM,OAAU,0BAA4B,eACzD5L,aAAa,QACjBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,0BAG7DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,eAAeG,SAAA,CAChCC,eAACsT,KAAK,CAAChP,KAAK,OACR8B,KAAK,MACLlG,UAAY+S,EAAOmM,IAAO,0BAA4B,eACtD7L,aAAa,QACjBvT,eAACwT,KAAY,CAACpN,KAAK,MAAMqN,UAAU,OAAOvT,UAAU,0BAG1DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACvCC,eAACsT,KAAK,CAAChP,KAAK,OACR8B,KAAK,aACLlG,UAAY+S,EAAOoM,WAAc,0BAA4B,eAC7D9L,aAAa,QACjBvT,eAACwT,KAAY,CAACpN,KAAK,aAAaqN,UAAU,OAAOvT,UAAU,6BAInEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,WACLlG,UAAY+S,EAAOiI,SAAY,0BAA4B,eAC3D3H,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAUhC,WAAWvU,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACrCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,0BAG7DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,mBACLlG,UAAY+S,EAAOsI,iBAAoB,0BAA4B,eACnEhI,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAUO,kBAAkB9W,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK+N,KAAK,MAA9BzK,eAAwC,OAGzE7M,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,0BAGrEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,oBACLlG,UAAY+S,EAAO6E,kBAAqB,0BAA4B,eACpEvE,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAUtI,mBAAmBjO,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OAC7CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK+N,KAAK,MAA9BzK,eAAwC,OAGzE7M,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,6BAIxEF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPC,eAACmT,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SACtDO,gBAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,eAAA,SAAOsE,KAAK,OAAO6b,IAAKL,EAAe5f,UAAU,oBAAoB4b,SAAUmE,IAC/EjgB,eAAA,SAAOE,UAAU,oBAAoBkgB,MAAOb,GAA0Bxf,SACnEggB,gBAObzf,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAACqgB,GAAgB,CAAC3M,SAAUV,IAC5BhT,eAACsgB,GAAgB,CAACja,UAAWA,SAIvC,KCRe3G,qBAAkB6C,aAvIjC,SAA0B5C,GAAuB,IAArBC,EAACD,EAADC,EAAUyD,GAAF1D,EAALyD,MAAczD,EAAP0D,SAC9B6M,EAAYtQ,EAAE,8BACdyG,EAAS,oBAEf/C,EAAiCC,YAAS+W,IAAlC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACxB8R,EAA+BC,YAAY0G,IAApCgG,EAA2DxM,YAAAH,EAAA,GAAvC,GAG3B8C,EAAgCC,mBAAS,IAAGC,EAAA7C,YAAA2C,EAAA,GAArC8J,EAAQ5J,EAAA,GAAE6J,EAAW7J,EAAA,GACtBkJ,EAAgBY,iBAAO,MACvBX,EAAiBS,GAAY5gB,EAAE,yCAE/BqgB,EAAwB,SAACvC,GAC7BplB,QAAQC,IAAI,uBACZkoB,EAAY/C,EAAMrY,OAAOsb,MAAM,GAAGva,KACpC,EAEA,GAAIxE,EAAS,OACX5B,eAACie,GAAmB,CAAC5X,UAAWA,EAAUtG,SACxCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACc,KAAM,CAACE,QAAQ,EAAMD,QAAQ,QAKpC,GAAIc,EAAO,OACTvB,gBAAC2d,GAAmB,CAAC5X,UAAWA,EAAUtG,SAAA,CACvCzH,QAAQC,IAAIsJ,GACb7B,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,IAAM+f,EAAY7d,EAElB,OACE9B,eAACie,GAAmB,CAClB5X,UAAWA,EAAUtG,SAErBO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACgU,KAAM,CACLC,cAAe,CACbpL,YAAa,GACbwW,WAAY,KAEdlL,iBAAkB+K,GAClB9K,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAIioB,GAEZ,IAAII,EAAY,CACd7T,KAAMuR,GAAejK,EAAOtH,MAC5BoO,QAAS9G,EAAO8G,QAChBtS,YAAawL,EAAOxL,YACpBsW,OAAQ9K,EAAO8K,OACfC,IAAK/K,EAAO+K,IACZC,WAAYhL,EAAOgL,WACnBnE,SAAU7G,EAAO6G,SACjBK,iBAAkBlH,EAAOkH,iBACzBzD,kBAAmBzD,EAAOyD,kBAC1B+I,iBAAkBL,GAGhBM,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB3oB,QAAQC,IAAI0oB,EAAa5b,OAAOiN,QAChC,IAAI4O,EAAeD,EAAa5b,OAAOiN,OACvCha,QAAQC,IAAI2oB,GAEZN,EAAU3R,SAAWiS,EAErBX,EAAqB,CAAE9U,UAAW,CAChC8I,MAAOqM,GACNlM,eAAgB,CACf,CAACC,MAAOyF,OAEXxF,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,sCAAwC,CACrDmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,EAClB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAEA,IAAI6M,EAAOrB,EAAcsB,QAAQT,MAAM,GACnCQ,GAAQA,EAAKtc,KAAO,QACtBic,EAAOO,cAAcF,GACZA,GAAQA,EAAKtc,KAAO,SAC7BgQ,KAAMhT,MAAMjC,EAAE,qDAAsD,CAClEmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,KAEdO,KAAMhT,MAAMjC,EAAE,gCAAiC,CAC7CmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,GAElB,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACshB,GAAkB,CACjB3B,UAAWA,EACX3M,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRyL,cAAeA,EACfC,eAAgBA,EAChBE,sBAAuBA,EACvB5Z,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACM,QAMjC,KCmCevT,qBAAkB6C,aAxKjC,SAA2B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAC/BkU,EAAKnU,EAAM2K,OAAOwJ,GAClBrH,EAAYtQ,EAAE,+BACdyG,EAAS,oBAEf/C,EAAiCC,YAAS8W,GAAmB,CAC3D5O,UAAW,CACT8L,GAAIA,KAFA3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxB8R,EAAiCC,YAAY2G,IAArC+G,EAA4DxN,YAAAH,EAAA,GAAxC,GAG5B8C,EAAgCC,mBAAS,IAAGC,EAAA7C,YAAA2C,EAAA,GAArC8J,EAAQ5J,EAAA,GAAE6J,EAAW7J,EAAA,GACtBkJ,EAAgBY,iBAAO,MACvBX,EAAiBS,GAAY5gB,EAAE,yCAE/BqgB,EAAwB,SAACvC,GAC7BplB,QAAQC,IAAI,uBACZkoB,EAAY/C,EAAMrY,OAAOsb,MAAM,GAAGva,KACpC,EAEA,GAAIxE,EAAS,OACX5B,eAACie,GAAmB,CAAC5X,UAAWA,EAAUtG,SACxCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACc,KAAM,CAACE,QAAQ,EAAMD,QAAQ,QAKpC,GAAIc,EAAO,OACTvB,gBAAC2d,GAAmB,CAAC5X,UAAWA,EAAUtG,SAAA,CACvCzH,QAAQC,IAAIsJ,GACb7B,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,IAEI4hB,EACAC,EACAC,EAJE9H,EAAiB9X,EAAK8X,eAkB5B,OAZKA,EAAesB,WAClBsG,EAAkB5H,EAAesB,SAAS3D,IAGvCqC,EAAe2B,mBAClBkG,EAAmB7H,EAAe2B,iBAAiBhE,IAGhDqC,EAAe9B,oBAClB4J,EAAoB9H,EAAe9B,kBAAkBP,IAIrDvX,eAACie,GAAmB,CAClB5X,UAAWA,EAAUtG,SAErBO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACgU,KAAM,CACLC,cAAe,CAGblH,KAAM,IAAI7J,KAAK0W,EAAe7M,MAC9BoO,QAASvB,EAAeuB,QACxBtS,YAAa+Q,EAAe/Q,YAC5BsW,OAAQvF,EAAeuF,OACvBC,IAAKxF,EAAewF,IACpBC,WAAYzF,EAAeyF,WAC3BnE,SAAUsG,EACVjG,iBAAkBkG,EAClB3J,kBAAmB4J,GAErBvN,iBAAkB+K,GAClB9K,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAIioB,GAEZ,IAAII,EAAY,CACdrJ,GAAIA,EACJxK,KAAMuR,GAAejK,EAAOtH,MAC5BoO,QAAS9G,EAAO8G,QAChBtS,YAAawL,EAAOxL,YACpBsW,OAAQ9K,EAAO8K,OACfC,IAAK/K,EAAO+K,IACZC,WAAYhL,EAAOgL,WACnBnE,SAAU7G,EAAO6G,SACjBK,iBAAkBlH,EAAOkH,iBACzBzD,kBAAmBzD,EAAOyD,mBAG5B,SAAS6J,IACPJ,EAAqB,CAAE9V,UAAW,CAChC8I,MAAOqM,GACNlM,eAAgB,CACf,CAACC,MAAOyF,OAEXxF,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,uCAAyC,CACxDmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACtDkT,SAAUF,KAAMG,SAASC,eAE3B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,CAGA,IAAIwM,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB3oB,QAAQC,IAAI0oB,EAAa5b,OAAOiN,QAChC,IAAI4O,EAAeD,EAAa5b,OAAOiN,OACvCha,QAAQC,IAAI2oB,GAEZN,EAAU3R,SAAWiS,EACrBN,EAAUC,iBAAmBL,EAE7BmB,GACF,EAEA,IAAIR,EAAOrB,EAAcsB,QAAQT,MAAM,GACnCQ,GAAQA,EAAKtc,KAAO,QACtBic,EAAOO,cAAcF,GACZA,GAAQA,EAAKtc,KAAO,SAC7BgQ,KAAMhT,MAAMjC,EAAE,qDAAsD,CAClEmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,IAEdqN,GAEJ,EAAE5hB,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACshB,GAAkB,CACjB3B,UAAW7d,EACXkR,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRyL,cAAeA,EACfC,eAAgBA,EAChBE,sBAAuBA,EACvB5Z,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACM,QAMjC,KCtLa2O,GAAyBpP,OAAaC,MAAM,CACrDoP,UAAWrP,OACRG,SAAS/S,YAAE,uBACdkiB,QAAStP,OACNG,SAAS/S,YAAE,yBC2DDF,iBAAkB6C,aAhDD,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAc6M,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiB3M,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQhO,EAAS1G,EAAT0G,UAAS,OACpH/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAiC,aAAzBgB,EAAOnH,cAAgCtN,EAAE,gBAAkBA,EAAE,sBAAsBG,SAAA,CACrGC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO4O,UAAa,0BAA4B,eAC5DjG,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GACT8S,EAAc,YAAa9S,GAC3B6S,EAAgB,aAAa,EAC/B,EACA5D,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GACT8S,EAAc,UAAW9S,GACzB6S,EAAgB,WAAW,EAC7B,EACA5D,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,IAEhD5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,+BAKhEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAAC2E,KAAM,CACHG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAExBH,EAAE,gDAELI,eAACsgB,GAAgB,CAACja,UAAWA,SAExB,KCsDE3G,I,eAAAA,iBAAkB6C,aAzFjC,SAA8B5C,GAAgB,IAAdC,EAACD,EAADC,EAExBkb,GAFkCnb,EAAP0D,QACbI,qBAAWxC,IACA6Z,YAC/BpE,EAAkCC,mBAAS,IAAIzT,KAAKyI,OAASkR,QAAQ,WAAUjG,EAAA7C,YAAA2C,EAAA,GAAxEmL,EAASjL,EAAA,GAAEmL,EAAYnL,EAAA,GAC9BsG,EAA8BvG,mBAAS,IAAIzT,KAAKyI,OAASmR,MAAM,WAAUK,EAAApJ,YAAAmJ,EAAA,GAAlE4E,EAAO3E,EAAA,GAAE6E,EAAU7E,EAAA,GAC1BE,EAAgC1G,oBAAS,GAAM2G,EAAAvJ,YAAAsJ,EAAA,GAAxC4E,EAAQ3E,EAAA,GAAE4E,EAAW5E,EAAA,GAC5B6E,EAAkCxL,mBAAS,IAAGyL,EAAArO,YAAAoO,EAAA,GAAvC9J,EAAS+J,EAAA,GAAEC,EAAYD,EAAA,GAExBlS,EAAYtQ,EAAE,iCACdyG,EAAY,oBAElBuN,EAA2BC,YAAYpa,GAA/B2e,EAA6CrE,YAAAH,EAAA,GAA/B,GAEtB,OACE5T,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC6G,GAAU,CAACR,UAAWA,QAG3BrG,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACPC,cAAe,CACb4N,UAAWA,EACXC,QAASA,GAEX3N,iBAAkByN,GAClBxN,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ0N,EAAa1N,EAAOwN,WACpBG,EAAW3N,EAAOyN,SAElB,IAAMQ,EAAehE,GAAejK,EAAOwN,WACrCU,EAAajE,GAAejK,EAAOyN,SACzCO,EAAa,oCAADvT,OAC0BwT,EAAY,KAAAxT,OAAIyT,IAGtDjO,GAAc,GACd4N,GAAY,EAChB,EAAEniB,SAED,SAAA+M,GAAA,IAAGkG,EAAYlG,EAAZkG,aAAc6M,EAAa/S,EAAb+S,cAAeD,EAAe9S,EAAf8S,gBAAiB3M,EAAMnG,EAANmG,OAAQoB,EAAMvH,EAANuH,OAAevH,EAAP0V,QAAO,OACvExiB,eAACyiB,GAAyB,CACxBzP,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,MAKN4b,EACA3hB,gBAAC4G,KAAI,CAACX,MAAO3G,EAAE,uCAAuCG,SAAA,CACpDO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACPH,EAAE,6CACHI,eAACiG,KAAI,CAAAlG,SACHO,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CACPH,EAAE,kBAAoB,KACtB+L,KAAOkW,GAAWjW,OAAOkP,GAAY,IAAG,MACxCnP,KAAOmW,GAASlW,OAAOkP,WAI9B9a,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVO,gBAACqE,KAAM,CACLG,MAAM,UACN2L,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAASgV,EAC7B,EAACtY,SAAA,CAEFC,eAACmG,KAAI,CAACC,KAAK,mBAAmB,IAAExG,EAAE,4BAItC,SAKZ,KChHa8iB,GAAuBppB,YAAGC,QAAAC,YAAA,0aAqB1BmpB,GAAsBrpB,YAAGI,QAAAF,YAAA,8IAWzBopB,GAAgBtpB,YAAGK,QAAAH,YAAA,qNAanBqpB,GAAmBvpB,YAAGO,QAAAL,YAAA,uMAYtBspB,GAAoBxpB,YAAGQ,QAAAN,YAAA,kMCdrBkG,qBAAkB6C,aA7BjC,SAA8B5C,GAA6E,IAA1EC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EAAAzF,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,sBAAqBA,EAEpG,OACE9Q,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAWA,IAEvBrG,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,mBAAkBnK,SAC/CC,eAACyW,GAAS,CAACL,OAAO,kCAK1BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCgIeL,qBAAkB6C,aAnJjC,SAA0B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC7BqT,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACpB1G,EAAYtQ,EAAE,4BACpB0D,EAAqDC,YAASmf,GAAsB,CAClFjX,UAAW,CAAEoL,SAAUA,KADjBjV,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAGvCuC,EAA6BC,YAAYiP,IAAjCC,EAAmDhP,YAAAH,EAAA,GAAnC,GAElBqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAIP,GAAIgC,EAAS,OACX5B,eAACgjB,GAAqB,CAAAjjB,SACpBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACgjB,GAAqB,CAAAjjB,SACpBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,0CAKZ,IAAMqjB,EAAanhB,EAAKoe,kBAGxB,OAAK+C,EAAW7Z,MAAMjK,OAYpBa,eAACgjB,GAAqB,CAAAjjB,SACpBC,eAACiO,GAAW,CAACiC,UAAWA,EACdC,cAAe8G,EACfvH,SAAUuT,EAAWvT,SACrBY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAOwR,EAAWvT,SAASgC,WAE7BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBqO,kBAAkB9W,MAC7CsG,EAAWmC,EAAgBqO,kBAAkBxQ,SAEnD,OAAOoC,EAAS3S,OACZ,CAGE+gB,kBAAmB,CACjBnO,WAAYH,EAAesO,kBAAkBnO,WAC7C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAesO,kBAAkB9W,OAAK4I,aAAKF,IACvDpC,aAGJkC,CACN,GAEJ,EAAE7R,SACRO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNkjB,EAAW7Z,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC3BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK+N,MADQzK,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,4BAA8BqH,EAAKgO,GAAG,EAClEzS,MAAM,YAAW/E,SACtBH,EAAE,kBAGPI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACdwL,EAAiB,CAAEtX,UAAW,CAC5B8I,MAAO,CACPgD,KACAV,UAAWA,IAEhBnC,eAAgB,CACf,CAACC,MAAO+N,GAAsBjX,UAAW,CAAC,SAAYoL,OACtDjC,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZiX,EAAc,qBAAyB,oBAAqB,CAC3D9B,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,cAnCYyG,kBAPzBA,eA6CJ,aA9FxB7M,eAACgjB,GAAqB,CAAAjjB,SACpBC,eAACiO,GAAW,CAACiC,UAAWA,EACXC,cAAe8G,EAAclX,SACxCC,eAAA,KAAAD,SACsDH,EAAjDiX,EAAmD,mCAArC,sCAiG3B,KCtKaqM,GAAmB1Q,OAAaC,MAAM,CAC/CrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACd0X,KAAM9E,SC0FK9S,qBAAkB6C,aA5EjC,SAA4B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACzBgD,EAAY,sBAClBuN,EAAyBC,YAAY+O,IAA7BO,EAA2CpP,YAAAH,EAAA,GAA/B,GAEpB,OACE5T,eAACgjB,GAAqB,CAACxM,UAAU,EAAKzW,SACpCC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,gCAAgCG,SAC7CC,eAACgU,KAAM,CACLC,cAAe,CAAE7N,KAAM,GAAIkR,KAAM,IACjCnD,iBAAkB+O,GAClB9O,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjB6O,EAAa,CAAE1X,UAAW,CACxB8I,MAAO,CACLnO,KAAMiO,EAAOjO,KACbkR,KAAMK,SAAStD,EAAOiD,QAEvB5C,eAAgB,CACf,CAACC,MAAO+N,GAAsBjX,UAAW,CAAC,UAAY,OAEzDmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,wCAA0C,CACvDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACtB3S,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAOqE,KAAQ,0BAA4B,eACvD/D,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAG3DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,2BAIR,OAMrB,KC0CeF,qBAAkB6C,aAjHjC,SAA6B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MACnCmU,EAAKnU,EAAM2K,OAAOwJ,GAClBlR,EAAY,sBACZ6J,EAAYtQ,EAAE,iCACpB0D,EAAiCC,YAASof,GAAqB,CAC7DlX,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA4BC,YAAYgP,IAAhCO,EAAiDrP,YAAAH,EAAA,GAAlC,GAEvB,GAAIhS,EAAS,OACX5B,eAACgjB,GAAqB,CAACxM,UAAU,EAAKzW,SACpCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACgjB,GAAqB,CAACxM,UAAU,EAAKzW,SACpCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZ,IAAMiY,EAAc/V,EAAKyZ,iBAIzB,OAHAjjB,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAGV9B,eAACgjB,GAAqB,CAACxM,UAAU,EAAKzW,SACpCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClBkR,KAAMK,SAASE,EAAYP,OAE7BnD,iBAAkB+O,GAClB9O,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ+O,EAAgB,CAAE3X,UAAW,CAC3B8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,KACbkR,KAAMK,SAAStD,EAAOiD,QAEvB5C,eAAgB,CACf,CAACC,MAAO+N,GAAsBjX,UAAW,CAAC,UAAY,OAEzDmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,yCAA2C,CACxDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAcjG,EAANqH,OAAM,OAC9B/T,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAOqE,KAAQ,0BAA4B,eACvD/D,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAGzDI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAETH,EAAE,2BAIR,OAMrB,KCnIO,SAASgI,KACd,IAAIK,EAAY,CAAC,EAEbS,EAASrK,aAAa0E,QAAQxE,EAAKxD,gCASvC,OAPEkN,EAAUS,OADRA,QAGiBtJ,EAGrB9G,QAAQC,IAAI0P,GAELA,CACT,CCHA,SAASob,GAAgBlhB,GACvB,IAAImhB,EAAejlB,aAAa0E,QAAQZ,GAGxC,OAFA7J,QAAQC,IAAI+qB,GAERA,IAGFhrB,QAAQC,IAAI,wBACL,GAEX,CASA,IA2BemH,iBAAkB6C,aAxBH,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAkBmX,GAARpX,EAAP0D,QAAa1D,EAAJmC,KAAanC,EAAPoX,SAAO,OACxD/W,eAAA,OAAKE,UAAU,OAAMH,SAEnBO,gBAAA,UACEJ,UAAS,GAAA4O,OAPK,qBAQd3M,MAAOkhB,GAAgB9kB,EAAKxD,gCAC5B+gB,SAAW,SAAC4B,IAflB,SAAsC3N,EAAK5N,EAAO4U,GAChD1Y,aAAaC,QAAQyR,EAAK5N,GAC1B4U,EAAQnP,KAEV,CAYQoV,CACEze,EAAKxD,+BACL2iB,EAAMrY,OAAOlD,MACb4U,EAEJ,EAAEhX,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,kCAATiN,gBACtB7M,eAAA,UAAQmC,MAAM,QAAOpC,SAAaH,EAAE,oCAATiN,gBAC3B7M,eAAA,UAAQmC,MAAM,OAAMpC,SAAaH,EAAE,mCAATiN,gBAC1B7M,eAAA,UAAQmC,MAAM,OAAMpC,SAAaH,EAAE,mCAATiN,gBAC1B7M,eAAA,UAAQmC,MAAM,UAASpC,SAAaH,EAAE,sCAATiN,gBAC7B7M,eAAA,UAAQmC,MAAM,YAAWpC,SAAaH,EAAE,wCAATiN,oBAE7B,KCROnN,I,2BAAAA,iBAAkB6C,aA9BjC,SAA4B5C,GAAsC,IAAlCC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAUgX,EAAOpX,EAAPoX,QACpD,OACE/W,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAACujB,GAAqB,CAACxM,QAASA,IAChC/W,eAACkY,GAAY,CAACH,IAAI,2BAA2B7X,UAAU,SACvDF,eAAC0E,IAAI,CAACtC,GAAG,2BAA0BrC,SACjCC,eAAC2E,KAAM,CACLG,MAAM,YACNzC,KAAK,SAAQtC,SAEZH,EAAE,2BAKXI,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCnCMyjB,GAAqB,SAAAtV,GAAAC,aAAAqV,EAAAtV,GAAA,IAAAE,EAAAC,aAAAmV,GACzB,SAAAA,EAAY7T,GAAQ,IAADrB,EAGC,OAHDC,aAAA,KAAAiV,GACjBlV,EAAAF,EAAAQ,KAAA,KAAMe,GACNrX,QAAQC,IAAI,kCACZD,QAAQC,IAAIoX,GAAMrB,CACpB,CAsBC,OAtBAwB,aAAA0T,EAAA,EAAAzT,IAAA,SAAA5N,MAED,WACE,IAAMvC,EAAIP,KAAKsQ,MAAM/P,EAGrB,OAFeP,KAAKsQ,MAAMjH,QAGxB,IAAK,MACH,OAAO1I,eAACuI,KAAK,CAACzD,MAAM,YAAW/E,SAAEH,EAAE,iCACrC,IAAK,QACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,YAAW/E,SAAEH,EAAE,mCACrC,IAAK,OACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,kCACnC,IAAK,OACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,kCACnC,IAAK,UACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,SAAQ/E,SAAEH,EAAE,qCAClC,IAAK,YACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,uCACnC,QACE,OAAOA,EAAE,qCAEf,KAAC4jB,CAAA,CA3BwB,CAAS9S,aA+BrBhR,iBAAkB6C,YAAWihB,KCvC/BC,GAAqBnqB,YAAGC,QAAAC,YAAA,0wBAqCxBkqB,GAAoBpqB,YAAGI,QAAAF,YAAA,w5FA2JvBmqB,GAAiBrqB,YAAGK,QAAAH,YAAA,sMAYpBoqB,GAAmCtqB,YAAGO,QAAAL,YAAA,kOAUtCqqB,GAAyBvqB,YAAGQ,QAAAN,YAAA,kJAS5BsqB,GAAsBxqB,YAAGU,QAAAR,YAAA,mVAmBzBuqB,GAAsBzqB,YAAGY,QAAAV,YAAA,mVAmBzBwqB,GAAsB1qB,YAAG2qB,QAAAzqB,YAAA,8JASzB0qB,GAAyB5qB,YAAG6qB,QAAA3qB,YAAA,uKClI1BkG,qBAAkB6C,aAvHjC,SAA4B5C,GAOxB,IANFC,EAACD,EAADC,EAGAwkB,GAFOzkB,EAAP0D,QACK1D,EAALyD,MACQzD,EAARykB,UAAQC,EAAA1kB,EACR2kB,kBAAU,IAAAD,GAAMA,EAAAE,EAAA5kB,EAChBob,uBAAe,IAAAwJ,GAAMA,EAGfzJ,EADcrX,qBAAWxC,IACA6Z,WAE/BlH,EAAyBC,YAAYpa,GAA9B2e,EAA4CrE,YAAAH,EAAA,GAA9B,GACrBoH,EAAiCnH,YAAYgQ,IAArCW,EAA4DzQ,YAAAiH,EAAA,GAAxC,GAE5B,OACE1a,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACRC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBU,gBAAC2R,KAAMC,UAAS,CAAAnS,SAAA,CAAEH,EAAE,mCAAmC,MAAIA,EAAE,+BAC5Dmb,GAAmB/a,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,+BACxCU,gBAAC2R,KAAMC,UAAS,CAAAnS,SAAA,CAAEH,EAAE,yBAAyB,MAAIA,EAAE,2BAEnDI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,MARFrF,kBAWlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRqkB,EAAShb,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACzBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACRC,eAACwjB,GAAqB,CAAC9a,OAAQa,EAAKb,SAAU,IAAC1I,eAAA,SAC7CuJ,EAAKkb,WAAa1J,GAClB/a,eAAC0E,IAAI,CAACtC,GAAI,kBAAoBmH,EAAKkb,SAASlN,GAAK,QAAQxX,SACvDO,gBAAA,SAAAP,SAAA,CAAOC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAEmD,EAAKkb,SAASre,YAJjCyG,gBAQhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACRC,eAAC0E,IAAI,CAACtC,GAAI,0BAA4BmH,EAAKgO,GAAGxX,SAC3CwJ,EAAKmb,gBACD1kB,eAAA,SACPA,eAAC2kB,KAAKC,MAAK,CAAC9f,MAAM,OAAM/E,SAAEwJ,EAAK4R,QAAQ0J,MAAM,QAJ/BhY,gBAMfkO,GACCza,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACNwJ,EAAKub,SACLxkB,gBAACoE,IAAI,CAACtC,GAAI,uBAAyBmH,EAAKub,QAAQvN,GAAK,WAAWxX,SAAA,CAC9DC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAEmD,EAAKub,QAAQC,SAAS,IAAC/kB,eAAA,YAG/CuJ,EAAKkb,UACLzkB,eAAC0E,IAAI,CAACtC,GAAI,kBAAoBmH,EAAKkb,SAASlN,GAAK,QAAQxX,SACvDO,gBAAA,SAAAP,SAAA,CAAOC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAEmD,EAAKkb,SAASre,YARjCyG,gBAalBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACP4L,KAAOpC,EAAKyb,UAAUpZ,OAAOkP,GAAY,IAAC9a,eAAA,SAC1C2L,KAAOpC,EAAK0b,SAASrZ,OAAOkP,KAFfjO,gBAIhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK2b,cADQrY,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK4b,gBADQtY,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BukB,GAAetkB,eAAC2E,KAAM,CACtBG,MAAM,YACNzC,KAAK,UACLnC,UAAU,OACV2E,KAAK,KACL4L,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAAQ,yBAADyL,OAA2BvF,EAAKgO,IAC3D,EAACxX,SAEDH,EAAE,iBAELI,eAAC0E,IAAI,CAACtC,GAAI,0BAA4BmH,EAAKgO,GAAGxX,SAC5CC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,uCACduZ,eAAgBnZ,eAAA,KAAAD,SAAIwJ,EAAKmb,gBACzBtL,WAAYxZ,EAAE,4BACdgb,eAAgB4J,EAChBlL,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAACC,MAAO8O,GAAoBhY,UAAW7D,SAIjD,EAAE7H,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBAxCfyG,kBAvCzBA,eAkFN,QAKtB,KCxCenN,qBAAkB6C,aAnFjC,SAAwB5C,GAA4B,IAAzBC,EAACD,EAADC,EAAGoe,EAAQre,EAARqe,SAAiBre,EAAP0D,QAEtChF,aAAaC,QAAQC,EAAKvD,6BAA8BgjB,EAASoH,UAEjE/mB,aAAaC,QAAQC,EAAKxC,iCAAkCiiB,EAASoH,UAErE,IAAA9hB,EAAqDC,YAASkgB,GAAoB,CAChFhY,UAAW7D,KACXiE,YAAa,iBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAMvC,GAAIzP,EAAS,OACX5B,eAACqlB,GAAmB,CAACtO,QAASA,EAAQhX,SACpCC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0BAA0BG,SAClDC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACqlB,GAAmB,CAACtO,QAASA,EAAQhX,SACpCC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0BAA0BG,SAClDC,eAAA,KAAAD,SAAIH,EAAE,wCAKZ,IAAMwkB,EAAWtiB,EAAKwjB,gBAGtB,OAAKlB,EAAShb,MAAMjK,OAWlBa,eAACqlB,GAAmB,CAACtO,QAASA,EAAQhX,SACpCC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,0BACb0Q,aAAa,EACbZ,SAAU0U,EAAS1U,SACnBG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO2S,EAAS1U,SAASgC,WAE3BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgByT,gBAAgBlc,MAC3CsG,EAAWmC,EAAgByT,gBAAgB5V,SAEjD,OAAOoC,EAAS3S,OACZ,CAGEmmB,gBAAiB,CACfvT,WAAYH,EAAe0T,gBAAgBvT,WAC3C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe0T,gBAAgBlc,OAAK4I,aAAKF,IACrDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFC,eAACulB,GAAmB,CAClBnB,SAAUA,EACVE,YAAY,EACZvJ,iBAAiB,QA1CvB/a,eAACqlB,GAAmB,CAACtO,QAASA,EAAQhX,SACpCC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0BAA0BG,SAClDC,eAAA,KAAAD,SACGH,EAAE,oCA4Cb,KC/Fa4lB,GAAyBhT,OAAaC,MAAM,CACrD/J,OAAQ8J,OACLG,SAAS/S,YAAE,uBACdiiB,UAAWrP,OACRG,SAAS/S,YAAE,uBACdkiB,QAAStP,OACNG,SAAS/S,YAAE,yBCuEDF,iBAAkB6C,aA/DT,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAc6M,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiB3M,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQhO,EAAS1G,EAAT0G,UAAS,OAC5G/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAiC,aAAzBgB,EAAOnH,cAAgCtN,EAAE,gBAAkBA,EAAE,sBAAsBG,SAAA,CACrGC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO4O,UAAa,0BAA4B,eAC5DjG,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GACT8S,EAAc,YAAa9S,GAC3B6S,EAAgB,aAAa,EAC/B,EACA5D,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GACT8S,EAAc,UAAW9S,GACzB6S,EAAgB,WAAW,EAC7B,EACA5D,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,IAEhD5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,SACLlG,UAAY+S,EAAOvK,OAAU,0BAA4B,eACzD6K,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,MAAKpC,SAAaH,EAAE,gBAATiN,gBACzB7M,eAAA,UAAQmC,MAAM,QAAOpC,SAAaH,EAAE,kCAATiN,gBAC3B7M,eAAA,UAAQmC,MAAM,OAAMpC,SAAaH,EAAE,iCAATiN,gBAC1B7M,eAAA,UAAQmC,MAAM,OAAMpC,SAAaH,EAAE,iCAATiN,gBAC1B7M,eAAA,UAAQmC,MAAM,YAAWpC,SAAaH,EAAE,sCAATiN,mBAEjC7M,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,+BAK/DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAAC2E,KAAM,CACHG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAExBH,EAAE,gDAELI,eAACsgB,GAAgB,CAACja,UAAWA,SAExB,KC8CE3G,qBAAkB6C,aA/FjC,SAA8B5C,GAAgB,IAAdC,EAACD,EAADC,EAExBkb,GAFkCnb,EAAP0D,QACbI,qBAAWxC,IACA6Z,YAC/BpE,EAAkCC,mBAAS,IAAIzT,KAAKyI,OAASkR,QAAQ,WAAUjG,EAAA7C,YAAA2C,EAAA,GAAxEmL,EAASjL,EAAA,GAAEmL,EAAYnL,EAAA,GAC9BsG,EAA8BvG,mBAAS,IAAIzT,KAAKyI,OAASmR,MAAM,WAAUK,EAAApJ,YAAAmJ,EAAA,GAAlE4E,EAAO3E,EAAA,GAAE6E,EAAU7E,EAAA,GAC1BE,EAA4B1G,mBAAS,OAAM2G,EAAAvJ,YAAAsJ,EAAA,GAApC3U,EAAM4U,EAAA,GAAEmI,EAASnI,EAAA,GACxB6E,EAAgCxL,oBAAS,GAAMyL,EAAArO,YAAAoO,EAAA,GAAxCF,EAAQG,EAAA,GAAEF,EAAWE,EAAA,GAC5BsD,EAAkC/O,mBAAS,IAAGgP,EAAA5R,YAAA2R,EAAA,GAAvCrN,EAASsN,EAAA,GAAEtD,EAAYsD,EAAA,GAExBzV,EAAYtQ,EAAE,iCACdyG,EAAY,oBAElBuN,EAA2BC,YAAYpa,GAA/B2e,EAA6CrE,YAAAH,EAAA,GAA/B,GAEtB,OACE5T,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC6G,GAAU,CAACR,UAAWA,QAG3BrG,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACPC,cAAe,CACb4N,UAAWA,EACXC,QAASA,EACTpZ,OAAQA,GAEVyL,iBAAkBqR,GAClBpR,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ0N,EAAa1N,EAAOwN,WACpBG,EAAW3N,EAAOyN,SAClB2D,EAAUpR,EAAO3L,QAEjB,IAAM4Z,EAAehE,GAAejK,EAAOwN,WACrCU,EAAajE,GAAejK,EAAOyN,SACzCO,EAAa,sBAADvT,OACYwT,EAAY,KAAAxT,OAAIyT,EAAU,KAAAzT,OAAIpG,IAGtD4L,GAAc,GACd4N,GAAY,EAChB,EAAEniB,SAED,SAAA+M,GAAA,IAAGkG,EAAYlG,EAAZkG,aAAc6M,EAAa/S,EAAb+S,cAAeD,EAAe9S,EAAf8S,gBAAiB3M,EAAMnG,EAANmG,OAAQoB,EAAMvH,EAANuH,OAAevH,EAAP0V,QAAO,OACvExiB,eAAC4lB,GAAyB,CACxB5S,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,MAKN4b,EACA3hB,gBAAC4G,KAAI,CAACX,MAAO3G,EAAE,uCAAuCG,SAAA,CACpDO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACPH,EAAE,6CACHU,gBAAC2F,KAAI,CAAAlG,SAAA,CACHO,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CACPH,EAAE,kBAAoB,KACtB+L,KAAOkW,GAAWjW,OAAOkP,GAAY,IAAG,MACxCnP,KAAOmW,GAASlW,OAAOkP,MAE1Bxa,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CACPH,EAAE,kBAAkB,KAAGA,EAAE,2BAADkP,OAA4BpG,aAI3D1I,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVO,gBAACqE,KAAM,CACLG,MAAM,UACN2L,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAASgV,EAC7B,EAACtY,SAAA,CAEFC,eAACmG,KAAI,CAACC,KAAK,mBAAmB,IAAExG,EAAE,4BAItC,SAKZ,KCnGeF,qBAAkB6C,aAZjC,SAA+B5C,GAAGA,EAADC,EAAQD,EAALyD,MAAczD,EAAP0D,QAAqB,IAAZtD,EAAQJ,EAARI,SAClD,OACEC,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SACzBC,eAACG,KAAS,CAAAJ,SACPA,OAKb,K,UC8BeL,qBAAkB6C,aApCjC,SAA8B5C,GAAc,IAAZC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACjCwQ,EAA2BC,YAAYiQ,IAA/B+B,EAAmD9R,YAAAH,EAAA,GAArC,GAEpB,OACEtT,gBAAA,UAAQJ,UAAU,yBAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPoV,EAAe,CAAEpa,UAAW,CAC1B8I,MAAO,CACLuR,eAAgB1iB,EAAM2K,OAAOwJ,KAE9B7C,eAAgB,CACf,CAACC,MAAO+O,GAAmBjY,UAAW,CAAC8L,GAAInU,EAAM2K,OAAOwJ,QAE3D3C,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,0CAA4C,CACzDmV,SAAUF,KAAMG,SAASC,cAG/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EAEtD,GACN,EAAE9B,SAAA,CACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,SAAS,IAAG,IAClCxG,EAAE,8BAGX,KCEeF,qBAAkB6C,aAjCjC,SAAiC5C,GAAoB,IAAlBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOmG,EAAI5J,EAAJ4J,KAC3CqK,EAA4BC,YAAYmQ,IAAjC+B,EAAqDhS,YAAAH,EAAA,GAApC,GAEtB,OACE5T,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,4CACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CAAIwJ,EAAKyc,YAAY,IAAChmB,eAAA,SAAM,IAAEuJ,EAAKV,eACnDuQ,WAAYxZ,EAAE,iCACdgb,eAAgBmL,EAChBzM,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAACC,MAAO8O,GAAoBhY,UAAW7D,MACvC,CAAC+M,MAAO+O,GAAmBjY,UAAW,CAAC8L,GAAInU,EAAM2K,OAAOwJ,QAIlE,EAAExX,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAG1D,KC0Fe1G,iBAAkB6C,aAvHE,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAcC,EAAMtT,EAANsT,OAAQ1J,EAAI5J,EAAJ4J,KAAMiZ,EAAO7iB,EAAP6iB,QAASyD,EAAYtmB,EAAZsmB,aAAcrG,EAAejgB,EAAfigB,gBAAiBD,EAAShgB,EAATggB,UAAS,OACpH3f,eAACc,KAAM,CAACE,OAAQgS,EAAcjS,OAAQiS,EAAajT,SACjDC,eAACkT,KAAM,CAAAnT,SACLO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CAEPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAC7CO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAO+S,YAAe,0BAA4B,eAC9DzS,aAAa,MACbuI,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,eAAe,GAAM,EACvC,IAER5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,0BAGhEF,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAC7CO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,MACbE,UAAU,WACVqI,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,eAAe,GAAM,EACvC,IAER5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,0BAGhEI,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAAA,CAC7CO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTC,eAACsT,KAAK,CAAChP,KAAK,OACL8B,KAAK,WACLlG,UAAY+S,EAAOkT,SAAY,0BAA4B,eAC3D5S,aAAa,MACbuI,SAAU,SAACoK,GACVD,EAAaC,GACbtG,EAAgB,YAAY,GAAM,EACpC,IAEN5f,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,wBAE3DI,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,QACLlG,UAAY+S,EAAOmT,MAAS,0BAA4B,eACxD7S,aAAa,MACbuI,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,SAAS,GAAM,EACjC,IAER5f,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,2BAG1DF,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAC7CO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,iBACLlG,UAAY+S,EAAOqM,eAAkB,0BAA4B,eACjE/L,aAAa,MACbuI,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,kBAAkB,GAAM,EAC1C,EAAE7f,SAAA,CAELzH,QAAQC,IAAI,wCACZD,QAAQC,IAAIonB,GACb3f,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAU0G,gBAAgBjd,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC1CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK8V,WAAW,KAAG9V,EAAK+c,SAAS,MAArDzZ,eAA+D,OAGhG7M,eAACwT,KAAY,CAACpN,KAAK,iBAAiBqN,UAAU,OAAOvT,UAAU,0BAGnEI,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAAA,CAC7CC,eAAA,QAAME,UAAU,cAAaH,SAAEwJ,EAAK2b,eAAoB,IAACllB,eAAA,SAAMA,eAAA,YAEjEM,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAAA,CAC7CC,eAAA,QAAME,UAAU,cAAaH,SAACC,eAACumB,GAAwB,CAAChd,KAAMA,MAAcvJ,eAAA,SAAMA,eAAA,SAAM,IAACA,eAAA,SACvD,IAAhCwmB,OAAOC,KAAKjE,GAASrjB,OAAgB,GACrCa,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,6BAuBN,KCzDIF,I,GAAAA,iBAAkB6C,aAhEjC,SAA+B5C,GAA8C,IAA5CC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAO6Q,EAAatU,EAAbsU,cAAe1K,EAAI5J,EAAJ4J,KAAMoW,EAAShgB,EAATggB,UAC9D/L,EAA4BC,YAAYkQ,IAAjC2C,EAAqD3S,YAAAH,EAAA,GAApC,GAEtB,OACE5T,eAACgU,KAAM,CACLC,cAAe,CACb+R,YAAa/R,EAAc+R,YAC3Bnd,YAAaoL,EAAcpL,YAC3Bud,MAAOnS,EAAcmS,MACrBD,SAAUlS,EAAckS,SACxB7G,eAAiBrL,EAAcqL,eAAkBrL,EAAcqL,eAAe/H,GAAK,MAGrFnD,SAAU,SAACC,EAAM9H,GAAqC,IAAjC+H,EAAa/H,EAAb+H,cAAeqS,EAAUpa,EAAVoa,WAClCruB,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZqS,EAAkB,CAAEjb,UAAW,CAC7B8I,MAAO,CACLgD,GAAItD,EAAcsD,GAClByO,YAAa3R,EAAO2R,YACpBnd,YAAawL,EAAOxL,YACpBud,MAAO/R,EAAO+R,MACdD,SAAU9R,EAAO8R,SACjB7G,eAAgBjL,EAAOiL,iBAExB5K,eAAgB,CACjB,CAACC,MAAO+O,GAAmBjY,UAAW,CAAC8L,GAAInU,EAAM2K,OAAOwJ,QAGzD3C,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,2CAA6C,CAC1DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,GACdqS,EAAW,CAAC,EACd,IAAGzR,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQmO,EAAOxV,EAAPwV,QAASyD,EAAYjZ,EAAZiZ,aAAcrG,EAAe5S,EAAf4S,gBAAe,OACtE5f,eAAC4mB,GAA0B,CACzB5T,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTyD,aAAcA,EACdrG,gBAAiBA,EACjBrW,KAAMA,EACNoW,UAAWA,GAEgB,GAIvC,KCpDaoE,GAAsBzqB,YAAGC,QAAAC,YAAA,qMA4JvBkG,qBAAkB6C,aAlJjC,SAAgC5C,GAAqD,IAAjDC,EAACD,EAADC,EAAmC+f,GAAzBhgB,EAAP0D,QAAc1D,EAALyD,MAAqBzD,EAAdknB,eAAyBlnB,EAATggB,WACrE/L,EAAuBC,YAAYkQ,IAA3B+C,EAA+C/S,YAAAH,EAAA,GAArC,GAClB8C,EAAkCC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAzCqQ,EAAQnQ,EAAA,GAAEoQ,EAAWpQ,EAAA,GAyF7B,OACE5W,eAACinB,KAAe,CAACC,UA7DD,SAAC5U,GAEjBha,QAAQC,IAAI,0BACZD,QAAQC,IAAI+Z,GACZ,IAAQ6U,EAA6C7U,EAA7C6U,YAAaC,EAAgC9U,EAAhC8U,YAAaC,EAAmB/U,EAAnB+U,OAAQC,EAAWhV,EAAXgV,OAC1ChvB,QAAQC,IAAI8uB,GACZ/uB,QAAQC,IAAI6uB,GACZ9uB,QAAQC,IAAI+uB,GAGZhvB,QAAQC,IAAI,qBACP6uB,GAA0B,WAAXE,IAKpBhvB,QAAQC,IAAI,4BAEV6uB,EAAYG,cAAgBF,EAAOE,aACnCH,EAAYI,QAAUH,EAAOG,OA9CR,SAAHjb,GAAkC,IAA5Bkb,EAAOlb,EAAPkb,QAASC,EAAWnb,EAAXmb,YACnCV,GAAY,GACZF,EAAW,CACTrb,UAAW,CACT8I,MAAO,CACLgD,GAAIkQ,EACJE,WAAYD,IAGhBhT,eAAgB,CACd,CAAEC,MAAO+O,GAAmBjY,UAAW,CAAE8L,GAAIoI,EAAUmG,eAAevO,QAEvE3C,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACTxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,sCAAwC,CACrDmV,SAAUF,KAAMG,SAASC,eAE7B2S,YAAW,kBAAMZ,GAAY,EAAM,GAAE,IACvC,IAAG9R,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpD+lB,YAAW,kBAAMZ,GAAY,EAAM,GAAE,IACvC,GACF,CA0BEa,CAAiB,CACfJ,QAASN,EACTO,YAAaN,EAAYI,QAE7B,EAiCwCznB,SACpCO,gBAAC4G,KAAI,CAAC4gB,YAAY,OAAM/nB,SAAA,CACtBO,gBAAC4G,KAAKN,OAAM,CAAA7G,SAAA,CACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,mBACfI,eAACkH,KAAKgQ,QAAO,CAAAnX,SACXC,eAAC+nB,GAAqB,SAG1B/nB,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACQ,KAAM,CAACC,OAAQgmB,EAAU/lB,OAAQ+lB,EAAShnB,SAAA,CACvCO,gBAACF,KAAKC,IAAG,CAACH,UAAU,uBAAsBH,SAAA,CACxCC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAAEH,EAAE,qBACnDI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAAEH,EAAE,yBACnDI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAAEH,EAAE,sCACnDI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAAEH,EAAE,iBACnDI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAACC,eAAA,QAAME,UAAU,cAAaH,SAAEH,EAAE,qBACjFI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,0BAE7BF,eAACgoB,KAAS,CAACT,YAAY,gBAAexnB,SACnC,SAACkoB,EAAUC,GAAQ,OAChB5nB,gBAAA,MAAA6nB,wBAAA,CACEhI,IAAK8H,EAASG,UACVH,EAASI,gBAAc,IAAAtoB,SAAA,CAE1B4f,EAAUmG,eAAe7jB,MAAMmH,MAAMkD,KAAI,SAAAU,EAAWsb,GAAG,IAAX/e,EAAIyD,EAAJzD,KAAI,OAC/CvJ,eAACuoB,KAAS,CACRpB,YAAa5d,EAAKgO,GAClBiQ,MAAOc,EAAIvoB,SAGV,SAACkoB,EAAUC,GAAQ,OAChBloB,eAAA,MAAAmoB,oCAAA,CACEhI,IAAK8H,EAASG,SACdZ,MAAOje,EAAKoe,YACRM,EAASO,gBACTP,EAASQ,iBAAe,IAAA1oB,SAE5BC,eAAC0oB,GAAsB,CAACzU,cAAe1K,EAAMoW,UAAWA,EAAWpW,KAAMA,MACrE,GAVLA,EAAKgO,GAYA,IAEb0Q,EAASU,eACN,aAQ1B,K,SC7KaC,GAAmB,CAC5BC,QAAQ,EACRC,SAAS,EACTC,QAAS,yCACTC,WAAW,EACXC,QAAS,yJC0CEvpB,iBAAkB6C,aA5BG,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAcqB,EAAM1U,EAAN0U,OAAuCuL,GAAzBjgB,EAANsT,OAAetT,EAAP6iB,QAAqB7iB,EAAZsmB,aAA6BtmB,EAAfigB,iBAAiBC,EAAalgB,EAAbkgB,cAAa,OAC3H7f,eAACc,KAAM,CAACE,OAAQgS,EAAcjS,OAAQiS,EAAajT,SACjDO,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gCAAgCG,SAAA,CACnDC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,QACbC,aAAchV,EAAOiV,MACrB1wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,QAASqG,EAAE7gB,OAAOkkB,cAChC3J,EAAgB,SAAS,GAAM,EACjC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,wBAExDF,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAGA,KCCIF,iBAAkB6C,aA5BI,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAcqB,EAAM1U,EAAN0U,OAAuCuL,GAAzBjgB,EAANsT,OAAetT,EAAP6iB,QAAqB7iB,EAAZsmB,aAA6BtmB,EAAfigB,iBAAiBC,EAAalgB,EAAbkgB,cAAa,OAC5H7f,eAACc,KAAM,CAACE,OAAQgS,EAAcjS,OAAQiS,EAAajT,SACjDO,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,SACbC,aAAchV,EAAOmV,OACrB5wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,SAAUqG,EAAE7gB,OAAOkkB,cACjC3J,EAAgB,UAAU,GAAM,EAClC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,wBAEzDF,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAGA,KCIIF,iBAAkB6C,aA5BE,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAcqB,EAAM1U,EAAN0U,OAA0CuL,GAA5BjgB,EAANsT,OAAoBtT,EAAZsmB,aAAwBtmB,EAAV8pB,WAA2B9pB,EAAfigB,iBAAiBC,EAAalgB,EAAbkgB,cAAa,OAC7H7f,eAACc,KAAM,CAACE,OAAQgS,EAAcjS,OAAQiS,EAAajT,SACjDO,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,OACbC,aAAchV,EAAOqV,KACrB9wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,OAAQqG,EAAE7gB,OAAOkkB,cAC/B3J,EAAgB,QAAQ,GAAM,EAChC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDF,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAGA,KC8HIF,qBAAkB6C,aAvJjC,SAAqC5C,GAAoC,IAAlCC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAOyU,EAAWlY,EAAXkY,YAClDN,EAAKnU,EAAM2K,OAAOwJ,GACxB3D,EAA0BC,YAAY8P,IAA9BgG,EAA6C5V,YAAAH,EAAA,GAAhC,GAErB,OACEtT,gBAACspB,KAAU,CAACC,WAAYjqB,EAAE,gCAAgCG,SAAA,CACxDC,eAAC8pB,KAAG,CAACvjB,MAAO3G,EAAE,gCAAgCG,SAC5CC,eAACgU,KAAM,CACLC,cAAe,CACbqV,MAAOzR,EAAYiO,eAAewD,OAGpClV,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZsV,EAAc,CAAEle,UAAW,CACzB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjB+R,MAAOjV,EAAOiV,QAEf5U,eAAgB,CACf,CAACC,MAAO+O,GAAmBjY,UAAW,CAAC8L,GAAIA,OAE9C3C,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,4CAA8C,CAC3DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQmO,EAAOxV,EAAPwV,QAASyD,EAAYjZ,EAAZiZ,aAAcrG,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OACrF7f,eAAC+pB,GAA2B,CAC1B/W,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTyD,aAAcA,EACdrG,gBAAiBA,EACjBC,cAAeA,GAEa,MAIpC7f,eAAC8pB,KAAG,CAACvjB,MAAO3G,EAAE,kBAAkBG,SAC9BC,eAACgU,KAAM,CACLC,cAAe,CACbuV,OAAQ3R,EAAYiO,eAAe0D,QAGrCpV,SAAU,SAACC,EAAM2V,GAAyB,IAArB1V,EAAa0V,EAAb1V,cACnBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZsV,EAAc,CAAEle,UAAW,CACzB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBiS,OAAQnV,EAAOmV,SAEhB9U,eAAgB,CACjB,CAACC,MAAO+O,GAAmBjY,UAAW,CAAC8L,GAAIA,OAE5C3C,MAAK,SAAAqV,GAAe,IAAZnoB,EAAImoB,EAAJnoB,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,6CAA+C,CAC5DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAmqB,GAAA,IAAGlX,EAAYkX,EAAZlX,aAAcC,EAAMiX,EAANjX,OAAQoB,EAAM6V,EAAN7V,OAAQmO,EAAO0H,EAAP1H,QAASyD,EAAYiE,EAAZjE,aAAcrG,EAAesK,EAAftK,gBAAiBC,EAAaqK,EAAbrK,cAAa,OACrF7f,eAACmqB,GAA4B,CAC3BnX,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACR4R,aAAcA,EACdzD,QAASA,EACT5C,gBAAiBA,EACjBC,cAAeA,GAEc,MAIrC7f,eAAC8pB,KAAG,CAACvjB,MAAO3G,EAAE,gBAAgBG,SAC5BC,eAACgU,KAAM,CACLC,cAAe,CACbyV,KAAM7R,EAAYiO,eAAe4D,MAGnCtV,SAAU,SAACC,EAAM+V,GAAyB,IAArB9V,EAAa8V,EAAb9V,cACnBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZsV,EAAc,CAAEle,UAAW,CACzB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBmS,KAAMrV,EAAOqV,OAEdhV,eAAgB,CACjB,CAACC,MAAO+O,GAAmBjY,UAAW,CAAC8L,GAAIA,OAE5C3C,MAAK,SAAAyV,GAAe,IAAZvoB,EAAIuoB,EAAJvoB,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,2CAA6C,CAC1DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAuqB,GAAA,IAAGtX,EAAYsX,EAAZtX,aAAcC,EAAMqX,EAANrX,OAAQoB,EAAMiW,EAANjW,OAAQmO,EAAO8H,EAAP9H,QAASyD,EAAYqE,EAAZrE,aAAcrG,EAAe0K,EAAf1K,gBAAiBC,EAAayK,EAAbzK,cAAa,OACrF7f,eAACuqB,GAA0B,CACzBvX,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTyD,aAAcA,EACdrG,gBAAiBA,EACjBC,cAAeA,GAEY,QAMzC,KCzGengB,iBAAkB6C,aAlDC,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYkmB,GAAFnmB,EAAP0D,QAAuB1D,EAAdmmB,gBAAc,OAC7DxlB,gBAAC4G,KAAI,CAAC4gB,YAAY,OAAM/nB,SAAA,CACtBC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,uBAEjBU,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAA,OAAAP,SAAA,CACEC,eAAA,QAAME,UAAU,iBAAgBH,SAC7BH,EAAE,sBAELI,eAAA,QAAME,UAAU,aAAYH,SACzB+lB,EAAe0E,qBAEdxqB,eAAA,SACNM,gBAAA,OAAAP,SAAA,CACEC,eAAA,QAAME,UAAU,iBAAgBH,SAC7BH,EAAE,iBAELI,eAAA,QAAME,UAAU,aAAYH,SACzB+lB,EAAe2E,gBAEdzqB,eAAA,SACNM,gBAAA,OAAAP,SAAA,CACEC,eAAA,QAAME,UAAU,iBAAgBH,SAC7BH,EAAE,mBAELI,eAAA,QAAME,UAAU,aAAYH,SACzB+lB,EAAeZ,kBAEdllB,eAAA,SACNM,gBAAA,OAAAP,SAAA,CACEC,eAAA,QAAME,UAAU,iBAAgBH,SAC7BH,EAAE,kBAELI,eAAA,QAAME,UAAU,aAAYH,SACzB+lB,EAAe4E,iBAEd1qB,eAAA,SACNM,gBAAA,OAAAP,SAAA,CACEC,eAAA,QAAME,UAAU,iBAAgBH,SAC7BH,EAAE,qBAELI,eAAA,QAAME,UAAU,aAAYH,SACzB+lB,EAAeX,yBAIjB,KC0CMzlB,iBAAkB6C,aApFK,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAcqB,EAAM1U,EAAN0U,OAAQpB,EAAMtT,EAANsT,OAAQgT,EAAYtmB,EAAZsmB,aAAczD,EAAO7iB,EAAP6iB,QAAS3C,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiBD,EAAShgB,EAATggB,UAAS,OACxI3f,eAACc,KAAM,CAACE,OAAQgS,EAAcjS,OAAQiS,EAAajT,SACjDO,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SAAA,CACtDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,gBACLlG,UAAY+S,EAAOyR,cAAiB,0BAA4B,eAChEnR,aAAa,MACbuI,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,iBAAiB,GAAM,EACzC,IAER5f,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,OAAOvT,UAAU,wBAEhEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,yBAAyBG,SAAA,CAC5CC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO+R,SAAY,0BAA4B,eAC3DpJ,SAAUvH,EAAO2Q,SACjBlJ,SAAU,SAAC/O,GACT8S,EAAc,WAAY9S,GAC1B6S,EAAgB,YAAY,EAC9B,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,wBAE3DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,wBAAwBG,SAAA,CAC3CC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAOgS,QAAW,0BAA4B,eAC1DrJ,SAAUvH,EAAO4Q,QACjBnJ,SAAU,SAAC/O,GACT8S,EAAc,UAAW9S,GACzB6S,EAAgB,WAAW,EAC7B,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,wBAE1DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,SACLlG,UAAY+S,EAAOvK,OAAU,0BAA4B,eACzD6K,aAAa,MACbuI,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,UAAU,GAAM,EAClC,EAAE7f,SAAA,CAENC,eAAA,UAAQmC,MAAM,QAAOpC,SAAEH,EAAE,mCACzBI,eAAA,UAAQmC,MAAM,OAAMpC,SAAEH,EAAE,kCACxBI,eAAA,UAAQmC,MAAM,OAAMpC,SAAEH,EAAE,kCACxBI,eAAA,UAAQmC,MAAM,YAAWpC,SAAEH,EAAE,0CAE/BI,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,wBAEzDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0BAA0BG,SAAA,CAC7CO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,uBACLlG,UAAY+S,EAAO0X,qBAAwB,0BAA4B,eACvE7O,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,wBAAwB,GAAM,EAChD,EACArM,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAUiL,sBAAsBxhB,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAChDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,uBAAuBqN,UAAU,OAAOvT,UAAU,wBAErC,IAAhCsmB,OAAOC,KAAKjE,GAASrjB,OAAgB,GACrCa,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAIF,KCIIF,qBAAkB6C,aAnFjC,SAAkC5C,GAA2B,IAAzBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOyU,EAAWlY,EAAXkY,YAC5CjE,EAA0BC,YAAY8P,IAA9BgG,EAA6C5V,YAAAH,EAAA,GAAhC,GAEjBiX,EAAuB,GACvBhT,EAAYiO,eAAe6E,uBAC7BE,EAAuBhT,EAAYiO,eAAe6E,qBAAqBpT,IAKzE,IAAIyN,EAAW,KACXnN,EAAYiO,eAAed,WAC7BA,EAAW,IAAI9hB,KAAK2U,EAAYiO,eAAed,WAEjD,IAAIC,EAAU,KAKd,OAJIpN,EAAYiO,eAAeb,UAC7BA,EAAU,IAAI/hB,KAAK2U,EAAYiO,eAAeb,UAI9CjlB,eAACkH,KAAI,CAACX,MAAO3G,EAAE,mBAAoBkoB,YAAY,OAAM/nB,SACnDC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACgU,KAAM,CACLC,cAAe,CACbyQ,cAAe7M,EAAYiO,eAAepB,cAC1CM,SAAUA,EACVC,QAASA,EACTvc,OAAQmP,EAAYiO,eAAepd,OACnCiiB,qBAAsBE,GAGxBzW,SAAU,SAACC,EAAM9H,GAAqC,IAAjC+H,EAAa/H,EAAb+H,cAAeqS,EAAUpa,EAAVoa,WAClCruB,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZsV,EAAc,CAAEle,UAAW,CACzB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBmN,cAAerQ,EAAOqQ,cACtBM,SAAU1G,GAAejK,EAAO2Q,UAChCC,QAAS3G,GAAejK,EAAO4Q,SAC/Bvc,OAAQ2L,EAAO3L,OACfiiB,qBAAsBtW,EAAOsW,uBAE9BjW,eAAgB,CACf,CAACC,MAAO8O,GAAoBhY,UAAW7D,SAE1CgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,8CAAgD,CAC7DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,GACdqS,EAAW,CAAC,EACd,IAAGzR,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQmO,EAAOxV,EAAPwV,QAASyD,EAAYjZ,EAAZiZ,aAA0BrG,GAAF5S,EAAVyc,WAA2Bzc,EAAf4S,iBAAiBC,EAAa7S,EAAb6S,cAAa,OACjG7f,eAAC8qB,GAA6B,CAC5BnL,UAAW9H,EACX7E,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTyD,aAAcA,EACdpG,cAAeA,EACfD,gBAAiBA,GAEa,OAM5C,KC7DelgB,iBAAkB6C,aA7BM,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAY4D,GAAF7D,EAAP0D,QAAqB1D,EAAZ6D,cAAY,OAChElD,gBAAC4G,KAAI,CAAC4gB,YAAY,OAAM/nB,SAAA,CACtBC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,oBAEjBU,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,OAAKE,UAAU,OAAMH,SAClByD,EAAa4C,OAEd5C,EAAaunB,QACb/qB,eAAA,OAAKwM,wBAAyB,CAAEC,OAAQC,KAAUC,SAASnJ,EAAaunB,YACtE,GAEJ/qB,eAAA,OAAAD,SACGyD,EAAawnB,QAEhBhrB,eAAA,OAAAD,SACGyD,EAAaynB,QAEhBjrB,eAAA,OAAAD,SACGyD,EAAa0nB,eAEhBlrB,eAAA,OAAAD,SACGyD,EAAa2nB,uBAGb,KCMMzrB,iBAAkB6C,aA9BK,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAcC,EAAMtT,EAANsT,OAAQuP,EAAO7iB,EAAP6iB,QAAS5C,EAAejgB,EAAfigB,gBAAiBqG,EAAYtmB,EAAZsmB,aAAY,OACtGjmB,eAACc,KAAM,CAACE,OAAQgS,EAAcjS,OAAQiS,EAAajT,SACjDO,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTC,eAACsT,KAAK,CACJhP,KAAK,OACL8B,KAAK,UACLlG,UAAY+S,EAAOkI,QAAW,0BAA4B,eAC1D5H,aAAa,MACbuI,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,WAAW,GAAM,EACnC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,wBAExB,IAAhCsmB,OAAOC,KAAKjE,GAASrjB,OAAgB,GACrCa,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAIF,KCgDIF,qBAAkB6C,aApEjC,SAAkC5C,GAA8C,IAA5CC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAiByU,GAAFlY,EAARqe,SAAqBre,EAAXkY,aAC/DjE,EAA0BC,YAAY8P,IAA9BgG,EAA6C5V,YAAAH,EAAA,GAAhC,GAErB,OACEtT,gBAAC4G,KAAI,CAAC4gB,YAAY,OAAM/nB,SAAA,CACtBC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,uBAEjBU,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACgU,KAAM,CACLC,cAAe,CACbkH,QAAStD,EAAYiO,eAAe3K,SAGtC/G,SAAU,SAACC,EAAM9H,GAAqC,IAAjC+H,EAAa/H,EAAb+H,cAAeqS,EAAUpa,EAAVoa,WAClCruB,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZsV,EAAc,CAAEle,UAAW,CACzB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjB4D,QAAS9G,EAAO8G,UAEjBzG,eAAgB,CACf,CAACC,MAAO8O,GAAoBhY,UAAW7D,SAE1CgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,8CAAgD,CAC7DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,GACdqS,EAAW,CAAC,EACd,IAAGzR,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQmO,EAAOxV,EAAPwV,QAAS5C,EAAe5S,EAAf4S,gBAAiBqG,EAAYjZ,EAAZiZ,aAAY,OACtEjmB,eAACorB,GAA6B,CAC5BpY,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTyD,aAAcA,EACdrG,gBAAiBA,GAEa,IAGlC/H,EAAYiO,eAAeuF,gBAC3B/qB,gBAACgrB,KAAK,CAAChnB,KAAK,UAASvE,SAAA,CAClBH,EAAE,sCAAsC,IAAG,IAC5CI,eAAC0E,IAAI,CAACtC,GAAE,0BAAA0M,OAA4B+I,EAAYiO,eAAeuF,iBAAkBtrB,SAC/EC,eAACsrB,KAAM5mB,KAAI,CAAA3E,SAAE8X,EAAYiO,eAAeyF,2BAG5C,QAIV,KCbe7rB,qBAAkB6C,aA3DjC,SAA6B5C,GAAyC,IAAtCC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAO0iB,EAAcnmB,EAAdmmB,eAC3CvO,EAAKnU,EAAM2K,OAAOwJ,GAExB,OACEjX,gBAAC4G,KAAI,CAAC4gB,YAAY,OAAM/nB,SAAA,CACtBO,gBAAC4G,KAAKN,OAAM,CAAA7G,SAAA,CACVO,gBAAC4G,KAAKqJ,MAAK,CAAAxQ,SAAA,CAAEH,EAAE,cAAc,OAC7BI,eAACkH,KAAKgQ,QAAO,CAAAnX,SACXC,eAAC0E,IAAI,CAACtC,GAAE,0BAAA0M,OAA4ByI,EAAE,OAAMxX,SAC1CC,eAAC2E,KAAM,CAACG,MAAM,YAAYD,KAAK,KAAI9E,SAChCH,EAAE,yBAKXU,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAA,OAAKJ,UAAU,OAAMH,SAAA,CACnBC,eAAA,OAAKE,UAAU,OAAMH,SAClB+lB,EAAe0F,kBAElBxrB,eAAA,OAAAD,SACG+lB,EAAe2F,8BAElBzrB,eAAA,OAAAD,SACG+lB,EAAe4F,oCAGlB1rB,eAAA,OAAKE,UAAU,OAAMH,SAClB+lB,EAAe6F,sBAElB3rB,eAAA,OAAAD,SACG+lB,EAAe8F,kBAElBtrB,gBAAA,OAAAP,SAAA,CACG+lB,EAAe+F,iBAAiB,IAAE/F,EAAegG,gBAEpD9rB,eAAA,OAAAD,SACG+lB,EAAeiG,qBAGtBzrB,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACR+lB,EAAerB,UAAazkB,eAAA,QAAME,UAAU,cAAaH,SACzDC,eAAC0E,IAAI,CAACtC,GAAE,kBAAA0M,OAAoBgX,EAAerB,SAASlN,GAAE,SAAQxX,SAC5DC,eAAC2E,KAAM,CAACtC,KAAK,OAAOyC,MAAM,OAAM/E,SAC7B+lB,EAAerB,SAASre,WAI7B0f,EAAehB,SAAY9kB,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyBgX,EAAehB,QAAQvN,GAAE,YAAWxX,SAChGC,eAAC2E,KAAM,CAACtC,KAAK,OAAOyC,MAAM,OAAM/E,SAC7B+lB,EAAehB,QAAQC,kBAMpC,KCberlB,qBAAkB6C,aAnCjC,SAAwC5C,GAAoB,IAAlBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOmG,EAAI5J,EAAJ4J,KAE5CuR,EADcrX,qBAAWxC,IACA6Z,WAC/BlH,EAA+BC,YAAYqQ,IAApC8H,EAA2DjY,YAAAH,EAAA,GAAvC,GAEzB,OACE5T,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,+CACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CAAK4L,KAAOpC,EAAKwD,MAAMnB,OAAOkP,GAAa,MAAIvR,EAAK0iB,iBACpE7S,WAAYxZ,EAAE,oCACdgb,eAAgBoR,EAChB1S,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAACC,MAAO8O,GAAoBhY,UAAW7D,MACvC,CAAC+M,MAAO+O,GAAmBjY,UAAW,CAAC8L,GAAInU,EAAM2K,OAAOwJ,QAIlE,EAAExX,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAG1D,KCqCe1G,qBAAkB6C,aApEjC,SAAmC5C,GAAqD,IAAjDC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAuBuc,GAAFhgB,EAAdknB,eAAyBlnB,EAATggB,WAClEpI,EAAKnU,EAAM2K,OAAOwJ,GAElBuD,EADcrX,qBAAWxC,IACA6Z,WACzBoR,EAAa,qBAAApd,OAAwByI,EAAE,gBAE7C,OACEjX,gBAAC4G,KAAI,CAAC4gB,YAAY,OAAM/nB,SAAA,CACtBO,gBAAC4G,KAAKN,OAAM,CAAA7G,SAAA,CACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,sBACfI,eAACkH,KAAKgQ,QAAO,CAAAnX,SAEXC,eAAC0E,IAAI,CAACtC,GAAI8pB,EAAcnsB,SACtBO,gBAACqE,KAAM,CAACzE,UAAU,SAAS4E,MAAM,UAAS/E,SAAA,CACxCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,SAAS,IAAExG,EAAE,0CAKzC+f,EAAUmG,eAAeqG,SAAS/iB,MAAMjK,OAIzCmB,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,4BACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,SAGpBlS,eAACiS,KAAM9K,KAAI,CAAApH,SACR4f,EAAUmG,eAAeqG,SAAS/iB,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAClDjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACN4L,KAAOpC,EAAKwD,MAAMnB,OAAOkP,KAE7B9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAK0iB,gBAET3rB,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACLwJ,EAAKohB,qBAAwBphB,EAAKohB,qBAAqBvkB,KAAO,GAC9DmD,EAAK6iB,gBAAmBpsB,eAAA,OAAAD,SAAKC,eAAA,SAAOE,UAAU,aAAYH,SAAEwJ,EAAK6iB,oBAAiC,MAEvGpsB,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAA,OAAKwM,wBAAyB,CAAEC,OAAQC,KAAUC,SAASpD,EAAKmgB,WAElE1pB,eAACiS,KAAMxM,IAAG,CAAA1F,SACRO,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAC1BC,eAAC0E,IAAI,CAACtC,GAAK,qBAAuBud,EAAUmG,eAAevO,GAAK,iBAAmBhO,EAAKgO,GAClFrX,UAAU,gCAA+BH,SAE5CH,EAAE,kBAELI,eAACqsB,GAA+B,CAAC9iB,KAAMA,WArB7B,WAAaA,EAAKgO,GAwBtB,SAvClBvX,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,6CA6ChB,KCiFeF,qBAAkB6C,aAtIjC,SAA2B5C,GAAiC,IAA/BC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAAS2a,EAAQre,EAARqe,SACxCzG,EAAKnU,EAAM2K,OAAOwJ,GACxBjU,EAA0CC,YAASmgB,GAAmB,CACpEjY,UAAW,CACT8L,GAAIA,GAEN1L,YAAa,iBAJPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAO9BnD,EAAyBC,YAAYpa,GAA9B2e,EAA4CrE,YAAAH,EAAA,GAA9B,GACrBoH,EAAuCnH,YAAY+P,IAA5C0I,EAA6EvY,YAAAiH,EAAA,GAAjD,GAMnC,GAHA3c,aAAaC,QAAQC,EAAKxC,iCAAkCiiB,EAASoH,UAGjExjB,EAAS,OAAO5B,eAACusB,GAAsB,CAAAxsB,SAAEH,EAAE,+BAE/C,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAACusB,GAAsB,CAAAxsB,SAAEH,EAAE,8BAIpC,IAAIyG,EAAYhI,aAAa0E,QAAQxE,EAAKvD,8BACrCqL,IACHA,EAAY,qBAEd,IAAMmmB,EAAa,yBAA2BjV,EACxCkV,EAAe,qBAAA3d,OAAwByI,EAAE,gBACzCmV,EAAqB,GAAA5d,OAAMQ,OAAO0O,SAAS2O,SAAQ,MAAA7d,OAAKQ,OAAO0O,SAAS4O,KAAI,4BAAA9d,OAA2ByI,GAE7G,OACEjX,gBAACisB,GAAsB,CAAAxsB,SAAA,CACrBC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,yBAA2B,KAAOkC,EAAKgkB,eAAepB,cAAc3kB,SACxFO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAElCO,gBAACoE,IAAI,CAACtC,GAAIiE,EACJnG,UAAU,yBAAwBH,SAAA,CACpCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAAe,IAAExG,EAAE,mBAG9CU,gBAACoE,IAAI,CAACtC,GAAIqqB,EACNvsB,UAAU,yBAAwBH,SAAA,CAClCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,gBAAgB,IAAExG,EAAE,mCAG/CI,eAAC2E,KAAM,CACLG,MAAM,YACNzC,KAAK,UACLnC,UAAU,OACVuQ,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAASmpB,EAC7B,EAACzsB,SAEDH,EAAE,iBAGLI,eAAC6sB,KAAQ,CACP3sB,UAAU,GACVoE,KAAK,SACLwoB,QAAM,EACNzqB,KAAK,OACLyC,MAAM,YACNioB,eAAgBntB,EAAE,iBAClBqC,MAAO,CACLjC,eAAC0N,GAAoB,CAACzD,WAAW,SAASC,SAAS,iBAAgBnK,SACjEC,eAAC6sB,KAASxoB,KAAI,CAEZhC,KAAK,QACLoO,QAAS,WACP6b,EAA6B,CAAE7gB,UAAW,CACxC8I,MAAO,CACLgD,GAAIA,IAEL7C,eAAgB,KAElBE,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB,IAAMupB,EAAkBvpB,EAAKkrB,oCAAoClH,eAAevO,GAChFlU,EAAQnB,KAAK,0BAAD4M,OAA2Buc,IACvCxW,KAAMC,QAASlV,EAAE,8CAAgD,CAC7DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACJ,EAAE9B,SACCH,EAAE,qDAvBAiN,0BA8BjBvM,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACitB,GAAyB,CACxBpV,YAAa/V,IAEjBxB,gBAACgrB,KAAK,CAAChnB,KAAK,UAASvE,SAAA,CACnBC,eAAA,OAAKE,UAAU,OAAMH,SAACC,eAAA,KAAAD,SAAIH,EAAE,4CAC3B8sB,EAAsB1sB,eAAA,SACvBA,eAAA,OAAKE,UAAU,OAAMH,SAACO,gBAAA,SAAAP,SAAA,CAAOC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAExG,EAAE,4DAErDU,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAGomB,GAAI,EAAEntB,SACrBC,eAACmtB,GAA8B,CAAC3pB,aAAc1B,EAAK0B,iBAErDxD,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAGomB,GAAI,EAAEntB,SACrBC,eAACotB,GAAoB,CAACtH,eAAgBhkB,EAAKgkB,yBAIjDxlB,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACqtB,GAAyB,CAACvH,eAAgBhkB,EAAKgkB,iBAChD9lB,eAACstB,GAAyB,CAACzV,YAAa/V,UAG5C9B,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACfC,eAACutB,GAAuB,CAAC5N,UAAW7d,EAAM+kB,eAAgB9P,IAC1D/W,eAACwtB,GAA4B,CAAC3V,YAAa/V,IAC3C9B,eAACytB,GAA0B,CAAC9N,UAAW7d,WAKjD,KCxIepC,qBAAkB6C,aAjBjC,SAAiC5C,GAAgD,IAA9CC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAU2kB,EAAa/kB,EAAb+kB,cACxDgJ,EAAY9tB,EAAE,iCAAmC,KAAO8kB,GAAiBA,EAE/E,OACE1kB,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SACzBO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAOmnB,IACpB1tB,eAACI,KAAKC,IAAG,CAACyG,GAAI,GAAG/G,SACdA,UAMf,KCsHeL,iBAAkB6C,aAjIA,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQwL,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiBD,EAAShgB,EAATggB,UAAWtZ,EAAS1G,EAAT0G,UAAS,OAChI/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,WACLwnB,QAASvZ,EAAOwZ,SAChB/R,SAAW,SAAC4B,GACVkC,EAAgB,YAAY,GAAM,GAClCC,EAAc,YAAcxL,EAAOwZ,SACrC,IAEA7tB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,2CAEnDI,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,WAEtCY,EAAOwZ,SAgBTvtB,gBAAAwtB,YAAA,CAAA/tB,SAAA,CACEO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qCAAqCG,SAAA,CACxDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,kBACLlG,UAAY+S,EAAOuY,gBAAmB,0BAA4B,eAClEjY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,OAAOvT,UAAU,wBAElEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kDAAkDG,SAAA,CACrEC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,8BACLlG,UAAY+S,EAAOwY,4BAA+B,0BAA4B,eAC9ElY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,8BAA8BqN,UAAU,OAAOvT,UAAU,0BAGhFF,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sDAAsDG,SAAA,CACzEC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,iCACLlG,UAAY+S,EAAOyY,+BAAkC,0BAA4B,eACjFnY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,iCAAiCqN,UAAU,OAAOvT,UAAU,6BAIrFI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0CAA0CG,SAAA,CAC7DC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,sBACLlG,UAAY+S,EAAO0Y,oBAAuB,0BAA4B,eACtEpY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,sBAAsBqN,UAAU,OAAOvT,UAAU,wBAEtEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qCAAqCG,SAAA,CACxDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,kBACLlG,UAAY+S,EAAO2Y,gBAAmB,0BAA4B,eAClErY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,OAAOvT,UAAU,0BAGpEF,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sCAAsCG,SAAA,CACzDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,mBACLlG,UAAY+S,EAAO4Y,iBAAoB,0BAA4B,eACnEtY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,6BAIvEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kCAAkCG,SAAA,CACrDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,eACLlG,UAAY+S,EAAO6Y,aAAgB,0BAA4B,eAC/DvY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,eAAeqN,UAAU,OAAOvT,UAAU,0BAGjEF,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qCAAqCG,SAAA,CACxDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,kBACLlG,UAAY+S,EAAO8Y,gBAAmB,0BAA4B,eAClExY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,OAAOvT,UAAU,gCA9FtEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0CAA0CG,SAAA,CAC7DO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,WACLlG,UAAY+S,EAAOwR,SAAY,0BAA4B,eAC3DlR,aAAa,MAAKxT,SAAA,CACpB4f,EAAUmG,eAAehB,SACzBxkB,gBAAA,UAAQ6B,MAAM,GAAEpC,SAAA,CAAaH,EAAE,yCAAyC,KAAG+f,EAAUmG,eAAehB,QAAQC,WAAtFlY,gBAEvB8S,EAAUhC,WAAWvU,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACrCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,2BAyFjEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAACqgB,GAAgB,CAAC3M,SAAUV,IAC5BhT,eAACsgB,GAAgB,CAACja,UAAWA,SAExB,KCtBI3G,I,eAAAA,iBAAkB6C,aArGjC,SAA6B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MACpCmU,EAAKnU,EAAM2K,OAAOwJ,GAClBlR,EAAS,0BAAAyI,OAA6ByI,GAC5CjU,EAAiCC,YAASmgB,GAAmB,CAC3DjY,UAAW,CACT8L,GAAIA,KAFA3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxB8R,EAA0BC,YAAY8P,IAA9BgG,EAA6C5V,YAAAH,EAAA,GAAhC,GAGrB,GAAIhS,EAAS,OAAO5B,eAAC+tB,GAAwB,CAAAhuB,SAAEH,EAAE,+BAEjD,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAAC+tB,GAAwB,CAAAhuB,SAAEH,EAAE,8BAGtCtH,QAAQC,IAAIuJ,GAEZ,IAAIksB,EAAkB,GAKtB,OAJIlsB,EAAKgkB,eAAerB,WACtBuJ,EAAkBlsB,EAAKgkB,eAAerB,SAASlN,IAI/CvX,eAAC+tB,GAAwB,CAACrJ,cAAe5iB,EAAKgkB,eAAepB,cAAc3kB,SACzEC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,cAAekoB,YAAY,OAAM/nB,SAC9CC,eAACgU,KAAM,CACLC,cAAe,CACb4Z,SAAU/rB,EAAKgkB,eAAe+H,SAC9BrC,gBAAiB1pB,EAAKgkB,eAAe0F,gBACrCC,4BAA6B3pB,EAAKgkB,eAAe2F,4BACjDC,+BAAgC5pB,EAAKgkB,eAAe4F,+BACpDC,oBAAqB7pB,EAAKgkB,eAAe6F,oBACzCC,gBAAiB9pB,EAAKgkB,eAAe8F,gBACrCC,iBAAkB/pB,EAAKgkB,eAAe+F,iBACtCC,aAAchqB,EAAKgkB,eAAegG,aAClCC,gBAAiBjqB,EAAKgkB,eAAeiG,gBACrCtH,SAAUuJ,GAGZ5Z,SAAU,SAACC,EAAM9H,GAAqC,IAAjC+H,EAAa/H,EAAb+H,cAAyB/H,EAAVoa,WAClCruB,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZsV,EAAc,CAAEle,UAAW,CACzB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBsW,SAAUxZ,EAAOwZ,SACjBrC,gBAAiBnX,EAAOmX,gBACxBC,4BAA6BpX,EAAOoX,4BACpCC,+BAAgCrX,EAAOqX,+BACvCC,oBAAqBtX,EAAOsX,oBAC5BC,gBAAiBvX,EAAOuX,gBACxBC,iBAAkBxX,EAAOwX,iBACzBC,aAAczX,EAAOyX,aACrBC,gBAAiB1X,EAAO0X,gBACxBtH,SAAUpQ,EAAOoQ,WAElB/P,eAAgB,CACf,CAACC,MAAO+O,GAAmBjY,UAAW,CAAC8L,GAAGA,IAC1C,CAAC5C,MAAO8O,GAAoBhY,UAAW7D,SAE1CgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,yCAA2C,CACxDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQmO,EAAOxV,EAAPwV,QAASyD,EAAYjZ,EAAZiZ,aAAcrG,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OACrF7f,eAACiuB,GAAwB,CACvBjb,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTyD,aAAcA,EACdrG,gBAAiBA,EACjBC,cAAeA,EACfF,UAAW7d,EACXuE,UAAWA,GAEc,OAMvC,KCpGe3G,kBANM,SAAHC,GAAA,IAAMC,EAACD,EAADC,EAAQ,OAAAD,EAALwC,MAEnBnC,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,iBAC1BI,eAACuI,KAAK,CAACzD,MAAM,SAAQ/E,SAAEH,EAAE,eAAsB,ICX1CsuB,GAA2B50B,YAAGC,QAAAC,YAAA,ohBA6B9B20B,GAA0B70B,YAAGI,QAAAF,YAAA,iSAmB7B40B,GAAuB90B,YAAGK,QAAAH,YAAA,mNAY1B60B,GAAoB/0B,YAAGO,QAAAL,YAAA,8WAqBvB80B,GAAwBh1B,YAAGQ,QAAAN,YAAA,8MC9BzBkG,qBAAkB6C,aApCjC,SAAiC5C,GAA8C,IAA5CC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQwuB,EAAA5uB,EAAE6uB,oBAAY,IAAAD,GAAMA,EACzE,OACEvuB,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCyuB,EAEAxuB,eAAC6G,GAAU,CAACR,UAAU,2BAA2BnG,UAAU,SAG3DF,eAAC6G,GAAU,CAACR,UAAU,oBAAoBnG,UAAU,SAEtDI,gBAACoE,IAAI,CAACtC,GAAG,oCACHlC,UAAU,yBAAwBH,SAAA,CACpCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,aAAa,IAAExG,EAAE,4CAE5CI,eAAC0N,GAAoB,CAACzD,WAAW,MACTC,SAAS,sBAAqBnK,SACpDC,eAACyW,GAAS,CAACL,OAAO,wCAIxBpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCiIeL,qBAAkB6C,aA5JjC,SAA6B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAChCqT,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACpB1G,EAAYtQ,EAAE,gCACpB0D,EAAqDC,YAAS2qB,GAA0B,CACtFziB,UAAW,CAAEoL,SAAUA,KADjBjV,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAGvCuC,EAAgCC,YAAYya,IAApCG,EAA0D1a,YAAAH,EAAA,GAAvC,GAErBqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAIP,GAAIgC,EAAS,OACX5B,eAAC0uB,GAAwB,CAAA3uB,SACvBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAAC0uB,GAAwB,CAAA3uB,SACvBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,8CAKZ,IAAM+uB,EAAgB7sB,EAAK8sB,qBAE3B,OACE5uB,eAAC0uB,GAAwB,CAAA3uB,SACvBC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,gCACbuQ,cAAe8G,EACfvH,SAAUif,EAAcjf,SACxBY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAOkd,EAAcjf,SAASgC,WAE/BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB+c,qBAAqBxlB,MAChDsG,EAAWmC,EAAgB+c,qBAAqBlf,SAEtD,OAAOoC,EAAS3S,OACZ,CAGEyvB,qBAAsB,CACpB7c,WAAYH,EAAegd,qBAAqB7c,WAChD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAegd,qBAAqBxlB,OAAK4I,aAAKF,IAC1DpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,2CACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,MAPFrF,kBAUlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN4uB,EAAcvlB,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC9BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKslB,QADQhiB,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKulB,cADQjiB,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKiO,OACJjO,EAAKwlB,WAAczuB,gBAAA,QAAAP,SAAA,CAAM,IAAEH,EAAE,gBAAgB,IAACI,eAAA,YAAe,GAC7DuJ,EAAKylB,oBAAuBhvB,eAAC2kB,KAAKC,MAAK,CAAC9f,MAAM,OAAM/E,SACnDH,EAAE,mDACU,KALDiN,gBAOhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAK2lB,iBADZriB,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK+N,MADQzK,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,iCAAmCqH,EAAKgO,GAAG,EACvEzS,MAAM,YAAW/E,SACtBH,EAAE,kBAGPI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACdkX,EAAoB,CAAEhjB,UAAW,CAC/B8I,MAAO,CACPgD,KACAV,UAAWA,IAEhBnC,eAAgB,CACf,CAACC,MAAOuZ,GAA0BziB,UAAW,CAAC,SAAYoL,OAC1DjC,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZiX,EAAc,qBAAyB,oBAAqB,CAC3D9B,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACC,KAAK,cAnCwByG,kBAvBzBA,eA6DJ,YAO5B,KC9KasiB,GAAuB3c,OAAaC,MAAM,CACnDrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdkvB,aAActc,OACX4c,SAAS,EAAGxvB,YAAE,sBACd+S,SAAS/S,YAAE,uBACdivB,OAAQrc,OACRgF,OAAQhF,OACRuc,WAAYvc,OACZwc,oBAAqBxc,OACrB8W,MAAO9W,OACPgX,OAAQhX,SCgJG9S,iBAAkB6C,aA1ID,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAc4M,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAe5M,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQhO,EAAS1G,EAAT0G,UAASgpB,EAAA1vB,EAAE2vB,YAAI,IAAAD,GAAMA,EAAA,OAChI/uB,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO6a,gBAClBlvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,sCAEjDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,eAInDnT,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACLuvB,EACFtvB,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kCAAkCG,SAAA,CACrDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,SACLlG,UAAY+S,EAAO4b,OAAU,0BAA4B,eACzDtb,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,0BAE7C,GACdF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,yCAAyCG,SAAA,CAC5DC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,eACLlG,UAAY+S,EAAO6b,aAAgB,0BAA4B,eAC/Dvb,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,eAAeqN,UAAU,OAAOvT,UAAU,6BAInEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,SACLlG,UAAY+S,EAAOuE,OAAU,0BAA4B,eACzDjE,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,wBAEzDI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,aACLwnB,QAASvZ,EAAO0a,aAClB/uB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,2CAEjDI,eAACwT,KAAY,CAACpN,KAAK,aAAaqN,UAAU,aAG9CzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,sBACLwnB,QAASvZ,EAAO2a,sBAClBhvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,sDAEjDI,eAACwT,KAAY,CAACpN,KAAK,sBAAsBqN,UAAU,gBAIzDnT,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,QACbC,aAAchV,EAAOiV,MACrB1wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPtG,EAAgB,SAAS,GAAM,GAC/BC,EAAc,QAASqG,EAAE7gB,OAAOkkB,aAClC,IAEFvpB,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,wBAExDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,SACbC,aAAchV,EAAOmV,OACrB5wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPtG,EAAgB,UAAU,GAAM,GAChCC,EAAc,SAAUqG,EAAE7gB,OAAOkkB,aACnC,IAEFvpB,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,wBAEzDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAOqE,KAAQ,0BAA4B,eACvD/D,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAGzDI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SACTH,EAAE,2BAIN,KCtEIF,qBAAkB6C,aApEjC,SAA+B5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC7BgD,EAAY,2BAClBuN,EAA0BC,YAAYwa,IAA/BkB,EAAiDxb,YAAAH,EAAA,GAAlC,GAEtB,OACE5T,eAAC0uB,GAAwB,CAACF,cAAc,EAAKzuB,SAC3CC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,oCAAoCG,SACjDC,eAACgU,KAAM,CACLC,cAAe,CACb7N,KAAM,GACN8oB,eAAe,EACfJ,aAAc,GACdtX,OAAQ,MACRuX,YAAY,EACZC,qBAAqB,EACrB1F,MAAO,GACPE,OAAQ,GACRlS,KAAM,IAERnD,iBAAkBgb,GAClB/a,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBib,EAAgB,CAAE9jB,UAAW,CAC3B8I,MAAO,CACLnO,KAAMiO,EAAOjO,KACb8oB,cAAe7a,EAAO6a,cACtBJ,aAAcza,EAAOya,aACrBtX,OAAQnD,EAAOmD,OACfuX,WAAY1a,EAAO0a,WACnBC,oBAAqB3a,EAAO2a,oBAC5B1F,MAAOjV,EAAOiV,MACdE,OAAQnV,EAAOmV,OACflS,KAAMjD,EAAOiD,OAEd5C,eAAgB,CACf,CAACC,MAAOuZ,GAA0BziB,UAAW,CAAC,UAAY,OAE7DmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,4CAA8C,CAC3DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcqB,EAAMrH,EAANqH,OAAQpB,EAAMjG,EAANiG,OAAQ4M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAe,OAC9D5f,eAACwvB,GAAuB,CACtBxc,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EACXuZ,gBAAiBA,EACjBC,cAAeA,GACf,OAMd,KCwCengB,qBAAkB6C,aArGjC,SAAgC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MACtCmU,EAAKnU,EAAM2K,OAAOwJ,GAClBlR,EAAY,2BACZ6J,EAAYtQ,EAAE,qCACpB0D,EAAiCC,YAAS4qB,GAAyB,CACjE1iB,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA+BC,YAAYua,IAAnCqB,EAAwD1b,YAAAH,EAAA,GAAtC,GAE1B,GAAIhS,EAAS,OACX5B,eAAC0uB,GAAwB,CAACF,cAAc,EAAKzuB,SAC3CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAAC0uB,GAAwB,CAACF,cAAc,EAAKzuB,SAC3CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,8CAKZ,IAAMiY,EAAc/V,EAAK4tB,oBAIzB,OAHAp3B,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAGV9B,eAAC0uB,GAAwB,CAACF,cAAc,EAAKzuB,SAC3CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClB8oB,cAAerX,EAAYqX,cAC3BJ,aAAcjX,EAAYiX,aAC1BD,OAAQhX,EAAYgX,OACpBrX,OAAQK,EAAYL,OACpBuX,WAAYlX,EAAYkX,WACxBC,oBAAqBnX,EAAYmX,oBACjC1F,MAAOzR,EAAYyR,MACnBE,OAAQ3R,EAAY2R,OACpBlS,KAAMO,EAAYP,MAEpBnD,iBAAkBgb,GAClB/a,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZob,EAAmB,CAAEhkB,UAAW,CAC9B8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,KACb8oB,cAAe7a,EAAO6a,cACtBL,OAAQxa,EAAOwa,OACfC,aAAcza,EAAOya,aACrBtX,OAAQnD,EAAOmD,OACfuX,WAAY1a,EAAO0a,WACnBC,oBAAqB3a,EAAO2a,oBAC5B1F,MAAOjV,EAAOiV,MACdE,OAAQnV,EAAOmV,OACflS,KAAMjD,EAAOiD,OAEd5C,eAAgB,CACf,CAACC,MAAOuZ,GAA0BziB,UAAW,CAAC,UAAY,OAE7DmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,6CAA+C,CAC5DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACwvB,GAAuB,CACtBxc,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EACXuZ,gBAAiBA,EACjBC,cAAeA,EACfyP,MAAM,GACN,OAMd,KCvFe5vB,qBAAkB6C,aArBjC,SAAyC5C,GAA4B,IAAzBC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UACtD,OACEC,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC6G,GAAU,CAACR,UAAU,iCAG1BrG,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCOeL,I,SAAAA,iBAAkB6C,aAzBjC,SAAuC5C,GAAIA,EAADC,EAAUD,EAAP0D,QAAiG,IAAxFsc,EAAShgB,EAATggB,UAAW3M,EAAYrT,EAAZqT,aAAc4M,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAe5M,EAAMtT,EAANsT,OAAgBwW,GAAF9pB,EAAN0U,OAAkB1U,EAAV8pB,YAC7H,OACEzpB,eAACkT,KAAM,CAAAnT,SACLC,eAACc,KAAM,CAACC,OAAQiS,EAAchS,OAAQgS,EAAajT,SACjDO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTC,eAACsT,KAAK,CAACG,UAAU,SACXrN,KAAK,sBACLlG,UAAY+S,EAAOyc,oBAAuB,0BAA4B,eACtE5T,SAAU,SAACoK,GACTrG,EAAc,sBAAuBqG,EAAE7gB,OAAOlD,OAC9Cyd,EAAgB,uBAAuB,GACvCgI,YAAW,WAAO6B,GAAY,GAAG,IACnC,EACAlW,aAAa,MAAKxT,SACrB4f,EAAUiP,qBAAqBxlB,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC/CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,MAG3D7M,eAACwT,KAAY,CAACpN,KAAK,sBAAsBqN,UAAU,OAAOvT,UAAU,2BAK9E,KCnCayvB,GAA+Bnd,OAAaC,MAAM,CAC3Did,oBAAqBld,SCDZod,GAAoCt2B,YAAGC,QAAAC,YAAA,qqBA4DvCq2B,IAnB0Bv2B,YAAGI,QAAAF,YAAA,iSAmBEF,YAAGK,QAAAH,YAAA,gUCzCzCs2B,GAA0B,SAAClwB,EAAGmwB,GAClC,OAAOA,GACL,IAAK,cACH,OAAOnwB,EAAE,+CACX,IAAK,gBACH,OAAOA,EAAE,iDACX,IAAK,cACH,OAAOA,EAAE,+CACX,IAAK,gBACH,OAAOA,EAAE,iDACX,IAAK,eACH,OAAOA,EAAE,gDACX,IAAK,gBACH,OAAOA,EAAE,iDACX,IAAK,aACH,OAAOA,EAAE,8CACX,IAAK,sBACH,OAAOA,EAAE,uDACX,IAAK,oBACH,OAAOA,EAAE,qDACX,QACE,OAAOA,EAAE,kDAEf,EA0IeF,I,SAAAA,iBAAkB6C,aAvIjC,SAAqC5C,GAAkB,IAAfC,EAACD,EAADC,EACtC0D,GADgD3D,EAAP0D,QACGE,YAASqsB,GAAmC,CACtFnkB,UAAW,CAAEoL,UAAU,MADjBjV,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAI9BuC,EAA6BC,YAAYgc,IAAlCG,EAA+Djc,YAAAH,EAAA,GAA7C,GAGzB,GAAIhS,EAAS,OACX5B,eAACiwB,GAA+B,CAAAlwB,SAC9BC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,yCAAyCG,SACjEC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACiwB,GAA+B,CAAAlwB,SAC9BC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,yCAAyCG,SACjEC,eAAA,KAAAD,SAAIH,EAAE,uDAKZ,IAAMswB,EAA8BpuB,EAAKouB,4BAGzC,OAAKA,EAA4B9mB,MAAMjK,OAWrCa,eAACiwB,GAA+B,CAAAlwB,SAC9BC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,yCACd8P,SAAUwgB,EAA4BxgB,SACtCY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOye,EAA4BxgB,SAASgC,WAE9CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB+c,qBAAqBxlB,MAChDsG,EAAWmC,EAAgB+c,qBAAqBlf,SAEtD,OAAOoC,EAAS3S,OACZ,CAGEyvB,qBAAsB,CACpB7c,WAAYH,EAAegd,qBAAqB7c,WAChD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAegd,qBAAqBxlB,OAAK4I,aAAKF,IAC1DpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,+CACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qDAFNiN,kBAKlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNmwB,EAA4B9mB,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5CjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACN+vB,GAAwBlwB,EAAG2J,EAAKwmB,WADpBljB,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACgU,KAAM,CACLC,cAAe,CACbyb,oBAAoBnmB,EAAKmmB,oBAAoBnY,IAE/CpD,iBAAkBwb,GAClBvb,SAAU,SAACC,EAAMrH,GAAyB,IAArBsH,EAAatH,EAAbsH,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ2b,EAAmB,CAAEvkB,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACTmY,oBAAqBrb,EAAOqb,sBAE7Bhb,eAAgB,KAGlBE,MAAK,SAAAoV,GAAe,IAAZloB,EAAIkoB,EAAJloB,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,6CAA+C,CAC5DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAkqB,GAAA,IAAGjX,EAAYiX,EAAZjX,aAAcC,EAAMgX,EAANhX,OAAQoB,EAAM4V,EAAN5V,OAAQuL,EAAeqK,EAAfrK,gBAAiBC,EAAaoK,EAAbpK,cAAe4J,EAAUQ,EAAVR,WAAU,OAC1EzpB,eAACmwB,GAA8B,CAC7BxQ,UAAW7d,EACXkR,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRuL,gBAAiBA,EACjBC,cAAeA,EACf4J,WAAYA,GACZ,QA7CM5c,eAiDJ,aAhGxB7M,eAACiwB,GAA+B,CAAAlwB,SAC9BC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,yCAAyCG,SACjEC,eAAA,KAAAD,SACGH,EAAE,mDAoGb,KCjLawwB,GAA4B92B,YAAGC,QAAAC,YAAA,8OAgB/B62B,GAA8B/2B,YAAGI,QAAAF,YAAA,kMAUjC82B,GAAiCh3B,YAAGK,QAAAH,YAAA,gNCuElCkG,qBAAkB6C,aAlFjC,SAAkC5C,GAAuD,IAApDC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAOrD,EAAQJ,EAARI,SAAQwwB,EAAA5wB,EAAE6wB,iBAAS,IAAAD,EAAC,SAAQA,EAC5EE,EAAYrtB,EAAM2K,OAAO2iB,WACzBrqB,EAAY,0BAA4BoqB,EAC9CntB,EAA4DC,YAASmgB,GAAmB,CACtFjY,UAAW,CACT8L,GAAIkZ,KAFSE,EAAYrtB,EAArB1B,QAA8BgvB,EAAUttB,EAAjBzB,MAAmBC,EAAIwB,EAAJxB,KAMlD,GAAI6uB,EAAc,OAChB3wB,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BC,eAAA,KAAAD,SAAIH,EAAE,mCAKZ,GAAIgxB,EACF,OACE5wB,eAACiL,GAAW,CAAAlL,SACVO,gBAAA,OAAKJ,UAAU,eAAcH,SAAA,CACzBzH,QAAQC,IAAIq4B,GACd5wB,eAAA,KAAAD,SAAIH,EAAE,mCAMdtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAGIyE,EAHEoZ,EAAY7d,EACZ+uB,EAAiBlR,EAAUmG,eAAepB,cAWhD,OAFAne,GALEA,EAAQ3G,EADS,WAAd4wB,EACO,+BAEA,kCAGI,KAAOK,EAGrB7wB,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAQA,EAAOxG,SAC1BC,eAAA,OAAKE,UAAU,sBAAqBH,SAElCO,gBAACoE,IAAI,CAACtC,GAAIiE,EACJnG,UAAU,yBAAwBH,SAAA,CACpCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAAe,IAAExG,EAAE,uBAIlDU,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAEbA,IAEHO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CAChBO,gBAAC4G,KAAI,CAAC4gB,YAAY,OAAM/nB,SAAA,CACtBC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,oBAEjBU,gBAAC4G,KAAKC,KAAI,CAAC2pB,QAAS,EAAE/wB,SAAA,CACpBO,gBAAA,MAAAP,SAAA,CAAI,KAAI8wB,EAAgB,OACrBlR,EAAUmG,eAAe0F,iBAAoBlrB,gBAAA,QAAAP,SAAA,CAAO4f,EAAUmG,eAAe0F,gBAAgBxrB,eAAA,YAC7F2f,EAAUmG,eAAeiL,cAAiBzwB,gBAAA,QAAAP,SAAA,CAAO4f,EAAUmG,eAAeiL,aAAa/wB,eAAA,YACxF2f,EAAUmG,eAAe3K,cAG/Bnb,eAACqtB,GAAyB,CAACvH,eAAgBnG,EAAUmG,6BAOjE,KCGepmB,iBAAkB6C,aAjFC,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAAgB2P,GAAFrT,EAALyD,MAAmBzD,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQsL,EAAShgB,EAATggB,UAAWtZ,EAAS1G,EAAT0G,UAAWuZ,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAa,OACxI7f,eAACkT,KAAM,CAAAnT,SACLO,gBAAC4G,KAAI,CAAC4gB,YAAY,OAAM/nB,SAAA,CACtBC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,uBAEjBU,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOtH,KACjB+O,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,OAAQ9S,EAAK,EAC/CiP,OAAQ,kBAAM4D,EAAgB,QAAQ,EAAK,IAE7C5f,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAGzDF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,SACLlG,UAAY+S,EAAOkM,OAAU,0BAA4B,eACzD5L,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,6BAI7DF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0BAA0BG,SAAA,CAC7CO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,uBACLlG,UAAY+S,EAAO0X,qBAAwB,0BAA4B,eACvEpX,aAAa,MAAKxT,SAAA,CACvBzH,QAAQC,IAAI,uCACZD,QAAQC,IAAIonB,GACb3f,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,KAATiN,gBACrB8S,EAAUiL,sBAAsBxhB,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAChDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,uBAAuBqN,UAAU,OAAOvT,UAAU,4BAI3EF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACTO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACfC,aAAa,OACbC,aAAchV,EAAOqV,KACrB9wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,OAAQqG,EAAE7gB,OAAOkkB,cAC/B3J,EAAgB,QAAQ,EAC1B,IAEJ5f,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,+BAK3DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC2E,KAAM,CAACG,MAAM,OAAO2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAAEgC,KAAK,SAAQtI,SACrEH,EAAE,2BAIN,KCYIF,qBAAkB6C,aA1FjC,SAAiC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC/BotB,EAD6C9wB,EAALyD,MACtB2K,OAAO2iB,WACzBrqB,EAAY,0BAA4BoqB,EAC9CntB,EAA4DC,YAASmgB,GAAmB,CACtFjY,UAAW,CACT8L,GAAIkZ,KAFSE,EAAYrtB,EAArB1B,QAA8BgvB,EAAUttB,EAAjBzB,MAAmBC,EAAIwB,EAAJxB,KAKlD8R,EAA4BC,YAAYwc,GAA6B,CACnEW,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrC4qB,EAELld,YAAAH,EAAA,GAFsB,GAIxB,GAAI+c,EAAc,OAChB3wB,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BC,eAAA,KAAAD,SAAIH,EAAE,mCAKZ,GAAIgxB,EACF,OACE5wB,eAACiL,GAAW,CAAAlL,SACVO,gBAAA,OAAKJ,UAAU,eAAcH,SAAA,CACzBzH,QAAQC,IAAIq4B,GACd5wB,eAAA,KAAAD,SAAIH,EAAE,mCAMdtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM6d,EAAY7d,EAGlB,OACE9B,eAACkxB,GAAyB,CAACV,UAAW,SAASzwB,SAC7CC,eAACgU,KAAM,CACLC,cAAe,CACblH,KAAM,IAAI7J,KACVic,OAAQQ,EAAUmG,eAAeqL,QACjCxG,qBAAsB,GACtBjB,KAAM,IAGRtV,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjB2c,EAAkB,CAAExlB,UAAW,CAC7B8I,MAAO,CACLuR,eAAgB2K,EAChB1jB,KAAMuR,GAAejK,EAAOtH,MAC5BoS,OAAQ9K,EAAO8K,OACfwL,qBAAsBtW,EAAOsW,qBAC7BjB,KAAMrV,EAAOqV,OAEdhV,eAAgB,CACf,CAACC,MAAO8O,GAAoBhY,UAAW7D,MACvC,CAAC+M,MAAO+O,GAAmBjY,UAAW,CAAE8L,GAAIkZ,OAE/C7b,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,8CAAgD,CAC7DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACoxB,GAAyB,CACxBzR,UAAWA,EACX3M,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,KAKZ,KCsCe3G,qBAAkB6C,aA5HjC,SAAkC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MACzCqtB,EAAYrtB,EAAM2K,OAAO2iB,WACzBnZ,EAAKnU,EAAM2K,OAAOwJ,GACxBjf,QAAQC,IAAIk4B,GACZn4B,QAAQC,IAAIgf,GAEZ,IAAMlR,EAAY,0BAA4BoqB,EAC9CntB,EAAuFC,YAASmgB,GAAmB,CACjHjY,UAAW,CACT8L,GAAIkZ,KAFSY,EAAmB/tB,EAA5B1B,QAAqC0vB,EAAiBhuB,EAAxBzB,MAAgC0vB,EAAWjuB,EAAjBxB,KAKhEyJ,EAAuFhI,YAAS6sB,GAA2B,CACzH3kB,UAAW,CACT8L,GAAIA,KAFSia,EAAmBjmB,EAA5B3J,QAAqC6vB,EAAiBlmB,EAAxB1J,MAAgC6vB,EAAWnmB,EAAjBzJ,KAKhE8R,EAA+BC,YAAYyc,GAAgC,CACzEU,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrCsrB,EAEL5d,YAAAH,EAAA,GAFyB,GAI3B,GAAIyd,GAAuBG,EAAqB,OAC9CxxB,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BC,eAAA,KAAAD,SAAIH,EAAE,mCAKZ,GAAI0xB,EACF,OACEtxB,eAACiL,GAAW,CAAAlL,SACVO,gBAAA,OAAKJ,UAAU,eAAcH,SAAA,CACzBzH,QAAQC,IAAI+4B,GACdtxB,eAAA,KAAAD,SAAIH,EAAE,mCAMd,GAAI6xB,EACF,OACEzxB,eAACiL,GAAW,CAAAlL,SACVO,gBAAA,OAAKJ,UAAU,eAAcH,SAAA,CACzBzH,QAAQC,IAAIk5B,GACdzxB,eAAA,KAAAD,SAAIH,EAAE,mCAMdtH,QAAQC,IAAI,cACZD,QAAQC,IAAIg5B,GACZj5B,QAAQC,IAAIm5B,GACZ,IAGI7G,EAHElL,EAAY4R,EACZtd,EAAgByd,EAAYE,sBAG9B3d,EAAc0W,uBAChBE,EAAuB5W,EAAc0W,qBAAqBpT,IAK5D,IAAIsa,EAAc,KAKlB,OAJI5d,EAAclH,OAChB8kB,EAAc,IAAI3uB,KAAK+Q,EAAclH,OAIrC/M,eAACkxB,GAAyB,CAACV,UAAW,SAASzwB,SAC7CC,eAACgU,KAAM,CACLC,cAAe,CACblH,KAAM8kB,EACN1S,OAAQlL,EAAckL,OACtBwL,qBAAsBE,EACtBnB,KAAMzV,EAAcyV,MAGtBtV,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBqd,EAAqB,CAAElmB,UAAW,CAChC8I,MAAO,CACLgD,GAAIA,EACJxK,KAAMuR,GAAejK,EAAOtH,MAC5BoS,OAAQ9K,EAAO8K,OACfwL,qBAAsBtW,EAAOsW,qBAC7BjB,KAAMrV,EAAOqV,OAEdhV,eAAgB,CACf,CAACC,MAAO8O,GAAoBhY,UAAW7D,MACvC,CAAC+M,MAAO+O,GAAmBjY,UAAW,CAAE8L,GAAIkZ,OAE/C7b,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,+CAAiD,CAC9DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EACDvU,SAEA,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACoxB,GAAyB,CACxBzR,UAAWA,EACX3M,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,KAKZ,KC3IO,SAASuB,KACd,IAAIK,EAAY,CAAC,EAEbS,EAASrK,aAAa0E,QAAQxE,EAAKtD,8BASvC,OAPEgN,EAAUS,OADRA,QAGiBtJ,EAGrB9G,QAAQC,IAAI0P,GAELA,CACT,CCHA,SAASob,GAAgBlhB,GACvB,IAAImhB,EAAejlB,aAAa0E,QAAQZ,GAGxC,OAFA7J,QAAQC,IAAI+qB,GAERA,IAGFhrB,QAAQC,IAAI,wBACL,GAEX,CASA,I,YA2BemH,iBAAkB6C,aAxBL,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAkBmX,GAARpX,EAAP0D,QAAa1D,EAAJmC,KAAanC,EAAPoX,SAAO,OACtD/W,eAAA,OAAAD,SAEEO,gBAAA,UACEJ,UAPc,oBAQdiC,MAAOkhB,GAAgB9kB,EAAKtD,8BAC5B6gB,SAAW,SAAC4B,IAflB,SAAsC3N,EAAK5N,EAAO4U,GAChD1Y,aAAaC,QAAQyR,EAAK5N,GAC1B4U,EAAQnP,KAEV,CAYQoV,CACEze,EAAKtD,6BACLyiB,EAAMrY,OAAOlD,MACb4U,EAEJ,EAAEhX,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,gCAATiN,gBACtB7M,eAAA,UAAQmC,MAAM,WAAUpC,SAAaH,EAAE,qCAATiN,gBAC9B7M,eAAA,UAAQmC,MAAM,mBAAkBpC,SAAaH,EAAE,6CAATiN,gBACtC7M,eAAA,UAAQmC,MAAM,OAAMpC,SAAaH,EAAE,iCAATiN,gBAC1B7M,eAAA,UAAQmC,MAAM,YAAWpC,SAAaH,EAAE,sCAATiN,gBAC/B7M,eAAA,UAAQmC,MAAM,YAAWpC,SAAaH,EAAE,sCAATiN,oBAE7B,KCrBOnN,iBAAkB6C,aAnBP,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAUgX,EAAOpX,EAAPoX,QAAO,OACxD/W,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC8xB,GAAmB,CAAC/a,QAASA,QAGlC/W,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAKG,KCvBVgyB,GAAkB,SAAA7jB,GAAAC,aAAA4jB,EAAA7jB,GAAA,IAAAE,EAAAC,aAAA0jB,GACtB,SAAAA,EAAYpiB,GAAQ,IAADrB,EAGC,OAHDC,aAAA,KAAAwjB,GACjBzjB,EAAAF,EAAAQ,KAAA,KAAMe,GACNrX,QAAQC,IAAI,+BACZD,QAAQC,IAAIoX,GAAMrB,CACpB,CA0BC,OApBDwB,aAAAiiB,EAAA,EAAAhiB,IAAA,SAAA5N,MAEA,WACE,IAAMvC,EAAIP,KAAKsQ,MAAM/P,EAGrB,OAFeP,KAAKsQ,MAAMjH,QAGxB,IAAK,WACH,OAAO1I,eAACuI,KAAK,CAACzD,MAAM,YAAW/E,SAAEH,EAAE,sCACrC,IAAK,mBACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,8CACnC,IAAK,OACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,kCACnC,IAAK,YACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,uCACnC,IAAK,YACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,uCACnC,QACE,OAAOA,EAAE,qCAEf,KAACmyB,CAAA,CA/BqB,CAASrhB,aAmClBhR,iBAAkB6C,YAAWwvB,KCzC/BC,GAAmB14B,YAAGC,QAAAC,YAAA,wpBA0EtBy4B,IA1CkB34B,YAAGI,QAAAF,YAAA,icAgCEF,YAAGK,QAAAH,YAAA,6KAUHF,YAAGO,QAAAL,YAAA,6IC9BxBkG,qBAAkB6C,aAhCjC,SAA2B5C,GAAoB,IAAlBC,EAACD,EAADC,EAAU2J,GAAF5J,EAALyD,MAAWzD,EAAJ4J,MACrCqK,EAAsBC,YAAYoe,IAA3BC,EAAgDne,YAAAH,EAAA,GAArC,GAEhB,OACE5T,eAAA,UAAQE,UAAU,uCAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,qCACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CAAIH,EAAE,iBAAiB,MAAK2J,EAAK4oB,eACjD/Y,WAAYxZ,EAAE,0BACdgb,eAAgBsX,EAChB5Y,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAACC,MAAOqd,GAAkBvmB,UAAW7D,SAI/C,EAAE7H,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAG1D,KC4Ge1G,qBAAkB6C,aA7HjC,SAAsB5C,GAAiC,IAA/BC,EAACD,EAADC,EAAUoe,GAAFre,EAALyD,MAAezD,EAARqe,UAE1BoU,GAF2CzyB,EAAP0D,QACtBI,qBAAWxC,IACIiQ,sBAE7B3K,EAAQ3G,EAAE,mBAChB0D,EAAqDC,YAASyuB,GAAkB,CAC9EvmB,UAAW,CAAC7D,6BACZiE,YAAa,iBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAKvC,GAAIzP,EAAS,OACX5B,eAACqyB,GAAiB,CAAC9rB,MAAOA,EAAMxG,SAC7BH,EAAE,+BAIP,GAAIiC,EAAO,OACT7B,eAACqyB,GAAiB,CAAC9rB,MAAOA,EAAMxG,SAC7BH,EAAE,kCAIP,IAAM0yB,EAASxwB,EAAKywB,cAKpB,OAHAl0B,aAAaC,QAAQC,EAAKvD,6BAA8BgjB,EAASoH,UAG5DkN,EAAOlpB,MAAMjK,OAWhBa,eAACqyB,GAAiB,CAAC9rB,MAAOA,EAAOwQ,QAASA,EAAQhX,SAChDC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,wBACb8P,SAAU4iB,EAAO5iB,SACjBY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO6gB,EAAO5iB,SAASgC,WAEzBC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB0gB,cAAcnpB,MACzCsG,EAAWmC,EAAgB0gB,cAAc7iB,SAE/C,OAAOoC,EAAS3S,OACZ,CAGEozB,cAAe,CACbxgB,WAAYH,EAAe2gB,cAAcxgB,WACzC3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe2gB,cAAcnpB,OAAK4I,aAAKF,IACnDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CAERC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,yBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,6BACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,MAPFrF,kBAUlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNuyB,EAAOlpB,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACvBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACRO,gBAACoE,IAAI,CAACtC,GAAI,wBAA0BmH,EAAKgO,GAAGxX,SAAA,CAAC,KACxCwJ,EAAK4oB,YAAY,IAACnyB,eAAA,YAEvBA,eAAC+xB,GAAkB,CAACrpB,OAAQa,EAAKb,WAJnBmE,gBAShB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKipB,WAAW5mB,OAAOwmB,IADjBvlB,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKub,SAAWvb,EAAKub,QAAQC,UADhBlY,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK2b,cADQrY,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKuc,gBACL9lB,eAAC0E,IAAI,CAACtC,GAAE,0BAAA0M,OAA4BvF,EAAKuc,eAAevO,IAAKxX,SAC1DwJ,EAAKuc,eAAepB,kBAG3BpkB,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACRC,eAACyyB,GAAkB,CAAClpB,KAAMA,IAC1BvJ,eAAC0E,IAAI,CAACtC,GAAI,wBAA0BmH,EAAKgO,GAAGxX,SAC1CC,eAAC2E,KAAM,CAACzE,UAAU,qBACV4E,MAAM,YAAW/E,SACtBH,EAAE,sBALOiN,kBAzBFA,eAkCJ,aAvFxB7M,eAACqyB,GAAiB,CAACtb,QAASA,EAAQhX,SAClCC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,wBAAwBG,SAChDC,eAAA,KAAAD,SACGH,EAAE,kCA2Fb,KC3IO,SAASgI,GAAyB8qB,GACvC,IAAIzqB,EAAY,CACdyqB,UAAWA,EAAUjrB,eAKvB,OAFAnP,QAAQC,IAAI0P,GAELA,CACT,CCMevI,sBAff,SAAuCC,GAAiB,IAAdC,EAACD,EAADC,EACxC,OADiDD,EAAN+I,QAEzC,IAAK,eACH,OAAO1I,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,iDACnC,IAAK,WACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,6CACnC,IAAK,oBACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,sDACnC,IAAK,WACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,SAAQ/E,SAAEH,EAAE,6CAClC,QACE,OAAOA,EAAE,+CAEf,IC8BeF,I,kBAAAA,iBAAkB6C,aApCjC,SAAkC5C,GAA8E,IAA5EC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAOrD,EAAQJ,EAARI,SAAQ4yB,EAAAhzB,EAAEizB,eAAO,IAAAD,GAAMA,EAAApc,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EAAAzF,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,GAAEA,EACpG4hB,EAAYtvB,EAAM2K,OAAO8kB,WAE/B,OACE7yB,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChC6yB,EACA5yB,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,sBAAqBnK,SAClDC,eAACyW,GAAS,CAACL,OAAM,2BAAAtH,OAA6B4jB,EAAS,iBAEvD,GAEFlc,EACAxW,eAAC0N,GAAoB,CAACzD,WAAW,OACXC,SAAS,sBAAqBnK,SAClDC,eAAC6G,GAAU,CAACR,UAAWA,MAEvB,QAIRrG,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KC/Ca+yB,GAA4Bx5B,YAAGC,QAAAC,YAAA,2pBA8B/Bu5B,GAA0Bz5B,YAAGI,QAAAF,YAAA,wxCAuE7Bw5B,GAAmB15B,YAAGK,QAAAH,YAAA,4eAoBtBy5B,GAAoB35B,YAAGO,QAAAL,YAAA,wMAWvB05B,GAAuB55B,YAAGQ,QAAAN,YAAA,wMAW1B25B,GAAuB75B,YAAGU,QAAAR,YAAA,iKCmBxBkG,qBAAkB6C,aA7IjC,SAA8B5C,GAAwB,IAUhDuQ,EACAkjB,EAX0BxzB,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAEpC0X,EADcrX,qBAAWxC,IACA6Z,WACzB4X,EAAYtvB,EAAM2K,OAAO8kB,WAE/BvvB,EAA4CC,YAASuvB,GAA2B,CAC9ErnB,UAAW7D,GAAyB8qB,KAD9B9wB,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAG9BuC,EAA6BC,YAAYsf,IAAlCE,EAAuDtf,YAAAH,EAAA,GAArC,GAazB,GATkB,eAAd8e,GACFxiB,EAAYtQ,EAAE,2CACdwzB,EAAexzB,EAAE,kDAEjBsQ,EAAYtQ,EAAE,wCACdwzB,EAAexzB,EAAE,8CAIfgC,EAAS,OACX5B,eAACszB,GAAyB,CAACV,SAAS,EAAK7yB,SACvCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACszB,GAAyB,CAACV,SAAS,EAAK7yB,SACvCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,+CAKZ,IAAI2zB,EAAwBzxB,EAAKyxB,sBAEjC,OAAKA,EAAsBnqB,MAAMjK,OAS/Ba,eAACszB,GAAyB,CAACV,SAAS,EAAK7yB,SACvCC,eAACiO,GAAW,CAACiC,UAAWA,EACtBR,SAAU6jB,EAAsB7jB,SAChCY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO8hB,EAAsB7jB,SAASgC,WAExCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB0hB,sBAAsBnqB,MACjDsG,EAAWmC,EAAgB0hB,sBAAsB7jB,SAEvD,OAAOoC,EAAS3S,OACZ,CAGEo0B,sBAAuB,CACrBxhB,WAAYH,EAAe2hB,sBAAsBxhB,WACjD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe2hB,sBAAsBnqB,OAAK4I,aAAKF,IAC3DpC,aAGJkC,CACJ,GAEN,EAAE7R,SACAO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,4CACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,4CACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRwzB,EAAsBnqB,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACtCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACwzB,GAA8B,CAAC9qB,OAAQa,EAAKb,UAD/BmE,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKkqB,eAAe7nB,OAAOkP,KAErCxa,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACNwJ,EAAKmqB,4BAA+BnqB,EAAKmqB,4BAA4BttB,KAAOxG,EAAE,oBAC9E2J,EAAKkL,KAAQzU,eAAA,OAAAD,SAAKO,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAEwJ,EAAKkL,KAAK,MAAIlL,EAAKiL,WAAuB,MAE/FlU,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,2BAAA0M,OAA6B4jB,EAAS,UAAA5jB,OAASvF,EAAKgO,IAAKxX,SAC/DC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,8CACduZ,eAAgBnZ,eAAA,KAAAD,SAAIwJ,EAAKnD,OACzBgT,WAAYxZ,EAAE,mCACdgb,eAAgByY,EAChB/Z,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACjB,CAACC,MAAOme,GAA2BrnB,UAAW7D,GAAyB8qB,OAG/E,EAAE3yB,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,qBAxCxCyG,eA2CJ,aA1FtB7M,eAACszB,GAAyB,CAACV,SAAS,EAAK7yB,SACvCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIqzB,OA+FZ,KC1He1zB,qBAAkB6C,aA5BjC,SAAmC5C,GAAwB,IAIrDuQ,EACAnF,EAL+BnL,EAACD,EAADC,EAC7B8yB,GADuC/yB,EAAP0D,QAAc1D,EAALyD,MACvB2K,OAAO8kB,YACzBxsB,EAAS,2BAAAyI,OAA8B4jB,GAY7C,MARkB,eAAdA,GACFxiB,EAAYtQ,EAAE,oDACdmL,ELAG,SAAoCnL,EAAG8yB,GAC5C,OACEpyB,gBAAC2F,KAAI,CAAC0tB,UAAQ,EAAA5zB,SAAA,CACZO,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CACRC,eAAC0E,IAAI,CAACtC,GAAE,2BAAA0M,OAA6B4jB,EAAS,iBAAgB3yB,SAC5DO,gBAAA,KAAAP,SAAA,CAAIH,EAAE,oDAAoD,IAACI,eAACmG,KAAI,CAACC,KAAK,uBACjEpG,eAAA,SACPA,eAAA,KAAAD,SAAIH,EAAE,qEAERU,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CACRC,eAAC0E,IAAI,CAACtC,GAAE,2BAAA0M,OAA6B4jB,EAAS,iBAAgB3yB,SAC5DO,gBAAA,KAAAP,SAAA,CAAIH,EAAE,oDAAoD,IAACI,eAACmG,KAAI,CAACC,KAAK,uBACjEpG,eAAA,SACPA,eAAA,KAAAD,SAAIH,EAAE,uEAId,CKjBcg0B,CAA2Bh0B,EAAG8yB,KAExCxiB,EAAYtQ,EAAE,iDACdmL,ELiBG,SAAiCnL,EAAG8yB,GACzC,OACE1yB,eAACiG,KAAI,CAAC0tB,UAAQ,EAAA5zB,SACZO,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CACRC,eAAC0E,IAAI,CAACtC,GAAE,2BAAA0M,OAA6B4jB,EAAS,iBAAgB3yB,SAC5DO,gBAAA,KAAAP,SAAA,CAAIH,EAAE,iDAAiD,IAACI,eAACmG,KAAI,CAACC,KAAK,uBAC9DpG,eAAA,SACPA,eAAA,KAAAD,SAAIH,EAAE,mEAId,CK5Bci0B,CAAwBj0B,EAAG8yB,IAIrC1yB,eAACszB,GAAyB,CAAC9c,UAAU,EAAMnQ,UAAWA,EAAUtG,SAC9DO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACkH,KAAKC,KAAI,CAAApH,SACPgL,QAKX,KC5BM+oB,GAA2B,SAAA5lB,GAAAC,aAAA2lB,EAAA5lB,GAAA,IAAAE,EAAAC,aAAAylB,GAAA,SAAAA,IAAA,OAAAvlB,aAAA,KAAAulB,GAAA1lB,EAAAS,MAAA,KAAA3P,UAAA,CAa9B,OAb8B4Q,aAAAgkB,EAAA,EAAA/jB,IAAA,SAAA5N,MAC/B,WACE,IAAMvC,EAAIP,KAAKsQ,MAAM/P,EAGrB,OAFqBP,KAAKsQ,MAAMokB,cAG9B,IAAK,aACH,OAAO/zB,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,6EACnC,IAAK,UACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,0EACnC,QACE,OAAOA,EAAE,0EAEf,KAACk0B,CAAA,CAb8B,CAASpjB,aAiB3BhR,iBAAkB6C,YAAWuxB,KCmJ7Bp0B,qBAAkB6C,aAxJjC,SAAoC5C,GAAyC,IAAvCC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAOrD,EAAQJ,EAARI,SAAU2I,EAAM/I,EAAN+I,OAC3DsrB,EAAU5wB,EAAM2K,OAAOwJ,GACvBmb,EAAYtvB,EAAM2K,OAAO8kB,WACzBxsB,EAAS,2BAAAyI,OAA8B4jB,GACvCra,EAAS,uCAAAvJ,OAA0CklB,GACzDtd,EAAgCC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxChD,EAAQkD,EAAA,GAAEqd,EAAWrd,EAAA,GAE5BhD,EAAyBC,YAAYpa,GAA9B2e,EAA4CrE,YAAAH,EAAA,GAA9B,GACrBoH,EAAoCnH,YAAYqf,IAAzCgB,EAA8DngB,YAAAiH,EAAA,GAArC,GAE5BmZ,EAAkB,YAClBC,EAAgB,YAChBC,EAAwB,YACxBC,EAAgB,YAEpB,OAAQ5rB,GACN,IAAK,eACHyrB,EAAkB,UAClB,MACF,IAAK,WACHC,EAAgB,UAChB,MACF,IAAK,oBACHC,EAAwB,UACxB,MACF,IAAK,WACHC,EAAgB,SAMpB,SAASC,EAAoBC,GAC3BP,GAAY,GAEZC,EAA0B,CACxBzoB,UAAW,CAAE8I,MAAO,CAACgD,GAAIyc,EAAStrB,OAAQ8rB,IAC1C9f,eAAgB,CACd,CAACC,MAAOme,GAA2BrnB,UAAW7D,GAAyB8qB,OAE1E9d,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,qDAAuD,CACpEmV,SAAUF,KAAMG,SAASC,eAEd,iBAAXvM,IACFpQ,QAAQC,IAAImQ,GACZurB,GAAY,GAEhB,IAAG/e,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACrC,iBAAX6G,IACFpQ,QAAQC,IAAImQ,GACZurB,GAAY,GAEhB,GACJ,CAEA,OACEj0B,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAkB4G,SAAU5G,EAAE,oCAAoCG,SACtFO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCO,gBAACoE,IAAI,CAACtC,GAAIiE,EACJnG,UAAU,yBAAwBH,SAAA,CACtCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAAe,IAAExG,EAAE,mBAG5CI,eAAC2E,KAAM,CACLzE,UAAU,OACV4E,MAAM,YACNkU,cAAc,IACd3W,KAAK,iBACLoO,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAASgV,EAC7B,EAACtY,SAEDH,EAAE,oBAELU,gBAACoE,IAAI,CAACtC,GAAE,2BAAA0M,OAA6B4jB,EAAS,UAAA5jB,OAASklB,GACjD9zB,UAAU,oBAAmBH,SAAA,CACjCC,eAACmG,KAAI,CAACC,KAAK,WAAW,IAAExG,EAAE,wBAI9B8I,EACY,iBAAXA,EACC1I,eAAC2E,KAAOsB,KAAI,CAAAlG,SACVC,eAAC2E,KAAM,CACLtC,KAAK,OACLqR,UAAU,EACV5O,MAAOqvB,EACP1jB,QAAS,kBAAM8jB,EAAoB,eAAe,EAACx0B,SAElDH,EAAE,iDAIPI,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAI5G,UAAU,QAAOH,SAAA,CAGjCO,gBAACqE,KAAOsB,KAAI,CAAC/F,UAAU,cAAaH,SAAA,CAClCC,eAAC2E,KAAM,CACLtC,KAAK,OACLqR,SAAUA,EACV5O,MAAOqvB,EACP1jB,QAAS,kBAAM8jB,EAAoB,eAAe,EAACx0B,SAElDH,EAAE,+CAELI,eAAC2E,KAAM,CACLtC,KAAK,QACLqR,SAAUA,EACV5O,MAAOsvB,EACP3jB,QAAS,kBAAM8jB,EAAoB,WAAW,EAACx0B,SAE9CH,EAAE,2CAELI,eAAC2E,KAAM,CACLtC,KAAK,QACLqR,SAAUA,EACV5O,MAAOuvB,EACP5jB,QAAS,kBAAM8jB,EAAoB,oBAAoB,EAACx0B,SAEvDH,EAAE,oDAELI,eAAC2E,KAAM,CACLtC,KAAK,IACLqR,SAAUA,EACV5O,MAAOwvB,EACP7jB,QAAS,kBAAM8jB,EAAoB,WAAW,EAACx0B,SAE9CH,EAAE,8CAGPI,eAAA,MAAIE,UAAU,mBAAkBH,SAAEH,EAAE,yBAGxC,GAELG,QAKX,KCuHeL,qBAAkB6C,aA9QjC,SAAgC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OACvCqxB,EAAchxB,qBAAWxC,IACzB6Z,EAAa2Z,EAAY3Z,WAEzBsX,EAAiBtX,EAAa,IADjB2Z,EAAYtpB,iBAEzB6oB,EAAU5wB,EAAM2K,OAAOwJ,GAE7BjU,EAAiCC,YAASwvB,GAAyB,CACjEtnB,UAAW,CAAE8L,GAAIyc,GACjB5iB,aAAc,MAFRxP,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAOxB,GAAIF,EAAS,OACX5B,eAAC00B,GAA2B,CAAA30B,SAC1BC,eAAA,KAAAD,SAAIH,EAAE,iCAIV,GAAIiC,EAAO,OACT7B,eAAC00B,GAA2B,CAAA30B,SAC1BC,eAAA,KAAAD,SAAIH,EAAE,2CAIV,IAAM+0B,EAAsB7yB,EAAK6yB,oBAGjC,OAFAr8B,QAAQC,IAAIo8B,GAGVr0B,gBAACo0B,GAA2B,CAAChsB,OAAQisB,EAAoBjsB,OAAO3I,SAAA,CAC9DO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,0CAA0CG,SACvDC,eAACiS,KAAK,CAAC7F,OAAK,EAAArM,SACVO,gBAAC2R,KAAM9K,KAAI,CAAApH,SAAA,CACTO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPH,EAAE,kBAELI,eAACiS,KAAMxM,IAAG,CAAA1F,SACP40B,EAAoBvuB,UAGzB9F,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPH,EAAE,0DAELI,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC8zB,GAA2B,CAACC,aAAcY,EAAoBjC,iBAGnEpyB,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPH,EAAE,4CAELI,eAACiS,KAAMxM,IAAG,CAAA1F,SAEL40B,EAAoBjB,4BACnBpzB,gBAAA,OAAAP,SAAA,CACG40B,EAAoBjB,4BAA4BttB,KACjDpG,eAAA,OAAAD,SAAKO,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAE40B,EAAoBlgB,KAAK,MAAIkgB,EAAoBngB,cAEvF5U,EAAE,yBAIVU,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPH,EAAE,4CAELI,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOgpB,EAAoBlB,eAAe7nB,OAAOkP,QAGtDxa,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPH,EAAE,kDAELI,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACivB,GAAY,CAAC9sB,MAAOwyB,EAAoBC,mCAOrD50B,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,4CAA4CG,SACzDO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPH,EAAE,mBAELI,eAACiS,KAAMxM,IAAG,CAAA1F,SACP40B,EAAoBzP,kBAGzB5kB,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPH,EAAE,mBAELI,eAACiS,KAAMxM,IAAG,CAAA1F,SACP40B,EAAoBE,uBAM/B70B,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,6CAA6CG,SAC1DC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACiG,KAAI,CAAC0tB,UAAQ,EAAA5zB,SACb40B,EAAoBG,QAAQ1rB,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC5CjJ,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CACP4L,KAAOpC,EAAKipB,WAAW5mB,OAAOwmB,GAAgB,IAACpyB,eAAA,SAChDA,eAAA,SAAAD,SAAQwJ,EAAKub,SAAWvb,EAAKub,QAAQC,aAC3B,eAOpB4P,EAAoBjL,KACpB1pB,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACbC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,0CAA0CG,SACvDC,eAACkH,KAAKC,KAAI,CAAApH,SACP40B,EAAoBjL,aAK/B,GACF1pB,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,2CAA2CG,SACxDC,eAAA,SAAAD,SACEO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SACbH,EAAE,kBAELI,eAACiS,KAAMC,UAAS,CAAAnS,SACbH,EAAE,qBAELI,eAACiS,KAAMC,UAAS,CAAAnS,SACbH,EAAE,4CAELI,eAACiS,KAAMC,UAAS,CAAAnS,SACbH,EAAE,4CAELI,eAACiS,KAAMC,UAAS,CAAAnS,SACbH,EAAE,yBAELI,eAACiS,KAAMC,UAAS,CAAAnS,SACbH,EAAE,qCAELI,eAACiS,KAAMC,UAAS,CAAAnS,SACbH,EAAE,oBAELI,eAACiS,KAAMC,UAAS,CAAAnS,SACbH,EAAE,0CAITI,eAACiS,KAAM9K,KAAI,CAAApH,SACR40B,EAAoB1yB,MAAMmH,MAAMkD,KAAI,SAAAQ,EAAW0a,GAAK,IAAbje,EAAIuD,EAAJvD,KAAI,OAC1CjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SAAEynB,EAAQ,IACpBxnB,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKub,SACJ9kB,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyBvF,EAAKub,QAAQvN,GAAE,YAAWxX,SACxDwJ,EAAKub,QAAQC,aAIpB/kB,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKwrB,gBAERz0B,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKyrB,cAAc,IAAGzrB,EAAK0rB,WAAcj1B,eAAA,OAAAD,SAAMwJ,EAAK0rB,aAAoB,MAE3Ej1B,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKV,cAER7I,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK2rB,WAERl1B,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK0iB,gBAERjsB,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKuc,eACL9lB,eAAC0E,IAAI,CAACtC,GAAE,0BAAA0M,OAA4BvF,EAAKuc,eAAevO,IAAKxX,SAC1DwJ,EAAKuc,eAAepB,gBACb,OAEJ,mBAoEhC,KC9RayQ,GAAgC3iB,OAAaC,MAAM,CAC5DrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACd6zB,cAAejhB,OACZG,SAAS/S,YAAE,uBACd8pB,KAAMlX,OACNoiB,mBAAoBpiB,SAGX4iB,GAAgC5iB,OAAaC,MAAM,CAC9DrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACd6zB,cAAejhB,OACZG,SAAS/S,YAAE,uBACd8zB,4BAA6BlhB,OAC5BG,SAAS/S,YAAE,uBACZ6U,KAAMjC,OACHG,WACAC,WACAC,IAAI,KACJC,IAAI,MACP0B,MAAOhC,OACJG,WACAC,WACAC,IAAI,GACJC,IAAI,IACP4W,KAAMlX,OACNoiB,mBAAoBpiB,SAGT6iB,GAA4B7iB,OAAaC,MAAM,CAC1DrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBCwGDF,iBAAkB6C,aA1HS,SAAH5C,GAAA,IACnCC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAc4M,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAe5M,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQsL,EAAShgB,EAATggB,UAAWtZ,EAAS1G,EAAT0G,UAASivB,EAAA31B,EAAE41B,cAAM,IAAAD,GAAMA,EAAAE,EAAA71B,EAAE81B,gBAAQ,IAAAD,GAAMA,EAAA,OAE9Hl1B,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAGvDq1B,EACAv1B,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0CAA0CG,SAAA,CAC7DC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOof,cACjB3X,SAAU,SAAC2X,GACT5T,EAAc,gBAAiB4T,GAC/B7T,EAAgB,iBAAiB,EACnC,EACA5D,OAAQ,kBAAM4D,EAAgB,iBAAiB,EAAK,EACpDxD,gBAAiBxc,EAAE,MAErBI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,OAAOvT,UAAU,0BAGhE,MAGJq1B,GAAUE,EACVn1B,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,8BACLlG,UAAY+S,EAAOygB,4BAA+B,0BAA4B,eAC9EngB,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU+V,8BAA8BtsB,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACxDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,8BAA8BqN,UAAU,OAAOvT,UAAU,0BAGhFF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,OACLlG,UAAY+S,EAAOwB,KAAQ,0BAA4B,eACvDlB,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAGzDF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,QACLlG,UAAY+S,EAAOuB,MAAS,0BAA4B,eACxDjB,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,6BAI1D,GAEJF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,WACLmP,UAAU,WACVrN,KAAK,OACLlG,UAAY+S,EAAOyW,KAAQ,0BAA4B,eACvDnW,aAAa,QACpBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,4BAIzDq1B,EACAv1B,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,qBACLwnB,QAASvZ,EAAOugB,qBAChB50B,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,qDAEjDI,eAACwT,KAAY,CAACpN,KAAK,qBAAqBqN,UAAU,eAItD,MAGNnT,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SACTH,EAAE,2BAIR,KCcIF,qBAAkB6C,aAtIjC,SAAyC5C,GAAyB,IAoB5Dg2B,EApBsC/1B,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAChDsvB,EAAYtvB,EAAM2K,OAAO8kB,WACzBxsB,EAAS,2BAAAyI,OAA8B4jB,EAAS,aAChDqB,EAAe3wB,EAAM2K,OAAO6nB,cAC5B1lB,EAAYtQ,EAAE,mCAGhBwkB,GAAW,EACXqR,GAAW,EACf,OAAQ1B,GACN,IAAK,WACH3P,GAAW,EACX,MACF,IAAK,WACHqR,GAAW,EAOf,OAAQ/C,GACN,IAAK,aACHiD,EAAoB,aACpB,MACF,IAAK,UACHA,EAAoB,UAMxB,IAAAryB,EAAiCC,YAASyvB,GAAkB,CAAEvnB,UAAW,CACvEkqB,kBAAmBA,KADb/zB,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAiCC,YAAYof,IAAtC4C,EAAwD9hB,YAAAH,EAAA,GAAlC,GAG7B,GAAIhS,EAAS,OACX5B,eAACszB,GAAyB,CAACV,SAAS,EAAMvsB,UAAWA,EAAUtG,SAC7DC,eAACkH,KAAI,CAACgJ,UAAWA,EAAUnQ,SACzBC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACszB,GAAyB,CAACV,SAAS,EAAMvsB,UAAWA,EAAUtG,SAC7DC,eAACkH,KAAI,CAACgJ,UAAWA,EAAUnQ,SACzBC,eAAA,KAAAD,SAAIH,EAAE,4DAKZ,IAGIk2B,EAHEnW,EAAY7d,EAEdmS,EAAgB,CAAE7N,KAAM,GAAIyC,YAAa,GAAI4qB,cAAe,IAAIvwB,MAUpE,MARqB,aAAjB6wB,GACF9f,EAAcQ,MAAO,IAAIvR,MAAOqC,cAChC0O,EAAcO,OAAQ,IAAItR,MAAOgR,WAAa,EAC9C4hB,EAAYV,IAEZU,EAAYX,GAIZn1B,eAACszB,GAAyB,CAAC9c,UAAU,EAAMnQ,UAAWA,EAAUtG,SAC9DO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACgU,KAAM,CACLC,cAAeA,EACfE,iBAAkB2hB,EAClB1hB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACfC,EAAQ,CACRme,UAAWA,EAAUjrB,cACrBrB,KAAMiO,EAAOjO,KACbqtB,cAAenV,GAAejK,EAAOof,eACrC5qB,YAAawL,EAAOxL,YACpB6gB,KAAMrV,EAAOqV,KACbkL,mBAAoBvgB,EAAOugB,oBAGV,aAAjBb,IACFxf,EAAME,KAAOkD,SAAStD,EAAOI,MAC7BF,EAAMC,MAAQmD,SAAStD,EAAOG,OAC9BD,EAAMmf,4BAA8Brf,EAAOqf,6BAG7CmC,EAAuB,CACrBpqB,UAAW,CAAE8I,MAAOA,GACpBG,eAAgB,CACd,CAACC,MAAOme,GAA2BrnB,UAAW7D,GAAyB8qB,OAE1E9d,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB,IAAMyV,EAAKzV,EAAKi0B,0BAA0BpB,oBAAoBpd,GAC9DlU,EAAQnB,KAAK,2BAAD4M,OAA4B4jB,EAAS,UAAA5jB,OAASyI,IAC1D1C,KAAMC,QAASlV,EAAE,6CAA+C,CAC5DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQwL,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAe,OAC5D5f,eAACg2B,GAAiC,CAChCrW,UAAWA,EACX4V,QAAQ,EACRnR,SAAUA,EACVqR,SAAUA,EACVziB,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACfxL,OAAQA,EACRpB,OAAQA,EACR5M,UAAWA,GACX,QAMhB,KC/Ce3G,qBAAkB6C,aArFjC,SAA0C5C,GAAyB,IAAtBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OACjDsvB,EAAYtvB,EAAM2K,OAAO8kB,WACzBmB,EAAU5wB,EAAM2K,OAAOwJ,GACvBlR,EAAS,2BAAAyI,OAA8B4jB,EAAS,UAAA5jB,OAASklB,GACzD9jB,EAAYtQ,EAAE,oCAEpB0D,EAAiCC,YAASwvB,GAAyB,CACjEtnB,UAAW,CAAE8L,GAAIyc,KADXpyB,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAoCC,YAAYqf,IAAzCgB,EAA8DngB,YAAAH,EAAA,GAArC,GAGhC,GAAIhS,EAAS,OACX5B,eAACszB,GAAyB,CAACV,SAAS,EAAOvsB,UAAWA,EAAUtG,SAC9DC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMtC,GAAIa,EAAO,OACT7B,eAACszB,GAAyB,CAACV,SAAS,EAAMvsB,UAAWA,EAAUtG,SAC7DC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAAA,KAAAD,SAAIH,EAAE,4DAKZ,IAAMq2B,EAAcn0B,EAAK6yB,oBAEzB,OACE30B,eAACszB,GAAyB,CAAC9c,UAAU,EAAMnQ,UAAWA,EAAUtG,SAC9DO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACgU,KAAM,CACLC,cAAe,CAAE7N,KAAM6vB,EAAY7vB,KAAOsjB,KAAMuM,EAAYvM,MAC5DvV,iBAAkBkhB,GAClBjhB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACfC,EAAQ,CACRgD,GAAIyc,EACJ5tB,KAAMiO,EAAOjO,KACbsjB,KAAMrV,EAAOqV,MAGjBwK,EAA0B,CACxBzoB,UAAW,CAAE8I,MAAOA,GACpBG,eAAgB,CACd,CAACC,MAAOme,GAA2BrnB,UAAW7D,GAAyB8qB,OAE1E9d,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,8CAAgD,CAC7DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQwL,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAe,OAC5D5f,eAACg2B,GAAiC,CAChCT,QAAQ,EACRviB,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACfxL,OAAQA,EACRpB,OAAQA,EACR5M,UAAWA,GACX,QAMhB,KCpGO,SAASuB,KACd,IAAIsuB,EAAc73B,aAAa0E,QAAQxE,EAAKnD,+CACxB,OAAhB86B,IACFA,EAAc,SAGhB,IAAIjuB,EAAY,CACd4O,SAA2B,SAAhBqf,GAKb,OAFA59B,QAAQC,IAAI0P,GAELA,CACT,CCkCevI,I,SAAAA,iBAAkB6C,aAlCjC,SAA0C5C,GAAyD,IAAvDC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQ4yB,EAAAhzB,EAAEizB,eAAO,IAAAD,GAAMA,EAAApc,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EAC7F,OACEvW,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCO,gBAAA,OAAKJ,UAAW,sBAAsBH,SAAA,CAClC6yB,EACA5yB,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,8BAA6BnK,SAC1DC,eAACyW,GAAS,CAACL,OAAQ,0CAEnB,GAEFI,EACAxW,eAAC0N,GAAoB,CAACzD,WAAW,OACXC,SAAS,8BAA6BnK,SAC1DC,eAAC6G,GAAU,CAACR,UAAU,sCAEtB,QAIRrG,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KC7Cao2B,GAAqC78B,YAAGC,QAAAC,YAAA,meAsBxC48B,GAAmC98B,YAAGI,QAAAF,YAAA,2KAYtC68B,GAAiC/8B,YAAGK,QAAAH,YAAA,8PCqTlCkG,I,GAAAA,iBAAkB6C,aA/TjC,SAAsC5C,GAAgB,IAAdC,EAACD,EAADC,EACtC0D,GADgD3D,EAAP0D,QACYE,YAAS4yB,GAAoC,CAChG1qB,UAAW7D,QADLhG,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAAW0F,EAAOzT,EAAPyT,QAGzCnD,EAAsCC,YAAYwiB,IAA3CC,EAA0EviB,YAAAH,EAAA,GAA/C,GAG5BqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAqF,SAA7EzG,aAAa0E,QAAQxE,EAAKnD,+CACxC,UAAW,YACLyJ,KAAK,KACL4L,QAAS,WACPpS,aAAaC,QAAQC,EAAKnD,+CAA+C,GACzE2b,EAAQnP,KACV,EACP7H,SACEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAqF,SAA7EzG,aAAa0E,QAAQxE,EAAKnD,+CAA6D,UAAW,YAC1GyJ,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WACPpS,aAAaC,QAAQC,EAAKnD,+CAA+C,GACzE2b,EAAQnP,KACV,EACP7H,SACEH,EAAE,wBAKP,GAAIgC,EAAS,OACX5B,eAACu2B,GAAiC,CAAC3D,SAAS,EAAK7yB,SAC/CC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0CAA0CG,SAClEC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACu2B,GAAiC,CAAC3D,SAAS,EAAK7yB,SAC/CC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0CAA0CG,SAClEC,eAAA,KAAAD,SAAIH,EAAE,wDAKZ,IAAI42B,EAA2B10B,EAAK4zB,8BAEpC,OAAKc,EAAyBptB,MAAMjK,OAelCa,eAACu2B,GAAiC,CAAC3D,SAAS,EAAK7yB,SAC/CC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0CACxBuQ,cAAe8G,EACfvH,SAAU8mB,EAAyB9mB,SACnCY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO+kB,EAAyB9mB,SAASgC,WAE3CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB6jB,8BAA8BtsB,MACzDsG,EAAWmC,EAAgB6jB,8BAA8BhmB,SAE/D,OAAOoC,EAAS3S,OACZ,CAGEu2B,8BAA+B,CAC7B3jB,WAAYH,EAAe8jB,8BAA8B3jB,WACzD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe8jB,8BAA8BtsB,OAAK4I,aAAKF,IACnEpC,aAGJkC,CACJ,GAEN,EAAE7R,SACAO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,0DACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRy2B,EAAyBptB,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACzCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC8zB,GAA2B,CAACC,aAAcxqB,EAAKosB,qBADlC9oB,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,wCAAA0M,OAA0CvF,EAAKgO,IAAKxX,SAC1DC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACT6Q,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACd+e,EAA4B,CAAE7qB,UAAW,CACvC8I,MAAO,CACPgD,KACAV,UAAWtN,EAAKsN,WAEjBnC,eAAgB,CACf,CAACC,MAAOwhB,GAAoC1qB,UAAW7D,SACvDgN,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACHvL,EAAKsN,SAAYjX,EAAE,sBAAuBA,EAAE,oBAAqB,CAChEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACpD,GACF,EAAE9B,SACJC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,iBAvCbyG,eA0CJ,aA9FtB7M,eAACu2B,GAAiC,CAAC3D,SAAS,EAAK7yB,SAC/CC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0CACZuQ,cAAe8G,EAAclX,SACzCC,eAAA,KAAAD,SACK1B,aAAa0E,QAA+D,SAAvDxE,EAAKnD,+CACzBwE,EAAE,kDACFA,EAAE,oDA+FhB,KClGeF,iBAAkB6C,aA/DO,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAgB5M,GAAF1G,EAAN0U,OAAiB1U,EAAT0G,WAASivB,EAAA31B,EAAE41B,cAAM,IAAAD,GAAMA,EAAA,OAC1Gh1B,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,4BAIzDq1B,EACAv1B,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,wDAAwDG,SAAA,CAC3EO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,oBACLlG,UAAY+S,EAAO0iB,kBAAqB,0BAA4B,eACpEpiB,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,aAAYpC,SAAaH,EAAE,uBAATiN,gBAChC7M,eAAA,UAAQmC,MAAM,UAASpC,SAAaH,EAAE,oBAATiN,mBAE/B7M,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,4BAItE,GAEJF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,+BAKpEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SACTH,EAAE,2BAIR,KC3EEw1B,GAAgC5iB,OAAaC,MAAM,CAC5DrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdiJ,YAAa2J,SCYXikB,GAA6Bn9B,YAAGC,QAAAC,YAAA,wOA+DvBkG,I,GAAAA,iBAAkB6C,aArDjC,SAAuC5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACrCgD,EAAY,kCAClBuN,EAAyCC,YAAY4iB,GAA4B,CAC/EzF,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrCqwB,EAEL3iB,YAAAH,EAAA,GAFmC,GAIrC,OACE5T,eAACu2B,GAAiC,CAAC/f,UAAU,EAAKzW,SAChDO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,kDAEjBI,eAACgU,KAAM,CACLC,cAAe,CAAE7N,KAAM,GAAIuvB,kBAAmB,aAAc9sB,YAAa,IACzEsL,iBAAkBihB,GAClBhhB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBoiB,EAA+B,CAAEjrB,UAAW,CAC1C8I,MAAO,CACLnO,KAAMiO,EAAOjO,KACbuvB,kBAAmBthB,EAAOshB,kBAC1B9sB,YAAawL,EAAOxL,cAErB6L,eAAgB,CACf,CAACC,MAAOwhB,GAAoC1qB,UAAW7D,SAE1DgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,sDAAwD,CACrEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACpBjT,eAAC22B,GAA+B,CAC9BpB,QAAQ,EACRviB,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,GACX,QAMhB,KC5DMuwB,GAAgCt9B,YAAGC,QAAAC,YAAA,yOAoG1BkG,I,MAAAA,iBAAkB6C,aA1FjC,SAAwC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAE/CyzB,EAAyBzzB,EAAM2K,OAAOwJ,GAE5CjU,EAAiCC,YAAS6yB,GAAkC,CAC1E3qB,UAAW,CAAC,GAAMorB,KADZj1B,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA4CC,YAAY+iB,IAAjDE,EAA+E/iB,YAAAH,EAAA,GAA9C,GAGxC,GAAIhS,EAAS,OACX5B,eAACu2B,GAAiC,CAAC/f,UAAU,EAAKzW,SAChDC,eAACkH,KAAI,CAACgJ,UAAWtQ,EAAE,0CAA0CG,SAC3DC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,UAMxB,GAAIa,EAAO,OACT7B,eAACu2B,GAAiC,CAAC/f,UAAU,EAAKzW,SAChDC,eAACkH,KAAI,CAACgJ,UAAWtQ,EAAE,0CAA0CG,SAC3DC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,0DAMd,IAAMiY,EAAc/V,EAAK4xB,4BAEzB,OACE1zB,eAACu2B,GAAiC,CAAC/f,UAAU,EAAKzW,SAChDO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,mDAEfI,eAACgU,KAAM,CACLC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClBuvB,kBAAmB9d,EAAY8d,kBAC/B9sB,YAAagP,EAAYhP,aAE3BsL,iBAAkBihB,GAClBhhB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZyiB,EAAkC,CAAErrB,UAAW,CAC7C8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,KACbuvB,kBAAmBthB,EAAOshB,kBAC1B9sB,YAAawL,EAAOxL,cAErB6L,eAAgB,CACjB,CAACC,MAAOwhB,GAAoC1qB,UAAW7D,SAExDgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,uDAAyD,CACxEmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC5BrU,eAAC22B,GAA+B,CAC9B3jB,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRhO,UA/EE,mCAgFF,QAOlB,KCpHa0wB,GAA0Bz9B,YAAGC,QAAAC,YAAA,siCA0D7Bw9B,GAAe19B,YAAGI,QAAAF,YAAA,6KCDhBkG,iBAAkB6C,aA1CJ,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAiB1U,EAAT0G,UAAS,OACxErG,eAACkT,KAAM,CAAAnT,SACLC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,kBAAkBG,SAC/BC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACfO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAACgT,KAAK,CAACG,UAAU,SACVrN,KAAK,SACLlG,UAAY+S,EAAOvK,OAAU,0BAA4B,eACzD6K,aAAa,MAAKxT,SAAA,CACvBC,eAAA,UAAQmC,MAAO,WAAWpC,SAAaH,EAAE,qCAATiN,gBAChC7M,eAAA,UAAQmC,MAAO,mBAAmBpC,SAAaH,EAAE,6CAATiN,gBACxC7M,eAAA,UAAQmC,MAAO,OAAOpC,SAAaH,EAAE,iCAATiN,gBAC5B7M,eAAA,UAAQmC,MAAO,YAAYpC,SAAaH,EAAE,sCAATiN,gBACjC7M,eAAA,UAAQmC,MAAO,YAAYpC,SAAaH,EAAE,sCAATiN,gBACjC7M,eAAA,UAAQmC,MAAO,YAAYpC,SAAaH,EAAE,sCAATiN,mBAEnC7M,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,wBAEzDI,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAC1BC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAE,IACrBxG,EAAE,oEAGPI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAChBC,eAAC2E,KAAM,CACDzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,8BAMR,KClBIF,qBAAkB6C,aAvBjC,SAA6B5C,GAA6C,IAAzCC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAGlD,OAHmEJ,EAAPoX,QAI1D/W,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC6G,GAAU,CAACR,UARN,wBAWVrG,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KC+KeL,qBAAkB6C,aAvLjC,SAAyB5C,GAAiC,IAA/BC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAO4a,EAAQre,EAARqe,SAC7ByW,GAD8C90B,EAAP0D,QACzBI,qBAAWxC,KAGzBmxB,EAFaqC,EAAY3Z,WAEK,IADjB2Z,EAAYtpB,iBAGzBoM,EAAKnU,EAAM2K,OAAOwJ,GAGxBjU,EAAiCC,YAASwzB,GAAyB,CACjEtrB,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAsBC,YAAYmjB,IAA3BC,EAAwCljB,YAAAH,EAAA,GAA7B,GAIlB,GAAIhS,EAAS,OACX5B,eAACk3B,GAAoB,CAAAn3B,SACnBC,eAAA,KAAAD,SAAIH,EAAE,iCAIV,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEV7B,eAACk3B,GAAoB,CAAAn3B,SACnBC,eAAA,KAAAD,SAAIH,EAAE,gCAKZ,IAAMu3B,EAAQr1B,EAAKs1B,aAInB,OAFA/4B,aAAaC,QAAQC,EAAKvD,6BAA8BgjB,EAASoH,UAG/D9kB,gBAAC42B,GAAoB,CAAAn3B,SAAA,CAEnBO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,+BAA+BG,SAC5CC,eAACiS,KAAK,CAAC7F,OAAK,EAAArM,SACVO,gBAAC2R,KAAM9K,KAAI,CAAApH,SAAA,CACTO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMC,UAAS,CAAAnS,SAAA,CAAEH,EAAE,iBAAiB,QACrCI,eAACiS,KAAMxM,IAAG,CAAA1F,SAAEo3B,EAAMhF,iBAEpB7xB,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMxM,IAAG,CAAA1F,SAAEo3B,EAAMrS,SAAWqS,EAAMrS,QAAQC,cAE7CzkB,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,8BACpBI,eAACiS,KAAMxM,IAAG,CAAA1F,SAAE4L,KAAOwrB,EAAM3E,WAAW5mB,OAAOwmB,QAE7C9xB,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMxM,IAAG,CAAA1F,SACNo3B,EAAMrR,gBACN9lB,eAAC0E,IAAI,CAACtC,GAAE,0BAAA0M,OAA4BqoB,EAAMrR,eAAevO,IAAKxX,SAC3Do3B,EAAMrR,eAAepB,8BAUtC1kB,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACK,cAAjBo3B,EAAMzuB,OACN1I,eAACgU,KAAM,CACLC,cAAe,CACbvL,OAAQyuB,EAAMzuB,QAGhB0L,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ4iB,EAAY,CAAExrB,UAAW,CACvB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjB7O,OAAQ2L,EAAO3L,SAEhBgM,eAAgB,CACf,CAACC,MAAOqd,OAEXpd,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,qCAAuC,CACpDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACq3B,GAAoB,CACnBrkB,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRhO,UAtGE,mBAuGF,IAINrG,eAACkH,KAAI,CAACX,MAAO3G,EAAE,kBAAkBG,SAC/BO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,QAAME,UAAU,aAAYH,SAACC,eAACmG,KAAI,CAACC,KAAK,YAAiB,IAAExG,EAAE,+CAQvEI,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,iBAAiBG,SAC9BO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,yBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,iBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,SAGpBlS,eAACiS,KAAM9K,KAAI,CAAApH,SACPo3B,EAAMl1B,MAAMmH,MAAMkD,KAAI,SAAA0d,GAAA,IAAGzgB,EAAIygB,EAAJzgB,KAAI,OAC7BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKyc,cAERhmB,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKV,cAERvI,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAK4c,SAAS,IAACnmB,eAAA,SACfuJ,EAAK+tB,gBAERt3B,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAK+V,eAAkB/V,EAAK+V,eAAelZ,KAAO,KAEtDpG,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK2b,iBAfMrY,eAiBJ,eASrBsqB,EAAMI,QACPv3B,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,mCAAmCG,SAChDC,eAACkH,KAAKC,KAAI,CAAApH,SACPo3B,EAAMI,gBAID,KAKtB,KCpKe73B,I,eAAAA,iBAAkB6C,aA7BjC,SAAkC5C,GAA4C,IAAzCC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EACvE,OACEvW,eAACiL,GAAW,CAAAlL,SACZC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAW,4BAErBrG,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,uBAAsBnK,SACnDC,eAACyW,GAAS,CAACL,OAAQ,sCAK7BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOb,KCtCay3B,GAA4Bl+B,YAAGC,QAAAC,YAAA,ucAsB/Bi+B,GAA2Bn+B,YAAGI,QAAAF,YAAA,sJAW9Bk+B,GAAqBp+B,YAAGK,QAAAH,YAAA,qOAaxBm+B,GAAwBr+B,YAAGO,QAAAL,YAAA,uNAY3Bo+B,GAAyBt+B,YAAGQ,QAAAN,YAAA,kNCkH1BkG,qBAAkB6C,aAxJjC,SAA8B5C,GAAkB,IAAfC,EAACD,EAADC,EAC/B8W,GADyC/W,EAAP0D,QACJsT,oBAAS,IAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACpB1G,EAAYtQ,EAAE,iCACpB0D,EAAqDC,YAASi0B,GAA2B,CACvF/rB,UAAW,CAAEoL,SAAUA,KADjBjV,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAIvCuC,EAAiCC,YAAY+jB,IAArCC,EAA4D9jB,YAAAH,EAAA,GAAxC,GAEtBqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAIP,GAAIgC,EAAS,OACX5B,eAAC83B,GAAyB,CAAA/3B,SACxBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAAC83B,GAAyB,CAAA/3B,SACxBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,+CAKZ,IAAMm4B,EAAiBj2B,EAAK8oB,sBAG5B,OAAKmN,EAAe3uB,MAAMjK,OAYxBa,eAAC83B,GAAyB,CAAA/3B,SACxBC,eAACiO,GAAW,CAACiC,UAAWA,EACVC,cAAe8G,EACfvH,SAAUqoB,EAAeroB,SACzBY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAOsmB,EAAeroB,SAASgC,WAEjCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB+Y,sBAAsBxhB,MACjDsG,EAAWmC,EAAgB+Y,sBAAsBlb,SAEvD,OAAOoC,EAAS3S,OACZ,CAGEyrB,sBAAuB,CACrB7Y,WAAYH,EAAegZ,sBAAsB7Y,WACjD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAegZ,sBAAsBxhB,OAAK4I,aAAKF,IAC3DpC,aAGJkC,CACN,GAEJ,EAAE7R,SACZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNg4B,EAAe3uB,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC/BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK+N,MADQzK,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC0E,IAAI,CAACtC,GAAE,gCAAA0M,OAAkCvF,EAAKgO,IAAKxX,SAClDC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAIP2J,EAAKyuB,aAAgB,GACrBh4B,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACdsgB,EAAqB,CAAEpsB,UAAW,CAChC8I,MAAO,CACLgD,KACAV,UAAWA,IAEhBnC,eAAgB,CACf,CAACC,MAAO6iB,GAA2B/rB,UAAW,CAAC,SAAYoL,OAC3DjC,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZiX,EAAc,qBAAyB,oBAAqB,CAC3D9B,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,cArCUyG,kBAPzBA,eAgDJ,aAjGxB7M,eAAC83B,GAAyB,CAAA/3B,SACxBC,eAACiO,GAAW,CAACiC,UAAWA,EACVC,cAAe8G,EAAclX,SACzCC,eAAA,KAAAD,SAC2DH,EAAtDiX,EAAwD,wCAA1C,2CAoG3B,KCxKaohB,GAAwBzlB,OAAaC,MAAM,CACpDrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBC8CHF,iBAAkB6C,aAtCA,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAgB5M,GAAF1G,EAAN0U,OAAiB1U,EAAT0G,WAAS,OACrF/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAOqE,KAAQ,0BAA4B,eACvD/D,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAG3DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SACTH,EAAE,2BAIR,KCmBIF,qBAAkB6C,aAhDjC,SAAgC5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC9BgD,EAAY,0BAClBuN,EAA6BC,YAAY6jB,IAAjCQ,EAAoDnkB,YAAAH,EAAA,GAApC,GAExB,OACE5T,eAAC83B,GAAyB,CAACthB,UAAU,EAAKzW,SACxCC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,qCAAqCG,SAClDC,eAACgU,KAAM,CACLC,cAAe,CAAE7N,KAAM,GAAIkR,KAAM,IACjCnD,iBAAkB8jB,GAClB7jB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjB4jB,EAAiB,CAAEzsB,UAAW,CAC5B8I,MAAO,CACLnO,KAAMiO,EAAOjO,KACbkR,KAAMjD,EAAOiD,OAEd5C,eAAgB,CACf,CAACC,MAAO6iB,GAA2B/rB,UAAW,CAAC,UAAY,OAE9DmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,6CAA+C,CAC5DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACpBjT,eAACm4B,GAAwB,CACvBnlB,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,GACX,OAMhB,KCuCe3G,qBAAkB6C,aApFjC,SAAiC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MACxCmU,EAAKnU,EAAM2K,OAAOwJ,GAClBrH,EAAYtQ,EAAE,sCACdyG,EAAY,0BAElB/C,EAAiCC,YAASk0B,GAA0B,CAClEhsB,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAgCC,YAAY8jB,IAApCS,EAA0DrkB,YAAAH,EAAA,GAAvC,GAE3B,GAAIhS,EAAS,OACX5B,eAAC83B,GAAyB,CAACthB,UAAU,EAAKzW,SACxCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAAC83B,GAAyB,CAACthB,UAAU,EAAKzW,SACxCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZ,IAAMiY,EAAc/V,EAAK6oB,qBAIzB,OAHAryB,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAGV9B,eAAC83B,GAAyB,CAACthB,UAAU,EAAKzW,SACxCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClBkR,KAAMO,EAAYP,MAEpBnD,iBAAkB8jB,GAClB7jB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ+jB,EAAoB,CAAE3sB,UAAW,CAC/B8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,KACbkR,KAAMjD,EAAOiD,OAEd5C,eAAgB,CACf,CAACC,MAAO6iB,GAA2B/rB,UAAW,CAAC,UAAY,OAE9DmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,8CAAgD,CAC7DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC5BrU,eAACm4B,GAAwB,CACvBnlB,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,OAMhB,KCnGO,SAASuB,KACd,IAAIK,EAAY,CAAC,EAEbS,EAASrK,aAAa0E,QAAQxE,EAAKpD,8BASvC,OAPE8M,EAAUS,OADRA,QAGiBtJ,EAGrB9G,QAAQC,IAAI0P,GAELA,CACT,CCNA,SAASob,GAAgBlhB,GACvB,IAAImhB,EAAejlB,aAAa0E,QAAQZ,GAGxC,OAFA7J,QAAQC,IAAI+qB,GAERA,IAGFhrB,QAAQC,IAAI,wBACL,GAEX,CAOA,IA2BemH,iBAAkB6C,aAxBL,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAkBmX,GAARpX,EAAP0D,QAAa1D,EAAJmC,KAAanC,EAAPoX,SAAO,OACtD/W,eAAA,OAAKE,UAAU,OAAMH,SAEnBO,gBAAA,UACEJ,UAAS,GAAA4O,OAPK,qBAQd3M,MAAOkhB,GAAgB9kB,EAAKpD,8BAC5B2gB,SAAW,SAAC4B,IAdlB,SAAsC3N,EAAK5N,EAAO4U,GAChD1Y,aAAaC,QAAQyR,EAAK5N,GAC1B4U,EAAQnP,KACV,CAYQoV,CACEze,EAAKpD,6BACLuiB,EAAMrY,OAAOlD,MACb4U,EAEJ,EAAEhX,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,8BAATiN,gBACtB7M,eAAA,UAAQmC,MAAM,QAAOpC,SAAaH,EAAE,gCAATiN,gBAC3B7M,eAAA,UAAQmC,MAAM,OAAMpC,SAAaH,EAAE,+BAATiN,gBAC1B7M,eAAA,UAAQmC,MAAM,WAAUpC,SAAaH,EAAE,mCAATiN,gBAC9B7M,eAAA,UAAQmC,MAAM,WAAUpC,SAAaH,EAAE,mCAATiN,gBAC9B7M,eAAA,UAAQmC,MAAM,YAAWpC,SAAaH,EAAE,oCAATiN,oBAE7B,KCHOnN,I,qBAAAA,iBAAkB6C,aA9BjC,SAA0B5C,GAAsC,IAAlCC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAUgX,EAAOpX,EAAPoX,QAClD,OACE/W,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAACq4B,GAAmB,CAACthB,QAASA,IAC9B/W,eAACkY,GAAY,CAACH,IAAI,yBAAyB7X,UAAU,SACrDF,eAAC0E,IAAI,CAACtC,GAAG,yBAAwBrC,SAC/BC,eAAC2E,KAAM,CACLG,MAAM,YACNzC,KAAK,SAAQtC,SAEZH,EAAE,2BAKXI,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCpCMu4B,GAAkB,SAAApqB,GAAAC,aAAAmqB,EAAApqB,GAAA,IAAAE,EAAAC,aAAAiqB,GAAA,SAAAA,IAAA,OAAA/pB,aAAA,KAAA+pB,GAAAlqB,EAAAS,MAAA,KAAA3P,UAAA,CAqBrB,OArBqB4Q,aAAAwoB,EAAA,EAAAvoB,IAAA,SAAA5N,MACtB,WACE,IAAMvC,EAAIP,KAAKsQ,MAAM/P,EAGrB,OAFeP,KAAKsQ,MAAMjH,QAGxB,IAAK,MACH,OAAO1I,eAACuI,KAAK,CAACzD,MAAM,YAAW/E,SAAEH,EAAE,+BACrC,IAAK,QACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,YAAW/E,SAAEH,EAAE,iCACrC,IAAK,OACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,gCACnC,IAAK,WACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,oCACnC,IAAK,WACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,SAAQ/E,SAAEH,EAAE,oCAClC,IAAK,YACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,qCACnC,QACE,OAAOA,EAAE,mCAEf,KAAC04B,CAAA,CArBqB,CAAS5nB,aAyBlBhR,iBAAkB6C,YAAW+1B,KChC/BC,GAAmBj/B,YAAGC,QAAAC,YAAA,wtBAmCtBg/B,GAAkBl/B,YAAGI,QAAAF,YAAA,2hEA8GrBi/B,GAAen/B,YAAGK,QAAAH,YAAA,8LAWlBk/B,GAAuBp/B,YAAGO,QAAAL,YAAA,4IAS1Bm/B,GAAoBr/B,YAAGQ,QAAAN,YAAA,2UAmBvBo/B,GAAoBt/B,YAAGU,QAAAR,YAAA,2UAmBvBq/B,GAAoBv/B,YAAGY,QAAAV,YAAA,wJCzFrBkG,qBAAkB6C,aA/FjC,SAA0B5C,GAAsD,IAApDC,EAACD,EAADC,EAAmBk5B,GAATn5B,EAAP0D,QAAc1D,EAALyD,MAAazD,EAANm5B,QAAMvU,EAAA5kB,EAAEob,uBAAe,IAAAwJ,GAAMA,EAEpEzJ,EADcrX,qBAAWxC,IACA6Z,WAE/BlH,EAA+BC,YAAY6kB,IAAnCK,EAAwDhlB,YAAAH,EAAA,GAAtC,GAE1B,OACEtT,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACRC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBU,gBAAC2R,KAAMC,UAAS,CAAAnS,SAAA,CAAEH,EAAE,+BAA+B,MAAIA,EAAE,6BACxDmb,GAAmB/a,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,6BACxCU,gBAAC2R,KAAMC,UAAS,CAAAnS,SAAA,CAAEH,EAAE,uBAAuB,MAAIA,EAAE,gCACjDI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,MANFrF,kBASlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACR+4B,EAAO1vB,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACvBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACRC,eAACs4B,GAAkB,CAAC5vB,OAAQa,EAAKb,SAAU,IAAC1I,eAAA,SAC1CuJ,EAAKkb,WAAa1J,GAClB/a,eAAC0E,IAAI,CAACtC,GAAI,kBAAoBmH,EAAKkb,SAASlN,GAAK,QAAQxX,SACvDO,gBAAA,SAAAP,SAAA,CAAOC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAEmD,EAAKkb,SAASre,YAJjCyG,gBAQhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACRC,eAAC0E,IAAI,CAACtC,GAAI,wBAA0BmH,EAAKgO,GAAGxX,SACzCwJ,EAAKyvB,cACDh5B,eAAA,SACPA,eAAC2kB,KAAKC,MAAK,CAAC9f,MAAM,OAAM/E,SAAEwJ,EAAK4R,QAAQ0J,MAAM,QAJ/BhY,gBAMfkO,GACCza,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACNwJ,EAAKub,SACLxkB,gBAACoE,IAAI,CAACtC,GAAI,uBAAyBmH,EAAKub,QAAQvN,GAAK,WAAWxX,SAAA,CAC9DC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAEmD,EAAKub,QAAQC,SAAS,IAAC/kB,eAAA,YAG/CuJ,EAAKkb,UACLzkB,eAAC0E,IAAI,CAACtC,GAAI,kBAAoBmH,EAAKkb,SAASlN,GAAK,QAAQxX,SACvDO,gBAAA,SAAAP,SAAA,CAAOC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAEmD,EAAKkb,SAASre,YARjCyG,gBAalBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACP4L,KAAOpC,EAAKyb,UAAUpZ,OAAOkP,GAAY,IAAC9a,eAAA,SAC1C2L,KAAOpC,EAAK0vB,YAAYrtB,OAAOkP,KAFlBjO,gBAIhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK2b,cADQrY,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAI,wBAA0BmH,EAAKgO,GAAGxX,SAC1CC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,qCACduZ,eAAgBnZ,eAAA,KAAAD,SAAIwJ,EAAKyvB,cACzB5f,WAAYxZ,EAAE,0BACdgb,eAAgBme,EAChBzf,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAACC,MAAO4jB,GAAkB9sB,UAAW7D,SAI/C,EAAE7H,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBA7BfyG,kBApCzBA,eAoEN,QAKtB,KCfenN,qBAAkB6C,aAlFjC,SAAsB5C,GAA4B,IAAzBC,EAACD,EAADC,EAAGoe,EAAQre,EAARqe,SAAiBre,EAAP0D,QAEpChF,aAAaC,QAAQC,EAAKrD,2BAA4B8iB,EAASoH,UAE/D/mB,aAAaC,QAAQC,EAAKxC,iCAAkCiiB,EAASoH,UAErE,IAAA9hB,EAAqDC,YAASg1B,GAAkB,CAC9E9sB,UAAW7D,KACXiE,YAAa,iBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAMvC,GAAIzP,EAAS,OACX5B,eAACk5B,GAAiB,CAACniB,QAASA,EAAQhX,SAClCC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,wBAAwBG,SAChDC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACk5B,GAAiB,CAACniB,QAASA,EAAQhX,SAClCC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,wBAAwBG,SAChDC,eAAA,KAAAD,SAAIH,EAAE,sCAKZ,IAAMk5B,EAASh3B,EAAKq3B,cAGpB,OAAKL,EAAO1vB,MAAMjK,OAWhBa,eAACk5B,GAAiB,CAACniB,QAASA,EAAQhX,SAClCC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,wBACb0Q,aAAa,EACbZ,SAAUopB,EAAOppB,SACjBG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOqnB,EAAOppB,SAASgC,WAEzBC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBsnB,cAAc/vB,MACzCsG,EAAWmC,EAAgBsnB,cAAczpB,SAE/C,OAAOoC,EAAS3S,OACZ,CAGEg6B,cAAe,CACbpnB,WAAYH,EAAeunB,cAAcpnB,WACzC3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeunB,cAAc/vB,OAAK4I,aAAKF,IACnDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFC,eAACo5B,GAAiB,CAChBN,OAAQA,EACR/d,iBAAiB,QAzCvB/a,eAACk5B,GAAiB,CAACniB,QAASA,EAAQhX,SAClCC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,wBAAwBG,SAChDC,eAAA,KAAAD,SACGH,EAAE,kCA2Cb,KC9Fay5B,GAAuB7mB,OAAaC,MAAM,CACnD/J,OAAQ8J,OACLG,SAAS/S,YAAE,uBACdiiB,UAAWrP,OACRG,SAAS/S,YAAE,uBACdkiB,QAAStP,OACNG,SAAS/S,YAAE,yBCwEDF,iBAAkB6C,aAhEH,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAc6M,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiB3M,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQhO,EAAS1G,EAAT0G,UAAS,OAClH/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAiC,aAAzBgB,EAAOnH,cAAgCtN,EAAE,gBAAkBA,EAAE,sBAAsBG,SAAA,CACrGC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO4O,UAAa,0BAA4B,eAC5DjG,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GACT8S,EAAc,YAAa9S,GAC3B6S,EAAgB,aAAa,EAC/B,EACA5D,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GACT8S,EAAc,UAAW9S,GACzB6S,EAAgB,WAAW,EAC7B,EACA5D,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,IAEhD5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,SACLlG,UAAY+S,EAAOvK,OAAU,0BAA4B,eACzD6K,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,MAAKpC,SAAaH,EAAE,gBAATiN,gBACzB7M,eAAA,UAAQmC,MAAM,QAAOpC,SAAaH,EAAE,gCAATiN,gBAC3B7M,eAAA,UAAQmC,MAAM,OAAMpC,SAAaH,EAAE,+BAATiN,gBAC1B7M,eAAA,UAAQmC,MAAM,WAAUpC,SAAaH,EAAE,mCAATiN,gBAC9B7M,eAAA,UAAQmC,MAAM,WAAUpC,SAAaH,EAAE,mCAATiN,gBAC9B7M,eAAA,UAAQmC,MAAM,YAAWpC,SAAaH,EAAE,oCAATiN,mBAEjC7M,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,+BAK/DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAAC2E,KAAM,CACHG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAExBH,EAAE,8CAELI,eAACsgB,GAAgB,CAACja,UAAWA,SAExB,KC6CE3G,qBAAkB6C,aA/FjC,SAA4B5C,GAAgB,IAAdC,EAACD,EAADC,EAEtBkb,GAFgCnb,EAAP0D,QACXI,qBAAWxC,IACA6Z,YAC/BpE,EAAkCC,mBAAS,IAAIzT,KAAKyI,OAASkR,QAAQ,WAAUjG,EAAA7C,YAAA2C,EAAA,GAAxEmL,EAASjL,EAAA,GAAEmL,EAAYnL,EAAA,GAC9BsG,EAA8BvG,mBAAS,IAAIzT,KAAKyI,OAASmR,MAAM,WAAUK,EAAApJ,YAAAmJ,EAAA,GAAlE4E,EAAO3E,EAAA,GAAE6E,EAAU7E,EAAA,GAC1BE,EAA4B1G,mBAAS,OAAM2G,EAAAvJ,YAAAsJ,EAAA,GAApC3U,EAAM4U,EAAA,GAAEmI,EAASnI,EAAA,GACxB6E,EAAgCxL,oBAAS,GAAMyL,EAAArO,YAAAoO,EAAA,GAAxCF,EAAQG,EAAA,GAAEF,EAAWE,EAAA,GAC5BsD,EAAkC/O,mBAAS,IAAGgP,EAAA5R,YAAA2R,EAAA,GAAvCrN,EAASsN,EAAA,GAAEtD,EAAYsD,EAAA,GAExBzV,EAAYtQ,EAAE,+BACdyG,EAAY,kBAElBuN,EAA2BC,YAAYpa,GAA/B2e,EAA6CrE,YAAAH,EAAA,GAA/B,GAEtB,OACE5T,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC6G,GAAU,CAACR,UAAWA,QAG3BrG,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACPC,cAAe,CACb4N,UAAWA,EACXC,QAASA,EACTpZ,OAAQA,GAEVyL,iBAAkBklB,GAClBjlB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ0N,EAAa1N,EAAOwN,WACpBG,EAAW3N,EAAOyN,SAClB2D,EAAUpR,EAAO3L,QAEjB,IAAM4Z,EAAehE,GAAejK,EAAOwN,WACrCU,EAAajE,GAAejK,EAAOyN,SACzCO,EAAa,oBAADvT,OACUwT,EAAY,KAAAxT,OAAIyT,EAAU,KAAAzT,OAAIpG,EAAM,MAG1D4L,GAAc,GACd4N,GAAY,EAChB,EAAEniB,SAED,SAAA+M,GAAA,IAAGkG,EAAYlG,EAAZkG,aAAc6M,EAAa/S,EAAb+S,cAAeD,EAAe9S,EAAf8S,gBAAiB3M,EAAMnG,EAANmG,OAAQoB,EAAMvH,EAANuH,OAAevH,EAAP0V,QAAO,OACvExiB,eAACs5B,GAAuB,CACtBtmB,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,MAKN4b,EACA3hB,gBAAC4G,KAAI,CAACX,MAAO3G,EAAE,qCAAqCG,SAAA,CAClDO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACPH,EAAE,2CACHU,gBAAC2F,KAAI,CAAAlG,SAAA,CACHO,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CACPH,EAAE,kBAAoB,KACtB+L,KAAOkW,GAAWjW,OAAOkP,GAAY,IAAG,MACxCnP,KAAOmW,GAASlW,OAAOkP,MAE1Bxa,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CACPH,EAAE,kBAAkB,KAAGA,EAAE,yBAADkP,OAA0BpG,aAIzD1I,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVO,gBAACqE,KAAM,CACLG,MAAM,UACN2L,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAASgV,EAC7B,EAACtY,SAAA,CAEFC,eAACmG,KAAI,CAACC,KAAK,mBAAmB,IAAExG,EAAE,4BAItC,SAKZ,KCnGeF,qBAAkB6C,aAZjC,SAA6B5C,GAAGA,EAADC,EAAQD,EAALyD,MAAczD,EAAP0D,QAAqB,IAAZtD,EAAQJ,EAARI,SAChD,OACEC,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SACzBC,eAACG,KAAS,CAAAJ,SACPA,OAKb,KC6BeL,qBAAkB6C,aAnCjC,SAA4B5C,GAAc,IAAZC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAC/BwQ,EAAyBC,YAAY8kB,IAA7BY,EAA+CxlB,YAAAH,EAAA,GAAnC,GAElB,OACEtT,gBAAA,UAAQJ,UAAU,yBAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACP8oB,EAAa,CAAE9tB,UAAW,CACxB8I,MAAO,CACLilB,aAAcp2B,EAAM2K,OAAOwJ,KAE5B7C,eAAgB,CACf,CAACC,MAAO6jB,GAAiB/sB,UAAW,CAAC8L,GAAInU,EAAM2K,OAAOwJ,QAEzD3C,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,wCAA0C,CACvDmV,SAAUF,KAAMG,SAASC,cAG/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EAEtD,GACN,EAAE9B,SAAA,CACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,SAAS,IAAG,IAClCxG,EAAE,4BAGX,KCAeF,qBAAkB6C,aAhCjC,SAA+B5C,GAAoB,IAAlBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOmG,EAAI5J,EAAJ4J,KACzCqK,EAA0BC,YAAYglB,IAA/BY,EAAiD1lB,YAAAH,EAAA,GAAlC,GAEpB,OACE5T,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,0CACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CAAIwJ,EAAKyc,YAAY,IAAChmB,eAAA,SAAM,IAAEuJ,EAAKV,eACnDuQ,WAAYxZ,EAAE,+BACdgb,eAAgB6e,EAChBngB,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAACC,MAAO4jB,GAAkB9sB,UAAW7D,MACrC,CAAC+M,MAAO6jB,GAAiB/sB,UAAW,CAAC8L,GAAInU,EAAM2K,OAAOwJ,QAIhE,EAAExX,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAG1D,KC2Fe1G,iBAAkB6C,aAvHA,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAcC,EAAMtT,EAANsT,OAAQ1J,EAAI5J,EAAJ4J,KAAMiZ,EAAO7iB,EAAP6iB,QAASyD,EAAYtmB,EAAZsmB,aAAcrG,EAAejgB,EAAfigB,gBAAiBD,EAAShgB,EAATggB,UAAS,OAClH3f,eAACc,KAAM,CAACE,OAAQgS,EAAcjS,OAAQiS,EAAajT,SACjDC,eAACkT,KAAM,CAAAnT,SACLO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CAEPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAC7CO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAO+S,YAAe,0BAA4B,eAC9DzS,aAAa,MACbuI,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,eAAe,GAAM,EACvC,IAER5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,0BAGhEF,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAC7CO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,MACbE,UAAU,WACVqI,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,eAAe,GAAM,EACvC,IAER5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,0BAGhEI,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAAA,CAC7CO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTC,eAACsT,KAAK,CAAChP,KAAK,OACL8B,KAAK,WACLlG,UAAY+S,EAAOkT,SAAY,0BAA4B,eAC3D5S,aAAa,MACbuI,SAAU,SAACoK,GACVD,EAAaC,GACbtG,EAAgB,YAAY,GAAM,EACpC,IAEN5f,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,wBAE3DI,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,QACLlG,UAAY+S,EAAOmT,MAAS,0BAA4B,eACxD7S,aAAa,MACbuI,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,SAAS,GAAM,EACjC,IAER5f,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,2BAG1DF,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAC7CO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,iBACLlG,UAAY+S,EAAOqM,eAAkB,0BAA4B,eACjE/L,aAAa,MACbuI,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,kBAAkB,GAAM,EAC1C,EAAE7f,SAAA,CAELzH,QAAQC,IAAI,wCACZD,QAAQC,IAAIonB,GACb3f,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAU0G,gBAAgBjd,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC1CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK8V,WAAW,KAAG9V,EAAK+c,SAAS,MAArDzZ,eAA+D,OAGhG7M,eAACwT,KAAY,CAACpN,KAAK,iBAAiBqN,UAAU,OAAOvT,UAAU,0BAGnEI,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAAA,CAC7CC,eAAA,QAAME,UAAU,cAAaH,SAAEwJ,EAAK2b,eAAoB,IAACllB,eAAA,SAAMA,eAAA,YAEjEM,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAAA,CAC7CC,eAAA,QAAME,UAAU,cAAaH,SAACC,eAAC05B,GAAsB,CAACnwB,KAAMA,MAAcvJ,eAAA,SAAMA,eAAA,SAAM,IAACA,eAAA,SACrD,IAAhCwmB,OAAOC,KAAKjE,GAASrjB,OAAgB,GACrCa,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,6BAuBN,KCzDIF,I,GAAAA,iBAAkB6C,aAhEjC,SAA6B5C,GAA8C,IAA5CC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAO6Q,EAAatU,EAAbsU,cAAe1K,EAAI5J,EAAJ4J,KAAMoW,EAAShgB,EAATggB,UAC5D/L,EAA0BC,YAAY+kB,IAA/Be,EAAiD5lB,YAAAH,EAAA,GAAlC,GAEpB,OACE5T,eAACgU,KAAM,CACLC,cAAe,CACb+R,YAAa/R,EAAc+R,YAC3Bnd,YAAaoL,EAAcpL,YAC3Bud,MAAOnS,EAAcmS,MACrBD,SAAUlS,EAAckS,SACxB7G,eAAiBrL,EAAcqL,eAAkBrL,EAAcqL,eAAe/H,GAAK,MAGrFnD,SAAU,SAACC,EAAM9H,GAAqC,IAAjC+H,EAAa/H,EAAb+H,cAAeqS,EAAUpa,EAAVoa,WAClCruB,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZslB,EAAgB,CAAEluB,UAAW,CAC3B8I,MAAO,CACLgD,GAAItD,EAAcsD,GAClByO,YAAa3R,EAAO2R,YACpBnd,YAAawL,EAAOxL,YACpBud,MAAO/R,EAAO+R,MACdD,SAAU9R,EAAO8R,SACjB7G,eAAgBjL,EAAOiL,iBAExB5K,eAAgB,CACjB,CAACC,MAAO6jB,GAAiB/sB,UAAW,CAAC8L,GAAInU,EAAM2K,OAAOwJ,QAGvD3C,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,yCAA2C,CACxDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,GACdqS,EAAW,CAAC,EACd,IAAGzR,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQmO,EAAOxV,EAAPwV,QAASyD,EAAYjZ,EAAZiZ,aAAcrG,EAAe5S,EAAf4S,gBAAe,OACtE5f,eAAC45B,GAAwB,CACvB5mB,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTyD,aAAcA,EACdrG,gBAAiBA,EACjBrW,KAAMA,EACNoW,UAAWA,GAEc,GAIrC,KCpDaiZ,GAAoBt/B,YAAGC,QAAAC,YAAA,6LA2JrBkG,qBAAkB6C,aAjJjC,SAA8B5C,GAAmD,IAA/CC,EAACD,EAADC,EAAiC+f,GAAvBhgB,EAAP0D,QAAc1D,EAALyD,MAAmBzD,EAAZk6B,aAAuBl6B,EAATggB,WACjE/L,EAAuBC,YAAY+kB,IAA3B9R,EAA6C/S,YAAAH,EAAA,GAAnC,GAClB8C,EAAkCC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAzCqQ,EAAQnQ,EAAA,GAAEoQ,EAAWpQ,EAAA,GAyF7B,OACE5W,eAACinB,KAAe,CAACC,UA7DD,SAAC5U,GAEjBha,QAAQC,IAAI,0BACZD,QAAQC,IAAI+Z,GACZ,IAAQ6U,EAA6C7U,EAA7C6U,YAAaC,EAAgC9U,EAAhC8U,YAAaC,EAAmB/U,EAAnB+U,OAAQC,EAAWhV,EAAXgV,OAC1ChvB,QAAQC,IAAI8uB,GACZ/uB,QAAQC,IAAI6uB,GACZ9uB,QAAQC,IAAI+uB,GAGZhvB,QAAQC,IAAI,qBACP6uB,GAA0B,WAAXE,IAKpBhvB,QAAQC,IAAI,4BAEV6uB,EAAYG,cAAgBF,EAAOE,aACnCH,EAAYI,QAAUH,EAAOG,OA9CR,SAAHjb,GAAkC,IAA5Bkb,EAAOlb,EAAPkb,QAASC,EAAWnb,EAAXmb,YACnCV,GAAY,GACZF,EAAW,CACTrb,UAAW,CACT8I,MAAO,CACLgD,GAAIkQ,EACJE,WAAYD,IAGhBhT,eAAgB,CACd,CAAEC,MAAO6jB,GAAiB/sB,UAAW,CAAE8L,GAAIoI,EAAU6Z,aAAajiB,QAEnE3C,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACTxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,oCAAsC,CACnDmV,SAAUF,KAAMG,SAASC,eAE7B2S,YAAW,kBAAMZ,GAAY,EAAM,GAAE,IACvC,IAAG9R,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpD+lB,YAAW,kBAAMZ,GAAY,EAAM,GAAE,IACvC,GACF,CA0BEa,CAAiB,CACfJ,QAASN,EACTO,YAAaN,EAAYI,QAE7B,EAiCwCznB,SACpCO,gBAAC4G,KAAI,CAAC4gB,YAAY,OAAM/nB,SAAA,CACtBO,gBAAC4G,KAAKN,OAAM,CAAA7G,SAAA,CACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,mBACfI,eAACkH,KAAKgQ,QAAO,CAAAnX,SACXC,eAAC85B,GAAmB,SAGxB95B,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACQ,KAAM,CAACC,OAAQgmB,EAAU/lB,OAAQ+lB,EAAShnB,SAAA,CACvCO,gBAACF,KAAKC,IAAG,CAACH,UAAU,uBAAsBH,SAAA,CACxCC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAAEH,EAAE,qBACnDI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAAEH,EAAE,yBACnDI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAAEH,EAAE,sCACnDI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAAEH,EAAE,iBACnDI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,qBAAoBH,SAACC,eAAA,QAAME,UAAU,cAAaH,SAAEH,EAAE,qBACjFI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,0BAE7BF,eAACgoB,KAAS,CAACT,YAAY,cAAaxnB,SACjC,SAACkoB,EAAUC,GAAQ,OAChB5nB,gBAAA,MAAA6nB,wBAAA,CACEhI,IAAK8H,EAASG,UACVH,EAASI,gBAAc,IAAAtoB,SAAA,CAE1B4f,EAAU6Z,aAAav3B,MAAMmH,MAAMkD,KAAI,SAAAU,EAAWsb,GAAG,IAAX/e,EAAIyD,EAAJzD,KAAI,OAC7CvJ,eAACuoB,KAAS,CACRpB,YAAa5d,EAAKgO,GAClBiQ,MAAOc,EAAIvoB,SAGV,SAACkoB,EAAUC,GAAQ,OAChBloB,eAAA,MAAAmoB,oCAAA,CACEhI,IAAK8H,EAASG,SACdZ,MAAOje,EAAKoe,YACRM,EAASO,gBACTP,EAASQ,iBAAe,IAAA1oB,SAE5BC,eAAC+5B,GAAoB,CAAC9lB,cAAe1K,EAAMoW,UAAWA,EAAWpW,KAAMA,MACnE,GAVLA,EAAKgO,GAYA,IAEb0Q,EAASU,eACN,aAQ1B,KC/HejpB,iBAAkB6C,aA5BC,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAcqB,EAAM1U,EAAN0U,OAAuCuL,GAAzBjgB,EAANsT,OAAetT,EAAP6iB,QAAqB7iB,EAAZsmB,aAA6BtmB,EAAfigB,iBAAiBC,EAAalgB,EAAbkgB,cAAa,OACzH7f,eAACc,KAAM,CAACE,OAAQgS,EAAcjS,OAAQiS,EAAajT,SACjDO,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gCAAgCG,SAAA,CACnDC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,QACbC,aAAchV,EAAOiV,MACrB1wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,QAASqG,EAAE7gB,OAAOkkB,cAChC3J,EAAgB,SAAS,GAAM,EACjC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,wBAExDF,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAGA,KCEIF,iBAAkB6C,aA5BE,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAcqB,EAAM1U,EAAN0U,OAAuCuL,GAAzBjgB,EAANsT,OAAetT,EAAP6iB,QAAqB7iB,EAAZsmB,aAA6BtmB,EAAfigB,iBAAiBC,EAAalgB,EAAbkgB,cAAa,OAC1H7f,eAACc,KAAM,CAACE,OAAQgS,EAAcjS,OAAQiS,EAAajT,SACjDO,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,SACbC,aAAchV,EAAOmV,OACrB5wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,SAAUqG,EAAE7gB,OAAOkkB,cACjC3J,EAAgB,UAAU,GAAM,EAClC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,wBAEzDF,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAGA,KCIIF,iBAAkB6C,aA5BA,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAcqB,EAAM1U,EAAN0U,OAA0CuL,GAA5BjgB,EAANsT,OAAoBtT,EAAZsmB,aAAwBtmB,EAAV8pB,WAA2B9pB,EAAfigB,iBAAiBC,EAAalgB,EAAbkgB,cAAa,OAC3H7f,eAACc,KAAM,CAACE,OAAQgS,EAAcjS,OAAQiS,EAAajT,SACjDO,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,OACbC,aAAchV,EAAOqV,KACrB9wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,OAAQqG,EAAE7gB,OAAOkkB,cAC/B3J,EAAgB,QAAQ,GAAM,EAChC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDF,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAGA,KC8HIF,qBAAkB6C,aAvJjC,SAAmC5C,GAAoC,IAAlCC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAOyU,EAAWlY,EAAXkY,YAChDN,EAAKnU,EAAM2K,OAAOwJ,GACxB3D,EAAwBC,YAAY4kB,IAA5BuB,EAAyCjmB,YAAAH,EAAA,GAA9B,GAEnB,OACEtT,gBAACspB,KAAU,CAACC,WAAYjqB,EAAE,gCAAgCG,SAAA,CACxDC,eAAC8pB,KAAG,CAACvjB,MAAO3G,EAAE,gCAAgCG,SAC5CC,eAACgU,KAAM,CACLC,cAAe,CACbqV,MAAOzR,EAAY2hB,aAAalQ,OAGlClV,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ2lB,EAAY,CAAEvuB,UAAW,CACvB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjB+R,MAAOjV,EAAOiV,QAEf5U,eAAgB,CACf,CAACC,MAAO6jB,GAAiB/sB,UAAW,CAAC8L,GAAIA,OAE5C3C,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,0CAA4C,CACzDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQmO,EAAOxV,EAAPwV,QAASyD,EAAYjZ,EAAZiZ,aAAcrG,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OACrF7f,eAACi6B,GAAyB,CACxBjnB,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTyD,aAAcA,EACdrG,gBAAiBA,EACjBC,cAAeA,GAEW,MAIlC7f,eAAC8pB,KAAG,CAACvjB,MAAO3G,EAAE,kBAAkBG,SAC9BC,eAACgU,KAAM,CACLC,cAAe,CACbuV,OAAQ3R,EAAY2hB,aAAahQ,QAGnCpV,SAAU,SAACC,EAAM2V,GAAyB,IAArB1V,EAAa0V,EAAb1V,cACnBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ2lB,EAAY,CAAEvuB,UAAW,CACvB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBiS,OAAQnV,EAAOmV,SAEhB9U,eAAgB,CACjB,CAACC,MAAO6jB,GAAiB/sB,UAAW,CAAC8L,GAAIA,OAE1C3C,MAAK,SAAAqV,GAAe,IAAZnoB,EAAImoB,EAAJnoB,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,2CAA6C,CAC1DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAmqB,GAAA,IAAGlX,EAAYkX,EAAZlX,aAAcC,EAAMiX,EAANjX,OAAQoB,EAAM6V,EAAN7V,OAAQmO,EAAO0H,EAAP1H,QAASyD,EAAYiE,EAAZjE,aAAcrG,EAAesK,EAAftK,gBAAiBC,EAAaqK,EAAbrK,cAAa,OACrF7f,eAACk6B,GAA0B,CACzBlnB,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACR4R,aAAcA,EACdzD,QAASA,EACT5C,gBAAiBA,EACjBC,cAAeA,GAEY,MAInC7f,eAAC8pB,KAAG,CAACvjB,MAAO3G,EAAE,gBAAgBG,SAC5BC,eAACgU,KAAM,CACLC,cAAe,CACbyV,KAAM7R,EAAY2hB,aAAa9P,MAGjCtV,SAAU,SAACC,EAAM+V,GAAyB,IAArB9V,EAAa8V,EAAb9V,cACnBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ2lB,EAAY,CAAEvuB,UAAW,CACvB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBmS,KAAMrV,EAAOqV,OAEdhV,eAAgB,CACjB,CAACC,MAAO6jB,GAAiB/sB,UAAW,CAAC8L,GAAIA,OAE1C3C,MAAK,SAAAyV,GAAe,IAAZvoB,EAAIuoB,EAAJvoB,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,yCAA2C,CACxDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAuqB,GAAA,IAAGtX,EAAYsX,EAAZtX,aAAcC,EAAMqX,EAANrX,OAAQoB,EAAMiW,EAANjW,OAAQmO,EAAO8H,EAAP9H,QAASyD,EAAYqE,EAAZrE,aAAcrG,EAAe0K,EAAf1K,gBAAiBC,EAAayK,EAAbzK,cAAa,OACrF7f,eAACm6B,GAAwB,CACvBnnB,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTyD,aAAcA,EACdrG,gBAAiBA,EACjBC,cAAeA,GAEU,QAMvC,KC3HengB,iBAAkB6C,aAlCD,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAY45B,GAAF75B,EAAP0D,QAAqB1D,EAAZ65B,cAAY,OACzDl5B,gBAAC4G,KAAI,CAAC4gB,YAAY,OAAM/nB,SAAA,CACtBC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,uBAEjBU,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAA,OAAAP,SAAA,CACEC,eAAA,QAAME,UAAU,iBAAgBH,SAC7BH,EAAE,sBAELI,eAAA,QAAME,UAAU,aAAYH,SACzBy5B,EAAahP,qBAEZxqB,eAAA,SACNM,gBAAA,OAAAP,SAAA,CACEC,eAAA,QAAME,UAAU,iBAAgBH,SAC7BH,EAAE,iBAELI,eAAA,QAAME,UAAU,aAAYH,SACzBy5B,EAAa/O,gBAEZzqB,eAAA,SACNM,gBAAA,OAAAP,SAAA,CACEC,eAAA,QAAME,UAAU,iBAAgBH,SAC7BH,EAAE,mBAELI,eAAA,QAAME,UAAU,aAAYH,SACzBy5B,EAAatU,kBAEZllB,eAAA,cAEH,KC0CMN,iBAAkB6C,aArEG,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAcqB,EAAM1U,EAAN0U,OAAQpB,EAAMtT,EAANsT,OAAQgT,EAAYtmB,EAAZsmB,aAAczD,EAAO7iB,EAAP6iB,QAAS3C,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAA0BjgB,EAATggB,UAAS,OACtI3f,eAACc,KAAM,CAACE,OAAQgS,EAAcjS,OAAQiS,EAAajT,SACjDO,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,+BAA+BG,SAAA,CAClDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAO+lB,YAAe,0BAA4B,eAC9DzlB,aAAa,MACbuI,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,eAAe,GAAM,EACvC,IAER5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,wBAE9DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO+R,SAAY,0BAA4B,eAC3DpJ,SAAUvH,EAAO2Q,SACjBlJ,SAAU,SAAC/O,GACT8S,EAAc,WAAY9S,GAC1B6S,EAAgB,YAAY,EAC9B,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,wBAE3DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,6BAA6BG,SAAA,CAChDC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAOgmB,WAAc,0BAA4B,eAC7Drd,SAAUvH,EAAO4kB,WACjBnd,SAAU,SAAC/O,GACT8S,EAAc,aAAc9S,GAC5B6S,EAAgB,cAAc,EAChC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,wBAE1DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,SACLlG,UAAY+S,EAAOvK,OAAU,0BAA4B,eACzD6K,aAAa,MACbuI,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,UAAU,GAAM,EAClC,EAAE7f,SAAA,CAENC,eAAA,UAAQmC,MAAM,QAAOpC,SAAEH,EAAE,iCACzBI,eAAA,UAAQmC,MAAM,OAAMpC,SAAEH,EAAE,gCACxBI,eAAA,UAAQmC,MAAM,WAAUpC,SAAEH,EAAE,oCAC5BI,eAAA,UAAQmC,MAAM,WAAUpC,SAAEH,EAAE,oCAC5BI,eAAA,UAAQmC,MAAM,YAAWpC,SAAEH,EAAE,wCAE/BI,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,wBAEvB,IAAhCsmB,OAAOC,KAAKjE,GAASrjB,OAAgB,GACrCa,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAIF,KCaIF,qBAAkB6C,aA5EjC,SAAgC5C,GAA2B,IAAzBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOyU,EAAWlY,EAAXkY,YAC1CjE,EAAwBC,YAAY4kB,IAA5BuB,EAAyCjmB,YAAAH,EAAA,GAA9B,GAIfoR,EAAW,KACXnN,EAAY2hB,aAAaxU,WAC3BA,EAAW,IAAI9hB,KAAK2U,EAAY2hB,aAAaxU,WAE/C,IAAIiU,EAAa,KAKjB,OAJIphB,EAAY2hB,aAAaP,aAC3BA,EAAa,IAAI/1B,KAAK2U,EAAY2hB,aAAaP,aAI/Cj5B,eAACkH,KAAI,CAACX,MAAO3G,EAAE,mBAAoBkoB,YAAY,OAAM/nB,SACnDC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACgU,KAAM,CACLC,cAAe,CACb+kB,YAAanhB,EAAY2hB,aAAaR,YACtChU,SAAUA,EACViU,WAAYA,EACZvwB,OAAQmP,EAAY2hB,aAAa9wB,QAGnC0L,SAAU,SAACC,EAAM9H,GAAqC,IAAjC+H,EAAa/H,EAAb+H,cAAeqS,EAAUpa,EAAVoa,WAClCruB,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ2lB,EAAY,CAAEvuB,UAAW,CACvB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjByhB,YAAa3kB,EAAO2kB,YACpBhU,SAAU1G,GAAejK,EAAO2Q,UAChCiU,WAAY3a,GAAejK,EAAO4kB,YAClCvwB,OAAQ2L,EAAO3L,SAEhBgM,eAAgB,CACf,CAACC,MAAO4jB,GAAkB9sB,UAAW7D,SAExCgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,4CAA8C,CAC3DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,GACdqS,EAAW,CAAC,EACd,IAAGzR,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQmO,EAAOxV,EAAPwV,QAASyD,EAAYjZ,EAAZiZ,aAA0BrG,GAAF5S,EAAVyc,WAA2Bzc,EAAf4S,iBAAiBC,EAAa7S,EAAb6S,cAAa,OACjG7f,eAACo6B,GAA2B,CAC1Bza,UAAW9H,EACX7E,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTyD,aAAcA,EACdpG,cAAeA,EACfD,gBAAiBA,GAEW,OAM1C,KCpDelgB,iBAAkB6C,aA7BI,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAY4D,GAAF7D,EAAP0D,QAAqB1D,EAAZ6D,cAAY,OAC9DlD,gBAAC4G,KAAI,CAAC4gB,YAAY,OAAM/nB,SAAA,CACtBC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,oBAEjBU,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,OAAKE,UAAU,OAAMH,SAClByD,EAAa4C,OAEd5C,EAAaunB,QACb/qB,eAAA,OAAKwM,wBAAyB,CAAEC,OAAQC,KAAUC,SAASnJ,EAAaunB,YACtE,GAEJ/qB,eAAA,OAAAD,SACGyD,EAAawnB,QAEhBhrB,eAAA,OAAAD,SACGyD,EAAaynB,QAEhBjrB,eAAA,OAAAD,SACGyD,EAAa0nB,eAEhBlrB,eAAA,OAAAD,SACGyD,EAAa2nB,uBAGb,KCMMzrB,iBAAkB6C,aA9BG,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAcC,EAAMtT,EAANsT,OAAQuP,EAAO7iB,EAAP6iB,QAAS5C,EAAejgB,EAAfigB,gBAAiBqG,EAAYtmB,EAAZsmB,aAAY,OACpGjmB,eAACc,KAAM,CAACE,OAAQgS,EAAcjS,OAAQiS,EAAajT,SACjDO,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTC,eAACsT,KAAK,CACJhP,KAAK,OACL8B,KAAK,UACLlG,UAAY+S,EAAOkI,QAAW,0BAA4B,eAC1D5H,aAAa,MACbuI,SAAU,SAACoK,GACTD,EAAaC,GACbtG,EAAgB,WAAW,GAAM,EACnC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,wBAExB,IAAhCsmB,OAAOC,KAAKjE,GAASrjB,OAAgB,GACrCa,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAIF,KCqCIF,qBAAkB6C,aA3DjC,SAAgC5C,GAA8C,IAA5CC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAiByU,GAAFlY,EAARqe,SAAqBre,EAAXkY,aAC7DjE,EAAwBC,YAAY4kB,IAA5BuB,EAAyCjmB,YAAAH,EAAA,GAA9B,GAEnB,OACEtT,gBAAC4G,KAAI,CAAC4gB,YAAY,OAAM/nB,SAAA,CACtBC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,uBAEjBI,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACgU,KAAM,CACLC,cAAe,CACbkH,QAAStD,EAAY2hB,aAAare,SAGpC/G,SAAU,SAACC,EAAM9H,GAAqC,IAAjC+H,EAAa/H,EAAb+H,cAAeqS,EAAUpa,EAAVoa,WAClCruB,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ2lB,EAAY,CAAEvuB,UAAW,CACvB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjB4D,QAAS9G,EAAO8G,UAEjBzG,eAAgB,CACf,CAACC,MAAO4jB,GAAkB9sB,UAAW7D,SAExCgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,4CAA8C,CAC3DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,GACdqS,EAAW,CAAC,EACd,IAAGzR,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQmO,EAAOxV,EAAPwV,QAAS5C,EAAe5S,EAAf4S,gBAAiBqG,EAAYjZ,EAAZiZ,aAAY,OACtEjmB,eAACq6B,GAA2B,CAC1BrnB,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTyD,aAAcA,EACdrG,gBAAiBA,GAEW,QAM1C,KCJelgB,qBAAkB6C,aA1DjC,SAA2B5C,GAAuC,IAApCC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAOo2B,EAAY75B,EAAZ65B,aACzCjiB,EAAKnU,EAAM2K,OAAOwJ,GAExB,OACEjX,gBAAC4G,KAAI,CAAC4gB,YAAY,OAAM/nB,SAAA,CACtBO,gBAAC4G,KAAKN,OAAM,CAAA7G,SAAA,CACVO,gBAAC4G,KAAKqJ,MAAK,CAAAxQ,SAAA,CAAEH,EAAE,cAAc,OAC7BI,eAACkH,KAAKgQ,QAAO,CAAAnX,SACXC,eAAC0E,IAAI,CAACtC,GAAE,wBAAA0M,OAA0ByI,EAAE,OAAMxX,SACxCC,eAAC2E,KAAM,CAACG,MAAM,YAAYD,KAAK,KAAI9E,SAChCH,EAAE,yBAKXU,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAA,OAAKJ,UAAU,OAAMH,SAAA,CACnBC,eAAA,OAAKE,UAAU,OAAMH,SAClBy5B,EAAahO,kBAEhBxrB,eAAA,OAAAD,SACGy5B,EAAa/N,8BAEhBzrB,eAAA,OAAAD,SACGy5B,EAAa9N,oCAGhB1rB,eAAA,OAAKE,UAAU,OAAMH,SAClBy5B,EAAa7N,sBAEhB3rB,eAAA,OAAAD,SACGy5B,EAAa5N,kBAEhBtrB,gBAAA,OAAAP,SAAA,CACGy5B,EAAa3N,iBAAiB,IAAE2N,EAAa1N,gBAEhD9rB,eAAA,OAAAD,SACGy5B,EAAazN,qBAGpBzrB,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRy5B,EAAa/U,UAAazkB,eAAA,QAAME,UAAU,cAAaH,SACvDC,eAAC0E,IAAI,CAACtC,GAAE,kBAAA0M,OAAoB0qB,EAAa/U,SAASlN,GAAE,SAAQxX,SAC1DC,eAAC2E,KAAM,CAACtC,KAAK,OAAOyC,MAAM,OAAM/E,SAC7By5B,EAAa/U,SAASre,WAI3BozB,EAAa1U,SAAY9kB,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyB0qB,EAAa1U,QAAQvN,GAAE,YAAWxX,SAC5FC,eAAC2E,KAAM,CAACtC,KAAK,OAAOyC,MAAM,OAAM/E,SAC7By5B,EAAa1U,QAAQC,kBAMlC,KCgDerlB,qBAAkB6C,aAxFjC,SAAyB5C,GAAiC,IAA/BC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgB4a,GAAFre,EAAP0D,QAAiB1D,EAARqe,UACtCzG,EAAKnU,EAAM2K,OAAOwJ,GACxBjU,EAA0CC,YAASi1B,GAAiB,CAClE/sB,UAAW,CACT8L,GAAIA,KAFA3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAM9BnD,EAAyBC,YAAYpa,GAA9B2e,EAA4CrE,YAAAH,EAAA,GAA9B,GAMrB,GAHAvV,aAAaC,QAAQC,EAAKxC,iCAAkCiiB,EAASoH,UAGjExjB,EAAS,OAAO5B,eAACs6B,GAAoB,CAAAv6B,SAAEH,EAAE,+BAE7C,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAACs6B,GAAoB,CAAAv6B,SAAEH,EAAE,8BAIlC,IAAIyG,EAAYhI,aAAa0E,QAAQxE,EAAKrD,4BACrCmL,IACHA,EAAY,mBAEd,IAAMmmB,EAAa,uBAAyBjV,EAG5C,OACEjX,gBAACg6B,GAAoB,CAAAv6B,SAAA,CACnBC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,uBAAyB,KAAOkC,EAAK03B,aAAaR,YAAYj5B,SAClFO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAElCO,gBAACoE,IAAI,CAACtC,GAAIiE,EACJnG,UAAU,yBAAwBH,SAAA,CACpCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAAe,IAAExG,EAAE,mBAG9CI,eAAC2E,KAAM,CACLG,MAAM,YACNzC,KAAK,UACLnC,UAAU,OACVuQ,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAASmpB,EAC7B,EAACzsB,SAEDH,EAAE,sBAKTU,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACu6B,GAAuB,CACtB1iB,YAAa/V,IAQfxB,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAGomB,GAAI,EAAEntB,SACrBC,eAACw6B,GAA4B,CAACh3B,aAAc1B,EAAK0B,iBAEnDxD,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAGomB,GAAI,EAAEntB,SACrBC,eAACy6B,GAAkB,CAACjB,aAAc13B,EAAK03B,uBAI7Cl5B,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAAC06B,GAAuB,CAAClB,aAAc13B,EAAK03B,eAC5Cx5B,eAAC26B,GAAuB,CAAC9iB,YAAa/V,UAG1C9B,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACfC,eAAC46B,GAAqB,CAACjb,UAAW7d,EAAM+3B,aAAc9iB,IACtD/W,eAAC66B,GAA0B,CAAChjB,YAAa/V,WAKnD,KCpFepC,qBAAkB6C,aAjBjC,SAA+B5C,GAA8C,IAA5CC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAUi5B,EAAWr5B,EAAXq5B,YACtDtL,EAAY9tB,EAAE,+BAAiC,KAAOo5B,GAAeA,EAE3E,OACEh5B,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SACzBO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAOmnB,IACpB1tB,eAACI,KAAKC,IAAG,CAACyG,GAAI,GAAG/G,SACdA,UAMf,KCoHeL,iBAAkB6C,aA/HF,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQwL,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiBD,EAAShgB,EAATggB,UAAWtZ,EAAS1G,EAAT0G,UAAS,OAC9H/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,WACLwnB,QAASvZ,EAAOwZ,SAChB/R,SAAW,SAAC4B,GACVkC,EAAgB,YAAY,GAAM,GAClCC,EAAc,YAAcxL,EAAOwZ,SACrC,IAEA7tB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,yCAEnDI,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,WAEtCY,EAAOwZ,SAcTvtB,gBAAAwtB,YAAA,CAAA/tB,SAAA,CACEO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SAAA,CACtDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,kBACLlG,UAAY+S,EAAOuY,gBAAmB,0BAA4B,eAClEjY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,OAAOvT,UAAU,wBAElEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gDAAgDG,SAAA,CACnEC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,8BACLlG,UAAY+S,EAAOwY,4BAA+B,0BAA4B,eAC9ElY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,8BAA8BqN,UAAU,OAAOvT,UAAU,0BAGhFF,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oDAAoDG,SAAA,CACvEC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,iCACLlG,UAAY+S,EAAOyY,+BAAkC,0BAA4B,eACjFnY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,iCAAiCqN,UAAU,OAAOvT,UAAU,6BAIrFI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,wCAAwCG,SAAA,CAC3DC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,sBACLlG,UAAY+S,EAAO0Y,oBAAuB,0BAA4B,eACtEpY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,sBAAsBqN,UAAU,OAAOvT,UAAU,wBAEtEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SAAA,CACtDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,kBACLlG,UAAY+S,EAAO2Y,gBAAmB,0BAA4B,eAClErY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,OAAOvT,UAAU,0BAGpEF,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oCAAoCG,SAAA,CACvDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,mBACLlG,UAAY+S,EAAO4Y,iBAAoB,0BAA4B,eACnEtY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,6BAIvEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gCAAgCG,SAAA,CACnDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,eACLlG,UAAY+S,EAAO6Y,aAAgB,0BAA4B,eAC/DvY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,eAAeqN,UAAU,OAAOvT,UAAU,0BAGjEF,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SAAA,CACtDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,kBACLlG,UAAY+S,EAAO8Y,gBAAmB,0BAA4B,eAClExY,aAAa,QAErBvT,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,OAAOvT,UAAU,gCA5FtEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,wCAAwCG,SAAA,CAC3DO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,WACLlG,UAAY+S,EAAOwR,SAAY,0BAA4B,eAC3DlR,aAAa,MAAKxT,SAAA,CACtBO,gBAAA,UAAQ6B,MAAM,GAAEpC,SAAA,CAAaH,EAAE,uCAAuC,KAAG+f,EAAU6Z,aAAa1U,QAAQC,WAAlFlY,gBACrB8S,EAAUhC,WAAWvU,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACrCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,2BAyFjEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAACqgB,GAAgB,CAAC3M,SAAUV,IAC5BhT,eAACsgB,GAAgB,CAACja,UAAWA,SAExB,KCtBI3G,I,eAAAA,iBAAkB6C,aApGjC,SAA2B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAClCmU,EAAKnU,EAAM2K,OAAOwJ,GAClBlR,EAAS,wBAAAyI,OAA2ByI,GAC1CjU,EAAiCC,YAASi1B,GAAiB,CACzD/sB,UAAW,CACT8L,GAAIA,KAFA3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxB8R,EAAwBC,YAAY4kB,IAA5BuB,EAAyCjmB,YAAAH,EAAA,GAA9B,GAGnB,GAAIhS,EAAS,OAAO5B,eAAC86B,GAAsB,CAAA/6B,SAAEH,EAAE,+BAE/C,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAAC86B,GAAsB,CAAA/6B,SAAEH,EAAE,8BAGpCtH,QAAQC,IAAIuJ,GAEZ,IAAIksB,EAAkB,GAKtB,OAJIlsB,EAAK03B,aAAa/U,WACpBuJ,EAAkBlsB,EAAK03B,aAAa/U,SAASlN,IAI7CvX,eAAC86B,GAAsB,CAAC9B,YAAal3B,EAAK03B,aAAaR,YAAYj5B,SACjEC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,cAAekoB,YAAY,OAAM/nB,SAC9CC,eAACgU,KAAM,CACLC,cAAe,CACb4Z,SAAU/rB,EAAK03B,aAAa3L,SAC5BrC,gBAAiB1pB,EAAK03B,aAAahO,gBACnCC,4BAA6B3pB,EAAK03B,aAAa/N,4BAC/CC,+BAAgC5pB,EAAK03B,aAAa9N,+BAClDC,oBAAqB7pB,EAAK03B,aAAa7N,oBACvCC,gBAAiB9pB,EAAK03B,aAAa5N,gBACnCC,iBAAkB/pB,EAAK03B,aAAa3N,iBACpCC,aAAchqB,EAAK03B,aAAa1N,aAChCC,gBAAiBjqB,EAAK03B,aAAazN,gBACnCtH,SAAUuJ,GAGZ5Z,SAAU,SAACC,EAAM9H,GAAqC,IAAjC+H,EAAa/H,EAAb+H,cAAyB/H,EAAVoa,WAClCruB,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ2lB,EAAY,CAAEvuB,UAAW,CACvB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBsW,SAAUxZ,EAAOwZ,SACjBrC,gBAAiBnX,EAAOmX,gBACxBC,4BAA6BpX,EAAOoX,4BACpCC,+BAAgCrX,EAAOqX,+BACvCC,oBAAqBtX,EAAOsX,oBAC5BC,gBAAiBvX,EAAOuX,gBACxBC,iBAAkBxX,EAAOwX,iBACzBC,aAAczX,EAAOyX,aACrBC,gBAAiB1X,EAAO0X,gBACxBtH,SAAUpQ,EAAOoQ,WAElB/P,eAAgB,CACf,CAACC,MAAO6jB,GAAiB/sB,UAAW,CAAC8L,GAAGA,IACxC,CAAC5C,MAAO4jB,GAAkB9sB,UAAW7D,SAExCgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQmO,EAAOxV,EAAPwV,QAASyD,EAAYjZ,EAAZiZ,aAAcrG,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OACrF7f,eAAC+6B,GAAsB,CACrB/nB,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTyD,aAAcA,EACdrG,gBAAiBA,EACjBC,cAAeA,EACfF,UAAW7d,EACXuE,UAAWA,GAEY,OAMrC,KCjHa20B,GAAyB1hC,YAAGC,QAAAC,YAAA,ohBA6B5ByhC,GAAwB3hC,YAAGI,QAAAF,YAAA,iSAmB3B0hC,GAAqB5hC,YAAGK,QAAAH,YAAA,2MAYxB2hC,GAAkB7hC,YAAGO,QAAAL,YAAA,iLAUrB4hC,GAAsB9hC,YAAGQ,QAAAN,YAAA,sMCxBvBkG,qBAAkB6C,aAhCjC,SAA+B5C,GAA8C,IAA5CC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQwuB,EAAA5uB,EAAE6uB,oBAAY,IAAAD,GAAMA,EACvE,OACEvuB,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCyuB,EAEAxuB,eAAC6G,GAAU,CAACR,UAAU,yBAAyBnG,UAAU,SAGzDF,eAAC6G,GAAU,CAACR,UAAU,kBAAkBnG,UAAU,SAEpDF,eAAC0N,GAAoB,CAACzD,WAAW,MACTC,SAAS,oBAAmBnK,SAClDC,eAACyW,GAAS,CAACL,OAAO,sCAIxBpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCsIeL,qBAAkB6C,aA5JjC,SAA2B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC9BqT,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACpB1G,EAAYtQ,EAAE,8BACpB0D,EAAqDC,YAASy3B,GAAwB,CACpFvvB,UAAW,CAAEoL,SAAUA,KADjBjV,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAGvCuC,EAA8BC,YAAYunB,IAAlCC,EAAsDtnB,YAAAH,EAAA,GAArC,GAEnBqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAIP,GAAIgC,EAAS,OACX5B,eAACs7B,GAAsB,CAAAv7B,SACrBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACs7B,GAAsB,CAAAv7B,SACrBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,4CAKZ,IAAM27B,EAAcz5B,EAAK05B,mBAEzB,OACEx7B,eAACs7B,GAAsB,CAAAv7B,SACrBC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,8BACbuQ,cAAe8G,EACfvH,SAAU6rB,EAAY7rB,SACtBY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO8pB,EAAY7rB,SAASgC,WAE7BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB2pB,mBAAmBpyB,MAC9CsG,EAAWmC,EAAgB2pB,mBAAmB9rB,SAEpD,OAAOoC,EAAS3S,OACZ,CAGEq8B,mBAAoB,CAClBzpB,WAAYH,EAAe4pB,mBAAmBzpB,WAC9C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe4pB,mBAAmBpyB,OAAK4I,aAAKF,IACxDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,6CACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,MAPFrF,kBAUlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNw7B,EAAYnyB,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKslB,QADQhiB,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKkyB,kBADQ5uB,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKiO,OACJjO,EAAKwlB,WAAczuB,gBAAA,QAAAP,SAAA,CAAM,IAAEH,EAAE,gBAAgB,IAACI,eAAA,YAAe,GAC7DuJ,EAAKylB,oBAAuBhvB,eAAC2kB,KAAKC,MAAK,CAAC9f,MAAM,OAAM/E,SACnDH,EAAE,iDACU,KALDiN,gBAOhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAK2lB,iBADZriB,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK+N,MADQzK,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,+BAAiCqH,EAAKgO,GAAG,EACrEzS,MAAM,YAAW/E,SACtBH,EAAE,kBAGPI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACd8jB,EAAkB,CAAE5vB,UAAW,CAC7B8I,MAAO,CACPgD,KACAV,UAAWA,IAEhBnC,eAAgB,CACf,CAACC,MAAOqmB,GAAwBvvB,UAAW,CAAC,SAAYoL,OACxDjC,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZiX,EAAc,qBAAyB,oBAAqB,CAC3D9B,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACC,KAAK,cAnCwByG,kBAvBzBA,eA6DJ,YAO5B,KC9Ka6uB,GAAqBlpB,OAAaC,MAAM,CACjDrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACd67B,iBAAkBjpB,OACf4c,SAAS,EAAGxvB,YAAE,sBACd+S,SAAS/S,YAAE,uBACdivB,OAAQrc,OACRgF,OAAQhF,OACRuc,WAAYvc,OACZwc,oBAAqBxc,OACrB8W,MAAO9W,OACPgX,OAAQhX,SC4IG9S,iBAAkB6C,aA1ID,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAc4M,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAe5M,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQhO,EAAS1G,EAAT0G,UAASgpB,EAAA1vB,EAAE2vB,YAAI,IAAAD,GAAMA,EAAA,OAChI/uB,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO6a,gBAClBlvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,oCAEjDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,eAInDnT,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACLuvB,EACFtvB,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gCAAgCG,SAAA,CACnDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,SACLlG,UAAY+S,EAAO4b,OAAU,0BAA4B,eACzDtb,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,0BAE7C,GACdF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,2CAA2CG,SAAA,CAC9DC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,mBACLlG,UAAY+S,EAAOwoB,iBAAoB,0BAA4B,eACnEloB,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,6BAIvEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,SACLlG,UAAY+S,EAAOuE,OAAU,0BAA4B,eACzDjE,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,wBAEzDI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,aACLwnB,QAASvZ,EAAO0a,aAClB/uB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,yCAEjDI,eAACwT,KAAY,CAACpN,KAAK,aAAaqN,UAAU,aAG9CzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,sBACLwnB,QAASvZ,EAAO2a,sBAClBhvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,oDAEjDI,eAACwT,KAAY,CAACpN,KAAK,sBAAsBqN,UAAU,gBAIzDnT,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,QACbC,aAAchV,EAAOiV,MACrB1wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPtG,EAAgB,SAAS,GAAM,GAC/BC,EAAc,QAASqG,EAAE7gB,OAAOkkB,aAClC,IAEFvpB,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,wBAExDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,SACbC,aAAchV,EAAOmV,OACrB5wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPtG,EAAgB,UAAU,GAAM,GAChCC,EAAc,SAAUqG,EAAE7gB,OAAOkkB,aACnC,IAEFvpB,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,wBAEzDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAOqE,KAAQ,0BAA4B,eACvD/D,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAGzDI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SACTH,EAAE,2BAIN,KCnEIF,qBAAkB6C,aAnEjC,SAA6B5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC3BgD,EAAY,yBAClBuN,EAAwBC,YAAYsnB,IAA7BQ,EAA6C5nB,YAAAH,EAAA,GAAhC,GAEpB,OACE5T,eAACs7B,GAAsB,CAAC9M,cAAc,EAAKzuB,SACzCC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,kCAAkCG,SAC/CC,eAACgU,KAAM,CACLC,cAAe,CACb7N,KAAM,GACN8oB,eAAe,EACfuM,iBAAkB,GAClBjkB,OAAQ,MACRuX,YAAY,EACZC,qBAAqB,EACrB1F,MAAO,GACPE,OAAQ,GACRlS,KAAM,IAERnD,iBAAkBunB,GAClBtnB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBqnB,EAAc,CAAElwB,UAAW,CACzB8I,MAAO,CACLnO,KAAMiO,EAAOjO,KACb8oB,cAAe7a,EAAO6a,cACtBuM,iBAAkBpnB,EAAOonB,iBACzBjkB,OAAQnD,EAAOmD,OACfuX,WAAY1a,EAAO0a,WACnBC,oBAAqB3a,EAAO2a,oBAC5B1F,MAAOjV,EAAOiV,MACdE,OAAQnV,EAAOmV,OACflS,KAAMjD,EAAOiD,OAEd5C,eAAgB,CACf,CAACC,MAAOqmB,GAAwBvvB,UAAW,CAAC,UAAY,OAE3DmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,0CAA4C,CACzDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcqB,EAAMrH,EAANqH,OAAQpB,EAAMjG,EAANiG,OAAQ4M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAe,OAC9D5f,eAAC47B,GAAqB,CACpB5oB,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EACXuZ,gBAAiBA,EACjBC,cAAeA,GACf,OAMd,KCoCengB,qBAAkB6C,aAnGjC,SAA8B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MACpCmU,EAAKnU,EAAM2K,OAAOwJ,GAClBlR,EAAY,yBACZ6J,EAAYtQ,EAAE,mCACpB0D,EAAiCC,YAAS03B,GAAuB,CAC/DxvB,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA6BC,YAAYqnB,IAAjCW,EAAoD9nB,YAAAH,EAAA,GAApC,GAExB,GAAIhS,EAAS,OACX5B,eAACs7B,GAAsB,CAAC9M,cAAc,EAAKzuB,SACzCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACs7B,GAAsB,CAAC9M,cAAc,EAAKzuB,SACzCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,4CAKZ,IAAMiY,EAAc/V,EAAKg6B,kBAEzB,OACE97B,eAACs7B,GAAsB,CAAC9M,cAAc,EAAKzuB,SACzCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClB8oB,cAAerX,EAAYqX,cAC3BuM,iBAAkB5jB,EAAY4jB,iBAC9B5M,OAAQhX,EAAYgX,OACpBrX,OAAQK,EAAYL,OACpBuX,WAAYlX,EAAYkX,WACxBC,oBAAqBnX,EAAYmX,oBACjC1F,MAAOzR,EAAYyR,MACnBE,OAAQ3R,EAAY2R,OACpBlS,KAAMO,EAAYP,MAEpBnD,iBAAkBunB,GAClBtnB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZwnB,EAAiB,CAAEpwB,UAAW,CAC5B8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,KACb8oB,cAAe7a,EAAO6a,cACtBL,OAAQlX,SAAStD,EAAOwa,QACxB4M,iBAAkB9jB,SAAStD,EAAOonB,kBAClCjkB,OAAQnD,EAAOmD,OACfuX,WAAY1a,EAAO0a,WACnBC,oBAAqB3a,EAAO2a,oBAC5B1F,MAAOjV,EAAOiV,MACdE,OAAQnV,EAAOmV,OACflS,KAAMjD,EAAOiD,OAEd5C,eAAgB,CACf,CAACC,MAAOqmB,GAAwBvvB,UAAW,CAAC,UAAY,OAE3DmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,2CAA6C,CAC1DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC47B,GAAqB,CACpB5oB,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EACXuZ,gBAAiBA,EACjBC,cAAeA,EACfyP,MAAM,GACN,OAMd,KCzEe5vB,I,eAAAA,iBAAkB6C,aA7BjC,SAA4B5C,GAA2E,IAAxEC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EAAAzF,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,oBAAmBA,EAChG,OACE9Q,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCC,eAAA,OAAKE,UAAU,sBAAqBH,SAC/ByW,EACDxW,eAAC6G,GAAU,CAACR,UAAWA,IAEvBrG,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,iBAAgBnK,SAC7CC,eAACyW,GAAS,CAACL,OAAQ,gCAK3BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCvCag8B,GAAqBziC,YAAGC,QAAAC,YAAA,6cAuBxBwiC,GAAoB1iC,YAAGI,QAAAF,YAAA,4KAavByiC,GAAc3iC,YAAGK,QAAAH,YAAA,+OAejB0iC,GAAiB5iC,YAAGO,QAAAL,YAAA,iPAepB2iC,GAAkB7iC,YAAGQ,QAAAN,YAAA,0LC8GnBkG,qBAAkB6C,aA3JjC,SAAwB5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC3BqT,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACpB1G,EAAYtQ,EAAE,0BACpB0D,EAAqDC,YAASw4B,GAAoB,CAChFtwB,UAAW,CAAEoL,SAAUA,KADjBjV,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAGvCuC,EAA2BC,YAAYsoB,IAA/BC,EAA+CroB,YAAAH,EAAA,GAAjC,GAEhBqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAIP,GAAIgC,EAAS,OACX5B,eAACq8B,GAAmB,CAAAt8B,SAClBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACq8B,GAAmB,CAAAt8B,SAClBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,0CAKZ,IAAM08B,EAAWx6B,EAAKukB,gBAGtB,OAAKiW,EAASlzB,MAAMjK,OAYlBa,eAACq8B,GAAmB,CAAAt8B,SAClBC,eAACiO,GAAW,CAACiC,UAAWA,EACVC,cAAe8G,EACfvH,SAAU4sB,EAAS5sB,SACnBY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO6qB,EAAS5sB,SAASgC,WAE3BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBwU,gBAAgBjd,MAC3CsG,EAAWmC,EAAgBwU,gBAAgB3W,SAEjD,OAAOoC,EAAS3S,OACZ,CAGEknB,gBAAiB,CACftU,WAAYH,EAAeyU,gBAAgBtU,WAC3C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeyU,gBAAgBjd,OAAK4I,aAAKF,IACrDpC,aAGJkC,CACN,GAEJ,EAAE7R,SACZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,iCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,+BACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNu8B,EAASlzB,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACzBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAK8V,WAAW,OADHxS,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK+c,UADQzZ,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK+N,MADQzK,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,0BAA4BqH,EAAKgO,GAAG,EAChEzS,MAAM,YAAW/E,SACtBH,EAAE,kBAGPI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACd6kB,EAAe,CAAE3wB,UAAW,CAC1B8I,MAAO,CACPgD,KACAV,UAAWA,IAEhBnC,eAAgB,CACf,CAACC,MAAOonB,GAAoBtwB,UAAW,CAAC,SAAYoL,OACpDjC,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZiX,EAAc,qBAAyB,oBAAqB,CAC3D9B,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,cAnCYyG,kBAbzBA,eAmDJ,aAtGxB7M,eAACq8B,GAAmB,CAAAt8B,SAClBC,eAACiO,GAAW,CAACiC,UAAWA,EACVC,cAAe8G,EAAclX,SACzCC,eAAA,KAAAD,SACoDH,EAA/CiX,EAAiD,iCAAnC,oCAyG3B,KC7Ka0lB,GAAkB/pB,OAAaC,MAAM,CAC9CrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdyf,WAAY7M,OACTM,IAAI,KACJ0pB,UAAU58B,YAAE,+BACZ+S,SAAS/S,YAAE,yBCyGHF,qBAAkB6C,aA/FjC,SAA0B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACvBgD,EAAY,oBAClBuN,EAA8BC,YAAYooB,IAAlCQ,EAA8C1oB,YAAAH,EAAA,GAA7B,GAEzB,OACE5T,eAACq8B,GAAmB,CAAC7lB,UAAU,EAAKzW,SAClCC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,8BAA8BG,SAC3CC,eAACgU,KAAM,CACHC,cAAe,CAAE7N,KAAM,GAAIiZ,WAAY,GAAIiH,SAAU,KAAMhP,KAAM,IACjEnD,iBAAkBooB,GAClBnoB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBmoB,EAAkB,CAAEhxB,UAAW,CAC7B8I,MAAO,CACLnO,KAAMiO,EAAOjO,KACbiZ,WAAYhL,EAAOgL,WACnBiH,SAAUjS,EAAOiS,SACjBhP,KAAMjD,EAAOiD,OAEd5C,eAAgB,CACf,CAACC,MAAOonB,GAAoBtwB,UAAW,CAAC,UAAY,OAEvDmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,sCAAwC,CACrDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACtB3S,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,+BAA+BG,SAAA,CAClDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,aACLlG,UAAY+S,EAAOoM,WAAc,0BAA4B,eAC7D9L,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,aAAaqN,UAAU,OAAOvT,UAAU,wBAE7DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,6BAA6BG,SAAA,CAChDO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,WACLlG,UAAY+S,EAAOqT,SAAY,0BAA4B,eAC3D/S,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,KAAIpC,SAAEH,EAAE,gCACtBI,eAAA,UAAQmC,MAAM,KAAIpC,SAAEH,EAAE,mCAExBI,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,wBAE3DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAOqE,KAAQ,0BAA4B,eACvD/D,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAG3DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,2BAIR,OAMvB,KC8CeF,qBAAkB6C,aAtIjC,SAA2B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAC/BkU,EAAKnU,EAAM2K,OAAOwJ,GAClBlR,EAAY,oBACZ6J,EAAYtQ,EAAE,+BACpB0D,EAAiCC,YAASy4B,GAAmB,CAC3DvwB,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA0BC,YAAYqoB,IAA9BQ,EAA6C3oB,YAAAH,EAAA,GAAhC,GAErB,GAAIhS,EAAS,OACX5B,eAACq8B,GAAmB,CAAC7lB,UAAU,EAAKzW,SAClCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACq8B,GAAmB,CAAC7lB,UAAU,EAAKzW,SAClCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,wCAKZ,IAAMiY,EAAc/V,EAAKwd,eAIzB,OAHAhnB,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAGV9B,eAACq8B,GAAmB,CAAC7lB,UAAU,EAAKzW,SAClCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACHC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClBiZ,WAAYxH,EAAYwH,WACxBiH,SAAUzO,EAAYyO,SACtBhP,KAAMO,EAAYP,MAEpBnD,iBAAkBooB,GAClBnoB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZqoB,EAAc,CAAEjxB,UAAW,CACzB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,KACbiZ,WAAYhL,EAAOgL,WACnBiH,SAAUjS,EAAOiS,SACjBhP,KAAMjD,EAAOiD,OAEd5C,eAAgB,CACf,CAACC,MAAOonB,GAAoBtwB,UAAW,CAAC,UAAY,OAEvDmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAcjG,EAANqH,OAAM,OAC5B/T,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,+BAA+BG,SAAA,CAClDC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,aACLlG,UAAY+S,EAAOoM,WAAc,0BAA4B,eAC7D9L,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,aAAaqN,UAAU,OAAOvT,UAAU,wBAE7DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,6BAA6BG,SAAA,CAChDO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,WACLlG,UAAY+S,EAAOqT,SAAY,0BAA4B,eAC3D/S,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,KAAIpC,SAAEH,EAAE,gCACtBI,eAAA,UAAQmC,MAAM,KAAIpC,SAAEH,EAAE,mCAExBI,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,wBAE3DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAOqE,KAAQ,0BAA4B,eACvD/D,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAGzDI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAETH,EAAE,2BAIR,OAMzB,KCxJa+8B,GAAqBnqB,OAAaC,MAAM,CACjDoP,UAAWrP,OACRgqB,UAAU58B,YAAE,sBACZ+S,SAAS/S,YAAE,uBACdkiB,QAAStP,OACNgqB,UAAU58B,YAAE,sBACZ+S,SAAS/S,YAAE,yBCsDHF,qBAAkB6C,aAjDjC,SAAqC5C,GAA0G,IAAvGC,EAACD,EAADC,EAAYyU,GAAF1U,EAAP0D,QAAe1D,EAAN0U,QAAQpB,EAAMtT,EAANsT,OAAcD,GAAFrT,EAAJmC,KAAkBnC,EAAZqT,cAAY4pB,EAAAj9B,EAAEigB,uBAAe,IAAAgd,EAAC,SAAAhsB,GAAC,OAAEA,CAAC,EAAAgsB,EAAAC,EAAAl9B,EAAEkgB,qBAAa,IAAAgd,EAAC,SAAAjsB,GAAC,OAAEA,CAAC,EAAAisB,EAE9H,OAFwIl9B,EAAPoX,QACjIze,QAAQC,IAAI0a,GAEVjT,eAACkT,KAAM,CAAAnT,SACLO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO4O,UAAa,0BAA4B,eAC5DjG,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GACT8S,EAAc,YAAa9S,GAC3B6S,EAAgB,aAAa,EAC/B,IAGF5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO6O,QAAW,0BAA4B,eAC1DlG,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GACT8S,EAAc,UAAW9S,GACzB6S,EAAgB,WAAW,EAC7B,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DI,gBAACF,KAAKqF,IAAG,CAAA1F,SAAA,CACPC,eAAA,SACAA,eAAC2E,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,UACN5E,UAAU,kBACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,+CAMf,KCSeF,I,GAAAA,iBAAkB6C,aArDjC,SAAmC5C,GAAsC,IAAlCC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAUgX,EAAOpX,EAAPoX,QACrD8K,EAAYlW,OAASkR,QAAQ,SAC7BiF,EAAYnW,OAASmR,MAAM,SAEjC,OACE9c,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAkB4G,SAAU5G,EAAE,kCAAkCG,SACpFC,eAAA,OAAKE,UAAU,0BAOjBF,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACfC,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAW,IAAI3e,KAAK2e,GACpBC,QAAS,IAAI5e,KAAK4e,IAEpB3N,iBAAkBwoB,GAClBvoB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnByC,EAAQ,CACN8K,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASxD,GAAejK,EAAOyN,WAEjCxN,GAAc,EAChB,EAAEvU,SAED,SAAA+M,GAAA,IAAGkG,EAAYlG,EAAZkG,aAAcC,EAAMnG,EAANmG,OAAQoB,EAAMvH,EAANuH,OAAQmO,EAAO1V,EAAP0V,QAASyD,EAAYnZ,EAAZmZ,aAAcrG,EAAe9S,EAAf8S,gBAAiBC,EAAa/S,EAAb+S,cAAa,OACvF7f,eAAC88B,GAA4B,CAC3B9pB,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTyD,aAAcA,EACdrG,gBAAiBA,EACjBC,cAAeA,GACf,IAGH9f,aAOf,KClEag9B,GAAwCzjC,YAAGC,QAAAC,YAAA,maC+FzCkG,qBAAkB6C,aA9EjC,SAA+B5C,GAA4B,IAAzBC,EAACD,EAADC,EAC1BsQ,GADqCvQ,EAARqe,SAAiBre,EAAP0D,QAC3BzD,EAAE,mCACdiiB,EAAYlW,OAASkR,QAAQ,SAC7BiF,EAAYnW,OAASmR,MAAM,SAKjCxZ,EAA0CC,YAASw5B,GAAuC,CACxFtxB,UAAW,CACToW,UAAWvD,GAAeuD,GAC1BC,QAASxD,GAAewD,IAE1BjW,YAAa,iBALPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAQ9B,GAAInV,EAAS,OACX5B,eAACg9B,GAA0B,CAACjmB,QAASA,EAAQhX,SAC3CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACg9B,GAA0B,CAACjmB,QAASA,EAAQhX,SAC3CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,gDAKZ,IAAMq9B,EAAkBn7B,EAAKo7B,6BAG7B,OAAKD,EAAgBn7B,KAAK3C,OAWxBa,eAACg9B,GAA0B,CAACjmB,QAASA,EAAQhX,SAC3CC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,kCACd8P,SAAUutB,EAAgBvtB,SAC1BY,aAAa,EAAMvQ,SAE7BO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,iCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,6CACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBAJNiN,kBAOlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRk9B,EAAgBn7B,KAAKwK,KAAI,SAAAC,GAAA,IAAE+S,EAAc/S,EAAd+S,eAAgBmL,EAAUle,EAAVke,WAAYD,EAAeje,EAAfie,gBAAe,OACrElqB,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SAAEuf,EAAelZ,OAC3B9F,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CAAEuf,EAAeD,WAAW,QACtCrf,eAACiS,KAAMxM,IAAG,CAAA1F,SAAEyqB,IACZxqB,eAACiS,KAAMxM,IAAG,CAAA1F,SAAE0qB,MACF,aA/BtBzqB,eAACg9B,GAA0B,CAACjmB,QAASA,EAAQhX,SAC3CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SACGH,EAAE,4CAmCb,KChFMu9B,GAAW,SAAAjvB,GAAAC,aAAAgvB,EAAAjvB,GAAA,IAAAE,EAAAC,aAAA8uB,GACf,SAAAA,EAAYxtB,GAAQ,IAADrB,EAGC,OAHDC,aAAA,KAAA4uB,GACjB7uB,EAAAF,EAAAQ,KAAA,KAAMe,GACNrX,QAAQC,IAAI,uBACZD,QAAQC,IAAIoX,GAAMrB,CACpB,CA8FI,OA9FHwB,aAAAqtB,EAAA,EAAAptB,IAAA,SAAA5N,MAED,WACE,IAAMvC,EAAIP,KAAKsQ,MAAM/P,EACfiO,EAAYjO,EAAE,0BAEpB,OACEI,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,mBACtBU,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAAC0N,GAAoB,CAACzD,WAAW,OACXC,SAAS,qBAAoBnK,SACjDC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,+BACNA,EAAE,mCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,kCAKnD3N,eAAC0N,GAAoB,CAACzD,WAAW,OACXC,SAAS,uBAAsBnK,SACnDC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,iCACNA,EAAE,qCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,oCAKnD3N,eAAC0N,GAAoB,CAACzD,WAAW,OACXC,SAAS,qBAAoBnK,SACjDC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,+BACNA,EAAE,mCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,kCAKnD3N,eAAC0N,GAAoB,CAACzD,WAAW,OACXC,SAAS,iBAAgBnK,SAC7CC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,2BACNA,EAAE,+BACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,8BAKnD3N,eAAC0N,GAAoB,CAACzD,WAAW,OACXC,SAAS,0BAAyBnK,SACtDC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,qCACNA,EAAE,yCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,wCAKnD3N,eAAC0N,GAAoB,CAACzD,WAAW,OACXC,SAAS,gCAA+BnK,SAC5DC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,4CACNA,EAAE,gDACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,wDAS5D,KAACwvB,CAAA,CAnGW,CAASzsB,aAuGXhR,iBAAkB6C,YAAW46B,KCnE7Bz9B,I,eAAAA,iBAAkB6C,aApCjC,SAAoC5C,GAQnC,IAPCC,EAACD,EAADC,EAGAG,GAFOJ,EAAP0D,QACK1D,EAALyD,MACQzD,EAARI,UAAQ4yB,EAAAhzB,EACRizB,eAAO,IAAAD,GAAMA,EAAApc,EAAA5W,EACb6W,gBAAQ,IAAAD,GAAMA,EAAAzF,EAAAnR,EACd0G,iBAAS,IAAAyK,EAAC,6BAA4BA,EAEtC,OACE9Q,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChC6yB,EACA5yB,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,yBAAwBnK,SACrDC,eAACyW,GAAS,CAACL,OAAM,qCAEjB,GAEFI,EAAYxW,eAAC6G,GAAU,CAACR,UAAWA,IAAgB,QAGzDrG,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KC9Caq9B,GAAiC9jC,YAAGC,QAAAC,YAAA,oZAuBpC6jC,GAAgC/jC,YAAGI,QAAAF,YAAA,uXAsBnC8jC,GAAgChkC,YAAGK,QAAAH,YAAA,qNAUnC+jC,GAAmCjkC,YAAGO,QAAAL,YAAA,yKAQtCgkC,GAA4ClkC,YAAGQ,QAAAN,YAAA,kMCuF7CkG,qBAAkB6C,aApIjC,SAAgC5C,GAAwB,IAAtBC,EAACD,EAADC,EAC1B60B,GADoC90B,EAAP0D,QAAc1D,EAALyD,MACxBK,qBAAWxC,KACzB6Z,EAAa2Z,EAAY3Z,WACzB5J,EAAuBujB,EAAYvjB,qBACnChB,EAAYtQ,EAAE,mCAEpB0D,EAA4CC,YAAS65B,IAA7Cx7B,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAC9BuC,EAAwCC,YAAY0pB,IAA7CE,EAA8E1pB,YAAAH,EAAA,GAAjD,GAGpC,GAAIhS,EAAS,OACX5B,eAAC09B,GAA2B,CAAC9K,SAAS,EAAK7yB,SACzCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAAC09B,GAA2B,CAAC9K,SAAS,EAAK7yB,SACzCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,iDAKZtH,QAAQC,IAAIuJ,GAEZ,IAAM67B,EAA0B77B,EAAK67B,wBAErC,OAAKA,EAAwBv0B,MAAMjK,OASjCa,eAAC09B,GAA2B,CAAC9K,SAAS,EAAK7yB,SACzCC,eAACiO,GAAW,CAACiC,UAAWA,EACtBR,SAAUiuB,EAAwBjuB,SAClCY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAOksB,EAAwBjuB,SAASgC,WAE1CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB8rB,wBAAwBv0B,MACnDsG,EAAWmC,EAAgB8rB,wBAAwBjuB,SAEzD,OAAOoC,EAAS3S,OACZ,CAGEw+B,wBAAyB,CACvB5rB,WAAYH,EAAe+rB,wBAAwB5rB,WACnD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe+rB,wBAAwBv0B,OAAK4I,aAAKF,IAC7DpC,aAGJkC,CACJ,GAEN,EAAE7R,SACAO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,0CACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sDACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,uDACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,+DACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACR49B,EAAwBv0B,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACxCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKipB,WAAW5mB,OAAOsF,KAEjClR,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKq0B,qBAAqBhyB,OAAOkP,KAE3C9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKs0B,wBAER79B,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKu0B,+BAERx9B,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,mCAAA0M,OAAqCvF,EAAKgO,IAAKxX,SACrDC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,4DAGPI,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,gDACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CAAI4L,KAAOpC,EAAKw0B,YAAYnyB,OAAOsF,GAAsB,IAAG,MACzEvF,KAAOpC,EAAKq0B,qBAAqBhyB,OAAOkP,MAC3C1B,WAAYxZ,EAAE,qCACdgb,eAAgB6iB,EAChBnkB,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACjB,CAACC,MAAOyoB,OAGhB,EAAEr9B,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,qBAxCxCyG,eA2CJ,aA1FtB7M,eAAC09B,GAA2B,CAAC9K,SAAS,EAAK7yB,SACzCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,6CA+Fd,KChHeF,iBAAkB6C,aAxBG,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQuL,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAexZ,EAAS1G,EAAT0G,UAAS,OACxH/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACPzH,QAAQC,IAAI8b,GACb/T,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oDAAoDG,SAAA,CACvEC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO2qB,oBAAuB,0BAA4B,eACtEhiB,SAAUvH,EAAOupB,oBACjB9hB,SAAU,SAAC/O,GACT8S,EAAc,sBAAuB9S,GACrC6S,EAAgB,uBAAuB,EACzC,EACA5D,OAAQ,kBAAM4D,EAAgB,uBAAuB,EAAK,IAE5D5f,eAACwT,KAAY,CAACpN,KAAK,sBAAsBqN,UAAU,OAAOvT,UAAU,2BAGxEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAACqgB,GAAgB,CAAC3M,SAAUV,IAC5BhT,eAACsgB,GAAgB,CAACja,UAAWA,SAE5B,KCmCI3G,qBAAkB6C,aAlDjC,SAAmC5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACjCgD,EAAY,6BAClBuN,EAAuCC,YAAYypB,IAA3CU,EAAyEjqB,YAAAH,EAAA,GAA/C,GAElC,OACE5T,eAAC09B,GAA2B,CAAClnB,UAAU,EAAKzW,SAC1CC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,uCAAuCG,SACpDC,eAACgU,KAAM,CACLC,cAAe,CAAE2pB,oBAAqB,IAAI16B,KAAKyI,OAASsyB,SAAS,EAAG,UAEpE7pB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjB0pB,EAA2B,CAAEvyB,UAAW,CACtC8I,MAAO,CACLqpB,oBAAqBtf,GAAejK,EAAOupB,uBAE5ClpB,eAAgB,CACf,CAACC,MAAOyoB,OAEXxoB,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,+CAAiD,CAC9DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcqB,EAAMrH,EAANqH,OAAQpB,EAAMjG,EAANiG,OAAQ2M,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC5D7f,eAACk+B,GAA2B,CAC1BlrB,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRuL,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GACX,OAMhB,KCtBe3G,qBAAkB6C,aAnCjC,SAAqB5C,GAajB,IAZFC,EAACD,EAADC,EAGAsZ,GAFKvZ,EAALyD,MACOzD,EAAP0D,QACU1D,EAAVuZ,YACAC,EAAcxZ,EAAdwZ,eACAC,EAAUzZ,EAAVyZ,WACAwB,EAAcjb,EAAdib,eACAujB,EAAuBx+B,EAAvBw+B,wBAAuB73B,EAAA3G,EACvBO,iBAAS,IAAAoG,EAAC,GAAEA,EAAAwT,EAAAna,EACZoa,mBAAW,IAAAD,EAAC,WAAUA,EAAAzD,EAAA1W,EACtB2W,kBAAU,IAAAD,EAAC,GAAEA,EAAA6D,EAAAva,EACbwa,uBAAe,IAAAD,EAAC,WAAUA,EAE1B,OACEla,eAAA,UAAQE,UAAS,YAAA4O,OAAciL,EAAW,YAAAjL,OAAW5O,GACnDqG,MAAO3G,EAAE,kBACT6Q,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYlZ,eAAA,KAAAD,SAAImZ,IAChBC,eAAgBA,EAChBC,WAAYA,EACZwB,eAAgBA,EAChBtB,kBAAmB6kB,GAEzB,EAAEp+B,SACAO,gBAAA,QAAMJ,UAAWia,EAAgBpa,SAAA,CAC/BC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,YAAY,IAAEkQ,MAI7C,KCPe5W,qBAAkB6C,aAvBjC,SAAwC5C,GAAiE,IAA/DC,EAACD,EAADC,EAAmBG,GAATJ,EAAP0D,QAAc1D,EAALyD,MAAezD,EAARI,UAAUyG,EAAQ7G,EAAR6G,SAAU43B,EAAoBz+B,EAApBy+B,qBAG/E,OACEp+B,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,mCAAoC4G,SAAUA,EAASzG,SAC3EO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCO,gBAACoE,IAAI,CAACtC,GARL,6BASKlC,UAAU,oBAAmBH,SAAA,CACjCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAAe,IAAExG,EAAE,mBAE3Cw+B,OAGNr+B,QAKX,KC+JeL,I,GAAAA,iBAAkB6C,aA5KjC,SAAoC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAC3CqxB,EAAchxB,qBAAWxC,IACzB6Z,EAAa2Z,EAAY3Z,WACzB5J,EAAuBujB,EAAYvjB,qBACnCqG,EAAKnU,EAAM2K,OAAOwJ,GAExBjU,EAAiCC,YAAS85B,GAA+B,CACvE5xB,UAAW,CAAE8L,GAAIA,GACjBnG,aAAc,MAFRxP,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB8R,EAAyBC,YAAY2pB,IAA9Ba,EAAwEtqB,YAAAH,EAAA,GAA1D,GAGrB,GAAIhS,EAAS,OACX5B,eAACs+B,GAA+B,CAAAv+B,SAC9BC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,wCAAwCG,SACrDC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMtC,GAAIa,EAAO,OACT7B,eAACs+B,GAA+B,CAAAv+B,SAC9BC,eAAA,KAAAD,SAAIH,EAAE,+CAIV,IAAM2+B,EAAyBz8B,EAAKy8B,uBACpCjmC,QAAQC,IAAIgmC,GACZ,IAAMruB,EAAYtQ,EAAE,wCAA0C,IAAM+L,KAAO4yB,EAAuBX,qBAAqBhyB,OAAOkP,GACxHtU,EAAW5G,EAAE,wBAA0B,IAAM+L,KAAO4yB,EAAuB/L,WAAW5mB,OAAOsF,GAE7FktB,EAAuBp+B,eAACw+B,GAAY,CACxCtlB,WAAYtZ,EAAE,yDACduZ,eAAgBnZ,eAAA,KAAAD,SAAGO,gBAAA,KAAAP,SAAA,CAAIw+B,EAAuBV,sBAAsB,IAAEj+B,EAAE,iEACxEwZ,WAAYxZ,EAAE,8CACdgb,eAAgByjB,EAChBF,wBAAyB,CACvB1yB,UAAW,CAAC8I,MAAO,CAACgD,GAAIA,KAE1BwC,YAAY,kBACZzD,WAAW,kBACX6D,gBAAgB,eAGlB,OAAKokB,EAAuBE,SAASr1B,MAAMjK,OAWzCa,eAACs+B,GAA+B,CAAC93B,SAAUA,EAAU43B,qBAAsBA,EAAqBr+B,SAC9FC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC4G,KAAI,CAACX,MAAO2J,EAAUnQ,SAAA,CACrBC,eAACkH,KAAKokB,MAAK,CAACxmB,MAAM,UAAS/E,SACxBH,EAAE,yDAELI,eAAA,SAAAD,SACEO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SACbH,EAAE,kBAELI,eAACiS,KAAMC,UAAS,CAAAnS,SACbH,EAAE,mBAELI,eAACiS,KAAMC,UAAS,CAAAnS,SACbH,EAAE,wBAELI,eAACiS,KAAMC,UAAS,CAAAnS,SACbH,EAAE,6BAITI,eAACiS,KAAM9K,KAAI,CAAApH,SACRw+B,EAAuBE,SAASr1B,MAAMkD,KAAI,SAAAC,EAAWib,GAAK,IAAbje,EAAIgD,EAAJhD,KAAI,OAChDjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SAENC,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyBvF,EAAKub,QAAQvN,GAAE,YAAWxX,SACxDwJ,EAAKub,QAAQC,aAIpB/kB,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKub,QAAQmG,QAEhBjrB,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKub,QAAQ4Z,WAAW9yB,OAAOsF,KAEzClR,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKub,QAAQ0N,WAAW5mB,OAAOsF,OAE/B,oBAtD5BlR,eAACs+B,GAA+B,CAAC93B,SAAUA,EAASzG,SAClDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sDAuHb,K,sEC5La++B,GAAgCrlC,YAAGC,QAAAC,YAAA,oLCejCkG,kBATS,SAAHC,GAAA,IAAMC,EAACD,EAADC,EAAC,OAC1BI,eAAA,OAAKE,UAAU,sBAAqBH,SAClCO,gBAACoE,IAAI,CAACtC,GAAG,WACHlC,UAAU,oBAAmBH,SAAA,CAC/BC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAAe,IAAExG,EAAE,mBAAmB,IAAEA,EAAE,qBAEjE,ICGHvB,aAAa0E,QAAQxE,EAAKlD,4BAC7B/C,QAAQC,IAAI,iDACZ8F,aAAaC,QAAQC,EAAKlD,yBAA0BsQ,OAASC,OAAO,UAqDvDlM,qBAAkB6C,aAlDjC,SAA+B5C,GAA4C,IAAxCC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAU0U,EAAI9U,EAAJ8U,KAAMsC,EAAOpX,EAAPoX,QAC7D,OACE/W,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAkB4G,SAAU5G,EAAE,uBAAyB,IAAM6U,EAAK1U,SACtFO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAC4+B,GAAe,IAChBt+B,gBAACqE,KAAOsB,KAAI,CAAC/F,UAAU,2CAA0CH,SAAA,CAC/DC,eAAC2E,KAAM,CACLtC,KAAK,eACLyC,MAAM,YACN2L,QAAU,WACR,IAAIouB,EAAelnB,SAAStZ,aAAa0E,QAAQxE,EAAKlD,2BAA6B,EACnFgD,aAAaC,QAAQC,EAAKlD,yBAA0BwjC,GAEpD9nB,EAAQ,CAACtC,KAAMoqB,GACnB,IACA7+B,eAAC2E,KAAM,CACLtC,KAAK,SACLyC,MAAM,YACN2L,QAAU,WACR,IAAIquB,EAAcnnB,SAAShM,OAASC,OAAO,SAC3CvN,aAAaC,QAAQC,EAAKlD,yBAA0ByjC,GAEpDxmC,QAAQC,IAAIumC,GAEZ/nB,EAAQ,CAACtC,KAAMqqB,GACnB,IACA9+B,eAAC2E,KAAM,CACLtC,KAAK,gBACLyC,MAAM,YACN2L,QAAU,WACR,IAAIsuB,EAAWpnB,SAAStZ,aAAa0E,QAAQxE,EAAKlD,2BAA6B,EAC/EgD,aAAaC,QAAQC,EAAKlD,yBAA0B0jC,GAEpDhoB,EAAQ,CAACtC,KAAMsqB,GACnB,YAIN/+B,eAACI,KAAKC,IAAG,CAAAN,SACNA,UAMb,KC2CeL,I,GAAAA,iBAAkB6C,aA7FjC,SAA2B5C,GAAmB,IAAfC,EAACD,EAADC,EACvB6U,GADiC9U,EAAP0D,QACnBsU,SAAStZ,aAAa0E,QAAQxE,EAAKlD,4BAC1C2jC,EAAoB,wCAA0CvqB,EAC9DwqB,EAAkB,sCAAwCxqB,EAChEb,EAAyBC,YAAYpa,GAA9B2e,EAA4CrE,YAAAH,EAAA,GAA9B,GAErBtQ,EAA0CC,YAASo7B,GAA+B,CAChFlzB,UAAW,CAAEgJ,KAAMA,KADb7S,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAI9B,GAAInV,EACF,OACE5B,eAACk/B,GAAsB,CAACzqB,KAAMA,EAAMsC,QAASA,EAAQhX,SACnDC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,iBAAiBG,SAC9BC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,QAMtC,GAAIa,EACF,OACE7B,eAACk/B,GAAsB,CAACzqB,KAAMA,EAAMsC,QAASA,EAAQhX,SACnDC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,iBAAiBG,SAC7BH,EAAE,gCAMX,IAAMu/B,EAAalgB,GAAmBrf,GAGhCw/B,EAAYt9B,EAAKu9B,0BAA0BC,OAAOhzB,KAAI,SAACizB,EAAM/X,GAAK,OAAAW,wBAAA,GACjEoX,GAAI,IAAEC,UAAWL,EAAW3X,IAAM,IAGzC,OACElnB,gBAAC4+B,GAAsB,CAACzqB,KAAMA,EAAMsC,QAASA,EAAQhX,SAAA,CACjDC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,iBAAiBG,SAC9BC,eAACy/B,KAAmB,CAACC,MAAM,OAAOC,OAAQ,IAAI5/B,SAC5CO,gBAACs/B,KAAS,CACRF,MAAO,IACPG,OAAQ,IACR/9B,KAAMs9B,EACNU,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,IACRngC,SAAA,CAEFC,eAACmgC,KAAK,CAACC,QAAQ,cACfpgC,eAACqgC,KAAK,CAACX,MAAO,KACd1/B,eAACsgC,KAAO,IACRtgC,eAACugC,KAAM,IACPvgC,eAACwgC,KAAI,CAACl8B,KAAK,WAAW87B,QAAQ,OAAOK,OAAQC,KAAa,KAAGC,YAAa,GAAKC,KAAMF,KAAa,OAClG1gC,eAACwgC,KAAI,CAACl8B,KAAK,WAAW87B,QAAQ,SAASK,OAAQC,KAAc,MAAGC,YAAa,GAAKC,KAAMF,KAAc,iBAK9GpgC,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CAEdC,eAAC2E,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,YACNkU,cAAc,IACd3W,KAAK,iBACLoO,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAAS47B,EAC7B,EAACl/B,SAEDH,EAAE,2CAGLI,eAAC2E,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,YACNkU,cAAc,IACd3W,KAAK,iBACLoO,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAAS27B,EAC7B,EAACj/B,SAEDH,EAAE,kDAKf,KC7GaihC,GAAoBvnC,YAAGC,QAAAC,YAAA,m5BCY/B6E,aAAa0E,QAAQxE,EAAKjD,wBAC7BhD,QAAQC,IAAI,iDACZ8F,aAAaC,QAAQC,EAAKjD,qBAAsBqQ,OAASC,OAAO,UAiDnDlM,qBAAkB6C,aA9CjC,SAA2B5C,GAAiD,IAA7CC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAU0U,EAAI9U,EAAJ8U,KAAIqsB,EAAAnhC,EAAEoX,eAAO,IAAA+pB,EAAC,SAAAlwB,GAAC,OAAEA,CAAC,EAAAkwB,EACrE,OACE9gC,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAkB4G,SAAU5G,EAAE,mBAAqB,IAAM6U,EAAK1U,SAClFO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAC4+B,GAAe,IAChBt+B,gBAACqE,KAAOsB,KAAI,CAAC/F,UAAU,2CAA0CH,SAAA,CAC/DC,eAAC2E,KAAM,CACLtC,KAAK,eACLyC,MAAM,YACN2L,QAAU,WACR,IAAIouB,EAAelnB,SAAStZ,aAAa0E,QAAQxE,EAAKjD,uBAAyB,EAC/E+C,aAAaC,QAAQC,EAAKjD,qBAAsBujC,GAEhD9nB,EAAQ,CAACtC,KAAMoqB,GACnB,IACA7+B,eAAC2E,KAAM,CACLtC,KAAK,SACLyC,MAAM,YACN2L,QAAU,WACR,IAAIquB,EAAcnnB,SAAShM,OAASC,OAAO,SAC3CvN,aAAaC,QAAQC,EAAKjD,qBAAsBwjC,GAEhD/nB,EAAQ,CAACtC,KAAMqqB,GACnB,IACA9+B,eAAC2E,KAAM,CACLtC,KAAK,gBACLyC,MAAM,YACN2L,QAAU,WACR,IAAIsuB,EAAWpnB,SAAStZ,aAAa0E,QAAQxE,EAAKjD,uBAAyB,EAC3E+C,aAAaC,QAAQC,EAAKjD,qBAAsByjC,GAEhDhoB,EAAQ,CAACtC,KAAMsqB,GACnB,YAIHh/B,QAKb,K,oBC0EeL,qBAAkB6C,aA3HjC,SAA8B5C,GAOzB,IANHC,EAACD,EAADC,EAEAiC,GADOlC,EAAP0D,QACK1D,EAALkC,OACAD,EAAOjC,EAAPiC,QACAsO,EAASvQ,EAATuQ,UACApO,EAAInC,EAAJmC,KAGA,GAAIF,EACF,OACEtB,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACE,QAAQ,EAAMD,QAAQ,UAIpCf,eAACI,KAAKqF,IAAG,CAACqB,GAAI,OAMhBjF,IACDzB,KAAKC,IACHD,KAAKqF,IACHyB,KACEA,KAAKC,KACHvH,EAAE,6BASb,IAAMu/B,EAAalgB,GAAmBrf,GAEhCw/B,EAAYt9B,EAAKw9B,OAAOhzB,KAAI,SAACizB,EAAM/X,GAAK,OAAAW,wBAAA,GACvCoX,GAAI,IAAEC,UAAWL,EAAW3X,IAAM,IAGzC,OACElnB,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC4G,KAAI,CAACX,MAAO2J,EAAUnQ,SAAA,CACrBC,eAACy/B,KAAmB,CAACC,MAAM,OAAOC,OAAQ,IAAI5/B,SAC5CO,gBAACygC,KAAQ,CACPrB,MAAO,IACPG,OAAQ,IACR/9B,KAAMs9B,EACNU,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,IACRngC,SAAA,CAEFC,eAACmgC,KAAK,CAACC,QAAQ,cACfpgC,eAACqgC,KAAK,IACNrgC,eAACsgC,KAAO,IACRtgC,eAACugC,KAAM,IACPvgC,eAACghC,KAAG,CAACZ,QAAQ,QAAQQ,KAAMF,KAAa,OACxC1gC,eAACghC,KAAG,CAACZ,QAAQ,WAAWa,QAAQ,IAAIL,KAAMF,KAAc,QACxD1gC,eAACghC,KAAG,CAACZ,QAAQ,MAAMa,QAAQ,IAAIL,KAAMF,KAAe,cAGxD1gC,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACTH,EAAE,4CAITI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,gBAAgBG,SAC7BC,eAAA,SAAAD,SACAC,eAACiS,KAAK,CAAC7F,OAAK,EAAArM,SACVC,eAACiS,KAAM9K,KAAI,CAAApH,SACR+B,EAAKw9B,OAAOhzB,KAAI,SAACizB,EAAM/X,GAAK,OAC3BlnB,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,6BAA4BH,SAC9Co/B,EAAW3X,KAEdxnB,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,wCAAuCH,SACzDw/B,EAAmB,iBAEZ,gBAiC5B,KC9Ee7/B,I,MAAAA,iBAAkB6C,aAhDjC,SAAuB5C,GAAmB,IAAfC,EAACD,EAADC,EACnB6U,GAD6B9U,EAAP0D,QACfsU,SAAStZ,aAAa0E,QAAQxE,EAAKjD,wBAEhDgI,EAA0CC,YAASs9B,GAAmB,CACpEp1B,UAAW,CAAEgJ,KAAMA,KADb7S,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAI9B,OACEzW,gBAAC4gC,GAAkB,CAACzsB,KAAMA,EAAMsC,QAASA,EAAQhX,SAAA,CAE/CC,eAACmhC,GAAqB,CACpBv/B,QAASA,EACTC,MAAOA,EACPqO,UAAWtQ,EAAE,iBACbkC,KAAMA,GAAQA,EAAKs/B,sBAGrBphC,eAACmhC,GAAqB,CACpBv/B,QAASA,EACTC,MAAOA,EACPqO,UAAWtQ,EAAE,yBACbkC,KAAMA,GAAQA,EAAKu/B,8BAGrBrhC,eAACmhC,GAAqB,CACpBv/B,QAASA,EACTC,MAAOA,EACPqO,UAAWtQ,EAAE,uBACbkC,KAAMA,GAAQA,EAAKw/B,4BAGrBthC,eAACmhC,GAAqB,CACpBv/B,QAASA,EACTC,MAAOA,EACPqO,UAAWtQ,EAAE,yBACbkC,KAAMA,GAAQA,EAAKy/B,6BAGrBvhC,eAACmhC,GAAqB,CACpBv/B,QAASA,EACTC,MAAOA,EACPqO,UAAWtQ,EAAE,iBACbkC,KAAMA,GAAQA,EAAK0/B,wBAI3B,K,UCrDaC,GAAoCjvB,OAAaC,MAAM,CAChEgC,KAAMjC,OACHG,SAAS/S,YAAE,uBACd4U,MAAOhC,OACJG,SAAS/S,YAAE,uBACd4E,WAAYgO,OACTG,SAAS/S,YAAE,yBCPL8hC,GAAwBpoC,YAAGC,QAAAC,YAAA,gJAa3BmoC,GAAwCroC,YAAGI,QAAAF,YAAA,ijBCgBzCkG,qBAAkB6C,aAlBjC,SAA0C5C,GAA0B,IAAxBC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAEtD,OACEC,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAiBG,SACrCC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC4+B,GAAe,QAGnB7+B,QAKX,KCoDiBL,iBAAkB6C,aApEE,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAY+f,GAAFhgB,EAAP0D,QAAkB1D,EAATggB,WAAW3M,EAAYrT,EAAZqT,aAA8CC,GAAnBtT,EAAbkgB,cAA8BlgB,EAAfigB,gBAAuBjgB,EAANsT,QAActT,EAAN0U,OAAiB1U,EAAT0G,UAAS,OAClIrG,eAACkT,KAAM,CAAAnT,SACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,SACJ8B,KAAK,OACLlG,UAAY+S,EAAOwB,KAAQ,0BAA4B,eACvDlB,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAGzDF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,QACLlG,UAAY+S,EAAOuB,MAAS,0BAA4B,eACxDjB,aAAa,MAAKxT,SAAA,CAEtBC,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,4BAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,6BAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,0BAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,0BAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,wBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,yBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,yBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,2BAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,8BAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,4BAATiN,gBACxB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,6BAATiN,gBACxB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,6BAATiN,mBAE1B7M,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,0BAG1DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,aACLlG,UAAY+S,EAAOzO,WAAc,0BAA4B,eAC7D+O,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAUiiB,YAAYx4B,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACtCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,OAG/D7M,eAACwT,KAAY,CAACpN,KAAK,aAAaqN,UAAU,OAAOvT,UAAU,6BAIjEF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPC,eAAC2E,KAAM,CACHG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAExBH,EAAE,2DAKJ,KCkFEF,I,GAAAA,iBAAkB6C,aAxIjC,SAAsC5C,GAAgB,IAAdC,EAACD,EAADC,EAChC60B,GAD0C90B,EAAP0D,QACrBI,qBAAWxC,KACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBAEzB+E,EAAYtQ,EAAE,0CAEpB0D,EAAiCC,YAASm+B,IAAlC9/B,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACxB+/B,EAKMC,aAAcH,IAAuCI,EAAAhuB,YAAA8tB,EAAA,GALnDG,EAA0BD,EAAA,GAAAE,EAAAF,EAAA,GACxBG,EAAYD,EAApBE,OACSC,EAAaH,EAAtBrgC,QACOygC,EAAWJ,EAAlBpgC,MACMygC,EAAUL,EAAhBngC,KAGF,OAAIF,EAEA5B,eAACuiC,GAAiC,CAAAxiC,SAChCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,UAOpCa,GAASwgC,GACX/pC,QAAQuJ,MAAMA,GAEZ7B,eAACuiC,GAAiC,CAAAxiC,SAChCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,mCAQXU,gBAACiiC,GAAiC,CAAAxiC,SAAA,CAChCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACPC,cAAe,CACbQ,KAAM9I,OAAS8I,OACfD,MAAO7I,OAAS6I,QAAQ,EACxBhQ,WAAY,IAEd2P,iBAAkBstB,GAClBrtB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAGZ2tB,EAA2B,CACzBv2B,UAAW,CACTgJ,KAAMkD,SAAStD,EAAOI,MACtBD,MAAOmD,SAAStD,EAAOG,OACvBhQ,WAAY6P,EAAO7P,cAIvB8P,GAAc,EAElB,EAAEvU,SAED,SAAA+M,GAAA,IAAGkG,EAAYlG,EAAZkG,aAAc6M,EAAa/S,EAAb+S,cAAeD,EAAe9S,EAAf8S,gBAAiB3M,EAAMnG,EAANmG,OAAQoB,EAAMvH,EAANuH,OAAevH,EAAP0V,QAAO,OACvExiB,eAACwiC,GAA4B,CAC3B7iB,UAAW7d,EACXkR,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,GACR,MAON6tB,GAAgBE,EAAiBpiC,eAACkH,KAAI,CAAAnH,SACtCO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,IAAQhB,eAAA,SACtCA,eAAA,OAAKE,UAAU,cAAaH,SAAC,oBAIrB,GAEVmiC,GAAgBI,EAEhBhiC,gBAAC4G,KAAI,CAACX,MAAO3G,EAAE,IAAIG,SAAA,CAChBzH,QAAQC,IAAI+pC,GACbhiC,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBAHNiN,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRuiC,EAAWG,8BAA8B7/B,QAAQ0J,KAAI,SAAAU,GAAA,IACpDnE,EAAWmE,EAAXnE,YACAkE,EAAIC,EAAJD,KACAK,EAASJ,EAATI,UACAtF,EAAqBkF,EAArBlF,sBACAqF,EAAwBH,EAAxBG,yBACAzE,EAAMsE,EAANtE,OAAM,OAENpI,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACP0I,GAAuBC,GAAQ,IAAE,IACjCiD,KAAOoB,GAAMnB,OAAOkP,GAAY,MAAInP,KAAO,GAADmD,OAAI/B,EAAI,KAAA+B,OAAI1B,IAAaxB,OAAOV,GAAY,IAAClL,eAAA,SACxFA,eAAA,SAAOE,UAAU,aAAYH,SAC1B8I,MAJWgE,gBAOhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACP+H,EAAsB1B,OAEzB9F,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPoN,EAAyBnF,qBAAqB5B,KAAK,MAAI+G,EAAyB/G,UAZrEyG,eAcJ,YAKlB,KAGR,K,8BC1Ja61B,GAAkCppC,YAAGC,QAAAC,YAAA,6NC0DnCkG,qBAAkB6C,aA9CjC,SAAiC5C,GAAgD,IAA5CC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAU0U,EAAI9U,EAAJ8U,KAAIqsB,EAAAnhC,EAAEoX,eAAO,IAAA+pB,EAAC,SAAAlwB,GAAC,OAAEA,CAAC,EAAAkwB,EAC3E,OACE9gC,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAkB4G,SAAU5G,EAAE,yBAA2B,IAAM6U,EAAK1U,SACxFO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAC4+B,GAAe,IAChBt+B,gBAACqE,KAAOsB,KAAI,CAAC/F,UAAU,2CAA0CH,SAAA,CAC/DC,eAAC2E,KAAM,CACLtC,KAAK,eACLyC,MAAM,YACN2L,QAAU,WACR,IAAIouB,EAAelnB,SAAStZ,aAAa0E,QAAQxE,EAAKhD,6BAA+B,EACrF8C,aAAaC,QAAQC,EAAKhD,2BAA4BsjC,GAEtD9nB,EAAQ,CAACtC,KAAMoqB,GACnB,IACA7+B,eAAC2E,KAAM,CACLtC,KAAK,SACLyC,MAAM,YACN2L,QAAU,WACR,IAAIquB,EAAcnnB,SAAShM,OAASC,OAAO,SAC3CvN,aAAaC,QAAQC,EAAKhD,2BAA4BujC,GAEtD/nB,EAAQ,CAACtC,KAAMqqB,GACnB,IACA9+B,eAAC2E,KAAM,CACLtC,KAAK,gBACLyC,MAAM,YACN2L,QAAU,WACR,IAAIsuB,EAAWpnB,SAAStZ,aAAa0E,QAAQxE,EAAKhD,6BAA+B,EACjF8C,aAAaC,QAAQC,EAAKhD,2BAA4BwjC,GAEtDhoB,EAAQ,CAACtC,KAAMsqB,GACnB,YAILh/B,QAKX,KCpCK1B,aAAa0E,QAAQxE,EAAKhD,8BAC7BjD,QAAQC,IAAI,iDACZ8F,aAAaC,QAAQC,EAAKhD,2BAA4BoQ,OAASC,OAAO,UA6HzDlM,I,GAAAA,iBAAkB6C,aAzHjC,SAA6B5C,GAAmB,IAAfC,EAACD,EAADC,EACzBsQ,GADmCvQ,EAAP0D,QAChBzD,EAAE,kBACd6U,EAAOkD,SAAStZ,aAAa0E,QAAQxE,EAAKhD,6BAC1CyjC,EAAoB,0CAA4CvqB,EAChEwqB,EAAkB,wCAA0CxqB,EAC5DkuB,EAAqB,2CAA6CluB,EACxEb,EAAyBC,YAAYpa,GAA9B2e,EAA4CrE,YAAAH,EAAA,GAA9B,GAErBtb,QAAQC,IAAIkc,GAGZ,IAAAnR,EAA0CC,YAASm/B,GAAiC,CAClFj3B,UAAW,CAAEgJ,KAAMA,KADb7S,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAI9B,GAAInV,EACF,OACE5B,eAAC4iC,GAAwB,CAACnuB,KAAMA,EAAMsC,QAASA,EAAQhX,SACrDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,UAOxC,GAAIa,EACF,OACE7B,eAAC4iC,GAAwB,CAACnuB,KAAMA,EAAMsC,QAASA,EAAQhX,SACrDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,kCAOb,IAAMu/B,EAAalgB,GAAmBrf,GAGhCw/B,EAAYt9B,EAAK+gC,4BAA4BvD,OAAOhzB,KAAI,SAACizB,EAAM/X,GAAK,OAAAW,wBAAA,GACnEoX,GAAI,IAAEC,UAAWL,EAAW3X,IAAM,IAIzC,OACExnB,eAAC4iC,GAAwB,CAACnuB,KAAMA,EAAMsC,QAASA,EAAQhX,SACrDO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACy/B,KAAmB,CAACC,MAAM,OAAOC,OAAQ,IAAI5/B,SAC5CO,gBAACwiC,KAAS,CACRpD,MAAO,IACPG,OAAQ,IACR/9B,KAAMs9B,EACNU,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,IACRngC,SAAA,CAEFC,eAAC+iC,KAAa,CAACC,gBAAgB,QAC/BhjC,eAACmgC,KAAK,CAACC,QAAQ,cACfpgC,eAACqgC,KAAK,CAACX,MAAO,KACd1/B,eAACsgC,KAAO,IACRtgC,eAACugC,KAAM,IAIPvgC,eAACijC,KAAI,CAAC3+B,KAAK,WAAW87B,QAAQ,OAAOK,OAAQC,KAAc,QAC3D1gC,eAACijC,KAAI,CAAC3+B,KAAK,WAAW87B,QAAQ,UAAUK,OAAQC,KAAY,MAC5D1gC,eAACijC,KAAI,CAAC3+B,KAAK,WAAW87B,QAAQ,SAASK,OAAQC,KAAa,gBAKpEpgC,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CAEdC,eAAC2E,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,YACNkU,cAAc,IACd3W,KAAK,iBACLoO,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAAS47B,EAC7B,EAACl/B,SAEDH,EAAE,6CAELI,eAAC2E,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,YACNkU,cAAc,IACd3W,KAAK,iBACLoO,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAASs/B,EAC7B,EAAC5iC,SAEDH,EAAE,gDAGLI,eAAC2E,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,YACNkU,cAAc,IACd3W,KAAK,iBACLoO,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAAS27B,EAC7B,EAACj/B,SAEDH,EAAE,sDAMf,KCjJasjC,GAAwB5pC,YAAGC,QAAAC,YAAA,2gCCgEzBkG,qBAAkB6C,aAtDjC,SAAiC5C,GAAgD,IAA7CC,EAACD,EAADC,EAAoBqT,GAAVtT,EAAP0D,QAAe1D,EAAN0U,OAAc1U,EAANsT,QAAQD,EAAYrT,EAAZqT,aAC9D,OACEhT,eAACkT,KAAM,CAAAnT,SACLO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,SACJ8B,KAAK,OACLlG,UAAY+S,EAAOwB,KAAQ,0BAA4B,eACvDlB,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,QACLlG,UAAY+S,EAAOuB,MAAS,0BAA4B,eACxDjB,aAAa,MAIbxT,SAAA,CAEJC,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,4BAATiN,gBACxB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,6BAATiN,gBACxB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,0BAATiN,gBACxB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,0BAATiN,gBACxB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,wBAATiN,gBACxB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,yBAATiN,gBACxB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,yBAATiN,gBACxB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,2BAATiN,gBACxB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,8BAATiN,gBACxB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,4BAATiN,gBACxB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,6BAATiN,gBACxB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,6BAATiN,mBAExB7M,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,2BAG5DF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVC,eAAC2E,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,yCAMf,KC9DO,SAASujC,KAUd,MAAO,CACLC,cAVkB9kB,GxL8Bf,SAA0B7J,EAAMD,GACnC,IAAM6uB,EAAgB13B,KAAO,GAADmD,OAAI2F,EAAI,KAAA3F,OAAI0F,EAAK,QAAOqI,QAAQ,SAC5D,OAAO,IAAI3Z,KAAKmgC,EACpB,CwLjCqCC,CACjCjlC,aAAa0E,QAAQxE,EAAK/C,0BAC1B6C,aAAa0E,QAAQxE,EAAK9C,6BAS1B8nC,eAPmBjlB,GxLgChB,SAAyB7J,EAAMD,GAClC,IAAM6uB,EAAgB13B,KAAO,GAADmD,OAAI2F,EAAI,KAAA3F,OAAI0F,EAAK,QAAOsI,MAAM,SAC1D,OAAO,IAAI5Z,KAAKmgC,EACpB,CwLnCsCG,CAClCnlC,aAAa0E,QAAQxE,EAAK/C,0BAC1B6C,aAAa0E,QAAQxE,EAAK9C,6BAO9B,CCkFeiE,qBAAkB6C,aA5EjC,SAA+B5C,GAAwD,IAApDC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAU0U,EAAI9U,EAAJ8U,KAAMD,EAAK7U,EAAL6U,MAAKssB,EAAAnhC,EAAEoX,eAAO,IAAA+pB,EAAC,SAAAlwB,GAAC,OAAEA,CAAC,EAAAkwB,EAChF,OACE9gC,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,iBAAkB4G,SAAU5G,EAAE,6BAA+B,IAAM6U,EAAO,IAAMD,EAAMzU,SAC1GC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC4+B,GAAe,QAgCpBt+B,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACbA,IAEHC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAChBC,eAACgU,KAAM,CACHC,cAAe,CACbQ,KAAMpW,aAAa0E,QAAQxE,EAAK/C,0BAChCgZ,MAAOnW,aAAa0E,QAAQxE,EAAK9C,4BAEnC2Y,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,eACZ8F,aAAaC,QAAQC,EAAK/C,yBAA0B6Y,EAAOI,MAC3DpW,aAAaC,QAAQC,EAAK9C,0BAA2B4Y,EAAOG,OAE5D,IAAMivB,EAAgBN,KACtBpsB,EAAQ0sB,GACRnvB,GAAc,EAEhB,EAAEvU,SAED,SAAA+M,GAAA,IAAGkG,EAAYlG,EAAZkG,aAAcC,EAAMnG,EAANmG,OAAQoB,EAAMvH,EAANuH,OAAM,OAChCrU,eAAC0jC,GAAwB,CACvB1wB,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,GACR,eASlB,KC5EKhW,aAAa0E,QAAQxE,EAAK/C,4BAC7BlD,QAAQC,IAAI,iDACZ8F,aAAaC,QAAQC,EAAK/C,yBAA0BmQ,OAASC,OAAO,SACpEvN,aAAaC,QAAQC,EAAK9C,0BAA2BkQ,OAASC,OAAO,QAkIxDlM,qBAAkB6C,aA/HjC,SAA2B5C,GAAmB,IAAfC,EAACD,EAADC,EACvB6U,GADiC9U,EAAP0D,QACnBhF,aAAa0E,QAAQxE,EAAK/C,2BACjCgZ,EAAQnW,aAAa0E,QAAQxE,EAAK9C,2BAClCyU,EAAYtQ,EAAE,6BAEd6jC,EAAgBN,KACtB7/B,EAAqDC,YAAS2/B,GAAuB,CACnFz3B,UAAWg4B,IADL7hC,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAIvC,GAAIzP,EACF,OACE5B,eAAC2jC,GAAsB,CAAClvB,KAAMA,EAAMD,MAAOA,EAAOuC,QAASA,EAAQhX,SAChEH,EAAE,+BAKT,GAAIiC,EACF,OACE7B,eAAC2jC,GAAsB,CAAClvB,KAAMA,EAAMD,MAAOA,EAAOuC,QAASA,EAAQhX,SAChEH,EAAE,8BAKTtH,QAAQC,IAAIuJ,GACZ,IAAI8hC,EAAqB9hC,EAAK8hC,mBAG9B,OAAKA,EAAmBx6B,MAAMjK,OAc5Ba,eAAC2jC,GAAsB,CAAClvB,KAAMA,EAAMD,MAAOA,EAAOuC,QAASA,EAAQhX,SACjEC,eAACiO,GAAW,CAACiC,UAAWA,EAEpBI,aAAa,EACbZ,SAAUk0B,EAAmBl0B,SAC7BG,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAOmyB,EAAmBl0B,SAASgC,WAErCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB+xB,mBAAmBx6B,MAC9CsG,EAAWmC,EAAgB+xB,mBAAmBl0B,SAEpD,OAAOoC,EAAS3S,OACZ,CAGEykC,mBAAoB,CAClB7xB,WAAYH,EAAegyB,mBAAmB7xB,WAC9C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAegyB,mBAAmBx6B,OAAK4I,aAAKF,IACxDpC,aAGJkC,CACN,GAEJ,EAAE7R,SACFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,uBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBAHNiN,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN6jC,EAAmBx6B,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACnCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKs6B,sBAAsBz9B,KAAK,IAACpG,eAAA,SAClCA,eAAA,SAAOE,UAAU,aAAYH,SAC1BwJ,EAAKsY,eAGV7hB,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyBvF,EAAKub,QAAQvN,GAAE,aAAYxX,SACzDwJ,EAAKub,QAAQC,aAGlBzkB,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACRC,eAACiG,KAAI,CAAC0tB,UAAQ,EAAA5zB,SACXwJ,EAAKub,QAAQniB,YAAYyG,OAASG,EAAKub,QAAQniB,YAAYyG,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OAC3EjJ,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CACRC,eAACmG,KAAI,CAACC,KAAK,gBAAgB,IAAG,IAC7BmD,EAAKs6B,sBAAsBz9B,KAAK,IAACpG,eAAA,SAClCA,eAAA,SAAOE,UAAU,aAAYH,SAC1BwJ,EAAKsY,cAEE,MAGhB7hB,eAACiG,KAAI,CAAC0tB,UAAQ,EAAA5zB,SACXwJ,EAAKub,QAAQpiB,cAAc0G,OAASG,EAAKub,QAAQpiB,cAAc0G,MAAMkD,KAAI,SAAA0d,GAAA,IAAGzgB,EAAIygB,EAAJzgB,KAAI,OAC/EjJ,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CACRC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAG,IACtBmD,EAAKu6B,yBAAyB19B,KAAK,IAACpG,eAAA,SACrCA,eAAA,SAAOE,UAAU,aAAYH,SAC1BwJ,EAAKsY,cAEE,WAIR,aAtFtB7hB,eAAC2jC,GAAsB,CAAClvB,KAAMA,EAAMD,MAAOA,EAAOuC,QAASA,EAAQhX,SACjEC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,yCA0FlB,KCzIMmkC,GAAgB,SAAA71B,GAAAC,aAAA41B,EAAA71B,GAAA,IAAAE,EAAAC,aAAA01B,GACpB,SAAAA,EAAYp0B,GAAQ,IAADrB,EAGC,OAHDC,aAAA,KAAAw1B,GACjBz1B,EAAAF,EAAAQ,KAAA,KAAMe,GACNrX,QAAQC,IAAI,sBACZD,QAAQC,IAAIoX,GAAMrB,CACpB,CA4LI,OA5LHwB,aAAAi0B,EAAA,EAAAh0B,IAAA,SAAA5N,MAGD,WACE,IAAMvC,EAAIP,KAAKsQ,MAAM/P,EACfiO,EAAYjO,EAAE,kBAEpB,OACEI,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,wBACtBU,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,wCAETI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,oCACNA,EAAE,wCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,qCAIjD3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,sCACNA,EAAE,0CACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,uCAIjD3N,eAAC0N,GAAoB,CAACzD,WAAW,OACXC,SAAS,sBAAqBnK,SAElDC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,iCACNA,EAAE,qCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,uCAWrDrN,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,0CAETI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,kCACNA,EAAE,sCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,mCAIjD3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,mCACNA,EAAE,uCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,oCAIjD3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,+BACNA,EAAE,mCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,gCAIjD3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,+BACNA,EAAE,mCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,gCAIjD3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,iCACNA,EAAE,qCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,qCAKnDrN,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,wCAETI,eAAC0N,GAAoB,CAACzD,WAAW,OACXC,SAAS,2BAA0BnK,SAEvDC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,sCACNA,EAAE,0CACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,yCAKnD3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,oCACNA,EAAE,wCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,qCAIjD3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,kCACNA,EAAE,sCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,sCAKnDrN,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,qCAETI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,qCACNA,EAAE,yCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,2DAIjD3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,kCACNA,EAAE,sCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,gEAIjD3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,8CACNA,EAAE,kDACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,6EAQ1D,KAACo2B,CAAA,CAjMgB,CAASrzB,aAqMhBhR,iBAAkB6C,YAAWwhC,KCjN/BC,GAAsBxxB,OAAaC,MAAM,CAClDrM,KAAMoM,OACHG,SAAS/S,YAAE,uBACdmrB,QAASvY,OACTwY,MAAOxY,OACPyY,MAAOzY,OACJyY,MAAMrrB,YAAE,cACXsrB,aAAc1Y,OACd2Y,gBAAiB3Y,SC2FJ9S,iBAAkB6C,aAtFV,SAAH5C,GAAA,IACpBC,EAACD,EAADC,EAEAoT,GADOrT,EAAP0D,QACY1D,EAAZqT,cACAC,EAAMtT,EAANsT,OACAoB,EAAM1U,EAAN0U,OACAuL,EAAejgB,EAAfigB,gBACAC,EAAalgB,EAAbkgB,cAAa,OAEXvf,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,UACbC,aAAchV,EAAO0W,QACrBnyB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,UAAWqG,EAAE7gB,OAAOkkB,cAClC3J,EAAgB,WAAW,GAAM,EACnC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,wBAE1DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,QACLlG,UAAY+S,EAAO+X,MAAS,0BAA4B,eACxDzX,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,0BAG1DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,QACLlG,UAAY+S,EAAOgY,MAAS,0BAA4B,eACxD1X,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,6BAI5DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0CAA0CG,SAAA,CAC7DC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,eACLlG,UAAY+S,EAAOiY,aAAgB,0BAA4B,eAC/D3X,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,eAAeqN,UAAU,OAAOvT,UAAU,0BAGjEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,8CAA8CG,SAAA,CACjEC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,kBACLlG,UAAY+S,EAAOkY,gBAAmB,0BAA4B,eAClE5X,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,OAAOvT,UAAU,gCAKxEF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACPG,MAAM,UAENR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAGA,KC3DEF,I,GAAAA,iBAAkB6C,aA1BjC,SAA6B5C,GAAiC,IAA/BC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAChD,OACEC,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CC,eAAA,OAAKE,UAAU,0BAGjBF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACjBO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,4CAEhBG,eAQf,KCvBMN,GAAsBnG,YAAGC,QAAAC,YAAA,2LA6FhBkG,qBAAkB6C,aAjFjC,SAAyB5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACtBmU,GADoC5X,EAAP0D,QACxBD,EAAM2K,OAAOwJ,IAExB3D,EAA6BC,YAAYpU,IAAlCwkC,EAAsDlwB,YAAAH,EAAA,GAApC,GACzBtQ,EAAiCC,YAAS/D,GAAwB,CAChEiM,UAAW,CACT8L,GAAIA,KAFA3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxB,GAAIF,EAAS,OACX5B,eAACkkC,GAAoB,CAAAnkC,SAClBH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC4jC,GAAoB,CAAAnkC,SAAA,CACnBC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAM1f,EAAc/V,EAAK0B,aAEzB,OAEExD,eAACkkC,GAAoB,CAAAnkC,SACnBC,eAACgU,KAAM,CACLC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClB2kB,QAASlT,EAAYkT,QACrBC,MAAOnT,EAAYmT,MACnBC,MAAOpT,EAAYoT,MACnBC,aAAcrT,EAAYqT,aAC1BC,gBAAiBtT,EAAYsT,iBAE/BhX,iBAAkB6vB,GAClB5vB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ4vB,EAAmB,CAAEx4B,UAAW,CAC9B8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,KACb2kB,QAAS1W,EAAO0W,QAChBC,MAAO3W,EAAO2W,MACdC,MAAO5W,EAAO4W,MACdC,aAAc7W,EAAO6W,aACrBC,gBAAiB9W,EAAO8W,oBAG3BvW,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,gDAAkD,CAC/DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACmkC,GAAgB,CACfnxB,aAAcA,EACdqB,OAAQA,EACRpB,OAAQA,EACR2M,gBAAiBA,EACjBC,cAAeA,GACf,KAKZ,KCxEengB,qBAAkB6C,aAnBjC,SAAiC5C,GAAiC,IAA/BC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UACpD,OACEC,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,wBACtBI,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACfC,eAAA,MAAAD,SAAKH,EAAE,8CACNG,aAOf,KC6CiBL,qBAAkB6C,aA1DnC,SAA2C5C,GAAmD,IAAhDC,EAACD,EAADC,EAAYqT,GAAFtT,EAAP0D,QAAe1D,EAANsT,QAAQmxB,EAASzkC,EAATykC,UAAWpxB,EAAYrT,EAAZqT,aAC3E,OACEhT,eAACkT,KAAM,CAAAnT,SACLO,gBAAC4G,KAAI,CAACX,MAAO69B,EAAUrkC,SAAA,CACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAAC4G,KAAKokB,MAAK,CAACxmB,MAAM,OAAM/E,SAAA,CACtBC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAExG,EAAE,iDAG5BI,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0CAA0CG,SAAA,CAC7DC,eAACsT,KAAK,CAAChP,KAAK,QACN8B,KAAK,kBACLlG,UAAY+S,EAAOoxB,gBAAmB,0BAA4B,eAClE9wB,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,OAAOvT,UAAU,0BAGpEF,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oCAAoCG,SAAA,CACvDC,eAACsT,KAAK,CAAChP,KAAK,QACN8B,KAAK,YACLlG,UAAY+S,EAAOqxB,UAAa,0BAA4B,eAC5D/wB,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sCAAsCG,SAAA,CACzDC,eAACsT,KAAK,CAAChP,KAAK,QACN8B,KAAK,cACLlG,UAAY+S,EAAOsxB,YAAe,0BAA4B,eAC9DhxB,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,0BAGhEF,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,yCAAyCG,SAAA,CAC5DC,eAACsT,KAAK,CAAChP,KAAK,QACN8B,KAAK,iBACLlG,UAAY+S,EAAOuxB,eAAkB,0BAA4B,eACjEjxB,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,iBAAiBqN,UAAU,OAAOvT,UAAU,+BAKvEF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVC,eAACqgB,GAAgB,CAAC3M,SAAUV,UAKtC,KC8GetT,qBAAkB6C,aAhKjC,SAA6B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAC1BmU,GADwC5X,EAAP0D,QAC5BD,EAAM2K,OAAOwJ,IACxBjU,EAAiCC,YAAS/D,GAAwB,CAChEiM,UAAW,CACT8L,GAAIA,KAFA3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB8R,EAA+BC,YAAYpU,IAAnCwkC,EAAuDlwB,YAAAH,EAAA,GAArC,GAE1B,GAAIhS,EAAS,OACX5B,eAACykC,GAAwB,CAAA1kC,SACtBH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAACmkC,GAAwB,CAAA1kC,SAAA,CACvBC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAM/zB,EAAe1B,EAAK0B,aAE1B,OAEElD,gBAACmkC,GAAwB,CAAA1kC,SAAA,CACrBO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAACokC,KAAW,CAAA3kC,SAAA,CACVC,eAAA,MAAAD,SAAKH,EAAE,sCACPI,eAAC0kC,KAAYC,MAAK,CAChBpkC,IAAKiD,EAAaohC,eAGpB5kC,eAAC0kC,KAAYG,QAAO,CAAA9kC,SAClBC,eAAC0E,IAAI,CAACtC,GAAE,sBAAA0M,OAAwByI,EAAE,uBAAsBxX,SACtDO,gBAACqE,KAAM,CAACmJ,OAAK,EAAChJ,MAAM,YAAW/E,SAAA,CAC5BH,EAAE,qCAAqC,IAACI,eAACmG,KAAI,CAACC,KAAK,8BAM9DpG,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAACokC,KAAW,CAAA3kC,SAAA,CACVC,eAAA,MAAAD,SAAKH,EAAE,wCACPI,eAAC0kC,KAAYC,MAAK,CAChBpkC,IAAKiD,EAAashC,iBAGpB9kC,eAAC0kC,KAAYG,QAAO,CAAA9kC,SAClBC,eAAC0E,IAAI,CAACtC,GAAE,sBAAA0M,OAAwByI,EAAE,yBAAwBxX,SACxDO,gBAACqE,KAAM,CAACmJ,OAAK,EAAChJ,MAAM,YAAW/E,SAAA,CAC5BH,EAAE,qCAAqC,IAACI,eAACmG,KAAI,CAACC,KAAK,8BAM9DpG,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAACokC,KAAW,CAAA3kC,SAAA,CACVC,eAAA,MAAAD,SAAKH,EAAE,sCACPI,eAAC0kC,KAAYC,MAAK,CAChBpkC,IAAKiD,EAAauhC,eAGpB/kC,eAAC0kC,KAAYG,QAAO,CAAA9kC,SAClBC,eAAC0E,IAAI,CAACtC,GAAE,sBAAA0M,OAAwByI,EAAE,uBAAsBxX,SACtDO,gBAACqE,KAAM,CAACmJ,OAAK,EAAChJ,MAAM,YAAW/E,SAAA,CAC5BH,EAAE,qCAAqC,IAACI,eAACmG,KAAI,CAACC,KAAK,8BAM9DpG,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAACokC,KAAW,CAAA3kC,SAAA,CACVC,eAAA,MAAAD,SAAKH,EAAE,4CACPI,eAAC0kC,KAAYC,MAAK,CAChBpkC,IAAKiD,EAAaK,oBAGpB7D,eAAC0kC,KAAYG,QAAO,CAAA9kC,SAClBC,eAAC0E,IAAI,CAACtC,GAAE,sBAAA0M,OAAwByI,EAAE,4BAA2BxX,SAC3DO,gBAACqE,KAAM,CAACmJ,OAAK,EAAChJ,MAAM,YAAW/E,SAAA,CAC5BH,EAAE,qCAAqC,IAACI,eAACmG,KAAI,CAACC,KAAK,8BAM9DpG,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAACokC,KAAW,CAAA3kC,SAAA,CACVC,eAAA,MAAAD,SAAKH,EAAE,6CACPI,eAAC0kC,KAAYC,MAAK,CAChBpkC,IAAKiD,EAAawhC,qBAGpBhlC,eAAC0kC,KAAYG,QAAO,CAAA9kC,SAClBC,eAAC0E,IAAI,CAACtC,GAAE,sBAAA0M,OAAwByI,EAAE,6BAA4BxX,SAC5DO,gBAACqE,KAAM,CAACmJ,OAAK,EAAChJ,MAAM,YAAW/E,SAAA,CAC5BH,EAAE,qCAAqC,IAACI,eAACmG,KAAI,CAACC,KAAK,iCAQhEpG,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACfC,eAAA,MAAAD,SAAKH,EAAE,wCACPI,eAACgU,KAAM,CACLC,cAAe,CACbowB,gBAAiB7gC,EAAayhC,wBAC9BX,UAAW9gC,EAAa0hC,kBACxBX,YAAa/gC,EAAa2hC,oBAC1BX,eAAgBhhC,EAAa4hC,wBAG/BhxB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjB2vB,EAAmB,CAAEx4B,UAAW,CAC9B8I,MAAO,CACLgD,GAAIA,EACJ0tB,wBAAyB5wB,EAAOgwB,gBAChCa,kBAAmB7wB,EAAOiwB,UAC1Ba,oBAAqB9wB,EAAOkwB,YAC5Ba,uBAAwB/wB,EAAOmwB,iBAEhC9vB,eAAgB,CACf,CAACC,MAAOnV,GAAwBiM,UAAW,CAAC8L,GAAIA,OAEnD3C,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBwS,GAAc,GACdO,KAAMC,QAASlV,EAAE,mDAAqD,CAClEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACtBjT,eAACqlC,GAAkC,CACjCryB,aAAcA,EACdC,OAAQA,GACR,WAOlB,KC1HiBvT,iBAAkB6C,aAxCE,SAAH5C,GAAA,IAChCC,EAACD,EAADC,EAEAwkC,GADOzkC,EAAP0D,QACS1D,EAATykC,WACApxB,EAAYrT,EAAZqT,aACA8M,EAAangB,EAAbmgB,cACAC,EAAcpgB,EAAdogB,eAAcC,EAAArgB,EACdsgB,6BAAqB,IAAAD,EAAC,SAAApP,GAAC,OAAEA,CAAC,EAAAoP,EAAA,OAExBhgB,eAACkT,KAAM,CAAAnT,SACLO,gBAAC4G,KAAI,CAACX,MAAO69B,EAAUrkC,SAAA,CACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPC,eAACmT,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SACtDO,gBAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,eAAA,SAAOsE,KAAK,OAAO6b,IAAKL,EAAe5f,UAAU,oBAAoB4b,SAAUmE,IAC/EjgB,eAAA,SAAOE,UAAU,oBAAoBkgB,MAAOb,GAA0Bxf,SACnEggB,eAOb/f,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACPG,MAAM,UAENR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,0BAIF,KCqFEF,qBAAkB6C,aA5HjC,SAAiC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACrCkU,EAAKnU,EAAM2K,OAAOwJ,GAClB+tB,EAAcliC,EAAM2K,OAAOw3B,aAC3Bl/B,EAAS,sBAAAyI,OAAyByI,EAAE,aAEtC6sB,EAAY,GAChB,GACO,cADCkB,EAEJlB,EAAYxkC,EAAE,oCAOlB,IAAAgU,EAA6BC,YAAYpU,IAAlCwkC,EAAsDlwB,YAAAH,EAAA,GAApC,GAGzB8C,EAAgCC,mBAAS,IAAGC,EAAA7C,YAAA2C,EAAA,GAArC8J,EAAQ5J,EAAA,GAAE6J,EAAW7J,EAAA,GACtBkJ,EAAgBY,iBAAO,MACvBX,EAAiBS,GAAY5gB,EAAE,yCAE/BqgB,EAAwB,SAACvC,GAC7BplB,QAAQC,IAAI,uBACZkoB,EAAY/C,EAAMrY,OAAOsb,MAAM,GAAGva,KACpC,EAEA,OAEEpG,eAACykC,GAAwB,CAAA1kC,SACvBC,eAACgU,KAAM,CACLC,cAAe,CAAC,EAChBG,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAIioB,GAEZ,IAAII,EAAY,CACdrJ,GAAIA,GAGFuJ,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB3oB,QAAQC,IAAI0oB,EAAa5b,OAAOiN,QAChC,IAAI4O,EAAeD,EAAa5b,OAAOiN,OAGvC,OAFAha,QAAQC,IAAI2oB,GAELokB,GACL,IAAK,YACH1kB,EAAU4kB,kBAAoBhlB,EAC9BI,EAAU6kB,UAAYvkB,EACtB,MACF,IAAK,cACHN,EAAU8kB,oBAAsBllB,EAChCI,EAAU+kB,YAAczkB,EACxB,MACF,IAAK,YACHN,EAAUglB,kBAAoBplB,EAC9BI,EAAUilB,UAAY3kB,EACtB,MACF,IAAK,iBACHN,EAAUklB,uBAAyBtlB,EACnCI,EAAUmlB,eAAiB7kB,EAC3B,MACF,IAAK,kBACHN,EAAUolB,wBAA0BxlB,EACpCI,EAAUqlB,gBAAkB/kB,EAMhC+iB,EAAmB,CAAEx4B,UAAW,CAC9B8I,MAAOqM,GACNlM,eAAgB,CACf,CAACC,MAAOnV,GAAwBiM,UAAW,CAAC8L,GAAIA,OAEnD3C,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBwS,GAAc,GACdjR,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,4CAA8C,CAC3DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAEA,IAAI6M,EAAOrB,EAAcsB,QAAQT,MAAM,GACnCQ,GAAQA,EAAKtc,KAAO,QACtBic,EAAOO,cAAcF,GACZA,GAAQA,EAAKtc,KAAO,SAC7BgQ,KAAMhT,MAAMjC,EAAE,qDAAsD,CAClEmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,KAEdO,KAAMhT,MAAMjC,EAAE,gCAAiC,CAC7CmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,GAElB,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAY,OACdhT,eAACkmC,GAA4B,CAC3BlzB,aAAcA,EACdoxB,UAAWA,EACXtkB,cAAeA,EACfC,eAAgBA,EAChBE,sBAAuBA,GACvB,KAKZ,KCzFevgB,I,eAAAA,iBAAkB6C,aA7BjC,SAAsC5C,GAA8C,IAA5CC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQwuB,EAAA5uB,EAAE6uB,oBAAY,IAAAD,GAAMA,EAC9E,OACEvuB,eAACiL,GAAW,CAAAlL,SACZC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyuB,EACAxuB,eAAC6G,GAAU,CAACR,UAAU,gCAEtBrG,eAAC0N,GAAoB,CAACzD,WAAW,MACrBC,SAAS,oBAAmBnK,SACtCC,eAACyW,GAAS,CAACL,OAAO,0CAK1BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOb,KCvCaomC,GAA0B7sC,YAAGC,QAAAC,YAAA,ogBA0B7B4sC,GAAyB9sC,YAAGI,QAAAF,YAAA,gQAgB5B6sC,GAAmB/sC,YAAGK,QAAAH,YAAA,4NAUtB8sC,GAAsBhtC,YAAGO,QAAAL,YAAA,6NAUzB+sC,GAAsBjtC,YAAGQ,QAAAN,YAAA,sKCuPvBkG,qBAAkB6C,aAhSjC,SAAkC5C,GAAkB,IAAfC,EAACD,EAADC,EAE7Bkb,GAFuCnb,EAAP0D,QAClBI,qBAAWxC,IACA6Z,YAE/BxX,EAA4CC,YAAS4iC,IAA7CvkC,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAC9BuC,EAA+BC,YAAY0yB,IAAnCC,EAAuDzyB,YAAAH,EAAA,GAArC,GAEpB1D,EAAYtQ,EAAE,oCAGpB,GAAIgC,EAAS,OACX5B,eAACymC,GAA6B,CAAA1mC,SAC5BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACymC,GAA6B,CAAA1mC,SAC5BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kDAKZ,IAAMoM,EAA4BlK,EAAKkK,0BAGvC,OAAKA,EAA0B5C,MAAMjK,OASnCa,eAACymC,GAA6B,CAAA1mC,SAC5BC,eAACiO,GAAW,CAACiC,UAAWA,EACVR,SAAU1D,EAA0B0D,SACpCY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAOzF,EAA0B0D,SAASgC,WAE5CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB7F,0BAA0B5C,MACrDsG,EAAWmC,EAAgB7F,0BAA0B0D,SAE3D,OAAOoC,EAAS3S,OACZ,CAGE6M,0BAA2B,CACzB+F,WAAYH,EAAe5F,0BAA0B+F,WACrD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe5F,0BAA0B5C,OAAK4I,aAAKF,IAC/DpC,aAGJkC,CACN,GAEJ,EAAE7R,SACZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACNC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,4BACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,MARFrF,kBAWlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNiM,EAA0B5C,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC1CjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKhD,OADQsG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SAACC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAK2lB,kBACrClvB,eAACiS,KAAMxM,IAAG,CAAA1F,SAACC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAKm9B,gBACrC1mC,eAACiS,KAAMxM,IAAG,CAAA1F,SAACC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAKo9B,mBACrC3mC,eAACiS,KAAMxM,IAAG,CAAA1F,SAAE4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,KAC1C9a,eAACiS,KAAMxM,IAAG,CAAA1F,SAAGwJ,EAAKuY,QAAWnW,KAAOpC,EAAKuY,SAASlW,OAAOkP,GAAa,KACtE9a,eAACiS,KAAMxM,IAAG,CAAA1F,SAAEwJ,EAAKq9B,WACjBtmC,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,oCAAA0M,OAAsCvF,EAAKgO,IAAKxX,SACtDC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAAA,UACEE,UAAU,2BACVqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,iDACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CAAGC,eAAA,SAAOuJ,EAAKhD,SAC/B6S,WAAYxZ,EAAE,sCACdgb,eAAgB4rB,EAChBltB,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACjB,CAACC,MAAOwxB,OAGhB,EAAEpmC,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBA3BfyG,kBAVzBA,eAwCJ,aA1F5B7M,eAACymC,GAA6B,CAAA1mC,SAC5BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,8CA+Fd,KCrJainC,GAAsBr0B,OAAaC,MAAM,CAClDlM,MAAOiM,OACJK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdgN,QAAS4F,OACNK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdiiB,UAAWrP,OACRG,SAAS/S,YAAE,uBACdkiB,QAAStP,OACNG,SAAS/S,YAAE,uBACdgnC,SAAUp0B,SCmIC9S,qBAAkB6C,aAhIjC,SAAqC5C,GAA2F,IAAxFC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcqB,EAAM1U,EAAN0U,OAAQpB,EAAMtT,EAANsT,OAAQ2M,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAexZ,EAAS1G,EAAT0G,UAChH,OACE/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO6a,gBAChBlvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,kDAEnDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,aAGjDzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,cACLwnB,QAASvZ,EAAOqyB,cAChB1mC,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,gDAEnDI,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,aAG/CzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,iBACLwnB,QAASvZ,EAAOsyB,iBAChB3mC,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,mDAEnDI,eAACwT,KAAY,CAACpN,KAAK,iBAAiBqN,UAAU,gBAIpDzT,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,QACLlG,UAAY+S,EAAO1M,MAAS,0BAA4B,eACxDgN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,4BAI5DF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sCAAsCG,SAAA,CACzDC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,UACbC,aAAchV,EAAOzH,QACrBhU,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPtG,EAAgB,WAAW,GAC3BC,EAAc,UAAWqG,EAAE7gB,OAAOkkB,aACpC,IAEFvpB,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,4BAI9DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,IAEhD5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,WACLlG,UAAY+S,EAAO2zB,SAAY,0BAA4B,eAC3DrzB,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,gCAKjEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACPG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEpBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,2BAMnB,KCtDeF,qBAAkB6C,aAvEjC,SAAoC5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACjCgD,EAAY,8BAClBuN,EAA0BC,YAAYwyB,IAA/BS,EAAgD/yB,YAAAH,EAAA,GAAjC,GAEtB,OACE5T,eAACymC,GAA6B,CAACjY,cAAc,EAAKzuB,SAChDO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,4CAEjBI,eAACgU,KAAM,CACHC,cAAe,CACbib,eAAe,EACfwX,aAAa,EACbC,gBAAgB,EAChBpgC,MAAO,GACPqG,QAAS,GACTiV,UAAW,IAAI3e,KACf4e,QAAS,IAAI5e,KACb0jC,SAAU,KAEZzyB,iBAAkB0yB,GAClBzyB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACf2hB,EAAc,CAChB/G,cAAe7a,EAAO6a,cACtByX,eAAgBtyB,EAAOsyB,eACvBD,YAAaryB,EAAOqyB,YACpBngC,MAAO8N,EAAO9N,MACdqG,QAASyH,EAAOzH,QAChBiV,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASxD,GAAejK,EAAOyN,SAC/B8kB,SAAUjvB,SAAStD,EAAOuyB,WAG5BE,EAAgB,CAAEr7B,UAAW,CAC3B8I,MAAO0hB,GACNvhB,eAAgB,CACf,CAACC,MAAOwxB,OAEXvxB,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,gDAAkD,CAC/DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC5D7f,eAAC+mC,GAA4B,CAC3B/zB,aAAcA,EACdqB,OAAQA,EACRpB,OAAQA,EACR2M,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GACX,QAMlB,KCgCe3G,qBAAkB6C,aApGjC,SAAqC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAClC2jC,EADgDrnC,EAALyD,MACpB2K,OAAOwJ,GAC9BrH,EAAYtQ,EAAE,yCACdyG,EAAY,8BAElB/C,EAAiCC,YAAS6iC,GAAwB,CAAE36B,UAAW,CAC7E8L,GAAIyvB,KADEplC,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA6BC,YAAYyyB,IAAlCW,EAAsDlzB,YAAAH,EAAA,GAApC,GAEzB,GAAIhS,EAAS,OACX5B,eAACymC,GAA6B,CAACjY,cAAc,EAAKzuB,SAChDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,mCAMX,GAAIiC,EAAO,OACT7B,eAACymC,GAA6B,CAACjY,cAAc,EAAKzuB,SAChDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,kCAMX,IAAMsnC,EAA2BplC,EAAKolC,yBAEtC,OACElnC,eAACymC,GAA6B,CAACjY,cAAc,EAAKzuB,SAChDO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEblQ,eAACgU,KAAM,CACHC,cAAe,CACbib,cAAegY,EAAyBhY,cACxCwX,YAAaQ,EAAyBR,YACtCC,eAAgBO,EAAyBP,eACzCpgC,MAAO2gC,EAAyB3gC,MAChCqG,QAASs6B,EAAyBt6B,QAClCiV,UAAW,IAAI3e,KAAKgkC,EAAyBrlB,WAC7CC,QAAS,IAAI5e,KAAKgkC,EAAyBplB,SAC3C8kB,SAAUM,EAAyBN,UAErCzyB,iBAAkB0yB,GAClBzyB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACf2hB,EAAc,CAChB1e,GAAIyvB,EACJ9X,cAAe7a,EAAO6a,cACtByX,eAAgBtyB,EAAOsyB,eACvBD,YAAaryB,EAAOqyB,YACpBngC,MAAO8N,EAAO9N,MACdqG,QAASyH,EAAOzH,QAChBiV,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASxD,GAAejK,EAAOyN,SAC/B8kB,SAAUjvB,SAAStD,EAAOuyB,WAG5BK,EAAmB,CAAEx7B,UAAW,CAC9B8I,MAAO0hB,GACNvhB,eAAgB,CACf,CAACC,MAAOwxB,OAEXvxB,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,iDAAmD,CAChEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC5D7f,eAAC+mC,GAA4B,CAC3B/zB,aAAcA,EACdqB,OAAQA,EACRpB,OAAQA,EACR2M,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GACX,QAMpB,K,6LC9De3G,I,kBAAAA,iBAAkB6C,aAnCjC,SAAoC5C,GAAiC,IAA/BC,EAACD,EAADC,EAAGG,EAAQJ,EAARI,SAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EAC/D,OACEvW,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAU,8BAEtB/F,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbO,gBAACoE,IAAI,CAACtC,GAAG,mCACPlC,UAAU,yBAAwBH,SAAA,CAClCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,WAAW,IAAExG,EAAE,qBAExCI,eAAC0N,GAAoB,CAACzD,WAAW,MACbC,SAAS,wBAAuBnK,SAClDC,eAACyW,GAAS,CAACL,OAAO,2CAM5BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KC/CaonC,GAAwB7tC,YAAGC,QAAAC,YAAA,85BA4C3B4tC,GAAsB9tC,YAAGI,QAAAF,YAAA,uiDAmFzB8gB,GAAyBhhB,YAAGK,QAAAH,YAAA,yiCAsD5B6tC,GAAmB/tC,YAAGO,QAAAL,YAAA,uLAUtB8tC,GAAmBhuC,YAAGQ,QAAAN,YAAA,iNAUtB+tC,GAAoBjuC,YAAGU,QAAAR,YAAA,sNCFrBkG,qBAAkB6C,aAlLjC,SAAgC5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC7B6M,EAAYtQ,EAAE,kCACpB8W,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAE1BtT,EAAqDC,YAAS4jC,GAAuB,CACnF17B,UAAW,CAAEoL,SAAUA,GACvBhL,YAAa,iBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAIvCuC,EAA6BC,YAAY0zB,IAAjCC,EAAmDzzB,YAAAH,EAAA,GAAnC,GAElBqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAIP,GAAIgC,EAAS,OACX5B,eAACynC,GAA2B,CAAA1nC,SAC1BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACynC,GAA2B,CAAA1nC,SAC1BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,gDAKZ,IAAI+C,EAAcb,EAAK4lC,wBAGvB,OAAK/kC,EAAYyG,MAAMjK,OAYrBa,eAACynC,GAA2B,CAAA1nC,SAC1BC,eAACiO,GAAW,CACViC,UAAWA,EACXC,cAAe8G,EACf3G,aAAa,EACbZ,SAAU/M,EAAY+M,SACtBG,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO9O,EAAY+M,SAASgC,WAE9BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB61B,wBAAwBt+B,MACnDsG,EAAWmC,EAAgB61B,wBAAwBh4B,SAEzD,OAAOoC,EAAS3S,OACZ,CAGEuoC,wBAAyB,CACvB31B,WAAYH,EAAe81B,wBAAwB31B,WACnD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe81B,wBAAwBt+B,OAAK4I,aAAKF,IAC7DpC,aAGJkC,CACJ,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,yCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,MARFrF,kBAWlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN4C,EAAYyG,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAK2lB,iBADZriB,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAKm9B,eADZ75B,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAKo+B,aADZ96B,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKq+B,UAAahoC,EAAE,qBAAuB2J,EAAK3G,SADpCiK,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAK+tB,aAAa,IAACt3B,eAAA,SAClBuJ,EAAK+V,eACLtf,eAAA,QAAME,UAAU,aAAYH,SAAEwJ,EAAK+V,eAAelZ,OAChD,KAJUyG,gBAOhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKs+B,SAAS,IAAC7nC,eAAA,SAChBA,eAAA,QAAME,UAAU,aAAYH,SACzBwJ,EAAKu+B,wBAHMj7B,gBAMhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,kCAAoCqH,EAAKgO,GAAG,EACxEzS,MAAM,YAAW/E,SACtBH,EAAE,kBAGPI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACdiwB,EAAiB,CAAE/7B,UAAW,CAC5B8I,MAAO,CACPgD,KACAV,UAAWA,IAEhBnC,eAAgB,CACf,CAACC,MAAOwyB,GAAuB17B,UAAW,CAAC,SAAYoL,OACvDjC,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZiX,EAAc,qBAAyB,oBAAqB,CAC3D9B,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,cAnCYyG,kBA7BzBA,eAmEJ,aA3HxB7M,eAACynC,GAA2B,CAAA1nC,SAC1BC,eAACiO,GAAW,CAACiC,UAAWA,EACVC,cAAe8G,EAAclX,SACzCC,eAAA,KAAAD,SAC4DH,EAAvDiX,EAAyD,yCAA3C,4CA8H3B,KCpMakxB,GAAmBv1B,OAAaC,MAAM,CACjDrM,KAAMoM,OACLK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACZwmB,MAAO5T,OACJG,SAAS/S,YAAE,uBACd0f,eAAgB9M,OACbG,SAAS/S,YAAE,uBACdioC,SAAUr1B,OACPI,SAAShT,YAAE,iCACX+S,SAAS/S,YAAE,uBACdooC,aAAcx1B,OACXG,SAAS/S,YAAE,uBACdgD,QAAS4P,OACTy1B,iBAAkBz1B,SCCd01B,GAAyB,SAAAh6B,GAAAC,aAAA+5B,EAAAh6B,GAAA,IAAAE,EAAAC,aAAA65B,GAC7B,SAAAA,EAAYv4B,GAAQ,IAADrB,EAGC,OAHDC,aAAA,KAAA25B,GACjB55B,EAAAF,EAAAQ,KAAA,KAAMe,GACNrX,QAAQC,IAAI,sCACZD,QAAQC,IAAIoX,GAAMrB,CACpB,CA+NC,OA/NAwB,aAAAo4B,EAAA,EAAAn4B,IAAA,SAAA5N,MAED,WACE,IAAMvC,EAAIP,KAAKsQ,MAAM/P,EACfyD,EAAUhE,KAAKsQ,MAAMtM,QAErBwU,EAAcxY,KAAKsQ,MAAMkI,YACzB7E,EAAe3T,KAAKsQ,MAAMqD,aAC1B6M,EAAgBxgB,KAAKsQ,MAAMkQ,cAC3BD,EAAkBvgB,KAAKsQ,MAAMiQ,gBAC7B3M,EAAS5T,KAAKsQ,MAAMsD,OACpBoB,EAAShV,KAAKsQ,MAAM0E,OAE1B,OACI/T,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACVO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO6a,gBAChBlvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,sCAEnDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,aAGjDzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACPO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,cACLwnB,QAASvZ,EAAOqyB,cAChB1mC,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,oCAEnDI,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,aAGjDzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,YACLwnB,QAASvZ,EAAOszB,YAChB3nC,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,0CAEnDI,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,gBAIjDnT,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACjCC,eAACsT,KAAK,CAAChP,KAAK,OACR8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACjBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEzDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CACxCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,cACbC,aAAchV,EAAOxL,YACrBjQ,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPtG,EAAgB,eAAe,GAC/BC,EAAc,cAAeqG,EAAE7gB,OAAOkkB,aACxC,IAEFvpB,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,wBAEhEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CAClCC,eAACsT,KAAK,CAAChP,KAAK,OACR8B,KAAK,QACLlG,UAAY+S,EAAOmT,MAAS,0BAA4B,eACxD7S,aAAa,QACjBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,iBACLlG,UAAY+S,EAAOqM,eAAkB,0BAA4B,eACjE/L,aAAa,MAAKxT,SAAA,CACzBzH,QAAQC,IAAI,gCACZD,QAAQC,IAAIsf,GACb7X,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrBgL,EAAYwO,gBAAgBjd,MAAMkD,KAAI,SAAA3M,GAAA,IAAG4J,EAAI5J,EAAJ4J,KAAI,OAC1CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK8V,WAAW,KAAG9V,EAAK+c,SAAS,MAArDzZ,eAA+D,OAGhG7M,eAACwT,KAAY,CAACpN,KAAK,iBAAiBqN,UAAU,OAAOvT,UAAU,6BAIrEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAACsT,KAAK,CAAChP,KAAK,OACR8B,KAAK,WACLlG,UAAY+S,EAAO40B,SAAY,0BAA4B,eAC3Dt0B,aAAa,QACjBvT,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,0BAG7DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,yBAAyBG,SAAA,CAC5CO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,eACLlG,UAAY+S,EAAO+0B,aAAgB,0BAA4B,eAC/Dz0B,aAAa,MAAKxT,SAAA,CAC1BC,eAAA,UAAQmC,MAAM,OAAMpC,SAAaH,EAAE,kBAATiN,gBAC1B7M,eAAA,UAAQmC,MAAM,QAAOpC,SAAaH,EAAE,mBAATiN,gBAC3B7M,eAAA,UAAQmC,MAAM,SAAQpC,SAAaH,EAAE,oBAATiN,mBAE5B7M,eAACwT,KAAY,CAACpN,KAAK,eAAeqN,UAAU,OAAOvT,UAAU,6BAInEI,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACPO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,YACLwnB,QAASvZ,EAAO8zB,WAChBnoC,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,0BAEnDI,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,WAE1CY,EAAOuzB,UAAa,GACvBtnC,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACpCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,UACLlG,UAAY+S,EAAOrQ,QAAW,0BAA4B,eAC1D2Q,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,wBAczDmU,EAAOuzB,UACFtnC,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,4BAA4BG,SAAA,CACjDC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,mBACLlG,UAAY+S,EAAOg1B,iBAAoB,0BAA4B,eACnE10B,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,wBAE/D,GAEVI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,mBACLlG,UAAY+S,EAAOsI,iBAAoB,0BAA4B,eACnEhI,aAAa,MAAKxT,SAAA,CAC1BC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrBgL,EAAYqI,kBAAkB9W,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC5CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK+N,KAAK,MAA9BzK,eAAwC,OAGzE7M,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,0BAGrEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,oBACLlG,UAAY+S,EAAO6E,kBAAqB,0BAA4B,eACpEvE,aAAa,MAAKxT,SAAA,CAC1BC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrBgL,EAAYR,mBAAmBjO,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC7CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK+N,KAAK,MAA9BzK,eAAwC,OAGzE7M,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,gCAKxEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACPzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAEHI,eAAC2E,KAAM,CACPL,KAAK,SACLQ,MAAM,OACN2L,QAAS,kBAAMpN,EAAQnB,KAnNjB,4BAmNgC,EAACnC,SAElCH,EAAE,yBAKrB,KAACsoC,CAAA,CApO4B,CAASx3B,aAwOzBhR,iBAAkB6C,YAAW2lC,KC9H7BxoC,qBAAkB6C,aAxGjC,SAAiC5C,GAAuB,IAArBC,EAACD,EAADC,EAAUyD,GAAF1D,EAALyD,MAAczD,EAAP0D,SACrC6M,EAAYtQ,EAAE,sCAEpB0D,EAAiCC,YAAS+W,IAAlC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACxB8R,EAA0BC,YAAYwzB,IAA/Be,EAAgDr0B,YAAAH,EAAA,GAAjC,GAEtB,GAAIhS,EAAS,OACX5B,eAACynC,GAA2B,CAACjxB,UAAU,EAAKzW,SAC1CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACynC,GAA2B,CAACjxB,UAAU,EAAKzW,SAC1CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAMZtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM+V,EAAc/V,EAEpB,OACE9B,eAACynC,GAA2B,CAACjxB,UAAU,EAAKzW,SAC1CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACbib,eAAe,EACfwX,aAAa,EACbiB,WAAW,EACXvhC,KAAM,GACNyC,YAAa,GACbud,MAAO,EACP9G,eAAgB,GAChBuoB,SAAU,EACVG,aAAc,SACdplC,QAAS,EACTglC,WAAW,EACXK,iBAAkB,EAClB1sB,iBAAkB,GAClBzD,kBAAmB,IAErB3D,iBAAkB4zB,GAClB3zB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ+zB,EAAgB,CAAE38B,UAAW,CAC3B8I,MAAO,CACL2a,cAAe7a,EAAO6a,cACtBwX,YAAaryB,EAAOqyB,YACpBiB,UAAWtzB,EAAOszB,UAClBvhC,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,YACpBud,MAAO/R,EAAO+R,MACd9G,eAAgBjL,EAAOiL,eACvBuoB,SAAUlwB,SAAStD,EAAOwzB,UAC1BG,aAAc3zB,EAAO2zB,aACrBplC,QAAS+U,SAAStD,EAAOzR,SACzBglC,UAAWvzB,EAAOuzB,UAClBK,iBAAkB5zB,EAAO4zB,iBACzB1sB,iBAAkBlH,EAAOkH,iBACzBzD,kBAAmBzD,EAAOyD,sBAG7BlD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAxEN,6BAyEF2S,KAAMC,QAASlV,EAAE,8CAAgD,CAC7DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9DrU,eAACkoC,GAAyB,CACxBrwB,YAAeA,EACf7E,aAAgBA,EAChB6M,cAAiBA,EACjBD,gBAAmBA,EACnB3M,OAAUA,EACVoB,OAAUA,GACV,OAMd,KCoBe3U,qBAAkB6C,aAzHjC,SAAkC5C,GAAwB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAChCmU,GAD8C5X,EAAP0D,QAClCD,EAAM2K,OAAOwJ,IAClBrH,EAAYtQ,EAAE,uCACpB0D,EAAiCC,YAAS6jC,GAAqB,CAC7D37B,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA0BC,YAAYyzB,IAA/Be,EAAgDt0B,YAAAH,EAAA,GAAjC,GAEtB,GAAIhS,EAAS,OACX5B,eAACynC,GAA2B,CAACjxB,UAAU,EAAKzW,SAC1CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACynC,GAA2B,CAACjxB,UAAU,EAAKzW,SAC1CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM+V,EAAc/V,EAEhBwmC,EAAiB,GACjBzwB,EAAYgsB,sBAAsBvkB,iBACpCgpB,EAAiBzwB,EAAYgsB,sBAAsBvkB,eAAe/H,IAGpE,IAAIkK,EAAmB,GACnB5J,EAAYgsB,sBAAsBtoB,mBACpCkG,EAAoB5J,EAAYgsB,sBAAsBtoB,iBAAiBhE,IAGzE,IAAImK,EAAoB,GAKxB,OAJI7J,EAAYgsB,sBAAsB/rB,oBACpC4J,EAAqB7J,EAAYgsB,sBAAsB/rB,kBAAkBP,IAIzEvX,eAACynC,GAA2B,CAACjxB,UAAU,EAAKzW,SAC1CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACbib,cAAerX,EAAYgsB,sBAAsB3U,cACjDwX,YAAa7uB,EAAYgsB,sBAAsB6C,YAC/CiB,UAAW9vB,EAAYgsB,sBAAsB8D,UAC7CvhC,KAAMyR,EAAYgsB,sBAAsBz9B,KACxCyC,YAAagP,EAAYgsB,sBAAsBh7B,YAC/Cud,MAAOvO,EAAYgsB,sBAAsBzd,MACzC9G,eAAgBgpB,EAChBT,SAAUhwB,EAAYgsB,sBAAsBgE,SAC5CG,aAAcnwB,EAAYgsB,sBAAsBmE,aAChDplC,QAASiV,EAAYgsB,sBAAsBjhC,QAC3CglC,UAAW/vB,EAAYgsB,sBAAsB+D,UAC7CK,iBAAkBpwB,EAAYgsB,sBAAsBoE,iBACpD1sB,iBAAmBkG,EACnB3J,kBAAmB4J,GAErBvN,iBAAkB4zB,GAClB3zB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZg0B,EAAgB,CAAE58B,UAAW,CAC3B8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjB2X,cAAe7a,EAAO6a,cACtBwX,YAAaryB,EAAOqyB,YACpBiB,UAAWtzB,EAAOszB,UAClBvhC,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,YACpBud,MAAO/R,EAAO+R,MACd9G,eAAgBjL,EAAOiL,eACvBuoB,SAAUlwB,SAAStD,EAAOwzB,UAC1BG,aAAc3zB,EAAO2zB,aACrBplC,QAAS+U,SAAStD,EAAOzR,SACzBglC,UAAWvzB,EAAOuzB,UAClBK,iBAAkB5zB,EAAO4zB,iBACzB1sB,iBAAkBlH,EAAOkH,iBACzBzD,kBAAmBzD,EAAOyD,sBAG7BlD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,+CAAiD,CAC9DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9DrU,eAACkoC,GAAyB,CACxBrwB,YAAeA,EACf7E,aAAgBA,EAChB6M,cAAiBA,EACjBD,gBAAmBA,EACnB3M,OAAUA,EACVoB,OAAUA,GACV,OAMd,KC/Fe3U,I,wBAAAA,iBAAkB6C,aA5BjC,SAA0C5C,GAAkF,IAA/EC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQ4yB,EAAAhzB,EAAEizB,eAAO,IAAAD,GAAMA,EAAA7hB,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,4BAA2BA,EACrH,OACE9Q,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAC6G,GAAU,CAACR,UAAWA,IACrBusB,EACA5yB,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,6BAA4BnK,SACzDC,eAACyW,GAAS,CAACL,OAAO,uCAAuClW,UAAU,WAEnE,QAIRF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCvCawoC,GAA6BjvC,YAAGC,QAAAC,YAAA,sYAqBhCgvC,GAA4BlvC,YAAGI,QAAAF,YAAA,yJAW/BivC,GAAmCnvC,YAAGK,QAAAH,YAAA,slBAgCtCkvC,GAAsBpvC,YAAGO,QAAAL,YAAA,qNAUzBmvC,GAAyBrvC,YAAGQ,QAAAN,YAAA,mOAW5BovC,GAAyBtvC,YAAGU,QAAAR,YAAA,0KAQ5BqvC,GAAoBvvC,YAAGY,QAAAV,YAAA,sYAkBvBsvC,GAAyBxvC,YAAG2qB,QAAAzqB,YAAA,0LCqL1BkG,qBAAkB6C,aAhRjC,SAAsC5C,GAAiB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC1CC,EAA4CC,YAASglC,IAA7C3mC,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAC9BuC,EAA+BC,YAAY+0B,IAApCG,EAA2Dh1B,YAAAH,EAAA,GAAvC,GAG3B,GAAIhS,EAAS,OACX5B,eAACgpC,GAAiC,CAACpW,SAAS,EAAK7yB,SAC/CC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,uCAAuCG,SAC/DC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACgpC,GAAiC,CAAEpW,SAAS,EAAK7yB,SAChDC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,uCAAuCG,SAC/DC,eAAA,KAAAD,SAAIH,EAAE,qDAKZ,IAAMqpC,EAAmBnnC,EAAKonC,4BAG9B,OAAKD,EAAiB7/B,MAAMjK,OAW1Ba,eAACgpC,GAAiC,CAAEpW,SAAS,EAAK7yB,SAChDC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,uCACZ8P,SAAUu5B,EAAiBv5B,SAC3BY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAOw3B,EAAiBv5B,SAASgC,WAEnCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBq3B,4BAA4B9/B,MACvDsG,EAAWmC,EAAgBq3B,4BAA4Bx5B,SAE7D,OAAOoC,EAAS3S,OACZ,CAGE+pC,4BAA6B,CAC3Bn3B,WAAYH,EAAes3B,4BAA4Bn3B,WACvD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAes3B,4BAA4B9/B,OAAK4I,aAAKF,IACjEpC,aAGJkC,CACN,GAEJ,EAAE7R,SACRO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,yBACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRkpC,EAAiB7/B,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACjCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKV,YAAYsgC,UAAU,EAAG,KADjBt8B,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BC,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,yCAA2CqH,EAAKgO,GAAG,EAC/EzS,MAAM,YAAW/E,SACtBH,EAAE,kBAELI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,gDAAkDqH,EAAKgO,GAAG,EACtFzS,MAAM,YAAW/E,SACtBH,EAAE,iDAEPI,eAAA,UAAQE,UAAU,uCAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,sDACduZ,eAAgBnZ,eAAA,KAAAD,SAAIwJ,EAAKnD,OACzBgT,WAAYxZ,EAAE,2CACdgb,eAAgBmuB,EAChBzvB,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACjB,CAACC,MAAO4zB,OAGhB,EAAExoC,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBA9BfyG,kBAPzBA,eAwCJ,aAvF1B7M,eAACgpC,GAAiC,CAAEpW,SAAS,EAAK7yB,SAChDC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,uCAAuCG,SAC/DC,eAAA,KAAAD,SAAIH,EAAE,iDA6Fd,KC7IawpC,GAAyB52B,OAAaC,MAAM,CACrDrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBCgGHF,qBAAkB6C,aAlFjC,SAAsC5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACnCgD,EAAY,mCAClBuN,EAA8BC,YAAY60B,IAAlCW,EAAsDt1B,YAAAH,EAAA,GAArC,GAEzB,OACE5T,eAACgpC,GAAiC,CAAC3iC,UAAWA,EAAUtG,SACtDC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,2CAA2CG,SACxDC,eAACgU,KAAM,CACLC,cAAe,CAAE7N,KAAM,GAAIyC,YAAa,IACxCsL,iBAAkBi1B,GAClBh1B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjB+0B,EAAkB,CAAE59B,UAAW,CAC7B8I,MAAO,CACLnO,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,cAErB6L,eAAgB,CACf,CAACC,MAAO4zB,OAEX3zB,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,mDAAqD,CAClEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACpB3S,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAGzDI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,sBAGPoT,EACA1S,gBAACgrB,KAAK,CAAChnB,KAAK,UAAUglC,eAAa,EAAAvpC,SAAA,CACjCC,eAAA,UAAAD,SAASH,EAAE,yBAAgC,IAAEA,EAAE,sEAEjD,QAGD,OAMvB,KCqCeF,qBAAkB6C,aAnHjC,SAAuC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAC3CkU,EAAKnU,EAAM2K,OAAOwJ,GAClBrH,EAAYtQ,EAAE,4CACdyG,EAAY,mCAClB/C,EAAiCC,YAASilC,GAA2B,CACnE/8B,UAAW,CAAC8L,GAAIA,KADV3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAiCC,YAAY80B,IAArCY,EAA4Dx1B,YAAAH,EAAA,GAAxC,GAG5B,GAAIhS,EAAS,OACX5B,eAACgpC,GAAiC,CAAC3iC,UAAWA,EAAUtG,SACtDC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACgpC,GAAiC,CAAC3iC,UAAWA,EAAUtG,SACtDC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAMZ,IAAMiY,EAAc/V,EAAK0nC,2BAIzB,OAHAlxC,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAGV9B,eAACgpC,GAAiC,CAAC3iC,UAAWA,EAAUtG,SACtDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClByC,YAAagP,EAAYhP,aAE3BsL,iBAAkBi1B,GAClBh1B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZk1B,EAAqB,CAAE99B,UAAW,CAChC8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,cAErB6L,eAAgB,CACf,CAACC,MAAO4zB,OAEX3zB,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,oDAAsD,CACnEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAcjG,EAANqH,OAAM,OAC5B/T,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAG3DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAETH,EAAE,2BAIR,OAMvB,KC8BeF,I,kBAAAA,iBAAkB6C,aA9IjC,SAA6C5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAC3CqmC,GADyD9pC,EAAP0D,QACxCD,EAAM2K,OAAOwJ,IACvBlR,EAAY,mCACd6J,EAAYtQ,EAAE,uDAClB0D,EAAiCC,YAASklC,GAAkC,CAC1Eh9B,UAAW,CAAE8L,GAAIkyB,KADX7nC,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA2BC,YAAYg1B,IAA/Ba,EAAiD31B,YAAAH,EAAA,GAAnC,GACtBoH,EAAgCnH,YAAYi1B,IAApCa,EAA2D51B,YAAAiH,EAAA,GAAxC,GAG3B,GAAIpZ,EAAS,OACX5B,eAACgpC,GAAiC,CAAC3iC,UAAWA,EAAUtG,SACtDC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACgpC,GAAiC,CAAC3iC,UAAWA,EAAUtG,SACtDC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM8nC,EAAS9nC,EAAK4lC,wBACdmC,EAAQ/nC,EAAK0nC,2BAEnBt5B,EAAS,GAAApB,OAAMoB,EAAS,OAAApB,OAAM+6B,EAAMzjC,MACpC,IAAI0jC,EAAe,CAAC,EAOpB,OANID,EAAMnC,wBAAwBt+B,OAChCygC,EAAMnC,wBAAwBt+B,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC7CugC,EAAavgC,EAAKgO,KAAM,CAAI,IAK9BvX,eAACgpC,GAAiC,CAAC3iC,UAAWA,EAAUtG,SACtDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACnBO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,MACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,QAHNiN,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN6pC,EAAOxgC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACvBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKgO,MAAMuyB,EACX9pC,eAACmG,KAAI,CAACC,KAAK,eAAelG,UAAU,eAAkBF,eAACmG,KAAI,CAACC,KAAK,WAAWlG,UAAU,cAF1E2M,gBAKhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGfvU,QAAQC,IAAKgR,EAAKgO,MAAMuyB,GACrBvgC,EAAKgO,MAAMuyB,EAmCb9pC,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,sBAAqBH,SACxCO,gBAACqE,KAAM,CAACG,MAAM,OACZD,KAAK,KACL0B,MAAO3G,EAAE,6BACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,kBACZD,QAAQC,IAAIgR,EAAKgO,IACjB,IAAIwyB,EAAUxgC,EAAKgO,GACnBoyB,EAAoB,CAAEl+B,UAAW,CAC/B8I,MAAO,CACLsvB,sBAAuBkG,EACvBP,2BAA4BC,IAEjC/0B,eAAgB,CACf,CAACC,MAAO8zB,GAAkCh9B,UAAW,CAAC,GAAMg+B,OAC5D70B,MAAK,SAAAoV,GAAe,IAAZloB,EAAIkoB,EAAJloB,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAAQlV,EAAE,8BAA+B,CAC7CmV,SAAUF,KAAMG,SAASC,cAE7B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SAAA,CACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,iBAAiB,IAAG,IAC1CxG,EAAE,iCA7ByCiN,gBAjChD7M,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,wBAAuBH,SAC1CO,gBAACqE,KAAM,CAACG,MAAM,OACZD,KAAK,KACL0B,MAAO3G,EAAE,wBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,eACZ,IAAIwxC,EAAUxgC,EAAKgO,GACnBmyB,EAAe,CAAEj+B,UAAW,CAC1B8I,MAAO,CACLsvB,sBAAuBkG,EACvBP,2BAA4BC,IAEjC/0B,eAAgB,CACf,CAACC,MAAO8zB,GAAkCh9B,UAAW,CAAC,GAAMg+B,OAC5D70B,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAAQlV,EAAE,0BAA2B,CACzCmV,SAAUF,KAAMG,SAASC,cAE7B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SAAA,CACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,gBAAgB,IAAG,IACzCxG,EAAE,4BA5B2CiN,kBAZtCA,eA8EJ,YAO9B,KC/JO,SAASjF,KACd,IAAIiP,EAAWxY,aAAa0E,QAAQxE,EAAK7C,kCACxB,OAAbmb,IACFA,GAAW,GAGb,IAAI5O,EAAY,CACd4O,SAAwB,SAAbA,GAKb,OAFAve,QAAQC,IAAI0P,GAELA,CACT,CCbO,IAAM+hC,GAAuB1wC,YAAGC,QAAAC,YAAA,ifAyB1BywC,GAAsB3wC,YAAGI,QAAAF,YAAA,mMAczB0wC,GAAgB5wC,YAAGK,QAAAH,YAAA,sSAgBnB2wC,GAAmB7wC,YAAGO,QAAAL,YAAA,iTAetB4wC,GAAyB9wC,YAAGQ,QAAAN,YAAA,qTAgB5B6wC,GAAoB/wC,YAAGU,QAAAR,YAAA,kOC7CrBkG,qBAAkB6C,aA5BjC,SAAmC5C,GAAGA,EAADC,EAAUD,EAAP0D,QAAqC,IAA5BtD,EAAQJ,EAARI,SAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EACvE,OACEvW,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAM,eAAcxG,SAC/BC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAW,6BAEvBrG,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,wBAAuBnK,SACpDC,eAACyW,GAAS,CAACL,OAAO,uCAK1BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KC2IeL,qBAAkB6C,aA7JjC,SAA+B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAClCqT,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC1BtT,EAAmDC,YAASymC,GAAsB,CAChFv+B,UAAW7D,OADNhG,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAGtCuC,EAA2BC,YAAYw2B,IAAhCC,EAAkDv2B,YAAAH,EAAA,GAAlC,GAEvB,GAAIhS,EAAS,OACX5B,eAACuqC,GAA0B,CAAAxqC,SACzBC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,iCAAiCG,SACzDC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACuqC,GAA0B,CAAAxqC,SACzBC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,iCAAiCG,SACzDC,eAAA,KAAAD,SAAIH,EAAE,+CAIZ,IAAMqX,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAKD4qC,EAAa1oC,EAAK2oC,uBAExB,OAAKD,EAAWphC,MAAMjK,OAYpBa,eAACuqC,GAA0B,CAAAxqC,SACzBC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,iCACbuQ,cAAe8G,EACf3G,aAAa,EACbZ,SAAU86B,EAAW96B,SACrBG,WAAY,WACXwB,EAAU,CACR5F,UAAW,CACTgG,MAAO+4B,EAAW96B,SAASgC,WAE7BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB44B,uBAAuBrhC,MAClDsG,EAAWmC,EAAgB44B,uBAAuB/6B,SAExD,OAAOoC,EAAS3S,OACZ,CAGEsrC,uBAAwB,CACtB14B,WAAYH,EAAe64B,uBAAuB14B,WAClD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe64B,uBAAuBrhC,OAAK4I,aAAKF,IAC5DpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,MACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,MAJFrF,kBAOlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNyqC,EAAWphC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC3BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC0qC,KAAM,CAAC7lC,KAAK,KAAKjB,SAAU2F,EAAKoB,0BADnBkC,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAK2lB,cACLlvB,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,iBAC1BI,eAACuI,KAAK,CAACzD,MAAM,SAAQ/E,SAAEH,EAAE,iBAHbiN,gBAKhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAC9BU,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,uCAAyCqH,EAAKgO,GAAG,EAC7EzS,MAAM,YAAW/E,SACvBC,eAACmG,KAAI,CAACC,KAAK,YAEbpG,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,iCAAmCqH,EAAKgO,GAAG,EACvEzS,MAAM,YAAW/E,SACtBH,EAAE,qBAIXI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACT6Q,QAAS,WACPnY,QAAQC,IAAI,oBACZ+xC,EAAiB,CAAE7+B,UAAW,CAC5B8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACTV,UAAWtN,EAAKsN,WAEvBnC,eAAgB,CACf,CAACC,MAAOq1B,GAAsBv+B,UAAW7D,SACzCgN,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACHvL,EAAKsN,SAAYjX,EAAE,sBAAuBA,EAAE,oBAAqB,CAChEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACC,KAAK,cAxCwByG,kBAZzBA,eAuDJ,aA1GxB7M,eAACuqC,GAA0B,CAAAxqC,SACzBC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,iCACduQ,cAAe8G,EAAclX,SACvCC,eAAA,KAAAD,SACyDH,EAAtDiX,EAAwD,wCAA1C,2CA6GzB,KC/Ka8zB,GAAmBn4B,OAAaC,MAAM,CAC/CrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdiJ,YAAa2J,OACbo4B,WAAYp4B,OACTuF,IAAInY,YAAE,cC4HEF,qBAAkB6C,aA3GjC,SAAiC5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC9BgD,EAAY,2BAClBuN,EAAuBC,YAAYq2B,IAA5BW,EAA0C92B,YAAAH,EAAA,GAA9B,GAEnB,OACE5T,eAACuqC,GAA0B,CAAC/zB,UAAU,EAAKzW,SACzCO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,yCAEjBI,eAACgU,KAAM,CACLC,cAAe,CAAE7N,KAAM,GAAIyC,YAAa,GAAIqmB,eAAe,EAAM0b,WAAY,IAC7Ez2B,iBAAkBw2B,GAClBv2B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBu2B,EAAa,CAAEp/B,UAAW,CACxB8I,MAAO,CACLnO,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,YACpBqmB,cAAe7a,EAAO6a,cACtB0b,WAAYv2B,EAAOu2B,WACnBE,MAAOz2B,EAAOy2B,QAGfp2B,eAAgB,CACf,CAACC,MAAOq1B,GAAsBv+B,UAAW7D,SAE5CgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,6CAA+C,CAC5DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC5D/T,gBAAC4S,KAAM,CAAAnT,SAAA,CAGHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO6a,gBAClBlvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,sCAEjDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,WAE/CnT,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACkpB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,cACbC,aAAchV,EAAOxL,YACrBjQ,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,cAAeqG,EAAE7gB,OAAOkkB,cACtC3J,EAAgB,eAAe,EACjC,IAEJ5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,wBAE9DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sCAAsCG,SAAA,CACzDC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,aACLlG,UAAY+S,EAAO23B,WAAc,0BAA4B,eAC7Dr3B,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,aAAaqN,UAAU,OAAOvT,UAAU,2BAGjEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC2E,KAAM,CAACG,MAAM,OAAO2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAACtG,SACvDH,EAAE,yBAGN,QAMzB,KC0CeF,qBAAkB6C,aAlJjC,SAAkC5C,GAAyB,IAAtBC,EAACD,EAADC,EAC7B2X,GADuC5X,EAAP0D,QAAc1D,EAALyD,MAC9B2K,OAAOwJ,IAClBrH,EAAYtQ,EAAE,sCAEpB0D,EAAiCC,YAAS0mC,GAAqB,CAAEx+B,UAAW,CAC1E8L,GAAIA,KADE3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA4BC,YAAYs2B,IAAhCY,EAAiDh3B,YAAAH,EAAA,GAAlC,GAEvB,GAAIhS,EAAS,OACX5B,eAACuqC,GAA0B,CAAC/zB,UAAU,EAAKzW,SACzCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACuqC,GAA0B,CAAC/zB,UAAU,EAAKzW,SACzCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAMZ,IAAMiY,EAAc/V,EAAKgG,sBAIzB,OAHAxP,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAGV9B,eAACuqC,GAA0B,CAAC/zB,UAAU,EAAKzW,SACzCO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACgU,KAAM,CACHC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClByC,YAAagP,EAAYhP,YACzBqmB,cAAerX,EAAYqX,cAC3B0b,WAAY/yB,EAAY+yB,YAE1Bz2B,iBAAkBw2B,GAClBv2B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ02B,EAAgB,CAAEt/B,UAAW,CAC3B8I,MAAO,CACLgD,GAAIA,EACJnR,KAAMiO,EAAOjO,KACbyC,YAAcwL,EAAOxL,YAAewL,EAAOxL,YAAa,GACxDqmB,cAAe7a,EAAO6a,cACtB0b,WAAav2B,EAAOu2B,WAAcv2B,EAAOu2B,WAAY,KAEtDl2B,eAAgB,CACf,CAACC,MAAOq1B,GAAsBv+B,UAAW,CAAC,UAAY,OAEzDmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,8CAAgD,CAC7DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQwL,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAe,OAC5Dtf,gBAAC4S,KAAM,CAAAnT,SAAA,CACFzH,QAAQC,IAAI8b,GACb/T,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO6a,gBAClBlvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,sCAEjDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,WAE/CnT,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,cACbC,aAAchV,EAAOxL,YACrBjQ,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,cAAeqG,EAAE7gB,OAAOkkB,cACtC3J,EAAgB,eAAe,EACjC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,wBAE9DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sCAAsCG,SAAA,CACzDC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,aACLlG,UAAY+S,EAAO23B,WAAc,0BAA4B,eAC7Dr3B,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,aAAaqN,UAAU,OAAOvT,UAAU,2BAGjEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GA9HV,2BA8HwBrC,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAETH,EAAE,2BAIR,QAMzB,KCJeF,I,eAAAA,iBAAkB6C,aA5IjC,SAAuC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACpC2nC,EADkDrrC,EAALyD,MACzB2K,OAAOwJ,GAC3BlR,EAAY,2BACd6J,EAAYtQ,EAAE,sCAClB0D,EAAiCC,YAAS0mC,GAAqB,CAC7Dx+B,UAAW,CAAE8L,GAAIyzB,KADXppC,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAwBC,YAAYu2B,IAA5Ba,EAAmDl3B,YAAAH,EAAA,GAAxC,GAGnB8C,EAAgCC,mBAAS,IAAGC,EAAA7C,YAAA2C,EAAA,GAArC8J,EAAQ5J,EAAA,GAAE6J,EAAW7J,EAAA,GACtBkJ,EAAgBY,iBAAO,MACvBX,EAAiBS,GAAY5gB,EAAE,yCAE/BqgB,EAAwB,SAACvC,GAC7BplB,QAAQC,IAAI,uBACZkoB,EAAY/C,EAAMrY,OAAOsb,MAAM,GAAGva,KACpC,EAGA,OAAIxE,EACF5B,eAACuqC,GAA0B,CAAC/zB,UAAU,EAAKzW,SACzCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMlBa,EACF7B,eAACuqC,GAA0B,CAAC/zB,UAAU,EAAKzW,SACzCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,mCAKZsQ,EAAS,GAAApB,OAAMoB,EAAS,OAAApB,OAAMhN,EAAKgG,sBAAsB1B,MAGvDpG,eAACuqC,GAA0B,CAAC/zB,UAAU,EAAKzW,SACzCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACtBC,eAACgU,KAAM,CACJC,cAAe,CAAC,EAEhBG,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAIioB,GAEZ,IAAII,EAAY,CACdrJ,GAAIyzB,EACJE,cAAe1qB,GAGbM,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB3oB,QAAQC,IAAI0oB,EAAa5b,OAAOiN,QAChC,IAAI4O,EAAeD,EAAa5b,OAAOiN,OACvCha,QAAQC,IAAI2oB,GAEZN,EAAUkqB,MAAQ5pB,EAElB+pB,EAAY,CAAEx/B,UAAW,CACvB8I,MAAOqM,GACNlM,eAAgB,CACjB,CAACC,MAAOq1B,GAAsBv+B,UAAW,CAAC,UAAY,OAEvDmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,8CAAgD,CAC7DmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,EAClB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAEA,IAAI6M,EAAOrB,EAAcsB,QAAQT,MAAM,GACnCQ,GAAQA,EAAKtc,KAAO,QACtBic,EAAOO,cAAcF,GACZA,GAAQA,EAAKtc,KAAO,SAC7BgQ,KAAMhT,MAAMjC,EAAE,qDAAsD,CAClEmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,KAEdO,KAAMhT,MAAMjC,EAAE,gCAAiC,CAC7CmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,GAElB,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAoBhG,EAANiG,OAAcjG,EAANqH,OAAM,OAC9B/T,gBAAC4S,KAAM,CAAAnT,SAAA,CACPC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPC,eAACmT,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SACtDO,gBAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,eAAA,SAAOsE,KAAK,OAAO6b,IAAKL,EAAe5f,UAAU,oBAAoB4b,SAAUmE,IAC/EjgB,eAAA,SAAOE,UAAU,oBAAoBkgB,MAAOb,GAA0Bxf,SACnEggB,eAObzf,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACjBH,EAAE,2BAIF,QAMnB,KCnKaurC,GAAwB7xC,YAAGC,QAAAC,YAAA,maAoB3B4xC,GAAsB9xC,YAAGI,QAAAF,YAAA,sIAUzB6xC,GAAgB/xC,YAAGK,QAAAH,YAAA,+OAYnB8xC,GAAmBhyC,YAAGO,QAAAL,YAAA,+MAWtB+xC,GAAoBjyC,YAAGQ,QAAAN,YAAA,sNCZrBkG,qBAAkB6C,aA5BjC,SAAoC5C,GAA4C,IAAzCC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EACzE,OACEvW,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAU,8BAEtBrG,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,wBAAuBnK,SACpDC,eAACyW,GAAS,CAACL,OAAO,wCAK1BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAMd,KC8HcL,qBAAkB6C,aAhJjC,SAAgC5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACpCqT,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACpB1G,EAAYtQ,EAAE,kCACpB0D,EAAqDC,YAAS4nC,GAAuB,CACnF1/B,UAAW,CAAEoL,SAAUA,KADjBjV,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAGvCuC,EAA6BC,YAAY03B,IAAjCC,EAAmDz3B,YAAAH,EAAA,GAAnC,GAElBqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAIP,GAAIgC,EAAS,OACX5B,eAACyrC,GAA2B,CAAA1rC,SAC1BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACyrC,GAA2B,CAAA1rC,SAC1BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,gDAKZ,IAAM8rC,EAAc5pC,EAAK6pC,wBAGzB,OAAKD,EAAYtiC,MAAMjK,OAYrBa,eAACyrC,GAA2B,CAAA1rC,SAC1BC,eAACiO,GAAW,CAACiC,UAAWA,EACVC,cAAe8G,EACf3G,aAAa,EACbZ,SAAUg8B,EAAYh8B,SACtBG,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAOi6B,EAAYh8B,SAASgC,WAE9BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB85B,wBAAwBviC,MACnDsG,EAAWmC,EAAgB85B,wBAAwBj8B,SAEzD,OAAOoC,EAAS3S,OACZ,CAGEwsC,wBAAyB,CACvB55B,WAAYH,EAAe+5B,wBAAwB55B,WACnD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe+5B,wBAAwBviC,OAAK4I,aAAKF,IAC7DpC,aAGJkC,CACN,GAEJ,EAAE7R,SACZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,MAFFrF,kBAKlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN2rC,EAAYtiC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,kCAAoCqH,EAAKgO,GAAG,EACxEzS,MAAM,YAAW/E,SACtBH,EAAE,kBAGPI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACdi0B,EAAiB,CAAE//B,UAAW,CAC5B8I,MAAO,CACPgD,KACAV,UAAWA,IAEhBnC,eAAgB,CACf,CAACC,MAAOw2B,GAAuB1/B,UAAW,CAAC,SAAYoL,OACvDjC,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZiX,EAAc,qBAAyB,oBAAqB,CAC3D9B,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACC,KAAK,cAnCwByG,kBAJzBA,eA0CJ,aA1FxB7M,eAACyrC,GAA2B,CAAA1rC,SAC1BC,eAACiO,GAAW,CAACiC,UAAWA,EACZC,cAAe8G,EAAclX,SACvCC,eAAA,KAAAD,SAC4DH,EAAvDiX,EAAyD,yCAA3C,4CA6F3B,KChKa+0B,GAAmBp5B,OAAaC,MAAM,CAC/CrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBCsFHF,qBAAkB6C,aApEjC,SAAiC5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC9BgD,EAAY,4BAClBuN,EAAyBC,YAAYw3B,IAA7BQ,EAA2C93B,YAAAH,EAAA,GAA/B,GAEpB,OACE5T,eAACyrC,GAA2B,CAACj1B,UAAU,EAAKzW,SAC1CC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,sCAAsCG,SACnDC,eAACgU,KAAM,CACHC,cAAe,CAAE7N,KAAM,GAAIkR,KAAM,IACjCnD,iBAAkBy3B,GAClBx3B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBu3B,EAAa,CAAEpgC,UAAW,CACxB8I,MAAO,CACLnO,KAAMiO,EAAOjO,OAEdsO,eAAgB,CACf,CAACC,MAAOw2B,GAAuB1/B,UAAW,CAAC,UAAY,OAE1DmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,8CAAgD,CAC7DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACpB3S,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAG3DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,2BAIR,OAMzB,KCqCeF,qBAAkB6C,aAtGjC,SAAkC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MACxCmU,EAAKnU,EAAM2K,OAAOwJ,GAClBlR,EAAY,4BACZ6J,EAAYtQ,EAAE,uCACpB0D,EAAiCC,YAAS6nC,GAAqB,CAC7D3/B,UAAW,CAAC8L,GAAIA,KADV3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA4BC,YAAYy3B,IAAhCQ,EAAiD/3B,YAAAH,EAAA,GAAlC,GAEvB,GAAIhS,EAAS,OACX5B,eAACyrC,GAA2B,CAACj1B,UAAU,EAAKzW,SAC1CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACyrC,GAA2B,CAACj1B,UAAU,EAAKzW,SAC1CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZ,IAAMiY,EAAc/V,EAAKiqC,sBAEzB,OACE/rC,eAACyrC,GAA2B,CAACj1B,UAAU,EAAKzW,SAC1CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACHC,cAAe,CACb7N,KAAMyR,EAAYzR,MAEpB+N,iBAAkBy3B,GAClBx3B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZy3B,EAAgB,CAAErgC,UAAW,CAC3B8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,OAEdsO,eAAgB,CACf,CAACC,MAAOw2B,GAAuB1/B,UAAW,CAAC,UAAY,OAE1DmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,+CAAiD,CAC9DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAcjG,EAANqH,OAAM,OAC5B/T,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAG3DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAETH,EAAE,2BAIR,OAMzB,KCnCeF,qBAAkB6C,aAlEjC,SAA8B5C,GAAgB,IAAbC,EAACD,EAADC,EACzBosC,EADiCrsC,EAALyD,MACL2K,OAAOk+B,gBAC9BC,EAAW,CACf,CAAE,uBAAwBtsC,EAAE,iCAC5B,CAAE,iBAAkBA,EAAE,4BAIxB,OACEI,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,wBActBI,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,oCAEjBU,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,MAFFrF,kBAKlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNmsC,EAAS5/B,KAAI,SAAC6/B,GAAO,OACpB7rC,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPosC,EAAQ,IADKt/B,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAC/BC,eAAC0E,IAAI,CAACtC,GAAE,2BAAA0M,OAA6Bk9B,EAAc,KAAAl9B,OAAIq9B,EAAQ,IAAKpsC,SAClEO,gBAACqE,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SAAA,CACtBH,EAAE,kBAAkB,IAACI,eAACmG,KAAI,CAACC,KAAK,wBAJAyG,kBAJzBA,eAYJ,sBAWpC,KCvEeu/B,OATf,SAAyBzsC,GAAkB,IAAf0sC,EAAU1sC,EAAV0sC,WAElBvxB,EADcrX,qBAAWxC,IACA6Z,WAE/B,OACInP,KAAO0gC,GAAYzgC,OAAOkP,EAElC,ECSepb,kBAbiB,SAAHC,GAAwD,IAAlDC,EAACD,EAADC,EAAG0sC,EAAQ3sC,EAAR2sC,SAAQhmC,EAAA3G,EAAEO,iBAAS,IAAAoG,EAAC,GAAEA,EAAAimC,EAAA5sC,EAAE0F,cAAM,IAAAknC,EAAC,SAAQA,EAC3E,OAAOvsC,eAAC2E,KAAM,CACLG,MAAO,aAAe5E,EACtB2E,KAAK,KACLxC,KAAK,iBACLgD,OAAQA,EACR2T,cAAc,IACd9U,KAAMooC,EAASvsC,SAEdH,EAAE,qBAEd,ICiBeF,I,eAAAA,iBAAkB6C,aArBjC,SAAkC5C,GAAyC,IAAtCC,EAACD,EAADC,EAAGG,EAAQJ,EAARI,SAAUq+B,EAAoBz+B,EAApBy+B,qBAChD,OACEp+B,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CC,eAAA,OAAKE,UAAU,sBAAqBH,SACjCq+B,MAGLp+B,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCjCaysC,GAAsBlzC,YAAGC,QAAAC,YAAA,oeAwBzBizC,GAAqBnzC,YAAGI,QAAAF,YAAA,6KAYxBkzC,GAAepzC,YAAGK,QAAAH,YAAA,gQAalBmzC,GAAkBrzC,YAAGO,QAAAL,YAAA,gQAarBozC,GAAkBtzC,YAAGQ,QAAAN,YAAA,mKCrBnBkG,qBAAkB6C,aA9BjC,SAAmC5C,GAAoB,IAAlBC,EAACD,EAADC,EAAU2J,GAAF5J,EAALyD,MAAWzD,EAAJ4J,MAC7CqK,EAAuCC,YAAY+4B,IAA3CC,EAA2D94B,YAAAH,EAAA,GAAjC,GAElC,OACE5T,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPq8B,GAAc,CACZltC,EAAGA,EACHsZ,WAAYtZ,EAAE,6CACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CAAG,IAAEH,EAAE,mBAAmB,KAAG2J,EAAKwjC,WAClD3zB,WAAYxZ,EAAE,kCACdgb,eAAgBiyB,EAChBvzB,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CAAEgD,GAAIhO,EAAKgO,KAEpB7C,eAAgB,CACd,CAACC,MAAO63B,GAAqB/gC,UAAW,CAAEuhC,aAAczjC,EAAKyjC,kBAIvE,EAAEjtC,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAGxD,KCvCO,SAAS6mC,GAAYrtC,EAAGotC,GAC7B,OAAQA,GACN,IAAK,uBACH,OAAOptC,EAAE,gCACX,IAAK,iBACH,OAAOA,EAAE,0BACX,QACE,MAAO,wBAEb,CCoIeF,qBAAkB6C,aApHjC,SAAkC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAChC4oC,GAD8CrsC,EAAP0D,QACtBD,EAAM2K,OAAOk+B,iBAC9Be,EAAe5pC,EAAM2K,OAAOm/B,cAC5B1mC,EAAWymC,GAAYrtC,EAAGotC,GAC1B98B,EAAYtQ,EAAE,gCAAkC,MAAQ4G,EAExD43B,EAAuB99B,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACxCC,eAAC6G,GAAU,CAACR,UAAS,2BAAAyI,OAA6Bk9B,KAClDhsC,eAAC0N,GAAoB,CACnBzD,WAAW,MACXC,SAAS,uBAAsBnK,SAE/BC,eAACyW,GAAS,CAACL,OAAM,2BAAAtH,OAA6Bk9B,EAAc,KAAAl9B,OAAIk+B,EAAY,QAAQ9sC,UAAU,cAIpGoD,EAA4CC,YAASipC,GAAqB,CACxE/gC,UAAW,CAAEuhC,aAAcA,KADrBprC,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAI9B,OAAIzP,EAEA5B,eAACmtC,GAAyB,CAAC/O,qBAAsBA,EAAqBr+B,SACnEH,EAAE,+BAKLiC,EAEA7B,eAACmtC,GAAyB,CAAE/O,qBAAsBA,EAAqBr+B,SACpEH,EAAE,0CAMJkC,EAAKsrC,sBAAsBhkC,MAAMjK,OAYpCa,eAACmtC,GAAyB,CAAC/O,qBAAsBA,EAAqBr+B,SACpEC,eAACiO,GAAW,CACViC,UAAWA,EACXR,SAAU5N,EAAKsrC,sBAAsB19B,SACrCY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO3P,EAAKsrC,sBAAsB19B,SAASgC,WAE7CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBu7B,sBAAsBhkC,MACjDsG,EAAWmC,EAAgBu7B,sBAAsB19B,SAEvD,OAAOoC,EAAS3S,OACZ,CAGEiuC,sBAAuB,CACrBr7B,WAAYH,EAAew7B,sBAAsBr7B,WACjD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAew7B,sBAAsBhkC,OAAK4I,aAAKF,IAC3DpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN+B,EAAKsrC,sBAAsBhkC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC3CjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACRC,eAACqtC,GAAa,CAAChB,WAAY9iC,EAAKsY,YAC9BtY,EAAKuY,QAAWxhB,gBAAA,QAAAP,SAAA,CAAM,MAAGC,eAACqtC,GAAa,CAAChB,WAAY9iC,EAAKuY,aAAqB,KAFlEjV,gBAIhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKwjC,SADQlgC,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAACstC,GAAuB,CAAChB,SAAU/iC,EAAKgkC,cACxCvtC,eAAC0E,IAAI,CAACtC,GAAE,2BAAA0M,OAA6Bk9B,EAAc,KAAAl9B,OAAIk+B,EAAY,UAAAl+B,OAASvF,EAAKgO,IAAKxX,SACpFC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAACwtC,GAA2B,CAACjkC,KAAMA,MAREsD,kBARzBA,eAkBJ,aApExB7M,eAACmtC,GAAyB,CAAC/O,qBAAsBA,EAAqBr+B,SACpEC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SACEH,EAAE,0CAyEZ,KCjHM2f,GAA4B,CAChCC,WAAY,SACZC,QAAS,QACTC,SAAU,UA2JGhgB,qBAAkB6C,aAvJjC,SAAgC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACrC2oC,EAAiB5oC,EAAM2K,OAAOk+B,gBAC9Be,EAAe5pC,EAAM2K,OAAOm/B,cAC5B1mC,EAAWymC,GAAYrtC,EAAGotC,GAGhCt2B,EAAgCC,mBAAS,IAAGC,EAAA7C,YAAA2C,EAAA,GAArC8J,EAAQ5J,EAAA,GAAE6J,EAAW7J,EAAA,GACtBkJ,EAAgBY,iBAAO,MACvBX,EAAiBS,GAAY5gB,EAAE,yCAE/BqgB,EAAwB,SAACvC,GAC7BplB,QAAQC,IAAI,uBACZkoB,EAAY/C,EAAMrY,OAAOsb,MAAM,GAAGva,KACpC,EAIMC,EAAS,2BAAAyI,OAA8Bk9B,EAAc,KAAAl9B,OAAIk+B,GACzD5O,EAAuBp+B,eAAC6G,GAAU,CAACR,UAAWA,IAEpDuN,EAAsBC,YAAY64B,GAAc,CAC9C1b,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrConC,EAEL15B,YAAAH,EAAA,GAFgB,GAIlB,OACE5T,eAACmtC,GAAyB,CAAC/O,qBAAsBA,EAAqBr+B,SACpEC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,8BAAgC,MAAQ4G,EAASzG,SAC9DC,eAACgU,KAAM,CACLC,cAAe,CACb84B,QAAS,GACTlrB,UAAW,GACXC,QAAS,GACT7S,SAAU,IAGZmF,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAIioB,GAEZ,IAAII,EAAY,CACdosB,aAAcA,EACdD,QAAS14B,EAAO04B,QAChBlrB,UAAWvD,GAAejK,EAAOwN,WACjChB,iBAAkBL,GAGhBnM,EAAOyN,UACTlB,EAAUkB,QAAUxD,GAAejK,EAAOyN,UAG5C,IAAIhB,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB3oB,QAAQC,IAAI0oB,EAAa5b,OAAOiN,QAChC,IAAI4O,EAAeD,EAAa5b,OAAOiN,OACvCha,QAAQC,IAAI2oB,GAEZN,EAAU3R,SAAWiS,EAErBusB,EAAY,CAAEhiC,UAAW,CACvB8I,MAAOqM,GACNlM,eAAgB,CACf,CAACC,MAAO63B,GAAqB/gC,UAAW,CAACuhC,aAAcA,OAE1Dp4B,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,4CAA8C,CAC3DmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,EAClB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAEA,IAAI6M,EAAOrB,EAAcsB,QAAQT,MAAM,GACvCG,EAAOO,cAAcF,EACvB,EAAEphB,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9Dvf,gBAAC4S,KAAM,CAAAnT,SAAA,CACPO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,UACLlG,UAAY+S,EAAO85B,QAAW,0BAA4B,eAC1Dx5B,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPC,eAACmT,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SACtDO,gBAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,eAAA,SAAOsE,KAAK,OAAO6b,IAAKL,EAAe5f,UAAU,oBAAoB4b,SAAUmE,IAC/EjgB,eAAA,SAAOE,UAAU,oBAAoBkgB,MAAOb,GAA0Bxf,SACnEggB,cAMXzf,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,IAEhD5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,gCAKhEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC2E,KAAM,CAACG,MAAM,OAAO2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAACtG,SACzDH,EAAE,yBAGA,OAMnB,KCAeF,sBA5Jf,SAAiCC,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACtC2oC,EAAiB5oC,EAAM2K,OAAOk+B,gBAC9Be,EAAe5pC,EAAM2K,OAAOm/B,cAC5B31B,EAAKnU,EAAM2K,OAAOwJ,GAClB/Q,EAAWymC,GAAYrtC,EAAGotC,GAE1B3mC,EAAS,2BAAAyI,OAA8Bk9B,EAAc,KAAAl9B,OAAIk+B,GACzD5O,EAAuBp+B,eAAC6G,GAAU,CAACR,UAAWA,IAEpDuN,EAA2BC,YAAY84B,GAAiB,CACtD3b,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADpCqnC,EAEN35B,YAAAH,EAAA,GAFoB,GAGtBtQ,EAAiCC,YAASkpC,GAAoB,CAC5DhhC,UAAW,CAAE,GAAM8L,KADb3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB,GAAIF,EACF,OACE5B,eAACmtC,GAAyB,CAAC/O,qBAAsBA,EAAqBr+B,SACnEH,EAAE,+BAKT,GAAIiC,EACF,OACE7B,eAACmtC,GAAyB,CAAC/O,qBAAsBA,EAAqBr+B,SACnEH,EAAE,0CAOT,IAAIkiB,EAAU,KAKd,OAJIhgB,EAAK6rC,qBAAqB7rB,UAC5BA,EAAU,IAAI5e,KAAKpB,EAAK6rC,qBAAqB7rB,UAI7C9hB,eAACmtC,GAAyB,CAAC/O,qBAAsBA,EAAqBr+B,SACpEO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SACRH,EAAE,+BAAiC,MAAQ4G,MAGhDxG,eAACgU,KAAM,CACLC,cAAe,CACb84B,QAASjrC,EAAK6rC,qBAAqBZ,QACnClrB,UAAW,IAAI3e,KAAKpB,EAAK6rC,qBAAqB9rB,WAC9CC,QAASA,GAGX1N,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZ,IAAIuM,EAAY,CACdrJ,GAAIA,EACJw1B,QAAS14B,EAAO04B,QAChBlrB,UAAWvD,GAAejK,EAAOwN,YAG/BxN,EAAOyN,UACTlB,EAAUkB,QAAUxD,GAAejK,EAAOyN,UAG5C4rB,EAAe,CAAEjiC,UAAW,CAC1B8I,MAAOqM,GACNlM,eAAgB,CACf,CAACC,MAAO63B,GAAqB/gC,UAAW,CAACuhC,aAAcA,OAE1Dp4B,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,6CAA+C,CAC5DmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,EAClB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9Dvf,gBAAC4S,KAAM,CAAAnT,SAAA,CACPO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,UACLlG,UAAY+S,EAAO85B,QAAW,0BAA4B,eAC1Dx5B,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,4BAc9DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,IAEhD5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,gCAKhEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC2E,KAAM,CAACG,MAAM,OAAO2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAACtG,SACzDH,EAAE,yBAGA,QAMnB,IC1IeF,I,wBAAAA,iBAAkB6C,aA5BjC,SAAiC5C,GAA0C,IAAxCC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EACrE,OACEvW,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAU,2BAEtBrG,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,sBAAqBnK,SAClDC,eAACyW,GAAS,CAACL,OAAO,qCAK1BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCvCa6tC,GAAqBt0C,YAAGC,QAAAC,YAAA,ulBA+BxBq0C,GAAoBv0C,YAAGI,QAAAF,YAAA,0LAavBs0C,GAAcx0C,YAAGK,QAAAH,YAAA,wMAUjBu0C,GAAiBz0C,YAAGO,QAAAL,YAAA,uNAWpBw0C,GAAiB10C,YAAGQ,QAAAN,YAAA,iKAQpBy0C,GAA8B30C,YAAGU,QAAAR,YAAA,+kBAgCjC00C,GAA0B50C,YAAGY,QAAAV,YAAA,2NAU7B20C,GAA+B70C,YAAG2qB,QAAAzqB,YAAA,gLCwDhCkG,qBAAkB6C,aAnJjC,SAA6B5C,GAAgB,IAAdC,EAACD,EAADC,EAEvBkb,GAFiCnb,EAAP0D,QACZI,qBAAWxC,IACA6Z,YAEzB5K,EAAYtQ,EAAE,+BAEpB0D,EAA4CC,YAASqqC,IAA7ChsC,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAC9BuC,EAA0BC,YAAYm6B,IAA9BI,EAA6Cr6B,YAAAH,EAAA,GAAhC,GAErB,GAAIhS,EAAS,OACX5B,eAACquC,GAAwB,CAAAtuC,SACvBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACquC,GAAwB,CAAAtuC,SACvBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,6CAKZ,IAAI0uC,EAAWxsC,EAAKysC,qBAGpB,OAAKD,EAASllC,MAAMjK,OAUlBa,eAACquC,GAAwB,CAAAtuC,SACvBC,eAACiO,GAAW,CACViC,UAAWA,EACXR,SAAU4+B,EAAS5+B,SACnBY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO68B,EAAS5+B,SAASgC,WAE3BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB08B,qBAAqBnlC,MAChDsG,EAAWmC,EAAgB08B,qBAAqB7+B,SAEtD,OAAOoC,EAAS3S,OACZ,CAGEovC,qBAAsB,CACpBx8B,WAAYH,EAAe28B,qBAAqBx8B,WAChD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe28B,qBAAqBnlC,OAAK4I,aAAKF,IAC1DpC,aAGJkC,CACN,GAEJ,EAAE7R,SACAO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kCACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNuuC,EAASllC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACzBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKnD,KACNpG,eAAA,OAAKE,UAAU,aAAYH,SACzBC,eAAA,SAAOwM,wBAAyB,CAACC,OAAQC,KAAUC,SAASpD,EAAKV,oBAHrDgE,gBAMhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,KAEjC9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKuY,SAASlW,OAAOkP,KAE/B9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKilC,sBAAsBplC,MAAMkD,KAAI,SAAAU,GAAA,IAASgR,EAAQhR,EAAdzD,KAAI,OAC1CvJ,eAAA,OAAAD,SAAKC,eAACuI,KAAK,CAACzD,MAAM,UAAU5E,UAAU,OAAMH,SAAEie,EAAS5X,QAAmB,MAG/E9F,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,+BAAA0M,OAAiCvF,EAAKgO,GAAE,cAAaxX,SAC3DC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,kDAGPI,eAAC0E,IAAI,CAACtC,GAAE,+BAAA0M,OAAiCvF,EAAKgO,IAAKxX,SACjDC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,oDACduZ,eAAgBnZ,eAAA,KAAAD,SAAIwJ,EAAKnD,OACzBgT,WAAYxZ,EAAE,yCACdgb,eAAgBwzB,EAChB90B,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAACC,MAAOi5B,OAIlB,EAAE7tC,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBAnCfyG,kBAlBzBA,eAwDJ,aAzGxB7M,eAACquC,GAAwB,CAAAtuC,SACvBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,yCA8Gd,KCtKa6uC,GAAiBj8B,OAAaC,MAAM,CAC7CrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBCiGDF,iBAAkB6C,aAtFH,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcqB,EAAM1U,EAAN0U,OAAQpB,EAAMtT,EAANsT,OAAQ2M,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAexZ,EAAS1G,EAAT0G,UAAS,OAClH/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACLC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACT1d,UAAY+S,EAAO4O,UAAa,0BAA4B,eAC5DjG,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GACX8S,EAAc,YAAa9S,GAC3B6S,EAAgB,aAAa,EAC7B,EACA5D,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAEpD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GACP8S,EAAc,UAAW9S,GACzB6S,EAAgB,WAAW,EAC/B,EACA5D,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,EAC9CxD,gBAAiBxc,EAAE,sBAErBI,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAIhEF,eAAA,MAAAD,SAAKH,EAAE,sBACPU,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,UACLwnB,QAASvZ,EAAOzR,UAChB5C,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,wBAEnDI,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,WAE3CnT,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACkpB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,cACbC,aAAchV,EAAOxL,YACrBjQ,KAAMgwB,GACN5M,OAAQ,SAACkK,GACLrG,EAAc,cAAeqG,EAAE7gB,OAAOkkB,cACtC3J,EAAgB,eAAe,GAAM,EACzC,IAEJ5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,2BAGhEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACPG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAEHI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAChBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,2BAIV,KCrBEF,qBAAkB6C,aAzDjC,SAA+B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC5BgD,EAAY,yBAClBuN,EAAuBC,YAAYi6B,IAA3BY,EAAuC36B,YAAAH,EAAA,GAA7B,GAElB,OACC5T,eAACquC,GAAwB,CAAC73B,UAAU,EAAKzW,SACxCO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,uCAEjBI,eAACgU,KAAM,CACHC,cAAe,CAAE7N,KAAM,GAAIyC,YAAa,GAAIjG,SAAS,GACrDuR,iBAAkBs6B,GAClBr6B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBo6B,EAAW,CAAEjjC,UAAW,CACtB8I,MAAO,CACLnO,KAAMiO,EAAOjO,KACbyb,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASxD,GAAejK,EAAOyN,SAC/BjZ,YAAawL,EAAOxL,YACpBjG,QAASyR,EAAOzR,UAEjB8R,eAAgB,CACf,CAACC,MAAOi5B,OAEXh5B,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,2CAA6C,CAC1DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcqB,EAAMrH,EAANqH,OAAQpB,EAAMjG,EAANiG,OAAQ2M,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC2uC,GAAuB,CACtB37B,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRuL,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GACX,QAMd,KCkDe3G,qBAAkB6C,aAtGjC,SAAgC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACpCkU,EAAKnU,EAAM2K,OAAOwJ,GAClBrH,EAAYtQ,EAAE,oCACdyG,EAAY,yBAClB/C,EAAiCC,YAASsqC,GAAmB,CAC3DpiC,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA0BC,YAAYk6B,IAA9Ba,EAA6C76B,YAAAH,EAAA,GAAhC,GAErB,GAAIhS,EAAS,OACX5B,eAACquC,GAAwB,CAAC73B,UAAU,EAAKzW,SACvCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACquC,GAAwB,CAAC73B,UAAU,EAAKzW,SACvCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZ,IAAMiY,EAAc/V,EAAK+sC,oBACzBv2C,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAIZ,IAAI+f,EAAY,KACZhK,EAAYgK,YACdA,EAAY,IAAI3e,KAAK2U,EAAYgK,YAEnC,IAAIC,EAAU,KAMd,OALIjK,EAAYiK,UACdA,EAAU,IAAI5e,KAAK2U,EAAYiK,UAK/B9hB,eAACquC,GAAwB,CAAC73B,UAAU,EAAKzW,SACvCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACHC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClByC,YAAagP,EAAYhP,YACzBgZ,UAAWA,EACXC,QAASA,EACTlf,QAASiV,EAAYjV,SAEvBuR,iBAAkBs6B,GAClBr6B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZu6B,EAAc,CAAEnjC,UAAW,CACzB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,YACpBgZ,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASxD,GAAejK,EAAOyN,WAEhCpN,eAAgB,CACf,CAACC,MAAOi5B,OAEXh5B,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,4CAA8C,CAC3DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcqB,EAAMrH,EAANqH,OAAQpB,EAAMjG,EAANiG,OAAQ2M,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC2uC,GAAuB,CACtB37B,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRuL,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GACX,OAMhB,KCyCe3G,qBAAkB6C,aA9IjC,SAAyC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACvC0rC,GADqDnvC,EAAP0D,QAClCD,EAAM2K,OAAOwJ,IAC3BrH,EAAYtQ,EAAE,8CAClB0D,EAAiCC,YAAS0qC,GAA6B,CACrExiC,UAAW,CAAE8L,GAAIu3B,KADXltC,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAiCC,YAAYq6B,IAArCa,EAA6Dh7B,YAAAH,EAAA,GAAzC,GAC5BoH,EAAsCnH,YAAYs6B,IAA1Ca,EAAuEj7B,YAAAiH,EAAA,GAA9C,GAGjC,GAAIpZ,EAAS,OACX5B,eAACquC,GAAwB,CAAC73B,UAAU,EAAKzW,SACvCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACquC,GAAwB,CAAC73B,UAAU,EAAKzW,SACvCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAMmtC,EAAYntC,EAAK0sC,sBACjB1lC,EAAUhH,EAAK+sC,oBAEjBK,EAAoB,CAAC,EASzB,OARIpmC,EAAQ0lC,sBAAsBplC,OAChCN,EAAQ0lC,sBAAsBplC,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC7C2lC,EAAkB3lC,EAAKgO,KAAM,CAAI,IAIrCrH,EAAYA,EAAY,MAAQpH,EAAQ1C,KAGtCpG,eAACquC,GAAwB,CAAC73B,UAAU,EAAKzW,SACvCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,MACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,QAHNiN,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNkvC,EAAU7lC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC1BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKgO,MAAM23B,EACXlvC,eAACmG,KAAI,CAACC,KAAK,eAAelG,UAAU,eAAkBF,eAACmG,KAAI,CAACC,KAAK,WAAWlG,UAAU,cAF1E2M,gBAKhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGfvU,QAAQC,IAAKgR,EAAKgO,MAAM23B,GACrB3lC,EAAKgO,MAAM23B,EAmCblvC,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,sBAAqBH,SACxCO,gBAACqE,KAAM,CAACG,MAAM,OACZD,KAAK,KACL0B,MAAO3G,EAAE,sDACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,kBACZD,QAAQC,IAAIgR,EAAKgO,IACjB,IAAI43B,EAAa5lC,EAAKgO,GACtBy3B,EAA0B,CAAEvjC,UAAW,CACrC8I,MAAO,CACLs6B,oBAAqBC,EACrB9mC,qBAAsBmnC,IAE3Bz6B,eAAgB,CACf,CAACC,MAAOs5B,GAA6BxiC,UAAW,CAAC,GAAMqjC,OACvDl6B,MAAK,SAAAoV,GAAe,IAAZloB,EAAIkoB,EAAJloB,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAAQlV,EAAE,uDAAwD,CACtEmV,SAAUF,KAAMG,SAASC,cAE7B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SAAA,CACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,iBAAiB,IAAG,IAC1CxG,EAAE,0DA7ByCiN,gBAjChD7M,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,wBAAuBH,SAC1CO,gBAACqE,KAAM,CAACG,MAAM,OACZD,KAAK,KACL0B,MAAO3G,EAAE,iDACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,eACZ,IAAI42C,EAAa5lC,EAAKgO,GACtBw3B,EAAqB,CAAEtjC,UAAW,CAChC8I,MAAO,CACLs6B,oBAAqBC,EACrB9mC,qBAAsBmnC,IAE3Bz6B,eAAgB,CACf,CAACC,MAAOs5B,GAA6BxiC,UAAW,CAAC,GAAMqjC,OACvDl6B,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAAQlV,EAAE,mDAAoD,CAClEmV,SAAUF,KAAMG,SAASC,cAE7B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SAAA,CACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,gBAAgB,IAAG,IACzCxG,EAAE,qDA5B2CiN,kBAZtCA,eA8EJ,YAO5B,KCrHenN,I,eAAAA,iBAAkB6C,aA5BjC,SAAkC5C,GAA0C,IAAxCC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EACtE,OACEvW,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAU,4BAEtBrG,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,uBAAsBnK,SACnDC,eAACyW,GAAS,CAACL,OAAO,sCAK1BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCxCaqvC,GAAsB91C,YAAGC,QAAAC,YAAA,+ZAoBzB61C,GAAqB/1C,YAAGI,QAAAF,YAAA,0IAUxB81C,GAAeh2C,YAAGK,QAAAH,YAAA,yNAYlB+1C,GAAkBj2C,YAAGO,QAAAL,YAAA,2MAWrBg2C,GAAmBl2C,YAAGQ,QAAAN,YAAA,kNCiHpBkG,qBAAkB6C,aAjJjC,SAA8B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACjCqT,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACpB1G,EAAYtQ,EAAE,gCACpB0D,EAAqDC,YAAS6rC,GAAqB,CACjF3jC,UAAW,CAAEoL,SAAUA,KADjBjV,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAGvCuC,EAA4BC,YAAY27B,IAAhCC,EAAiD17B,YAAAH,EAAA,GAAlC,GAEjBqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAIP,GAAIgC,EAAS,OACX5B,eAAC0vC,GAAyB,CAAA3vC,SACxBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAAC0vC,GAAyB,CAAA3vC,SACxBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,8CAKZ,IAAI+vC,EAAY7tC,EAAK8tC,sBAGrB,OAAKD,EAAUvmC,MAAMjK,OAanBa,eAAC0vC,GAAyB,CAAA3vC,SACxBC,eAACiO,GAAW,CACViC,UAAWA,EACXC,cAAe8G,EACf3G,aAAa,EACbZ,SAAUigC,EAAUjgC,SACpBG,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAOk+B,EAAUjgC,SAASgC,WAE5BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB+9B,sBAAsBxmC,MACjDsG,EAAWmC,EAAgB+9B,sBAAsBlgC,SAEvD,OAAOoC,EAAS3S,OACZ,CAGEywC,sBAAuB,CACrB79B,WAAYH,EAAeg+B,sBAAsB79B,WACjD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeg+B,sBAAsBxmC,OAAK4I,aAAKF,IAC3DpC,aAGJkC,CACN,GAEJ,EAAE7R,SACAO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,MAFFrF,kBAKlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN4vC,EAAUvmC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC1BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,gCAAkCqH,EAAKgO,GAAG,EACtEzS,MAAM,YAAW/E,SACtBH,EAAE,kBAGPI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACdk4B,EAAgB,CAAEhkC,UAAW,CAC3B8I,MAAO,CACPgD,KACAV,UAAWA,IAEhBnC,eAAgB,CACf,CAACC,MAAOy6B,GAAqB3jC,UAAW,CAAC,SAAYoL,OACrDjC,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZiX,EAAc,qBAAyB,oBAAqB,CAC3D9B,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,cAnCYyG,kBAJzBA,eA0CJ,aA5FxB7M,eAAC0vC,GAAyB,CAAA3vC,SACxBC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,gCACZuQ,cAAe8G,EAAclX,SACzCC,eAAA,KAAAD,SAC0DH,EAArDiX,EAAuD,uCAAzC,0CA+F3B,KCnKag5B,GAAkBr9B,OAAaC,MAAM,CAC9CrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBCoCDF,iBAAkB6C,aA9BF,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UAAS,OAC3E/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACrCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAGzDI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACPG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAEHI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAChBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,2BAIV,KCkCEF,qBAAkB6C,aAlDjC,SAAgC5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC7BgD,EAAY,0BAClBuN,EAAwBC,YAAYy7B,IAA5BQ,EAAyC/7B,YAAAH,EAAA,GAA9B,GAEnB,OACC5T,eAAC0vC,GAAyB,CAACl5B,UAAU,EAAKzW,SACzCO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,wCAEjBI,eAACgU,KAAM,CACHC,cAAe,CAAE7N,KAAM,GAAIkR,KAAM,IACjCnD,iBAAkB07B,GAClBz7B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBw7B,EAAY,CAAErkC,UAAW,CACvB8I,MAAO,CACLnO,KAAMiO,EAAOjO,OAEdsO,eAAgB,CACf,CAACC,MAAOy6B,GAAqB3jC,UAAW,CAAC,UAAY,OAExDmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,4CAA8C,CAC3DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACtBjT,eAAC+vC,GAAwB,CACvB/8B,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,GACX,QAMd,KC8Be3G,I,eAAAA,iBAAkB6C,aAhFjC,SAAiC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACrCkU,EAAKnU,EAAM2K,OAAOwJ,GAClBrH,EAAYtQ,EAAE,qCACdyG,EAAY,0BAClB/C,EAAiCC,YAAS8rC,GAAoB,CAC5D5jC,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA2BC,YAAY07B,IAA/BS,EAA+Cj8B,YAAAH,EAAA,GAAjC,GAEtB,GAAIhS,EAAS,OACX5B,eAAC0vC,GAAyB,CAACl5B,UAAU,EAAKzW,SACxCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAAC0vC,GAAyB,CAACl5B,UAAU,EAAKzW,SACxCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZ,IAAMiY,EAAc/V,EAAKmuC,qBAIzB,OAHA33C,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAGV9B,eAAC0vC,GAAyB,CAACl5B,UAAU,EAAKzW,SACxCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACHC,cAAe,CACb7N,KAAMyR,EAAYzR,MAEpB+N,iBAAkB07B,GAClBz7B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ27B,EAAe,CAAEvkC,UAAW,CAC1B8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,OAEdsO,eAAgB,CACf,CAACC,MAAOy6B,GAAqB3jC,UAAW,CAAC,UAAY,OAExDmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,6CAA+C,CAC5DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACtBjT,eAAC+vC,GAAwB,CACvB/8B,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,GACX,OAMhB,KC9Fa6pC,GAAsB52C,YAAGC,QAAAC,YAAA,4bAqBzB22C,GAAqB72C,YAAGI,QAAAF,YAAA,+JAWxB42C,GAAe92C,YAAGK,QAAAH,YAAA,gPAalB62C,GAAkB/2C,YAAGO,QAAAL,YAAA,gOAYrB82C,GAAmBh3C,YAAGQ,QAAAN,YAAA,kNChBpBkG,qBAAkB6C,aA5BjC,SAAkC5C,GAAGA,EAADC,EAAUD,EAAP0D,QAAqC,IAA5BtD,EAAQJ,EAARI,SAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EACtE,OACEvW,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAM,eAAcxG,SAC/BC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAU,4BAEtBrG,eAAC0N,GAAoB,CAACzD,WAAW,MACjBC,SAAS,uBAAsBnK,SAC7CC,eAACyW,GAAS,CAACL,OAAO,sCAK1BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KC4IeL,qBAAkB6C,aA7JjC,SAA8B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACjCqT,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACpB1G,EAAYtQ,EAAE,gCACpB0D,EAAqDC,YAAS2sC,GAAqB,CACjFzkC,UAAW,CAAEoL,SAAUA,KADjBjV,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAGvCuC,EAA4BC,YAAYy8B,IAAhCC,EAAiDx8B,YAAAH,EAAA,GAAlC,GAEjBqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAKP,GAAIgC,EAAS,OACX5B,eAACwwC,GAAyB,CAAAzwC,SACxBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACwwC,GAAyB,CAAAzwC,SACxBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,8CAKZ,IAAIqvC,EAAYntC,EAAK0sC,sBAGrB,OAAKS,EAAU7lC,MAAMjK,OAYnBa,eAACwwC,GAAyB,CAAAzwC,SACxBC,eAACiO,GAAW,CAACiC,UAAWA,EACdC,cAAe8G,EACf3G,aAAa,EACbZ,SAAUu/B,EAAUv/B,SACpBG,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAOw9B,EAAUv/B,SAASgC,WAE5BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB28B,sBAAsBplC,MACjDsG,EAAWmC,EAAgB28B,sBAAsB9+B,SAEvD,OAAOoC,EAAS3S,OACZ,CAGEqvC,sBAAuB,CACrBz8B,WAAYH,EAAe48B,sBAAsBz8B,WACjD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe48B,sBAAsBplC,OAAK4I,aAAKF,IAC3DpC,aAGJkC,CACN,GAEJ,EAAE7R,SACRO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNkvC,EAAU7lC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC1BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAK2lB,cACLlvB,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,iBAC1BI,eAACuI,KAAK,CAACzD,MAAM,SAAQ/E,SAAEH,EAAE,iBAHbiN,gBAKhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCU,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,gCAAkCqH,EAAKgO,GAAG,EACtEzS,MAAM,YAAW/E,SACtBH,EAAE,kBAELI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,iCAAmCqH,EAAKgO,GAAG,EACvEzS,MAAM,YAAW/E,SACtBH,EAAE,sBAITI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACdg5B,EAAgB,CAAE9kC,UAAW,CAC3B8I,MAAO,CACPgD,KACAV,UAAWA,IAEhBnC,eAAgB,CACf,CAACC,MAAOu7B,GAAqBzkC,UAAW,CAAC,SAAYoL,OACrDjC,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZiX,EAAc,qBAAyB,oBAAqB,CAC3D9B,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,cA1CYyG,kBATzBA,eAsDJ,aAvGxB7M,eAACwwC,GAAyB,CAAAzwC,SACxBC,eAACiO,GAAW,CAACiC,UAAWA,EACZC,cAAe8G,EAAclX,SACvCC,eAAA,KAAAD,SACwDH,EAArDiX,EAAuD,uCAAzC,0CA0GzB,KChLa45B,GAAkBj+B,OAAaC,MAAM,CAC9CrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBCqGHF,qBAAkB6C,aAtFjC,SAAgC5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC9BgD,EAAY,0BACZ6J,EAAYtQ,EAAE,oCACpBgU,EAAwBC,YAAYu8B,IAA5BM,EAAyC38B,YAAAH,EAAA,GAA9B,GAEnB,OACE5T,eAACwwC,GAAyB,CAACh6B,UAAU,EAAKzW,SACxCO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACgU,KAAM,CACLC,cAAe,CAAE7N,KAAM,GAAI8oB,eAAe,GAC1C/a,iBAAkBs8B,GAClBr8B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBo8B,EAAY,CAAEjlC,UAAW,CACvB8I,MAAO,CACLnO,KAAMiO,EAAOjO,KACb8oB,cAAe7a,EAAO6a,gBAEvBxa,eAAgB,CACf,CAACC,MAAOu7B,GAAqBzkC,UAAW,CAAC,UAAY,OAExDmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,4CAA8C,CAC3DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9B/T,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO6a,gBAClBlvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,qCAEjDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,WAG/CnT,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAG3DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,2BAIR,QAMrB,KC2CeF,I,eAAAA,iBAAkB6C,aA3HjC,SAAiC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACrCkU,EAAKnU,EAAM2K,OAAOwJ,GAClBrH,EAAYtQ,EAAE,qCACdyG,EAAY,0BAClB/C,EAAiCC,YAAS4sC,GAAoB,CAC5D1kC,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA2BC,YAAYw8B,IAA/BM,EAA+C58B,YAAAH,EAAA,GAAjC,GAGtB,GAAIhS,EAAS,OACX5B,eAACwwC,GAAyB,CAACh6B,UAAU,EAAKzW,SACxCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACwwC,GAAyB,CAACh6B,UAAU,EAAKzW,SACxCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,8CAKZ,IAAMiY,EAAc/V,EAAKkG,qBAIzB,OAHA1P,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAGV9B,eAACwwC,GAAyB,CAACh6B,UAAU,EAAKzW,SACxCO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHO,gBAAC4G,KAAKN,OAAM,CAAA7G,SAAA,CACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,IACZ5X,QAAQC,IAAI6K,EAAM2K,OAAOwJ,OAE5BvX,eAACgU,KAAM,CACHC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClB8oB,cAAerX,EAAYqX,eAE7B/a,iBAAkBs8B,GAClBr8B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZs8B,EAAe,CAAEllC,UAAW,CAC1B8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,KACb8oB,cAAe7a,EAAO6a,gBAEvBxa,eAAgB,CACf,CAACC,MAAOu7B,GAAqBzkC,UAAW,CAAC,UAAY,OAExDmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,6CAA+C,CAC5DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9B/T,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO6a,gBAClBlvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,qCAEjDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,WAE/CnT,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAG3DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAETH,EAAE,2BAIN,QAMzB,KC9IagxC,GAA2Bt3C,YAAGC,QAAAC,YAAA,grBA6B9Bq3C,GAA0Bv3C,YAAGI,QAAAF,YAAA,wOAe7Bs3C,GAAoBx3C,YAAGK,QAAAH,YAAA,6VAiBvBu3C,GAAuBz3C,YAAGO,QAAAL,YAAA,iTAgB1Bw3C,GAAwB13C,YAAGQ,QAAAN,YAAA,kOCnCzBkG,qBAAkB6C,aA7BjC,SAAsC5C,GAAqF,IAAnFC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAOrD,EAAQJ,EAARI,SAAQ4yB,EAAAhzB,EAAEizB,eAAO,IAAAD,GAAMA,EAAA7hB,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,0BAAyBA,EACrH,OACE9Q,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAC6G,GAAU,CAACR,UAAWA,IACrBusB,EACA5yB,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,2BAA0BnK,SACvDC,eAACyW,GAAS,CAACL,OAAM,qCAAAtH,OAAuC1L,EAAM2K,OAAOkjC,aACnE/wC,UAAU,WAEZ,QAIRF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAMd,KC4IcL,qBAAkB6C,aA/JjC,SAAmC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAC1C8tC,EAAyB9tC,EAAM2K,OAAOkjC,YACxC/gC,EAAYtQ,EAAE,qCAClB8W,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC1BtT,EAAqDC,YAASqtC,GAA0B,CACtFnlC,UAAW,CAAEoL,SAAUA,EAAU7O,qBAAsBkpC,KADjDtvC,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAGvCuC,EAAgCC,YAAYm9B,IAApCG,EAA0Dp9B,YAAAH,EAAA,GAAvC,GAErBqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAKP,GAAIgC,EAAS,OACX5B,eAACoxC,GAA6B,CAACxe,SAAS,EAAK7yB,SAC3CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACoxC,GAA6B,CAACxe,SAAS,EAAK7yB,SAC3CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,mDAKZ,IAAIyxC,EAAgBvvC,EAAKwvC,0BACrBtzB,EAAWlc,EAAKkG,qBAKpB,OAHAkI,EAAS,GAAApB,OAAMoB,EAAS,OAAApB,OAAMkP,EAAS5X,MAGlCirC,EAAcjoC,MAAMjK,OAYvBa,eAACoxC,GAA6B,CAACxe,SAAS,EAAK7yB,SAC3CC,eAACiO,GAAW,CACViC,UAAWA,EACCC,cAAe8G,EACf3G,aAAa,EACbZ,SAAU2hC,EAAc3hC,SACxBG,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO4/B,EAAc3hC,SAASgC,WAEhCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB0/B,2BAA2BnoC,MACtDsG,EAAWmC,EAAgB0/B,2BAA2B7hC,SAE5D,OAAOoC,EAAS3S,OACZ,CAGEoyC,2BAA4B,CAC1Bx/B,WAAYH,EAAe2/B,2BAA2Bx/B,WACtD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe2/B,2BAA2BnoC,OAAK4I,aAAKF,IAChEpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNsxC,EAAcjoC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC9BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAK2lB,cACLlvB,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,iBAC1BI,eAACuI,KAAK,CAACzD,MAAM,SAAQ/E,SAAEH,EAAE,iBAHbiN,gBAKhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,sCAAwCkB,EAAM2K,OAAOkjC,YAAc,IAAM1nC,EAAKgO,GAAG,EAC7GzS,MAAM,YAAW/E,SACtBH,EAAE,kBAGLI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACd45B,EAAoB,CAAE1lC,UAAW,CAC/B8I,MAAO,CACPgD,KACAV,UAAWA,IAEhBnC,eAAgB,CACf,CACEC,MAAOi8B,GACPnlC,UAAW,CAACoL,SAAUA,EAAU7O,qBAAsBkpC,OAExDt8B,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZiX,EAAc,qBAAyB,oBAAqB,CAC3D9B,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,cAtCUyG,kBATzBA,eAkDJ,aArGxB7M,eAACoxC,GAA6B,CAACxe,SAAS,EAAK7yB,SAC3CC,eAACiO,GAAW,CAACiC,UAAWA,EACZC,cAAe8G,EAAclX,SACvCC,eAAA,KAAAD,SAC+DH,EAA1DiX,EAA4D,4CAA9C,+CAwG3B,KChLa26B,GAAuBh/B,OAAaC,MAAM,CACnDrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBCmDHF,iBAAkB6C,aA1CI,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAmBoT,GAATrT,EAAP0D,QAAc1D,EAALyD,MAAmBzD,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQhO,EAAS1G,EAAT0G,UAAS,OAChG/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO6a,gBAClBlvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,0CAEjDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,WAG/CnT,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAG3DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,2BAIR,KCcIF,qBAAkB6C,aAnDjC,SAAoC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAClC8rC,EADgDxvC,EAALyD,MACxB2K,OAAOkjC,YAC1B5qC,EAAS,iCAAAyI,OAAoCqgC,GACnDv7B,EAA4BC,YAAYi9B,IAAhCW,EAAkD19B,YAAAH,EAAA,GAAnC,GAEvB,OACE5T,eAACoxC,GAA6B,CAAC56B,UAAU,EAAMnQ,UAAWA,EAAUtG,SAClEC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,yCAAyCG,SACtDC,eAACgU,KAAM,CACLC,cAAe,CAAE7N,KAAM,GAAI8oB,eAAe,GAC1C/a,iBAAkBq9B,GAClBp9B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBm9B,EAAgB,CAAEhmC,UAAW,CAC3B8I,MAAO,CACLvM,qBAAsBmnC,EACtB/oC,KAAMiO,EAAOjO,KACb8oB,cAAe7a,EAAO6a,gBAEvBxa,eAAgB,CACf,CAACC,MAAOi8B,GACNnlC,UAAW,CAAC,UAAY,EAAO,qBAAwB0jC,OAE5Dv6B,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,iDAAmD,CAChEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAAC0xC,GAA4B,CAC3B1+B,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACT,OAMhB,KCwCe3G,qBAAkB6C,aAtFjC,SAAqC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAC3CmU,EAAKnU,EAAM2K,OAAOwJ,GAClB43B,EAAa/rC,EAAM2K,OAAOkjC,YAC1B5qC,EAAS,iCAAAyI,OAAoCqgC,GAC7Cj/B,EAAYtQ,EAAE,0CACpB0D,EAAiCC,YAASstC,GAAyB,CACjEplC,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA+BC,YAAYk9B,IAAnCY,EAAwD59B,YAAAH,EAAA,GAAtC,GAG1B,GAAIhS,EAAS,OACX5B,eAACoxC,GAA6B,CAAC56B,UAAU,EAAMnQ,UAAWA,EAAUtG,SAClEC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACoxC,GAA6B,CAAC56B,UAAU,EAAMnQ,UAAWA,EAAUtG,SAClEC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZ,IAAMiY,EAAc/V,EAAKqL,yBAIzB,OAHA7U,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAGV9B,eAACoxC,GAA6B,CAAC56B,UAAU,EAAMnQ,UAAWA,EAAUtG,SAClEC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClB8oB,cAAerX,EAAYqX,eAE7B/a,iBAAkBq9B,GAClBp9B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZs9B,EAAmB,CAAElmC,UAAW,CAC9B8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,KACb8oB,cAAe7a,EAAO6a,gBAEvBxa,eAAgB,CACjB,CAACC,MAAOi8B,GACNnlC,UAAW,CAAC,UAAY,EAAO,qBAAwBrI,EAAM2K,OAAOkjC,iBAEvEr8B,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,kDAAoD,CACjEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAAC0xC,GAA4B,CAC7B1+B,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACT,OAMd,KC5De3G,I,eAAAA,iBAAkB6C,aA5BjC,SAA+B5C,GAA0C,IAAxCC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EACnE,OACEvW,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAU,yBAEtBrG,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,oBAAmBnK,SAChDC,eAACyW,GAAS,CAACL,OAAO,mCAK1BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCvCa6xC,GAAmBt4C,YAAGC,QAAAC,YAAA,yZAoBtBq4C,GAAkBv4C,YAAGI,QAAAF,YAAA,8HAUrBs4C,GAAYx4C,YAAGK,QAAAH,YAAA,6MAYfu4C,GAAez4C,YAAGO,QAAAL,YAAA,+LAWlBw4C,GAAgB14C,YAAGQ,QAAAN,YAAA,sMCqHjBkG,qBAAkB6C,aAnJjC,SAA2B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC9BqT,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACpB1G,EAAYtQ,EAAE,6BACpB0D,EAAqDC,YAASquC,GAAkB,CAC9EnmC,UAAW,CAAEoL,SAAUA,KADjBjV,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAGvCuC,EAAyBC,YAAYm+B,IAA7BC,EAA2Cl+B,YAAAH,EAAA,GAA/B,GAEdqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAIP,GAAIgC,EAAS,OACX5B,eAACkyC,GAAsB,CAAAnyC,SACrBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACkyC,GAAsB,CAAAnyC,SACrBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,2CAKZ,IAAIuyC,EAASrwC,EAAKswC,mBAGlB,OAAKD,EAAO/oC,MAAMjK,OAahBa,eAACkyC,GAAsB,CAAAnyC,SACrBC,eAACiO,GAAW,CACViC,UAAWA,EACXC,cAAe8G,EACf3G,aAAa,EACbZ,SAAUyiC,EAAOziC,SACjBG,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO0gC,EAAOziC,SAASgC,WAEzBC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBugC,mBAAmBhpC,MAC9CsG,EAAWmC,EAAgBugC,mBAAmB1iC,SAEpD,OAAOoC,EAAS3S,OACZ,CAGEizC,mBAAoB,CAClBrgC,WAAYH,EAAewgC,mBAAmBrgC,WAC9C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAewgC,mBAAmBhpC,OAAK4I,aAAKF,IACxDpC,aAGJkC,CACN,GAEJ,EAAE7R,SACAO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,MAFFrF,kBAKlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNoyC,EAAO/oC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACvBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,6BAA+BqH,EAAKgO,GAAG,EACnEzS,MAAM,YAAW/E,SACtBH,EAAE,kBAGPI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACd06B,EAAa,CAAExmC,UAAW,CACxB8I,MAAO,CACPgD,KACAV,UAAWA,IAEhBnC,eAAgB,CACf,CAACC,MAAOi9B,GAAkBnmC,UAAW,CAAC,SAAYoL,OAClDjC,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZiX,EAAc,qBAAyB,oBAAqB,CAC3D9B,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,cAnCYyG,kBAJzBA,eA0CJ,aA5FxB7M,eAACkyC,GAAsB,CAAAnyC,SACrBC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,6BACZuQ,cAAe8G,EAAclX,SACzCC,eAAA,KAAAD,SACuDH,EAAlDiX,EAAoD,oCAAtC,uCA+F3B,KCrKaw7B,GAAe7/B,OAAaC,MAAM,CAC3CrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBCoCDF,iBAAkB6C,aA9BL,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UAAS,OACxE/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACrCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAGzDI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACPG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAEHI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAChBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,2BAIV,KCgCEF,qBAAkB6C,aAlDjC,SAA6B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC1BgD,EAAY,uBAClBuN,EAAqBC,YAAYi+B,IAAzBQ,EAAmCv+B,YAAAH,EAAA,GAA3B,GAEhB,OACC5T,eAACkyC,GAAsB,CAAC17B,UAAU,EAAKzW,SACtCO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,qCAEjBI,eAACgU,KAAM,CACHC,cAAe,CAAE7N,KAAM,GAAIkR,KAAM,IACjCnD,iBAAkBk+B,GAClBj+B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBg+B,EAAS,CAAE7mC,UAAW,CACpB8I,MAAO,CACLnO,KAAMiO,EAAOjO,OAEdsO,eAAgB,CACf,CAACC,MAAOi9B,GAAkBnmC,UAAW,CAAC,UAAY,OAErDmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,yCAA2C,CACxDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACtBjT,eAACuyC,GAAqB,CACpBv/B,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,GACX,QAMd,KCmCe3G,I,kBAAAA,iBAAkB6C,aAhFjC,SAA8B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAClCkU,EAAKnU,EAAM2K,OAAOwJ,GAClBrH,EAAYtQ,EAAE,kCACdyG,EAAY,uBAClB/C,EAAiCC,YAASsuC,GAAiB,CACzDpmC,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAwBC,YAAYk+B,IAA5BS,EAAyCz+B,YAAAH,EAAA,GAA9B,GAEnB,GAAIhS,EAAS,OACX5B,eAACkyC,GAAsB,CAAC17B,UAAU,EAAKzW,SACrCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACkyC,GAAsB,CAAC17B,UAAU,EAAKzW,SACrCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZ,IAAMiY,EAAc/V,EAAKiG,kBAIzB,OAHAzP,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAGV9B,eAACkyC,GAAsB,CAAC17B,UAAU,EAAKzW,SACrCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACHC,cAAe,CACb7N,KAAMyR,EAAYzR,MAEpB+N,iBAAkBk+B,GAClBj+B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZm+B,EAAY,CAAE/mC,UAAW,CACvB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,OAEdsO,eAAgB,CACf,CAACC,MAAOi9B,GAAkBnmC,UAAW,CAAC,UAAY,OAErDmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,0CAA4C,CACzDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACtBjT,eAACuyC,GAAqB,CACpBv/B,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,GACX,OAMhB,KChFe3G,kBAXI,SAAHC,GAAA,IAAMC,EAACD,EAADC,EAAG6yC,EAAO9yC,EAAP8yC,QAAOnsC,EAAA3G,EAAEO,iBAAS,IAAAoG,EAAC,GAAEA,EAAA,OAC5CtG,eAAC0E,IAAI,CAACtC,GAAIqwC,EAAQ1yC,SAChBC,eAAC2E,KAAM,CACLzE,UAAS,UAAA4O,OAAY5O,GACrB4E,MAAM,YAAW/E,SAEdH,EAAE,mBAEF,ICbI8yC,GAAkCp5C,YAAGC,QAAAC,YAAA,+fAyBrCm5C,GAAiCr5C,YAAGI,QAAAF,YAAA,itCAwEpCo5C,GAA2Bt5C,YAAGK,QAAAH,YAAA,wMAU9Bq5C,GAA8Bv5C,YAAGO,QAAAL,YAAA,wMAWjCs5C,GAAiCx5C,YAAGQ,QAAAN,YAAA,8NAYpC8gB,GAAyBhhB,YAAGU,QAAAR,YAAA,yiCCzF1Bu5C,GApCS,SAAHpzC,GAAyF,IAApFC,EAACD,EAADC,EAAGsZ,EAAUvZ,EAAVuZ,WAAYC,EAAcxZ,EAAdwZ,eAAgBC,EAAUzZ,EAAVyZ,WAAY45B,EAAerzC,EAAfqzC,gBAAiB15B,EAAiB3Z,EAAjB2Z,kBAClFC,wBAAa,CACXC,SAAU,SAAAjN,GAAkB,IAAfkN,EAAOlN,EAAPkN,QACX,OACEnZ,gBAAA,OAAKJ,UAAU,YAAWH,SAAA,CACxBC,eAAA,MAAAD,SAAKH,EAAE,6BACNsZ,EACAC,EACDnZ,eAAA,UAAQE,UAAU,0BAA0BuQ,QAASgJ,EAAQ1Z,SAAEH,EAAE,gCACjEU,gBAAA,UACEJ,UAAU,kBACVuQ,QAAS,WACPuiC,EAAgB15B,GACb1E,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACPxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACJsE,EAAY,CACVrE,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,IACF4X,GACF,EAAE1Z,SAAA,CAEFC,eAACmG,KAAI,CAACC,KAAK,UAAU,IAAExG,EAAE,oCAIjC,GAEJ,ECZaF,qBAAkB6C,aAnBjC,SAAsB5C,GAA0G,IAAxGC,EAACD,EAADC,EAAmBsZ,GAAXvZ,EAALyD,MAAczD,EAAP0D,QAAmB1D,EAAVuZ,YAAYC,EAAcxZ,EAAdwZ,eAAgBC,EAAUzZ,EAAVyZ,WAAY45B,EAAerzC,EAAfqzC,gBAAiBC,EAAwBtzC,EAAxBszC,yBAClG,OACEjzC,eAAA,UAAQE,UAAU,uCACdqG,MAAO3G,EAAE,mBACT6Q,QAAS,WACPsiC,GAAgB,CACZnzC,EAAGA,EACHsZ,WAAYlZ,eAAA,KAAAD,SAAImZ,IAChBC,eAAgBA,EAChBC,WAAYA,EACZ45B,gBAAiBA,EACjB15B,kBAAmB25B,GAE3B,EAAElzC,SACFC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,WAG7B,KCgBe8sC,GApCW,SAAHvzC,GAA2F,IAAtFC,EAACD,EAADC,EAAGsZ,EAAUvZ,EAAVuZ,WAAYC,EAAcxZ,EAAdwZ,eAAgBC,EAAUzZ,EAAVyZ,WAAY+5B,EAAiBxzC,EAAjBwzC,kBAAmB75B,EAAiB3Z,EAAjB2Z,kBACtFC,wBAAa,CACXC,SAAU,SAAAjN,GAAkB,IAAfkN,EAAOlN,EAAPkN,QACX,OACEnZ,gBAAA,OAAKJ,UAAU,YAAWH,SAAA,CACxBC,eAAA,MAAAD,SAAKH,EAAE,+BACNsZ,EACAC,EACDnZ,eAAA,UAAQE,UAAU,0BAA0BuQ,QAASgJ,EAAQ1Z,SAAEH,EAAE,kCACjEU,gBAAA,UACEJ,UAAU,kBACVuQ,QAAS,WACP0iC,EAAkB75B,GACf1E,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACPxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACJsE,EAAY,CACVrE,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,IACF4X,GACF,EAAE1Z,SAAA,CAEFC,eAACmG,KAAI,CAACC,KAAK,mBAAmB,IAAExG,EAAE,sCAI1C,GAEJ,ECZaF,qBAAkB6C,aAnBjC,SAAwB5C,GAA8G,IAA5GC,EAACD,EAADC,EAAmBsZ,GAAXvZ,EAALyD,MAAczD,EAAP0D,QAAmB1D,EAAVuZ,YAAYC,EAAcxZ,EAAdwZ,eAAgBC,EAAUzZ,EAAVyZ,WAAY+5B,EAAiBxzC,EAAjBwzC,kBAAmBC,EAA0BzzC,EAA1ByzC,2BACtG,OACEpzC,eAAA,UAAQE,UAAU,uCACdqG,MAAO3G,EAAE,qBACT6Q,QAAS,WACPyiC,GAAkB,CACdtzC,EAAGA,EACHsZ,WAAYlZ,eAAA,KAAAD,SAAImZ,IAChBC,eAAgBA,EAChBC,WAAYA,EACZ+5B,kBAAmBA,EACnB75B,kBAAmB85B,GAE3B,EAAErzC,SACFC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,WAG7B,KC6Be1G,qBAAkB6C,aA9CjC,SAAmC5C,GAA6B,IAA3BC,EAACD,EAADC,EAAmB2J,GAAX5J,EAALyD,MAAczD,EAAP0D,QAAa1D,EAAJ4J,MACtDqK,EAAyBC,YAAYi/B,IAA9BO,EAA2Dt/B,YAAAH,EAAA,GAA7C,GACfc,EAAiB,CACrB,CAAEC,MAAO+9B,GAAiCjnC,UAAW,CAAEoL,SAAUtN,EAAKsN,YAGxE,OAAKtN,EAAKsN,SAqBN7W,eAACszC,GAAe,CACdp6B,WAAYtZ,EAAE,+CACdwZ,WAAYxZ,EAAE,sBACduzC,kBAAmBE,EACnBD,2BAA4B,CACxB3nC,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACTV,UAAU,IAGdnC,eAAgBA,KA9BtB1U,eAACuzC,GAAa,CACZr6B,WAAYtZ,EAAE,6CACdwZ,WAAYxZ,EAAE,oBACdozC,gBAAiBK,EACjBJ,yBAA0B,CACtBxnC,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACTV,UAAU,IAGdnC,eAAgBA,IAyB5B,KCXehV,qBAAkB6C,aA7BjC,SAAiC5C,GAAiC,IAA/BC,EAACD,EAADC,EAAGG,EAAQJ,EAARI,SAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EAC5D,OACEvW,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAU,2BAEtBrG,eAAC0N,GAAoB,CAACzD,WAAW,MACbC,SAAS,sBAAqBnK,SAChDC,eAACyW,GAAS,CAACL,OAAO,qCAK1BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCoGeL,qBAAkB6C,aAxHjC,SAA6B5C,GAAgB,IAAdC,EAACD,EAADC,EACvBsQ,GADiCvQ,EAAP0D,QACdzD,EAAE,gCACpB8W,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC1BtT,EAAmDC,YAASmvC,GAAiC,CAC3FjnC,UAAW,CAACoL,SAAUA,KADjBjV,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAItC,GAAIzP,EAAS,OACX5B,eAACwzC,GAAwB,CAAAzzC,SACvBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACwzC,GAAwB,CAAAzzC,SACvBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,6CAIZ,IAAMqX,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAKD6zC,EAAW3xC,EAAK4xC,qBAEtB,OAAKD,EAASrqC,MAAMjK,OAYlBa,eAACwzC,GAAwB,CAAAzzC,SACvBC,eAACiO,GAAW,CAACiC,UAAWA,EACXC,cAAe8G,EACf3G,aAAa,EACbZ,SAAU+jC,EAAS/jC,SACnBG,WAAY,WACXwB,EAAU,CACR5F,UAAW,CACTgG,MAAOgiC,EAAS/jC,SAASgC,WAE3BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB6hC,qBAAqBtqC,MAChDsG,EAAWmC,EAAgB6hC,qBAAqBhkC,SAEtD,OAAOoC,EAAS3S,OACZ,CAGEu0C,qBAAsB,CACpB3hC,WAAYH,EAAe8hC,qBAAqB3hC,WAChD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe8hC,qBAAqBtqC,OAAK4I,aAAKF,IAC1DpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,MACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,MAJFrF,kBAOlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN0zC,EAASrqC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACzBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC0qC,KAAM,CAAC7lC,KAAK,KAAKjB,SAAU2F,EAAKoB,0BADnBkC,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKnD,KAAK,IAACpG,eAAA,SACZA,eAAA,SAAOE,UAAU,aAAYH,SAAEwJ,EAAKV,YAAYgc,MAAM,QAFxChY,gBAIhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK+tB,cADQzqB,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAC9BI,eAAC2zC,GAAU,CAAClB,QAAO,+BAAA3jC,OAAiCvF,EAAKgO,MAE7DvX,eAAC4zC,GAA0B,CAACrqC,KAAMA,MALGsD,kBAXzBA,eAkBJ,aArExB7M,eAACwzC,GAAwB,CAAAzzC,SACvBC,eAACiO,GAAW,CAACiC,UAAWA,EACZC,cAAe8G,EAAclX,SACvCC,eAAA,KAAAD,SACyDH,EAApDiX,EAAsD,sCAAxC,yCAwE3B,KCxIag9B,GAAiBrhC,OAAaC,MAAM,CAC7CrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdiJ,YAAa2J,OACb4T,MAAO5T,SCuII9S,qBAAkB6C,aA/HjC,SAAgC5C,GAY/B,IAXCC,EAACD,EAADC,EAGAoT,GAFOrT,EAAP0D,QACK1D,EAALyD,MACYzD,EAAZqT,cACAC,EAAMtT,EAANsT,OACA5M,EAAS1G,EAAT0G,UACAwR,EAAWlY,EAAXkY,YACAiI,EAAangB,EAAbmgB,cACAC,EAAcpgB,EAAdogB,eAAcC,EAAArgB,EACdsgB,6BAAqB,IAAAD,EAAC,SAAApP,GAAC,OAAEA,CAAC,EAAAoP,EAG1B,OACE1f,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,4BAI3DF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,4BAIlEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CAClCC,eAACsT,KAAK,CAAChP,KAAK,OACR8B,KAAK,QACLlG,UAAY+S,EAAOmT,MAAS,0BAA4B,eACxD7S,aAAa,QACjBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,iBACLlG,UAAY+S,EAAOqM,eAAkB,0BAA4B,eACjE/L,aAAa,MAAKxT,SAAA,CACzBzH,QAAQC,IAAI,gCACZD,QAAQC,IAAIsf,GACb7X,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrBgL,EAAYwO,gBAAgBjd,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC1CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK8V,WAAW,KAAG9V,EAAK+c,SAAS,MAArDzZ,eAA+D,OAGhG7M,eAACwT,KAAY,CAACpN,KAAK,iBAAiBqN,UAAU,OAAOvT,UAAU,6BAIrEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,mBACLlG,UAAY+S,EAAOsI,iBAAoB,0BAA4B,eACnEhI,aAAa,MAAKxT,SAAA,CAC1BC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrBgL,EAAYqI,kBAAkB9W,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK+N,KAAK,MAA9BzK,eAAwC,OAGzE7M,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,0BAGrEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,oBACLlG,UAAY+S,EAAO6E,kBAAqB,0BAA4B,eACpEvE,aAAa,MAAKxT,SAAA,CAC1BC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrBgL,EAAYR,mBAAmBjO,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OAC7CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK+N,KAAK,MAA9BzK,eAAwC,OAGzE7M,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,6BAIxEF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPC,eAACmT,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SACtDO,gBAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,eAAA,SAAOsE,KAAK,OAAO6b,IAAKL,EAAe5f,UAAU,oBAAoB4b,SAAUmE,IAC/EjgB,eAAA,SAAOE,UAAU,oBAAoBkgB,MAAOb,GAA0Bxf,SACnEggB,gBAObzf,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAOuD,KAAK,SAAQtI,SAC7BH,EAAE,2BAMnB,KCKeF,qBAAkB6C,aA/HjC,SAA+B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC7BgD,GAD2C1G,EAALyD,MAC7B,2BACT8M,EAAYtQ,EAAE,6BAEpB0D,EAAiCC,YAAS+W,IAAlC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACxB8R,EAAiCC,YAAY++B,IAAtCkB,EAA+D//B,YAAAH,EAAA,GAAzC,GAG7B8C,EAAgCC,mBAAS,IAAGC,EAAA7C,YAAA2C,EAAA,GAArC8J,EAAQ5J,EAAA,GAAE6J,EAAW7J,EAAA,GACtBkJ,EAAgBY,iBAAO,MACvBX,EAAiBS,GAAY5gB,EAAE,yCAE/BqgB,EAAwB,SAACvC,GAC7BplB,QAAQC,IAAI,uBACZkoB,EAAY/C,EAAMrY,OAAOsb,MAAM,GAAGva,KACpC,EAEA,OAAIxE,EACF5B,eAACwzC,GAAwB,CAACh9B,UAAU,EAAKzW,SACvCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMlCa,GACFvJ,QAAQC,IAAIsJ,GAEV7B,eAACwzC,GAAwB,CAACh9B,UAAU,EAAKzW,SACvCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,qCAQdI,eAACwzC,GAAwB,CAACh9B,UAAU,EAAKzW,SACvCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACb7N,KAAM,GACNyC,YAAa,IAEfsL,iBAAmB0/B,GACnBz/B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAIioB,GAEZ,IAAII,EAAY,CACdxa,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,YACpBud,MAAO/R,EAAO+R,MACd9G,eAAgBjL,EAAOiL,eACvBxH,kBAAmBzD,EAAOyD,kBAC1ByD,iBAAkBlH,EAAOkH,iBACzB2vB,cAAe1qB,GAGbM,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB3oB,QAAQC,IAAI0oB,EAAa5b,OAAOiN,QAChC,IAAI4O,EAAeD,EAAa5b,OAAOiN,OACvCha,QAAQC,IAAI2oB,GAEZN,EAAUkqB,MAAQ5pB,EAElB4yB,EAAuB,CAAEroC,UAAW,CAClC8I,MAAOqM,GACNlM,eAAgB,CACf,CAACC,MAAO+9B,GAAiCjnC,UAAW,CAACoL,UAAU,OAElEjC,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,2CAA6C,CAC1DmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,EAClB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAEA,IAAI6M,EAAOrB,EAAcsB,QAAQT,MAAM,GACnCQ,GAAQA,EAAKtc,KAAO,QACtBic,EAAOO,cAAcF,GACZA,GAAQA,EAAKtc,KAAO,SAC7BgQ,KAAMhT,MAAMjC,EAAE,qDAAsD,CAClEmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,KAEdO,KAAMhT,MAAMjC,EAAE,gCAAiC,CAC7CmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,GAElB,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAAC+zC,GAAuB,CACtB/gC,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRwD,YAAa/V,EACbge,cAAeA,EACfC,eAAgBA,EAChBE,sBAAuBA,EACvB5Z,UAAWA,GACX,OAMd,KCgCe3G,qBAAkB6C,aA5JjC,SAAgC5C,GAAyB,IAAtBC,EAACD,EAADC,EAC3B2X,GADqC5X,EAAP0D,QAAc1D,EAALyD,MAC5B2K,OAAOwJ,IAGlBrH,EAAYtQ,EAAE,8BAEpB0D,EAAiCC,YAASovC,GAAgC,CACxElnC,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAsCC,YAAYg/B,IAA1CmB,EAAsEjgC,YAAAH,EAAA,GAA7C,GAGjC8C,EAAgCC,mBAAS,IAAGC,EAAA7C,YAAA2C,EAAA,GAArC8J,EAAQ5J,EAAA,GAAE6J,EAAW7J,EAAA,GACtBkJ,EAAgBY,iBAAO,MACvBX,EAAiBS,GAAY5gB,EAAE,yCAE/BqgB,EAAwB,SAACvC,GAC7BplB,QAAQC,IAAI,uBACZkoB,EAAY/C,EAAMrY,OAAOsb,MAAM,GAAGva,KACpC,EAEA,GAAIxE,EAAS,OACX5B,eAACwzC,GAAwB,CAACh9B,UAAU,EAAKzW,SACvCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMtC,GAAIa,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEV7B,eAACwzC,GAAwB,CAACh9B,UAAU,EAAKzW,SACvCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,oCAOhB,IAAMq0C,EAAsBnyC,EAAKmyC,oBAG7B3L,EAAiB,GAChB2L,EAAoB30B,iBACvBgpB,EAAiB2L,EAAoB30B,eAAe/H,IAGtD,IAAIkK,EAAmB,GAClBwyB,EAAoB14B,mBACvBkG,EAAmBwyB,EAAoB14B,iBAAiBhE,IAG1D,IAAImK,EAAoB,GAMxB,OALKuyB,EAAoBn8B,oBACvB4J,EAAoBuyB,EAAoBn8B,kBAAkBP,IAK1DvX,eAACwzC,GAAwB,CAACh9B,UAAU,EAAKzW,SACvCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACb7N,KAAM6tC,EAAoB7tC,KAC1ByC,YAAaorC,EAAoBprC,YACjCud,MAAO6tB,EAAoB7tB,MAC3B9G,eAAgBgpB,EAChB/sB,iBAAkBkG,EAClB3J,kBAAmB4J,GAErBvN,iBAAmB0/B,GACnBz/B,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAIioB,GAEZ,IAAII,EAAY,CACdrJ,GAAIA,EACJnR,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,YACpBud,MAAO/R,EAAO+R,MACd9G,eAAgBjL,EAAOiL,eACvBxH,kBAAmBzD,EAAOyD,kBAC1ByD,iBAAkBlH,EAAOkH,kBAG3B,SAAS24B,IACPF,EAA0B,CAAEvoC,UAAW,CACrC8I,MAAOqM,GACNlM,eAAgB,CACjB,CAACC,MAAO+9B,GAAiCjnC,UAAW,CAAEoL,UAAU,OAEjEjC,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,4CAA8C,CAC3DmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,EAClB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,CAEA,IAAIwM,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB3oB,QAAQC,IAAI0oB,EAAa5b,OAAOiN,QAChC,IAAI4O,EAAeD,EAAa5b,OAAOiN,OACvCha,QAAQC,IAAI2oB,GAEZN,EAAUkqB,MAAQ5pB,EAClBN,EAAUsqB,cAAgB1qB,EAE1B0zB,GACF,EAEA,IAAI/yB,EAAOrB,EAAcsB,QAAQT,MAAM,GACnCQ,GAAQA,EAAKtc,KAAO,QACtBic,EAAOO,cAAcF,GACZA,GAAQA,EAAKtc,KAAO,SAC7BgQ,KAAMhT,MAAMjC,EAAE,qDAAsD,CAClEmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,IAGd4/B,GAEJ,EAAEn0C,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAAC+zC,GAAuB,CACtB/gC,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRwD,YAAa/V,EACbge,cAAeA,EACfC,eAAgBA,EAChBE,sBAAuBA,EACvB5Z,UAjJG,2BAkJH,OAMd,KCnIe3G,I,eAAAA,iBAAkB6C,aA5BjC,SAA+B5C,GAA0C,IAAxCC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EACnE,OACEvW,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAU,yBAEtBrG,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,oBAAmBnK,SAChDC,eAACyW,GAAS,CAACL,OAAO,mCAK1BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCvCao0C,GAAmB76C,YAAGC,QAAAC,YAAA,yZAoBtB46C,GAAkB96C,YAAGI,QAAAF,YAAA,8HAUrB66C,GAAY/6C,YAAGK,QAAAH,YAAA,6MAYf86C,GAAeh7C,YAAGO,QAAAL,YAAA,+LAWlB+6C,GAAgBj7C,YAAGQ,QAAAN,YAAA,sMCqHjBkG,qBAAkB6C,aAnJjC,SAA2B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC9BqT,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACpB1G,EAAYtQ,EAAE,6BACpB0D,EAAqDC,YAAS4wC,GAAkB,CAC9E1oC,UAAW,CAAEoL,SAAUA,KADjBjV,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAGvCuC,EAAyBC,YAAY0gC,IAA7BC,EAA2CzgC,YAAAH,EAAA,GAA/B,GAEdqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAIP,GAAIgC,EAAS,OACX5B,eAACy0C,GAAsB,CAAA10C,SACrBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACy0C,GAAsB,CAAA10C,SACrBC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,2CAKZ,IAAI80C,EAAS5yC,EAAK6yC,mBAGlB,OAAKD,EAAOtrC,MAAMjK,OAahBa,eAACy0C,GAAsB,CAAA10C,SACrBC,eAACiO,GAAW,CACViC,UAAWA,EACXC,cAAe8G,EACf3G,aAAa,EACbZ,SAAUglC,EAAOhlC,SACjBG,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAOijC,EAAOhlC,SAASgC,WAEzBC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB8iC,mBAAmBvrC,MAC9CsG,EAAWmC,EAAgB8iC,mBAAmBjlC,SAEpD,OAAOoC,EAAS3S,OACZ,CAGEw1C,mBAAoB,CAClB5iC,WAAYH,EAAe+iC,mBAAmB5iC,WAC9C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe+iC,mBAAmBvrC,OAAK4I,aAAKF,IACxDpC,aAGJkC,CACN,GAEJ,EAAE7R,SACAO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,MAFFrF,kBAKlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN20C,EAAOtrC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACvBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,6BAA+BqH,EAAKgO,GAAG,EACnEzS,MAAM,YAAW/E,SACtBH,EAAE,kBAGPI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACdi9B,EAAa,CAAE/oC,UAAW,CACxB8I,MAAO,CACPgD,KACAV,UAAWA,IAEhBnC,eAAgB,CACf,CAACC,MAAOw/B,GAAkB1oC,UAAW,CAAC,SAAYoL,OAClDjC,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZiX,EAAc,qBAAyB,oBAAqB,CAC3D9B,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,cAnCYyG,kBAJzBA,eA0CJ,aA5FxB7M,eAACy0C,GAAsB,CAAA10C,SACrBC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,6BACZuQ,cAAe8G,EAAclX,SACzCC,eAAA,KAAAD,SACuDH,EAAlDiX,EAAoD,oCAAtC,uCA+F3B,KCrKa+9B,GAAepiC,OAAaC,MAAM,CAC3CrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBCoCDF,iBAAkB6C,aA9BL,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UAAS,OACxE/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACrCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAGzDI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACPG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAEHI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAChBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,2BAIV,KCkCEF,qBAAkB6C,aAlDjC,SAA6B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC1BgD,EAAY,uBAClBuN,EAAqBC,YAAYwgC,IAAzBQ,EAAmC9gC,YAAAH,EAAA,GAA3B,GAEhB,OACC5T,eAACy0C,GAAsB,CAACj+B,UAAU,EAAKzW,SACtCO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,qCAEjBI,eAACgU,KAAM,CACHC,cAAe,CAAE7N,KAAM,IACvB+N,iBAAkBygC,GAClBxgC,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBugC,EAAS,CAAEppC,UAAW,CACpB8I,MAAO,CACLnO,KAAMiO,EAAOjO,OAEdsO,eAAgB,CACf,CAACC,MAAOw/B,GAAkB1oC,UAAW,CAAC,UAAY,OAErDmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,yCAA2C,CACxDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACtBjT,eAAC80C,GAAqB,CACpB9hC,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,GACX,QAMd,KCiCe3G,qBAAkB6C,aAhFjC,SAA8B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAClCkU,EAAKnU,EAAM2K,OAAOwJ,GAClBrH,EAAYtQ,EAAE,kCACdyG,EAAY,uBAClB/C,EAAiCC,YAAS6wC,GAAiB,CACzD3oC,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAwBC,YAAYygC,IAA5BS,EAAyChhC,YAAAH,EAAA,GAA9B,GAEnB,GAAIhS,EAAS,OACX5B,eAACy0C,GAAsB,CAACj+B,UAAU,EAAKzW,SACrCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACy0C,GAAsB,CAACj+B,UAAU,EAAKzW,SACrCC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZ,IAAMiY,EAAc/V,EAAKkzC,kBAIzB,OAHA18C,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAGV9B,eAACy0C,GAAsB,CAACj+B,UAAU,EAAKzW,SACrCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACHC,cAAe,CACb7N,KAAMyR,EAAYzR,MAEpB+N,iBAAkBygC,GAClBxgC,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ0gC,EAAY,CAAEtpC,UAAW,CACvB8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,OAEdsO,eAAgB,CACf,CAACC,MAAOw/B,GAAkB1oC,UAAW,CAAC,UAAY,OAErDmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,0CAA4C,CACzDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACtBjT,eAAC80C,GAAqB,CACpB9hC,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,GACX,OAMhB,KC/Ce3G,I,kBAAAA,iBAAkB6C,aAnCjC,SAAsC5C,GAAiC,IAA/BC,EAACD,EAADC,EAAGG,EAAQJ,EAARI,SAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EACjE,OACEvW,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAU,gCAEtB/F,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbO,gBAACoE,IAAI,CAACtC,GAAG,qCACHlC,UAAU,8BAA6BH,SAAA,CACzCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,WAAW,IAAExG,EAAE,qBAE1CI,eAAC0N,GAAoB,CAACzD,WAAW,MACbC,SAAS,2BAA0BnK,SACrDC,eAACyW,GAAS,CAACL,OAAO,6CAM5BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KC/Cak1C,GAA0B37C,YAAGC,QAAAC,YAAA,08BA2C7B07C,GAAyB57C,YAAGI,QAAAF,YAAA,suCAgE5B8gB,GAAyBhhB,YAAGK,QAAAH,YAAA,0tBAsC5B27C,GAAsB77C,YAAGO,QAAAL,YAAA,iNAWzB47C,GAAsB97C,YAAGQ,QAAAN,YAAA,6NAWzB67C,GAAuB/7C,YAAGU,QAAAR,YAAA,kOCyBxBkG,qBAAkB6C,aA1KjC,SAAkC5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC/B6M,EAAYtQ,EAAE,oCACpB8W,EAA8BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAxCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC1BtT,EAAmDC,YAAS0xC,GAAyB,CACnFxpC,UAAW,CAACoL,SAAUA,GACtBhL,YAAa,iBAFRjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAItCuC,EAA8BC,YAAYwhC,IAAnCC,EAAwDvhC,YAAAH,EAAA,GAArC,GACpBqD,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAS+R,EAAuB,YAAX,UACrBhS,KAAK,KACL4L,QAAS,WAAOqG,GAAY,GAAQC,EAAQ,CAACF,UAAU,GAAQ,EAAE9W,SACtEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAQ+R,EAAY,UAAW,YAC/BhS,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WAAOqG,GAAY,GAAOC,EAAQ,CAACF,UAAU,GAAO,EAAE9W,SACpEH,EAAE,wBAIP,GAAIgC,EAAS,OACX5B,eAACu1C,GAA6B,CAAAx1C,SAC5BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACu1C,GAA6B,CAAAx1C,SAC5BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kDAKZ,IAAI8C,EAAgBZ,EAAK0zC,0BAGzB,OAAK9yC,EAAc0G,MAAMjK,OAYvBa,eAACu1C,GAA6B,CAAAx1C,SAC5BC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,oCACduQ,cAAe8G,EACf3G,aAAa,EACbZ,SAAUhN,EAAcgN,SACxBG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO/O,EAAcgN,SAASgC,WAEhCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB2jC,0BAA0BpsC,MACrDsG,EAAWmC,EAAgB2jC,0BAA0B9lC,SAE3D,OAAOoC,EAAS3S,OACZ,CAGEq2C,0BAA2B,CACzBzjC,WAAYH,EAAe4jC,0BAA0BzjC,WACrD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe4jC,0BAA0BpsC,OAAK4I,aAAKF,IAC/DpC,aAGJkC,CACN,GAEJ,EAAE7R,SACZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAACC,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,qBACjDI,eAACiS,KAAMC,UAAS,MANFrF,kBASlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACR2C,EAAc0G,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC9BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAK2lB,iBADZriB,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAKm9B,eADZ75B,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SAELwJ,EAAKq+B,UAAahoC,EAAE,qBACrBU,gBAAA,OAAAP,SAAA,CACGwJ,EAAK3G,QAAQ,IAAC5C,eAAA,SACfM,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,IAAEH,EAAE,aAAa,IAAE2J,EAAKksC,+BAL3C5oC,gBAShBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC9BwJ,EAAKmsC,kBAAkB,IAAC11C,eAAA,SACzBA,eAAC0E,IAAI,CAACtC,GAAI,sCAAwCmH,EAAKgO,GACjDrX,UAAU,sBAAqBH,SAEhCH,EAAE,0BAL8BiN,gBAQvCvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,oCAAsCqH,EAAKgO,GAAG,EAC1EzS,MAAM,YAAW/E,SACtBH,EAAE,kBAGPI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,oBACZ,IAAIgf,EAAKhO,EAAKgO,GACd+9B,EAAoB,CAAE7pC,UAAW,CAC/B8I,MAAO,CACPgD,KACAV,UAAWA,IAEhBnC,eAAgB,CACf,CAACC,MAAOsgC,GAAyBxpC,UAAW,CAAC,SAAYoL,OACzDjC,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZiX,EAAc,qBAAyB,oBAAqB,CAC3D9B,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SACAC,eAACmG,KAAI,CAACC,KAAK,cAnCwByG,kBA3BzBA,eAiEJ,aArHtB7M,eAACu1C,GAA6B,CAAAx1C,SAC5BC,eAACiO,GAAW,CAACiC,UAAWA,EACVC,cAAe8G,EAAclX,SACzCC,eAAA,KAAAD,SAC8DH,EAAzDiX,EAA2D,2CAA7C,8CAuH1B,KC5LY8+B,GAAsBnjC,OAAaC,MAAM,CAClDrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdiJ,YAAa2J,OACbojC,UAAWpjC,OACRK,IAAI,GACPgjC,YAAarjC,OACVK,IAAI,GACPjQ,QAAS4P,OACNK,IAAI,GACPijC,iBAAkBtjC,OAClBujC,eAAgBvjC,OACbK,IAAI,GACPmjC,sBAAuBxjC,OACpBK,IAAI,GACPo1B,iBAAkBz1B,OACfK,IAAI,GACPojC,mBAAoBzjC,SCsNT9S,iBAAkB6C,aAtNI,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAY+f,GAAFhgB,EAAP0D,QAAkB1D,EAATggB,WAAW3M,EAAYrT,EAAZqT,aAAc6M,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiB3M,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQhO,EAAS1G,EAAT0G,UAAS,OACpI/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO6a,gBAClBlvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,yCAEnDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,WAE/CnT,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,cACLwnB,QAASvZ,EAAOqyB,cAClB1mC,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,uCAEnDI,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,WAE7CnT,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACkpB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,cACbC,aAAchV,EAAOxL,YACrBjQ,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,cAAeqG,EAAE7gB,OAAOkkB,cACtC3J,EAAgB,eAAe,EACjC,IAEJ5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,wBAE9DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,6CAA6CG,SAAA,CAChEC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,cACLlG,UAAY+S,EAAO4iC,YAAe,0BAA4B,eAC9DtiC,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,0BAGhEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,YACLlG,UAAY+S,EAAO2iC,UAAa,0BAA4B,eAC5DriC,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,6BAIhEI,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,YACLwnB,QAASvZ,EAAO8zB,WAClBnoC,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,0BAEnDI,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,WAGxCY,EAAOuzB,UAAa,GAGrBtnC,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,UACLlG,UAAY+S,EAAOrQ,QAAW,0BAA4B,eAC1D2Q,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,6BAA6BG,SAAA,CAChDO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,mBACLlG,UAAY+S,EAAO6iC,iBAAoB,0BAA4B,eACnEviC,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,OAAMpC,SAAaH,EAAE,2BAATiN,gBAC1B7M,eAAA,UAAQmC,MAAM,QAAOpC,SAAaH,EAAE,4BAATiN,mBAE7B7M,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,6BAIvEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,8CAA8CG,SAAA,CACjEC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,iBACLlG,UAAY+S,EAAO8iC,eAAkB,0BAA4B,eACjExiC,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,iBAAiBqN,UAAU,OAAOvT,UAAU,0BAGnEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qDAAqDG,SAAA,CACxEC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,wBACLlG,UAAY+S,EAAO+iC,sBAAyB,0BAA4B,eACxEziC,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,wBAAwBqN,UAAU,OAAOvT,UAAU,gCAMhFI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gCAAgCG,SAAA,CACnDC,eAACkpB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,qBACbC,aAAchV,EAAO4hC,mBACrBr9C,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,qBAAsBqG,EAAE7gB,OAAOkkB,cAC7C3J,EAAgB,sBAAsB,EACxC,IAEJ5f,eAACwT,KAAY,CAACpN,KAAK,qBAAqBqN,UAAU,OAAOvT,UAAU,wBAcrEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,4BAA4BG,SAAA,CAC/CC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,mBACLlG,UAAY+S,EAAOg1B,iBAAoB,0BAA4B,eACnE10B,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,wBAEnEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,mBACLlG,UAAY+S,EAAOsI,iBAAoB,0BAA4B,eACnEhI,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAUO,kBAAkB9W,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC5CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK+N,KAAK,MAA9BzK,eAAwC,OAGzE7M,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,0BAGrEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,oBACLlG,UAAY+S,EAAO6E,kBAAqB,0BAA4B,eACpEvE,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAUtI,mBAAmBjO,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC7CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK+N,KAAK,MAA9BzK,eAAwC,OAGzE7M,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,gCAK1EI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAETH,EAAE,2BAIN,KC/DIF,qBAAkB6C,aArJjC,SAAoC5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAClC6M,EAAYtQ,EAAE,wCACdyG,EAAa,8BACnB/C,EAA+BC,YAAS+W,IAAjC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACvB8R,EAA6BC,YAAYshC,IAAlCe,EAAsDniC,YAAAH,EAAA,GAApC,GAEzB,GAAIhS,EAAS,OACX5B,eAACu1C,GAA6B,CAAC/+B,UAAU,EAAKzW,SAC5CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACu1C,GAA6B,CAAC/+B,UAAU,EAAKzW,SAC5CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM6d,EAAY7d,EAElB,OACE9B,eAACu1C,GAA6B,CAAC/+B,UAAU,EAAKzW,SAC5CO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACgU,KAAM,CACHC,cAAe,CACbib,eAAe,EACfwX,aAAa,EACbtgC,KAAM,GACNyC,YAAa,GACb+sC,UAAW,EACXC,YAAa,EACbjzC,QAAS,EACTkzC,iBAAkB,OAClBE,sBAAuB,EACvBD,eAAgB,GAChBnO,WAAW,EACXqO,mBAAoB,GACpBE,uBAAwB,GACxBlO,iBAAkB,EAClB1sB,iBAAkB,GAClBzD,kBAAmB,IAErB3D,iBAAkBwhC,GAClBvhC,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ6hC,EAAmB,CAAEzqC,UAAW,CAC9B8I,MAAO,CACL2a,cAAe7a,EAAO6a,cACtBwX,YAAaryB,EAAOqyB,YACpBtgC,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,YACpB+sC,UAAWj+B,SAAStD,EAAOuhC,WAC3BC,YAAal+B,SAAStD,EAAOwhC,aAC7BjzC,QAAS+U,SAAStD,EAAOzR,SACzBkzC,iBAAkBzhC,EAAOyhC,iBACzBE,sBAAuBr+B,SAAStD,EAAO2hC,uBACvCD,eAAgBp+B,SAAStD,EAAO0hC,gBAChCnO,UAAWvzB,EAAOuzB,UAClBqO,mBAAoB5hC,EAAO4hC,mBAC3BhO,iBAAkB5zB,EAAO4zB,iBACzB1sB,iBAAkBlH,EAAOkH,iBACzBzD,kBAAmBzD,EAAOyD,sBAG7BlD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,gDAAkD,CAC/DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9DrU,eAACo2C,GAA4B,CAC3Bz2B,UAAWA,EACX3M,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,QAMhB,KCoBe3G,qBAAkB6C,aA9HjC,SAAqC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAClCmU,GADgD5X,EAAP0D,QACpCD,EAAM2K,OAAOwJ,IAElBrH,EAAYtQ,EAAE,yCAEpB0D,EAAiCC,YAAS2xC,GAAwB,CAChEzpC,UAAW,CAAE8L,GAAIA,GACjB1L,YAAa,iBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB8R,EAA+BC,YAAYuhC,IAAnCiB,EAAuDtiC,YAAAH,EAAA,GAArC,GAE1B,GAAIhS,EAAS,OACX5B,eAACu1C,GAA6B,CAAC/+B,UAAU,EAAKzW,SAC5CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACu1C,GAA6B,CAAC/+B,UAAU,EAAKzW,SAC5CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZ,IAAMiY,EAAc/V,EAEhBw0C,EAAoB,GACpBz+B,EAAYisB,yBAAyBqS,yBACvCG,EAAqBz+B,EAAYisB,yBAAyBqS,uBAAuB5+B,IAGnF,IAAIkK,EAAmB,GACnB5J,EAAYisB,yBAAyBvoB,mBACvCkG,EAAoB5J,EAAYisB,yBAAyBvoB,iBAAiBhE,IAG5E,IAAImK,EAAoB,GAKxB,OAJI7J,EAAYisB,yBAAyBhsB,oBACvC4J,EAAqB7J,EAAYisB,yBAAyBhsB,kBAAkBP,IAI5EvX,eAACu1C,GAA6B,CAAC/+B,UAAU,EAAKzW,SAC5CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACbib,cAAerX,EAAYisB,yBAAyB5U,cACpDwX,YAAa7uB,EAAYisB,yBAAyB4C,YAClDtgC,KAAMyR,EAAYisB,yBAAyB19B,KAC3CyC,YAAagP,EAAYisB,yBAAyBj7B,YAClD+sC,UAAW/9B,EAAYisB,yBAAyB8R,UAChDC,YAAah+B,EAAYisB,yBAAyB+R,YAClDjzC,QAASiV,EAAYisB,yBAAyBlhC,QAC9CkzC,iBAAkBj+B,EAAYisB,yBAAyBgS,iBACvDE,sBAAuBn+B,EAAYisB,yBAAyBkS,sBAC5DD,eAAgBl+B,EAAYisB,yBAAyBiS,eACrDnO,UAAW/vB,EAAYisB,yBAAyB8D,UAChDqO,mBAAoBp+B,EAAYisB,yBAAyBmS,mBACzDE,uBAAwBG,EACxBrO,iBAAkBpwB,EAAYisB,yBAAyBmE,iBACvD1sB,iBAAmBkG,EACnB3J,kBAAmB4J,GAErBvN,iBAAkBwhC,GAClBvhC,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZgiC,EAAmB,CAAE5qC,UAAW,CAC9B8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjB2X,cAAe7a,EAAO6a,cACtBwX,YAAaryB,EAAOqyB,YACpBtgC,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,YACpB+sC,UAAWj+B,SAAStD,EAAOuhC,WAC3BC,YAAal+B,SAAStD,EAAOwhC,aAC7BjzC,QAAS+U,SAAStD,EAAOzR,SACzBkzC,iBAAkBzhC,EAAOyhC,iBACzBE,sBAAuBr+B,SAAStD,EAAO2hC,uBACvCD,eAAgBp+B,SAAStD,EAAO0hC,gBAChCnO,UAAWvzB,EAAOuzB,UAClBqO,mBAAoB5hC,EAAO4hC,mBAC3BhO,iBAAkB5zB,EAAO4zB,iBACzB1sB,iBAAkBlH,EAAOkH,iBACzBzD,kBAAmBzD,EAAOyD,sBAG7BlD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,iDAAmD,CAChEmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9DrU,eAACo2C,GAA4B,CAC3Bz2B,UAAW9H,EACX7E,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRhO,UAlHM,+BAmHN,OAMd,KClGe3G,I,wBAAAA,iBAAkB6C,aA/BjC,SAA4C5C,GAExC,IADFC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQ4yB,EAAAhzB,EAAEizB,eAAO,IAAAD,GAAMA,EAAA7hB,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,8BAA6BA,EAE5E,OACE9Q,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAC6G,GAAU,CAACR,UAAWA,IACrBusB,EACA5yB,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,gCAA+BnK,SAC5DC,eAACyW,GAAS,CAACL,OAAO,yCAAyClW,UAAU,WAErE,QAIRF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCxCaw2C,GAAgCj9C,YAAGC,QAAAC,YAAA,4YAqBnCg9C,GAA+Bl9C,YAAGI,QAAAF,YAAA,+JAWlCi9C,GAA6Cn9C,YAAGK,QAAAH,YAAA,8mBAgChDk9C,GAAyBp9C,YAAGO,QAAAL,YAAA,+OAU5Bm9C,GAA4Br9C,YAAGQ,QAAAN,YAAA,mOAU/Bo9C,GAA4Bt9C,YAAGU,QAAAR,YAAA,mLAQ/BqvC,GAAoBvvC,YAAGY,QAAAV,YAAA,8ZAmBvBsvC,GAAyBxvC,YAAG2qB,QAAAzqB,YAAA,sMC+B1BkG,qBAAkB6C,aA1HjC,SAAwC5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC5CC,EAA4CC,YAASgzC,IAA7C30C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAC9BuC,EAAkCC,YAAY+iC,IAAvCC,EAAiE9iC,YAAAH,EAAA,GAA1C,GAE9B,GAAIhS,EAAS,OACX5B,eAAC82C,GAAmC,CAAClkB,SAAS,EAAK7yB,SACjDC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0CAA0CG,SAClEC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAAC82C,GAAmC,CAAClkB,SAAS,EAAK7yB,SACjDC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0CAA0CG,SAClEC,eAAA,KAAAD,SAAIH,EAAE,wDAKZ,IAAMm3C,EAAsBj1C,EAAKk1C,+BAGjC,OAAKD,EAAoB3tC,MAAMjK,OAS7Ba,eAAC82C,GAAmC,CAAClkB,SAAS,EAAK7yB,SACjDC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0CACpB0Q,aAAa,EACbZ,SAAUqnC,EAAoBrnC,SAC9BG,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAOslC,EAAoBrnC,SAASgC,WAEtCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBmlC,+BAA+B5tC,MAC1DsG,EAAWmC,EAAgBmlC,+BAA+BtnC,SAEhE,OAAOoC,EAAS3S,OACZ,CAGE63C,+BAAgC,CAC9BjlC,WAAYH,EAAeolC,+BAA+BjlC,WAC1D3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeolC,+BAA+B5tC,OAAK4I,aAAKF,IACpEpC,aAGJkC,CACN,GAEJ,EAAE7R,SACJO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACbO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,yBACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMhB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRg3C,EAAoB3tC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACpCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKV,YAAYsgC,UAAU,EAAG,KADjBt8B,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BO,gBAAA,QAAAP,SAAA,CACEC,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,2CAA6CqH,EAAKgO,GAAG,EACjFzS,MAAM,YAAW/E,SACtBH,EAAE,kBAELI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,yDAA2DqH,EAAKgO,GAAG,EAC/FzS,MAAM,YAAW/E,SACtBH,EAAE,6DAGPI,eAAA,UAAQE,UAAU,uCAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,wDACduZ,eAAgBnZ,eAAA,KAAAD,SAAIwJ,EAAKnD,OACzBgT,WAAYxZ,EAAE,6CACdgb,eAAgBi8B,EAChBv9B,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACjB,CAACC,MAAO4hC,OAGhB,EAAEx2C,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBAhCfyG,kBAPzBA,eA0CJ,aAvFtB7M,eAAC82C,GAAmC,CAAClkB,SAAS,EAAK7yB,SACjDC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0CAA0CG,SAClEC,eAAA,KAAAD,SAAIH,EAAE,oDA4Fd,KC3Iaq3C,GAA4BzkC,OAAaC,MAAM,CACxDrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBC+DHF,iBAAkB6C,aAtDS,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UAAS,OACtF/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAEvDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,2BAGlEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRiT,EACFhT,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACL1C,SAAO,EACP8R,SAAUV,EAAajT,SAEtBH,EAAE,oBAGHI,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAGPI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,sBAGPoT,EACA1S,gBAACgrB,KAAK,CAAChnB,KAAK,UAAUglC,eAAa,EAAAvpC,SAAA,CACjCC,eAAA,UAAAD,SAASH,EAAE,yBAAgC,IAAEA,EAAE,yEAEjD,QAGC,KCCIF,qBAAkB6C,aAlDjC,SAAyC5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACtCgD,EAAY,qCAClBuN,EAA+BC,YAAY6iC,IAApCQ,EAA2DnjC,YAAAH,EAAA,GAAvC,GAE3B,OACE5T,eAACm3C,GAAmC,CAAC9wC,UAAWA,EAAUtG,SACxDO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,kDAEjBI,eAACgU,KAAM,CACLC,cAAe,CAAE7N,KAAM,GAAIyC,YAAa,IACxCsL,iBAAkB8iC,GAClB7iC,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnB4iC,EAAqB,CAAEzrC,UAAW,CAChC8I,MAAO,CACLnO,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,cAErB6L,eAAgB,CACf,CAACC,MAAO4hC,OAEX3hC,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,sDAAwD,CACrEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACtBjT,eAACo3C,GAAiC,CAChCpkC,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,GACX,QAMhB,KCgJe3G,qBAAkB6C,aA5LjC,SAA0C5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAC9CkU,EAAKnU,EAAM2K,OAAOwJ,GAClBlR,EAAY,qCACZ6J,EAAYtQ,EAAE,+CACpB0D,EAA+BC,YAASizC,GAA8B,CACpE/qC,UAAW,CAAE8L,GAAIA,KADZ3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGvB8R,EAAoCC,YAAY8iC,IAAxCU,EAAkEtjC,YAAAH,EAAA,GAA3C,GAE/B,GAAIhS,EAAS,OACX5B,eAACm3C,GAAmC,CAAC9wC,UAAWA,EAAUtG,SACxDC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACm3C,GAAmC,CAAC9wC,UAAWA,EAAUtG,SACxDC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,wDAKZ,IAAMiY,EAAc/V,EAAKw1C,8BAEzB,OACEt3C,eAACm3C,GAAmC,CAAC9wC,UAAWA,EAAUtG,SACxDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClByC,YAAagP,EAAYhP,aAE3BsL,iBAAkB8iC,GAClB7iC,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZgjC,EAAwB,CAAE5rC,UAAW,CACnC8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,cAErB6L,eAAgB,CACf,CAACC,MAAO4hC,OAEX3hC,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,uDAAyD,CACtEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAcjG,EAANqH,OAAM,OAC9BrU,eAACo3C,GAAiC,CAChCpkC,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,GACX,OAMd,KCuEe3G,qBAAkB6C,aApJjC,SAAuD5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACpDqmC,GADkE9pC,EAAP0D,QACjDD,EAAM2K,OAAOwJ,IACvBlR,EAAY,qCACd6J,EAAYtQ,EAAE,4DAClB0D,EAAiCC,YAASkzC,GAA4C,CACpFhrC,UAAW,CAAE8L,GAAIkyB,KADX7nC,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA2BC,YAAYg1B,IAA/Ba,EAAiD31B,YAAAH,EAAA,GAAnC,GACtBoH,EAAgCnH,YAAYi1B,IAApCa,EAA2D51B,YAAAiH,EAAA,GAAxC,GAE3B,GAAIpZ,EAAS,OACX5B,eAACm3C,GAAmC,CAAC9wC,UAAWA,EAAUtG,SACxDC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACm3C,GAAmC,CAAC9wC,UAAWA,EAAUtG,SACxDC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAMY,EAAgBZ,EAAK0zC,0BACrB3L,EAAQ/nC,EAAKw1C,8BAEfC,EAAsB,CAAC,EAa3B,OAZI1N,EAAM2L,0BAA0BpsC,OAClCygC,EAAM2L,0BAA0BpsC,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC/CguC,EAAoBhuC,EAAKgO,KAAM,CAAI,IAIvCjf,QAAQC,IAAI,uBACZD,QAAQC,IAAIg/C,GAEZrnC,EAAS,GAAApB,OAAMoB,EAAS,OAAApB,OAAM+6B,EAAMzjC,MAIlCpG,eAACm3C,GAAmC,CAAC9wC,UAAWA,EAAUtG,SACxDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpB2C,EAAc0G,MACf9I,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,MACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,QAHNiN,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN2C,EAAc0G,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC9BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKgO,MAAMggC,EACXv3C,eAACmG,KAAI,CAACC,KAAK,eAAelG,UAAU,eAAkBF,eAACmG,KAAI,CAACC,KAAK,WAAWlG,UAAU,cAF1E2M,gBAKhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGfvU,QAAQC,IAAKgR,EAAKgO,MAAMggC,GACrBhuC,EAAKgO,MAAMggC,EAmCbv3C,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,sBAAqBH,SACxCO,gBAACqE,KAAM,CAACG,MAAM,OACZD,KAAK,KACL0B,MAAO3G,EAAE,6BACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,kBACZD,QAAQC,IAAIgR,EAAKgO,IACjB,IAAIwyB,EAAUxgC,EAAKgO,GACnBoyB,EAAoB,CAAEl+B,UAAW,CAC/B8I,MAAO,CACLuvB,yBAA0BiG,EAC1BuN,8BAA+B7N,IAEpC/0B,eAAgB,CACf,CAACC,MAAO8hC,GAA4ChrC,UAAW,CAAC,GAAMg+B,EAAS,UAAY,OAC3F70B,MAAK,SAAAoV,GAAe,IAAZloB,EAAIkoB,EAAJloB,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAAQlV,EAAE,8BAA+B,CAC7CmV,SAAUF,KAAMG,SAASC,cAE7B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SAAA,CACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,iBAAiB,IAAG,IAC1CxG,EAAE,iCA7ByCiN,gBAjChD7M,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,wBAAuBH,SAC1CO,gBAACqE,KAAM,CAACG,MAAM,OACZD,KAAK,KACL0B,MAAO3G,EAAE,wBACTsE,KAAK,GACLuM,QAAS,WACPnY,QAAQC,IAAI,eACZ,IAAIwxC,EAAUxgC,EAAKgO,GACnBmyB,EAAe,CAAEj+B,UAAW,CAC1B8I,MAAO,CACLuvB,yBAA0BiG,EAC1BuN,8BAA+B7N,IAEpC/0B,eAAgB,CACf,CAACC,MAAO8hC,GAA4ChrC,UAAW,CAAC,GAAMg+B,EAAS,UAAY,OAC3F70B,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAAQlV,EAAE,0BAA2B,CACzCmV,SAAUF,KAAMG,SAASC,cAE7B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SAAA,CACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,gBAAgB,IAAG,IACzCxG,EAAE,4BA5B2CiN,kBAZtCA,eA8EJ,SAzFI,MAiGhC,KC3HenN,I,kBAAAA,iBAAkB6C,aA7BjC,SAA4C5C,GAA4F,IAAxFC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAOrD,EAAQJ,EAARI,SAAQ4yB,EAAAhzB,EAAEizB,eAAO,IAAAD,GAAMA,EAAA7hB,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,8BAA6BA,EAC3H0mC,EAAiBp0C,EAAM2K,OAAO0pC,gBAEpC,OACEz3C,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAsBG,SAC1CO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAC6G,GAAU,CAACR,UAAWA,IACrBusB,EACA5yB,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,gCAA+BnK,SAC5DC,eAACyW,GAAS,CAACL,OAAM,0CAAAtH,OAA4C0oC,GAAkBt3C,UAAU,WAE3F,QAGNF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCxCa23C,GAAgCp+C,YAAGC,QAAAC,YAAA,swBAkCnCm+C,GAA+Br+C,YAAGI,QAAAF,YAAA,6rBAsClC8gB,GAAyBhhB,YAAGK,QAAAH,YAAA,kaAsB5Bo+C,GAAyBt+C,YAAGO,QAAAL,YAAA,gZAqB5Bq+C,GAA4Bv+C,YAAGQ,QAAAN,YAAA,gZAqB/Bs+C,GAA4Bx+C,YAAGU,QAAAR,YAAA,+LCsB7BkG,qBAAkB6C,aAxIjC,SAAwC5C,GAA0B,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAEhD0X,EADcrX,qBAAWxC,IACA6Z,WACzB08B,EAAiBp0C,EAAM2K,OAAO0pC,gBAChCvnC,EAAYtQ,EAAE,0CAElB0D,EAA4CC,YAASm0C,GAA+B,CAClFjsC,UAAW,CACTq4B,yBAA0B0T,KAFtB51C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAK9BuC,EAAkCC,YAAYikC,IAAvCC,EAAiEhkC,YAAAH,EAAA,GAA1C,GAE9B,GAAIhS,EAAS,OACX5B,eAACg4C,GAAmC,CAACplB,SAAS,EAAK7yB,SAC/CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMxC,GAAIa,EAAO,OACT7B,eAACg4C,GAAmC,CAACplB,SAAS,EAAK7yB,SAC/CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,0DAMhB,IAAMq4C,EAAqBn2C,EAAKo2C,+BAIhC,OAHAhoC,EAAS,GAAApB,OAAMoB,EAAS,OAAApB,OAAMhN,EAAKgiC,yBAAyB19B,MAGvD6xC,EAAmB7uC,MAAMjK,OAW5Ba,eAACg4C,GAAmC,CAACplB,SAAS,EAAK7yB,SACjDC,eAACiO,GAAW,CAACiC,UAAWA,EACtBR,SAAUuoC,EAAmBvoC,SAC7BY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOwmC,EAAmBvoC,SAASgC,WAErCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBsmC,gCAAgC/uC,MAC3DsG,EAAWmC,EAAgBsmC,gCAAgCzoC,SAEjE,OAAOoC,EAAS3S,OACZ,CAGEg5C,gCAAiC,CAC/BpmC,WAAYH,EAAeumC,gCAAgCpmC,WAC3D3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeumC,gCAAgC/uC,OAAK4I,aAAKF,IACrEpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,MAJFrF,kBAOlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNk4C,EAAmB7uC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACnCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,IADjBjO,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKuY,QAAWnW,KAAOpC,EAAKuY,SAASlW,OAAOkP,GAAc,IAD9CjO,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAK+tB,aAAa,IAACt3B,eAAA,SACpBA,eAAA,QAAME,UAAU,aAAYH,SAAEwJ,EAAK+V,eAAelZ,SAFpCyG,gBAIhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,2CAA6Cs1C,EAAiB,IAAMjuC,EAAKgO,GAAG,EACxGzS,MAAM,YAAW/E,SACtBH,EAAE,kBAGPI,eAACw+B,GAAY,CACXtlB,WAAYtZ,EAAE,uDACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CACbwJ,EAAK+tB,aAAa,IAAE/tB,EAAK+V,gBAAkB/V,EAAK+V,eAAelZ,KAAK,IAACpG,eAAA,SACtEM,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CACzBwJ,EAAKsY,UAAU,IAAGtY,EAAKuY,QAAW,MAAQvY,EAAKuY,QAAU,SAG9D1I,WAAYxZ,EAAE,4CACdgb,eAAgBm9B,EAChB5Z,wBAAyB,CAAE1yB,UAAW,CACpC8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACf,CAACC,MAAO+iC,GAA+BjsC,UAAW,CAAEq4B,yBAA0B0T,IAC9E,CAAC7iC,MAAOsgC,GAAyBxpC,UAAW,CAACoL,UAAU,UAzBxBhK,kBAXzBA,eAwCJ,aAzFxB7M,eAACg4C,GAAmC,CAACplB,SAAS,EAAK7yB,SACjDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,oDA6Fb,KC3Jaw4C,GAA4B5lC,OAAaC,MAAM,CACxD2T,MAAO5T,OACJgqB,UAAU58B,YAAE,0BACZ+S,SAAS/S,YAAE,uBACXkT,IAAI,KAAsBlT,YAAE,2BAC/B0f,eAAgB9M,OACbG,SAAS/S,YAAE,uBACdiiB,UAAWrP,OACRG,SAAS/S,YAAE,yBCuEHF,iBAAkB6C,aA9DS,SAAH5C,GAAA,IACnCC,EAACD,EAADC,EAAY+f,GAAFhgB,EAAP0D,QAAkB1D,EAATggB,WAAyB1M,GAAFtT,EAAZqT,aAAoBrT,EAANsT,QAAQoB,EAAM1U,EAAN0U,OAAQuL,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAexZ,EAAS1G,EAAT0G,UAAS,OAEhG/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,QACLlG,UAAY+S,EAAOmT,MAAS,0BAA4B,eACxD7S,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,0BAG1DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,iBACLlG,UAAY+S,EAAOqM,eAAkB,0BAA4B,eACjE/L,aAAa,MAAKxT,SAAA,CACvBzH,QAAQC,IAAI,yCACZD,QAAQC,IAAIonB,GACb3f,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU0G,gBAAgBjd,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC1CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK8V,WAAW,KAAG9V,EAAK+c,SAAS,MAArDzZ,eAA+D,OAGhG7M,eAACwT,KAAY,CAACpN,KAAK,iBAAiBqN,UAAU,OAAOvT,UAAU,6BAIrEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,IAEhD5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,gCAKhEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAACqgB,GAAgB,IACjBrgB,eAACsgB,GAAgB,CAACja,UAAWA,SAExB,KC4BI3G,qBAAkB6C,aAxFjC,SAAyC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAChDo0C,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BvnC,EAAYtQ,EAAE,8CACdyG,EAAS,sCAAAyI,OAAyC0oC,GAExDl0C,EAAiCC,YAAS+W,IAAlC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACxB8R,EAAiCC,YAAY+jC,IAArCS,EAA4DtkC,YAAAH,EAAA,GAAxC,GAE5B,OAAIhS,EACF5B,eAACg4C,GAAmC,CAAC3xC,UAAWA,EAAUtG,SACtDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMpCa,EACF7B,eAACg4C,GAAmC,CAAC3xC,UAAWA,EAAUtG,SACtDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,0DAOdI,eAACg4C,GAAmC,CAAC3xC,UAAWA,EAAUtG,SACxDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CAAEmS,MAAO,GAAIvE,UAAW,IAAI3e,MAC3CiR,iBAAkBikC,GAClBhkC,SAAU,SAACC,EAAM9H,GAAyB,IAElCuV,EAFaxN,EAAa/H,EAAb+H,cAIfwN,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGnBu2B,EAAqB,CAAE5sC,UAAW,CAChC8I,MAAO,CACLuvB,yBAA0B1gC,EAAM2K,OAAO0pC,gBACvCrxB,MAAO/R,EAAO+R,MACd9G,eAAgBjL,EAAOiL,eACvBuC,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,IAEVpN,eAAgB,CACf,CAACC,MAAO+iC,GAA+BjsC,UAAW,CAAC,yBAA4BrI,EAAM2K,OAAO0pC,kBAC5F,CAAC9iC,MAAOsgC,GAAyBxpC,UAAW,CAAC,UAAY,OAE5DmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,sDAAwD,CACrEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACs4C,GAAiC,CAChC34B,UAAW7d,EACXkR,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,OAMd,KCyCe3G,qBAAkB6C,aA7HjC,SAA0C5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MACjDmU,EAAKnU,EAAM2K,OAAOwJ,GAClBigC,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BvnC,EAAYtQ,EAAE,+CACdyG,EAAS,sCAAAyI,OAAyC0oC,GAExDl0C,EAAiCC,YAASo0C,GAA8B,CACtElsC,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAoCC,YAAYgkC,IAAxCU,EAAkExkC,YAAAH,EAAA,GAA3C,GAE/B,GAAIhS,EAAS,OACX5B,eAACg4C,GAAmC,CAAC3xC,UAAWA,EAAUtG,SACtDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMxC,GAAIa,EAAO,OACT7B,eAACg4C,GAAmC,CAAC3xC,UAAWA,EAAUtG,SACtDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,0DAMhB,IAAMiY,EAAc/V,EAAK02C,8BAIrB32B,EAAY,KACZhK,EAAYgK,YACdA,EAAY,IAAI3e,KAAK2U,EAAYgK,YAEnC,IAAIC,EAAU,KAKd,OAJIjK,EAAYiK,UACdA,EAAU,IAAI5e,KAAK2U,EAAYiK,UAI/B9hB,eAACg4C,GAAmC,CAAC3xC,UAAWA,EAAUtG,SACxDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACbmS,MAAOvO,EAAYuO,MACnB9G,eAAgBzH,EAAYyH,eAAe/H,GAC3CsK,UAAWA,EACXC,QAASA,GAEX3N,iBAAkBikC,GAClBhkC,SAAU,SAACC,EAAM9H,GAAyB,IAIlCuV,EAWAD,EAfavN,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAKRyN,EAFAzN,EAAOyN,SACLzN,EAAOyN,mBAAmB5e,KAClBob,GAAejK,EAAOyN,SAKxBzN,EAAOyN,QAKjBD,EADExN,EAAOwN,qBAAqB3e,KAClBob,GAAejK,EAAOwN,WAGtBxN,EAAOwN,UAGrB02B,EAAwB,CAAE9sC,UAAW,CACnC8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjB6O,MAAO/R,EAAO+R,MACd9G,eAAgBjL,EAAOiL,eACvBuC,UAAWA,EACXC,QAASA,IAEVpN,eAAgB,CACjB,CAACC,MAAO+iC,GAA+BjsC,UAAW,CAAEq4B,yBAA0B0T,IAC9E,CAAC7iC,MAAOsgC,GAAyBxpC,UAAW,CAAE,UAAY,OAE3DmJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,uDAAyD,CACtEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACs4C,GAAiC,CAChC34B,UAAW7d,EACXkR,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACqB,OAMhD,KC/HMwlC,GAAa,SAAAvqC,GAAAC,aAAAsqC,EAAAvqC,GAAA,IAAAE,EAAAC,aAAAoqC,GACjB,SAAAA,EAAY9oC,GAAQ,IAADrB,EAGC,OAHDC,aAAA,KAAAkqC,GACjBnqC,EAAAF,EAAAQ,KAAA,KAAMe,GACNrX,QAAQC,IAAI,sBACZD,QAAQC,IAAIoX,GAAMrB,CACpB,CAgDI,OAhDHwB,aAAA2oC,EAAA,EAAA1oC,IAAA,SAAA5N,MAGD,WACE,IAAMvC,EAAIP,KAAKsQ,MAAM/P,EACfiO,EAAYjO,EAAE,kBAEpB,OACEI,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,qBACtBU,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,8BACNA,EAAE,kCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,+BAYjD3N,eAAC0N,GAAoB,CAACzD,WAAW,OACXC,SAAS,WAAUnK,SACvCC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAG+O,GAAI,EAAE9V,SACrBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,yBACNA,EAAE,6BACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,qCAS5D,KAAC8qC,CAAA,CArDa,CAAS/nC,aAyDbhR,iBAAkB6C,YAAWk2C,KC/DtCC,GAAW,SAAAxqC,GAAAC,aAAAuqC,EAAAxqC,GAAA,IAAAE,EAAAC,aAAAqqC,GACf,SAAAA,EAAY/oC,GAAQ,IAADrB,EAKbqqC,EALapqC,aAAA,KAAAmqC,GACjBpqC,EAAAF,EAAAQ,KAAA,KAAMe,GACNrX,QAAQC,IAAI,uBACZD,QAAQC,IAAIoX,GACZrB,EAAKiG,MAAQrT,IAAM03C,YAEnB,IAAMvvB,EAAehrB,aAAa0E,QAAQuL,EAAKqB,MAAMkpC,iBAWpD,OATCF,EADEtvB,GAGW,GAGf/a,EAAKwqC,MAAQ,CACXH,WAAYA,EACZI,YAAa,GACbC,mBAAoB,KACrB1qC,CACH,CA0EC,OA1EAwB,aAAA4oC,EAAA,EAAA3oC,IAAA,oBAAA5N,MAED,WACE9C,KAAK45C,YAAc,KACnB55C,KAAKkV,MAAM6M,QAAQ83B,OACrB,GAAC,CAAAnpC,IAAA,uBAAA5N,MAED,WACEg3C,aAAa95C,KAAK45C,YACpB,GAAC,CAAAlpC,IAAA,eAAA5N,MAGD,WAAgB,IAADi3C,EAAA,KAET/5C,KAAK45C,aACPE,aAAa95C,KAAK45C,aAGpB55C,KAAK45C,YAAcrxB,YAAW,WAE5BwxB,EAAKC,SAAS,CAACN,YAAaK,EAAK7kC,MAAM6M,QAAQjf,QAE/Ci3C,EAAKzpC,MAAMmM,SAASs9B,EAAKN,MAAMC,YACjC,GAAG15C,KAAKy5C,MAAME,mBAChB,GAAC,CAAAjpC,IAAA,gBAAA5N,MAGD,SAAcub,GACZre,KAAKg6C,SAAS,CAACV,WAAYj7B,EAAMrY,OAAOlD,OAC1C,GAAC,CAAA4N,IAAA,SAAA5N,MAGD,WAAU,IAADm3C,EAAA,KAED3wB,EAActpB,KAAKsQ,MAAMgZ,YAE/B,OACIroB,gBAAA,OAAKJ,UAAU,qBAAoBH,SAAA,CACjCC,eAAA,OAAKE,UAAU,MAAKH,SAClBO,gBAAA,OAAKJ,UAAU,aAAYH,SAAA,CACzBC,eAAA,QAAME,UAAU,mBAAkBH,SAChCC,eAACmG,KAAI,CAACC,KAAK,aAEbpG,eAAA,SACEmgB,IAAK9gB,KAAKkV,MACVrU,UAAS,gBAAA4O,OAAkBzP,KAAKsQ,MAAMzP,WACtCoE,KAAK,OACLqkB,YAAaA,EACbxmB,MAAO9C,KAAKy5C,MAAMH,WAClBY,QAASl6C,KAAKm6C,aAAaC,KAAKp6C,MAChCyc,SAAUzc,KAAKq6C,cAAcD,KAAKp6C,aAItCA,KAAKy5C,MAAMH,WACX34C,eAAA,OAAKE,UAAU,eAAcH,SAC3BC,eAAC2E,KAAM,CACLG,MAAM,YAEN4O,UAAYrU,KAAKy5C,MAAMH,WACvBloC,QAAS,WACP6oC,EAAKD,SAAS,CAACV,WAAY,GAAII,YAAa,KAAK,WAE/CzgD,QAAQC,IAAI+gD,EAAKR,OACjBQ,EAAK3pC,MAAMmM,SAASw9B,EAAKR,MAAMC,YACjC,GACF,EAAEh5C,SAEDV,KAAKsQ,MAAM/P,EAAE,4BAGlB,KAGV,KAAC84C,CAAA,CA7Fc,CAAShoC,aAgG1BgoC,GAAY/nC,aAAe,CACzBmL,SAAU,SAAAlL,GAAC,OAAEA,CAAC,EACd+oC,QAAS,SAAA/oC,GAAC,OAAEA,CAAC,GAGAlR,qBAAkBg5C,IC5G1B,SAAS9wC,KACd,IAAIgyC,EAAWv7C,aAAa0E,QAAQxE,EAAK1C,8BACxB,OAAb+9C,IACFA,GAAW,GAGb,IAAI3xC,EAAY,CACd2xC,SAAwB,SAAbA,EACXC,cAAUz6C,EACVoF,gBAAYpF,EACZqF,cAAUrF,EACVyI,QAAS,cAGPiyC,EAASz7C,aAAa0E,QAAQxE,EAAK3C,2BAQvC,OAPAqM,EAAU8xC,WAAaD,EAEnBA,IACF7xC,EAAUJ,QAAU,YAGJxJ,aAAa0E,QAAQxE,EAAK5C,iCAE1C,IAAK,WACHsM,EAAU4xC,UAAW,EACrB,MACF,IAAK,aACH5xC,EAAUzD,YAAa,EACvB,MACF,IAAK,WACHyD,EAAUxD,UAAW,EAMzB,OAAOwD,CACT,CCgDevI,I,kBAAAA,iBAAkB6C,aA9DjC,SAA8B5C,GAAmC,IAAjCC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAAStD,EAAQJ,EAARI,SAAUgX,EAAOpX,EAAPoX,QAEpDnD,EAAyBC,YAAYpa,GAA9B2e,EAA4CrE,YAAAH,EAAA,GAA9B,GAGrB,OACE5T,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,mBAAmBG,SACvCO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAC04C,GAAW,CACVG,gBAAiBt6C,EAAK3C,0BACtB+sB,YAAY,YACZ7M,SAAU,SAAC3Z,GACT9D,aAAaC,QAAQC,EAAK3C,0BAA2BuG,GACrD4U,EAAQnP,KACV,IAEFtH,gBAAC6S,KAAK6mC,OAAM,CACV95C,UAAU,cACV4b,SAAU,SAAC4B,GACTrf,aAAaC,QAAQC,EAAK5C,+BAAgC+hB,EAAMrY,OAAOlD,OACvE7J,QAAQC,IAAIwe,EAAQnP,MACtB,EAAE7H,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAEH,EAAE,0BACpBI,eAAA,UAAQmC,MAAM,WAAUpC,SAAEH,EAAE,uBAC5BI,eAAA,UAAQmC,MAAM,aAAYpC,SAAEH,EAAE,yBAC9BI,eAAA,UAAQmC,MAAM,WAAUpC,SAAEH,EAAE,0BAG9BI,eAAC2E,KAAM,CACLG,MAAM,YACNzC,KAAK,iBACLnC,UAAU,OACVuQ,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EApCpB,sCAqCA,EAACtD,SAEDH,EAAE,0CAELI,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,UAASnK,SACtCO,gBAACqE,KAAM,CAACG,MAAM,eACN2L,QAAS,kBAAMpN,EAAQnB,KAAK,0BAA0B,EAACnC,SAAA,CAC7DC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,gBAAgB,IAAExG,EAAE,yBAKnDI,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCnFak6C,GAAqB3gD,YAAGC,QAAAC,YAAA,gvCAoExB0gD,GAAoB5gD,YAAGI,QAAAF,YAAA,k6BA4DvB2gD,GAAc7gD,YAAGK,QAAAH,YAAA,4MAajB4gD,GAAiB9gD,YAAGO,QAAAL,YAAA,wJAUpB6gD,GAAwB/gD,YAAGQ,QAAAN,YAAA,6LAW3B8gD,GAAiBhhD,YAAGU,QAAAR,YAAA,6HClI5B6E,aAAa0E,QAAQxE,EAAK1C,+BAC7BwC,aAAaC,QAAQC,EAAK1C,8BAA8B,GAoV3C6D,qBAAkB6C,aA5SjC,SAA0ByK,GAAiB,IAAfpN,EAACoN,EAADpN,EAAGoe,EAAQhR,EAARgR,SAC7BtH,EAA0CC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAlDtG,EAAawG,EAAA,GAAE2jC,EAAgB3jC,EAAA,GAEhCkE,EADcrX,qBAAWxC,IACA6Z,WAC/BxX,EAAoDC,YAAS02C,GAAoB,CAC/ExuC,UAAW7D,KACX4yC,QAASliD,QAAQC,MAFZqJ,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAAW0F,EAAOzT,EAAPyT,QAOxCnD,EAA8BC,YAAYwmC,IAAnCI,EAAyD1mC,YAAAH,EAAA,GAAtC,GAC1BoH,EAAwBnH,YAAYymC,IAA7BI,EAA4C3mC,YAAAiH,EAAA,GAA/B,GAIpB,GAFA3c,aAAaC,QAAQC,EAAKxC,iCAAkCiiB,EAASoH,UAEjExjB,GAAYE,IAASA,EAAK28B,SAAW,OACvCz+B,eAAC26C,GAAqB,CAAC5jC,QAASA,EAAQhX,SACtCC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,4BAA4BG,SACpDC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAAC26C,GAAqB,CAAC5jC,QAASA,EAAQhX,SACtCC,eAACG,KAAS,CAAAJ,SACRC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,4BAA4BG,SACpDC,eAAA,KAAAD,SAAIH,EAAE,4CAMd,IAAMqX,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAoE,SAA5DzG,aAAa0E,QAAQxE,EAAK1C,8BAA4C,UAAW,YACzFgJ,KAAK,KACL4L,QAAS,WACPpS,aAAaC,QAAQC,EAAK1C,8BAA8B,GACxDkb,EAAQnP,KACV,EACP7H,SACEH,EAAE,oBAELI,eAAC2E,KAAM,CAACG,MAAoE,UAA5DzG,aAAa0E,QAAQxE,EAAK1C,8BAA6C,UAAW,YAC1FgJ,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WACPpS,aAAaC,QAAQC,EAAK1C,8BAA8B,GACxDkb,EAAQnP,KACV,EACP7H,SACEH,EAAE,wBAIH6+B,EAAW38B,EAAK28B,SAChB/uB,EAAW+uB,EAAS/uB,SAGxB,OAAK+uB,EAASr1B,MAAMjK,OAalBa,eAAC26C,GAAqB,CAAC5jC,QAASA,EAAQhX,SACtCC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,4BACbuQ,cAAe8G,EACf3G,aAAa,EACbZ,SAAU5N,EAAK28B,SAAS/uB,SACxBU,cAAeA,EACfP,WAAU+qC,YAAAC,cAAAC,MAAE,SAAAC,IAAA,OAAAF,cAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACY,GAAtBZ,GAAiB,IACb7qC,EAASE,YAAY,CAADqrC,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAChB9pC,EAAU,CACd5F,UAAW,CACTgG,MAAO/B,EAASgC,aAEjB,KAAD,EAEJ6oC,GAAiB,GAAM,wBAAAU,EAAAG,OAAA,GAAAL,EAAA,KACvBh7C,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,IAChBlS,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN0+B,EAASr1B,MAAMkD,KAAI,SAAA2d,GAAA,IAAG1gB,EAAI0gB,EAAJ1gB,KAAI,OACzBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyBvF,EAAKgO,GAAE,YAAWxX,SAC/CwJ,EAAKoB,uBACL3K,eAAC0qC,KAAM,CAAC7lC,KAAM,KAAMjB,SAAU2F,EAAKoB,yBACnC3K,eAAC0qC,KAAM,CAAC7lC,KAAM,KAAMxC,KAAK,aAI/B/B,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACRC,eAAA,QAAME,UAAU,OAAMH,SAAEwJ,EAAKwb,WAC7B/kB,eAAA,OAAKE,UAAU,aAAYH,SACzBC,eAAA,KAAGkE,KAAI,UAAA4K,OAAYvF,EAAK0hB,OAAQlrB,SAAEwJ,EAAK0hB,UAEvC1hB,EAAKswC,SAAY75C,eAAA,QAAAD,SACfC,eAACuI,KAAK,CAACzD,MAAM,UAAU5E,UAAU,OAAMH,SAAEH,EAAE,wBACnC,KACV2J,EAAK/E,WAAcxE,eAAA,QAAAD,SACjBC,eAACuI,KAAK,CAACzD,MAAM,OAAO5E,UAAU,OAAMH,SAAEH,EAAE,0BAChC,KACV2J,EAAK9E,SAAYzE,eAAA,QAAAD,SACfC,eAACuI,KAAK,CAACzD,MAAM,YAAW/E,SAAEH,EAAE,wBACpB,OAbEiN,gBAehBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACNwJ,EAAK8xC,oBACL9xC,EAAK8xC,oBAAoB/uC,KAAI,SAACgvC,GAAY,OACxCt7C,eAAA,OAAAD,SACEO,gBAAA,SAAAP,SAAA,CACAC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAE,IACpBk1C,EAAaxX,yBAAyB19B,KAAM,IAACpG,eAAA,SAC/CA,eAAA,OAAKE,UAAU,cAAaH,SAC1BO,gBAAA,SAAAP,SAAA,CACI4L,KAAO2vC,EAAaz5B,WAAWjW,OAAOkP,GACtCwgC,EAAax5B,QACbxhB,gBAAA,QAAAP,SAAA,CAAM,MAAI4L,KAAO2vC,EAAax5B,SAASlW,OAAOkP,MAC5C,YATAjO,eAcJ,IAEN,GAEFtD,EAAKgyC,kBACLhyC,EAAKgyC,kBAAkBjvC,KAAI,SAACkvC,GAAS,OACnCx7C,eAAA,OAAAD,SACEO,gBAAA,SAAAP,SAAA,CACAC,eAACmG,KAAI,CAACC,KAAK,gBAAgB,IAAE,IAC3Bo1C,EAAU3X,sBAAsBz9B,KAAM,IAACpG,eAAA,SACzCA,eAAA,OAAKE,UAAU,cAAaH,SAC1BO,gBAAA,SAAAP,SAAA,CACI4L,KAAO6vC,EAAU35B,WAAWjW,OAAOkP,GAAa,IAAE,MAClDnP,KAAO6vC,EAAU15B,SAASlW,OAAOkP,GAAY,IAAG,MAChDlb,EAAE,6BAA8B,KAAI47C,EAAUC,iCAR5C5uC,eAYJ,IAEN,KArCUA,gBAwChB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACRO,gBAACo7C,KAAkB,CAACx7C,UAAU,YAAWH,SAAA,CAEpCwJ,EAAKyhB,MACJhrB,eAACiG,KAAK5B,KAAI,CAACs3C,QAAM,EAAA57C,SACfC,eAACsgC,KAAO,CAAC1zB,QAASrD,EAAKyhB,MAAO4wB,UAAU,MAAK77C,SAC3CC,eAAA,QAAAD,SACEC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,gBAK7B,GAGDmD,EAAKsyC,OACJ77C,eAACiG,KAAK5B,KAAI,CAACs3C,QAAM,EAAA57C,SACfC,eAACsgC,KAAO,CAAC1zB,QAASrD,EAAKsyC,OAAQD,UAAU,MAAK77C,SAC5CC,eAAA,QAAAD,SACEC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,qBAK3B,GAGNpG,eAACiG,KAAK5B,KAAI,CAACs3C,QAAM,EAAA57C,SACfC,eAACsgC,KAAO,CAAC1zB,QAASrD,EAAK0hB,MAAO2wB,UAAU,MAAK77C,SAC3CC,eAAA,KAAGkE,KAAM,UAAYqF,EAAK0hB,MAAMlrB,SAC9BC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,oBAiBjC9F,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC5BwJ,EAAKqwC,SAEN55C,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyBvF,EAAKgO,GAAE,YAAWxX,SACjDC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAJPI,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAQlCI,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,sBACTsE,KAAK,GACLuM,QAAS,WACP,IACImpC,EADAriC,EAAKhO,EAAKgO,GAGZqiC,EAD8D,SAA5Dv7C,aAAa0E,QAAQxE,EAAK1C,8BAM9B4+C,EAAoB,CAAEhvC,UAAW,CAC/B8I,MAAO,CACLgD,KACAqiC,UAAWA,IAEhBllC,eAAgB,CACf,CAACC,MAAOslC,GAAoBxuC,UAAW7D,SACvCgN,MAAK,SAAAsV,GAAe,IAAZpoB,EAAIooB,EAAJpoB,KACVxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACSlV,EAAZg6C,EAAc,iCAAqC,+BAAgC,CAClF7kC,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SAEGwJ,EAAKqwC,SACJ55C,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,YACvBxG,EAAE,qBAIP2J,EAAKqwC,SAAY,GACd55C,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,YAnTZ,SAAH9Q,GAAwF,IAAnFC,EAACD,EAADC,EAAGsZ,EAAUvZ,EAAVuZ,WAAYC,EAAcxZ,EAAdwZ,eAAgBC,EAAUzZ,EAAVyZ,WAAYwB,EAAcjb,EAAdib,eAAgBtB,EAAiB3Z,EAAjB2Z,kBAClFC,wBAAa,CACXC,SAAU,SAAAjN,GAAkB,IAAfkN,EAAOlN,EAAPkN,QACX,OACEnZ,gBAAA,OAAKJ,UAAU,YAAWH,SAAA,CACxBC,eAAA,MAAAD,SAAKH,EAAE,4BACNsZ,EACAC,EACDnZ,eAAA,UAAQE,UAAU,0BAA0BuQ,QAASgJ,EAAQ1Z,SAAEH,EAAE,+BACjEU,gBAAA,UACEJ,UAAU,iBACVuQ,QAAS,WACPmK,EAAetB,GACZ1E,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACPxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACJsE,EAAY,CACVrE,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,IACF4X,GACF,EAAE1Z,SAAA,CAEFC,eAACmG,KAAI,CAACC,KAAK,YAAY,IAAExG,EAAE,mCAInC,GAEJ,CAkR4B+a,CAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,yCACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CAAIwJ,EAAKuyC,WAAW,IAAEvyC,EAAKwyC,aAC3C3iC,WAAYxZ,EAAE,8BACdgb,eAAgB8/B,EAChBphC,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACjB,CAACC,MAAOslC,GAAoBxuC,UAAW7D,SAG/C,EAAE7H,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBArEnByG,kBA/GzBA,eAwLJ,aAnOxB7M,eAAC26C,GAAqB,CAAC5jC,QAASA,EAAQhX,SACtCC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,4BACZuQ,cAAe8G,EAAclX,SACzCC,eAAA,KAAAD,SACgE,SAA5D1B,aAAa0E,QAAQxE,EAAK1C,8BAA4C+D,EAAE,iCAAmCA,EAAE,yCAsOzH,KCjXao8C,GAAiBxpC,OAAaC,MAAM,CAC7C5H,UAAW2H,OACRK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdkL,SAAU0H,OACPK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdqrB,MAAOzY,OACJyY,MAAMrrB,YAAE,cACR+S,SAAS/S,YAAE,yBCmDHF,iBAAkB6C,aA/CJ,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UAAS,OACzE/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,YACLlG,UAAY+S,EAAOpI,UAAa,0BAA4B,eAC5D0I,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,WACLlG,UAAY+S,EAAOnI,SAAY,0BAA4B,eAC3DyI,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,6BAI/DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,QACLlG,UAAY+S,EAAOgY,MAAS,0BAA4B,eACxD1X,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,2BAG5DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SAAEH,EAAE,2BAGzB,KCtCLyG,GAAY,sBAmEH3G,qBAAkB6C,aAhEjC,SAA4B5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC/BuQ,EAAqBC,YAAYsmC,IAA1B8B,EAAsCloC,YAAAH,EAAA,GAA5B,GAEjB,OACE5T,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,mBAAmBG,SACvCC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC6G,GAAU,CAACR,UAAWA,SAG3BrG,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACjBO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,oCAEfI,eAACgU,KAAM,CACHC,cAAe,CAAE7N,KAAM,GAAIkR,KAAM,IACjCnD,iBAAkB6nC,GAClB5nC,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjB2nC,EAAW,CAAExwC,UAAW,CACtB8I,MAAO,CACL1J,UAAWwJ,EAAOxJ,UAClBC,SAAUuJ,EAAOvJ,SACjBmgB,MAAO5W,EAAO4W,QAEfvW,eAAgB,CACf,CAACC,MAAOslC,GAAoBxuC,UAAW7D,SAE1CgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB,IAAM4J,EAAY5J,EAAKo6C,cAAcp3B,QAAQvN,GAC7ClU,EAAQnB,KAAK,uBAAD4M,OAAwBpD,EAAS,aAC7CmJ,KAAMC,QAASlV,EAAE,wCAA0C,CACvDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACpBjT,eAACm8C,GAAoB,CACnBnpC,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,IACX,iBAU1B,KCnFe+1C,GAFW,CAAC,CAAC,KAAOx8C,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,iCAAiC,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,6CAA6C,KAAO,MAAM,CAAC,KAAOA,YAAE,8CAA8C,KAAO,MAAM,CAAC,KAAOA,YAAE,oCAAoC,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,4CAA4C,KAAO,MAAM,CAAC,KAAOA,YAAE,+BAA+B,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,sCAAsC,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,qCAAqC,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,mDAAmD,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,gCAAgC,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,+BAA+B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,yCAAyC,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,yCAAyC,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,+CAA+C,KAAO,MAAM,CAAC,KAAOA,YAAE,2CAA2C,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,uCAAuC,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oDAAoD,KAAO,MAAM,CAAC,KAAOA,YAAE,gCAAgC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,8CAA8C,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,wDAAwD,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,6CAA6C,KAAO,MAAM,CAAC,KAAOA,YAAE,kCAAkC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,sCAAsC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,iCAAiC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,gCAAgC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,iCAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,0DAA0D,KAAO,MAAM,CAAC,KAAOA,YAAE,mCAAmC,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,wCAAwC,KAAO,MAAM,CAAC,KAAOA,YAAE,uCAAuC,KAAO,MAAM,CAAC,KAAOA,YAAE,8CAA8C,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,mCAAmC,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,uCAAuC,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,6BAA6B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,0DAA0D,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oCAAoC,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,kCAAkC,KAAO,MAAM,CAAC,KAAOA,YAAE,uCAAuC,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,0CAA0C,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,iCAAiC,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,sCAAsC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,kCAAkC,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,kDAAkD,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,+CAA+C,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oCAAoC,KAAO,MAAM,CAAC,KAAOA,YAAE,+BAA+B,KAAO,MAAM,CAAC,KAAOA,YAAE,+BAA+B,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,OCsQ1wXF,iBAAkB6C,aAxPG,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQsL,EAAShgB,EAATggB,UAAWC,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAa,OACxHvf,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,WACLwnB,QAASvZ,EAAOwlC,WAEhB75C,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,yBAEnDI,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,aAG5CzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,aACLwnB,QAASvZ,EAAO7P,aAChBxE,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,2BAEnDI,eAACwT,KAAY,CAACpN,KAAK,aAAaqN,UAAU,aAG9CzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,WACLwnB,QAASvZ,EAAO5P,WAChBzE,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,yBAEnDI,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,gBAI9CnT,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,YACLlG,UAAY+S,EAAOpI,UAAa,0BAA4B,eAC5D0I,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,WACLlG,UAAY+S,EAAOnI,SAAY,0BAA4B,eAC3DyI,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,6BAI/DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACRC,eAACI,KAAKqF,IAAG,CAAA1F,SACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,yBAAyBG,SAAA,CAC5CC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOgoC,YACjBvgC,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,cAAe9S,EAAK,EACtDiP,OAAQ,kBAAM4D,EAAgB,eAAe,EAAK,IAEpD5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,0BAGhEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,SACLlG,UAAY+S,EAAOkjC,uBAA0B,0BAA4B,eACzE5iC,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,KACdnC,eAAA,UAAQmC,MAAM,IAAGpC,SAAEH,EAAE,oBACrBI,eAAA,UAAQmC,MAAM,IAAGpC,SAAEH,EAAE,kBACrBI,eAAA,UAAQmC,MAAM,IAAGpC,SAAEH,EAAE,sBAEvBI,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,6BAI7DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,QACLlG,UAAY+S,EAAOgY,MAAS,0BAA4B,eACxD1X,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,0BAG1DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gCAAgCG,SAAA,CACnDC,eAACsT,KAAK,CAAChP,KAAK,OACL8B,KAAK,YACLlG,UAAY+S,EAAOqpC,UAAa,0BAA4B,eAC5D/oC,aAAa,QACpBvT,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,6BAIhEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,QACLlG,UAAY+S,EAAO+X,MAAS,0BAA4B,eACxDzX,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,0BAG1DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCC,eAACsT,KAAK,CAAChP,KAAK,OACL8B,KAAK,SACLlG,UAAY+S,EAAO4oC,OAAU,0BAA4B,eACzDtoC,aAAa,QACpBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,6BAI7DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,UACLlG,UAAY+S,EAAO8X,QAAW,0BAA4B,eAC1DxX,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAACsT,KAAK,CAAChP,KAAK,OACL8B,KAAK,WACLlG,UAAY+S,EAAOspC,SAAY,0BAA4B,eAC3DhpC,aAAa,QACpBvT,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,6BAI/DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAOupC,KAAQ,0BAA4B,eACvDjpC,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAGzDF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCO,gBAACgT,KAAK,CAACG,UAAU,SACVrN,KAAK,UACLlG,UAAY+S,EAAOwpC,QAAW,0BAA4B,eAC1DlpC,aAAa,MAAKxT,SAAA,CACvBC,eAAA,UAAQmC,MAAM,KACZi6C,GAAkB9vC,KAChB,SAAAmwC,GAAO,OAAIz8C,eAAA,UAAQmC,MAAOs6C,EAAQC,KAAK38C,SAAa08C,EAAQE,MAAf9vC,eAA6B,OAGhF7M,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAI9DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,wBACLlG,UAAY+S,EAAO84B,sBAAyB,0BAA4B,eACxEx4B,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAUgsB,wBAAwBviC,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAClDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,wBAAwBqN,UAAU,OAAOvT,UAAU,0BAG1EF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,uBACLlG,UAAY+S,EAAOg9B,qBAAwB,0BAA4B,eACvE18B,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAUiwB,sBAAsBxmC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAChDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,uBAAuBqN,UAAU,OAAOvT,UAAU,6BAI3EI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0CAA0CG,SAAA,CAC7DO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,oBACLlG,UAAY+S,EAAO2pC,kBAAqB,0BAA4B,eACpErpC,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0CAATiN,gBACrB8S,EAAUhC,WAAWvU,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OACrCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,0BAGtEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,YACLlG,UAAY+S,EAAO4pC,UAAa,0BAA4B,eAC5DtpC,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,gCAKlEF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UAENR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAGJ,KCzJIF,IChGXo9C,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GDoFWh+C,kBA5Ff,SAAyBC,GAAIA,EAADC,EAAQD,EAALwC,MAAiC,IAA1BoC,EAAI5E,EAAJ4E,KAAIo5C,EAAAh+C,EAAEi+C,kBAAU,IAAAD,EAAC,KAAIA,EACzD,IAAKp5C,EACH,MAAO,GAGT,IAAMmH,EAAYnH,EAAKgT,GAEvB,OACEvX,eAACkH,KAAI,CAAAnH,SACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACu9C,KAAK,CAAA99C,SAAA,CACJC,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyBpD,EAAS,kBAAiB3L,SACvDwE,EAAKoG,uBACL3K,eAAC0qC,KAAM,CAAC7lC,KAAM+4C,EAAa,QAASh6C,SAAUW,EAAKoG,yBACnD3K,eAAC0qC,KAAM,CAAC7lC,KAAM+4C,EAAa,QAASv7C,KAAK,WAG7C/B,gBAACu9C,KAAM12C,KAAI,CAAApH,SAAA,CACTC,eAAA,MAAIE,UAAU,OAAMH,SAAEwE,EAAKsG,UAAY,IAAMtG,EAAKuG,WAClD9K,eAAA,OAAKE,UAAU,kBAAiBH,SAC9BO,gBAACo7C,KAAkB,CAACx7C,UAAU,YAAWH,SAAA,CAEpCwE,EAAKymB,MACJhrB,eAACiG,KAAK5B,KAAI,CAACs3C,QAAM,EAAA57C,SACfC,eAACsgC,KAAO,CAAC1zB,QAASrI,EAAKymB,MAAO4wB,UAAU,MAAK77C,SAC3CC,eAAA,QAAAD,SACEC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,gBAK7B,GAGD7B,EAAKs3C,OACJ77C,eAACiG,KAAK5B,KAAI,CAACs3C,QAAM,EAAA57C,SACfC,eAACsgC,KAAO,CAAC1zB,QAASrI,EAAKs3C,OAAQD,UAAU,MAAK77C,SAC5CC,eAAA,QAAAD,SACEC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,qBAK3B,GAGNpG,eAACiG,KAAK5B,KAAI,CAACs3C,QAAM,EAAA57C,SACfC,eAACsgC,KAAO,CAAC1zB,QAASrI,EAAK0mB,MAAO2wB,UAAU,MAAK77C,SAC3CC,eAAA,KAAGkE,KAAM,UAAYK,EAAK0mB,MAAMlrB,SAC9BC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,6BAyC7C,IC+Le1G,sBA9Qf,SAAoBC,GAA8B,IAA5BC,EAACD,EAADC,EAAG8L,EAAS/L,EAAT+L,UAAWoyC,EAAUn+C,EAAVm+C,WAChCx6C,EAA+BC,YAAS22C,GAAmB,CACvDzuC,UAAW,CAAC8L,GAAI7L,KADb9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIvB,GAAIF,EAAS,OAAO5B,eAAA,KAAAD,SAAIH,EAAE,+BAE1B,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAAA,KAAAD,SAAIH,EAAE,8BAEf,IAAMklB,EAAUhjB,EAAKgjB,QAIrB,OAHAxsB,QAAQC,IAAI,2BACZD,QAAQC,IAAIusB,GAGVxkB,gBAAC2F,KAAKmN,MAAK,CAAC2qC,aAAa,EAAKh+C,SAAA,CACE+8C,GAAb,YAAfgB,EACkCf,GAAnB,kBAAfe,EACgCd,GAAjB,gBAAfc,EAC4Bb,GAAb,YAAfa,EAC8BZ,GAAf,cAAfY,EAC4BX,GAAb,YAAfW,EACuCV,GAAxB,uBAAfU,EAC2BT,GAAZ,WAAfS,EAC6BR,GAAd,aAAfQ,EACiCP,GAAlB,iBAAfO,EAC0BN,GAAX,UAAfM,EAEEL,GADa,wCAAfK,EAGuCJ,GAAxB,uBAAfI,EAGF99C,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,WAC1CrJ,KAAK,OACLtB,OAAQ+7C,GAAe/8C,SAEtBH,EAAE,+BANEiN,gBAqBT7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,sBAAqBnK,SAC9BC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,iBAC1CrJ,KAAK,OACLtB,OAAQg8C,GAAqBh9C,SAEhCH,EAAE,0CANMiN,kBASb7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,mBAAkBnK,SAC3BC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,eAC1CrJ,KAAK,cACLtB,OAAQi8C,GAAmBj9C,SAE9BH,EAAE,wCANMiN,kBASb7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,yBAAwBnK,SACjCC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,WAC1CrJ,KAAK,OACLtB,OAAQk8C,GAAel9C,SAE1BH,EAAE,oCANMiN,kBASb7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,yBAAwBnK,SACjCC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,eAC1CrJ,KAAK,aACLtB,OAAuB,gBAAf+8C,EAA6B/9C,SAExCH,EAAE,wCANMiN,kBASb7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,6BAA4BnK,SACrCC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,iBAC1CrJ,KAAK,YACLtB,OAAQo8C,GAAep9C,SAE1BH,EAAE,0CANMiN,kBASb7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,iBAAgBnK,SACzBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,YAC1CrJ,KAAK,UACLtB,OAAwB,aAAf+8C,EAA2B/9C,SAEvCH,EAAE,qCANMiN,kBASb7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,eAAcnK,SACvBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,UAC1CrJ,KAAK,YACLtB,OAAQs8C,GAAct9C,SAEzBH,EAAE,mCANMiN,kBASb7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,eAAcnK,SACvBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,UAC1CrJ,KAAK,OACLtB,OAAwB,WAAf+8C,EAAyB/9C,SAErCH,EAAE,mCANMiN,kBASb7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,iBAAgBnK,SACzBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,YAC1CrJ,KAAK,YACLtB,OAAQu8C,GAAgBv9C,SAE3BH,EAAE,qCANMiN,kBASb7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,qBAAoBnK,SAC7BC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,iBAC1CrJ,KAAK,YACLtB,OAAQw8C,GAAoBx9C,SAE/BH,EAAE,0CANMiN,kBASb7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,yCAAwCnK,SACjDC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,wCAC1CrJ,KAAK,OACLtB,OAAQ08C,GAA2C19C,SAEtDH,EAAE,iEANMiN,kBASViY,EAAQtgB,WACPxE,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,2BAA0BnK,SACnCC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,sBAC1CrJ,KAAK,YACLtB,OAAQq8C,GAA0Br9C,SAErCH,EAAE,+CANMiN,kBASf,GACF7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,0BAAyBnK,SAClCC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,sBAC1CrJ,KAAK,eACLtB,OAAQ28C,GAA0B39C,SAErCH,EAAE,+CANMiN,kBASb7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,kBAAiBnK,SAC1BC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,aAC1CrJ,KAAK,OACLtB,OAAQm8C,GAAiBn9C,SAE5BH,EAAE,sCANMiN,kBASb7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,cAAanK,SACtBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,SAC1CrJ,KAAK,iBACLtB,OAAQy8C,GAAaz9C,SAExBH,EAAE,kCANMiN,kBASb7M,eAAC0N,GAAoB,CACjBzD,WAAW,SACXC,SAAS,UAASnK,SAClBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wBAA0BsJ,EAAY,SAC1CrJ,KAAK,WACLtB,OAAwB,UAAf+8C,EAAwB/9C,SAEpCH,EAAE,kCANMiN,oBAWrB,IC7OenN,qBAAkB6C,aAxCjC,SAAoC5C,GAAGA,EAADC,EAA8G,IAA3GwD,EAAKzD,EAALyD,MAAOrD,EAAQJ,EAARI,SAAUk+C,EAAIt+C,EAAJs+C,KAAIntC,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,sBAAqBA,EAAAotC,EAAAv+C,EAAEy+B,4BAAoB,IAAA8f,EAAC,GAAEA,EAAAC,EAAAx+C,EAAEm+C,kBAAU,IAAAK,EAAC,GAAEA,EAAAC,EAAAz+C,EAAE4E,YAAI,IAAA65C,EAAC,CAAC,EAACA,EACxI1yC,EAAYtI,EAAM2K,OAAOswC,WAC3BC,EAAc,GAUlB,OATI/5C,IACF+5C,EAAW,GAAAxvC,OAAMvK,EAAKsG,UAAS,KAAAiE,OAAIvK,EAAKuG,YAG1CzE,EAAYhI,aAAa0E,QAAQxE,EAAKxC,qCAEpCsK,EAAY,uBAIZrG,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO+3C,EAAYv+C,SAC9BO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCk+C,GAAej+C,eAAC6G,GAAU,CAACR,UAAWA,IACvC+3B,OAGL99B,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACbA,IAEHO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACu+C,GAAgB,CAACh6C,KAAMA,IACxBvE,eAACw+C,GAAW,CACVV,WAAYA,EACZpyC,UAAWA,gBAQ3B,KC4HehM,qBAAkB6C,aAhKjC,SAAgC5C,GAAc,IAAZC,EAACD,EAADC,EAC1B8L,EADkC/L,EAALyD,MACX2K,OAAOswC,WACzBP,EAAa,UAEnBx6C,EAA+BC,YAAS22C,GAAmB,CACzDzuC,UAAW,CAAC8L,GAAI7L,GAChBG,YAAa,iBAFRjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIvB8R,EAAwBC,YAAYumC,IAA7BqE,EAA4C1qC,YAAAH,EAAA,GAA/B,GAEpB,GAAIhS,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAW/9C,SAClDO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,kCAEjBI,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,sCAMd,GAAIiC,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAW/9C,SAAA,CACjDzH,QAAQC,IAAIsJ,GACbvB,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,kCAEjBI,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,sCAMd,IAAMklB,EAAUhjB,EAAKgjB,QACrBxsB,QAAQC,IAAIusB,GAIZ,IAAIu3B,EAAc,KACdv3B,EAAQu3B,cACVA,EAAc,IAAIn5C,KAAK4hB,EAAQu3B,cAGjC,IAAIpoC,EAAgB,CAClB4lC,SAAU/0B,EAAQ+0B,SAClBr1C,WAAYsgB,EAAQtgB,WACpBC,SAAUqgB,EAAQrgB,SAClBoG,UAAWia,EAAQja,UACnBC,SAAUga,EAAQha,SAClBmgB,MAAOnG,EAAQmG,MACfoxB,YAAaA,EACbsC,OAAQ75B,EAAQ65B,OAChBrC,UAAWx3B,EAAQw3B,UACnBtxB,MAAOlG,EAAQkG,MACf6wB,OAAQ/2B,EAAQ+2B,OAChB9wB,QAASjG,EAAQiG,QACjBwxB,SAAUz3B,EAAQy3B,SAClBC,KAAM13B,EAAQ03B,KACdC,QAAS33B,EAAQ23B,QACjBI,UAAW/3B,EAAQ+3B,WAerB,OAZI/3B,EAAQinB,wBACV93B,EAAc83B,sBAAwBjnB,EAAQinB,sBAAsBx0B,IAGlEuN,EAAQmrB,uBACVh8B,EAAcg8B,qBAAuBnrB,EAAQmrB,qBAAqB14B,IAGhEuN,EAAQ83B,oBACV3oC,EAAc2oC,kBAAoB93B,EAAQ83B,kBAAkBrlC,IAI5DvX,eAAC0+C,GAA2B,CAC1Bn6C,KAAMugB,EACNg5B,WAAYA,EAAW/9C,SAEvBO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,kCAGjBI,eAACgU,KAAM,CACHC,cAAeA,EACfE,iBAAkB6nC,GAClB5nC,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ,IAAIuqC,EAAa,CACfrnC,GAAI7L,EACJmuC,SAAUxlC,EAAOwlC,SACjBr1C,WAAY6P,EAAO7P,WACnBC,SAAU4P,EAAO5P,SACjBoG,UAAWwJ,EAAOxJ,UAClBC,SAAUuJ,EAAOvJ,SACjBmgB,MAAO5W,EAAO4W,MACd0zB,OAAQtqC,EAAOsqC,OACfrC,UAAWjoC,EAAOioC,UAClBtxB,MAAO3W,EAAO2W,MACd6wB,OAAQxnC,EAAOwnC,OACf9wB,QAAS1W,EAAO0W,QAChBwxB,SAAUloC,EAAOkoC,SACjBC,KAAMnoC,EAAOmoC,KACbC,QAASpoC,EAAOooC,QAChBI,UAAWxoC,EAAOwoC,UAClB9Q,sBAAuB13B,EAAO03B,sBAC9BkE,qBAAsB57B,EAAO47B,qBAC7B2M,kBAAmBvoC,EAAOuoC,mBAGxBvoC,EAAOgoC,cACTuC,EAAwB,YAAItgC,GAAejK,EAAOgoC,cAGpDoC,EAAc,CAAEhzC,UAAW,CACzB8I,MAAOqqC,GACNlqC,eAAgB,CAEf,CAACC,MAAOslC,GAAoBxuC,UAAW7D,MAEvC,CAAC+M,MAAOulC,GAAmBzuC,UAAW,CAAC8L,GAAI7L,OAE9CkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,yCAA2C,CACxDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC6+C,GAA2B,CAC1B7rC,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRsL,UAAW7d,GACX,QAMhB,KC/HepC,iBAAkB6C,aAnCQ,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAc3M,EAAS1G,EAAT0G,UAAWyZ,EAAangB,EAAbmgB,cAAeC,EAAcpgB,EAAdogB,eAAcC,EAAArgB,EAAEsgB,6BAAqB,IAAAD,EAAC,SAAApP,GAAC,OAAEA,CAAC,EAAAoP,EAAA,OACxI1f,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPC,eAACmT,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SACtDO,gBAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,eAAA,SAAOsE,KAAK,OAAO6b,IAAKL,EAAe5f,UAAU,oBAAoB4b,SAAUmE,IAC/EjgB,eAAA,SAAOE,UAAU,oBAAoBkgB,MAAOb,GAA0Bxf,SACnEggB,eAObzf,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAO5E,UAAU,aAAYH,SACxCH,EAAE,sBAGPI,eAAC2E,KAAM,CACLG,MAAM,UAENR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,yBAIJ,KC2GIF,I,GAAAA,iBAAkB6C,aA3IjC,SAAqC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACzCqI,EAAYtI,EAAM2K,OAAOswC,WACzBP,EAAa,UACb5tC,EAAYtQ,EAAE,oCACdyG,EAAS,uBAAAyI,OAA0BpD,EAAS,YAElDpI,EAA+BC,YAAS22C,GAAmB,CACzDzuC,UAAW,CAAC8L,GAAI7L,KADX9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGvB8R,EAAwBC,YAAYumC,IAA7BqE,EAA4C1qC,YAAAH,EAAA,GAA/B,GAGpB8C,EAAgCC,mBAAS,IAAGC,EAAA7C,YAAA2C,EAAA,GAArC8J,EAAQ5J,EAAA,GAAE6J,EAAW7J,EAAA,GACtBkJ,EAAgBY,iBAAO,MACvBX,EAAiBS,GAAY5gB,EAAE,yCAE/BqgB,EAAwB,SAACvC,GAC7BplB,QAAQC,IAAI,uBACZkoB,EAAY/C,EAAMrY,OAAOsb,MAAM,GAAGva,KACpC,EAGA,GAAIxE,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAW/9C,SAClDO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,sCAMd,GAAIiC,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAW/9C,SAAA,CACjDzH,QAAQC,IAAIsJ,GACbvB,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,sCAMd,IAAMklB,EAAUhjB,EAAKgjB,QAGrB,OAFAxsB,QAAQC,IAAIusB,GAGV9kB,eAAC0+C,GAA2B,CAC1Bn6C,KAAMugB,EACNg5B,WAAYA,EAAW/9C,SAEvBO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACgU,KAAM,CACHC,cAAe,CAAC,EAEhBG,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ,IAAIuM,EAAY,CACdrJ,GAAI7L,GAGN,SAASozC,IACPL,EAAc,CAAEhzC,UAAW,CACzB8I,MAAOqM,GACNlM,eAAgB,CAEf,CAACC,MAAOslC,GAAoBxuC,UAAW7D,MAEvC,CAAC+M,MAAOulC,GAAmBzuC,UAAW,CAAC8L,GAAI7L,OAE9CkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAK,uBAAD4M,OAAwBpD,EAAS,aAC7CmJ,KAAMC,QAASlV,EAAE,yCAA2C,CACxDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAClB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,CAEA,IAAIwM,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB3oB,QAAQC,IAAI0oB,EAAa5b,OAAOiN,QAChC,IAAI4O,EAAeD,EAAa5b,OAAOiN,OACvCha,QAAQC,IAAI2oB,GAEZN,EAAUkqB,MAAQ5pB,EAClBN,EAAUsqB,cAAgB1qB,EAE1Bs+B,GACF,EAEA,IAAI39B,EAAOrB,EAAcsB,QAAQT,MAAM,GACnCQ,GAAQA,EAAKtc,KAAO,QACtBic,EAAOO,cAAcF,GACZA,GAAQA,EAAKtc,KAAO,SAC7BgQ,KAAMhT,MAAMjC,EAAE,qDAAsD,CAClEmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,IAEdwqC,GAEN,EAAE/+C,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcqB,EAAMrH,EAANqH,OAAM,OACtBrU,eAAC++C,GAAgC,CAC/B/rC,aAAcA,EACdqB,OAAQA,EACRsL,UAAW7d,EACXge,cAAeA,EACfC,eAAgBA,EAChBE,sBAAuBA,EACvB5Z,UAAWA,GACX,QAMhB,KChJe3G,kBAJe,SAAHC,GAAOA,EAADC,EAAC,OAC9BI,eAAC6G,GAAU,CAACR,UAAU,uBAAwB,ICOnC3G,kBAXM,SAAHC,GAA6B,IAAvBC,EAACD,EAADC,EACtB,OADqCD,EAAZqtC,cAEvB,IAAK,uBACH,OAAOptC,EAAE,gCACX,IAAK,iBACH,OAAOA,EAAE,0BACX,QACE,OAAOA,EAAE,iCAEf,ICTao/C,GAAuC1lD,YAAGC,QAAAC,YAAA,msBCmJxCkG,I,kBAAAA,iBAAkB6C,aAxHjC,SAAiC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAExC0X,EADcrX,qBAAWxC,IACA6Z,WACzB5K,EAAYtQ,EAAE,8CAEd8L,EAAYtI,EAAM2K,OAAOswC,WAC/B/6C,EAA4CC,YAASy7C,GAAsC,CACzFvzC,UAAW,CACTqZ,QAASpZ,KAFL9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAO9B,GAAIzP,EAAS,OAAO5B,eAAA,KAAAD,SAAIH,EAAE,+BAE1B,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAAA,KAAAD,SAAIH,EAAE,8BAGftH,QAAQC,IAAIuJ,GAEZ,IAAMgjB,EAAUhjB,EAAKgjB,QACfm6B,EAAoBn9C,EAAKo9C,yBAE/B,OACEl/C,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAOue,EAAQja,UAAY,IAAMia,EAAQha,SAAS/K,SAC7DC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAACm/C,GAAqB,QAG1B7+C,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAGVk/C,EAAkB71C,MAAMjK,OAO1Ba,eAACiO,GAAW,CACViC,UAAWA,EACXR,SAAUuvC,EAAkBvvC,SAC5BY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO3P,EAAKo9C,yBAAyBxvC,SAASgC,WAEhDC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBqtC,yBAAyB91C,MACpDsG,EAAWmC,EAAgBqtC,yBAAyBxvC,SAE1D,OAAOoC,EAAS3S,OACZ,CAGE+/C,yBAA0B,CACxBntC,WAAYH,EAAestC,yBAAyBntC,WACpD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAestC,yBAAyB91C,OAAK4I,aAAKF,IAC9DpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,2BACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,2BACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,gEACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAACC,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,0BAJnCiN,kBAOlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNk/C,EAAkB71C,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAClCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACo/C,GAAY,CAACpS,aAAczjC,EAAK0F,SAAS+9B,gBAD5BngC,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAK81C,cAAczzC,OAAOkP,IADpBjO,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK+1C,WAERt/C,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACstC,GAAuB,CAAChB,SAAU/iC,EAAK0F,SAASs+B,YAAartC,UAAU,gBAD1D2M,kBAVFA,eAaJ,WA1DpB7M,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,2DA+DhBU,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACu+C,GAAgB,CAACh6C,KAAMugB,IACxB9kB,eAACw+C,GAAW,CACVV,WAAW,qBACXpyC,UAAWtI,EAAM2K,OAAOswC,yBAQxC,KC9IakB,GAAkCjmD,YAAGC,QAAAC,YAAA,8zBAkErCgmD,GAA8BlmD,YAAGI,QAAAF,YAAA,iPClEjCimD,GAAyCnmD,YAAGC,QAAAC,YAAA,6KAY5CkmD,GAAsCpmD,YAAGI,QAAAF,YAAA,gOAWzCmmD,GAAsCrmD,YAAGK,QAAAH,YAAA,gOAWzComD,GAAsCtmD,YAAGO,QAAAL,YAAA,kLC0CvCkG,qBAAkB6C,aA3DjC,SAAwC5C,GAA+F,IAA5FC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBrD,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQ8/C,EAAAlgD,EAAEmgD,qBAAa,IAAAD,EAAC,GAAEA,EAAEzhB,EAAoBz+B,EAApBy+B,qBAAoB7P,EAAA5uB,EAAE6uB,oBAAY,IAAAD,GAAMA,EAC1H7iB,EAAYtI,EAAM2K,OAAOswC,WAE/B/6C,EAAiCC,YAAS22C,GAAmB,CAC3DzuC,UAAW,CAAE8L,GAAI7L,KADX9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB,GAAIF,EAAS,OAAO5B,eAAA,KAAAD,SAAIH,EAAE,+BAE1B,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAAA,KAAAD,SAAIH,EAAE,8BAGf,IAAMklB,EAAUhjB,EAAKgjB,QAErB,OACE9kB,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAOue,EAAQja,UAAY,IAAMia,EAAQha,SAAS/K,SAC7DO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCyuB,EACAxuB,eAAC6G,GAAU,CAACR,UAAS,uBAAAyI,OAAyBpD,EAAS,qBACvD1L,eAACm/C,GAAqB,IAEvB/gB,EACE0hB,IAAoBtxB,EACrBxuB,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,4BAA2BnK,SACxDC,eAACyW,GAAS,CACRL,OAAM,uBAAAtH,OAAyB1L,EAAM2K,OAAOswC,WAAU,mBAAAvvC,OAAkBgxC,EAAa,iBACrFxpC,WAAY1W,EAAE,gDACdM,UAAU,WAGZ,QAIRI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACbA,IAEHO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACu+C,GAAgB,CAACh6C,KAAMugB,IACxB9kB,eAACw+C,GAAW,CACVV,WAAW,eACXpyC,UAAWA,gBAQ3B,KCRehM,iBAAkB6C,aApDO,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAM,OACjF/T,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0CAA0CG,SAAA,CAC7DC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,SACLlG,UAAY+S,EAAO8sC,OAAU,0BAA4B,eACzDxsC,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,MAAMqN,UAAU,OAAOvT,UAAU,4BAI1DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0CAA0CG,SAAA,CAC7DC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,SACLlG,UAAY+S,EAAO+sC,OAAU,0BAA4B,eACzDzsC,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,0BAG3DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uCAAuCG,SAAA,CAC1DC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,MACLlG,UAAY+S,EAAOgtC,IAAO,0BAA4B,eACtD1sC,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,MAAMqN,UAAU,OAAOvT,UAAU,gCAK5DF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UAENR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAOJ,KCiGIF,qBAAkB6C,aAzIjC,SAAoC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAElC0X,GAFgDnb,EAAP0D,QAC3BI,qBAAWxC,IACA6Z,YACzBpP,EAAYtI,EAAM2K,OAAOswC,WAE/B/6C,EAAiCC,YAASg8C,GAAiC,CACzE9zC,UAAW,CAAEqZ,QAASpZ,KADhB9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB8R,EAAqCC,YAAY2rC,IAAzCU,EAAqEnsC,YAAAH,EAAA,GAA7C,GAChCoH,EAA4CnH,YAAY+rC,IAAhDO,EAAoFpsC,YAAAiH,EAAA,GAArD,GAEvC,GAAIpZ,EAAS,OACX5B,eAACogD,GAA+B,CAAArgD,SAC9BC,eAAA,KAAAD,SAAIH,EAAE,iCAIV,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEVvB,gBAAC8/C,GAA+B,CAAArgD,SAAA,CAC9BC,eAAA,KAAAD,SAAIH,EAAE,+BAAiCI,eAAA,KAAAD,SAAIH,EAAE,iCAKnD,IACMygD,EADsBv+C,EAAKw+C,oBACcl3C,MAAM,GAAGG,KAClDg3C,EAAWF,EAAmBE,SAGpC,OAFAjoD,QAAQC,IAAI8nD,GAGV//C,gBAAC8/C,GAA+B,CAACN,cAAeO,EAAmB9oC,GAAGxX,SAAA,CACpEC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,yCAAyCG,SACtDC,eAACgU,KAAM,CACLC,cAAe,CACb+rC,OAAQK,EAAmBL,OAC3BD,OAAQM,EAAmBN,OAC3BE,IAAKI,EAAmBJ,KAG1B7rC,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ,IAAIuqC,EAAa,CACfrnC,GAAI8oC,EAAmB9oC,GACvByoC,OAAQ3rC,EAAO2rC,OACfD,OAAQ1rC,EAAO0rC,OACfE,IAAK5rC,EAAO4rC,KAGdC,EAAyB,CAAEz0C,UAAW,CACpC8I,MAAOqqC,GACNlqC,eAAgB,CAEf,CAACC,MAAO4qC,GAAiC9zC,UAAW,CAAEqZ,QAASpZ,OAElEkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,sDAAwD,CACrEmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAuBrH,EAAf4S,gBAA8B5S,EAAb6S,cAAa,OAC9D7f,eAACwgD,GAA+B,CAC9BxtC,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,GACR,MAINksC,EAASn3C,MAAMjK,OAAUa,eAAA,MAAAD,SAAKH,EAAE,oDAA0D,GAC5FI,eAACI,KAAKC,IAAG,CAAAN,SACRwgD,EAASn3C,MAAMkD,KAAI,SAAA0d,GAAA,IAAGzgB,EAAIygB,EAAJzgB,KAAI,OACzBvJ,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC4G,KAAI,CAACX,MAAOgD,EAAKk3C,UAAU1gD,SAAA,CAC1BO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACPH,EAAE,2DAA2D,IAAE+L,KAAOpC,EAAKm3C,eAAe90C,OAAOkP,GAClG9a,eAAA,OAAKwM,wBAAyB,CAAEC,OAAQC,KAAUC,SAASpD,EAAKqD,eAElEtM,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,SACNR,KAAK,SACLmM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,+DACduZ,eAAgBnZ,eAAA,KAAAD,SAAIwJ,EAAKk3C,YACzBrnC,WAAYxZ,EAAE,oDACdgb,eAAgBulC,EAChB7mC,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAACC,MAAO4qC,GAAiC9zC,UAAW,CAAEqZ,QAASpZ,OAIvE,EAAE3L,SAEFC,eAACmG,KAAI,CAACC,KAAK,cAEbpG,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyBpD,EAAS,mBAAAoD,OAAkBuxC,EAAmB9oC,GAAE,mBAAAzI,OAAkBvF,EAAKgO,IAAKxX,SAC3GC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,YAAW/E,SAEdH,EAAE,2BAKJ,QAKnB,KC5EeF,iBAAkB6C,aAjEc,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAuBoT,GAAbrT,EAAP0D,QAAkB1D,EAATggB,UAAuBhgB,EAAZqT,cAAc6M,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiB3M,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQhO,EAAS1G,EAAT0G,UAAS,OAC9I/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sDAAsDG,SAAA,CACzEC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,YACLlG,UAAY+S,EAAOwtC,UAAa,0BAA4B,eAC5D93B,YAAa/oB,EAAE,kEACf2T,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,2DAA2DG,SAAA,CAC9EC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOqsC,cACjB5kC,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,gBAAiB9S,EAAK,EACxDiP,OAAQ,kBAAM4D,EAAgB,iBAAiB,EAAK,IAEtD5f,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,OAAOvT,UAAU,6BAIpEF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oDAAoDG,SAAA,CACvEC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,UACbC,aAAchV,EAAOzH,QACrBhU,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,UAAWqG,EAAE7gB,OAAOkkB,cAClC3J,EAAgB,WAAW,GAAM,EACnC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,+BAKhEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAETH,EAAE,2BAIN,KCOIF,qBAAkB6C,aArEjC,SAA8C5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACnDqI,EAAYtI,EAAM2K,OAAOswC,WACzByB,EAAgB18C,EAAM2K,OAAO4yC,gBAC7Bt6C,EAAS,uBAAAyI,OAA0BpD,EAAS,kBAElDkI,EAA0CC,YAAY6rC,IAA/CkB,EAAmF7sC,YAAAH,EAAA,GAApD,GAEtC,OACE5T,eAACogD,GAA+B,CAAC5xB,cAAc,EAAKzuB,SAClDO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,0DAEjBI,eAACgU,KAAM,CACLC,cAAe,CACbwsC,UAAW,GACX7zC,QAAS,GACT8zC,cAAe,IAAIx9C,MAGrBkR,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZusC,EAAgC,CAAEn1C,UAAW,CAC3C8I,MAAO,CACL8rC,mBAAoBP,EACpBW,UAAWpsC,EAAOwsC,SAClBj0C,QAASyH,EAAOzH,QAChB8zC,cAAepiC,GAAejK,EAAOqsC,iBAEtChsC,eAAgB,CACjB,CAACC,MAAO4qC,GAAiC9zC,UAAW,CAAEqZ,QAASpZ,OAEhEkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,8DAAgE,CAC7EmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQoV,EAAUzc,EAAVyc,WAAY7J,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC1E7f,eAAC8gD,GAAsC,CACrC9tC,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRoV,WAAYA,EACZ7J,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GAE4B,QAMrD,KC+Be3G,qBAAkB6C,aAhGjC,SAA+C5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACpDqI,EAAYtI,EAAM2K,OAAOswC,WACzB0C,EAAY39C,EAAM2K,OAAOwJ,GACzBlR,EAAS,uBAAAyI,OAA0BpD,EAAS,kBAElDpI,EAAiCC,YAASk8C,GAAwC,CAChFh0C,UAAW,CAAC,GAAMs1C,KADZn/C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA0CC,YAAY8rC,IAA/CqB,EAAmFjtC,YAAAH,EAAA,GAApD,GAEtC,GAAIhS,EAAS,OACX5B,eAACogD,GAA+B,CAAArgD,SAC9BC,eAAA,KAAAD,SAAIH,EAAE,iCAIV,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEVvB,gBAAC8/C,GAA+B,CAAArgD,SAAA,CAC9BC,eAAA,KAAAD,SAAIH,EAAE,+BAAiCI,eAAA,KAAAD,SAAIH,EAAE,iCAKnD,IAAMqhD,EAAUn/C,EAAKo/C,0BAIjBC,EAAW,KAKf,OAJIF,EAAQP,gBACVS,EAAW,IAAIj+C,KAAK+9C,EAAQP,gBAI5B1gD,eAACogD,GAA+B,CAAC5xB,cAAc,EAAKzuB,SAClDO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,2DAEjBI,eAACgU,KAAM,CACLC,cAAe,CACbwsC,UAAWQ,EAAQR,UACnB7zC,QAASq0C,EAAQr0C,QACjB8zC,cAAeS,GAGjB/sC,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ2sC,EAAgC,CAAEv1C,UAAW,CAC3C8I,MAAO,CACLgD,GAAIwpC,EACJN,UAAWpsC,EAAOwsC,SAClBj0C,QAASyH,EAAOzH,QAChB8zC,cAAepiC,GAAejK,EAAOqsC,iBAEtChsC,eAAgB,CACjB,CAACC,MAAO4qC,GAAiC9zC,UAAW,CAAEqZ,QAASpZ,OAEhEkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,+DAAiE,CAC9EmV,SAAUF,KAAMG,SAASC,eAE7B5R,EAAQnB,KAAKmE,GACbiO,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQoV,EAAUzc,EAAVyc,WAAY7J,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC1E7f,eAAC8gD,GAAsC,CACrC9tC,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRoV,WAAYA,EACZ7J,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GAE4B,QAMrD,KC1Fe3G,sBAbf,SAA2BC,GAAiB,IAAdC,EAACD,EAADC,EAC5B,OADqCD,EAAN+I,QAE7B,IAAK,YACH,OAAO1I,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,gEACnC,IAAK,SACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,6DACnC,IAAK,YACH,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,gEACnC,QACE,OAAOA,EAAE,iEAEf,IC2BeF,I,kBAAAA,iBAAkB6C,aA9BjC,SAA2B5C,GAAIA,EAADC,EAA4C,IAAzCwD,EAAKzD,EAALyD,MAAgBrD,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQqhD,EAAAzhD,EAAEmlB,eAAO,IAAAs8B,EAAC,CAAC,EAACA,EAC7D11C,EAAYtI,EAAM2K,OAAOswC,WAE/B,OACEr+C,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAOue,EAAQC,SAAShlB,SACnCC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAACm/C,GAAqB,QAG1B7+C,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACbA,IAEHO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACu+C,GAAgB,CAACh6C,KAAMugB,IACxB9kB,eAACw+C,GAAW,CACVV,WAAW,UACXpyC,UAAWA,gBAQ3B,KC1Ca21C,GAA4B/nD,YAAGC,QAAAC,YAAA,29BCC/B8nD,GAAsChoD,YAAGC,QAAAC,YAAA,mgDAgFzC+nD,GAA2BjoD,YAAGI,QAAAF,YAAA,2iBA+B9BgoD,GAAmCloD,YAAGK,QAAAH,YAAA,0KAStCioD,GAAkCnoD,YAAGO,QAAAL,YAAA,oNAUrCkoD,GAA4CpoD,YAAGQ,QAAAN,YAAA,iLCjE7CkG,qBAAkB6C,aAjDjC,SAA2B5C,GAA6B,IAA3BC,EAACD,EAADC,EAAU2J,GAAF5J,EAALyD,MAAWzD,EAAJ4J,MAAMub,EAAOnlB,EAAPmlB,QACrC2P,EAAchxB,qBAAWxC,IACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBAC/ByI,EAAuCC,YAAY2tC,IAA5CG,EAA6E5tC,YAAAH,EAAA,GAAjD,GAEnC,OACE5T,eAAA,UAAQE,UAAU,sCAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,wDACduZ,eAAgBnZ,eAAA,KAAAD,SACdO,gBAAC2F,KAAI,CAAAlG,SAAA,CACHO,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CACPH,EAAE,gBAAgB,KAAI+L,KAAOpC,EAAKwD,MAAMnB,OAAOkP,GAAa,IAAG,IAC/DnP,KAAOpC,EAAKwD,KAAO,IAAMxD,EAAKq4C,aAAax0C,WAAWxB,OAAOV,MAEhE5K,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CACPH,EAAE,iBAAiB,KAAG2J,EAAKq4C,aAAa95C,sBAAsB1B,QAEjE9F,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CACPH,EAAE,oBAAoB,KAAG2J,EAAKq4C,aAAaz0C,yBAAyBnF,qBAAqB5B,aAIhGgT,WAAYxZ,EAAE,oDACdgb,eAAgB+mC,EAChBroC,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAAEC,MAAO0sC,GACP51C,UAAW,CAAEqZ,QAASA,EAAQvN,QAI1C,EAAExX,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAGxD,KCuHe1G,qBAAkB6C,aAnKjC,SAAuB5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACrBqxB,GADmC90B,EAAP0D,QACdI,qBAAWxC,KACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBACzBkzC,EAAaj7C,EAAM2K,OAAOswC,WAC1BnuC,EAAYtQ,EAAE,mCACpB0D,EAA4CC,YAAS89C,GAA2B,CAC9E51C,UAAW,CAAC,QAAW4yC,GACvBxyC,YAAa,iBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAM9B,GAAIzP,EAAS,OACX5B,eAAC6hD,GAAkB,CAAA9hD,SACjBC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,qCAMd,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEV7B,eAAC6hD,GAAkB,CAAA9hD,SACjBC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,oCAOhB,IAAMklB,EAAUhjB,EAAKgjB,QACfg9B,EAA0BhgD,EAAKggD,wBAGrC,OAAKA,EAAwB14C,MAAMjK,OAcjCa,eAAC6hD,GAAkB,CAAC/8B,QAASA,EAAQ/kB,SACnCC,eAACiO,GAAW,CACViC,UAAWA,EACXR,SAAUoyC,EAAwBpyC,SAClCY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOqwC,EAAwBpyC,SAASgC,WAE1CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBiwC,wBAAwB14C,MACnDsG,EAAWmC,EAAgBiwC,wBAAwBpyC,SAEzD,OAAOoC,EAAS3S,OACZ,CAGE2iD,wBAAyB,CACvB/vC,WAAYH,EAAekwC,wBAAwB/vC,WACnD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAekwC,wBAAwB14C,OAAK4I,aAAKF,IAC7DpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,4BACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACR+hD,EAAwB14C,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACxCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACNzH,QAAQC,IAAIgR,GACZjR,QAAQC,IAAIusB,GACdxkB,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACN4L,KAAOpC,EAAKwD,MAAMnB,OAAOkP,GAAa,IAAC9a,eAAA,SACzCA,eAAA,QAAME,UAAU,aAAYH,SACzB4L,KAAOpC,EAAKwD,KAAO,IAAMxD,EAAKq4C,aAAax0C,WAAWxB,OAAOV,QAGlElL,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKq4C,aAAa95C,sBAAsB1B,OAE5C9F,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACNwJ,EAAKq4C,aAAaz0C,yBAAyBnF,qBAAqB5B,KAAM,IAACpG,eAAA,SACzEA,eAAA,QAAME,UAAU,aAAYH,SACxBwJ,EAAKq4C,aAAaz0C,yBAAyB/G,UAGjDpG,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC+hD,GAAkB,CAACr5C,OAAQa,EAAKy4C,kBAEnChiD,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACiiD,GAAkB,CAACn9B,QAASA,EAASvb,KAAMA,QAtBhCsD,eA2DJ,aAhHpB7M,eAAC6hD,GAAkB,CAAC/8B,QAASA,EAAQ/kB,SACnCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,+CAoHlB,KCxIeF,I,wBAAAA,iBAAkB6C,aA9BjC,SAA+B5C,GAAIA,EAADC,EAAkE,IAA/DwD,EAAKzD,EAALyD,MAAgBrD,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQqhD,EAAAzhD,EAAEmlB,eAAO,IAAAs8B,EAAC,CAAC,EAACA,EAAEhjB,EAAoBz+B,EAApBy+B,qBACnE1yB,EAAYtI,EAAM2K,OAAOswC,WAE/B,OACEr+C,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAOue,EAAQC,SAAShlB,SACnCC,eAAA,OAAKE,UAAU,sBAAqBH,SACjCq+B,MAGL99B,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACbA,IAEHO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACu+C,GAAgB,CAACh6C,KAAMugB,IACxB9kB,eAACw+C,GAAW,CACVV,WAAW,cACXpyC,UAAWA,gBAQ3B,KCxCaw2C,GAAsC5oD,YAAGC,QAAAC,YAAA,62CA+DzC2oD,GAAqC7oD,YAAGI,QAAAF,YAAA,i9BAuDxC4oD,GAA6C9oD,YAAGK,QAAAH,YAAA,6gBA0BhD6oD,GAAiC/oD,YAAGO,QAAAL,YAAA,qZA2BpC8oD,GAAkChpD,YAAGQ,QAAAN,YAAA,oNAUrC+oD,GAAkCjpD,YAAGU,QAAAR,YAAA,oNAUrCgpD,GAAkClpD,YAAGY,QAAAV,YAAA,0KChMrCipD,GAAgCnpD,YAAGC,QAAAC,YAAA,ouCCFzC,SAASkpD,GAA0B3I,GACxC,IAAI9xC,EAAY,CACdzD,gBAAYpF,EACZqF,cAAUrF,EACV26C,gBAAY36C,GAOd,OAJI26C,IACF9xC,EAAU8xC,WAAaA,GAGlB9xC,CACT,CAEO,SAAS06C,GAAiC11C,GAAkC,IAC7EhF,EAAY,CACd25C,aAAc30C,EACd21C,gBAAgB,GAOlB,OAVwE1jD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,KAOtE+I,EAAU26C,gBAAiB,GAGtB36C,CACT,CCcevI,qBAAkB6C,aA7BjC,SAAsC5C,GAAoB,IAAlBC,EAACD,EAADC,EAAU2J,GAAF5J,EAALyD,MAAWzD,EAAJ4J,MAC1C0D,EAAiB1D,EAAKq4C,aAAarqC,GACzC3D,EAAuCC,YAAY2uC,IAA5CK,EAA4E9uC,YAAAH,EAAA,GAAhD,GAEjC,OACE5T,eAACw+B,GAAY,CACXt+B,UAAU,cACVgZ,WAAYtZ,EAAE,yDACduZ,eAAgBnZ,eAAA,KAAAD,SAAIwJ,EAAKu5C,oBAAoBh+B,QAAQC,WACrD3L,WAAYxZ,EAAE,qDACdgb,eAAgBioC,EAChB1kB,wBAAyB,CACrB1yB,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAAEC,MAAOutC,GACPz2C,UAAWk3C,GAAiC11C,IAC9C,CAAE0H,MAAO8tC,GACPh3C,UAAW,CAAEqZ,QAASvb,EAAKu5C,oBAAoBh+B,QAAQvN,QAKvE,KCmIe7X,qBAAkB6C,aA3IjC,SAA2B5C,GAA0B,IAAvBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAO4a,EAAQre,EAARqe,SAChCyW,EAAchxB,qBAAWxC,IACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBACzB43C,EAAe/jC,GAAgBpf,GAE/B8L,EAAYtI,EAAM2K,OAAOswC,WACzBnuC,EAAYtQ,EAAE,uCAEdw+B,EAAuB99B,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CAC1CC,eAACm/C,GAAqB,IACtBn/C,eAACyW,GAAS,CAACL,OAAM,uBAAAtH,OAAyBpD,EAAS,0BAA0BxL,UAAU,YAGzFoD,EAA4CC,YAASk/C,GAA+B,CAClFh3C,UAAW,CAAC,QAAWC,GACvBG,YAAa,iBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAS9B,GAHAhT,aAAaC,QAAQC,EAAKxB,mCAAoCihB,EAASoH,UAGnExjB,EAAS,OACX5B,eAACgjD,GAAsB,CAAC5kB,qBAAsBA,EAAqBr+B,SACjEC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMtC,GAAIa,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEV7B,eAACgjD,GAAsB,CAAC5kB,qBAAsBA,EAAqBr+B,SACjEC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,oCAOhB,IAAMklB,EAAUhjB,EAAKgjB,QACfm+B,EAA0BnhD,EAAKmhD,wBAGrC,OAAKA,EAAwB75C,MAAMjK,OAcjCa,eAACgjD,GAAsB,CAACl+B,QAASA,EAASsZ,qBAAsBA,EAAqBr+B,SACnFC,eAACiO,GAAW,CACViC,UAAWA,EACXR,SAAUuzC,EAAwBvzC,SAClCY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOwxC,EAAwBvzC,SAASgC,WAE1CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBoxC,wBAAwB75C,MACnDsG,EAAWmC,EAAgBoxC,wBAAwBvzC,SAEzD,OAAOoC,EAAS3S,OACZ,CAGE8jD,wBAAyB,CACvBlxC,WAAYH,EAAeqxC,wBAAwBlxC,WACnD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeqxC,wBAAwB75C,OAAK4I,aAAKF,IAC7DpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,6CACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,2CACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,0BACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRkjD,EAAwB75C,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACxCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACN4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,KAElC9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACLwJ,EAAKuY,SAAYnW,KAAOpC,EAAKuY,SAASlW,OAAOkP,KAElDxa,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACNwJ,EAAKq4C,aAAa95C,sBAAsB1B,KAAM,IAACpG,eAAA,SACjDM,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAC1BC,eAACmG,KAAI,CAACC,KAAK,UAAU,IAAG,IACpB28C,EAAax5C,EAAKq4C,aAAasB,kBAAoB,GAAI,IAAG,IAC1Dv3C,KAAO,GAADmD,OAAIvF,EAAKq4C,aAAa//B,UAAS,KAAA/S,OAAIvF,EAAKq4C,aAAax0C,YAAaxB,OAAOV,GAAa,IAAClL,eAAA,SACjGA,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAGmD,EAAKq4C,aAAaz0C,yBAAyBnF,qBAAqB5B,KAAM,IAAE,MAC7FmD,EAAKq4C,aAAaz0C,yBAAyB/G,WAGjD9F,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACNwJ,EAAKu5C,oBAAoBhf,yBAAyB19B,KAAM,KAAIuF,KAAOpC,EAAKu5C,oBAAoBjhC,WAAWjW,OAAOkP,GAAa,OAE/Hxa,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACRC,eAACmjD,GAA6B,CAAC55C,KAAMA,IACrCvJ,eAAC2zC,GAAU,CAACzzC,UAAU,cAAcuyC,QAAO,uBAAA3jC,OAAyBpD,EAAS,sBAAAoD,OAAqBvF,EAAKgO,WAtB3F1K,eAwBJ,aA7EpB7M,eAACgjD,GAAsB,CAACl+B,QAASA,EAASsZ,qBAAsBA,EAAqBr+B,SACnFC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,mDAiFlB,KCjKawjD,GAAmC5wC,OAAaC,MAAM,CACjEoP,UAAWrP,OACRG,SAAS/S,YAAE,yBC2DDF,iBAAkB6C,aA/CG,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAmBoT,GAATrT,EAAP0D,QAAc1D,EAALyD,MAAmBzD,EAAZqT,cAAsBqB,GAAF1U,EAANsT,OAActT,EAAN0U,QAAQhO,EAAS1G,EAAT0G,UAAWuZ,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAa,OAC/Hvf,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXxB,gBAAiBxc,EAAE,qDACnBgc,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,IAEhD5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,+BAKhEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAACsgB,GAAgB,CAACja,UAAWA,IAC3B2M,EACA1S,gBAACgrB,KAAK,CAAChnB,KAAK,UAAUglC,eAAa,EAAAvpC,SAAA,CACjCC,eAAA,UAAAD,SAASH,EAAE,yBAAgC,IAAEA,EAAE,qEAEnD,QAGC,KCnDIF,iBAAkB6C,aAJH,SAAH5C,GAAOA,EAADC,EAAN,IAAS8L,EAAS/L,EAAT+L,UAAS,OAC3C1L,eAAC6G,GAAU,CAACR,UAAS,uBAAAyI,OAA0BpD,EAAS,iBAAmB,KCkK9DhM,I,eAAAA,iBAAkB6C,aApJjC,SAA8B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAGnC6H,EAFczH,qBAAWxC,IAEAkK,iBACzB43C,EAAe/jC,GAAgBpf,GAE/B2X,EAAKnU,EAAM2K,OAAOwJ,GAClB7L,EAAYtI,EAAM2K,OAAOswC,WACzBh4C,EAAS,uBAAAyI,OAA0BpD,EAAS,gBAC9CwE,EAAYtQ,EAAE,4CACZyjD,EAAiB,cACjBjlB,EAAuBp+B,eAACsjD,GAAqB,CAAC53C,UAAWA,IAE/DpI,EAA+BC,YAAS4+C,GAAoC,CAC1E12C,UAAW,CAAE8L,GAAIA,KADZ3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGvB8R,EAAwCC,YAAY0uC,IAA7CgB,EAA6ExvC,YAAAH,EAAA,GAAhD,GAEpC,GAAIhS,EAAS,OACX5B,eAACgjD,GAAsB,CACrB9yC,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,mCAKZ,GAAIiC,EAAO,OACT7B,eAACgjD,GAAsB,CACrB9yC,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,kCAUZtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM0hD,EAAyB1hD,EAAK0hD,uBAC9B1+B,EAAUhjB,EAAK0hD,uBAAuBV,oBAAoBh+B,QAC1D88B,EAAe9/C,EAAK0hD,uBAAuB5B,aAI7C//B,EAAY,KACZ2hC,EAAuB3hC,YACzBA,EAAY,IAAI3e,KAAKsgD,EAAuB3hC,YAG9C,IAAIC,EAAU,KAOd,OANI0hC,EAAuB1hC,UACzBA,EAAU,IAAI5e,KAAKsgD,EAAuB1hC,UAG5CxpB,QAAQC,IAAIqpD,GAGV5hD,eAACgjD,GAAsB,CACrB9yC,UAAWA,EACXmzC,eAAe,cACfjlB,qBAAsBA,EACtBtZ,QAASA,EAAQ/kB,SAEjBO,gBAAC4G,KAAI,CAACX,MAAO2J,EAAUnQ,SAAA,CACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACVO,gBAAC4G,KAAKokB,MAAK,CAACxmB,MAAM,UAAS/E,SAAA,CACzBC,eAAA,KAAAD,SAAI6hD,EAAa95C,sBAAsB1B,OAASpG,eAAA,SAChDA,eAACmG,KAAI,CAACC,KAAK,UAAU,IAAE,IACjB28C,EAAanB,EAAasB,kBAAoB,GAAK,IAAE,IACrDv3C,KAAO,GAADmD,OAAI8yC,EAAa//B,UAAS,KAAA/S,OAAI8yC,EAAax0C,YAAaxB,OAAOV,GAAa,IAAClL,eAAA,SACvFA,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAE,IACpBw7C,EAAaz0C,yBAAyBnF,qBAAqB5B,KAAM,IAAE,MACnEw7C,EAAaz0C,yBAAyB/G,UAG1CpG,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAWA,EACXC,QAASA,GAEX3N,iBAAkBivC,GAClBhvC,SAAU,SAACC,EAAM9H,GAAyB,IAElCuV,EAFaxN,EAAa/H,EAAb+H,cAIfwN,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGnByhC,EAA8B,CAAE93C,UAAW,CACzC8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBsK,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,IAEVpN,eAAgB,CACf,CAAEC,MAAO8tC,GACPh3C,UAAW,CAAEqZ,QAASpZ,IAExB,CAACiJ,MAAOutC,GACNz2C,UAAWk3C,GAAiCf,EAAarqC,QAE9D3C,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,mDAAqD,CAClEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACyjD,GAA2B,CAC1BzwC,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACe,QAM5C,KCpKaywC,GAAcpqD,YAAGC,QAAAC,YAAA,wOCYfkG,kBANK,SAAHC,GAAA,IAAMC,EAACD,EAADC,EAAGM,EAASP,EAATO,UAAmB,OAAAP,EAARgkD,SAE7B3jD,eAACuI,KAAK,CAACrI,UAAWA,EAAW4E,MAAM,UAAS/E,SAAEH,EAAE,oBAChDI,eAACuI,KAAK,CAACrI,UAAWA,EAAW4E,MAAM,SAAQ/E,SAAEH,EAAE,uBAA8B,ICTxEgkD,GAAoBtqD,YAAGC,QAAAC,YAAA,i5EA4HvBqqD,GAAkBvqD,YAAGI,QAAAF,YAAA,u6DAoGrB8gB,GAAyBhhB,YAAGK,QAAAH,YAAA,m4CAqE5BsqD,GAAexqD,YAAGO,QAAAL,YAAA,woBCrQ/B,SAASuqD,GAA4Bh3C,GACnC,IAAI9E,EAAY,CAAC,EAEjB,GAAI8E,EAAM,CACR,IAAMi3C,EAAa1lC,GAAevR,GAElC9E,EAAUC,SAAW87C,EACrB/7C,EAAUE,UAAY67C,CACxB,CAEA,OAAO/7C,CACT,CAkRevI,qBAAkB6C,aA/QjC,SAA4B5C,GAOvB,IANHC,EAACD,EAADC,EACAwD,EAAKzD,EAALyD,MAIA6gD,GAJKtkD,EACLukD,2BAA6BvkD,EAC7BwkD,qBAAuBxkD,EACvBykD,mBACSzkD,EAATskD,WAGM/4C,EADczH,qBAAWxC,IACAkK,iBAE/BuL,EAAwCC,mBAAS,IAAIzT,MAAO0T,EAAA7C,YAAA2C,EAAA,GAArD2tC,EAAYztC,EAAA,GAAE0tC,EAAe1tC,EAAA,GAGpCtT,EAA0CC,YAAUqgD,GAAmB,CACrEn4C,UAAWs4C,GAA4BM,KADjCziD,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAI9B,SAASwtC,EAAmBC,GAC1B,GACO,yBADAP,EACL,CACE,IAAMv4C,EAAYtI,EAAM2K,OAAOswC,WAC/B,OAAOr+C,eAAC0E,IAAI,CAACtC,GAAE,qCAAA0M,OAAuC01C,EAAe,aAAA11C,OAAYpD,GAAY3L,SAC3FO,gBAACqE,KAAM,CAACG,MAAM,UAAUF,SAAO,EAACC,KAAK,KAAI9E,SAAA,CACvCC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAExG,EAAE,sBAErB,CAEP,MAAO,4BAEb,CAEA,SAAS6kD,IACP,OAAOzkD,eAAC4d,GACN,CACA1d,UAAW,eACX0b,SAAUyoC,EACVvoC,SAAU,SAAC/O,GACLA,IAEFu3C,EAAgBv3C,GAChBgK,EAAQgtC,GAA4Bh3C,IAIxC,GAuBJ,CAMA,OAAInL,EACFtB,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACykD,EAAM,IACPzkD,eAAA,OAAAD,SACEC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,SAKhCa,EACFvB,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACykD,EAAM,IACPzkD,eAACsrB,KAAK,CAAChnB,KAAK,SAAQvE,SAAEH,EAAE,iCAIvBkC,EAAKqK,gBAAgBhN,OAUxBmB,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACykD,EAAM,IACL3iD,EACF9B,eAAA,OAAKE,UAAU,OAAMH,SAClB+B,EAAKqK,gBAAgBG,KAAI,SAAAC,GAAA,IAAGQ,EAAIR,EAAJQ,KAAMnK,EAAO2J,EAAP3J,QAAO,OACxCtC,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbO,gBAAA,MAAAP,SAAA,CACGqH,GAAWuE,KAAOoB,GAAMnB,OAAO,SAAS,IAAE,IAC3C5L,eAAA,SAAOE,UAAU,aAAYH,SACtB4L,KAAOoB,GAAMnB,OAAO,WAG1BhJ,EAAQzD,OAMXyD,EAAQ0J,KAAI,SAAAQ,GAAA,IACRG,EAAcH,EAAdG,eACAC,EAAaJ,EAAbI,cACAH,EAAID,EAAJC,KACArE,EAAMoE,EAANpE,OACAI,EAAOgE,EAAPhE,QACAC,EAAW+D,EAAX/D,YACAF,EAAWiE,EAAXjE,YACAic,EAAOhY,EAAPgY,QACAzc,EAAIyE,EAAJzE,KACAq8C,EAAQ53C,EAAR43C,SACAC,EAAK73C,EAAL63C,MACAx3C,EAAwBL,EAAxBK,yBACArF,EAAqBgF,EAArBhF,sBACAC,EAAiB+E,EAAjB/E,kBACAqF,EAASN,EAATM,UACAC,EAAOP,EAAPO,QACAC,EAAMR,EAANQ,OACAC,EAAuBT,EAAvBS,wBACA2hB,EAAapiB,EAAboiB,cAAa,OACXlvB,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAAC+H,GAAI,EAAGC,GAAI,EAAG3G,GAAI,GAAG/G,SAAA,CAC7BC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAGzN,SACfO,gBAAA,MAAAP,SAAA,CACG0I,GAAuBC,GACxBpI,gBAAA,QAAMJ,UAAU,OAAMH,SAAA,CAErB+H,EAAsB1B,KAAK,IAAG,IAE9BuF,KAAOoB,EAAO,IAAMK,GAAWxB,OAAOV,GAAY,IAAE,MACpDS,KAAOoB,EAAO,IAAMM,GAASzB,OAAOV,GAAY,IAAG,OAEnDnD,GAAqB/H,eAAA,SAAOE,UAAU,aAAYH,SAChDgI,EAAkB3B,cAK3B9F,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAAC+H,GAAI,GAAGzN,SAAA,CAEZ+kB,EACC1c,GAAqB0c,EAAQC,SAAU1c,GACvCrI,eAAA,QAAME,UAAU,WAAUH,SAAEH,EAAE,oCACjC,IAACI,eAAA,SACFA,eAAA,SAAOE,UAAU,aAAYH,SACzB2kD,EAAYt8C,GAAqBs8C,EAAS3/B,SAAU4/B,GAAS,QAGnErkD,gBAACF,KAAKqF,IAAG,CAAC+H,GAAI,GAAGzN,SAAA,CAEfC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAE+G,EAAyBnF,qBAAqB5B,KACpE9F,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAC,MAAIoN,EAAyB/G,iBAIjEpG,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,EAAGC,GAAI,EAAG3G,GAAI,EAAE/G,SAC5BC,eAAA,QAAME,UAAU,cAAaH,SAAEwkD,EAAmBt3C,UAGtD3M,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,EAAGC,GAAI,EAAG3G,GAAI,GAAG/G,SAC7BO,gBAAA,OAAKJ,UAAU,OAAMH,SAAA,CACnBC,eAAC4kD,GAAW,CAAC1kD,UAAU,OAAOyjD,SAAUz0B,IACpB,aAAlBhiB,EACAlN,eAACuI,KAAK,CAACzD,MAAM,UAAU5E,UAAU,OAAMH,SAAEH,EAAE,kBAC3C,KACkB,0BAAlBsN,EACAlN,eAACuI,KAAK,CAACzD,MAAM,UAAU5E,UAAU,OAAMH,SAAEH,EAAE,qBAC3C,KACW,cAAX8I,EACA1I,eAACuI,KAAK,CAACzD,MAAM,UAAU5E,UAAU,OAAMH,SAAEH,EAAE,uBAC3C,KACAU,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAACC,eAAA,SAAO4I,GAAmBhJ,EAAG8I,EAAQG,EAAaC,EAASC,WAG/F/I,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,EAAGC,GAAI,EAAG3G,GAAI,EAAE/G,SAE5BO,gBAAA,SAAOJ,UAAU,mBAAkBH,SAAA,CAACC,eAACmG,KAAI,CAACC,KAAK,UAAU,IAAEmH,EAAwB,IAAED,cA7DlFT,eAiEJ,IA3FQ7M,eAACkH,KAAI,CAAAnH,SACtBC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAAA,MAAAP,SAAA,CAAKH,EAAE,+BAA+B,IAACI,eAAA,KAAGE,UAAU,yBATvC2M,eAsGJ,MA2DnB,MA/KJvM,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACykD,EAAM,IACPzkD,eAACsrB,KAAK,CAAChnB,KAAK,UAASvE,SACnBC,eAAA,UAAAD,SAASH,EAAE,yCA+KnB,KCjReF,I,GAAAA,iBAAkB6C,aAhCjC,SAAmC5C,GAA0B,IAAvBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACjCsI,GADgD/L,EAARqe,SAC5B5a,EAAM2K,OAAOswC,YACzBjgB,EAAuBp+B,eAACsjD,GAAqB,CAAC53C,UAAWA,IAC/DpI,EAAiCC,YAASmgD,GAAa,CAAEj4C,UAAW,CAAEC,UAAWA,KAAzE9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAExB,GAAIF,EACF,OACE5B,eAACgjD,GAAsB,CAAC5kB,qBAAsBA,EAAqBr+B,SACjEC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAKpC,GAAIa,EACF,OACE7B,eAACgjD,GAAsB,CAAC5kB,qBAAsBA,EAAqBr+B,SACjEC,eAAA,KAAAD,SAAIH,EAAE,gCAKZ,IAAMklB,EAAUhjB,EAAKgjB,QAErB,OACExkB,gBAAC0iD,GAAsB,CAACl+B,QAASA,EAASsZ,qBAAsBA,EAAqBr+B,SAAA,CACnFC,eAAA,MAAAD,SAAKH,EAAE,0DACPI,eAAC6kD,GAAmB,CAACZ,UAAU,2BAGrC,KCvCahqD,GAA0BX,YAAGC,QAAAC,YAAA,oJCsC3BkG,iBAAkB6C,aA5BU,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAiB1U,EAATggB,UAA0BhgB,EAAfigB,gBAA8BjgB,EAAbkgB,cAAa,OAC/Hvf,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,yCAAyCG,SAAA,CAC5DC,eAACsT,KAAK,CAAChP,KAAK,mBACJ8B,KAAK,mBACLlG,UAAY+S,EAAO6xC,iBAAoB,0BAA4B,eACnEvxC,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,8BAKzEF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVC,eAAC2E,KAAM,CACLG,MAAM,UAENR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAGF,KCGIF,iBAAkB6C,aA5BI,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAiB1U,EAATggB,UAA0BhgB,EAAfigB,gBAA8BjgB,EAAbkgB,cAAa,OACzHvf,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SAAA,CACtDC,eAACsT,KAAK,CAAChP,KAAK,WACJ8B,KAAK,cACLlG,UAAY+S,EAAO8xC,YAAe,0BAA4B,eAC9DxxC,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,8BAKpEF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVC,eAAC2E,KAAM,CACLG,MAAM,UAENR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAGF,KC6HIF,I,kBAAAA,iBAAkB6C,aA7IjC,SAA8B5C,GAAc,IAAZC,EAACD,EAADC,EACxB8L,EADgC/L,EAALyD,MACT2K,OAAOswC,WACzBnuC,EAAYtQ,EAAE,iCACdk+C,EAAa,QAEnBx6C,EAA+BC,YAAS22C,GAAmB,CACzDzuC,UAAW,CAAC8L,GAAI7L,GAChBG,YAAa,iBAFRjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIvB8R,EAAwBC,YAAYumC,IAA7BqE,EAA4C1qC,YAAAH,EAAA,GAA/B,GACpBoH,EAAgCnH,YAAY5Z,IAArC+qD,EAA6DjxC,YAAAiH,EAAA,GAAxC,GAE5B,GAAIpZ,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAW/9C,SAClDO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACE,QAAQ,EAAMD,QAAQ,WAMtC,GAAIc,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAW/9C,SAAA,CACjDzH,QAAQC,IAAIsJ,GACbvB,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,sCAMd,IAAMklB,EAAUhjB,EAAKgjB,QAGrB,OAFAxsB,QAAQC,IAAIusB,GAGVxkB,gBAACo+C,GAA2B,CAC1Bn6C,KAAMugB,EACNg5B,WAAYA,EAAW/9C,SAAA,CAEvBC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,mCAAmCG,SAEhDC,eAACgU,KAAM,CACLC,cAAe,CAAC,EAEhBG,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ,IAAIuqC,EAAa,CACfrnC,GAAI7L,EACJq5C,YAAa1wC,EAAO0wC,aAGtBC,EAAsB,CAAEv5C,UAAW,CACjC8I,MAAOqqC,KAERhqC,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACPxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,kDAAoD,CACjEmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GAEJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACilD,GAA4B,CAC3BjyC,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRsL,UAAW7d,GACX,MAIR9B,eAACkH,KAAI,CAACX,MAAO3G,EAAE,6CAA6CG,SAE1DC,eAACgU,KAAM,CACHC,cAAe,CAAE6wC,iBAAkBhjD,EAAKgjB,QAAQggC,kBAEhD1wC,SAAU,SAACC,EAAM2V,GAAyB,IAArB1V,EAAa0V,EAAb1V,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ,IAAIuqC,EAAa,CACfrnC,GAAI7L,EACJo5C,iBAAkBzwC,EAAOywC,kBAG3BrG,EAAc,CAAEhzC,UAAW,CACzB8I,MAAOqqC,KAERhqC,MAAK,SAAAqV,GAAe,IAAZnoB,EAAImoB,EAAJnoB,KACPxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,4DAA8D,CAC3EmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GAEJ,EAAEvU,SAED,SAAAmqB,GAAA,IAAGlX,EAAYkX,EAAZlX,aAAcC,EAAMiX,EAANjX,OAAQoB,EAAM6V,EAAN7V,OAAQuL,EAAesK,EAAftK,gBAAiBC,EAAaqK,EAAbrK,cAAa,OAC9D7f,eAACklD,GAAkC,CACjClyC,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRsL,UAAW7d,GACX,QAMhB,KC9JaqjD,GAAgC7rD,YAAGC,QAAAC,YAAA,0sBAoCnC4rD,GAA8B9rD,YAAGI,QAAAF,YAAA,svBAyCjC8gB,GAAyBhhB,YAAGK,QAAAH,YAAA,gkBA8B5B6rD,GAA2B/rD,YAAGO,QAAAL,YAAA,+ZAuB9B8rD,GAA2BhsD,YAAGQ,QAAAN,YAAA,uXAuB9B+rD,GAA2BjsD,YAAGU,QAAAR,YAAA,wJCyB5BkG,qBAAkB6C,aA3JjC,SAA2B5C,GAAc,IAAZC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAExB0X,EADcrX,qBAAWxC,IACA6Z,WAEzBpP,EAAYtI,EAAM2K,OAAOswC,WACzBP,EAAa,cACb5tC,EAAYtQ,EAAE,uCACdw+B,EAAuBp+B,eAAC0N,GAAoB,CAChDzD,WAAW,MACXC,SAAS,mBAAkBnK,SACzBC,eAACyW,GAAS,CAACL,OAAM,uBAAAtH,OAAyBpD,EAAS,oBAAoBxL,UAAU,WAGrFoD,EAA0CC,YAAS4hD,GAA+B,CAChF15C,UAAW,CAAEC,UAAWA,KADnB9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAG7BuC,EAAiCC,YAAY0xC,IAAtCC,EAA+DzxC,YAAAH,EAAA,GAAzC,GAE7B,GAAIhS,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAY1f,qBAAsBA,EAAqBr+B,SAC9FC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,GAAIiC,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAY1f,qBAAsBA,EAAqBr+B,SAAA,CAC7FzH,QAAQC,IAAIsJ,GACb7B,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,IAAMklB,EAAUhjB,EAAKgjB,QACf8e,EAAqB9hC,EAAK8hC,mBAG9B,OAAKA,EAAmBx6B,MAAMjK,OAiB9Ba,eAAC0+C,GAA2B,CAC1Bn6C,KAAMugB,EACNg5B,WAAYA,EACZ1f,qBAAsBA,EAAqBr+B,SAE3CC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,uCACb8P,SAAUk0B,EAAmBl0B,SAC7BY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOmyB,EAAmBl0B,SAASgC,WAErCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB+xB,mBAAmBx6B,MAC9CsG,EAAWmC,EAAgB+xB,mBAAmBl0B,SAEpD,OAAOoC,EAAS3S,OACZ,CAGEykC,mBAAoB,CAClB7xB,WAAYH,EAAegyB,mBAAmB7xB,WAC9C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAegyB,mBAAmBx6B,OAAK4I,aAAKF,IACxDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,+BACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN6jC,EAAmBx6B,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACnCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKs6B,sBAAsBz9B,MADdyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,IADjBjO,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKuY,SAASlW,OAAOkP,IADfjO,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyBpD,EAAS,yBAAAoD,OAAwBvF,EAAKgO,IAAKxX,SACzEwJ,EAAKkyC,2BAFM5uC,gBAKhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAI,uBAAyBgB,EAAM2K,OAAOswC,WAAa,qBAAuB90C,EAAKgO,GAAGxX,SAC1FC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,oDACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CAAIwJ,EAAKs6B,sBAAsBz9B,KAAK,IAAEmD,EAAKsY,aAC3DzI,WAAYxZ,EAAE,yCACdgb,eAAgB4qC,EAChBlsC,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACjB,CAACC,MAAOwwC,GAA+B15C,UAAW,CAAEC,UAAWA,OAGvE,EAAE3L,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBA1BfyG,kBAfzBA,eA4CJ,aAxGpB7M,eAAC0+C,GAA2B,CAC1Bn6C,KAAMugB,EACNg5B,WAAYA,EACZ1f,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,mDAwGpB,KC9KamoC,GAAmBv1B,OAAaC,MAAM,CACjDoxB,sBAAuBrxB,OACpBG,SAAS/S,YAAE,uBACdiiB,UAAWrP,OACRG,SAAS/S,YAAE,uBACdkiB,QAAStP,OACNizC,WACH/7B,KAAMlX,SCiGO9S,iBAAkB6C,aAtFJ,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASkyB,EAAM51B,EAAN41B,OAAQ5V,EAAShgB,EAATggB,UAAW3M,EAAYrT,EAAZqT,aAAc6M,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiB3M,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQhO,EAAS1G,EAAT0G,UAAS,OACpI/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,wBACLlG,UAAY+S,EAAO4wB,sBAAyB,0BAA4B,eACxEtwB,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU+nB,wBAAwBt+B,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAClDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,wBAAwBqN,UAAU,OAAOvT,UAAU,4BAI5EI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO4O,UAAa,0BAA4B,eAC5DjG,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GACT8S,EAAc,YAAa9S,GAC3B6S,EAAgB,WAAW,EAC7B,EACA5D,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG3Dq1B,EAeD,GAdAv1B,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GACT8S,EAAc,UAAW9S,GACzB6S,EAAgB,WAAW,EAC7B,EACA5D,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,EAC9CxD,gBAAiBxc,EAAE,0CAErBI,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAKhEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,OACbC,aAAchV,EAAOqV,KACrB9wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,OAAQqG,EAAE7gB,OAAOkkB,cAC/B3J,EAAgB,QAAQ,GAAM,EAChC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAGzDI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OACN2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAACtG,SAEtCH,EAAE,yBAGF,KCiBIF,qBAAkB6C,aApGjC,SAA4B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAChCqI,EAAYtI,EAAM2K,OAAOswC,WACzBP,EAAa,cACb5tC,EAAYtQ,EAAE,2CACdyG,EAAS,uBAAAyI,OAA0BpD,EAAS,gBAElDpI,EAA+BC,YAAS+W,GAAwB,CAC9D7O,UAAW,CAAEC,UAAWA,KADnB9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGvB8R,EAAiCC,YAAYwxC,IAAtCK,EAA+D3xC,YAAAH,EAAA,GAAzC,GAE7B,GAAIhS,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SACxEC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,GAAIiC,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SAAA,CACvEzH,QAAQC,IAAIsJ,GACb7B,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,IAAM+f,EAAY7d,EACZgjB,EAAUhjB,EAAKgjB,QAErB,OACE9kB,eAAC0+C,GAA2B,CAC1BZ,WAAYA,EACZv5C,KAAMugB,EACNze,UAAWA,EAAUtG,SAErBO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEblQ,eAACgU,KAAM,CACLC,cAAe,CACb4vB,sBAAuB,GACvBhiB,UAAW,IAAI3e,KACfwmB,KAAM,IAERvV,iBAAkB4zB,GAClB3zB,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAGZyyC,EAAuB,CAAEj6C,UAAW,CAClC8I,MAAO,CACLuQ,QAASpZ,EACTm4B,sBAAuBxvB,EAAOwvB,sBAC9BhiB,UAAWvD,GAAejK,EAAOwN,WACjC6H,KAAMrV,EAAOqV,OAEdhV,eAAgB,CACf,CAACC,MAAOwwC,GAA+B15C,UAAW,CAAEC,UAAWA,OAElEkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB,IAAM6jD,EAAc7jD,EAAK4jD,uBAAuBE,iBAAiBruC,GACjElU,EAAQnB,KAAK,uBAAD4M,OAAwBpD,EAAS,sBAAAoD,OAAqB62C,IAClE9wC,KAAMC,QAASlV,EAAE,mDAAqD,CAClEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9DrU,eAAC6lD,GAAoB,CACnBtwB,QAAQ,EACR5V,UAAWA,EACX3M,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACQ,QAMrC,KCsBevT,I,GAAAA,iBAAkB6C,aAzHjC,SAA6B5C,GAAuB,IAArBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OACnCmU,EAAKnU,EAAM2K,OAAOwJ,GAClB7L,EAAYtI,EAAM2K,OAAOswC,WACzBP,EAAa,cACb5tC,EAAYtQ,EAAE,4CACdyG,EAAS,uBAAAyI,OAA0BpD,EAAS,gBAElDpI,EAA+BC,YAAS6hD,GAA6B,CACnE35C,UAAW,CAAE8L,GAAIA,EAAI7L,UAAWA,KAD3B9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGvB8R,EAA0BC,YAAYyxC,IAA/Bjd,EAAwDt0B,YAAAH,EAAA,GAAzC,GAGtB,GAAIhS,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SACxEC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,GAAIiC,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SAAA,CACvEzH,QAAQC,IAAIsJ,GACb7B,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,IAAM+f,EAAY7d,EACZgjB,EAAUhjB,EAAKgjB,QACfghC,EAAchkD,EAAK8jD,iBAIrB/jC,EAAY,KACZC,EAAU,KAQd,OAPIgkC,EAAYjkC,YACdA,EAAY,IAAI3e,KAAK4iD,EAAYjkC,YAE/BikC,EAAYhkC,UACdA,EAAU,IAAI5e,KAAK4iD,EAAYhkC,UAI/B9hB,eAAC0+C,GAA2B,CAC1BZ,WAAYA,EACZv5C,KAAMugB,EACNze,UAAWA,EAAUtG,SAErBO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEblQ,eAACgU,KAAM,CACLC,cAAe,CACb4vB,sBAAuBiiB,EAAYjiB,sBAAsBtsB,GACzDsK,UAAWA,EACXC,QAASA,EACT4H,KAAMo8B,EAAYp8B,MAEpBvV,iBAAkB4zB,GAClB3zB,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAM1C6O,EANaxN,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAKV6O,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGnBumB,EAAgB,CAAE58B,UAAW,CAC3B8I,MAAO,CACLgD,GAAIA,EACJssB,sBAAuBxvB,EAAOwvB,sBAC9BhiB,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,EACT4H,KAAMrV,EAAOqV,OAEdhV,eAAgB,CACf,CAACC,MAAOwwC,GAA+B15C,UAAW,CAAEC,UAAWA,OAElEkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,oDAAsD,CACnEmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9DrU,eAAC6lD,GAAoB,CACnBlmC,UAAWA,EACX3M,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACQ,QAMrC,KCvIa8yC,GAAsCzsD,YAAGC,QAAAC,YAAA,qlCCsIvCkG,I,eAAAA,iBAAkB6C,aArHjC,SAAgC5C,GAAc,IAAZC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAC7BqxB,EAAchxB,qBAAWxC,IACzB6Z,EAAa2Z,EAAY3Z,WACzB5J,EAAuBujB,EAAYvjB,qBAEnCqG,EAAKnU,EAAM2K,OAAOwJ,GAClB7L,EAAYtI,EAAM2K,OAAOswC,WACzBP,EAAa,cACb5tC,EAAYtQ,EAAE,+CACdq+C,EAAOj+C,eAAA,OAAKE,UAAU,sBAAqBH,SAC/CC,eAAC6G,GAAU,CAACR,UAAS,uBAAAyI,OAAyBpD,EAAS,oBAGzDpI,EAA0CC,YAASwiD,GAAqC,CACtFt6C,UAAW,CACTC,UAAWA,EACX6L,GAAIA,KAHD3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAO7B,GAAIzP,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAYG,KAAMA,EAAKl+C,SAC9DC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,GAAIiC,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAYG,KAAMA,EAAKl+C,SAAA,CAC7DzH,QAAQC,IAAIsJ,GACb7B,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,IAAMklB,EAAUhjB,EAAKgjB,QACf8gC,EAAmB9jD,EAAK8jD,iBACxBhjD,EAAUgjD,EAAiBhjD,QACjCtK,QAAQC,IAAIqK,GAEZ,IAAMojD,EAAqB,GAAAl3C,OAAMoB,EAAS,KAAApB,OAAI82C,EAAiB/hB,sBAAsBz9B,KAAI,MAAA0I,OAAKnD,KAAOi6C,EAAiB/jC,WAAWjW,OAAOkP,GAAW,KAEnJ,OAAKlY,EAAQwG,MAAMjK,OAcjBa,eAAC0+C,GAA2B,CAACn6C,KAAMugB,EAASg5B,WAAYA,EAAYG,KAAMA,EAAKl+C,SAC7EC,eAACiO,GAAW,CACViC,UAAW81C,EACXt2C,SAAU9M,EAAQ8M,SAClBY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO7O,EAAQ8M,SAASgC,WAE1BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBjP,QAAQwG,MACnCsG,EAAWmC,EAAgBjP,QAAQ8M,SAEzC,OAAOoC,EAAS3S,OACZ,CAGEyD,QAAS,CACPmP,WAAYH,EAAehP,QAAQmP,WACnC3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAehP,QAAQwG,OAAK4I,aAAKF,IAC7CpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBAHNiN,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN6C,EAAQwG,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACxBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAO,IAAIzI,KAAKqG,EAAKwD,KAAO,IAAMxD,EAAKq4C,aAAax0C,YAAYxB,OAAOsF,IAD1DrE,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKq4C,aAAaz0C,yBAAyBnF,qBAAqB5B,MADnDyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKq4C,aAAa95C,sBAAsB1B,MAD3ByG,kBAPFA,eAUJ,aA9DxBvM,gBAACo+C,GAA2B,CAACn6C,KAAMugB,EAASg5B,WAAYA,EAAYG,KAAMA,EAAKl+C,SAAA,CAC5EzH,QAAQC,IAAIsJ,GACb7B,eAACkH,KAAI,CAACX,MAAOy/C,EAAsBjmD,SACjCC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,4DAiEb,KCpIa4sC,GAAsBlzC,YAAGC,QAAAC,YAAA,6gBA+BzBizC,GAAqBnzC,YAAGI,QAAAF,YAAA,0SAmBxBkzC,GAAepzC,YAAGK,QAAAH,YAAA,uLAUlBmzC,GAAkBrzC,YAAGO,QAAAL,YAAA,uLAUrBozC,GAAkBtzC,YAAGQ,QAAAN,YAAA,oJCmGnBkG,qBAAkB6C,aAlJjC,SAAyB5C,GAAc,IAAZC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAEtB0X,EADcrX,qBAAWxC,IACA6Z,WAEzBpP,EAAYtI,EAAM2K,OAAOswC,WACzBP,EAAa,YACb5tC,EAAYtQ,EAAE,qCACdw+B,EAAuBp+B,eAAC0N,GAAoB,CAChDzD,WAAW,MACXC,SAAS,kBAAiBnK,SACxBC,eAACyW,GAAS,CAACL,OAAM,uBAAAtH,OAAyBpD,EAAS,kBAAkBxL,UAAU,WAGnFoD,EAA0CC,YAASipC,GAAqB,CACtE/gC,UAAW,CAAEqZ,QAASpZ,KADjB9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAG7BuC,EAAgCC,YAAY+4B,IAArCqZ,EAAqDlyC,YAAAH,EAAA,GAAhC,GAE5B,GAAIhS,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAY1f,qBAAsBA,EAAqBr+B,SAC9FC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,GAAIiC,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAY1f,qBAAsBA,EAAqBr+B,SAAA,CAC7FzH,QAAQC,IAAIsJ,GACb7B,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,IAAMklB,EAAUhjB,EAAKgjB,QACfohC,EAAmBpkD,EAAKokD,iBAI9B,OAHA5tD,QAAQC,IAAI2tD,GAGPA,EAAiB98C,MAAMjK,OAa1Ba,eAAC0+C,GAA2B,CAC1Bn6C,KAAMugB,EACNg5B,WAAYA,EACZ1f,qBAAsBA,EAAqBr+B,SAE3CC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,qCACb8P,SAAUw2C,EAAiBx2C,SAC3BY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOy0C,EAAiBx2C,SAASgC,WAEnCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBq0C,iBAAiB98C,MAC5CsG,EAAWmC,EAAgBq0C,iBAAiBx2C,SAElD,OAAOoC,EAAS3S,OACZ,CAGE+mD,iBAAkB,CAChBn0C,WAAYH,EAAes0C,iBAAiBn0C,WAC5C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAes0C,iBAAiB98C,OAAK4I,aAAKF,IACtDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,MAJFrF,kBAOlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNmmD,EAAiB98C,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACjCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKV,aADQgE,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKipB,WAAW5mB,OAAOkP,IADjBjO,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACwb,GAAgC,CAAC3C,kBAAmBtP,EAAKkS,wBAD5C5O,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAI,uBAAyBsJ,EAAY,mBAAqBnC,EAAKgO,GAAGxX,SAC1EC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,kDACduZ,eAAgBnZ,eAAA,KAAAD,SAAIwJ,EAAKV,cACzBuQ,WAAYxZ,EAAE,uCACdgb,eAAgBqrC,EAChB3sC,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACjB,CAACC,MAAO63B,GAAqB/gC,UAAW,CAAEqZ,QAASpZ,OAG3D,EAAE3L,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBA1BfyG,kBAVzBA,eAuCJ,aA9FtB7M,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAYv5C,KAAMugB,EAASsZ,qBAAsBA,EAAqBr+B,SAC7GC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,iDAkGlB,KCxGeF,qBAAkB6C,aAjDjC,SAA4B5C,GAAuH,IAApHC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAAS4P,EAAMtT,EAANsT,OAAgBD,GAAFrT,EAAN0U,OAAoB1U,EAAZqT,cAAc3M,EAAS1G,EAAT0G,UAAWyZ,EAAangB,EAAbmgB,cAAeC,EAAcpgB,EAAdogB,eAAcC,EAAArgB,EAAEsgB,6BAAqB,IAAAD,EAAC,SAAApP,GAAC,OAAEA,CAAC,EAAAoP,EAC3I,OACE1f,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,4BAIlEF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPC,eAACmT,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SACtDO,gBAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,eAAA,SAAOsE,KAAK,OAAO6b,IAAKL,EAAe5f,UAAU,oBAAoB4b,SAAUmE,IAC/EjgB,eAAA,SAAOE,UAAU,oBAAoBkgB,MAAOb,GAA0Bxf,SACnEggB,gBAObzf,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OACN2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAACtG,SAEtCH,EAAE,yBAKf,KCyFeF,qBAAkB6C,aApIjC,SAA2B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAC/BqI,EAAYtI,EAAM2K,OAAOswC,WACzBP,EAAa,cACb5tC,EAAYtQ,EAAE,yCACdyG,EAAS,uBAAAyI,OAA0BpD,EAAS,cAElDpI,EAAiCC,YAAS22C,GAAmB,CAC3DzuC,UAAW,CAAE8L,GAAI7L,KADX9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA6BC,YAAY64B,IAAlCyZ,EAA+CpyC,YAAAH,EAAA,GAA7B,GAGzB8C,EAAgCC,mBAAS,IAAGC,EAAA7C,YAAA2C,EAAA,GAArC8J,EAAQ5J,EAAA,GAAE6J,EAAW7J,EAAA,GACtBkJ,EAAgBY,iBAAO,MACvBX,EAAiBS,GAAY5gB,EAAE,yCAE/BqgB,EAAwB,SAACvC,GAC7BplB,QAAQC,IAAI,uBACZkoB,EAAY/C,EAAMrY,OAAOsb,MAAM,GAAGva,KACpC,EAEA,GAAIxE,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SACxEC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,GAAIiC,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SAAA,CACvEzH,QAAQC,IAAIsJ,GACb7B,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,IAAM+f,EAAY7d,EACZgjB,EAAUhjB,EAAKgjB,QAErB,OACE9kB,eAAC0+C,GAA2B,CAC1BZ,WAAYA,EACZv5C,KAAMugB,EACNze,UAAWA,EAAUtG,SAErBO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACgU,KAAM,CACLC,cAAe,CACbpL,YAAa,IAGfuL,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAIioB,GAEZ,IAAII,EAAY,CACdkE,QAASpZ,EACT7C,YAAawL,EAAOxL,YACpBgY,iBAAkBL,GAGhBM,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB3oB,QAAQC,IAAI0oB,EAAa5b,OAAOiN,QAChC,IAAI4O,EAAeD,EAAa5b,OAAOiN,OACvCha,QAAQC,IAAI2oB,GAEZN,EAAU3R,SAAWiS,EAErBilC,EAAmB,CAAE16C,UAAW,CAC9B8I,MAAOqM,GACNlM,eAAgB,CACf,CAACC,MAAO63B,GAAqB/gC,UAAW,CAACqZ,QAASpZ,OAErDkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,iDAAmD,CAChEmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,EAClB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAEA,IAAI6M,EAAOrB,EAAcsB,QAAQT,MAAM,GACnCQ,GAAQA,EAAKtc,KAAO,QACtBic,EAAOO,cAAcF,GACZA,GAAQA,EAAKtc,KAAO,SAC7BgQ,KAAMhT,MAAMjC,EAAE,qDAAsD,CAClEmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,KAEdO,KAAMhT,MAAMjC,EAAE,gCAAiC,CAC7CmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,GAElB,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAAComD,GAAmB,CAClBzmC,UAAWA,EACX3M,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRyL,cAAeA,EACfC,eAAgBA,EAChBE,sBAAuBA,EACvB5Z,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACO,QAMlC,KClJaozC,GAAkB7zC,OAAaC,MAAM,CAC9C5J,YAAa2J,OACVK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBCgDHF,qBAAkB6C,aAtCjC,SAAgC5C,GAA2D,IAAxDC,EAACD,EAADC,EAAYqT,GAAFtT,EAAP0D,QAAe1D,EAANsT,QAAgBD,GAAFrT,EAAN0U,OAAoB1U,EAAZqT,cAAc3M,EAAS1G,EAAT0G,UAC3E,OACE/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,8BAKpEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAEXH,EAAE,2BAMjB,KC4DeF,qBAAkB6C,aA/FjC,SAA4B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAClCmU,EAAKnU,EAAM2K,OAAOwJ,GAClB7L,EAAYtI,EAAM2K,OAAOswC,WACzBP,EAAa,YACb5tC,EAAYtQ,EAAE,0CACdyG,EAAS,uBAAAyI,OAA0BpD,EAAS,cAElDpI,EAA+BC,YAASkpC,GAAoB,CAC1DhhC,UAAW,CAAE8L,GAAIA,EAAIuN,QAASpZ,KADzB9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGvB8R,EAAyBC,YAAY84B,IAA9Be,EAA8C35B,YAAAH,EAAA,GAAhC,GAGrB,GAAIhS,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SACxEC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,GAAIiC,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SAAA,CACvEzH,QAAQC,IAAIsJ,GACb7B,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,IAAM+f,EAAY7d,EACZgjB,EAAUhjB,EAAKgjB,QACfghC,EAAchkD,EAAKwkD,gBAEzB,OACEtmD,eAAC0+C,GAA2B,CAC1BZ,WAAYA,EACZv5C,KAAMugB,EACNze,UAAWA,EAAUtG,SAErBO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEflQ,eAACgU,KAAM,CACLC,cAAe,CACbpL,YAAai9C,EAAYj9C,aAE3BsL,iBAAkBkyC,GAClBjyC,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAEZy6B,EAAe,CAAEjiC,UAAW,CAC1B8I,MAAO,CACLgD,GAAIA,EACJ1O,YAAawL,EAAOxL,cAErB6L,eAAgB,CACjB,CAACC,MAAO63B,GAAqB/gC,UAAW,CAAEqZ,QAASpZ,OAEpDkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,kDAAoD,CACjEmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAA8CC,GAAnBjG,EAAb6S,cAA8B7S,EAAf4S,gBAAuB5S,EAANiG,QAAQoB,EAAMrH,EAANqH,OAAM,OAC9DrU,eAACumD,GAAuB,CACtB5mC,UAAWA,EACX3M,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACW,QAMtC,KC3BevT,I,kBAAAA,iBAAkB6C,aA5DjC,SAAoD5C,GAAuD,IAApDC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAOrD,EAAQJ,EAARI,SAAQwuB,EAAA5uB,EAAE6uB,oBAAY,IAAAD,GAAMA,EAC9F7iB,EAAYtI,EAAM2K,OAAOswC,WAE/B/6C,EAAiCC,YAAS22C,GAAmB,CAC3DzuC,UAAW,CAAE8L,GAAI7L,KADX9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB,GAAIF,EAAS,OAAO5B,eAAA,KAAAD,SAAIH,EAAE,+BAE1B,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAAA,KAAAD,SAAIH,EAAE,8BAGf,IAAMklB,EAAUhjB,EAAKgjB,QAErB,OACE9kB,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAOue,EAAQja,UAAY,IAAMia,EAAQha,SAAS/K,SAC7DO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCyuB,EACAxuB,eAAC0N,GAAoB,CAACzD,WAAW,OACXC,SAAS,yCAAwCnK,SACrEC,eAAC6G,GAAU,CAACR,UAAS,uBAAAyI,OAAyBpD,EAAS,8CAGzD1L,eAACm/C,GAAqB,IAErB3wB,EAQC,GAPFxuB,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,yCAAwCnK,SACrEC,eAACyW,GAAS,CACRL,OAAM,uBAAAtH,OAAyBpD,EAAS,6CACxCxL,UAAU,gBAOpBI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACbA,IAEHO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACu+C,GAAgB,CAACh6C,KAAMugB,IACxB9kB,eAACw+C,GAAW,CACVV,WAAW,sCACXpyC,UAAWA,gBAQ3B,KC/Ea86C,GAAyDltD,YAAGC,QAAAC,YAAA,ikBA0B5DitD,GAAwDntD,YAAGI,QAAAF,YAAA,6jBA+B3D8gB,GAAyBhhB,YAAGK,QAAAH,YAAA,8aAoB5BktD,GAAqDptD,YAAGO,QAAAL,YAAA,qRAUxDmtD,GAAqDrtD,YAAGQ,QAAAN,YAAA,qRAUxDotD,GAAqDttD,YAAGU,QAAAR,YAAA,0NCsEtDkG,qBAAkB6C,aAjJjC,SAAgD5C,GAAyB,IAAtBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OACvDsI,EAAYtI,EAAM2K,OAAOswC,WACzBnuC,EAAYtQ,EAAE,gEAEpB0D,EAA4CC,YAASijD,GAAwD,CAC3G/6C,UAAW,CAAEqZ,QAASpZ,KADhB9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAG9BuC,EAAuDC,YAAY+yC,IAA5DC,EAA+G9yC,YAAAH,EAAA,GAAnE,GAEnD,GAAIhS,EAAS,OACX5B,eAAC8mD,GAA2C,CAAA/mD,SAC1CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SAACC,eAAA,KAAAD,SAAIH,EAAE,qCAKvB,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEV7B,eAAC8mD,GAA2C,CAAA/mD,SAC1CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SAACC,eAAA,KAAAD,SAAIH,EAAE,oCAMzB,IAAImnD,EAAqBjlD,EAAKklD,wCAI9B,OAAKD,EAAmB39C,MAAMjK,OAa5Ba,eAAC8mD,GAA2C,CAAA/mD,SAC1CC,eAACiO,GAAW,CACViC,UAAWA,EACXI,aAAa,EACbZ,SAAUq3C,EAAmBr3C,SAC7BG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOs1C,EAAmBr3C,SAASgC,WAErCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBm1C,wCAAwC59C,MACnEsG,EAAWmC,EAAgBm1C,wCAAwCt3C,SAEzE,OAAOoC,EAAS3S,OACZ,CAGE4nD,mBAAoB,CAClBh1C,WAAYH,EAAeo1C,wCAAwCj1C,WACnE3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeo1C,wCAAwC59C,OAAK4I,aAAKF,IAC7EpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,yBACpBI,eAACiS,KAAMC,UAAS,MANFrF,kBASlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNgnD,EAAmB39C,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACnCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKkL,MADQ5H,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKiL,OADQ3H,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK0iB,eADQpf,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKmqB,4BAA4BttB,MADpByG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKV,YAAYo+C,QAAQ,aAAc,UAD1Bp6C,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyB1L,EAAM2K,OAAOswC,WAAU,+CAAAvvC,OAA8CvF,EAAKgO,IAAKxX,SAC9GC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAAA,UACEE,UAAU,2BACVqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,6EACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CAAGC,eAAA,SAAOuJ,EAAKmqB,4BAA4BttB,KAAK,IAAEmD,EAAK0iB,cAAc,IAACjsB,eAAA,SAAMuJ,EAAKV,eACjGuQ,WAAYxZ,EAAE,kEACdgb,eAAgBisC,EAChBvtC,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACjB,CAACC,MAAO6xC,GAAwD/6C,UAAW,CACzEqZ,QAASpZ,OAInB,EAAE3L,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBA7BfyG,kBAhBzBA,eAgDJ,aArGtB7M,eAAC8mD,GAA2C,CAAA/mD,SAC1CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,4EAyGlB,KCnKasnD,GAAqD10C,OAAaC,MAAM,CACnFihB,4BAA6BlhB,OAC1BG,SAAS/S,YAAE,uBACd6U,KAAMjC,OACHG,WACAC,WACAC,IAAI,KACJC,IAAI,MACP0B,MAAOhC,OACJG,WACAC,WACAC,IAAI,GACJC,IAAI,IACPqM,OAAQ3M,OACLG,SAAS/S,YAAE,uBACdiJ,YAAa2J,SC+EA9S,iBAAkB6C,aAlFmB,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAY+f,GAAFhgB,EAAP0D,QAAkB1D,EAATggB,WAAW3M,EAAYrT,EAAZqT,aAAcC,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UAAS,OAC3G/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,OACLlG,UAAY+S,EAAOwB,KAAQ,0BAA4B,eACvDlB,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAGzDF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,QACLlG,UAAY+S,EAAOuB,MAAS,0BAA4B,eACxDjB,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,6BAI5DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,SACLlG,UAAY+S,EAAOkM,OAAU,0BAA4B,eACzD5L,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,0BAG3DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,8BACLlG,UAAY+S,EAAOygB,4BAA+B,0BAA4B,eAC9EngB,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU+V,8BAA8BtsB,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACxDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,8BAA8BqN,UAAU,OAAOvT,UAAU,6BAIlFF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,+BAKpEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAEXH,EAAE,2BAIJ,KCsBIF,qBAAkB6C,aA/FjC,SAAkD5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAChDqI,EAD8D/L,EAALyD,MACvC2K,OAAOswC,WACzBh4C,EAAS,uBAAAyI,OAA0BpD,EAAS,yCAElDpI,EAAiCC,YAAS+W,IAAlC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACxB8R,EAAoDC,YAClD6yC,IADKS,EAENpzC,YAAAH,EAAA,GAF+C,GAIhD,GAAIhS,EACF,OACE5B,eAAC8mD,GAA2C,CAACt4B,cAAc,EAAKzuB,SAC9DC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,oEAAoEG,SACjFC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,mCAOb,GAAIiC,EACF,OACE7B,eAAC8mD,GAA2C,CAACt4B,cAAc,EAAKzuB,SAC9DC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,oEAAoEG,SACjFC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,8EAOb,IAAM+f,EAAY7d,EAElB,OACE9B,eAAC8mD,GAA2C,CAACt4B,cAAc,EAAKzuB,SAC9DC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,oEAAoEG,SACjFC,eAACgU,KAAM,CACLC,cAAe,CACbyf,4BAA6B,GAC7Bjf,MAAM,IAAIvR,MAAOqC,cACjBiP,OAAO,IAAItR,MAAOgR,WAAa,EAC/BiL,OAAQ,GACRtW,YAAa,IAEfsL,iBAAkB+yC,GAClB9yC,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAEZk0C,EAA0C,CAAE17C,UAAW,CACrD8I,MAAO,CACLuQ,QAASpZ,EACTyT,OAAQ9K,EAAO8K,OACf1K,KAAMJ,EAAOI,KACbD,MAAOH,EAAOG,MACdkf,4BAA6Brf,EAAOqf,4BACpC7qB,YAAawL,EAAOxL,cAErB6L,eAAgB,CACf,CAACC,MAAO6xC,GAAwD/6C,UAAW,CAACqZ,QAASpZ,OAExFkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,4EAA8E,CAC3FmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAcjG,EAANqH,OAAM,OAC9BrU,eAAConD,GAA2C,CAC1CznC,UAAWA,EACX3M,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IAC+B,OAM1D,KCOevT,I,SAAAA,iBAAkB6C,aApGjC,SAAmD5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAC1DsI,EAAYtI,EAAM2K,OAAOswC,WACzBgJ,EAA2CjkD,EAAM2K,OAAOwJ,GACxDlR,EAAS,uBAAAyI,OAA0BpD,EAAS,yCAC5CwE,EAAYtQ,EAAE,qEAEpB0D,EAAiCC,YAASkjD,GAAuD,CAAEh7C,UAAW,CAC5G8L,GAAI8vC,KADEzlD,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAuDC,YACrD8yC,IADKW,EAENvzC,YAAAH,EAAA,GAFkD,GAInD,GAAIhS,EACF,OACE5B,eAAC8mD,GAA2C,CAACt4B,cAAc,EAAKzuB,SAC9DC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,mCAOb,GAAIiC,EACF,OACE7B,eAAC8mD,GAA2C,CAACt4B,cAAc,EAAKzuB,SAC9DC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,8EAOb,IAAM+f,EAAY7d,EACZmS,EAAgBnS,EAAKylD,uCAE3B,OACEvnD,eAAC8mD,GAA2C,CAACt4B,cAAc,EAAKzuB,SAC9DC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACbyf,4BAA6Bzf,EAAcyf,4BAA4Bnc,GACvE9C,KAAMR,EAAcQ,KACpBD,MAAOP,EAAcO,MACrB2K,OAAQlL,EAAckL,OACtBtW,YAAaoL,EAAcpL,aAE7BsL,iBAAkB+yC,GAClB9yC,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAEZq0C,EAA6C,CAAE77C,UAAW,CACxD8I,MAAO,CACLgD,GAAI8vC,EACJloC,OAAQ9K,EAAO8K,OACf1K,KAAMJ,EAAOI,KACbD,MAAOH,EAAOG,MACdkf,4BAA6Brf,EAAOqf,4BACpC7qB,YAAawL,EAAOxL,cAErB6L,eAAgB,CACf,CAACC,MAAO6xC,GAAwD/6C,UAAW,CAACqZ,QAASpZ,OAExFkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,6EAA+E,CAC5FmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAcjG,EAANqH,OAAM,OAC9BrU,eAAConD,GAA2C,CAC1CznC,UAAWA,EACX3M,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IAC+B,OAM1D,KCpHau0C,GAA6BluD,YAAGC,QAAAC,YAAA,s+BA6GhC8gB,GAAyBhhB,YAAGI,QAAAF,YAAA,40BA+C5BiuD,GAAyBnuD,YAAGK,QAAAH,YAAA,qLC5G1BkG,qBAAkB6C,aApCjC,SAA4B5C,GAAIA,EAADC,EAAqE,IAE9F8nD,EAF4BtkD,EAAKzD,EAALyD,MAAgBrD,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQqhD,EAAAzhD,EAAEmlB,eAAO,IAAAs8B,EAAC,CAAC,EAACA,EAAAlD,EAAAv+C,EAAEy+B,4BAAoB,IAAA8f,EAAC,GAAEA,EACvFxyC,EAAYtI,EAAM2K,OAAOswC,WAM/B,OAJIv5B,IACF4iC,EAAa5iC,EAAQC,UAIrB/kB,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAOmhD,EAAW3nD,SAC7BC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCq+B,MAGN99B,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACbA,IAEHO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACu+C,GAAgB,CAACh6C,KAAMugB,IAExB9kB,eAACw+C,GAAW,CACVV,WAAW,WACXpyC,UAAWA,gBAQ3B,KCgEehM,qBAAkB6C,aA5FjC,SAAwB5C,GAAmC,IAAhCC,EAACD,EAADC,EAAGoe,EAAQre,EAARqe,SAAU5a,EAAKzD,EAALyD,MAChCsI,GAD8C/L,EAAP0D,QAC3BD,EAAM2K,OAAOswC,YACzBnuC,EAAYtQ,EAAE,oCACdw+B,EAAuB99B,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CAC1CC,eAACm/C,GAAqB,IACtBn/C,eAACyW,GAAS,CAACL,OAAM,uBAAAtH,OAAyBpD,EAAS,iBAAiBxL,UAAU,YAGhFoD,EAA4CC,YAASikD,GAA4B,CAC/E/7C,UAAW,CAACC,UAAWA,GACvBG,YAAa,iBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAM9B,GAAIzP,EAAS,OACX5B,eAAC2nD,GAAmB,CAACvpB,qBAAsBA,EAAqBr+B,SAC9DC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,qCAMd,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEV7B,eAAC2nD,GAAmB,CAACvpB,qBAAsBA,EAAqBr+B,SAC9DC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,oCAQhBvB,aAAaC,QAAQC,EAAKvD,6BAA8BgjB,EAASoH,UACjE,IAAIE,EAAkBxjB,EAAKwjB,gBACrBR,EAAUhjB,EAAKgjB,QAGrB,OAAKQ,EAAgBlc,MAAMjK,OAazBa,eAAC2nD,GAAmB,CAAC7iC,QAASA,EAASsZ,qBAAsBA,EAAqBr+B,SAChFC,eAACiO,GAAW,CACViC,UAAWA,EACXR,SAAU4V,EAAgB5V,SAC1BY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO6T,EAAgB5V,SAASgC,WAElCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgByT,gBAAgBlc,MAC3CsG,EAAWmC,EAAgByT,gBAAgB5V,SAEjD,OAAOoC,EAAS3S,OACZ,CAGEmmB,gBAAiB,CACfvT,WAAYH,EAAe0T,gBAAgBvT,WAC3C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe0T,gBAAgBlc,OAAK4I,aAAKF,IACrDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFC,eAACulB,GAAmB,CAACnB,SAAUkB,QAxCjCtlB,eAAC2nD,GAAmB,CAAC7iC,QAASA,EAASsZ,qBAAsBA,EAAqBr+B,SAChFC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,gDAyClB,KCrCeF,iBAAkB6C,aAzDH,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAG+f,EAAShgB,EAATggB,UAAW3M,EAAYrT,EAAZqT,aAAcC,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UAAS,OAC5E/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0CAA0CG,SAAA,CAC7DO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,WACLlG,UAAY+S,EAAOwR,SAAY,0BAA4B,eAC3DlR,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0CAATiN,gBACrB8S,EAAUhC,WAAWvU,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACrCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,wBAE3DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iCAAiCG,SAAA,CACpDC,eAACsT,KAAK,CAACG,UAAU,SACXrN,KAAK,sBACLlG,UAAY+S,EAAOyc,oBAAuB,0BAA4B,eACtEnc,aAAa,MAAKxT,SAErB4f,EAAUiP,qBAAqBxlB,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC/CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,MAG3D7M,eAACwT,KAAY,CAACpN,KAAK,sBAAsBqN,UAAU,OAAOvT,UAAU,wBAEtEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,UACLlG,UAAY+S,EAAOkI,QAAW,0BAA4B,eAC1D5H,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,2BAG5DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAETH,EAAE,2BAIN,KC6EIF,qBAAkB6C,aAjIjC,SAA0B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAC/Bg7C,EAAaj7C,EAAM2K,OAAOswC,WAC1BP,EAAa,WACb5tC,EAAYtQ,EAAE,wCACdyG,EAAS,uBAAAyI,OAA0BuvC,EAAU,aAEnD/6C,EAAiCC,YAAS+W,GAAwB,CAC9D7O,UAAW,CACTC,UAAW2yC,KAFTz8C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAMxB8R,EAAwBC,YAAY4zC,GAAwB,CAC1D,GADKG,EAEL7zC,YAAAH,EAAA,GAFkB,GAMpB,GAAIhS,EACF,OAAO5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SAC7EC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,qCAMhB,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SAC7EC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,oCAMhB,IAAMklB,EAAUhjB,EAAKgjB,QACfkJ,EAAkBlJ,EAAQ83B,kBAAoB93B,EAAQ83B,kBAAkBrlC,GAAK,KAC7EqX,EAAuB9sB,EAAK8sB,qBAC5Bi5B,EAAoBj5B,GAAwBA,EAAqBxlB,OAASwlB,EAAqBxlB,MAAM,GAAGG,KAAKgO,GAGnH,OACEvX,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAYv5C,KAAMugB,EAASze,UAAWA,EAAUtG,SACvFC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SAOrBC,eAACgU,KAAM,CACLC,cAAe,CACbyb,oBAAqBm4B,EACrBpjC,SAAUuJ,EACV7S,QAAS,IAGX/G,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZuzC,EAAc,CAAEn8C,UAAW,CACzB8I,MAAO,CACLuQ,QAASu5B,EACT3uB,oBAAqBrb,EAAOqb,oBAC5BjL,SAAWpQ,EAAOoQ,SAAYpQ,EAAOoQ,SAAW,KAChDtJ,QAAS9G,EAAO8G,UAEjBzG,eAAgB,KAElBE,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,8CAAgD,CAC7DmV,SAAUF,KAAMG,SAASC,eAE7B5R,EAAQnB,KAAK,0BAA4BJ,EAAKgmD,qBAAqBhiC,eAAevO,IAClFjD,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQoV,EAAUzc,EAAVyc,WAAY7J,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC1E7f,eAAC+nD,GAAqB,CACpBpoC,UAAW7d,EACXkR,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRoV,WAAYA,EACZ7J,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GAEW,OAyBpC,K,+DCnIM2hD,GAAsB,SAAA95C,GAAAC,aAAA65C,EAAA95C,GAAA,IAAAE,EAAAC,aAAA25C,GAAA,SAAAA,IAAA,IAAA15C,EAAAC,aAAA,KAAAy5C,GAAA,QAAAx5C,EAAAtP,UAAAC,OAAAsP,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAAzP,UAAAyP,GA4BvB,OA5BuBL,EAAAF,EAAAQ,KAAAC,MAAAT,EAAA,OAAAU,OAAAL,KASxBM,eAAiB,WAEf,IAAIC,EACDC,SAASC,iBAAmBD,SAASC,gBAAgBF,WACtDC,SAASE,KAAKH,UACZI,EACDH,SAASC,iBAAmBD,SAASC,gBAAgBE,cACtDH,SAASE,KAAKC,aACZC,EACFJ,SAASC,gBAAgBG,cAAgBC,OAAOC,YAElD,GADuBC,KAAKC,KAAKT,EAAYK,IAAiBD,EACxC,CACpB,IAAMM,EAAWpB,EAAKqB,MAAMD,SACxBA,GACEA,EAASE,aACXtB,EAAKqB,MAAME,YAGjB,CACF,EAACvB,CAAA,CAqCA,OArCAwB,aAAAk4C,EAAA,EAAAj4C,IAAA,oBAAA5N,MA3BD,WACEmN,OAAOU,iBAAiB,SAAU3Q,KAAK0P,eACzC,GAAC,CAAAgB,IAAA,uBAAA5N,MAED,WACEmN,OAAOW,oBAAoB,SAAU5Q,KAAK0P,eAC5C,GAAC,CAAAgB,IAAA,SAAA5N,MAuBD,WACE,IAAMvC,EAAIP,KAAKsQ,MAAM/P,EACfiQ,EAAaxQ,KAAKsQ,MAAME,WACxBH,EAAWrQ,KAAKsQ,MAAMD,SACtB3P,EAAWV,KAAKsQ,MAAM5P,SAG5B,OACEO,gBAAA,OAAAP,SAAA,CACEC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,MAGLC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACX2P,EACDA,EAASE,YACR5P,eAACkH,KAAI,CAAAnH,SACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAC2E,KAAM,CACLG,MAAM,YACNF,SAAO,EACP6L,QAASZ,EAAW9P,SAEnBH,EAAE,2BAITI,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,wBAbpB,SAmB1B,KAACooD,CAAA,CAjEuB,CAASt3C,aAoErCs3C,GAAuBr3C,aAAe,CACpCd,WAAY,SAAAe,GAAC,OAAEA,CAAC,GAGHlR,qBAAkBsoD,ICVlBtoD,I,eAAAA,iBAAkB6C,aAlDjC,SAAyB5C,GAAuD,IAApDC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAOrD,EAAQJ,EAARI,SAAQwuB,EAAA5uB,EAAE6uB,oBAAY,IAAAD,GAAMA,EACnE7iB,EAAYtI,EAAM2K,OAAOswC,WAE/B/6C,EAAiCC,YAAS22C,GAAmB,CAC3DzuC,UAAW,CAAE8L,GAAI7L,KADX9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB,GAAIF,EAAS,OAAO5B,eAAA,KAAAD,SAAIH,EAAE,+BAE1B,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAAA,KAAAD,SAAIH,EAAE,8BAGf,IAAMklB,EAAUhjB,EAAKgjB,QAErB,OACE9kB,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAOue,EAAQja,UAAY,IAAMia,EAAQha,SAAS/K,SAC7DC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyuB,EACAxuB,eAAC6G,GAAU,CAACR,UAAS,uBAAAyI,OAAyBpD,EAAS,aAEvDpL,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACm/C,GAAqB,IACtBn/C,eAACyW,GAAS,CAACL,OAAM,uBAAAtH,OAAyBpD,EAAS,cAAcxL,UAAU,gBAKnFI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACbA,IAEHO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACu+C,GAAgB,CAACh6C,KAAMugB,IACxB9kB,eAACw+C,GAAW,CACVV,WAAW,QACXpyC,UAAWA,gBAQ3B,KCpEau8C,GAA0B3uD,YAAGC,QAAAC,YAAA,6jBA0B7B0uD,GAAyB5uD,YAAGI,QAAAF,YAAA,uHAW5B2uD,GAAsB7uD,YAAGK,QAAAH,YAAA,yKAUzB4uD,GAAsB9uD,YAAGO,QAAAL,YAAA,yKAUzB6uD,GAAsB/uD,YAAGQ,QAAAN,YAAA,yICzD/B,SAASoO,GAAyB8D,GACvC,IAAIzD,EAAY,CACZ6c,QAASpZ,GAIT48C,EAAWjqD,aAAa0E,QAAQxE,EAAKzC,mCAMzC,OAJAmM,EAAUqgD,SAAWA,EAErBhwD,QAAQC,IAAI0P,GAELA,CACT,CCkKevI,qBAAkB6C,aAlJjC,SAAqB5C,GAAyB,IAAtBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAClCsT,EAA8BC,mBAAStY,aAAa0E,QAAQxE,EAAKzC,oCAAsC,cAAa8a,EAAA7C,YAAA2C,EAAA,GAA/G4xC,EAAQ1xC,EAAA,GAAE2xC,EAAW3xC,EAAA,GAErBvY,aAAa0E,QAAQxE,EAAKzC,oCAC7BuC,aAAaC,QAAQC,EAAKzC,kCAAmC,cAG/D,IACMoV,EADczN,qBAAWxC,IACUiQ,qBAEnCxF,EAAYtI,EAAM2K,OAAOswC,WAE/B/6C,EAAqDC,YAAS0kD,GAAyB,CACrFx8C,UAAW7D,GAAyB8D,KAD9B9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAAW0F,EAAOzT,EAAPyT,QAGzCnD,EAA4BC,YAAYw0C,IAAjCG,EAAqDz0C,YAAAH,EAAA,GAApC,GAExB,GAAIhS,EAAS,OACX5B,eAACyoD,GAAgB,CAAA1oD,SACfC,eAAA,KAAAD,SAAIH,EAAE,iCAIV,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEV7B,eAACyoD,GAAgB,CAAA1oD,SACfC,eAAA,KAAAD,SAAIH,EAAE,gCAKZ,IAAI8oD,EAAQ5mD,EAAK6mD,aAEjB,OACEroD,gBAACmoD,GAAgB,CAAA1oD,SAAA,CACfC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPC,eAAA,OAAKE,UAAU,mBAAkBH,SAC/BO,gBAACqE,KAAOsB,KAAI,CAAAlG,SAAA,CACVC,eAAC2E,KAAM,CAACG,MAAqB,eAAbwjD,EAA6B,UAAW,YAChDzjD,KAAK,GACL4L,QAAS,WACP83C,EAAY,cACZlqD,aAAaC,QAAQC,EAAKzC,kCAAmC,cAC7Dib,EAAQnP,GAAyB8D,GACnC,EACP3L,SACEH,EAAE,wCAELI,eAAC2E,KAAM,CAACG,MAAqB,gBAAbwjD,EAA8B,UAAW,YACjDzjD,KAAK,GACL3E,UAAU,OACVuQ,QAAS,WACP83C,EAAY,eACZlqD,aAAaC,QAAQC,EAAKzC,kCAAmC,eAC7Dib,EAAQnP,GAAyB8D,GACnC,EACP3L,SACEH,EAAE,kDAMbI,eAACgoD,GAAsB,CACrBt4C,SAAUg5C,EAAMh5C,SAChBG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOi3C,EAAMh5C,SAASgC,WAExBC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB82C,aAAav/C,MACxCsG,EAAWmC,EAAgB82C,aAAaj5C,SAE9C,OAAOoC,EAAS3S,OACZ,CAGEwpD,aAAc,CACZ52C,WAAYH,EAAe+2C,aAAa52C,WACxC3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe+2C,aAAav/C,OAAK4I,aAAKF,IAClDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAED2oD,EAAMt/C,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACtBjJ,gBAAC4G,KAAI,CAAAnH,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNwJ,EAAKq/C,OAAU5oD,eAACuI,KAAK,CAACzD,MAAM,SAAS5E,UAAU,cAAaH,SAAEH,EAAE,oBAA6B,GAC/FI,eAAA,OAAKwM,wBAAyB,CAACC,OAAQC,KAAUC,SAASpD,EAAKmgB,YAEjEppB,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAAC2E,KAAM,CACLG,MAAM,SACND,KAAK,KACL3E,UAAU,cACV0E,SAAO,EACP6L,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,8CACduZ,eAAgBnZ,eAAA,KAAAD,SAAGC,eAAA,OAAKwM,wBAAyB,CAACC,OAAQlD,EAAKmgB,UAC/DtQ,WAAYxZ,EAAE,mCACdgb,eAAgB4tC,EAChBlvC,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAACC,MAAOszC,GAAyBx8C,UAAW7D,GAAyB8D,OAI7E,EAAE3L,SAEFC,eAACmG,KAAI,CAACC,KAAK,cAEbpG,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyB1L,EAAM2K,OAAOswC,WAAU,gBAAAvvC,OAAevF,EAAKgO,IAAKxX,SAC/EC,eAAC2E,KAAM,CACLG,MAAM,YACND,KAAK,KACL3E,UAAU,mBACV0E,SAAO,EAAA7E,SAENH,EAAE,oBAGPI,eAAA,SAAOE,UAAU,8BAA6BH,SAAE4L,KAAOpC,EAAKipB,WAAW5mB,OAAOsF,KAC7E3H,EAAKs/C,OAAO9jC,SAAS,IAAC/kB,eAAA,cAEpB,QAKjB,KC/FeN,iBAAkB6C,aA3DT,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcqB,EAAM1U,EAAN0U,OAAgBuL,GAAFjgB,EAANsT,OAAuBtT,EAAfigB,iBAAiBC,EAAalgB,EAAbkgB,cAAexZ,EAAS1G,EAAT0G,UAAS,OAC5G/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACrCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,OACbC,aAAchV,EAAOqV,KACrB9wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPtG,EAAgB,QAAQ,GACxBC,EAAc,OAAQqG,EAAE7gB,OAAOkkB,aACjC,IAEFvpB,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,4BAIzDF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,SACLwnB,QAASvZ,EAAOu0C,SAChB5oD,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,uBAEnDI,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,kBAK9CnT,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAEXH,EAAE,2BAIJ,KCsBIF,qBAAkB6C,aAxEjC,SAAuB5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAEhCklD,EAAWjqD,aAAa0E,QAAQxE,EAAKzC,mCACpCwsD,GACHjqD,aAAaC,QAAQC,EAAKzC,kCAAmC,cAG/D,IAAM4P,EAAYtI,EAAM2K,OAAOswC,WACzBh4C,EAAS,uBAAAyI,OAA0BpD,EAAS,UAC5CwE,EAAYtQ,EAAE,qCAEpBgU,EAAkBC,YAChBs0C,IADKW,EAEN/0C,YAAAH,EAAA,GAFa,GAId,OACE5T,eAACyoD,GAAgB,CAACj6B,cAAc,EAAKzuB,SACnCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACb20C,QAAQ,EACRl/B,KAAM,IAGRtV,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAEZ61C,EAAQ,CAAEr9C,UAAW,CACnB8I,MAAO,CACLuQ,QAASpZ,EACT48C,SAAUA,EACVM,OAAQv0C,EAAOu0C,OACfl/B,KAAMrV,EAAOqV,OAEdhV,eAAgB,CACf,CAACC,MAAOszC,GAAyBx8C,UAAW7D,GAAyB8D,OAExEkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,6CAA+C,CAC5DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC+oD,GAAe,CACd/1C,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRuL,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACG,OAM9B,KCkBevT,qBAAkB6C,aAxFjC,SAAwB5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAG/BsI,EAAYtI,EAAM2K,OAAOswC,WACzB2K,EAAS5lD,EAAM2K,OAAOwJ,GACtBlR,EAAS,uBAAAyI,OAA0BpD,EAAS,UAC5CwE,EAAYtQ,EAAE,sCAEpB0D,EAAiCC,YAAS2kD,GAAwB,CAChEz8C,UAAW,CAAE8L,GAAIyxC,KADXpnD,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAqBC,YACnBu0C,IADKa,EAENl1C,YAAAH,EAAA,GAFgB,GAIjB,GAAIhS,EAAS,OACX5B,eAACyoD,GAAgB,CAAA1oD,SACfC,eAAA,KAAAD,SAAIH,EAAE,iCAIV,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEV7B,eAACyoD,GAAgB,CAAA1oD,SACfC,eAAA,KAAAD,SAAIH,EAAE,gCAKZ,IAAM8pB,EAAO5nB,EAAKonD,YAElB,OACElpD,eAACyoD,GAAgB,CAACj6B,cAAc,EAAKzuB,SACnCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACb20C,OAAQl/B,EAAKk/B,OACbl/B,KAAMA,EAAKA,MAGbtV,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAEZg2C,EAAW,CAAEx9C,UAAW,CACtB8I,MAAO,CACLgD,GAAIyxC,EACJJ,OAAQv0C,EAAOu0C,OACfl/B,KAAMrV,EAAOqV,OAEdhV,eAAgB,CACf,CAACC,MAAOszC,GAAyBx8C,UAAW7D,GAAyB8D,OAExEkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,8CAAgD,CAC7DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC+oD,GAAe,CACd/1C,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRuL,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACG,OAM9B,KC/DevT,I,GAAAA,iBAAkB6C,aA9BjC,SAA0B5C,GAAIA,EAADC,EAA4C,IAAzCwD,EAAKzD,EAALyD,MAAgBrD,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQqhD,EAAAzhD,EAAEmlB,eAAO,IAAAs8B,EAAC,CAAC,EAACA,EAC5D11C,EAAYtI,EAAM2K,OAAOswC,WAE/B,OACEr+C,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAOue,EAAQC,SAAShlB,SACnCC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAACm/C,GAAqB,QAG1B7+C,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACbA,IAEHO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACu+C,GAAgB,CAACh6C,KAAMugB,IACxB9kB,eAACw+C,GAAW,CACVV,WAAW,SACXpyC,UAAWA,gBAQ3B,KC5Cay9C,GAA2B7vD,YAAGC,QAAAC,YAAA,iyBC8C5BkG,qBAAkB6C,aAnCjC,SAA2B5C,GAA6B,IAA3BC,EAACD,EAADC,EAAU2J,GAAF5J,EAALyD,MAAWzD,EAAJ4J,MAAMub,EAAOnlB,EAAPmlB,QAC3ClR,EAAsBC,YAAYoe,IAA3BC,EAAgDne,YAAAH,EAAA,GAArC,GAElB,OACE5T,eAAA,UAAQE,UAAU,sCAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,+CACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CACbH,EAAE,iBAAiB,KAAG2J,EAAK4oB,eAE9B/Y,WAAYxZ,EAAE,2CACdgb,eAAgBsX,EAChB5Y,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAAEC,MAAOw0C,GACP19C,UAAW,CAAEqZ,QAASA,EAAQvN,QAI1C,EAAExX,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAGxD,KCyGe1G,I,YAAAA,iBAAkB6C,aA9HjC,SAAsB5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAEpBgvB,GAFkCzyB,EAAP0D,QACbI,qBAAWxC,IACIiQ,sBAC7BhB,EAAYtQ,EAAE,kCACdy+C,EAAaj7C,EAAM2K,OAAOswC,WAChC/6C,EAA4CC,YAAS4lD,GAA0B,CAC7E19C,UAAW,CAAC,QAAW4yC,KADjBz8C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAK9B,GAAIzP,EAAS,OACX5B,eAACopD,GAAiB,CAAArpD,SAChBC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,qCAMd,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEV7B,eAACopD,GAAiB,CAAArpD,SAChBC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,oCAOhBtH,QAAQC,IAAI,wBACZD,QAAQC,IAAIuJ,GACZ,IAAMgjB,EAAUhjB,EAAKgjB,QACfyN,EAAgBzwB,EAAKywB,cAG3B,OAAKA,EAAcnpB,MAAMjK,OAcvBa,eAACopD,GAAiB,CAACtkC,QAASA,EAAQ/kB,SAClCC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,kCACb8P,SAAU6iB,EAAc7iB,SACxBY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO8gB,EAAc7iB,SAASgC,WAEhCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB0gB,cAAcnpB,MACzCsG,EAAWmC,EAAgB0gB,cAAc7iB,SAE/C,OAAOoC,EAAS3S,OACZ,CAGEozB,cAAe,CACbxgB,WAAYH,EAAe2gB,cAAcxgB,WACzC3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe2gB,cAAcnpB,OAAK4I,aAAKF,IACnDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACVC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBAClBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,iCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,yBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNwyB,EAAcnpB,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC9BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC+xB,GAAkB,CAACrpB,OAAQa,EAAKb,UADnBmE,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CAAY,KACjBwJ,EAAK4oB,cADMtlB,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKipB,WAAW5mB,OAAOwmB,KAEjCpyB,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK2b,cADQrY,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACVC,eAACqpD,GAAkB,CAAC9/C,KAAMA,EAAMub,QAASA,IACvC9kB,eAAC0E,IAAI,CAACtC,GAAI,wBAA0BmH,EAAKgO,GAAGxX,SAC1CC,eAAC2E,KAAM,CAACzE,UAAU,qBACV4E,MAAM,YAAW/E,SACtBH,EAAE,sBALOiN,kBAbFA,eAsBJ,aA3EtB7M,eAACopD,GAAiB,CAACtkC,QAASA,EAAQ/kB,SAClCC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,8CA+ElB,KCjJa0pD,GAA6BhwD,YAAGC,QAAAC,YAAA,s6BAqFhC8gB,GAAyBhhB,YAAGI,QAAAF,YAAA,8mBAgC5B+vD,GAAyBjwD,YAAGK,QAAAH,YAAA,qLAU5BgwD,GAAyBlwD,YAAGO,QAAAL,YAAA,kJCuD1BkG,qBAAkB6C,aA7JjC,SAAwB5C,GAAwB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAO4a,EAAQre,EAARqe,SAE5B9M,EADczN,qBAAWxC,IACUiQ,qBAEnCxF,EAAYtI,EAAM2K,OAAOswC,WACzBP,EAAa,WACb5tC,EAAYtQ,EAAE,oCACdw+B,EAAuBp+B,eAAC0N,GAAoB,CAChDzD,WAAW,MACXC,SAAS,iBAAgBnK,SACvBC,eAACyW,GAAS,CAACL,OAAM,uBAAAtH,OAAyBpD,EAAS,iBAAiBxL,UAAU,WAGlF7B,aAAaC,QAAQC,EAAKvD,6BAA8BgjB,EAASoH,UAEjE,IAAA9hB,EAA0CC,YAAS+lD,GAA4B,CAC7E79C,UAAW,CAAEC,UAAWA,KADnB9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAG7BuC,EAA+BC,YAAY21C,IAApCC,EAA2D11C,YAAAH,EAAA,GAAvC,GAE3B,GAAIhS,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAY1f,qBAAsBA,EAAqBr+B,SAC9FC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACc,KAAM,CAACE,QAAQ,EAAMD,QAAQ,QAKpC,GAAIc,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAY1f,qBAAsBA,EAAqBr+B,SAAA,CAC7FzH,QAAQC,IAAIsJ,GACb7B,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,IAAMklB,EAAUhjB,EAAKgjB,QACf4kC,EAAkB5nD,EAAK4nD,gBAG3B,OAAKA,EAAgBtgD,MAAMjK,OAiB3Ba,eAAC0+C,GAA2B,CAC1Bn6C,KAAMugB,EACNg5B,WAAYA,EACZ1f,qBAAsBA,EAAqBr+B,SAE3CC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,oCACb8P,SAAUg6C,EAAgBh6C,SAC1BY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOi4C,EAAgBh6C,SAASgC,WAElCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB63C,gBAAgBtgD,MAC3CsG,EAAWmC,EAAgB63C,gBAAgBh6C,SAEjD,OAAOoC,EAAS3S,OACZ,CAGEykC,mBAAoB,CAClB7xB,WAAYH,EAAe83C,gBAAgB33C,WAC3C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe83C,gBAAgBtgD,OAAK4I,aAAKF,IACrDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,IAChBlS,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,4BACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,MANFrF,kBASlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN2pD,EAAgBtgD,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAChCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC0qC,KAAM,CAAC7lC,KAAK,KAAKjB,SAAU2F,EAAK0qC,oBAAoBtpC,0BADvCkC,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK0qC,oBAAoB7tC,MADZyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK4c,UADQtZ,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKipB,WAAW5mB,OAAOsF,IADjBrE,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKogD,aAAavgD,MAAMjK,QACvBa,eAAC0E,IAAI,CAACtC,GAAE,0BAAA0M,OAA4BvF,EAAKogD,aAAavgD,MAAM,GAAGG,KAAKuc,eAAevO,IAAKxX,SACrFwJ,EAAKogD,aAAavgD,MAAM,GAAGG,KAAKuc,eAAepB,iBAHtC7X,gBAOhB7M,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAC/BC,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,iDACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CAAIwJ,EAAK0qC,oBAAoB7tC,KAAK,IAAEuF,KAAOpC,EAAKipB,WAAW5mB,OAAOsF,MAClFkI,WAAYxZ,EAAE,sCACdgb,eAAgB6uC,EAChBnwC,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACjB,CAACC,MAAO20C,GAA4B79C,UAAW,CAAEC,UAAWA,OAGpE,EAAE3L,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,iBApBfyG,kBApBzBA,eA2CJ,aAxGpB7M,eAAC0+C,GAA2B,CAC1Bn6C,KAAMugB,EACNg5B,WAAYA,EACZ1f,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,gDAwGpB,KC9IeF,sBA5Bf,SAAoBC,GAAIA,EAADC,EAA4F,IAAzF2G,EAAK5G,EAAL4G,MAAOqjD,EAAQjqD,EAARiqD,SAAUxjC,EAAKzmB,EAALymB,MAAOyjC,EAAMlqD,EAANkqD,OAAQC,EAAMnqD,EAANmqD,OAAMzzC,EAAA1W,EAAE2W,kBAAU,IAAAD,EAAC,cAAaA,EAAA0zC,EAAApqD,EAAEqqD,qBAAa,IAAAD,EAAC,SAAAn5C,GAAC,OAAEA,CAAC,EAAAm5C,EAC5G,OACI/pD,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,OAAKE,UAAU,mBAAkBH,SAC/BC,eAAA,OAAKO,IAAKspD,EAAQrpD,IAAKspD,MAEzB9pD,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEwG,IACbvG,eAAC2kB,KAAI,CAACzkB,UAAU,gBAAeH,SAAE6pD,IAEjC5pD,eAAA,OAAKiqD,UAAU,iCAAgClqD,SAC7CO,gBAAA,OAAKJ,UAAU,iCAAgCH,SAAA,CAC7CC,eAAA,OAAKE,UAAU,gBAAeH,SAC5BC,eAAA,UAAAD,SAASqmB,MAEXpmB,eAAA,OAAKE,UAAU,UAASH,SACtBO,gBAACqE,KAAM,CAACG,MAAM,UAAU2L,QAASu5C,EAAcjqD,SAAA,CAC7CC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,SACtBkQ,gBAQnB,IC8Je5W,I,SAAAA,iBAAkB6C,aA9KjC,SAA0B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAC9BqI,EAAYtI,EAAM2K,OAAOswC,WACzBP,EAAa,WACb5tC,EAAYtQ,EAAE,wCACdyG,EAAS,uBAAAyI,OAA0BpD,EAAS,aAE5Cw+C,EAAgBtqD,EAAE,eAGxB0D,EAA0CC,YAAS+W,GAAwB,CACzE7O,UAAW,CAAEC,UAAWA,KADnB9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAG7BuC,EAA+BC,YAAY01C,IAApCY,EAA2Dp2C,YAAAH,EAAA,GAAvC,GAE3B,GAAIhS,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SACxEC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACc,KAAM,CAACE,QAAQ,EAAMD,QAAQ,QAKpC,GAAIc,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SAAA,CACvEzH,QAAQC,IAAIsJ,GACb7B,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,IAAM8zC,EAAuB5xC,EAAK4xC,qBAC5B5uB,EAAUhjB,EAAKgjB,QAErB,OACExkB,gBAACo+C,GAA2B,CAC1BZ,WAAYA,EACZv5C,KAAMugB,EACNze,UAAWA,EAAUtG,SAAA,CAErBC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,8CAITI,eAACgoD,GAAsB,CACrBt4C,SAAUgkC,EAAqBhkC,SAC/BG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOiiC,EAAqBhkC,SAASgC,WAEvCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB6hC,qBAAqBtqC,MAChDsG,EAAWmC,EAAgB6hC,qBAAqBhkC,SAEtD,OAAOoC,EAAS3S,OACZ,CAGEu0C,qBAAsB,CACpB3hC,WAAYH,EAAe8hC,qBAAqB3hC,WAChD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe8hC,qBAAqBtqC,OAAK4I,aAAKF,IAC1DpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFC,eAACI,KAAKC,IAAG,CAAAN,SACN2zC,EAAqBtqC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACrCjJ,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACbzH,QAAQC,IAAIgR,GACbvJ,eAACoqD,GAAW,CACV7jD,MAAOgD,EAAKnD,KACZwjD,SAAUrgD,EAAKV,YACfud,MAAO7c,EAAK+tB,aACZuyB,OAAQtgD,EAAK8gD,uBACbP,OAAQvgD,EAAKnD,KACbkQ,WAAY4zC,EACZF,cAAe,WACbG,EAAqB,CAAE1+C,UAAW,CAChC8I,MAAO,CACLuQ,QAASpZ,EACTuoC,oBAAqB1qC,EAAKgO,GAC1B4O,SAAU,IAEXzR,eAAgB,CACf,CAACC,MAAO20C,GAA4B79C,UAAW,CAAEC,UAAWA,OAE/DkJ,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAK,uBAAD4M,OAAwBpD,EAAS,cAC7CmJ,KAAMC,QAASlV,EAAE,gDAAkD,CAC/DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACJ,MAEO,UAiEzB,KC/LayoD,GAA2BhxD,YAAGC,QAAAC,YAAA,o7BA2G9B8gB,GAAyBhhB,YAAGI,QAAAF,YAAA,00BA+C5B+wD,GAAuBjxD,YAAGK,QAAAH,YAAA,6KC3GxBkG,qBAAkB6C,aAnCjC,SAA0B5C,GAAIA,EAADC,EAAqE,IAE5F8nD,EAF0BtkD,EAAKzD,EAALyD,MAAgBrD,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQqhD,EAAAzhD,EAAEmlB,eAAO,IAAAs8B,EAAC,CAAC,EAACA,EAAAlD,EAAAv+C,EAAEy+B,4BAAoB,IAAA8f,EAAC,GAAEA,EACrFxyC,EAAYtI,EAAM2K,OAAOswC,WAM/B,OAJIv5B,IACF4iC,EAAa5iC,EAAQC,UAIrB/kB,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAOmhD,EAAW3nD,SAC7BC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCq+B,MAGN99B,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACbA,IAEHO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACu+C,GAAgB,CAACh6C,KAAMugB,IACxB9kB,eAACw+C,GAAW,CACVV,WAAW,SACXpyC,UAAWA,gBAQ3B,KCgEehM,qBAAkB6C,aA3FjC,SAAsB5C,GAAmC,IAAhCC,EAACD,EAADC,EAAGoe,EAAQre,EAARqe,SAAU5a,EAAKzD,EAALyD,MAC9BsI,GAD4C/L,EAAP0D,QACzBD,EAAM2K,OAAOswC,YACzBnuC,EAAYtQ,EAAE,kCACdw+B,EAAuB99B,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CAC1CC,eAACm/C,GAAqB,IACtBn/C,eAACyW,GAAS,CAACL,OAAM,uBAAAtH,OAAyBpD,EAAS,eAAexL,UAAU,YAG9EoD,EAA4CC,YAAS+mD,GAA0B,CAC7E7+C,UAAW,CAACC,UAAWA,GACvBG,YAAa,iBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAM9B,GAAIzP,EAAS,OACX5B,eAACwqD,GAAiB,CAACpsB,qBAAsBA,EAAqBr+B,SAC5DC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,qCAMd,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GAEV7B,eAACwqD,GAAiB,CAACpsB,qBAAsBA,EAAqBr+B,SAC5DC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,oCAQhBvB,aAAaC,QAAQC,EAAKrD,2BAA4B8iB,EAASoH,UAC/D,IAAI+T,EAAgBr3B,EAAKq3B,cACnBrU,EAAUhjB,EAAKgjB,QAGrB,OAAKqU,EAAc/vB,MAAMjK,OAavBa,eAACwqD,GAAiB,CAAC1lC,QAASA,EAASsZ,qBAAsBA,EAAqBr+B,SAC9EC,eAACiO,GAAW,CACViC,UAAWA,EACXR,SAAUypB,EAAczpB,SACxBY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO0nB,EAAczpB,SAASgC,WAEhCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBsnB,cAAc/vB,MACzCsG,EAAWmC,EAAgBsnB,cAAczpB,SAE/C,OAAOoC,EAAS3S,OACZ,CAGEg6B,cAAe,CACbpnB,WAAYH,EAAeunB,cAAcpnB,WACzC3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeunB,cAAc/vB,OAAK4I,aAAKF,IACnDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFC,eAACo5B,GAAiB,CAACN,OAAQK,QAxC7Bn5B,eAACwqD,GAAiB,CAAC1lC,QAASA,EAASsZ,qBAAsBA,EAAqBr+B,SAC9EC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,8CAyClB,KCrCeF,iBAAkB6C,aAzDL,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAG+f,EAAShgB,EAATggB,UAAW3M,EAAYrT,EAAZqT,aAAcC,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UAAS,OAC1E/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,wCAAwCG,SAAA,CAC3DO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,WACLlG,UAAY+S,EAAOwR,SAAY,0BAA4B,eAC3DlR,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,wCAATiN,gBACrB8S,EAAUhC,WAAWvU,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACrCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,wBAE3DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,+BAA+BG,SAAA,CAClDC,eAACsT,KAAK,CAACG,UAAU,SACXrN,KAAK,oBACLlG,UAAY+S,EAAO6oB,kBAAqB,0BAA4B,eACpEvoB,aAAa,MAAKxT,SAErB4f,EAAU6b,mBAAmBpyB,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC7CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,MAG3D7M,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,wBAEpEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,UACLlG,UAAY+S,EAAOkI,QAAW,0BAA4B,eAC1D5H,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,2BAG5DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAETH,EAAE,2BAIN,KCuEIF,qBAAkB6C,aA3HjC,SAAwB5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAC7Bg7C,EAAaj7C,EAAM2K,OAAOswC,WAC1BP,EAAa,SACb5tC,EAAYtQ,EAAE,sCACdyG,EAAS,uBAAAyI,OAA0BuvC,EAAU,WAEnD/6C,EAAiCC,YAAS+W,GAAwB,CAC9D7O,UAAW,CACTC,UAAW2yC,KAFTz8C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAMxB8R,EAAsBC,YAAY02C,GAAsB,CACtD,GADKE,EAEL12C,YAAAH,EAAA,GAFgB,GAMlB,GAAIhS,EACF,OAAO5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SAC7EC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,qCAMhB,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SAC7EC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,oCAMhB,IAAMklB,EAAUhjB,EAAKgjB,QACfkJ,EAAkBlJ,EAAQ4lC,gBAAkB5lC,EAAQ4lC,gBAAgBnzC,GAAK,KACzEikB,EAAqB15B,EAAK05B,mBAC1BmvB,EAAkBnvB,GAAsBA,EAAmBpyB,OAASoyB,EAAmBpyB,MAAM,GAAGG,KAAKgO,GAG3G,OACEvX,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAYv5C,KAAMugB,EAASze,UAAWA,EAAUtG,SACvFC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACb6nB,kBAAmB6uB,EACnBlmC,SAAUuJ,EACV7S,QAAS,IAGX/G,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZo2C,EAAY,CAAEh/C,UAAW,CACvB8I,MAAO,CACLuQ,QAASu5B,EACTviB,kBAAmBznB,EAAOynB,kBAC1BrX,SAAWpQ,EAAOoQ,SAAYpQ,EAAOoQ,SAAW,KAChDtJ,QAAS9G,EAAO8G,UAEjBzG,eAAgB,KAElBE,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,sCAAwC,CACrDmV,SAAUF,KAAMG,SAASC,eAE7B5R,EAAQnB,KAAK,wBAA0BJ,EAAK8oD,mBAAmBpxB,aAAajiB,IAC5EjD,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQoV,EAAUzc,EAAVyc,WAAY7J,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC1E7f,eAAC6qD,GAAmB,CAClBlrC,UAAW7d,EACXkR,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRoV,WAAYA,EACZ7J,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GAES,OAyBlC,KC1De3G,I,eAAAA,iBAAkB6C,aAzDjC,SAAwC5C,GAAiC,IAA/BC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAOrD,EAAQJ,EAARI,SACrD2L,EAAYtI,EAAM2K,OAAOswC,WAC/B/6C,EAAiCC,YAASmgD,GAAa,CAAEj4C,UAAW,CAClEC,UAAWA,KADL9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB,GAAIF,EAAS,OACX5B,eAAA,KAAAD,SACGH,EAAE,+BAGP,GAAIiC,EAAO,OACT7B,eAAA,KAAAD,SACGH,EAAE,qCAIPtH,QAAQC,IAAIuJ,GACZ,IAAMgjB,EAAUhjB,EAAKgjB,QAGrB,OAFAxsB,QAAQC,IAAIusB,GAGV9kB,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAOue,EAAQja,UAAY,IAAMia,EAAQha,SAAS/K,SAC7DC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAACm/C,GAAqB,QAG1B7+C,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACbA,IAEHO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACu+C,GAAgB,CAACh6C,KAAMugB,IASxB9kB,eAACw+C,GAAW,CACVV,WAAW,UACXpyC,UAAWA,gBAQ3B,KCxEao/C,GAA2CxxD,YAAGC,QAAAC,YAAA,4uBAqC9CygD,GAAqB3gD,YAAGI,QAAAF,YAAA,8oCAmIxBuxD,GAAoCzxD,YAAGK,QAAAH,YAAA,sNAWvCwxD,GAAuC1xD,YAAGO,QAAAL,YAAA,oOCnL1CsxD,GAA2CxxD,YAAGC,QAAAC,YAAA,s7BCgX5CkG,I,qBAAAA,iBAAkB6C,aAtVjC,SAAoC5C,GAAuB,IAArBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAE1C0X,EADcrX,qBAAWxC,IACA6Z,WACzB5K,EAAYtQ,EAAE,yCAEd8L,EAAYtI,EAAM2K,OAAOswC,WAC/B/6C,EAA4CC,YAASunD,GAA0C,CAAEr/C,UAAW,CAC1GqZ,QAASpZ,KADH9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAG9BuC,EAA2CC,YAAYm3C,IAAhDC,EAAqFl3C,YAAAH,EAAA,GAArD,GAGvC,GAAIhS,EAAS,OACX5B,eAACkrD,GAA+B,CAAAnrD,SAC7BH,EAAE,+BAGP,GAAIiC,EAAO,OACT7B,eAACkrD,GAA+B,CAAAnrD,SAC7BH,EAAE,oCAIP,IAAMurD,EAA8BrpD,EAAKqpD,4BAGzC,OAAKA,EAA4B/hD,MAAMjK,OAarCa,eAACkrD,GAA+B,CAAAnrD,SAC9BC,eAACiO,GAAW,CACViC,UAAWA,EACXR,SAAUy7C,EAA4Bz7C,SACtCY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO05C,EAA4Bz7C,SAASgC,WAE9CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBs5C,4BAA4B/hD,MACvDsG,EAAWmC,EAAgBs5C,4BAA4Bz7C,SAE7D,OAAOoC,EAAS3S,OACZ,CAGEgsD,4BAA6B,CAC3Bp5C,WAAYH,EAAeu5C,4BAA4Bp5C,WACvD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeu5C,4BAA4B/hD,OAAK4I,aAAKF,IACjEpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,4CACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNorD,EAA4B/hD,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5CjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAK6hD,oBAAoBC,cAAcjlD,KAAK,IAACpG,eAAA,SAC9CA,eAACuI,KAAK,CAAAxI,SAAEwJ,EAAK6hD,oBAAoBhlD,OAAa,IAAE,IAC9CmD,EAAK+hD,UAAatrD,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,uBAAgC,MAEhFI,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAK6hD,oBAAoBC,cAAcxpC,WAAWjW,OAAOkP,KAEnE9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKogD,aAAavgD,MAAMjK,OACxBmB,gBAAA,QAAAP,SAAA,CACEC,eAAC0E,IAAI,CAACtC,GAAE,0BAAA0M,OAA4BvF,EAAKogD,aAAavgD,MAAM,GAAGG,KAAKuc,eAAevO,IAAKxX,SACrFwJ,EAAKogD,aAAavgD,MAAM,GAAGG,KAAKuc,eAAepB,gBAC3C,IAAC1kB,eAAA,SACRA,eAACwjB,GAAqB,CAAC9a,OAAQa,EAAKogD,aAAavgD,MAAM,GAAGG,KAAKuc,eAAepd,YAG9E,KAqBN1I,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAKgiD,iBAE5BvrD,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAK+hD,UACLtrD,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN2L,QAAS,kBACPw6C,EAAiC,CAAEx/C,UAAW,CAC5C8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACT+zC,WAAW,IAEZ52C,eAAgB,CACjB,CACEC,MAAOm2C,GACPr/C,UAAW,CAAEqZ,QAASpZ,OAGzBkJ,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,iDAAmD,CAChEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACD,EACF9B,SAEAH,EAAE,sBAGLI,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN2L,QAAS,kBACPw6C,EAAiC,CAAEx/C,UAAW,CAC5C8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACT+zC,WAAW,IAEZ52C,eAAgB,CACf,CACEC,MAAOm2C,GACPr/C,UAAW,CAAEqZ,QAASpZ,OAG3BkJ,MAAK,SAAAoV,GAAe,IAAZloB,EAAIkoB,EAAJloB,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,+CAAiD,CAC9DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GAAE,EACH9B,SAEAH,EAAE,wBAxGGiN,eA4GJ,aAhKtB7M,eAACkrD,GAA+B,CAAAnrD,SAC9BC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,qDAoKlB,KC7Na4rD,GAAkClyD,YAAGC,QAAAC,YAAA,40BA0CrC6oD,GAAiC/oD,YAAGI,QAAAF,YAAA,0sCAgEpC8gB,GAAyBhhB,YAAGK,QAAAH,YAAA,y6BA8D5BiyD,IAfoBnyD,YAAGO,QAAAL,YAAA,yNAeOF,YAAGQ,QAAAN,YAAA,8MAUjCkyD,GAA8BpyD,YAAGU,QAAAR,YAAA,2MAUjCmyD,GAA8BryD,YAAGY,QAAAV,YAAA,iKCN/BkG,qBAAkB6C,aA9JjC,SAA6B5C,GAAc,IAAZC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAE1B0X,EADcrX,qBAAWxC,IACA6Z,WAEzBpP,EAAYtI,EAAM2K,OAAOswC,WACzBnuC,EAAYtQ,EAAE,yCACdk+C,EAAa,gBACnBx6C,EAA4CC,YAASioD,GAAiC,CACpF//C,UAAW,CAACC,UAAWA,KADjB9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAG9BuC,EAAoCC,YAAY83C,IAAzCC,EAAqE73C,YAAAH,EAAA,GAA5C,GAEhC,GAAIhS,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAW/9C,SAClDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,GAAIiC,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAW/9C,SAAA,CACjDzH,QAAQC,IAAIsJ,GACb7B,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,IAAMklB,EAAUhjB,EAAKgjB,QACf+mC,EAAuB/pD,EAAK+pD,qBAC5BztB,EAAuBp+B,eAAC0N,GAAoB,CAChDzD,WAAW,MACXC,SAAS,sBAAqBnK,SAC5BC,eAACyW,GAAS,CAACL,OAAM,uBAAAtH,OAAyBpD,EAAS,sBAAsBxL,UAAU,WAIvF,OAAK2rD,EAAqBziD,MAAMjK,QAgBhC7G,QAAQwzD,MAAMD,EAAqBziD,OAGjCpJ,eAAC0+C,GAA2B,CAC1BZ,WAAYA,EACZv5C,KAAMugB,EACNsZ,qBAAsBA,EAAqBr+B,SAE3CC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,yCACb8P,SAAUm8C,EAAqBn8C,SAC/BY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOo6C,EAAqBn8C,SAASgC,WAEvCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBg6C,qBAAqBziD,MAChDsG,EAAWmC,EAAgBg6C,qBAAqBn8C,SAEtD,OAAOoC,EAAS3S,OACZ,CAGE0sD,qBAAsB,CACpB95C,WAAYH,EAAei6C,qBAAqB95C,WAChD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAei6C,qBAAqBziD,OAAK4I,aAAKF,IAC1DpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,4BACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,MANFrF,kBASlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN8rD,EAAqBziD,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACrCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKu6B,yBAAyB19B,MADjByG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,IADjBjO,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKuY,SAAWnW,KAAOpC,EAAKuY,SAASlW,OAAOkP,IAD/BjO,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKohB,qBAAwBphB,EAAKohB,qBAAqBvkB,KAAO,IADlDyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACLwJ,EAAKu6B,yBAAyB8D,UAAahoC,EAAE,qBAAuB2J,EAAKwiD,aAD9Dl/C,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAI,uBAAyBgB,EAAM2K,OAAOswC,WAAa,uBAAyB90C,EAAKgO,GAAGxX,SAC5FC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,sDACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CAAIwJ,EAAKu6B,yBAAyB19B,KAAK,IAAEmD,EAAKsY,aAC9DzI,WAAYxZ,EAAE,2CACdgb,eAAgBgxC,EAChBtyC,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACjB,CAACC,MAAO62C,GAAiC//C,UAAW,CAAEC,UAAWA,OAGzE,EAAE3L,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBA1BfyG,kBAhBzBA,eA6CJ,cA5GtB7M,eAAC0+C,GAA2B,CAC1BZ,WAAYA,EACZv5C,KAAMugB,EACNsZ,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,qDA4GlB,KClLa+1C,GAAsBnjC,OAAaC,MAAM,CACpDqxB,yBAA0BtxB,OACvBG,SAAS/S,YAAE,uBACd+qB,qBAAsBnY,OACtBqP,UAAWrP,OACRG,SAAS/S,YAAE,uBACdkiB,QAAStP,OACNizC,WACHuG,oBAAqBx5C,OACrBkX,KAAMlX,SCoHO9S,iBAAkB6C,aA5GD,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAY21B,GAAF51B,EAAP0D,QAAe1D,EAAN41B,QAAQ5V,EAAShgB,EAATggB,UAAW3M,EAAYrT,EAAZqT,aAAc6M,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiB3M,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQhO,EAAS1G,EAAT0G,UAAS,OACvI/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,wBAAwBG,SAAA,CAC3CO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,2BACLlG,UAAY+S,EAAO6wB,yBAA4B,0BAA4B,eAC3EvwB,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU61B,0BAA0BpsC,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACpDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,2BAA2BqN,UAAU,OAAOvT,UAAU,0BAG7EF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0BAA0BG,SAAA,CAC7CO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,uBACLlG,UAAY+S,EAAO0X,qBAAwB,0BAA4B,eACvEpX,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAUiL,sBAAsBxhB,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAChDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,uBAAuBqN,UAAU,OAAOvT,UAAU,6BAI3EI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACLC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAiC,aAAzBgB,EAAOnH,cAAgCtN,EAAE,gBAAkBA,EAAE,sBAAsBG,SAAA,CACrGC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO4O,UAAa,0BAA4B,eAC5DjG,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GACT8S,EAAc,YAAa9S,GAC3B6S,EAAgB,WAAW,EAC7B,EACA5D,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAGlC,aAAzBmU,EAAOnH,cAAgC,GACxClN,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GACT8S,EAAc,UAAW9S,GACzB6S,EAAgB,WAAW,EAC7B,EACA5D,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,EAC9CxD,gBAAiBxc,EAAE,0CAErBI,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAKlEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACkpB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,OACbC,aAAchV,EAAOqV,KACrB9wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,OAAQqG,EAAE7gB,OAAOkkB,cAC/B3J,EAAgB,QAAQ,GAAM,EAChC,IAEJ5f,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,wBAErDq1B,EAAU,GACVj1B,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,sBACLwnB,QAASvZ,EAAO23C,sBAClBhsD,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,8DAEnDI,eAACwT,KAAY,CAACpN,KAAK,sBAAsBqN,UAAU,cAIzDnT,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAACsgB,GAAgB,CAACja,UAAWA,SAE1B,KC4II3G,qBAAkB6C,aArPjC,SAA+B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC5BqI,EAD0C/L,EAALyD,MACnB2K,OAAOswC,WACzBP,EAAa,gBACb5tC,EAAYtQ,EAAE,6CACdyG,EAAS,uBAAAyI,OAA0BpD,EAAS,kBAClDpI,EAA+BC,YAAS+W,GAAwB,CAC9D7O,UAAW,CAAEoL,UAAU,EAAOnL,UAAWA,KADpC9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGvB8R,EAAoCC,YAAY43C,IAAzCQ,EAAqEl4C,YAAAH,EAAA,GAA5C,GAEhC,GAAIhS,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SACxEC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,GAAIiC,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAYz3C,UAAWA,EAAUtG,SAAA,CACvEzH,QAAQC,IAAIsJ,GACb7B,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBH,EAAE,iCAKT,IAAM+f,EAAY7d,EACZgjB,EAAUhjB,EAAKgjB,QAErB,OACE9kB,eAAC0+C,GAA2B,CAC1BZ,WAAYA,EACZv5C,KAAMugB,EACNze,UAAWA,EAAUtG,SAErBO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEblQ,eAACgU,KAAM,CACLC,cAAe,CACb6vB,yBAA0B,GAC1BnZ,qBAAsB,GACtB9I,UAAW,IAAI3e,KACfwmB,KAAM,GACNsiC,qBAAqB,GAEvB73C,iBAAkBwhC,GAClBvhC,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAM1C6O,EANaxN,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAKV6O,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGnBmqC,EAA0B,CAAExgD,UAAW,CACrC8I,MAAO,CACLuQ,QAASpZ,EACTo4B,yBAA0BzvB,EAAOyvB,yBACjCnZ,qBAAsBtW,EAAOsW,qBAC7B9I,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,EACT4H,KAAMrV,EAAOqV,OAEdhV,eAAgB,CACf,CAACC,MAAO62C,GAAiC//C,UAAW,CAACC,UAAWA,OAEnEkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB,IAAM01C,EAAiB11C,EAAKmqD,0BAA0BnJ,oBAAoBvrC,GAC1ElU,EAAQnB,KAAK,uBAAD4M,OAAwBpD,EAAS,wBAAAoD,OAAuB0oC,IACpE3iC,KAAMC,QAASlV,EAAE,qDAAuD,CACpEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9DrU,eAACksD,GAAuB,CACtB32B,QAAQ,EACR5V,UAAWA,EACX3M,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACW,QAMxC,KC3FevT,sBAzBf,SAAiBC,GAAIA,EAADC,EAAmC,IAAlCusD,EAAAxsD,EAAEoV,gBAAQ,IAAAo3C,EAAC,MAAKA,EAAEC,EAAIzsD,EAAJysD,KAAMrrD,EAAMpB,EAANoB,OACvCsrD,EAAsB,gBAC1B,OAAOt3C,GACL,IAAK,MAKL,QACE,MAJF,IAAK,SACHs3C,EAAsB,gBAM1B,OACErsD,eAAA,OAAKE,UAAS,aAAA4O,OAAeu9C,GAAsBtsD,SAE/CqsD,EAAK9/C,KAAI,SAAAC,GAAA,IAAEnG,EAAImG,EAAJnG,KAAMG,EAAKgG,EAALhG,MAAOoH,EAAIpB,EAAJoB,KAAI,OAC1B3N,eAAC0E,IAAI,CAAYtC,GAAIuL,EAAMzN,UAAS,kBAAA4O,OAAqB1I,IAASrF,EAAU,SAAU,IAAKhB,SACzFO,gBAAA,MAAIJ,UAAU,aAAYH,SAAA,CAAC,IAAEwG,EAAM,QAD1BsG,eAEJ,KAKjB,ICaenN,sBA1Cf,SAAoCC,GAA6C,IAA1CC,EAACD,EAADC,EAAGmB,EAAMpB,EAANoB,OAAQs9C,EAAU1+C,EAAV0+C,WAAY5G,EAAe93C,EAAf83C,gBAE5D,OACEz3C,eAACssD,GAAQ,CACPv3C,SAAS,MACTq3C,KAAM,CACF,CACEhmD,KAAM,UACNG,MAAO3G,EAAE,gDACT+N,KAAK,uBAADmB,OAAyBuvC,EAAU,wBAAAvvC,OAAuB2oC,IAEhE,CACErxC,KAAM,SACNG,MAAO3G,EAAE,+CACT+N,KAAK,uBAADmB,OAAyBuvC,EAAU,wBAAAvvC,OAAuB2oC,EAAe,YAE/E,CACErxC,KAAM,SACNG,MAAO3G,EAAE,+CACT+N,KAAK,uBAADmB,OAAyBuvC,EAAU,wBAAAvvC,OAAuB2oC,EAAe,YAE/E,CACErxC,KAAM,aACNG,MAAO3G,EAAE,mDACT+N,KAAK,uBAADmB,OAAyBuvC,EAAU,wBAAAvvC,OAAuB2oC,EAAe,gBAE/E,CACErxC,KAAM,WACNG,MAAO3G,EAAE,iDACT+N,KAAK,uBAADmB,OAAyBuvC,EAAU,wBAAAvvC,OAAuB2oC,EAAe,cAE/E,CACErxC,KAAM,UACNG,MAAO3G,EAAE,gDACT+N,KAAK,uBAADmB,OAAyBuvC,EAAU,wBAAAvvC,OAAuB2oC,EAAe,cAGnF12C,OAAQA,GAGd,IC0CerB,qBAAkB6C,aAlEjC,SAAwC5C,GAAwF,IAAtFC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAOrD,EAAQJ,EAARI,SAAUsG,EAAS1G,EAAT0G,UAAS+6C,EAAAzhD,EAAEmlB,eAAO,IAAAs8B,EAAC,KAAIA,EAAAmL,EAAA5sD,EAAE27C,oBAAY,IAAAiR,EAAC,KAAIA,EAAEC,EAAS7sD,EAAT6sD,UAE3G1xC,EADcrX,qBAAWxC,IACA6Z,WAEzBpP,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAEhCgV,EAAU,GACVnR,IAEAmR,EADEnR,EAAaxX,yBAAyB8D,UAC9BhoC,EAAE,qBAEF07C,EAAayQ,aAI3B,IAAM77C,EAAaorC,EACjBh7C,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxBu7C,EAAaxX,yBAAyB19B,KAAO,IAAMuF,KAAO2vC,EAAaz5B,WAAWjW,OAAOkP,GAAY,MAAI2xC,EAAQ,IAAE7sD,EAAE,sBAChH,GAEZ,OACEI,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAQue,EAAWA,EAAQja,UAAY,IAAMia,EAAQha,SAAW,GAAG/K,SAC9EC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCsG,EAAarG,eAAC6G,GAAU,CAACR,UAAWA,IAAgB,OAG1D/F,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVO,gBAAC4G,KAAKqJ,MAAK,CAAAxQ,SAAA,CAAEH,EAAE,8CAA8C,IAAEsQ,OAEjElQ,eAAC0sD,GAA2B,CAC1BrO,WAAY3yC,EACZ+rC,gBAAiBD,EACjBz2C,OAAQyrD,IAETzsD,OAGLO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACu+C,GAAgB,CAACh6C,KAAMugB,IASxB9kB,eAACw+C,GAAW,CACVV,WAAW,gBACXpyC,UAAWA,gBAQ3B,KCrCehM,qBAAkB6C,aAvCjC,SAAoC5C,GAAuD,IAArDC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAOrD,EAAQJ,EAARI,SAAUysD,EAAS7sD,EAAT6sD,UAAWnmD,EAAS1G,EAAT0G,UACtEqF,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBACpCn0C,EAAiCC,YAAS8+C,GAAgC,CACxE52C,UAAW,CACTC,UAAWA,EACX6L,GAAIigC,KAHA51C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAOxB,GAAIF,EAAS,OACX5B,eAAC2sD,GAA+B,CAACH,UAAWA,EAAWnmD,UAAWA,EAAUtG,SACzEH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAACqsD,GAA+B,CAACH,UAAWA,EAAWnmD,UAAWA,EAAUtG,SAAA,CAC1EC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAIdj/B,QAAQC,IAAIuJ,GACZ,IAAMgjB,EAAUhjB,EAAKgjB,QACfw2B,EAAex5C,EAAKghD,oBAE1B,OACE9iD,eAAC2sD,GAA+B,CAC9BH,UAAWA,EACX1nC,QAASA,EACTw2B,aAAcA,EACdj1C,UAAWA,EAAUtG,SAEpBA,GAGP,KCwFeL,I,SAAAA,iBAAkB6C,aAtHjC,SAAgC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAC7BmU,GAD2C5X,EAAP0D,QAC/BD,EAAM2K,OAAO0pC,iBAClB/rC,EAAYtI,EAAM2K,OAAOswC,WACzBh4C,EAAS,uBAAAyI,OAA0BpD,EAAS,kBAC5C8gD,EAAY,UAElBlpD,EAAiCC,YAAS8+C,GAAgC,CACxE52C,UAAW,CACToL,UAAU,EACVnL,UAAWA,EACX6L,GAAIA,KAJA3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAQxB8R,EAA+BC,YAAY63C,IAAnCrV,EAA+DtiC,YAAAH,EAAA,GAA7C,GAE1B,GAAIhS,EAAS,OACX5B,eAAC4sD,GAA2B,CAACJ,UAAWA,EAAWnmD,UAAWA,EAAUtG,SACrEH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAACssD,GAA2B,CAACJ,UAAWA,EAAWnmD,UAAWA,EAAUtG,SAAA,CACtEC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAM5X,EAAY7d,EACZgkD,EAAchkD,EAAKghD,oBAErBj4B,EAAuB,GACvBi7B,EAAYn7B,uBACdE,EAAuBi7B,EAAYn7B,qBAAqBpT,IAK1D,IAAIsK,EAAY,KACZC,EAAU,KAQd,OAPIgkC,EAAYjkC,YACdA,EAAY,IAAI3e,KAAK4iD,EAAYjkC,YAE/BikC,EAAYhkC,UACdA,EAAU,IAAI5e,KAAK4iD,EAAYhkC,UAI/B9hB,eAAC4sD,GAA2B,CAACJ,UAAWA,EAAWnmD,UAAWA,EAAUtG,SACtEC,eAACgU,KAAM,CACLC,cAAe,CACb6vB,yBAA0BgiB,EAAYhiB,yBAAyBvsB,GAC/DoT,qBAAsBE,EACtBhJ,UAAWA,EACXC,QAASA,EACT4H,KAAMo8B,EAAYp8B,KAClBsiC,oBAAqBlG,EAAYkG,qBAEnC73C,iBAAkBwhC,GAClBvhC,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAM1C6O,EANaxN,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAKV6O,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGnBu0B,EAAmB,CAAE5qC,UAAW,CAC9B8I,MAAO,CACLgD,GAAIA,EACJusB,yBAA0BzvB,EAAOyvB,yBACjCnZ,qBAAsBtW,EAAOsW,qBAC7B9I,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,EACT4H,KAAMrV,EAAOqV,KACbsiC,oBAAqB33C,EAAO23C,sBAE7Bt3C,eAAgB,CACf,CAACC,MAAO62C,GAAiC//C,UAAW,CAACC,UAAWA,OAEnEkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,sDAAwD,CACrEmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9DrU,eAACksD,GAAuB,CACtBvsC,UAAWA,EACX3M,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACW,KAKpC,KCjIa45C,GAA4CvzD,YAAGC,QAAAC,YAAA,ulBA6B/CszD,GAA2CxzD,YAAGI,QAAAF,YAAA,kPAiB9CuzD,GAAwCzzD,YAAGK,QAAAH,YAAA,yLC6CzCkG,qBAAkB6C,aAzEjC,SAAwC5C,GAYtC,IAXAC,EAACD,EAADC,EAEAwD,GADOzD,EAAP0D,QACK1D,EAALyD,OACArD,EAAQJ,EAARI,SAAQqhD,EAAAzhD,EACRmlB,eAAO,IAAAs8B,EAAC,KAAIA,EAAAmL,EAAA5sD,EACZ27C,oBAAY,IAAAiR,EAAC,KAAIA,EACjB78C,EAAQ/P,EAAR+P,SACAG,EAAUlQ,EAAVkQ,WACA28C,EAAS7sD,EAAT6sD,UACAnmD,EAAS1G,EAAT0G,UAAS63C,EAAAv+C,EACTy+B,4BAAoB,IAAA8f,EAAC,GAAEA,EAIjBpjC,EADcrX,qBAAWxC,IACA6Z,WAEzBpP,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAEhCgV,EAAU,GACVnR,IAEAmR,EADEnR,EAAaxX,yBAAyB8D,UAC9BhoC,EAAE,qBAEF07C,EAAayQ,aAI3B,IAAM77C,EAAaorC,EACjBh7C,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxBu7C,EAAaxX,yBAAyB19B,KAAO,IAAMuF,KAAO2vC,EAAaz5B,WAAWjW,OAAOkP,GAAY,MAAI2xC,EAAQ,IAAE7sD,EAAE,sBAChH,GAEZ,OACEI,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAQue,EAAWA,EAAQja,UAAY,IAAMia,EAAQha,SAAW,GAAG/K,SAC9EO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCsG,EAAarG,eAAC6G,GAAU,CAACR,UAAWA,IAAgB,GACrD+3B,OAGL99B,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACiO,GAAW,CACViC,UAAW5P,gBAAA,QAAAP,SAAA,CAAOH,EAAE,8CAA8C,IAAEsQ,KACpER,SAAUA,EACVG,WAAYA,EACZS,aAAa,EACbD,SAAUrQ,eAAC0sD,GAA2B,CACpCrO,WAAY3yC,EACZ+rC,gBAAiBD,EACjBz2C,OAAQyrD,IAAezsD,SAExBA,MAGLO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACu+C,GAAgB,CAACh6C,KAAMugB,IACxB9kB,eAACw+C,GAAW,CACVV,WAAW,gBACXpyC,UAAWA,gBAQ3B,KCxCehM,qBAAkB6C,aA1CjC,SAAwC5C,GAAsG,IAApGC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAAOrD,EAAQJ,EAARI,SAAU2P,EAAQ/P,EAAR+P,SAAUG,EAAUlQ,EAAVkQ,WAAY28C,EAAS7sD,EAAT6sD,UAAWnmD,EAAS1G,EAAT0G,UAAS63C,EAAAv+C,EAAEy+B,4BAAoB,IAAA8f,EAAC,GAAEA,EAClIxyC,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBACpCn0C,EAAiCC,YAAS8+C,GAAgC,CACxE52C,UAAW,CACTC,UAAWA,EACX6L,GAAIigC,KAHA51C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAOxB,GAAIF,EAAS,OACX5B,eAACgtD,GAAmC,CAACR,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SACzHH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC0sD,GAAmC,CAACR,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SAAA,CAC1HC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAIdj/B,QAAQC,IAAIuJ,GACZ,IAAMgjB,EAAUhjB,EAAKgjB,QACfw2B,EAAex5C,EAAKghD,oBAE1B,OACE9iD,eAACgtD,GAAmC,CAClCR,UAAWA,EACX1nC,QAASA,EACTw2B,aAAcA,EACd5rC,SAAUA,EACVG,WAAYA,EACZxJ,UAAWA,EACX+3B,qBAAsBA,EAAqBr+B,SAE1CA,GAGP,KCAeL,qBAAkB6C,aAnCjC,SAA8C5C,GAA2B,IAAzBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBmU,GAAF5X,EAAP0D,QAAW1D,EAAF4X,IAC3DigC,EAAiBp0C,EAAM2K,OAAO0pC,gBACpC7jC,EAA4CC,YAAYk5C,IAAjDE,EAAuFl5C,YAAAH,EAAA,GAAtD,GAClCs5C,EAAa,CACjBpK,oBAAqBtL,GAGvB,OACEx3C,eAAA,UAAQE,UAAU,2CAChBqG,MAAO3G,EAAE,kBACT6Q,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,iEACduZ,eAAgBnZ,eAAA,QAChBoZ,WAAYxZ,EAAE,6DACdgb,eAAgBqyC,EAChB3zC,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIA,IAGR7C,eAAgB,CACd,CAAEC,MAAOk4C,GAA2CphD,UAAWyhD,MAIzE,EAAEntD,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,aAG7B,KCwFe1G,qBAAkB6C,aAlHjC,SAAyC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACtCsI,GADoD/L,EAAP0D,QACjCD,EAAM2K,OAAOswC,YACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,kBAC5C8gD,EAAY,aAEZpuB,EAAuBp+B,eAACyW,GAAS,CACrCL,OAAM,uBAAAtH,OAAyBpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,mBAC7Et3C,UAAU,SAGZoD,EAA4CC,YAASspD,GAA2C,CAC9FphD,UAAW,CACTq3C,oBAAqBtL,KAFjB51C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAM9B,GAAIzP,EAAS,OACX5B,eAACmtD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SACrHH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC6sD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SAAA,CACtHC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAM61B,EAA+BtrD,EAAKsrD,6BACpC19C,EAAW5N,EAAKsrD,6BAA6B19C,SAGjD,OAAK09C,EAA6BhkD,MAAMjK,OA+BxCmB,gBAAC6sD,GAA+B,CAC9BX,UAAWA,EACX98C,SAAUA,EACVG,WA5Be,WACjBwB,EAAU,CACR5F,UAAW,CACTgG,MAAO27C,EAA6B19C,SAASgC,WAE/CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBu7C,6BAA6BhkD,MACxDsG,EAAWmC,EAAgBu7C,6BAA6B19C,SAE9D,OAAOoC,EAAS3S,OACZ,CAGEiuD,6BAA8B,CAC5Br7C,WAAYH,EAAew7C,6BAA6Br7C,WACxD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAew7C,6BAA6BhkD,OAAK4I,aAAKF,IAClEpC,aAGJkC,CACN,GAEJ,EAOIvL,UAAWA,EACX+3B,qBAAsBA,EAAqBr+B,SAAA,CAE3CC,eAAA,SACAM,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,+BACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,gCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,yBACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNqtD,EAA6BhkD,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC7CjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKmJ,mBAER1S,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKwJ,oBAER/S,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK0iB,gBAERjsB,eAACiS,KAAMxM,IAAG,CAAA1F,SACVC,eAAA,OAAKwM,wBAAyB,CAACC,OAAQC,KAAUC,SAASpD,EAAKV,kBAE/DvI,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyBpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,qBAAA1oC,OAAoBvF,EAAKgO,IAAKxX,SAC3GC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAACqtD,GAAqC,CAAC91C,GAAIhO,EAAKgO,UApBpC1K,eAsBJ,YAxEpB7M,eAACmtD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SACtHC,eAACkH,KAAKC,KAAI,CAAApH,SAAEH,EAAE,4DA6EtB,KCjIa0tD,GAAwC96C,OAAaC,MAAM,CACtEC,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,IACPqM,OAAQ3M,OACLG,aCOUjT,qBAAkB6C,aAdjC,SAA4C5C,GAAIA,EAADC,EAAUD,EAAP0D,QAA4B,IAAnBD,EAAKzD,EAALyD,MAAOrD,EAAQJ,EAARI,SAE1D2L,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,gBAEvF,OACEx3C,eAAC4sD,GAA2B,CAACJ,UANb,aAMmCnmD,UAAWA,EAAUtG,SACrEA,GAGP,KCkGeL,I,GAAAA,iBAAkB6C,aApGjC,SAA4C5C,GAY3C,IAEK4G,EAbJ3G,EAACD,EAADC,EACAyD,EAAO1D,EAAP0D,QAEA2P,GADKrT,EAALyD,MACYzD,EAAZqT,cACAC,EAAMtT,EAANsT,OACAoB,EAAM1U,EAAN0U,OAEAhO,GADS1G,EAATggB,UACShgB,EAAT0G,WACAuZ,EAAejgB,EAAfigB,gBACAC,EAAalgB,EAAbkgB,cAAa0tC,EAAA5tD,EACbykC,UAUA,OALE79B,EAAQ3G,EADS,iBAJV,IAAA2tD,EAAC,SAAQA,GAKN,iDAEA,mDAIVjtD,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKwG,IACLjG,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,6BAA6BG,SAAA,CAChDC,eAACsT,KAAK,CAAChP,KAAK,SACJ8B,KAAK,mBACLlG,UAAY+S,EAAOP,iBAAoB,0BAA4B,eACnEa,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,0BAGrEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,8BAA8BG,SAAA,CACjDC,eAACsT,KAAK,CAAChP,KAAK,SACJ8B,KAAK,oBACLlG,UAAY+S,EAAOF,kBAAqB,0BAA4B,eACpEQ,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,0BAGtEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACR8B,KAAK,SACLlG,UAAY+S,EAAOkM,OAAU,0BAA4B,eACzD5L,aAAa,QACjBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,6BAI/DF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACTO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,4BAIhEF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACTO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACkpB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,OACbC,aAAchV,EAAOqV,KACrB9wB,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,OAAQqG,EAAE7gB,OAAOkkB,cAC/B3J,EAAgB,QAAQ,GAAM,EAChC,IAEJ5f,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,+BAK3DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC2E,KAAM,CAACG,MAAM,OAAO2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAAEgC,KAAK,SAAQtI,SACrEH,EAAE,yBAKjB,KCnGM4tD,GAAqCl0D,YAAGC,QAAAC,YAAA,wOAiF/BkG,I,GAAAA,iBAAkB6C,aAtEjC,SAA2C5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAClDsI,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,gBAGvF5jC,EAAkCC,YAAY25C,GAAoC,CAChFx8B,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrConD,EAEL15C,YAAAH,EAAA,GAF4B,GAI9B,OACE5T,eAAC0tD,GAAmC,CAAA3tD,SAClCC,eAACgU,KAAM,CACLC,cAAe,CACbvB,kBAAkB,IAAIxP,MAAOqC,cAC7BwN,mBAAmB,IAAI7P,MAAOgR,WAAa,EAC3CiL,OAAQ,EACRtW,YAAa,GACb6gB,KAAM,IAERvV,iBAAkBm5C,GAClBl5C,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZo5C,EAAwB,CAAEhiD,UAAW,CACnC8I,MAAO,CACLuuC,oBAAqBtL,EACrB9kC,iBAAkB2B,EAAO3B,iBACzBK,kBAAmBsB,EAAOtB,kBAC1BoM,OAAQ9K,EAAO8K,OACftW,YAAawL,EAAOxL,YACpB6gB,KAAMrV,EAAOqV,OAEdhV,eAAgB,CACf,CAACC,MAAOk4C,GAA2CphD,UAAW,CAC5Dq3C,oBAAqBtL,OAG1B5iC,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,gEAAkE,CAC/EmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC2tD,GAAmC,CAClC36C,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EACX+9B,UAAU,UACV,KAKZ,KC9EMwpB,GAAwCt0D,YAAGC,QAAAC,YAAA,wOAyGlCkG,I,SAAAA,iBAAkB6C,aA9FjC,SAA4C5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MACnDmU,EAAKnU,EAAM2K,OAAOwJ,GAClB7L,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,gBAEvFl0C,EAAkCC,YAASupD,GAA0C,CACnFrhD,UAAW,CACT8L,GAAIA,KAFA3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAMxB8R,EAAqCC,YAAY+5C,GAAuC,CACtF58B,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrCwnD,EAEL95C,YAAAH,EAAA,GAF+B,GAIjC,GAAIhS,EAAS,OACX5B,eAAC0tD,GAAmC,CAAA3tD,SAChCC,eAAA,KAAAD,SAAIH,EAAE,iCAIZ,GAAIiC,EACF,OACEvB,gBAACotD,GAAmC,CAAA3tD,SAAA,CAC9BzH,QAAQC,IAAIsJ,GACd7B,eAAA,KAAAD,SAAIH,EAAE,iCAKd,IAAMkuD,EAA8BhsD,EAAKgsD,4BAGzC,OACE9tD,eAAC0tD,GAAmC,CAAA3tD,SAClCC,eAACgU,KAAM,CACLC,cAAe,CACbvB,iBAAkBo7C,EAA4Bp7C,iBAC9CK,kBAAmB+6C,EAA4B/6C,kBAC/CoM,OAAQ2uC,EAA4B3uC,OACpCtW,YAAailD,EAA4BjlD,YACzC6gB,KAAMokC,EAA4BpkC,MAEpCvV,iBAAkBm5C,GAClBl5C,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZw5C,EAA2B,CAAEpiD,UAAW,CACtC8I,MAAO,CACLgD,GAAIA,EACJ7E,iBAAkB2B,EAAO3B,iBACzBK,kBAAmBsB,EAAOtB,kBAC1BoM,OAAQ9K,EAAO8K,OACftW,YAAawL,EAAOxL,YACpB6gB,KAAMrV,EAAOqV,OAEdhV,eAAgB,CACf,CAACC,MAAOk4C,GAA2CphD,UAAW,CAC5Dq3C,oBAAqBtL,OAG1B5iC,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,iEAAmE,CAChFmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC2tD,GAAmC,CAClC36C,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EACX+9B,UAAU,UACV,KAKZ,KCnHa2pB,GAAwCz0D,YAAGC,QAAAC,YAAA,ugBAyB3Cw0D,GAAuC10D,YAAGI,QAAAF,YAAA,qMAe1Cy0D,GAAoC30D,YAAGK,QAAAH,YAAA,gLCMrCkG,qBAAkB6C,aAnCjC,SAA2C5C,GAA2B,IAAzBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBmU,GAAF5X,EAAP0D,QAAW1D,EAAF4X,IACxDigC,EAAiBp0C,EAAM2K,OAAO0pC,gBACpC7jC,EAAyCC,YAAYo6C,IAA9CC,EAAgFn6C,YAAAH,EAAA,GAAlD,GAC/Bs5C,EAAa,CACjBpK,oBAAqBtL,GAGvB,OACEx3C,eAAA,UAAQE,UAAU,2CAChBqG,MAAO3G,EAAE,kBACT6Q,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,6DACduZ,eAAgBnZ,eAAA,QAChBoZ,WAAYxZ,EAAE,yDACdgb,eAAgBszC,EAChB50C,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIA,IAGR7C,eAAgB,CACd,CAAEC,MAAOo5C,GAAuCtiD,UAAWyhD,MAIrE,EAAEntD,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,aAG7B,KCyFe1G,qBAAkB6C,aAjHjC,SAAsC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAEnC0X,GAFiDnb,EAAP0D,QAC5BI,qBAAWxC,IACA6Z,YAEzBpP,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,kBAC5C8gD,EAAY,SAEZpuB,EAAuBp+B,eAACyW,GAAS,CACrCL,OAAM,uBAAAtH,OAAyBpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,eAC7Et3C,UAAU,SAGZoD,EAA4CC,YAASwqD,GAAuC,CAC1FtiD,UAAW,CACTq3C,oBAAqBtL,KAFjB51C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAM9B,GAAIzP,EAAS,OACX5B,eAACmtD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SACrHH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC6sD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SAAA,CACtHC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAM42B,EAA4BrsD,EAAKqsD,0BACjCz+C,EAAW5N,EAAKqsD,0BAA0Bz+C,SAGhD,OAAKy+C,EAA0B/kD,MAAMjK,OA+BnCmB,gBAAC6sD,GAA+B,CAC9BX,UAAWA,EACX98C,SAAUA,EACVG,WA5Be,WACjBwB,EAAU,CACR5F,UAAW,CACTgG,MAAO08C,EAA0Bz+C,SAASgC,WAE5CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBs8C,0BAA0B/kD,MACrDsG,EAAWmC,EAAgBs8C,0BAA0Bz+C,SAE3D,OAAOoC,EAAS3S,OACZ,CAGEgvD,0BAA2B,CACzBp8C,WAAYH,EAAeu8C,0BAA0Bp8C,WACrD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeu8C,0BAA0B/kD,OAAK4I,aAAKF,IAC/DpC,aAGJkC,CACN,GAEJ,EAOIvL,UAAWA,EACX+3B,qBAAsBA,EAAqBr+B,SAAA,CAE3CC,eAAA,SACAM,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,yBACpBI,eAACiS,KAAMC,UAAS,MAJFrF,kBAOlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNouD,EAA0B/kD,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC1CjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,KAEjC9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKuY,SAASlW,OAAOkP,KAE/B9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAA,OAAKwM,wBAAyB,CAACC,OAAQC,KAAUC,SAASpD,EAAKV,kBAEjEvI,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyBpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,iBAAA1oC,OAAgBvF,EAAKgO,IAAKxX,SACvGC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAACouD,GAAkC,CAAC72C,GAAIhO,EAAKgO,UAjBjC1K,eAmBJ,YApEtB7M,eAACmtD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SACtHC,eAACkH,KAAKC,KAAI,CAAApH,SAAEH,EAAE,wDAyEpB,KCjIayuD,GAAoC77C,OAAaC,MAAM,CAClEoP,UAAWrP,OACRG,SAAS/S,YAAE,uBACdkiB,QAAStP,OACNG,SAAS/S,YAAE,yBCgBDF,qBAAkB6C,aAdjC,SAAyC5C,GAAIA,EAADC,EAAUD,EAAP0D,QAA4B,IAAnBD,EAAKzD,EAALyD,MAAOrD,EAAQJ,EAARI,SAEvD2L,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,YAEvF,OACEx3C,eAAC4sD,GAA2B,CAACJ,UANb,SAMmCnmD,UAAWA,EAAUtG,SACrEA,GAGP,KCkFeL,I,GAAAA,iBAAkB6C,aApFjC,SAAyC5C,GAYxC,IAEK4G,EAbJ3G,EAACD,EAADC,EACAyD,EAAO1D,EAAP0D,QAEA2P,GADKrT,EAALyD,MACYzD,EAAZqT,cACAC,EAAMtT,EAANsT,OACAoB,EAAM1U,EAAN0U,OAEAhO,GADS1G,EAATggB,UACShgB,EAAT0G,WACAuZ,EAAejgB,EAAfigB,gBACAC,EAAalgB,EAAbkgB,cAAa0tC,EAAA5tD,EACbykC,UAUA,OALE79B,EAAQ3G,EADS,iBAJV,IAAA2tD,EAAC,SAAQA,GAKN,6CAEA,+CAIVjtD,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKwG,IACLjG,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO4O,UAAa,0BAA4B,eAC5DjG,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO6O,QAAW,0BAA4B,eAC1DlG,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,IAEhD5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAI9DF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACTO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACkpB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,cACbC,aAAchV,EAAOxL,YACrBjQ,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,cAAeqG,EAAE7gB,OAAOkkB,cACtC3J,EAAgB,eAAe,GAAM,EACvC,IAEJ5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,+BAKlEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC2E,KAAM,CAACG,MAAM,OAAO2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAAEgC,KAAK,SAAQtI,SACrEH,EAAE,yBAKjB,KCpFM0uD,GAAiCh1D,YAAGC,QAAAC,YAAA,4NA4E3BkG,I,GAAAA,iBAAkB6C,aAjEjC,SAAwC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAC/CsI,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,YAGvF5jC,EAA+BC,YAAYy6C,GAAgC,CACzEt9B,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrCkoD,EAELx6C,YAAAH,EAAA,GAFyB,GAI3B,OACE5T,eAACwuD,GAAgC,CAAAzuD,SAC/BC,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAW,IAAI3e,KACf2F,YAAa,IAEfsL,iBAAkBk6C,GAClBj6C,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZk6C,EAAqB,CAAE9iD,UAAW,CAChC8I,MAAO,CACLuuC,oBAAqBtL,EACrB31B,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASxD,GAAejK,EAAOyN,SAC/BjZ,YAAawL,EAAOxL,cAErB6L,eAAgB,CACf,CAACC,MAAOo5C,GAAuCtiD,UAAW,CACxDq3C,oBAAqBtL,OAG1B5iC,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,4DAA8D,CAC3EmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACyuD,GAAgC,CAC/Bz7C,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EACX+9B,UAAU,UACV,KAKZ,KCzEMsqB,GAAoCp1D,YAAGC,QAAAC,YAAA,4NAoG9BkG,I,eAAAA,iBAAkB6C,aAzFjC,SAAyC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAChDmU,EAAKnU,EAAM2K,OAAOwJ,GAClB7L,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,YAEvFl0C,EAAkCC,YAASyqD,GAAsC,CAC/EviD,UAAW,CACT8L,GAAIA,KAFA3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAMxB8R,EAAkCC,YAAY66C,GAAmC,CAC/E19B,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrCsoD,EAEL56C,YAAAH,EAAA,GAF4B,GAI9B,GAAIhS,EAAS,OACX5B,eAACwuD,GAAgC,CAAAzuD,SAC7BC,eAAA,KAAAD,SAAIH,EAAE,iCAIZ,GAAIiC,EACF,OACEvB,gBAACkuD,GAAgC,CAAAzuD,SAAA,CAC3BzH,QAAQC,IAAIsJ,GACd7B,eAAA,KAAAD,SAAIH,EAAE,iCAKd,IAAMgvD,EAA2B9sD,EAAK8sD,yBAEtC,OACE5uD,eAACwuD,GAAgC,CAAAzuD,SAC/BC,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAW,IAAI3e,KAAK0rD,EAAyB/sC,WAC7CC,QAAS,IAAI5e,KAAK0rD,EAAyB9sC,SAC3CjZ,YAAa+lD,EAAyB/lD,aAExCsL,iBAAkBk6C,GAClBj6C,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZs6C,EAAwB,CAAEljD,UAAW,CACnC8I,MAAO,CACLgD,GAAIA,EACJsK,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASxD,GAAejK,EAAOyN,SAC/BjZ,YAAawL,EAAOxL,cAErB6L,eAAgB,CACf,CAACC,MAAOo5C,GAAuCtiD,UAAW,CACxDq3C,oBAAqBtL,OAG1B5iC,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,6DAA+D,CAC5EmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACyuD,GAAgC,CAC/Bz7C,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EACX+9B,UAAU,UACV,KAKZ,KC/GayqB,GAAyCv1D,YAAGC,QAAAC,YAAA,soCAyD5Cs1D,GAAwCx1D,YAAGI,QAAAF,YAAA,0MAc3Cu1D,GAAkCz1D,YAAGK,QAAAH,YAAA,gOAWrCw1D,GAAqC11D,YAAGO,QAAAL,YAAA,gOAWxCy1D,GAAqC31D,YAAGQ,QAAAN,YAAA,mLCzCtCkG,qBAAkB6C,aAxCjC,SAA4C5C,GAA2B,IAAzBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBmU,GAAF5X,EAAP0D,QAAW1D,EAAF4X,IACzD7L,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBACpC7jC,EAA0CC,YAAYo7C,IAA/CC,EAAkFn7C,YAAAH,EAAA,GAAnD,GAChCs5C,EAAa,CACjBpK,oBAAqBtL,GAGvB,OACEx3C,eAAA,UAAQE,UAAU,2CAChBqG,MAAO3G,EAAE,kBACT6Q,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,8DACduZ,eAAgBnZ,eAAA,QAChBoZ,WAAYxZ,EAAE,0DACdgb,eAAgBs0C,EAChB51C,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIA,IAGR7C,eAAgB,CACd,CAAEC,MAAOk6C,GAAwCpjD,UAAWyhD,GAC5D,CAAEv4C,MAAO0tC,GAAgC52C,UAAW,CAClDC,UAAWA,EACX6L,GAAIigC,OAKhB,EAAEz3C,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,aAG7B,KCqHe1G,qBAAkB6C,aA/IjC,SAAuC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACpCqxB,GADkD90B,EAAP0D,QAC7BI,qBAAWxC,KACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBAEzBO,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,kBAC5C8gD,EAAY,UAEZpuB,EAAuBp+B,eAACyW,GAAS,CACrCL,OAAM,uBAAAtH,OAAyBpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,gBAC7Et3C,UAAU,SAGZoD,EAA4CC,YAASsrD,GAAwC,CAC3FpjD,UAAW,CACTq3C,oBAAqBtL,KAFjB51C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAM9B,GAAIzP,EAAS,OACX5B,eAACmtD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SACrHH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC6sD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SAAA,CACtHC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAM43B,EAA6BrtD,EAAKqtD,2BAClCrM,EAAsBhhD,EAAKghD,oBAC3BpzC,EAAW5N,EAAKqtD,2BAA2Bz/C,SAGjD,OAAIozC,EAAoBhf,yBAAyB8D,UAC/C5nC,eAACmtD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SACtHC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAAC4G,KAAKokB,MAAK,CAACxmB,MAAM,UAAS/E,SAAA,CACzBC,eAACmG,KAAI,CAACC,KAAK,UAAU,IAAExG,EAAE,4DAO5BuvD,EAA2B/lD,MAAMjK,QAMtC7G,QAAQwzD,MAAMhqD,GA2BZxB,gBAAC6sD,GAA+B,CAC9BX,UAAWA,EACX98C,SAAUA,EACVG,WA5BJ,WACEwB,EAAU,CACR5F,UAAW,CACTgG,MAAO09C,EAA2Bz/C,SAASgC,WAE7CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBs9C,2BAA2B/lD,MACtDsG,EAAWmC,EAAgBs9C,2BAA2Bz/C,SAE5D,OAAOoC,EAAS3S,OACZ,CAGEgwD,2BAA4B,CAC1Bp9C,WAAYH,EAAeu9C,2BAA2Bp9C,WACtD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeu9C,2BAA2B/lD,OAAK4I,aAAKF,IAChEpC,aAGJkC,CACN,GAEJ,EAOIvL,UAAWA,EACX+3B,qBAAsBA,EAAqBr+B,SAAA,CAE3CC,eAAA,SACAM,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,MAJFrF,kBAOlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNovD,EAA2B/lD,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC3CjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACP4L,KAAOpC,EAAKipB,WAAW5mB,OAAOkP,GAAY,IAAC9a,eAAA,SAC5CA,eAAA,SAAOE,UAAU,aAAYH,SAC3BC,eAAA,OAAKwM,wBAAyB,CAACC,OAAQC,KAAUC,SAASpD,EAAKV,kBAE/DU,EAAK6lD,YAAe9uD,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAC,iBAAe4L,KAAOpC,EAAK6lD,YAAYxjD,OAAOkP,SAEpGxa,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACP4L,KAAOpC,EAAK8lD,YAAYzjD,OAAOkP,GAAY,IAAC9a,eAAA,SAC3CuJ,EAAK+lD,UAAY/lD,EAAKgmD,uBAA0BvvD,eAACuI,KAAK,CAACzD,MAAM,SAAQ/E,SAAEH,EAAE,qBAA8B,MAE3GI,eAACiS,KAAMxM,IAAG,CAAA1F,SAENwJ,EAAKgmD,wBAA0BjvD,gBAAA,QAAAP,SAAA,CAC9B4L,KAAOpC,EAAKgmD,uBAAuBxiD,MAAMnB,OAAOkP,GAAY,IAAE,IAC9DnP,KAAO,GAADmD,OAAIvF,EAAKgmD,uBAAuBxiD,KAAI,KAAA+B,OAAIvF,EAAKgmD,uBAAuB3N,aAAax0C,YACrFxB,OAAOV,GAAY,IAAE,IACvB,MACA3B,EAAKgmD,uBAAuB3N,aAAa95C,sBAAsB1B,KAAK,IAACpG,eAAA,SACtEA,eAAA,SAAOE,UAAU,aAAYH,SAC1BwJ,EAAKgmD,uBAAuB3N,aAAaz0C,yBAAyBnF,qBAAqB5B,YAI9F9F,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyBpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,kBAAA1oC,OAAiBvF,EAAKgO,IAAKxX,SACxGC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAACwvD,GAAmC,CAACj4C,GAAIhO,EAAKgO,UAhClC1K,eAkCJ,aArFtB7M,eAACmtD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SACtHC,eAACkH,KAAKC,KAAI,CAAApH,SAAEH,EAAE,yDA0FpB,KCnKa6vD,GAAyCj9C,OAAaC,MAAM,CACvE0M,OAAQ3M,OACLG,SAAS/S,YAAE,uBACXiT,IAAI,GACJC,IAAI,OAGI48C,GAA0Cl9C,OAAaC,MAAM,CACxE48C,WAAY78C,OACTG,SAAS/S,YAAE,yBCSDF,qBAAkB6C,aAdjC,SAA0C5C,GAAIA,EAADC,EAAUD,EAAP0D,QAA4B,IAAnBD,EAAKzD,EAALyD,MAAOrD,EAAQJ,EAARI,SAExD2L,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,aAEvF,OACEx3C,eAAC4sD,GAA2B,CAACJ,UANb,UAMmCnmD,UAAWA,EAAUtG,SACrEA,GAGP,KCiDeL,qBAAkB6C,aAtDjC,SAA6C5C,GAQ5C,IAPCC,EAACD,EAADC,EACAyD,EAAO1D,EAAP0D,QAEA2P,GADKrT,EAALyD,MACYzD,EAAZqT,cACAC,EAAMtT,EAANsT,OACA5M,EAAS1G,EAAT0G,UAIA,OACE/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,iDACPI,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACTO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,SACJ8B,KAAK,SACLlG,UAAY+S,EAAOkM,OAAU,0BAA4B,eACzD5L,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,4BAI7DF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACR8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACjBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,+BAKpEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC2E,KAAM,CAACG,MAAM,OAAO2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAAEgC,KAAK,SAAQtI,SACrEH,EAAE,yBAKf,KCceF,qBAAkB6C,aAhEjC,SAAyC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAChDsI,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,aAEvF5jC,EAAgCC,YAAYk7C,GAAiC,CAC3E/9B,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrCspD,EAEL57C,YAAAH,EAAA,GAF0B,GAI5B,OACE5T,eAAC4vD,GAAiC,CAAA7vD,SAChCC,eAACgU,KAAM,CACLC,cAAe,CACbkL,OAAQ,EACRtW,YAAa,IAEfsL,iBAAkBs7C,GAClBr7C,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZs7C,EAAsB,CAAElkD,UAAW,CACjC8I,MAAO,CACLuuC,oBAAqBtL,EACrBr4B,OAAQxH,SAAStD,EAAO8K,QACxBtW,YAAawL,EAAOxL,cAErB6L,eAAgB,CACf,CAACC,MAAOk6C,GAAwCpjD,UAAW,CACzDq3C,oBAAqBtL,IAEvB,CAAC7iC,MAAO0tC,GAAgC52C,UAAW,CACjDC,UAAWA,EACX6L,GAAIigC,OAGT5iC,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,6DAA+D,CAC5EmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAAC6vD,GAAoC,CACnC78C,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,KAKZ,KCWe3G,qBAAkB6C,aAxEjC,SAA0C5C,GAYzC,IAEK4G,EAbJ3G,EAACD,EAADC,EACAyD,EAAO1D,EAAP0D,QAEA2P,GADKrT,EAALyD,MACYzD,EAAZqT,cACAC,EAAMtT,EAANsT,OACAoB,EAAM1U,EAAN0U,OAEAhO,GADS1G,EAATggB,UACShgB,EAAT0G,WACAuZ,EAAejgB,EAAfigB,gBACAC,EAAalgB,EAAbkgB,cAAa0tC,EAAA5tD,EACbykC,UAWA,OANE79B,EAAQ3G,EADS,iBAJV,IAAA2tD,EAAC,SAAQA,GAKN,8CAEA,gDAKVjtD,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKwG,IACLvG,eAACI,KAAKC,IAAG,CAAAN,SAEPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAOo8C,WAAc,0BAA4B,eAC7DzzC,SAAUvH,EAAOg7C,WACjBvzC,SAAU,SAAC/O,GACT8S,EAAc,aAAc9S,GAC5B6S,EAAgB,cAAc,EAChC,EACA5D,OAAQ,kBAAM4D,EAAgB,cAAc,EAAK,IAEnD5f,eAACwT,KAAY,CAACpN,KAAK,aAAaqN,UAAU,OAAOvT,UAAU,4BAIjEF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACR8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACjBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,+BAKpEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC2E,KAAM,CAACG,MAAM,OAAO2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAAEgC,KAAK,SAAQtI,SACrEH,EAAE,yBAKjB,KC4BeF,I,MAAAA,iBAAkB6C,aA9FjC,SAA0C5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MACjDmU,EAAKnU,EAAM2K,OAAOwJ,GAClB7L,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,aAEvFl0C,EAAkCC,YAASurD,GAAuC,CAChFrjD,UAAW,CACT8L,GAAIA,KAFA3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAMxB8R,EAAmCC,YAAYm7C,GAAoC,CACjFh+B,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrCypD,EAEL/7C,YAAAH,EAAA,GAF6B,GAI/B,GAAIhS,EAAS,OACX5B,eAAC4vD,GAAiC,CAAA7vD,SAC9BC,eAAA,KAAAD,SAAIH,EAAE,iCAIZ,GAAIiC,EACF,OACEvB,gBAACsvD,GAAiC,CAAA7vD,SAAA,CAC5BzH,QAAQC,IAAIsJ,GACd7B,eAAA,KAAAD,SAAIH,EAAE,iCAKdtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAMiuD,EAA4BjuD,EAAKiuD,0BAGvC,OACE/vD,eAAC4vD,GAAiC,CAAA7vD,SAChCC,eAACgU,KAAM,CACLC,cAAe,CACbo7C,WAAY,IAAInsD,KAAK6sD,EAA0BV,YAC/CxmD,YAAaknD,EAA0BlnD,aAEzCsL,iBAAkBu7C,GAClBt7C,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZy7C,EAAyB,CAAErkD,UAAW,CACpC8I,MAAO,CACLgD,GAAIA,EACJ83C,WAAY/wC,GAAejK,EAAOg7C,YAClCxmD,YAAawL,EAAOxL,cAErB6L,eAAgB,CACf,CAACC,MAAOk6C,GAAwCpjD,UAAW,CACzDq3C,oBAAqBtL,IAEvB,CAAC7iC,MAAO0tC,GAAgC52C,UAAW,CACjDC,UAAWA,EACX6L,GAAIigC,OAGT5iC,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,8DAAgE,CAC7EmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACgwD,GAAqC,CACpCh9C,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EACX+9B,UAAU,UACV,KAKZ,KC5Ga6rB,GAAiC32D,YAAGC,QAAAC,YAAA,ooBA8BpC8gB,GAAyBhhB,YAAGI,QAAAF,YAAA,gXCqB1BkG,qBAAkB6C,aAvCjC,SAA6C5C,GAA2B,IAAzBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBmU,GAAF5X,EAAP0D,QAAW1D,EAAF4X,IAC1DigC,EAAiBp0C,EAAM2K,OAAO0pC,gBACpC7jC,EAA2CC,YAAYgQ,IAAhDqsC,EAAuEn8C,YAAAH,EAAA,GAAvC,GACjCs5C,EAAa,CACjBpK,oBAAqBtL,GAGvB,OACEx3C,eAAA,UAAQE,UAAU,2CAChBqG,MAAO3G,EAAE,kBACT6Q,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,uCACduZ,eAAgBnZ,eAAA,QAChBoZ,WAAYxZ,EAAE,4BACdgb,eAAgBs1C,EAChB52C,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIA,IAGR7C,eAAgB,CACd,CAAEC,MAAOs7C,GAAgCxkD,UAAWyhD,MAQ9D,EAAEntD,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,aAG7B,KC6Ge1G,qBAAkB6C,aAxIjC,SAAwC5C,GAAiC,IAA/BC,EAACD,EAADC,EAAGoe,EAAQre,EAARqe,SAAU5a,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACtDqI,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,kBAC5C8gD,EAAY,WAEZpuB,EAAuBp+B,eAACyW,GAAS,CACrCL,OAAM,uBAAAtH,OAAyBpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,iBAC7Et3C,UAAU,SAGZoD,EAA4CC,YAAS0sD,GAAgC,CACnFxkD,UAAW,CACTq3C,oBAAqBtL,KAFjB51C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAM9B,GAAIzP,EAAS,OACX5B,eAACmtD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SACrHH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC6sD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SAAA,CACtHC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAIdj/B,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAEZzD,aAAaC,QAAQC,EAAKvD,6BAA8BgjB,EAASoH,UAEjE,IAAM+qC,EAAsBruD,EAAKquD,oBAC3BzgD,EAAW5N,EAAKquD,oBAAoBzgD,SAI1C,OAAKygD,EAAoB/mD,MAAMjK,OAwC7BmB,gBAAC6sD,GAA+B,CAC9BX,UAAWA,EACX98C,SAAUA,EACVG,WA5Be,WACjBwB,EAAU,CACR5F,UAAW,CACTgG,MAAO0+C,EAAoBzgD,SAASgC,WAEtCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBs+C,oBAAoB/mD,MAC/CsG,EAAWmC,EAAgBs+C,oBAAoBzgD,SAErD,OAAOoC,EAAS3S,OACZ,CAGEgxD,oBAAqB,CACnBp+C,WAAYH,EAAeu+C,oBAAoBp+C,WAC/C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeu+C,oBAAoB/mD,OAAK4I,aAAKF,IACzDpC,aAGJkC,CACN,GAEJ,EAOIvL,UAAWA,EACX+3B,qBAAsBA,EAAqBr+B,SAAA,CAE3CC,eAAA,SACAM,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBU,gBAAC2R,KAAMC,UAAS,CAAAnS,SAAA,CAAEH,EAAE,mCAAmC,MAAIA,EAAE,+BAC7DU,gBAAC2R,KAAMC,UAAS,CAAAnS,SAAA,CAAEH,EAAE,yBAAyB,MAAIA,EAAE,2BAEnDI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,MAPFrF,kBAUlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNowD,EAAoB/mD,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACpCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACwjB,GAAqB,CAAC9a,OAAQa,EAAKuc,eAAepd,UADrCmE,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKuc,eAAepB,cAAc,IAAC1kB,eAAA,SACpCA,eAAC2kB,KAAKC,MAAK,CAAC9f,MAAM,OAAM/E,SAAEwJ,EAAKuc,eAAe3K,QAAQ0J,MAAM,QAF9ChY,gBAKhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACP4L,KAAOpC,EAAKuc,eAAed,UAAUpZ,OAAO,MAAM,IAAC5L,eAAA,SACnD2L,KAAOpC,EAAKuc,eAAeb,SAASrZ,OAAO,QAF9BiB,gBAIhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKuc,eAAeZ,cADPrY,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKuc,eAAeX,gBADPtY,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC2E,KAAM,CAACzE,UAAU,SACVuQ,QAAS,kBAAMpN,EAAQnB,KAAK,0BAA4BqH,EAAKuc,eAAevO,GAAG,EAC/EzS,MAAM,YAAW/E,SACtBH,EAAE,kBAELI,eAACowD,GAAoC,CAAC74C,GAAIhO,EAAKuc,eAAevO,OANzB1K,kBAnBzBA,eA2BJ,YAxFtB7M,eAACmtD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SAEtHC,eAACkH,KAAKC,KAAI,CAAApH,SAAEH,EAAE,0DA4FpB,KC1JaywD,GAAsC79C,OAAaC,MAAM,CACpEid,oBAAqBld,OAClBG,SAAS/S,YAAE,uBACd8S,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,MCGMpT,qBAAkB6C,aAXjC,SAA8C5C,GAAIA,EAADC,EAAUD,EAAP0D,QAAc1D,EAALyD,MAAmB,IAAZrD,EAAQJ,EAARI,SAGlE,OACEC,eAAC4sD,GAA2B,CAACJ,UAHb,WAGkCzsD,SAC/CA,GAGP,KCkFeL,qBAAkB6C,aAlFjC,SAA8C5C,GAY7C,IAXCC,EAACD,EAADC,EAGAoT,GAFOrT,EAAP0D,QACK1D,EAALyD,MACYzD,EAAZqT,cACAC,EAAMtT,EAANsT,OAEA0M,GADMhgB,EAAN0U,OACS1U,EAATggB,WACAtZ,EAAS1G,EAAT0G,UAMME,GALS5G,EAAfigB,gBACajgB,EAAbkgB,cAAalgB,EACbykC,UAGcxkC,EAAE,iDAEhB,OACEU,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKwG,IACLjG,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iCAAiCG,SAAA,CACpDO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,sBACLlG,UAAY+S,EAAOyc,oBAAuB,0BAA4B,eACtEnc,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAUiP,qBAAqBxlB,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC/CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,sBAAsBqN,UAAU,OAAOvT,UAAU,wBAEtEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,UACLlG,UAAY+S,EAAOkI,QAAW,0BAA4B,eAC1D5H,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,wBAE1DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,6BAA6BG,SAAA,CAChDC,eAACsT,KAAK,CAAChP,KAAK,SACJ8B,KAAK,mBACLlG,UAAY+S,EAAOP,iBAAoB,0BAA4B,eACnEa,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,0BAGrEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,8BAA8BG,SAAA,CACjDC,eAACsT,KAAK,CAAChP,KAAK,SACJ8B,KAAK,oBACLlG,UAAY+S,EAAOF,kBAAqB,0BAA4B,eACpEQ,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,gCAK1EI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAETH,EAAE,2BAMnB,KCqBeF,I,SAAAA,iBAAkB6C,aAlGjC,SAA0C5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MACjDsI,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,cAEvFl0C,EAAsEC,YAAS+W,IAA9DqW,EAAYrtB,EAArB1B,QAA8BgvB,EAAUttB,EAAjBzB,MAAyByuD,EAAShtD,EAAfxB,KAElD8R,EAA8BC,YAAY4zC,GAAwB,CAChEz2B,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADpCkqD,EAENx8C,YAAAH,EAAA,GAFuB,GAKvB,OAAI+c,EACF3wB,eAACwwD,GAAqC,CAAAzwD,SACpCC,eAAA,KAAAD,SAAIH,EAAE,iCAINgxB,GACFt4B,QAAQC,IAAIq4B,GAEV5wB,eAACwwD,GAAqC,CAAAzwD,SACpCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZtH,QAAQC,IAAI+3D,GAGZtwD,eAACwwD,GAAqC,CAAAzwD,SACpCC,eAACgU,KAAM,CACLC,cAAe,CACbyb,oBAAqB,GACrBvU,QAAS,GACTzI,kBAAkB,IAAIxP,MAAOqC,cAC7BwN,mBAAmB,IAAI7P,MAAOgR,WAAa,GAE7CC,iBAAkBk8C,GAClBj8C,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZk8C,EAAkB,CAAE9kD,UAAW,CAC7B8I,MAAO,CACLuQ,QAASpZ,EACTo3C,oBAAqBtL,EACrB9nB,oBAAqBrb,EAAOqb,oBAC5Bhd,iBAAkB2B,EAAO3B,iBACzBK,kBAAmBsB,EAAOtB,kBAC1BoI,QAAS9G,EAAO8G,UAEjBzG,eAAgB,CACf,CAACC,MAAOs7C,GAAgCxkD,UAAW,CACjDq3C,oBAAqBtL,OAO1B5iC,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB,IAAM2uD,EAAmB3uD,EAAKgmD,qBAAqBhiC,eAAevO,GAClElU,EAAQnB,KAAK,0BAAD4M,OAA2B2hD,IACvC57C,KAAMC,QAASlV,EAAE,8DAAgE,CAC/EmV,SAAUF,KAAMG,SAASC,eAE3BJ,KAAMC,QAASlV,EAAE,sEAAwE,CACvFmV,SAAUF,KAAMG,SAASC,cAE7B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC0wD,GAAqC,CACpC/wC,UAAW2wC,EACXt9C,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EACX+9B,UAAU,UACV,MAKZ,KC/GausB,GAAwCr3D,YAAGC,QAAAC,YAAA,ugBAyB3Co3D,GAAuCt3D,YAAGI,QAAAF,YAAA,qMAe1Cq3D,GAAoCv3D,YAAGK,QAAAH,YAAA,gLCMrCkG,qBAAkB6C,aAnCjC,SAA2C5C,GAA2B,IAAzBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBmU,GAAF5X,EAAP0D,QAAW1D,EAAF4X,IACxDigC,EAAiBp0C,EAAM2K,OAAO0pC,gBACpC7jC,EAAyCC,YAAYg9C,IAA9CC,EAAgF/8C,YAAAH,EAAA,GAAlD,GAC/Bs5C,EAAa,CACjBpK,oBAAqBtL,GAGvB,OACEx3C,eAAA,UAAQE,UAAU,2CAChBqG,MAAO3G,EAAE,kBACT6Q,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,6DACduZ,eAAgBnZ,eAAA,QAChBoZ,WAAYxZ,EAAE,yDACdgb,eAAgBk2C,EAChBx3C,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIA,IAGR7C,eAAgB,CACd,CAAEC,MAAOg8C,GAAuCllD,UAAWyhD,MAIrE,EAAEntD,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,aAG7B,KCsGe1G,qBAAkB6C,aA7HjC,SAAsC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACnCqxB,GADiD90B,EAAP0D,QAC5BI,qBAAWxC,KACzB6Z,EAAa2Z,EAAY3Z,WAC/BxiB,QAAQC,IAAIk8B,GAEZ,IAAM/oB,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,kBAC5C8gD,EAAY,SAEZpuB,EAAuBp+B,eAACyW,GAAS,CACrCL,OAAM,uBAAAtH,OAAyBpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,eAC7Et3C,UAAU,SAGZoD,EAA4CC,YAASotD,GAAuC,CAC1FllD,UAAW,CACTq3C,oBAAqBtL,KAFjB51C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAM9B,GAAIzP,EAAS,OACX5B,eAACmtD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SACrHH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC6sD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SAAA,CACtHC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAMw5B,EAA4BjvD,EAAKivD,0BACjCrhD,EAAW5N,EAAKivD,0BAA0BrhD,SAGhD,OAAKqhD,EAA0B3nD,MAAMjK,OAyCnCmB,gBAAC6sD,GAA+B,CAC9BX,UAAWA,EACX98C,SAAUA,EACVG,WA5Be,WACjBwB,EAAU,CACR5F,UAAW,CACTgG,MAAOs/C,EAA0BrhD,SAASgC,WAE5CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBk/C,0BAA0B3nD,MACrDsG,EAAWmC,EAAgBk/C,0BAA0BrhD,SAE3D,OAAOoC,EAAS3S,OACZ,CAGE4xD,0BAA2B,CACzBh/C,WAAYH,EAAem/C,0BAA0Bh/C,WACrD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAem/C,0BAA0B3nD,OAAK4I,aAAKF,IAC/DpC,aAGJkC,CACN,GAEJ,EAOIvL,UAAWA,EACX+3B,qBAAsBA,EAAqBr+B,SAAA,CAE3CC,eAAA,SACAM,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CAERC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,yBACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNgxD,EAA0B3nD,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC1CjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,KAEjC9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKuY,SAASlW,OAAOkP,KAE/B9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACVC,eAAA,OAAKwM,wBAAyB,CAACC,OAAQC,KAAUC,SAASpD,EAAKV,kBAE/DvI,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,uBAAA0M,OAAyBpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,iBAAA1oC,OAAgBvF,EAAKgO,IAAKxX,SACvGC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAACgxD,GAAkC,CAACz5C,GAAIhO,EAAKgO,UAjBjC1K,eAmBJ,YA/EtB7M,eAACmtD,GAA+B,CAACX,UAAWA,EAAWnmD,UAAWA,EAAW+3B,qBAAsBA,EAAqBr+B,SAGtHC,eAACkH,KAAKC,KAAI,CAAApH,SAAEH,EAAE,wDAkFpB,KC9IaqxD,GAAoCz+C,OAAaC,MAAM,CAClEoP,UAAWrP,OACRG,SAAS/S,YAAE,uBACdkiB,QAAStP,OACNG,SAAS/S,YAAE,yBCcDF,qBAAkB6C,aAdjC,SAAyC5C,GAAIA,EAADC,EAAUD,EAAP0D,QAA4B,IAAnBD,EAAKzD,EAALyD,MAAOrD,EAAQJ,EAARI,SAEvD2L,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,YAEvF,OACEx3C,eAAC4sD,GAA2B,CAACJ,UANb,SAMmCnmD,UAAWA,EAAUtG,SACrEA,GAGP,KCkFeL,I,GAAAA,iBAAkB6C,aApFjC,SAAyC5C,GAYxC,IAEK4G,EAbJ3G,EAACD,EAADC,EACAyD,EAAO1D,EAAP0D,QAEA2P,GADKrT,EAALyD,MACYzD,EAAZqT,cACAC,EAAMtT,EAANsT,OACAoB,EAAM1U,EAAN0U,OAEAhO,GADS1G,EAATggB,UACShgB,EAAT0G,WACAuZ,EAAejgB,EAAfigB,gBACAC,EAAalgB,EAAbkgB,cAAa0tC,EAAA5tD,EACbykC,UAUA,OALE79B,EAAQ3G,EADS,iBAJV,IAAA2tD,EAAC,SAAQA,GAKN,6CAEA,+CAIVjtD,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKwG,IACLjG,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO4O,UAAa,0BAA4B,eAC5DjG,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO6O,QAAW,0BAA4B,eAC1DlG,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,IAEhD5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAI9DF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACTO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACkpB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,cACbC,aAAchV,EAAOxL,YACrBjQ,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,cAAeqG,EAAE7gB,OAAOkkB,cACtC3J,EAAgB,eAAe,GAAM,EACvC,IAEJ5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,+BAKlEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC2E,KAAM,CAACG,MAAM,OAAO2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAAEgC,KAAK,SAAQtI,SACrEH,EAAE,yBAKjB,KClFMsxD,GAAiC53D,YAAGC,QAAAC,YAAA,4NA2E3BkG,I,GAAAA,iBAAkB6C,aAhEjC,SAAwC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAC/CsI,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,YAEvF5jC,EAA+BC,YAAYq9C,GAAgC,CACzElgC,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrC8qD,EAELp9C,YAAAH,EAAA,GAFyB,GAI3B,OACE5T,eAACoxD,GAAgC,CAAArxD,SAC/BC,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAW,IAAI3e,KACf2F,YAAa,IAEfsL,iBAAkB88C,GAClB78C,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZ88C,EAAqB,CAAE1lD,UAAW,CAChC8I,MAAO,CACLuuC,oBAAqBtL,EACrB31B,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASxD,GAAejK,EAAOyN,SAC/BjZ,YAAawL,EAAOxL,cAErB6L,eAAgB,CACf,CAACC,MAAOg8C,GAAuCllD,UAAW,CACxDq3C,oBAAqBtL,OAG1B5iC,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,4DAA8D,CAC3EmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACqxD,GAAgC,CAC/Br+C,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EACX+9B,UAAU,UACV,KAKZ,KCxEMktB,GAAoCh4D,YAAGC,QAAAC,YAAA,4NAoG9BkG,I,MAAAA,iBAAkB6C,aAzFjC,SAAyC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAChDmU,EAAKnU,EAAM2K,OAAOwJ,GAClB7L,EAAYtI,EAAM2K,OAAOswC,WACzB7G,EAAiBp0C,EAAM2K,OAAO0pC,gBAC9BpxC,EAAS,uBAAAyI,OAA0BpD,EAAS,wBAAAoD,OAAuB0oC,EAAc,YAEvFl0C,EAAkCC,YAASqtD,GAAsC,CAC/EnlD,UAAW,CACT8L,GAAIA,KAFA3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAMxB8R,EAAkCC,YAAYy9C,GAAmC,CAC/EtgC,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrCkrD,EAELx9C,YAAAH,EAAA,GAF4B,GAI9B,GAAIhS,EAAS,OACX5B,eAACoxD,GAAgC,CAAArxD,SAC7BC,eAAA,KAAAD,SAAIH,EAAE,iCAIZ,GAAIiC,EACF,OACEvB,gBAAC8wD,GAAgC,CAAArxD,SAAA,CAC3BzH,QAAQC,IAAIsJ,GACd7B,eAAA,KAAAD,SAAIH,EAAE,iCAKd,IAAM4xD,EAA2B1vD,EAAK0vD,yBAEtC,OACExxD,eAACoxD,GAAgC,CAAArxD,SAC/BC,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAW,IAAI3e,KAAKsuD,EAAyB3vC,WAC7CC,QAAS,IAAI5e,KAAKsuD,EAAyB1vC,SAC3CjZ,YAAa2oD,EAAyB3oD,aAExCsL,iBAAkB88C,GAClB78C,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZk9C,EAAwB,CAAE9lD,UAAW,CACnC8I,MAAO,CACLgD,GAAIA,EACJsK,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASxD,GAAejK,EAAOyN,SAC/BjZ,YAAawL,EAAOxL,cAErB6L,eAAgB,CACf,CAACC,MAAOg8C,GAAuCllD,UAAW,CACxDq3C,oBAAqBtL,OAG1B5iC,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,6DAA+D,CAC5EmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACqxD,GAAgC,CAC/Br+C,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EACX+9B,UAAU,UACV,KAKZ,KC9GaqtB,GAAuCn4D,YAAGC,QAAAC,YAAA,0pBAwC1Ck4D,GAAoCp4D,YAAGI,QAAAF,YAAA,4NCxCvCm4D,GAAoCn/C,OAAaC,MAAM,CAClE7P,QAAS4P,OACTo/C,aAAcp/C,OACd3P,OAAQ2P,OACRnK,KAAMmK,OACNq/C,UAAWr/C,OACXs/C,IAAKt/C,OACLu/C,OAAQv/C,OACLuF,IAAInY,YAAE,YACTgrC,WAAYp4B,OACTuF,IAAInY,YAAE,cC6HIF,iBAAkB6C,aA1Ha,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAmBuL,GAAFjgB,EAAT0G,UAA0B1G,EAAfigB,iBAAiBC,EAAalgB,EAAbkgB,cAAa,OAClIvf,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,UACLwnB,QAASvZ,EAAOzR,UAChB5C,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,qDAEnDI,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,aAG3CzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,SACLwnB,QAASvZ,EAAOxR,SAChB7C,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,oDAEnDI,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,aAG1CzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,eACLwnB,QAASvZ,EAAOu9C,eAChB5xD,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,0DAEnDI,eAACwT,KAAY,CAACpN,KAAK,eAAeqN,UAAU,gBAIlDzT,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO5K,KAAQ,0BAA4B,eACvDkL,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,4BAI3DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCC,eAACkpB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,YACbC,aAAchV,EAAOw9C,UACrBj5D,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPtG,EAAgB,aAAa,GAC7BC,EAAc,YAAaqG,EAAE7gB,OAAOkkB,aACtC,IAEJvpB,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,wBAE5DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,eAAeG,SAAA,CAClCC,eAACkpB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,MACbC,aAAchV,EAAOy9C,IACrBl5D,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPtG,EAAgB,OAAO,GACvBC,EAAc,MAAOqG,EAAE7gB,OAAOkkB,aAChC,IAEJvpB,eAACwT,KAAY,CAACpN,KAAK,MAAMqN,UAAU,OAAOvT,UAAU,wBAEtDI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gDAAgDG,SAAA,CACnEC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,SACLlG,UAAY+S,EAAO8+C,OAAU,0BAA4B,eACzDx+C,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,0BAG3DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oDAAoDG,SAAA,CACvEC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,aACLlG,UAAY+S,EAAO23B,WAAc,0BAA4B,eAC7Dr3B,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,aAAaqN,UAAU,OAAOvT,UAAU,gCAKnEF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UAENR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAOJ,KC2HIF,qBAAkB6C,aA9OjC,SAA0C5C,GAAe,IAAZC,EAACD,EAADC,EACrC8L,EAD6C/L,EAALyD,MACtB2K,OAAOswC,WACzBP,EAAa,qBACnBx6C,EAAiCC,YAASkuD,GAAsC,CAC9EhmD,UAAW,CAAE8L,GAAI7L,KADX9J,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAyCC,YAAY69C,IAA9CM,EAAgFj+C,YAAAH,EAAA,GAAlD,GAErC,GAAIhS,EAAS,OACX5B,eAAC0+C,GAA2B,CAACZ,WAAYA,EAAW/9C,SAClDO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,kCAEjBI,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,sCAMd,GAAIiC,EAAO,OACTvB,gBAACo+C,GAA2B,CAACZ,WAAYA,EAAW/9C,SAAA,CACjDzH,QAAQC,IAAIsJ,GACbvB,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,kCAEjBI,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,sCAMd,IAAMklB,EAAUhjB,EAAKgjB,QACfjN,EAAc/V,EAAKmwD,0BAA0B7oD,MAAM,GAAGG,KAE5D,OACEvJ,eAAC0+C,GAA2B,CAC1Bn6C,KAAMugB,EACNg5B,WAAYA,EAAW/9C,SAEvBO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,kCAEjBI,eAACgU,KAAM,CACLC,cAAe,CACbrR,QAASiV,EAAYjV,QACrBgvD,aAAc/5C,EAAY+5C,aAC1B/uD,OAAQgV,EAAYhV,OACpBwF,KAAMwP,EAAYxP,KAClBwpD,UAAWh6C,EAAYg6C,UACvBC,IAAKj6C,EAAYi6C,IACjBC,OAAQl6C,EAAYk6C,OACpBnnB,WAAY/yB,EAAY+yB,YAE1Bz2B,iBAAkBw9C,GAClBv9C,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ29C,EAA+B,CAAEvmD,UAAW,CAC1C8I,MAAO,CACLuQ,QAASjN,EAAYiN,QAAQvN,GAC7B3U,QAASyR,EAAOzR,QAChBgvD,aAAcv9C,EAAOu9C,aACrB/uD,OAAQwR,EAAOxR,OACfwF,KAAMgM,EAAOhM,KACbwpD,UAAWx9C,EAAOw9C,UAClBC,IAAKz9C,EAAOy9C,IACZC,OAAQ19C,EAAO09C,OACfnnB,WAAYv2B,EAAOu2B,aAEpBl2B,eAAgB,CAEf,CAACC,MAAO88C,GAAsChmD,UAAW,CAAC8L,GAAI7L,OAEjEkJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,2DAA6D,CAC1EmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC6+C,GAA2B,CAC1B7rC,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,GACR,QAMd,KC7HO,SAASzM,KACd,IAAIK,EAAY,CAAC,EAEb6xC,EAASz7C,aAAa0E,QAAQxE,EAAKtC,6BACnCi2D,EAAe7zD,aAAa0E,QAAQxE,EAAKvC,mCAc7C,OAZI89C,IACF7xC,EAAU7B,KAAO0zC,GAGjB7xC,EAAU4O,SADS,SAAjBq7C,EAOJ55D,QAAQC,IAAI0P,GAELA,CACT,CCJA,I,YA6BiBvI,iBAAkB6C,aA7BV,SAAH5C,GAAA,IAAKC,EAACD,EAADC,EAAYmX,GAAFpX,EAAP0D,QAAgB1D,EAAPoX,SAAShX,EAAQJ,EAARI,SAAQ,OACtDC,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,mBAAmBG,SACvCO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAC04C,GAAW,CACVG,gBAAiBt6C,EAAKtC,4BACtB0sB,YAAY,YACZ7M,SAAU,SAAC3Z,GACT7J,QAAQC,IAAI4J,GACZ9D,aAAaC,QAAQC,EAAKtC,4BAA6BkG,GACvD4U,EAAQnP,KACV,IAEF5H,eAACyW,GAAS,CAACL,OAAO,qBAAqBlW,UAAU,eAGrDF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAKG,KCxCHoyD,GAAuB74D,YAAGC,QAAAC,YAAA,gtBAkC1B44D,GAAqB94D,YAAGI,QAAAF,YAAA,6UAuBxB64D,GAAkB/4D,YAAGK,QAAAH,YAAA,+KClC5B84D,GAAkBh5D,YAAGC,QAAAC,YAAA,gIAkNZkG,I,GAAAA,iBAAkB6C,aAzMjC,SAAqB5C,GAAkB,IAAfC,EAACD,EAADC,EAAUD,EAAP0D,QAEpBhF,aAAa0E,QAAQxE,EAAKvC,oCAC7BqC,aAAaC,QAAQC,EAAKvC,mCAAmC,GAG/D,IAAAsH,EAAqDC,YAAS4uD,GAAsB,CAClF1mD,UAAW7D,OADLhG,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAAW0F,EAAOzT,EAAPyT,QAGzCnD,EAAyBC,YAAYw+C,IAA9BE,EAA8Cx+C,YAAAH,EAAA,GAAhC,GACrBoH,EAAyBnH,YAAYy+C,IAA9BE,EAA8Cz+C,YAAAiH,EAAA,GAAhC,GAEf/D,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCC,eAAC2E,KAAM,CAACG,MAAyE,UAAjEzG,aAAa0E,QAAQxE,EAAKvC,mCAAkD,UAAW,YAC/F6I,KAAK,KACL4L,QAAS,WACPpS,aAAaC,QAAQC,EAAKvC,mCAAmC,GAC7D+a,EAAQnP,KACV,EACP7H,SACEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAyE,SAAjEzG,aAAa0E,QAAQxE,EAAKvC,mCAAiD,UAAW,YAC9F6I,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WACPpS,aAAaC,QAAQC,EAAKvC,mCAAmC,GAC7D+a,EAAQnP,KACV,EACP7H,SACEH,EAAE,wBAIP,GAAIgC,EAAS,OACX5B,eAACyyD,GAAgB,CAAC17C,QAASA,EAAQhX,SACjCC,eAACiO,GAAW,CAAAlO,SACTH,EAAE,iCAIT,GAAIiC,EAAO,OACT7B,eAACyyD,GAAgB,CAAC17C,QAASA,EAAQhX,SACjCC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,uBAAuBG,SAC/CC,eAAA,KAAAD,SAAIH,EAAE,qCAKZ,IAAI+d,EAAa7b,EAAK6b,WAGtB,OAAKA,EAAWvU,MAAMjK,OAcpBa,eAACyyD,GAAgB,CAAC17C,QAASA,EAAQhX,SACjCC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,uBACZuQ,cAAe8G,EACf3G,aAAa,EACbZ,SAAUiO,EAAWjO,SACrBG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOkM,EAAWjO,SAASgC,WAE7BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB8L,WAAWvU,MACtCsG,EAAWmC,EAAgB8L,WAAWjO,SAE5C,OAAOoC,EAAS3S,OACZ,CAGEwe,WAAY,CACV5L,WAAYH,EAAe+L,WAAW5L,WACtC3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe+L,WAAWvU,OAAK4I,aAAKF,IAChDpC,aAGNkC,CACN,GAEJ,EAAE7R,SACZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,IAChBlS,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN+B,EAAK6b,WAAWvU,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAChCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACNwJ,EAAKmpD,IAAO1yD,eAAA,QAAAD,SACZO,gBAACiI,KAAK,CAACzD,MAAM,UAAU5E,UAAU,OAAMH,SAAA,CAACC,eAACmG,KAAI,CAACC,KAAK,SAAQ,IAAExG,EAAE,oBACvD,KACR2J,EAAK2R,SAAYlb,eAAA,QAAAD,SACjBC,eAACuI,KAAK,CAACzD,MAAM,UAAU5E,UAAU,OAAMH,SAAEH,EAAE,wBACnC,OANIiN,gBAQhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC7BwJ,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAChCI,eAAC0E,IAAI,CAACtC,GAAE,kBAAA0M,OAAoBvF,EAAKgO,GAAE,SAAQxX,SACzCC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAKTI,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,mBACTsE,KAAK,GACLuM,QAAS,WACP,IACIkiD,EADAp7C,EAAKhO,EAAKgO,GAGZo7C,EADmE,SAAjEt0D,aAAa0E,QAAQxE,EAAKvC,mCAM9Bu2D,EAAe,CAAE9mD,UAAW,CAC1B8I,MAAO,CACLgD,KACAV,UAAWtN,EAAKsN,WAElBnC,eAAgB,CAClB,CAACC,MAAOw9C,GAAsB1mD,UAAW7D,SACrCgN,MAAK,SAAA5H,GAAOA,EAAJlL,KACV+S,KAAMC,QAC2ClV,EAA7C+yD,EAA+C,yBAA7B,0BAAwD,CAC1E59C,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACA,EAAE9B,SAEAwJ,EAAKsN,SAELjX,EAAE,mBADFI,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,YAOzBmD,EAAKsN,SACL7W,eAAA,UAAQE,UAAU,2BAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,oCACduZ,eAAgB7Y,gBAAA,QAAAP,SAAA,CAAMC,eAAA,SAAMA,eAAA,SAAMA,eAAA,MAAAD,SAAIC,eAAA,MAAAD,SAAKwJ,EAAKnD,YAChDgT,WAAYxZ,EAAE,yBACdgb,eAAgB43C,EAChBl5C,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACjB,CAACC,MAAOw9C,GAAsB1mD,UAAW7D,SAG/C,EAAE7H,SAEFC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,gBArBnC,KAnDgByG,kBAZzBA,eAwFJ,aA3IxB7M,eAACyyD,GAAgB,CAAC17C,QAASA,EAAQhX,SACjCC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,uBACbuQ,cAAe8G,EAAclX,SACxCC,eAAA,KAAAD,SACqE,SAAjE1B,aAAa0E,QAAQxE,EAAKvC,mCAC1B4D,EAAE,+BACFA,EAAE,iCA4Id,KC1LeF,iBAAkB6C,aA/BL,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAAS2P,EAAYrT,EAAZqT,aAAcC,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UAAS,OACxE/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACNC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,8BAK/DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC2E,KAAM,CAACG,MAAM,OAAO2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAACtG,SACvDH,EAAE,yBAGN,KCrBLgzD,GAAet5D,YAAGC,QAAAC,YAAA,4JAUlB6M,GAAY,iBAkEH3G,qBAAkB6C,aAhEjC,SAAwB5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC5BuQ,EAAsBC,YAAY++C,IAA3BC,EAAwC9+C,YAAAH,EAAA,GAA7B,GAElB,OACE5T,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,mBAAmBG,SACvCC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC6G,GAAU,CAACR,UAAWA,SAG3BrG,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACjBO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,+BAEfI,eAACgU,KAAM,CACHC,cAAe,CAAE7N,KAAM,IAEvBgO,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBu+C,EAAY,CAAEpnD,UAAW,CACvB8I,MAAO,CACLnO,KAAMiO,EAAOjO,KACb0sD,KAAK,IAENp+C,eAAgB,CACf,CAACC,MAAOw9C,GAAsB1mD,UAAW7D,SAE5CgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB,IAAMixD,EAAajxD,EAAKkxD,eAAevuC,SAASlN,GAChDlU,EAAQnB,KAAK,kBAAD4M,OAAmBikD,EAAU,UACzCl+C,KAAMC,QAASlV,EAAE,mCAAqC,CAClDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACpBjT,eAACizD,GAAmB,CAClBjgD,aAAcA,EACdC,OAAQA,EACR5M,UAAWA,IACX,iBAU1B,KCxDe3G,sBA7Bf,SAA6BC,GAA+B,IAA7BC,EAACD,EAADC,EAAGmzD,EAAUpzD,EAAVozD,WAAYjV,EAAUn+C,EAAVm+C,WAC1C,OACEx9C,gBAAC2F,KAAKmN,MAAK,CAAC2qC,aAAa,EAAKh+C,SAAA,CAC5BC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,mBAAqB2wD,EAAa,QACtC1wD,KAAK,OACLtB,OAAwB,SAAf+8C,EAAuB/9C,SAE/BH,EAAE,iBANEiN,gBAQT7M,eAAC0N,GAAoB,CACjBzD,WAAW,OACXC,SAAS,iBAAgBnK,SACzBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,mBAAqB2wD,EAAa,YACtC1wD,KAAK,YACLtB,OAAwB,aAAf+8C,EAA2B/9C,SAEvCH,EAAE,qBANMiN,oBAWrB,ICOenN,qBAAkB6C,aA9BjC,SAA6B5C,GAEzB,IADFC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBrD,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQmzD,EAAAvzD,EAAE+tB,iBAAS,IAAAwlC,EAAC,GAAEA,EAAA/U,EAAAx+C,EAAEm+C,kBAAU,IAAAK,EAAC,GAAEA,EAAArtC,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,iBAAgBA,EAAAotC,EAAAv+C,EAAEy+B,4BAAoB,IAAA8f,EAAC,GAAEA,EAEvG6U,EAAa3vD,EAAM2K,OAAOolD,YAC1BC,EAAWxzD,EAAE,uBAEnB,OACEI,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAK,GAAAuI,OAAKskD,EAAQ,OAAAtkD,OAAM4e,GAAY3tB,SAC/CO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAC6G,GAAU,CAACR,UAAWA,IACrB+3B,OAGN99B,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACbA,IAEHC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACqzD,GAAoB,CAACN,WAAYA,EAAYjV,WAAYA,eAOxE,KCgJep+C,qBAAkB6C,aA3KjC,SAA6B5C,GAA2F,IAAxFC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAChE,OADiF1U,EAAT0G,UAA0B1G,EAAfigB,gBAA8BjgB,EAAbkgB,cAElGvf,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,MACLwnB,QAASvZ,EAAOq+C,MAEhB1yD,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,oBAEnDI,eAACwT,KAAY,CAACpN,KAAK,MAAMqN,UAAU,aAGvCzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,WACLwnB,QAASvZ,EAAO6G,WAEhBlb,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,yBAEnDI,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,gBAI9CzT,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,4BAI3DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,yBAAyBG,SAAA,CAC5CC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,eACLlG,UAAY+S,EAAOqgD,aAAgB,0BAA4B,eAC/D//C,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,eAAeqN,UAAU,OAAOvT,UAAU,0BAGjEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,yBAAyBG,SAAA,CAC5CC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,eACLlG,UAAY+S,EAAOsgD,aAAgB,0BAA4B,eAC/DhgD,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,eAAeqN,UAAU,OAAOvT,UAAU,6BAInEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,QACLlG,UAAY+S,EAAO+X,MAAS,0BAA4B,eACxDzX,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,0BAG1DF,eAACI,KAAKqF,IAAG,CAAA1F,SACTO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,SACLlG,UAAY+S,EAAOugD,OAAU,0BAA4B,eACzDjgD,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,6BAI7DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,UACLlG,UAAY+S,EAAO8X,QAAW,0BAA4B,eAC1DxX,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,WACLlG,UAAY+S,EAAOspC,SAAY,0BAA4B,eAC3DhpC,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,6BAI/DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAOupC,KAAQ,0BAA4B,eACvDjpC,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAGzDF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,UACLlG,UAAY+S,EAAOwpC,QAAW,0BAA4B,eAC1DlpC,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,KACZi6C,GAAkB9vC,KAChB,SAAAmwC,GAAO,OAAIz8C,eAAA,UAAQmC,MAAOs6C,EAAQC,KAAK38C,SAAa08C,EAAQE,MAAf9vC,eAA6B,OAGhF7M,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAI9DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kDAAkDG,SAAA,CACrEC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,eACLlG,UAAY+S,EAAOiY,aAAgB,0BAA4B,eAC/D3X,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,eAAeqN,UAAU,OAAOvT,UAAU,0BAGjEF,eAACI,KAAKqF,IAAG,CAAA1F,SACTO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sDAAsDG,SAAA,CACvEC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,kBACLlG,UAAY+S,EAAOkY,gBAAmB,0BAA4B,eAClE5X,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,OAAOvT,UAAU,gCAKxEF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UAENR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBASf,KCvDeF,I,SAAAA,iBAAkB6C,aA7GjC,SAAyB5C,GAAwB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACvB2vD,GADqCpzD,EAAP0D,QACjBD,EAAM2K,OAAOolD,aAC1BrV,EAAa,OACb5tC,EAAYtQ,EAAE,4BACpBgU,EAAyBC,YAAYw+C,IAA9BE,EAA8Cx+C,YAAAH,EAAA,GAAhC,GACrBtQ,EAAiCC,YAAS6uD,GAAoB,CAC5D3mD,UAAW,CACT8L,GAAIw7C,KAFAnxD,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAOxB,GAAIF,EAAS,OAAO5B,eAACyzD,GAAoB,CAAC3V,WAAYA,EAAW/9C,SAC7DC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SAACC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,UAI/C,GAAIa,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAACyzD,GAAoB,CAAC3V,WAAYA,EAAW/9C,SAClDC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SAAEH,EAAE,kCAKpB,IAAMiY,EAAc/V,EAAK2iB,SAEzB,OACEzkB,eAACyzD,GAAoB,CAAC3V,WAAYA,EAAYpwB,UAAW7V,EAAYzR,KAAKrG,SACxEC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACby+C,IAAK76C,EAAY66C,IACjBx3C,SAAUrD,EAAYqD,SACtB9U,KAAMyR,EAAYzR,KAClB4kB,MAAOnT,EAAYmT,MACnBwoC,OAAQ37C,EAAY27C,OACpBzoC,QAASlT,EAAYkT,QACrBwxB,SAAU1kC,EAAY0kC,SACtBC,KAAM3kC,EAAY2kC,KAClBC,QAAS5kC,EAAY4kC,QACrB8W,aAAc17C,EAAY07C,aAC1BD,aAAcz7C,EAAYy7C,aAC1BpoC,aAAcrT,EAAYqT,aAC1BC,gBAAiBtT,EAAYsT,iBAG/B/W,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ,IAAIuqC,EAAa,CACfrnC,GAAIw7C,EACJL,IAAKr+C,EAAOq+C,IACZx3C,SAAU7G,EAAO6G,SACjB9U,KAAMiO,EAAOjO,KACb4kB,MAAO3W,EAAO2W,MACdwoC,OAAQn/C,EAAOm/C,OACfzoC,QAAS1W,EAAO0W,QAChBwxB,SAAUloC,EAAOkoC,SACjBC,KAAMnoC,EAAOmoC,KACbC,QAASpoC,EAAOooC,QAChB8W,aAAcl/C,EAAOk/C,aACrBD,aAAcj/C,EAAOi/C,aACrBpoC,aAAc7W,EAAO6W,aACrBC,gBAAiB9W,EAAO8W,iBAG1BonC,EAAe,CAAE9mD,UAAW,CAC1B8I,MAAOqqC,GACNlqC,eAAgB,CAEf,CAACC,MAAOw9C,GAAsB1mD,UAAW7D,MAEzC,CAAC+M,MAAOy9C,GAAoB3mD,UAAW,CAAC,GAAMsnD,OAEjDn+C,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,oCAAsC,CACnDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC0zD,GAAoB,CACnB1gD,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,GACR,OAMd,KC7HaoP,GAAqBnqB,YAAGC,QAAAC,YAAA,22BAyCxB8gB,GAAyBhhB,YAAGI,QAAAF,YAAA,4bAuB5Bm6D,GAAqBr6D,YAAGK,QAAAH,YAAA,qLCwCtBkG,qBAAkB6C,aA1FjC,SAA6B5C,GAAkC,IAA/BC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAO4a,EAAQre,EAARqe,SAClC+0C,GADmDpzD,EAAP0D,QAC/BD,EAAM2K,OAAOolD,aAC1BrV,EAAa,WACb5tC,EAAYtQ,EAAE,0BACpB0D,EAA4CC,YAASkgB,GAAoB,CACvEhY,UAAW,CACTgZ,SAAUsuC,GAEZlnD,YAAa,iBAJPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAMxB+sB,EAAuBp+B,eAACyW,GAAS,CACrCvW,UAAU,OACVkW,OAAM,kBAAAtH,OAAoBikD,EAAU,mBAOtC,GAJA10D,aAAaC,QAAQC,EAAKvD,6BAA8BgjB,EAASoH,UACjE/mB,aAAaC,QAAQC,EAAKxC,iCAAkCiiB,EAASoH,UAGjExjB,EAAS,OAAO5B,eAACyzD,GAAoB,CAAC3V,WAAYA,EAAY1f,qBAAsBA,EAAqBr+B,SACzGC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SAAEH,EAAE,mCAIpB,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAACyzD,GAAoB,CAAC3V,WAAYA,EAAY1f,qBAAsBA,EAAqBr+B,SAC9FC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SAAEH,EAAE,kCAKpB,IAAM6kB,EAAW3iB,EAAK2iB,SAChBL,EAAWtiB,EAAKwjB,gBAGtB,OAAKlB,EAAShb,MAAMjK,OAalBa,eAACyzD,GAAoB,CAAC3V,WAAYA,EAAYpwB,UAAWjJ,EAASre,KAAMg4B,qBAAsBA,EAAqBr+B,SACjHC,eAACiO,GAAW,CACViC,UAAWA,EACXI,aAAa,EACbZ,SAAU0U,EAAS1U,SACnBG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO2S,EAAS1U,SAASgC,WAE3BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgByT,gBAAgBlc,MAC3CsG,EAAWmC,EAAgByT,gBAAgB5V,SAEjD,OAAOoC,EAAS3S,OACZ,CAGEmmB,gBAAiB,CACfvT,WAAYH,EAAe0T,gBAAgBvT,WAC3C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe0T,gBAAgBlc,OAAK4I,aAAKF,IACrDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEFC,eAACulB,GAAmB,CAClBnB,SAAUA,EACVrJ,iBAAiB,QA1CrB/a,eAACyzD,GAAoB,CAAC3V,WAAYA,EAAYpwB,UAAWjJ,EAASre,KAAMg4B,qBAAsBA,EAAqBr+B,SACjHC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,4CA4ClB,KCzDeF,iBAAkB6C,aA/BP,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAG+f,EAAShgB,EAATggB,UAAW3M,EAAYrT,EAAZqT,aAAcC,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UAAS,OACxE/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iCAAiCG,SAAA,CACpDC,eAACsT,KAAK,CAACG,UAAU,SACXrN,KAAK,sBACLlG,UAAY+S,EAAOyc,oBAAuB,0BAA4B,eACtEnc,aAAa,MAAKxT,SAErB4f,EAAUiP,qBAAqBxlB,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC/CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,MAG3D7M,eAACwT,KAAY,CAACpN,KAAK,sBAAsBqN,UAAU,OAAOvT,UAAU,wBAEtEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,UACLlG,UAAY+S,EAAOkI,QAAW,0BAA4B,eAC1D5H,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,2BAG5DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAACqgB,GAAgB,CAAC3M,SAAUV,IAC5BhT,eAACsgB,GAAgB,CAACja,UAAWA,SAExB,KC+FI3G,qBAAkB6C,aAzHjC,SAA+B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACpC0vD,EAAa3vD,EAAM2K,OAAOolD,YAC1BrV,EAAa,WACb5tC,EAAYtQ,EAAE,oCACdyG,EAAS,kBAAAyI,OAAqBikD,EAAU,aAE9CzvD,EAAiCC,YAAS+W,GAAwB,CAC9D7O,UAAW,CACTgZ,SAAUsuC,KAFRnxD,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAMxB8R,EAAwBC,YAAY8/C,GAAoB,CACtD,GADK/L,EAEL7zC,YAAAH,EAAA,GAFkB,GAMpB,GAAIhS,EACF,OAAO5B,eAACyzD,GAAoB,CAAC3V,WAAYA,EAAYz3C,UAAWA,EAAUtG,SACtEC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACE,QAAQ,EAAMD,QAAQ,UAMxC,GAAIc,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAACyzD,GAAoB,CAAC3V,WAAYA,EAAYz3C,UAAWA,EAAUtG,SACtEC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,oCAMhB,IAAM6kB,EAAW3iB,EAAK2iB,SAChBmK,EAAuB9sB,EAAK8sB,qBAC5Bi5B,EAAoBj5B,GAAwBA,EAAqBxlB,OAASwlB,EAAqBxlB,MAAM,GAAGG,KAAKgO,GAGnH,OACEvX,eAACyzD,GAAoB,CAAC3V,WAAYA,EAAYpwB,UAAWjJ,EAASre,KAAMC,UAAWA,EAAUtG,SAC3FC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACbyb,oBAAqBm4B,EACrB1sC,QAAS,IAGX/G,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZuzC,EAAc,CAAEn8C,UAAW,CACzB8I,MAAO,CACLkQ,SAAUsuC,EACVrjC,oBAAqBrb,EAAOqb,oBAC5BvU,QAAS9G,EAAO8G,UAEjBzG,eAAgB,CACjB,CAACC,MAAO8O,GAAoBhY,UAAW,CAACgZ,SAAUsuC,OAEnDn+C,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,4CAA8C,CAC3DmV,SAAUF,KAAMG,SAASC,eAE7B5R,EAAQnB,KAAK,0BAA4BJ,EAAKgmD,qBAAqBhiC,eAAevO,IAClFjD,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,EAAEvU,SAEH,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQoV,EAAUzc,EAAVyc,WAAY7J,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC1E7f,eAAC4zD,GAAiB,CAChBj0C,UAAW7d,EACXkR,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRoV,WAAYA,EACZ7J,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GAEO,OAyBhC,KCvHMwtD,GAAY,SAAA3lD,GAAAC,aAAA0lD,EAAA3lD,GAAA,IAAAE,EAAAC,aAAAwlD,GAChB,SAAAA,EAAYlkD,GAAQ,IAADrB,EAGC,OAHDC,aAAA,KAAAslD,GACjBvlD,EAAAF,EAAAQ,KAAA,KAAMe,GACNrX,QAAQC,IAAI,wBACZD,QAAQC,IAAIoX,GAAMrB,CACpB,CA2EI,OA3EHwB,aAAA+jD,EAAA,EAAA9jD,IAAA,SAAA5N,MAED,WACE,IAAMvC,EAAIP,KAAKsQ,MAAM/P,EACfiO,EAAYjO,EAAE,kBAEpB,OACEI,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,oBACtBI,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAAC0N,GAAoB,CACnBxD,SAAS,gBACTD,WAAW,OAAMlK,SAEjBC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,EAAG3G,GAAI,EAAG+O,GAAI,EAAE9V,SACpCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,4BACNA,EAAE,gCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,+BAKnD3N,eAAC0N,GAAoB,CACnBxD,SAAS,gBACTD,WAAW,OAAMlK,SAEjBC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,EAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,2BACNA,EAAE,+BACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,8BAKnD3N,eAAC0N,GAAoB,CACnBxD,SAAS,gBACTD,WAAW,OAAMlK,SAEjBC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,EAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,2BACNA,EAAE,+BACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACjI,UAAWA,EAAWF,KAAK,2CAqBhE,KAACkmD,CAAA,CAhFY,CAASnjD,aAoFZhR,iBAAkB6C,YAAWsxD,K,+DCpE7Bn0D,qBAAkB6C,aAvBjC,SAA8B5C,GAAIA,EAADC,EAA+F,IAA5FM,EAASP,EAATO,UAAS4zD,EAAAn0D,EAAEo0D,uBAAe,IAAAD,EAAC,SAAAljD,GAAC,OAAEA,CAAC,EAAAkjD,EAAAE,EAAAr0D,EAAEs0D,mBAAW,IAAAD,EAAC,SAAApjD,GAAC,OAAEA,CAAC,EAAAojD,EAAAE,EAAAv0D,EAAEw0D,sBAAc,IAAAD,EAAC,SAAAtjD,GAAC,OAAEA,CAAC,EAAAsjD,EAAAE,EAAAz0D,EAAE00D,mBAAW,IAAAD,GAAKA,EAC1H,OACE9zD,gBAACqE,KAAOsB,KAAI,CAAC/F,UAAWA,EAAUH,SAAA,CAChCC,eAAC2E,KAAM,CACLtC,KAAK,eACLyC,MAAM,YACN2L,QAAUsjD,IAEVM,GACFr0D,eAAC2E,KAAM,CACLtC,KAAK,SACLyC,MAAM,YACN2L,QAAU0jD,IAEZn0D,eAAC2E,KAAM,CACLtC,KAAK,gBACLyC,MAAM,YACN2L,QAAUwjD,MAIlB,KCfA,SAAS5wC,GAAgBlhB,GACvB,IAAImhB,EAAejlB,aAAa0E,QAAQZ,GACxC,OAAImhB,GAGK,EAEX,CAEA,SAAStG,GAA6BjN,EAAK5N,EAAO4U,GAChD1Y,aAAaC,QAAQyR,EAAK5N,GAC1B4U,EAAQnP,KACV,CAEA,IAAM0sD,GAAc,kCAwHL50D,qBAAkB6C,aArHjC,SAA8B5C,GAAiC,IAA9BC,EAACD,EAADC,EAAYkC,GAAFnC,EAAP0D,QAAa1D,EAAJmC,MAAMiV,EAAOpX,EAAPoX,QACjDL,EAA8BC,mBAAS0M,GAAgB9kB,EAAK1B,mCAAkC+Z,EAAA7C,YAAA2C,EAAA,GAAzFsH,EAAQpH,EAAA,GAAE29C,EAAW39C,EAAA,GAC1BsG,EAAgCvG,mBAAS0M,GAAgB9kB,EAAK7B,oCAAmCygB,EAAApJ,YAAAmJ,EAAA,GAA5Fs3C,EAASr3C,EAAA,GAAEs3C,EAAYt3C,EAAA,GAC5BE,EAAkC1G,mBAAS0M,GAAgB9kB,EAAK5B,qCAAoC2gB,EAAAvJ,YAAAsJ,EAAA,GAA/F7Y,EAAU8Y,EAAA,GAAEo3C,EAAap3C,EAAA,GAC9B6E,EAAwBxL,mBAAS0M,GAAgB9kB,EAAK3B,gCAA+BwlB,EAAArO,YAAAoO,EAAA,GAAhFwyC,EAAKvyC,EAAA,GAAEwyC,EAAQxyC,EAAA,GAEpB,OACE9hB,gBAAA,OAAKJ,UAAU,OAAMH,SAAA,CACnBC,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACfC,eAAC2E,KAAM,CACLzE,UAAU,cACV4E,MAAM,OACND,KAAK,KACL4L,QAAS,WACPpS,aAAaC,QAAQC,EAAK7B,kCAAmC,IAC7D2B,aAAaC,QAAQC,EAAK5B,mCAAoC,IAC9D0B,aAAaC,QAAQC,EAAK3B,8BAA+B,IACzDyB,aAAaC,QAAQC,EAAK1B,iCAAkC,IAC5D03D,EAAY,IACZG,EAAc,IACdD,EAAa,IACbG,EAAS,IACT79C,EAAQnP,KACV,EAAE7H,SAEDH,EAAE,0BAELI,eAAA,MAAIE,UAAU,YAAWH,SAAEH,EAAE,yBAGjCU,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAGzN,SAEfO,gBAAA,UACEJ,UAAWo0D,GACXnyD,MAAO6b,EACPlC,SAAW,SAAC4B,GACV62C,EAAY72C,EAAMrY,OAAOlD,OACzB6a,GACEze,EAAK1B,iCACL6gB,EAAMrY,OAAOlD,MACb4U,EAEJ,EAAEhX,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0CAATiN,gBACrB/K,EAAK0sC,sBAAsBplC,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC3CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,SAI7D7M,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAGzN,SAEfO,gBAAA,UACEJ,UAAWo0D,GACXnyD,MAAOqyD,EACP14C,SAAW,SAAC4B,GACV+2C,EAAa/2C,EAAMrY,OAAOlD,OAC1B6a,GACEze,EAAK7B,kCACLghB,EAAMrY,OAAOlD,MACb4U,EAEJ,EAAEhX,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,2CAATiN,gBACrB/K,EAAK2oC,uBAAuBrhC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,SAI7D7M,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAGzN,SAEfO,gBAAA,UACEJ,UAAWo0D,GACXnyD,MAAOqC,EACPsX,SAAW,SAAC4B,GACVg3C,EAAch3C,EAAMrY,OAAOlD,OAC3B6a,GACEze,EAAK5B,mCACL+gB,EAAMrY,OAAOlD,MACb4U,EAEJ,EAAEhX,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,4CAATiN,gBACrB/K,EAAK8/B,YAAYx4B,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OACjCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,SAIjE7M,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAGzN,SAEfO,gBAAA,UACEJ,UAAWo0D,GACXnyD,MAAOwyD,EACP74C,SAAW,SAAC4B,GACVk3C,EAASl3C,EAAMrY,OAAOlD,OACtB6a,GACEze,EAAK3B,8BACL8gB,EAAMrY,OAAOlD,MACb4U,EAEJ,EAAEhX,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,uCAATiN,gBACrB/K,EAAKswC,mBAAmBhpC,MAAMkD,KAAI,SAAA0d,GAAA,IAAGzgB,EAAIygB,EAAJzgB,KAAI,OACxCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,cAOrE,KCvHKxO,aAAa0E,QAAQxE,EAAKhC,8BAC7BjE,QAAQC,IAAI,iDACZ8F,aAAaC,QAAQC,EAAKhC,2BAA4BoP,OAASC,OAAO,eACtEvN,aAAaC,QAAQC,EAAK/B,4BAA6BmP,OAAS5B,IAAI,EAAG,QAAQ6B,OAAO,gBAiHzElM,I,GAAAA,iBAAkB6C,aA7GjC,SAA4B5C,GAA4C,IAAxCC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAU+B,EAAInC,EAAJmC,KAAMiV,EAAOpX,EAAPoX,QA+B1D,OACE/W,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,kBAAmB4G,SAAU5G,EAAE,0BAA0BG,SAC7EO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAA,QAAMuG,MAAO3G,EAAE,6CAA6CG,SAC1DC,eAAC2E,KAAM,CACLtC,KAAK,OACLwyD,QAAQ,OACR30D,UAAU,OACV4E,MAC6D,aAAzDzG,aAAa0E,QAAQxE,EAAK9B,4BAAgD4B,aAAa0E,QAAQxE,EAAK9B,2BAC5F,YAAV,QAEFgU,QAAS,WACPpS,aAAaC,QAAQC,EAAK9B,0BAA2B,YACrDsa,EAAQnP,KACV,MAGJ5H,eAAA,QAAMuG,MAAO3G,EAAE,8CAA8CG,SAC3DC,eAAC2E,KAAM,CACLtC,KAAK,QACLnC,UAAU,OACV4E,MAC4D,cAAzDzG,aAAa0E,QAAQxE,EAAK9B,2BAC3B,QAAU,YAEZgU,QAAS,WACPpS,aAAaC,QAAQC,EAAK9B,0BAA2B,aACrDsa,EAAQnP,KACV,MAGJ5H,eAAC4d,GAAY,CACX1d,UAAU,+CACV0b,SAAU,IAAI1Y,KAAK7E,aAAa0E,QAAQxE,EAAKhC,6BAC7C2f,aAAa,EACbJ,SAAU,SAAC/O,GACT,IAAI+nD,EAAenpD,KAAOoB,GACtBgoD,EAAgBppD,KAAOmpD,GAAc/qD,IAAI,EAAG,QAEhD1L,aAAaC,QAAQC,EAAKhC,2BAA4Bu4D,EAAalpD,OAAO,eAC1EvN,aAAaC,QAAQC,EAAK/B,4BAA6Bu4D,EAAcnpD,OAAO,eAE5EtT,QAAQC,IAAIqP,MAEZmP,EAAQnP,KACV,EACAwU,gBAAiBxc,EAAE,iCAErBI,eAACg1D,GAAqB,CACpB90D,UAAU,sCACV6zD,gBApFd,WACE,IAAIe,EAAenpD,KAAOtN,aAAa0E,QAAQxE,EAAKhC,6BAA6B0hC,SAAS,EAAG,QACzF82B,EAAgBppD,KAAOmpD,GAAc/qD,IAAI,EAAG,QAEhD1L,aAAaC,QAAQC,EAAKhC,2BAA4Bu4D,EAAalpD,OAAO,eAC1EvN,aAAaC,QAAQC,EAAK/B,4BAA6Bu4D,EAAcnpD,OAAO,eAE5EmL,EAAQnP,KACV,EA6EcqsD,YA3Ed,WACE,IAAIa,EAAenpD,KAAOtN,aAAa0E,QAAQxE,EAAKhC,6BAA6BwN,IAAI,EAAG,QACpFgrD,EAAgBppD,KAAOmpD,GAAc/qD,IAAI,EAAG,QAEhD1L,aAAaC,QAAQC,EAAKhC,2BAA4Bu4D,EAAalpD,OAAO,eAC1EvN,aAAaC,QAAQC,EAAK/B,4BAA6Bu4D,EAAcnpD,OAAO,eAE5EmL,EAAQnP,KACV,EAoEcusD,eAlEd,WACE,IAAIc,EAAkBtpD,OAClBupD,EAAmBvpD,KAAOspD,GAAiBlrD,IAAI,EAAG,QAEtD1L,aAAaC,QAAQC,EAAKhC,2BAA4B04D,EAAgBrpD,OAAO,eAC7EvN,aAAaC,QAAQC,EAAK/B,4BAA6B04D,EAAiBtpD,OAAO,eAE/EmL,EAAQnP,KACV,IA4DY5H,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,gBAAenK,SAC5CC,eAACyW,GAAS,CAACL,OAAQ,wBAAyBlW,UAAU,gBAI5DF,eAACI,KAAKC,IAAG,CAAAN,SACTO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACb+B,EACA9B,eAACm1D,GAAqB,CAACrzD,KAAMA,EAAMiV,QAASA,IAC5C,GACDhX,aAOb,KCtGMq1D,GAAwB97D,YAAGC,QAAAC,YAAA,+IA+C5B6E,aAAa0E,QAAQxE,EAAKhC,8BAC7BjE,QAAQC,IAAI,iDACZ8F,aAAaC,QAAQC,EAAKhC,2BAA4BoP,OAASC,OAAO,eACtEvN,aAAaC,QAAQC,EAAK/B,4BAA6BmP,OAAS5B,IAAI,EAAG,QAAQ6B,OAAO,gBA2PzElM,qBAAkB6C,aAvPjC,SAAwByK,GAAmB,IAAfpN,EAACoN,EAADpN,EAEpBsL,GAF8B8B,EAAP3J,QACTI,qBAAWxC,IACAkK,kBAE/B7H,EAAwCC,YAASqgD,GAAmB,CAClEn4C,UAAW7D,KACXiE,YAAa,iBAFRjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAI7BnD,EAA8BC,YAAYuhD,IAAnCC,EAAyDthD,YAAAH,EAAA,GAAtC,GAE1B,OAAIhS,EAEA5B,eAACs1D,GAAmB,CAAAv1D,SAClBC,eAAA,KAAAD,SAAIH,EAAE,iCAKRiC,EAEA7B,eAACs1D,GAAmB,CAAAv1D,SAClBC,eAAA,KAAAD,SAAIH,EAAE,gCAKIkC,EAAKqK,gBAGRhN,OASXa,eAACs1D,GAAmB,CAACxzD,KAAMA,EAAMiV,QAASA,EAAQhX,SAC9C+B,EAAKqK,gBAAgBG,KAAI,SAAA0d,GAAA,IAAGjd,EAAIid,EAAJjd,KAAMnK,EAAOonB,EAAPpnB,QAAO,OACzCtC,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbO,gBAAA,MAAAP,SAAA,CACGqH,GAAWuE,KAAOoB,GAAMnB,OAAO,SAAS,IAAE,IAC3C5L,eAAA,SAAOE,UAAU,aAAYH,SACtB4L,KAAOoB,GAAMnB,OAAO,WAG1BhJ,EAAQzD,OAMTyD,EAAQ0J,KAAI,SAAA2d,GAAA,IACRhd,EAAcgd,EAAdhd,eACAC,EAAa+c,EAAb/c,cACAH,EAAIkd,EAAJld,KACArE,EAAMuhB,EAANvhB,OACAI,EAAOmhB,EAAPnhB,QACAC,EAAWkhB,EAAXlhB,YACAF,EAAWohB,EAAXphB,YACAic,EAAOmF,EAAPnF,QACAzc,EAAI4hB,EAAJ5hB,KACAq8C,EAAQz6B,EAARy6B,SACAC,EAAK16B,EAAL06B,MACAx3C,EAAwB8c,EAAxB9c,yBACArF,EAAqBmiB,EAArBniB,sBACAC,EAAiBkiB,EAAjBliB,kBACAqF,EAAS6c,EAAT7c,UACAC,EAAO4c,EAAP5c,QACAC,EAAM2c,EAAN3c,OACAC,EAAuB0c,EAAvB1c,wBACA2hB,EAAajF,EAAbiF,cAAa,OACXlvB,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAAC+H,GAAI,EAAGC,GAAI,EAAG3G,GAAI,GAAG/G,SAAA,CAC7BC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAGzN,SACfO,gBAAA,MAAAP,SAAA,CACG0I,GAAuBC,GACxBpI,gBAAA,QAAMJ,UAAU,OAAMH,SAAA,CAErB+H,EAAsB1B,KAAK,IAAG,IAE9BuF,KAAOoB,EAAO,IAAMK,GAAWxB,OAAOV,GAAY,IAAE,MACpDS,KAAOoB,EAAO,IAAMM,GAASzB,OAAOV,GAAY,IAAG,OAEnDnD,GAAqB/H,eAAA,SAAOE,UAAU,aAAYH,SAChDgI,EAAkB3B,cAK3B9F,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAAC+H,GAAI,GAAGzN,SAAA,CAEZ+kB,EACC1c,GAAqB0c,EAAQC,SAAU1c,GACvCrI,eAAA,QAAME,UAAU,WAAUH,SAAEH,EAAE,oCACjC,IAACI,eAAA,SACFA,eAAA,SAAOE,UAAU,aAAYH,SACzB2kD,EAAYt8C,GAAqBs8C,EAAS3/B,SAAU4/B,GAAS,QAGnErkD,gBAACF,KAAKqF,IAAG,CAAC+H,GAAI,GAAGzN,SAAA,CAEfC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAE+G,EAAyBnF,qBAAqB5B,KACpE9F,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAC,MAAIoN,EAAyB/G,iBAIjEpG,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,EAAGC,GAAI,EAAG3G,GAAI,EAAE/G,SAC5BC,eAAC6sB,KAAQ,CAEP3sB,UAAU,cACVoE,KAAK,OACLyQ,SAAS,OACT+X,QAAQ,EAGRC,eACEzsB,gBAACqE,KAAM,CACLC,SAAO,EACPE,MAAM,UACND,KAAK,KAAI9E,SAAA,CAETC,eAAA,QAAME,UAAU,YAAWH,SAAEH,EAAE,oBAC/BI,eAAA,QAAME,UAAU,0CAAyCH,SAACC,eAACmG,KAAI,CAACC,KAAK,uBAGzEnE,MAAO,CACLjC,eAAC0N,GAAoB,CAAYzD,WAAW,OAAOC,SAAS,yBAAwBnK,SAClFC,eAAC0E,IAAI,CAACtC,GAAI,sCAAwC6K,EAAiB,IAAMF,EAAKhN,SAC5EC,eAAC6sB,KAASxoB,KAAI,CAEZhC,KAAK,eAActC,SAEhBH,EAAE,uBAHAiN,mBAHgBA,gBAU3B7M,eAAC0N,GAAoB,CAAYzD,WAAW,OAAOC,SAAS,yBAAwBnK,SAClFC,eAAC0E,IAAI,CAACtC,GAAI,4CAA8C6K,EAAiB,IAAMF,EAAKhN,SAClFC,eAAC6sB,KAASxoB,KAAI,CAEZhC,KAAK,cAAatC,SACfH,EAAE,kDAFAiN,mBAHgBA,gBAS3B7M,eAAC0N,GAAoB,CAAYzD,WAAW,OAAOC,SAAS,wBAAuBnK,SACjFC,eAAC0E,IAAI,CAACtC,GAAI,gCAAkC6K,EAAiB,IAAMF,EAAKhN,SACtEC,eAAC6sB,KAASxoB,KAAI,CAEZhC,KAAK,SAAQtC,SAEZH,EAAE,iBAHEiN,mBAHgBA,gBAU3BvM,gBAACoN,GAAoB,CAAYzD,WAAW,SAASC,SAAS,gBAAenK,SAAA,CAC3EC,eAAC6sB,KAAS0oC,YAAW,GAAM1oD,gBAC3B7M,eAAC0E,IAAI,CAACtC,GAAI,8BAAgC6K,EAAelN,SACvDC,eAAC6sB,KAASxoB,KAAI,CAEZiE,MAAO1I,EAAE,0CACT41D,UAAU,YACVnzD,KAAK,SAAQtC,SAEVH,EAAE,iBALAiN,oBAJgBA,gBAa3BvM,gBAACoN,GAAoB,CAAYzD,WAAW,SAASC,SAAS,gBAAenK,SAAA,CAC3EC,eAAC6sB,KAAS0oC,YAAW,GAAM1oD,gBAC3B7M,eAAA,QAAME,UAAU,WAAUH,SAC1BC,eAAC6sB,KAASxoB,KAAI,CAEZiE,MAAO1I,EAAE,0CACT41D,UAAU,SACVnzD,KAAK,UACLoO,QAAS,YAnOpB,SAAH9Q,GAAwF,IAAnFC,EAACD,EAADC,EAAGsZ,EAAUvZ,EAAVuZ,WAAYC,EAAcxZ,EAAdwZ,eAAgBC,EAAUzZ,EAAVyZ,WAAYwB,EAAcjb,EAAdib,eAAgBtB,EAAiB3Z,EAAjB2Z,kBAClFC,wBAAa,CACXC,SAAU,SAAAjN,GAAkB,IAAfkN,EAAOlN,EAAPkN,QACX,OACEnZ,gBAAA,OAAgBJ,UAAU,YAAWH,SAAA,CACnCC,eAAA,MAAAD,SAAKH,EAAE,4BACNsZ,EACAC,EACDnZ,eAAA,UAAQE,UAAU,0BAA0BuQ,QAASgJ,EAAQ1Z,SAAEH,EAAE,+BACjEU,gBAAA,UACEJ,UAAU,iBACVuQ,QAAS,WACPmK,EAAetB,GACZ1E,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACPxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACJsE,EAAY,CACVrE,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,IACF4X,GACF,EAAE1Z,SAAA,CAEFC,eAACmG,KAAI,CAACC,KAAK,YAAY,IAAExG,EAAE,mCAxBrBiN,eA4Bd,GAEJ,CAkMoC8N,CAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,uCACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CACb4L,KAAOoB,EAAO,IAAMK,GAAWxB,OAAO,MAAM,IAAE,MAC9CD,KAAOoB,EAAO,IAAMM,GAASzB,OAAO,MAAM,IAAE,IAAI,MAAI,IACpDuB,EAAyBnF,qBAAqB5B,KAAK,IAAE,IACrD+G,EAAyB/G,KACzB0B,EAAsB60C,OALD9vC,gBAOxBuM,WAAYxZ,EAAE,4BACdgb,eAAgBy6C,EAChB/7C,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAItK,IAELyH,eAAgB,CACjB,CAAEC,MAAOivC,GAAmBn4C,UAAW7D,SAG7C,EAAE7H,SACHH,EAAE,mBA1BIiN,oBAJkBA,kBA5DxBA,qBAkGXvM,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,EAAGC,GAAI,EAAG3G,GAAI,GAAG/G,SAC7BO,gBAAA,OAAKJ,UAAU,OAAMH,SAAA,CACnBC,eAAC4kD,GAAW,CAAC1kD,UAAU,OAAOyjD,SAAUz0B,IACpB,aAAlBhiB,EACAlN,eAACuI,KAAK,CAACzD,MAAM,UAAU5E,UAAU,OAAMH,SAAEH,EAAE,kBAC3C,KACkB,0BAAlBsN,EACAlN,eAACuI,KAAK,CAACzD,MAAM,UAAU5E,UAAU,OAAMH,SAAEH,EAAE,qBAC3C,KACW,cAAX8I,EACA1I,eAACuI,KAAK,CAACzD,MAAM,UAAU5E,UAAU,OAAMH,SAAEH,EAAE,uBAC3C,KACAU,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAACC,eAAA,SAAO4I,GAAmBhJ,EAAG8I,EAAQG,EAAaC,EAASC,WAG/F/I,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,EAAGC,GAAI,EAAG3G,GAAI,EAAE/G,SAE5BC,eAAC0N,GAAoB,CAACzD,WAAW,OAAOC,SAAS,yBAAwBnK,SACvEC,eAAC0E,IAAI,CAACtC,GAAI,sCAAwC6K,EAAiB,IAAMF,EAAKhN,SAC5EO,gBAAA,SAAOJ,UAAU,mBAAkBH,SAAA,CAACC,eAACmG,KAAI,CAACC,KAAK,UAAU,IAAEmH,EAAwB,IAAED,kBA/JtFT,eAqKJ,IA/LM7M,eAACkH,KAAI,CAAAnH,SACtBC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAAA,MAAAP,SAAA,CAAKH,EAAE,+BAA+B,IAACI,eAAA,KAAGE,UAAU,yBATvC2M,eAyMH,MAnNtB7M,eAACs1D,GAAmB,CAAAv1D,SAClBC,eAAA,KAAAD,SACGH,EAAE,kCAqNX,KC/Ua61D,GAAejjD,OAAaC,MAAM,CAC3CvF,cAAesF,OACZG,SAAS/S,YAAE,uBACduN,yBAA0BqF,OACvBG,SAAS/S,YAAE,uBACdkI,sBAAuB0K,OACpBG,SAAS/S,YAAE,uBACdiiB,UAAWrP,OACRgqB,UAAU58B,YAAE,sBACZ+S,SAAS/S,YAAE,uBACdwN,UAAWoF,OACRgqB,UAAU58B,YAAE,sBACZ+S,SAAS/S,YAAE,uBACdyN,QAASmF,OACNgqB,UAAU58B,YAAE,sBACZ+S,SAAS/S,YAAE,uBACd0N,OAAQkF,OACLG,SAAS/S,YAAE,uBACd81D,aAAcljD,OACXG,SAAS/S,YAAE,uBACd+1D,iBAAkBnjD,OACfG,SAAS/S,YAAE,yBCIHF,sBAtBf,SAAqBC,GAA2G,IAAzGC,EAACD,EAADC,EAAGgc,EAAQjc,EAARic,SAAQC,EAAAlc,EAAEmc,gBAAQ,IAAAD,EAAC,SAAAjL,GAAC,OAAEA,CAAC,EAAAiL,EAAAE,EAAApc,EAAEqc,cAAM,IAAAD,EAAC,SAAAnL,GAAC,OAAEA,CAAC,EAAAmL,EAAAzV,EAAA3G,EAAEO,iBAAS,IAAAoG,EAAC,eAAcA,EAAAsvD,EAAAj2D,EAAEk2D,iBAAS,IAAAD,GAAKA,EAAAz5C,EAAAxc,EAAEyc,uBAAe,IAAAD,EAAC,GAAEA,EAEpHjR,EADczH,qBAAWxC,IACAkK,iBAE/B,OACEnL,eAACqc,KAAU,CACTvB,WAAY5P,EACZ0Q,SAAUA,EACVQ,gBAAkBA,GAAqCxc,EAAE,+BACzDsc,YAAa25C,EACbC,gBAAc,EACdC,oBAAkB,EAClBC,cAAe,GACfC,YAAar2D,EAAE,gBACfM,UAAWA,EACXuc,aAAa,SACbX,SAAU,SAAC/O,GAAI,OAAK+O,EAAS/O,EAAK,EAClCiP,OAAQ,kBAAMA,GAAQ,GAG5B,IC0NiBtc,iBAAkB6C,aAjOT,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAY+f,GAAFhgB,EAAP0D,QAAkB1D,EAATggB,WAAW3M,EAAYrT,EAAZqT,aAAc6M,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiB3M,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAiBhO,GAAF1G,EAAP6iB,QAAkB7iB,EAAT0G,WAAS,OAChI/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO6a,gBAClBlvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,gCAEnDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,aAGjDzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,kBACLwnB,QAASvZ,EAAO6hD,kBAClBl2D,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,2CAEnDI,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,gBAIrDnT,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kCAAkCG,SAAA,CACrDO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,gBACLlG,UAAY+S,EAAO/F,cAAiB,0BAA4B,eAChEqG,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,WAAUpC,SAAaH,EAAE,qCAATiN,gBAC9B7M,eAAA,UAAQmC,MAAM,SAAQpC,SAAaH,EAAE,mCAATiN,gBAC5B7M,eAAA,UAAQmC,MAAM,wBAAuBpC,SAAaH,EAAE,kDAATiN,mBAE7C7M,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,OAAOvT,UAAU,wBAEpC,aAAzBmU,EAAOnH,cAAgC,GACxC5M,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sCAAsCG,SAAA,CACzDO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,oBACLlG,UAAY+S,EAAOiwC,kBAAqB,0BAA4B,eACpE3vC,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,mBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,oBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,sBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,qBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,mBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,qBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,mBAATiN,mBAEzB7M,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,wBAGtEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,2BACLlG,UAAY+S,EAAO9F,yBAA4B,0BAA4B,eAC3EoG,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU2xB,0BAA0BloC,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACpDjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKvB,qBAAqB5B,KAAK,MAAImD,EAAKnD,OAA/CyG,eAA6D,OAG9F7M,eAACwT,KAAY,CAACpN,KAAK,2BAA2BqN,UAAU,OAAOvT,UAAU,0BAG7EF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,oBACLlG,UAAY+S,EAAOm/B,mBAAsB,0BAA4B,eACrE7+B,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,KAATiN,gBACrB8S,EAAUyyB,mBAAmBhpC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC7CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,qBAAqBqN,UAAU,OAAOvT,UAAU,6BAIzEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,wBACLlG,UAAY+S,EAAOnL,sBAAyB,0BAA4B,eACxEyL,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU8qB,uBAAuBrhC,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OACjDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,wBAAwBqN,UAAU,OAAOvT,UAAU,wBAExEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAiC,aAAzBgB,EAAOnH,cAAgCtN,EAAE,gBAAkBA,EAAE,sBAAsBG,SAAA,CACrGC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO4O,UAAa,0BAA4B,eAC5DjG,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GACT8S,EAAc,YAAa9S,GAC3B6S,EAAgB,aAAa,EAC/B,EACA5D,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAGlC,aAAzBmU,EAAOnH,cAAgC,GACxClN,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GACT8S,EAAc,UAAW9S,GACzB6S,EAAgB,WAAW,EAC7B,EACA5D,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,EAC9CxD,gBAAiBxc,EAAE,0CAErBI,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAKhEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACxCC,eAACm2D,GAAY,CACXj2D,UAAY+S,EAAO7F,UAAa,0BAA4B,eAC5DwO,SAAUvH,EAAOjH,UACjB0O,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,EAChDi2C,WAAW,IAEb71D,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACtCC,eAACm2D,GAAY,CACXj2D,UAAY+S,EAAO5F,QAAW,0BAA4B,eAC1DuO,SAAUvH,EAAOhH,QACjByO,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,EAC9Ci2C,WAAW,IAEb71D,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAI9DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,2BAA2BG,SAAA,CAC9CC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,SACLlG,UAAY+S,EAAO3F,OAAU,0BAA4B,eACzDiG,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,0BAG3DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SAAA,CACtDC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,eACLlG,UAAY+S,EAAOyiD,aAAgB,0BAA4B,eAC/DniD,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,eAAeqN,UAAU,OAAOvT,UAAU,6BAInEF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uCAAuCG,SAAA,CAC1DC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,mBACLlG,UAAY+S,EAAO0iD,iBAAoB,0BAA4B,eACnEpiD,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,4BAIvEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCC,eAACkpB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,kBACbC,aAAchV,EAAO+hD,gBACrBx9D,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,kBAAmBqG,EAAE7gB,OAAOkkB,cAC1C3J,EAAgB,mBAAmB,GAAM,EAC3C,IAEJ5f,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAGzDI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAAC2E,KAAM,CACPG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAEHI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,2BAIJ,KC5MEF,qBAAkB6C,aAvBjC,SAA6B5C,GAAiB,IAAfC,EAACD,EAADC,EAAGG,EAAQJ,EAARI,SAGhC,OACEC,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,kBAAmB4G,SAAU5G,EAAE,mBAAmBG,SACtEC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC6G,GAAU,CAACR,UARN,0BAWVrG,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KC0GeL,I,GAAAA,iBAAkB6C,aAvHjC,SAAyB5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACtB6M,EAAYtQ,EAAE,8BAEpB0D,EAAiCC,YAAS+W,IAAlC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACxB8R,EAAgCC,YAAYiwC,IAApCuS,EAAiDtiD,YAAAH,EAAA,GAA9B,GAG3B,GAAIhS,EAAS,OACX5B,eAACs2D,GAAoB,CAAAv2D,SACnBC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,qCAMd,GAAIiC,EAAO,OACT7B,eAACs2D,GAAoB,CAAAv2D,SACnBC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,oCAMd,IAAM+f,EAAY7d,EAElB,OACE9B,eAACs2D,GAAoB,CAAAv2D,SACnBC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACbib,eAAe,EACfhiB,cAAe,SACfg2C,kBAAmB,EACnB/1C,yBAA0B,GAC1BrF,sBAAuB,GACvBC,kBAAmB,GACnB8Z,UAAW,IAAI3e,KACfkK,UAAW,IAAIlK,KACfmK,QAAS,IAAInK,KACboK,OAAQ,GACRooD,aAAc,GACdC,iBAAkB,GAEpBxhD,iBAAkBshD,GAClBrhD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ,IAIIyN,EAJAohC,EAAoB7uC,EAAO6uC,kBACF,aAAzB7uC,EAAOnH,gBACTg2C,EAAoB,GAIlBphC,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGrBu0C,EAAoB,CAAE5qD,UAAW,CAC/B8I,MAAO,CACL2a,cAAe7a,EAAO6a,cACtBhiB,cAAemH,EAAOnH,cACtBg2C,kBAAmBA,GAAqBvrC,SAASurC,GACjD/1C,yBAA0BkH,EAAOlH,yBACjCrF,sBAAuBuM,EAAOvM,sBAC9BC,kBAAmBsM,EAAOtM,kBAC1B8Z,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,EACT1U,UAAWmR,GAAmBlK,EAAOjH,WACrCC,QAASkR,GAAmBlK,EAAOhH,SACnCC,OAAQqK,SAAStD,EAAO/G,QACxBooD,aAAc/9C,SAAStD,EAAOqhD,cAC9BC,iBAAkBh+C,SAAStD,EAAOshD,kBAClCS,gBAAiB/hD,EAAO+hD,kBAEzB1hD,eAAgB,CACf,CAACC,MAAOivC,GAAmBn4C,UAAW7D,SAEzCgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB,IAAMy0D,EAAUz0D,EAAKu0D,oBAAoBzU,aAAarqC,GACtDlU,EAAQnB,KAAK,8BAAD4M,OAA+BynD,IAC3C1hD,KAAMC,QAASlV,EAAE,sCAAwC,CACrDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQmO,EAAOxV,EAAPwV,QAAO,OACnExiB,eAACw2D,GAAiB,CAChB72C,UAAWA,EACX3M,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTnc,UA1GE,qBA4GgB,OAOpC,KCxIaowD,GAAen9D,YAAGC,QAAAC,YAAA,iKC4FhBkG,kBApFO,SAAHC,GAAA,IAAMC,EAACD,EAADC,EAAGk+C,EAAUn+C,EAAVm+C,WAAYyY,EAAO52D,EAAP42D,QAAO,OAC3Cj2D,gBAAC2F,KAAKmN,MAAK,CAAC2qC,aAAa,EAAKh+C,SAAA,CAC1BC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,+BAAiCm0D,EACrCl0D,KAAK,SACLtB,OAAuB,SAAf+8C,EAAsB/9C,SAE7BH,EAAE,iBANEiN,gBAQT7M,eAAC0N,GAAoB,CACjBxD,SAAS,sBACTD,WAAW,OAAMlK,SAEnBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,sCAAwCm0D,EAC5Cl0D,KAAK,QACLtB,OAAuB,gBAAf+8C,EAA6B/9C,SAEpCH,EAAE,wBANEiN,kBASX7M,eAAC0N,GAAoB,CACjBxD,SAAS,yBACTD,WAAW,OAAMlK,SAEnBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,sCAAwCm0D,EAC5Cl0D,KAAK,eACLtB,OAAuB,gBAAf+8C,EAA6B/9C,SAEpCH,EAAE,wBANEiN,kBASX7M,eAAC0N,GAAoB,CACjBxD,SAAS,oBACTD,WAAW,OAAMlK,SAEnBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,iCAAmCm0D,EACvCl0D,KAAK,OACLtB,OAAuB,WAAf+8C,EAAwB/9C,SAE/BH,EAAE,kCANEiN,kBASX7M,eAAC0N,GAAoB,CACjBxD,SAAS,4CACTD,WAAW,OAAMlK,SAEnBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,wCAA0Cm0D,EAC9Cl0D,KAAK,OACLtB,OAAuB,kBAAf+8C,EAA+B/9C,SAEtCH,EAAE,0BANEiN,kBASX7M,eAAC0N,GAAoB,CACjBxD,SAAS,yCACTD,WAAW,OAAMlK,SAEnBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,sCAAwCm0D,EAC5Cl0D,KAAK,cACLtB,OAAuB,gBAAf+8C,EAA6B/9C,SAEpCH,EAAE,wBANEiN,oBASF,IC5CFnN,qBAAkB6C,aAhCjC,SAA0B5C,GAAiH,IAA/GC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOrD,EAAQJ,EAARI,SAAQ22D,EAAA/2D,EAAE6G,gBAAQ,IAAAkwD,EAAC,GAAEA,EAAAC,EAAAh3D,EAAEuQ,iBAAS,IAAAymD,EAAC,GAAEA,EAAAC,EAAAj3D,EAAEk3D,mBAAW,IAAAD,GAAKA,EAAAE,EAAAn3D,EAAE0jD,sBAAc,IAAAyT,EAAC,GAAEA,EAAA5Y,EAAAv+C,EAAEy+B,4BAAoB,IAAA8f,EAAC,GAAEA,EAC/HqY,EAAUnzD,EAAM2K,OAAOgpD,SAE7B,OACE/2D,eAACiL,GAAW,CAAAlL,SACVO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CACVL,MAAO3G,EAAE,kBACT4G,SAAUA,EAASzG,SAEnBC,eAAA,OAAKE,UAAU,sBAAqBH,SACjCq+B,MAGL99B,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC3B82D,EACD72D,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBA,IAFaA,IAMpBC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC9BC,eAACg3D,GAAa,CAAClZ,WAAYuF,EAAgBkT,QAASA,aAMhE,KC/BO,SAASU,GAA0Br3D,EAAGyI,GAE3C,OADA/P,QAAQC,IAAI8P,GACJA,GACN,IAAK,MACH,OAAOzI,EAAE,yCACX,IAAK,YACH,OAAOA,EAAE,+CACX,IAAK,QACH,OAAOA,EAAE,2CACX,QACE,MAAO,GAEb,CCkDeF,qBAAkB6C,aA7DjC,SAAsB5C,GAAoG,IAAlGC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOrD,EAAQJ,EAARI,SAAQ+2D,EAAAn3D,EAAE0jD,sBAAc,IAAAyT,EAAC,GAAEA,EAAAF,EAAAj3D,EAAEk3D,mBAAW,IAAAD,GAAKA,EAAA1Y,EAAAv+C,EAAEy+B,4BAAoB,IAAA8f,EAAC,GAAEA,EAAAyY,EAAAh3D,EAAEuQ,iBAAS,IAAAymD,EAAC,GAAEA,EAC9GJ,EAAUnzD,EAAM2K,OAAOgpD,SAC7BzzD,EAAiCC,YAASsgD,GAAiB,CAAEp4C,UAAW,CACtE8L,GAAIg/C,KADE30D,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAQxB,GAJKoO,IACHA,EAAYtQ,EAAE,gCAGZgC,EAAS,OACX5B,eAACk3D,GAAiB,CAChBhnD,UAAWA,EACX2mD,aAAa,EACbz4B,qBAAsBA,EACtBilB,eAAgBA,EAAetjD,SAE/BC,eAAA,KAAAD,SAAIH,EAAE,iCAIV,GAAIiC,EAAO,OACTvB,gBAAC42D,GAAiB,CAChBhnD,UAAWA,EACX2mD,aAAa,EACbz4B,qBAAsBA,EACtBilB,eAAgBA,EAAetjD,SAAA,CAE9BzH,QAAQC,IAAIsJ,GACb7B,eAAA,KAAAD,SAAIH,EAAE,iCAIVtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAMmS,EAAgBnS,EAAK8/C,aAErBuV,EAAmBz4C,GAAsBzK,EAAc7G,WACvD5G,EDhDD,SAAgC7G,GAAgE,IAA9DC,EAACD,EAADC,EAAGoe,EAAQre,EAARqe,SAAUo5C,EAAYz3D,EAAZy3D,aAAc5C,EAAS70D,EAAT60D,UAAW6C,EAAS13D,EAAT03D,UAAWx1C,EAASliB,EAATkiB,UAGlFy1C,EAFet4C,GAAgBpf,GAClB+L,KAAOkW,GAAW01C,aACO,GAG5C,OAAO33D,EAAE,iBAAmB,KAAO03D,EAAc,IAAM3rD,KAAO0rD,GAAWzrD,OAAO,MAAQ,MAAQ4oD,EAAY,MAAQx2C,EAAW,KAAOo5C,EAAe,GACvJ,CCyCmBI,CAAwB,CACvC53D,EAAGA,EACHoe,SAAU/J,EAAc9G,yBAAyBnF,qBAAqB5B,KACtEgxD,aAAcnjD,EAAc9G,yBAAyB/G,KACrDouD,UAAWvgD,EAAcnM,sBAAsB1B,KAC/CixD,UAAWF,EACXt1C,UAAW5N,EAAc4N,YAG3B,OACE7hB,eAACk3D,GAAiB,CAChB1wD,SAAUA,EACV0J,UAAWA,EACXkuB,qBAAsBA,EACtBy4B,YAAaA,EACbxT,eAAgBA,EAAetjD,SAE9BA,GAIP,KCgGeL,qBAAkB6C,aApJjC,SAA6B5C,GAAc,IAAZC,EAACD,EAADC,EACvB2X,EAD+B5X,EAALyD,MACf2K,OAAOgpD,SAClB1T,EAAiB,OAEjBnzC,EAAYtQ,EAAE,+BACpB0D,EAAiCC,YAASsgD,GAAiB,CACzDp4C,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAgCC,YAAY4iD,IAApCgB,EAAiD1jD,YAAAH,EAAA,GAA9B,GAErBwqB,EAAuBp+B,eAAC6G,GAAU,CAACR,UAAU,sBAEnD,GAAIzE,EAAS,OACX5B,eAAC03D,GAAa,CAACC,gBAAiBtU,EAAgBjlB,qBAAsBA,EAAqBr+B,SACzFC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,mCAKZ,GAAIiC,EAAO,OACT7B,eAAC03D,GAAa,CAACC,gBAAiBtU,EAAgBjlB,qBAAsBA,EAAqBr+B,SACzFC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,kCAKZtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM6d,EAAY7d,EACZmS,EAAgBnS,EAAK8/C,aAEvBgW,EAAiB,GACjB3jD,EAAclM,oBAChB6vD,EAAiB3jD,EAAclM,kBAAkBwP,IAGnD,IAAM4/C,EAAmBz4C,GAAsBzK,EAAc7G,WACvDyqD,EAAiBn5C,GAAsBzK,EAAc5G,SAGvDwU,EAAY,KACZC,EAAU,KASd,OARI7N,EAAc4N,YAChBA,EAAY,IAAI3e,KAAK+Q,EAAc4N,YAEjC5N,EAAc6N,UAChBA,EAAU,IAAI5e,KAAK+Q,EAAc6N,UAKjC9hB,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBwT,aAAa,EACbz4B,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACbib,cAAejb,EAAcib,cAC7BhiB,cAAe+G,EAAc/G,cAC7Bg2C,kBAAmBjvC,EAAcivC,kBACjC/1C,yBAA0B8G,EAAc9G,yBAAyBoK,GACjEzP,sBAAuBmM,EAAcnM,sBAAsByP,GAC3DxP,kBAAmB6vD,EACnB/1C,UAAWA,EACXC,QAASA,EACT1U,UAAW+pD,EACX9pD,QAASwqD,EACTvqD,OAAQ2G,EAAc3G,OACtBooD,aAAczhD,EAAcyhD,aAC5BC,iBAAkB1hD,EAAc0hD,iBAChCO,gBAAiBjiD,EAAciiD,gBAC/BE,gBAAiBniD,EAAcmiD,iBAEjCjiD,iBAAkBshD,GAClBrhD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ,IAIIyN,EAJAohC,EAAoB7uC,EAAO6uC,kBACF,aAAzB7uC,EAAOnH,gBACTg2C,EAAoB,GAIlBphC,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGrB21C,EAAoB,CAAEhsD,UAAW,CAC/B8I,MAAO,CACLgD,GAAIA,EACJ2X,cAAe7a,EAAO6a,cACtBhiB,cAAemH,EAAOnH,cACtBg2C,kBAAmBA,EACnB/1C,yBAA0BkH,EAAOlH,yBACjCrF,sBAAuBuM,EAAOvM,sBAC9BC,kBAAmBsM,EAAOtM,kBAC1B8Z,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,EACT1U,UAAWmR,GAAmBlK,EAAOjH,WACrCC,QAASkR,GAAmBlK,EAAOhH,SACnCC,OAAQqK,SAAStD,EAAO/G,QACxBooD,aAAc/9C,SAAStD,EAAOqhD,cAC9BC,iBAAkBh+C,SAAStD,EAAOshD,kBAClCO,gBAAiB7hD,EAAO6hD,gBACxBE,gBAAiB/hD,EAAO+hD,kBAEzB1hD,eAAgB,CACf,CAACC,MAAOivC,GAAmBn4C,UAAW7D,SAEzCgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQmO,EAAOxV,EAAPwV,QAAO,OACvExiB,eAACw2D,GAAiB,CAChB72C,UAAWA,EACX3M,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTnc,UAxIM,qBAyIN,OAMd,KC9Je3G,kBAJO,SAAHC,GAAOA,EAADC,EAAN,IAASM,EAASP,EAATO,UAAS,OACnCF,eAAC6G,GAAU,CAACR,UAAU,oBAAoBnG,UAAWA,GAAa,ICqNrDR,I,GAAAA,iBAAkB6C,aA9LjC,SAAiC5C,GAA0B,IAAvBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAO4a,EAAQre,EAARqe,SAEtClD,EADcrX,qBAAWxC,IACA6Z,WAE/BpE,EAAsCC,oBAAS,GAAKC,EAAA7C,YAAA2C,EAAA,GAA7C29C,EAAWz9C,EAAA,GAAEkhD,EAAclhD,EAAA,GAC5B3J,EAAiB7J,EAAM2K,OAAOgpD,SAC9B7mD,EAAYtQ,EAAE,uBACdyjD,EAAiB,cAEvB//C,EAAqDC,YACnD2+C,GAAqC,CACnCz2C,UAAWk3C,GAAiC11C,KAFxCrL,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAMvChT,aAAaC,QAAQC,EAAKxB,mCAAoCihB,EAASoH,UAUvE,IAAM2yC,EAAsB/3D,eAAC0N,GAAoB,CAACzD,WAAW,MAAMC,SAAS,yBAAwBnK,SAClGC,eAACyW,GAAS,CAACL,OAAM,qCAAAtH,OAAuC7B,EAAc,WAAW/M,UAAU,WAGvFk+B,EAAuB99B,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CAC1CC,eAACg4D,GAAa,IACbD,KAIH,GAAIn2D,EAAS,OACX5B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKpC,GAAIa,EAAO,OACT7B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,oDAKZtH,QAAQC,IAAIuJ,GACZ,IAAM8/C,EAAe9/C,EAAK8/C,aACpBqW,EAAcrW,EAAaqW,YAC3BC,EAAmBD,EAAY7uD,MAAMjK,OAErC8X,EAAgB3W,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACjCO,gBAAA,OAAKJ,UAAU,OAAMH,SAAA,CACnBO,gBAACiI,KAAK,CAACzD,MAAM,UAAS/E,SAAA,CAAEm4D,EAAiB,IAAEt4D,EAAE,4CAAiD,IAAE,IAChGU,gBAACiI,KAAK,CAACzD,MAAM,UAAS/E,SAAA,CAAE6hD,EAAa+T,iBAAmBuC,EAAiB,IAAEt4D,EAAE,+DAAoE,IAAE,OAErJI,eAAC2E,KAAM,CAACG,MAAQuvD,EAAe,UAAW,YAClCxvD,KAAK,KACL4L,QAAS,WACPqnD,GAAe,GACf,IAAI7vD,EAAY06C,GAAiC11C,GACjD3U,QAAQC,IAAI0P,GACZ8O,EAAQ9O,EACV,EAAElI,SAEPH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAASuvD,EAA0B,YAAX,UACxBxvD,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WACPqnD,GAAe,GACf,IAAI7vD,EAAY06C,GAAiC11C,GAAgB,GACjE3U,QAAQC,IAAI0P,GACZ8O,EAAQ9O,EACV,EAAElI,SAEPH,EAAE,sBAKP,OAAKq4D,EAAY7uD,MAAMjK,OAkBrBa,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACX2mD,aAAa,EACbz4B,qBAAsBA,EAAqBr+B,SAE3CC,eAACiO,GAAW,CAACiC,UAAWA,EACXR,SAAUuoD,EAAYvoD,SACtBY,aAAa,EACbH,cAAe8G,EACfpH,WAAY,WACTwB,EAAU,CACV5F,UAAW,CACTgG,MAAOwmD,EAAYvoD,SAASgC,WAE9BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB+vC,aAAaqW,YAAY7uD,MACpDsG,EAAWmC,EAAgB+vC,aAAaqW,YAAYvoD,SAE1D,OAAOoC,EAAS3S,OACZ,CAGEg5D,qBAAsB,CACpBlV,wBAAyB,CACvBlxC,WAAYH,EAAegwC,aAAaqW,YAAYlmD,WACpD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAegwC,aAAaqW,YAAY7uD,OAAK4I,aAAKF,IAC9DpC,cAINkC,CACN,GAEJ,EAAE7R,SACZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,0BACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRk4D,EAAY7uD,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC1BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKu5C,oBAAoBh+B,QAAQC,WAEpC/kB,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKu5C,oBAAoBhf,yBAAyB19B,OAErDpG,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,KAEjC9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKuY,QAAWnW,KAAOpC,EAAKuY,SAASlW,OAAOkP,GAAc,KAE9Dxa,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAE/BC,eAAC2zC,GAAU,CAAClB,QAAO,qCAAA3jC,OAAuC7B,EAAc,UAAA6B,OAASvF,EAAKgO,MAEtFvX,eAACmjD,GAA6B,CAAC55C,KAAMA,SAjBzBsD,eAoBJ,aApFxB7M,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBwT,aAAa,EACbz4B,qBAAsBA,EAAqBr+B,SAE3CC,eAACiO,GAAW,CAACiC,UAAWA,EACXI,aAAa,EACbH,cAAe8G,EAAclX,SAExCC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,kDAiFhB,KCtNaq6C,GAAqB3gD,YAAGC,QAAAC,YAAA,koBC8LtBkG,qBAAkB6C,aAvKjC,SAAuC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAC3CsT,GADyD/W,EAAP0D,QAChBsT,mBAAStY,aAAa0E,QAAQxE,EAAKzB,sCAAoC8Z,EAAA7C,YAAA2C,EAAA,GAApGqjC,EAAUnjC,EAAA,GAAEwhD,EAAaxhD,EAAA,GAExB3J,EAAiB7J,EAAM2K,OAAOgpD,SAC9B7mD,EAAYtQ,EAAE,6CACdyjD,EAAiB,cAEvB//C,EAAqDC,YACnD02C,GAAoB,CAClBxuC,UAAWi3C,GAA0B3I,KAFjCn4C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAMjC4F,EAAgBjX,eAACkH,KAAKgQ,QAAO,CAAAnX,SACjCC,eAAC04C,GAAW,CACVG,gBAAiBt6C,EAAKzB,mCACtB6rB,YAAY,YACZ7M,SAAU,SAAC3Z,GACT9D,aAAaC,QAAQC,EAAKzB,mCAAoCqF,GAC9Di2D,EAAcj2D,GACd4U,EAAQ2rC,GAA0BvgD,GACpC,MAIEi8B,EAAuBp+B,eAACkB,IAAMsH,SAAQ,CAAAzI,SAC1CC,eAAC6G,GAAU,CAACR,UAAS,qCAAAyI,OAAuC7B,OAI9D,GAAIrL,EAAS,OACX5B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKpC,GAAIa,EAAO,OACT7B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACsrB,KAAK,CAAChnB,KAAK,SAAQvE,SAAEH,EAAE,2DAK9BtH,QAAQC,IAAIuJ,GACZ,IAAM28B,EAAW38B,EAAK28B,SAGtB,OAAKsb,EAoBAtb,EAASr1B,MAAMjK,OAmBlBa,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACX2mD,aAAa,EACbz4B,qBAAsBA,EAAqBr+B,SAE3CC,eAACiO,GAAW,CAACiC,UAAWA,EACXR,SAAU+uB,EAAS/uB,SACnBY,aAAa,EACbH,cAAe8G,EACfpH,WAAY,WACTwB,EAAU,CACV5F,UAAW,CACTgG,MAAOgtB,EAAS/uB,SAASgC,WAE3BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB4sB,SAASr1B,MACpCsG,EAAWmC,EAAgB4sB,SAAS/uB,SAE1C,OAAOoC,EAAS3S,OACZ,CAGEg5D,qBAAsB,CACpBlV,wBAAyB,CACvBlxC,WAAYH,EAAe6sB,SAAS1sB,WACpC3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe6sB,SAASr1B,OAAK4I,aAAKF,IAC9CpC,cAINkC,CACN,GAEJ,EAAE7R,SAEZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACR0+B,EAASr1B,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACzBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKwb,UADQlY,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK0hB,OADQpe,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAC/BC,eAAC0E,IAAI,CAACtC,GAAE,qCAAA0M,OAAuC7B,EAAc,aAAA6B,OAAYvF,EAAKgO,IAAKxX,SACjFO,gBAACqE,KAAM,CAACG,MAAM,YAAW/E,SAAA,CACtBH,EAAE,kBAAkB,IAACI,eAACmG,KAAI,CAACC,KAAK,wBAHAyG,kBAPzBA,eAcJ,aA9EtB7M,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBwT,aAAa,EACbz4B,qBAAsBA,EAAqBr+B,SAE3CC,eAACiO,GAAW,CAACiC,UAAWA,EACXI,aAAa,EACbH,cAAe8G,EAAclX,SAExCC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACsrB,KAAK,CAAChnB,KAAK,YAAWvE,SAAEH,EAAE,0DA9BjCI,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBwT,aAAa,EACbz4B,qBAAsBA,EAAqBr+B,SAE3CC,eAACiO,GAAW,CAACiC,UAAWA,EACXI,aAAa,EACbH,cAAe8G,EAAclX,SAExCC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACsrB,KAAK,CAAChnB,KAAK,UAAUjC,KAAK,OAAMtC,SAC9BH,EAAE,iFA8Ff,KCnEeF,qBAAkB6C,aAvGjC,SAAmC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAC1CsI,EAAYtI,EAAM2K,OAAOswC,WACzBkY,EAAUnzD,EAAM2K,OAAOgpD,SACvBsB,EAAwBj1D,EAAM2K,OAAOuqD,wBACrCjyD,EAAS,qCAAAyI,OAAwCynD,EAAO,aAAAznD,OAAYpD,GACpE6sD,EAAUl6D,aAAa0E,QAAQxE,EAAKxB,qCAAmC,qCAAA+R,OAAyCynD,GAClHrmD,EAAYtQ,EAAE,0CACZyjD,EAAiB,cACjBjlB,EAAuBp+B,eAAC6G,GAAU,CAACR,UAAWA,IACpD/C,EAAiCC,YAAS8+C,GAAgC,CACxE52C,UAAW,CAAE8L,GAAI8gD,KADXz2D,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAqCC,YAAYyuC,IAA1CkW,EAA0EzkD,YAAAH,EAAA,GAAhD,GAEjC,GAAIhS,EAAS,OACX5B,eAAC03D,GAAa,CACZxnD,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACc,KAAM,CAACE,QAAQ,EAAMD,QAAQ,MAIlC,GAAIc,EAAO,OACT7B,eAAC03D,GAAa,CACZxnD,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAAA,KAAAD,SAAIH,EAAE,gCAIV,IAAMklB,EAAUhjB,EAAKghD,oBAAoBh+B,QACnCg+B,EAAsBhhD,EAAKghD,oBAC3B2V,EAAQ74D,EAAE,iBAKhB,OAJAsQ,EAAS,GAAApB,OAAMoB,EAAS,KAAApB,OAAIgW,EAAQC,SAAQ,KAAAjW,OAAI2pD,EAAK,KAAA3pD,OAAIg0C,EAAoBhf,yBAAyB19B,MAKpGpG,eAAC03D,GAAa,CACZxnD,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACgU,KAAM,CACLC,cAAe,CACbmS,MAAO,GACPvE,UAAW,IAAI3e,MAEjBiR,iBAAkBivC,GAClBhvC,SAAU,SAACC,EAAM9H,GAAyB,IAElCuV,EAFaxN,EAAa/H,EAAb+H,cAIfwN,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGnB02C,EAA2B,CAAE/sD,UAAW,CACtC8I,MAAO,CACLqtC,aAAc2U,EACdzT,oBAAqBuV,EACrBx2C,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,IAEVpN,eAAgB,CACf,CAACC,MAAOutC,GAAqCz2C,UAAWk3C,GAAiC4T,OAG5F3hD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKq2D,GACb1jD,KAAMC,QAASlV,EAAE,kDAAoD,CACjEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACyjD,GAA2B,CAC1BzwC,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,KAKZ,KC9Ge3G,iBAAkB6C,aAJG,SAAH5C,GAAOA,EAADC,EAAN,IAAS22D,EAAO52D,EAAP42D,QAAO,OAC/Cv2D,eAAC6G,GAAU,CAACR,UAAY,qCAAuCkwD,GAAY,KCsI9D72D,qBAAkB6C,aA3HjC,SAAoC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACzCkU,EAAKnU,EAAM2K,OAAOwJ,GAClBg/C,EAAUnzD,EAAM2K,OAAOgpD,SACvB1wD,EAAS,qCAAAyI,OAAwCynD,GACnDrmD,EAAYtQ,EAAE,2CACZyjD,EAAiB,cACjBjlB,EAAuBp+B,eAAC04D,GAA2B,CAACnC,QAASA,IAEnEjzD,EAA+BC,YAAS4+C,GAAoC,CAC1E12C,UAAW,CAAE8L,GAAIA,KADZ3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGvB8R,EAAwCC,YAAY0uC,IAA7CgB,EAA6ExvC,YAAAH,EAAA,GAAhD,GAEpC,GAAIhS,EAAS,OACX5B,eAAC03D,GAAa,CACZxnD,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,mCAKZ,GAAIiC,EAAO,OACT7B,eAAC03D,GAAa,CACZxnD,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,kCAKZtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM22D,EAAQ74D,EAAE,iBAChBsQ,EAAS,SAAApB,OACLoB,EAAS,YAAApB,OACThN,EAAK0hD,uBAAuBV,oBAAoBh+B,QAAQC,SAAQ,WAAAjW,OAChE2pD,EAAK,WAAA3pD,OACLhN,EAAK0hD,uBAAuBV,oBAAoBhf,yBAAyB19B,KAAI,QAGjF,IAAMo9C,EAAyB1hD,EAAK0hD,uBAGhC3hC,EAAY,KACZ2hC,EAAuB3hC,YACzBA,EAAY,IAAI3e,KAAKsgD,EAAuB3hC,YAG9C,IAAIC,EAAU,KAKd,OAJI0hC,EAAuB1hC,UACzBA,EAAU,IAAI5e,KAAKsgD,EAAuB1hC,UAI1C9hB,eAAC03D,GAAa,CACZxnD,UAAWA,EACXmzC,eAAe,cACfjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAWA,EACXC,QAASA,GAEX3N,iBAAkBivC,GAClBhvC,SAAU,SAACC,EAAM9H,GAAyB,IAElCuV,EAFaxN,EAAa/H,EAAb+H,cAIfwN,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGnByhC,EAA8B,CAAE93C,UAAW,CACzC8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBsK,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,IAEVpN,eAAgB,CACf,CAACC,MAAOutC,GAAqCz2C,UAAWk3C,GAAiC4T,OAE5F3hD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,mDAAqD,CAClEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACyjD,GAA2B,CAC1BzwC,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACe,KAKxC,KC5EevT,qBAAkB6C,aA7CjC,SAAyC5C,GAKrC,IAJFC,EAACD,EAADC,EACAwD,EAAKzD,EAALyD,MAEAV,GADO/C,EAAP0D,QACa1D,EAAb+C,eAEM6zD,EAAUnzD,EAAM2K,OAAOgpD,SACvBrrD,EAAYtI,EAAM2K,OAAOswC,WAGzBvjC,EADcrX,qBAAWxC,IACA6Z,WAE/B,OACEpY,EAAc4J,KAAI,SAACgvC,GAAY,OAC7Bh7C,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACbzH,QAAQC,IAAI+iD,GACbh7C,gBAAC4G,KAAI,CACH4gB,YAAY,OACZvhB,MAAO3G,EAAE,wBAAwBG,SAAA,CACnCO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,KAAAD,SAAIu7C,EAAawH,oBAAoBhf,yBAAyB19B,OAASpG,eAAA,SACvEA,eAAA,QAAME,UAAU,aAAYH,SACzB4L,KAAO2vC,EAAaz5B,WAAWjW,OAAOkP,QAG3C9a,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACPu7C,EAAaqd,QACd34D,eAAC0E,IAAI,CAACtC,GAAE,qCAAA0M,OAAuCynD,EAAO,SAAAznD,OAAQpD,EAAS,KAAAoD,OAAIwsC,EAAawH,oBAAoBvrC,IAAKxX,SAC/GO,gBAACqE,KAAM,CACLmJ,OAAK,EACLlJ,SAAO,EACPE,MAAM,UAAS/E,SAAA,CAEdH,EAAE,kBAAkB,IAACI,eAACmG,KAAI,CAACC,KAAK,uBAPZxG,EAAE,iEAatB,GAGjB,KCMeF,I,MAAAA,iBAAkB6C,aArDjC,SAAuC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAC9CmzD,EAAUnzD,EAAM2K,OAAOgpD,SACvBrrD,EAAYtI,EAAM2K,OAAOswC,WACzBh4C,EAAS,qCAAAyI,OAAwCynD,EAAO,WACxDlT,EAAiB,cACjBjlB,EAAuBp+B,eAAC6G,GAAU,CAACR,UAAWA,IACpD/C,EAAiCC,YAAS6+C,GAA4C,CACpF32C,UAAW,CACTqZ,QAASpZ,EACTk2C,aAAc2U,GAEhB1qD,YAAa,iBALPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KASxB,GAAIF,EAAS,OACX5B,eAAC03D,GAAa,CACdb,aAAa,EACbxT,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAEzCC,eAACc,KAAM,CAACE,QAAQ,EAAMD,QAAQ,MAIlC,GAAIc,EAAO,OACT7B,eAAC03D,GAAa,CACZb,aAAa,EACbxT,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAAA,KAAAD,SAAIH,EAAE,gCAIV,IAAMklB,EAAUhjB,EAAKgjB,QACfpiB,EAAgBZ,EAAK82D,+BAA+Bl2D,cAG1D,OACEpC,gBAACo3D,GAAa,CACZb,aAAa,EACbxT,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAAA,CAE3CO,gBAAA,MAAAP,SAAA,CAAKH,EAAE,uDAAuD,IAAEklB,EAAQC,YACxE/kB,eAACI,KAAKC,IAAG,CAAC+L,OAAK,EAACC,MAAI,EAAAtM,SAClBC,eAAC64D,GAAgC,CAACn2D,cAAeA,QAIzD,KC/CehD,kBAZE,SAAHC,GAAOA,EAADC,EAAN,IAAS23B,EAAO53B,EAAP43B,QAAO,OAC1Bv3B,eAAA,QAAME,UAAU,YACV,cAAY,UACZ,iBAAe,MACf,eAAcq3B,EACd,sBAAoB,GACpBhxB,MAAOgxB,EACP,mBAAkB,eAAex3B,SAAC,KAEjC,IC6DIL,iBAAkB6C,aA3DE,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAmBoT,GAATrT,EAAP0D,QAAc1D,EAALyD,MAAmBzD,EAAZqT,cAAcsB,EAAa3U,EAAb2U,cAAemV,EAAU9pB,EAAV8pB,WAAoBpV,GAAF1U,EAANsT,OAActT,EAAN0U,QAAQuL,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAa,OAC9I7f,eAACkT,KAAM,CAAAnT,SACLC,eAACc,KAAM,CAACC,OAAQiS,EAAchS,OAAQgS,EAAajT,SACjDO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAClT,UAAU,OAAMH,SAAA,CAC1BO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,WACL0V,SAAU,WACR+D,EAAc,YAAaxL,EAAOykD,UAClCl5C,EAAgB,YAAY,GACvBvL,EAAOykD,WACVj5C,EAAc,UAAU,GACxBD,EAAgB,UAAU,IAE5BtL,GAAc,GACdsT,YAAW,WAAO6B,GAAY,GAAG,IACnC,EACAmE,QAASvZ,EAAOykD,WAClB94D,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,+CAEjDI,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,aAG5CzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAClT,UAAU,OAAMH,SAAA,CAC1BO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,SACLsN,SAAWW,EAAOykD,SAClBh9C,SAAU,WACR+D,EAAc,UAAWxL,EAAO0kD,QAChCn5C,EAAgB,UAAU,GAC1BtL,GAAc,GACdsT,YAAW,WAAO6B,GAAY,GAAG,IACnC,EACAmE,QAASvZ,EAAO0kD,SAClB/4D,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,uBAG9CyU,EAAOykD,SAAYx4D,gBAAA,OAAAP,SAAA,CAClBC,eAAC2kB,KAAKC,MAAK,CAAA7kB,SAAEH,EAAE,kDAA6D,IAAG,IAC/EI,eAACg5D,GAAQ,CAACzhC,QAAS33B,EAAE,0DACd,GACXI,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,mBAKvC,KCrEEwlD,GAAkCzmD,OAAaC,MAAM,CAChEqmD,SAAUtmD,OACVumD,OAAQvmD,SCFG0mD,GAAuC5/D,YAAGC,QAAAC,YAAA,whCAqD1C2/D,GAAkC7/D,YAAGI,QAAAF,YAAA,qRC4TnCkG,I,MAAAA,iBAAkB6C,aA3VjC,SAAiC5C,GAAgB,IAAbC,EAACD,EAADC,EAC5B22D,EADoC52D,EAALyD,MACf2K,OAAOgpD,SACvB1T,EAAiB,cACjBnzC,EAAYtQ,EAAE,sCACpB0D,EAA4CC,YAAS21D,GAAsC,CACzFztD,UAAW,CAAEm2C,aAAc2U,KADrB30D,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAG9BuC,EAAyCC,YAAYslD,IAA7CC,EAA6ErlD,YAAAH,EAAA,GAAjD,GAE9BwqB,EAAuBp+B,eAACg4D,GAAa,IAG3C,OAAIp2D,EACF5B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKhCa,EACF7B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,oDAMPkC,EAAKu3D,wCAAwCjwD,MAAMjK,OAatDa,eAAC03D,GAAa,CACZb,aAAa,EACbxT,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE7CC,eAACiO,GAAW,CACViC,UAAWA,EAEXR,SAAU5N,EAAKu3D,wCAAwC3pD,SACvDY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO3P,EAAKu3D,wCAAwC3pD,SAASgC,WAE/DC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBwnD,wCAAwCjwD,MACnEsG,EAAWmC,EAAgBwnD,wCAAwC3pD,SAEzE,OAAOoC,EAAS3S,OACZ,CAGE2C,KAAM,CACJu3D,wCAAyC,CACvCtnD,WAAYH,EAAeynD,wCAAwCtnD,WACnE3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeynD,wCAAwCjwD,OAAK4I,aAAKF,IAC7EpC,cAINkC,CACJ,GAEJ,EAAE7R,SACFC,eAAA,OAAAD,SACEO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,6BACpBI,eAACiS,KAAMC,UAAS,SAGpBlS,eAACiS,KAAM9K,KAAI,CAAApH,SACR+B,EAAKu3D,wCAAwCjwD,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC7DjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACPzH,QAAQC,IAAIgR,GACbvJ,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKigC,2BAA2BpjC,MADnByG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACVC,eAACgU,KAAM,CACHC,cAAe,CACb6kD,SAAUvvD,EAAKuvD,SACfC,OAAQxvD,EAAKwvD,QAEf5kD,iBAAkB8kD,GAClB7kD,SAAU,SAACC,EAAMrH,GAAyB,IAArBsH,EAAatH,EAAbsH,cACjBhc,QAAQC,IAAI8b,GAEZ+kD,EAA6B,CAAE3tD,UAAW,CACtC8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACTuhD,SAAUzkD,EAAOykD,SACjBC,OAAQ1kD,EAAO0kD,SAEhBrkD,eAAgB,CACjB,CAAEC,MAAOukD,GACPztD,UAAW,CAAEm2C,aAAc2U,KAG/B+C,qBAAqB,IAEtB1kD,MAAK,SAAAoV,GAAe,IAAZloB,EAAIkoB,EAAJloB,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,mDAAqD,CAClEmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAkqB,GAAA,IAAGjX,EAAYiX,EAAZjX,aAAcsB,EAAa2V,EAAb3V,cAAerB,EAAMgX,EAANhX,OAAQoB,EAAM4V,EAAN5V,OAAQuL,EAAeqK,EAAfrK,gBAAiBC,EAAaoK,EAAbpK,cAAe4J,EAAUQ,EAAVR,WAAU,OACzFnpB,gBAACi5D,GAA0B,CACzBvmD,aAAcA,EACdsB,cAAeA,EACfsL,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRoV,WAAYA,EAAW1pB,SAAA,CAEtBzH,QAAQC,IAAI0a,GACZ3a,QAAQC,IAAI8b,GAAQ,SAEM,QAxDrBxH,eA4DJ,eArHtB7M,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,gDAuHd,KCzFeF,iBAAkB6C,aAnFK,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAmBoT,GAATrT,EAAP0D,QAAc1D,EAALyD,MAAmBzD,EAAZqT,cAAcsB,EAAa3U,EAAb2U,cAAemV,EAAU9pB,EAAV8pB,WAAoBpV,GAAF1U,EAANsT,OAActT,EAAN0U,QAAQuL,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAa,OACjJ7f,eAACkT,KAAM,CAAAnT,SACLC,eAACc,KAAM,CAACC,OAAQiS,EAAchS,OAAQgS,EAAajT,SACjDO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAClT,UAAU,OAAMH,SAAA,CAC1BO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,SACL0V,SAAU,WACR+D,EAAc,UAAWxL,EAAOmlD,QAChC55C,EAAgB,UAAU,GACrBvL,EAAOmlD,SACV35C,EAAc,UAAU,GACxBD,EAAgB,UAAU,IAE5BtL,GAAc,GACdsT,YAAW,WAAO6B,GAAY,GAAG,IACnC,EACAmE,QAASvZ,EAAOmlD,SAClBx5D,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,uBAEjDI,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,aAG1CzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAClT,UAAU,OAAMH,SAAA,CAC1BO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,WACL0V,SAAU,WACR+D,EAAc,YAAaxL,EAAOykD,UAClCl5C,EAAgB,YAAY,GACvBvL,EAAOykD,WACVj5C,EAAc,UAAU,GACxBD,EAAgB,UAAU,IAE5BtL,GAAc,GACdsT,YAAW,WAAO6B,GAAY,GAAG,IACnC,EACAmE,QAASvZ,EAAOykD,WAClB94D,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,iDAEjDI,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,aAG5CzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAClT,UAAU,OAAMH,SAAA,CAC1BO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,SACLsN,SAAYW,EAAOykD,UAAczkD,EAAOmlD,OACxC19C,SAAU,WACR+D,EAAc,UAAWxL,EAAO0kD,QAChCn5C,EAAgB,UAAU,GAC1BtL,GAAc,GACdsT,YAAW,WAAO6B,GAAY,GAAG,IACnC,EACAmE,QAASvZ,EAAO0kD,SAClB/4D,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,uBAG7CyU,EAAOykD,UAAczkD,EAAOmlD,OAAWl5D,gBAAA,OAAAP,SAAA,CACvCC,eAAC2kB,KAAKC,MAAK,CAAA7kB,SAAEH,EAAE,oDAA+D,IAAG,IACjFI,eAACg5D,GAAQ,CAACzhC,QAAS33B,EAAE,4DACd,GACXI,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,mBAKvC,KC7FEgmD,GAAqCjnD,OAAaC,MAAM,CACnE+mD,OAAQhnD,OACRsmD,SAAUtmD,OACVumD,OAAQvmD,SCHGknD,GAAyCpgE,YAAGC,QAAAC,YAAA,8jCAsD5CmgE,GAAqCrgE,YAAGI,QAAAF,YAAA,mRCuItCkG,I,kBAAAA,iBAAkB6C,aAvKjC,SAAmC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAChCmzD,GAD8C52D,EAAP0D,QAC7BD,EAAM2K,OAAOgpD,UACvB1T,EAAiB,gBACjBnzC,EAAYtQ,EAAE,wCACpB0D,EAA4CC,YAASm2D,GAAwC,CAC3FjuD,UAAW,CAAEm2C,aAAc2U,KADrB30D,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAG9BuC,EAA4CC,YAAY8lD,IAAhDC,EAAmF7lD,YAAAH,EAAA,GAApD,GAEjCwqB,EAAuBp+B,eAACg4D,GAAa,IAG3C,OAAIp2D,EACF5B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKhCa,EACF7B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,sDAMPkC,EAAK+3D,2CAA2CzwD,MAAMjK,OAazDa,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBwT,aAAa,EACbz4B,qBAAsBA,EAAqBr+B,SAE3CC,eAACiO,GAAW,CACViC,UAAWA,EAEXR,SAAU5N,EAAK+3D,2CAA2CnqD,SAC1DY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO3P,EAAK+3D,2CAA2CnqD,SAASgC,WAElEC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBgoD,2CAA2CzwD,MACtEsG,EAAWmC,EAAgBgoD,2CAA2CnqD,SAE5E,OAAOoC,EAAS3S,OACZ,CAGE2C,KAAM,CACJ+3D,2CAA4C,CAC1C9nD,WAAYH,EAAeioD,2CAA2C9nD,WACtE3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeioD,2CAA2CzwD,OAAK4I,aAAKF,IAChFpC,cAINkC,CACJ,GAEJ,EAAE7R,SACFC,eAAA,OAAAD,SACEO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,gCACpBI,eAACiS,KAAMC,UAAS,SAGpBlS,eAACiS,KAAM9K,KAAI,CAAApH,SACR+B,EAAK+3D,2CAA2CzwD,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAChEjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACPzH,QAAQC,IAAIgR,GACbvJ,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK+tC,8BAA8BlxC,MADtByG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACgU,KAAM,CACLC,cAAe,CACbulD,OAAQjwD,EAAKiwD,OACbV,SAAUvvD,EAAKuvD,SACfC,OAAQxvD,EAAKwvD,QAEf5kD,iBAAkBslD,GAClBrlD,SAAU,SAACC,EAAMrH,GAAyB,IAArBsH,EAAatH,EAAbsH,cACjBhc,QAAQC,IAAI8b,GACZulD,EAAgC,CAC9BnuD,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACTiiD,OAAQnlD,EAAOmlD,OACfV,SAAUzkD,EAAOykD,SACjBC,OAAQ1kD,EAAO0kD,SAGnBrkD,eAAgB,CACd,CAAEC,MAAO+kD,GACPjuD,UAAW,CAAEm2C,aAAc2U,KAG/B+C,qBAAqB,IAEtB1kD,MAAK,SAAAoV,GAAe,IAAZloB,EAAIkoB,EAAJloB,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,qDAAuD,CACpEmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAkqB,GAAA,IAAGjX,EAAYiX,EAAZjX,aAAcsB,EAAa2V,EAAb3V,cAAerB,EAAMgX,EAANhX,OAAQoB,EAAM4V,EAAN5V,OAAQuL,EAAeqK,EAAfrK,gBAAiBC,EAAaoK,EAAbpK,cAAe4J,EAAUQ,EAAVR,WAAU,OACzFnpB,gBAACw5D,GAA6B,CAC5B9mD,aAAcA,EACdsB,cAAeA,EACfsL,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRoV,WAAYA,EAAW1pB,SAAA,CAEtBzH,QAAQC,IAAI0a,GACZ3a,QAAQC,IAAI8b,KACiB,QA1DxBxH,eA8DJ,eAvHxB7M,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,kDAyHd,KC3Lam6D,GAAoCzgE,YAAGC,QAAAC,YAAA,0iCAwDvCwgE,GAA2C1gE,YAAGI,QAAAF,YAAA,0mBAmC9C8gB,GAAyBhhB,YAAGK,QAAAH,YAAA,mXAoB5BygE,GAAgC3gE,YAAGO,QAAAL,YAAA,0LAWnC0gE,GAAmC5gE,YAAGQ,QAAAN,YAAA,2LAWtC2gE,GAAmC7gE,YAAGU,QAAAR,YAAA,2JCmEpCkG,qBAAkB6C,aA9KjC,SAAiC5C,GAAwB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAE/B0X,GAF6Cnb,EAAP0D,QACxBI,qBAAWxC,IACA6Z,YAEzBy7C,EAAUnzD,EAAM2K,OAAOgpD,SACvB1T,EAAiB,cACjBnzC,EAAYtQ,EAAE,sCACpB0D,EAA4CC,YAASw2D,GAAmC,CACtFtuD,UAAW,CAACm2C,aAAc2U,KADpB30D,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAG9BuC,EAAsCC,YAAYsmD,IAA1CC,EAA2ErmD,YAAAH,EAAA,GAAlD,GAE3BymD,EAAsBr6D,eAAC0N,GAAoB,CAACzD,WAAW,MAAMC,SAAS,sBAAqBnK,SAC/FC,eAACyW,GAAS,CAACL,OAAM,qCAAAtH,OAAuCynD,EAAO,QAAQr2D,UAAU,WAG7Ek+B,EAAuB99B,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CAC1CC,eAACg4D,GAAa,IACbqC,KAIH,OAAIz4D,EACF5B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKhCa,EACF7B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,oDAMPkC,EAAKw4D,qBAAqBlxD,MAAMjK,OAanCa,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBwT,aAAa,EACbz4B,qBAAsBA,EAAqBr+B,SAE3CC,eAACiO,GAAW,CACViC,UAAWA,EACXR,SAAU5N,EAAKw4D,qBAAqB5qD,SACpCY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO3P,EAAKw4D,qBAAqB5qD,SAASgC,WAE5CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgByoD,qBAAqBlxD,MAChDsG,EAAWmC,EAAgByoD,qBAAqB5qD,SAEtD,OAAOoC,EAAS3S,OACZ,CAGE2C,KAAM,CACJw4D,qBAAsB,CACpBvoD,WAAYH,EAAe0oD,qBAAqBvoD,WAChD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe0oD,qBAAqBlxD,OAAK4I,aAAKF,IAC1DpC,cAINkC,CACJ,GAEJ,EAAE7R,SACFC,eAAA,OAAAD,SACEO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,0BACpBI,eAACiS,KAAMC,UAAS,SAGpBlS,eAACiS,KAAM9K,KAAI,CAAApH,SACR+B,EAAKw4D,qBAAqBlxD,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC1CjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACPzH,QAAQC,IAAIgR,GACbvJ,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,IADjBjO,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKuY,QAAWnW,KAAOpC,EAAKuY,SAASlW,OAAOkP,GAAc,IAD9CjO,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKub,QAAQC,SAAS,IAAC/kB,eAAA,SACxBA,eAAA,QAAME,UAAU,aAAYH,SACzBk3D,GAA0Br3D,EAAG2J,EAAKlB,WAGvCrI,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKm7C,SACJpkD,gBAAA,QAAAP,SAAA,CACGwJ,EAAKm7C,SAAS3/B,SAAS,IAAC/kB,eAAA,SACzBA,eAAA,QAAME,UAAU,aAAYH,SACzBk3D,GAA0Br3D,EAAG2J,EAAKo7C,YAE7B,KAGdrkD,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,qCAAA0M,OAAuCynD,EAAO,UAAAznD,OAASvF,EAAKgO,IAAKxX,SACvEC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SAEtBH,EAAE,oBAGPI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,mDACduZ,eAAgBnZ,eAAA,KAAAD,SAAIH,EAAE,6DACtBwZ,WAAYxZ,EAAE,wCACdgb,eAAgBw/C,EAChB9gD,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACjB,CAACC,MAAOolD,GAAmCtuD,UAAW,CAAEm2C,aAAcx+C,EAAM2K,OAAOgpD,cAEvF,EAAEh3D,SAENC,eAAA,QAAME,UAAU,WAAUH,SACxBC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBA5BUyG,kBAxBzBA,eAwDJ,eAnHxB7M,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,gDAqHd,KCpMa26D,GAAmC/nD,OAAaC,MAAM,CACjEqS,QAAStS,OACNG,SAAS/S,YAAE,uBACdyI,KAAMmK,OACNkyC,SAAUlyC,OACVmyC,MAAOnyC,OACPqP,UAAWrP,OACRG,SAAS/S,YAAE,yBCgHDF,iBAAkB6C,aAxGG,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAAgB2P,GAAFrT,EAALyD,MAAmBzD,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQsL,EAAShgB,EAATggB,UAAWtZ,EAAS1G,EAAT0G,UAAWuZ,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAa,OAC1Ivf,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,IAEhD5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAI9DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,UACLlG,UAAY+S,EAAO6R,QAAW,0BAA4B,eAC1DvR,aAAa,MAAKxT,SAAA,CACvBzH,QAAQC,IAAI,gDACZD,QAAQC,IAAIonB,GACb3f,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU8e,SAASr1B,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACnCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,OAG/D7M,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,2BAA2BG,SAAA,CAC9CO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,OACLlG,UAAY+S,EAAO5K,KAAQ,0BAA4B,eACvDkL,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACtB7M,eAAA,UAAQmC,MAAM,MAAKpC,SAAaH,EAAE,0CAATiN,gBACzB7M,eAAA,UAAQmC,MAAM,YAAWpC,SAAaH,EAAE,gDAATiN,gBAC/B7M,eAAA,UAAQmC,MAAM,QAAOpC,SAAaH,EAAE,4CAATiN,mBAE7B7M,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,6BAI3DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,WACLlG,UAAY+S,EAAOyxC,SAAY,0BAA4B,eAC3DnxC,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAU8e,SAASr1B,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACnCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,OAG/D7M,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,0BAG7DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,4BAA4BG,SAAA,CAC/CO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,QACLlG,UAAY+S,EAAO0xC,MAAS,0BAA4B,eACxDpxC,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACtB7M,eAAA,UAAQmC,MAAM,MAAKpC,SAAaH,EAAE,0CAATiN,gBACzB7M,eAAA,UAAQmC,MAAM,YAAWpC,SAAaH,EAAE,gDAATiN,gBAC/B7M,eAAA,UAAQmC,MAAM,QAAOpC,SAAaH,EAAE,4CAATiN,mBAE7B7M,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,gCAK9DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC2E,KAAM,CAACG,MAAM,OAAO2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAAEgC,KAAK,SAAQtI,SACrEH,EAAE,yBAGN,KC7GIF,iBAAkB6C,aAJG,SAAH5C,GAAOA,EAADC,EAAN,IAAS22D,EAAO52D,EAAP42D,QAAO,OAC/Cv2D,eAAC6G,GAAU,CAACR,UAAY,qCAAuCkwD,GAAY,KCwH9D72D,qBAAkB6C,aA5GjC,SAAmC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAC1CmzD,EAAUnzD,EAAM2K,OAAOgpD,SACvB1wD,EAAS,qCAAAyI,OAAwCynD,GACjDrmD,EAAYtQ,EAAE,0CACdyjD,EAAiB,cACjBjlB,EAAuBp+B,eAACw6D,GAA2B,CAACjE,QAASA,IAEnEjzD,EAA+BC,YAAS+W,IAAjC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACvB8R,EAAqCC,YAAYomD,IAA1CQ,EAAwE1mD,YAAAH,EAAA,GAA9C,GAEjC,GAAIhS,EAAS,OACX5B,eAAC03D,GAAa,CACZxnD,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,mCAKZ,GAAIiC,EAAO,OACT7B,eAAC03D,GAAa,CACZxnD,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,kCAKZtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM6d,EAAY7d,EAElB,OACE9B,eAAC03D,GAAa,CACZxnD,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACgU,KAAM,CACLC,cAAe,CACbmS,MAAO,GACPvE,UAAW,IAAI3e,KACf4hB,QAAS,GACTzc,KAAM,GACNq8C,SAAU,GACVC,MAAO,IAETxwC,iBAAkBomD,GAClBnmD,SAAU,SAACC,EAAM9H,GAAyB,IAElCuV,EAFaxN,EAAa/H,EAAb+H,cAIfwN,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGnB24C,EAA2B,CAAEhvD,UAAW,CACtC8I,MAAO,CACLqtC,aAAcx+C,EAAM2K,OAAOgpD,SAC3BjyC,QAASzQ,EAAOyQ,QAChBzc,KAAMgM,EAAOhM,KACbq8C,SAAUrwC,EAAOqwC,SACjBC,MAAOtwC,EAAOswC,MACd9iC,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,IAEVpN,eAAgB,CACf,CAACC,MAAOolD,GAAmCtuD,UAAW,CAAEm2C,aAAcx+C,EAAM2K,OAAOgpD,cAGtFniD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,kDAAoD,CACjEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC06D,GAA2B,CAC1B/6C,UAAWA,EACX3M,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,KAKZ,KC0Be3G,qBAAkB6C,aApIjC,SAAoC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACzCkU,EAAKnU,EAAM2K,OAAOwJ,GAClBg/C,EAAUnzD,EAAM2K,OAAOgpD,SACvB1wD,EAAS,qCAAAyI,OAAwCynD,GACjDrmD,EAAYtQ,EAAE,2CACdyjD,EAAiB,cACjBjlB,EAAuBp+B,eAACw6D,GAA2B,CAACjE,QAASA,IAEnEjzD,EAA+BC,YAASy2D,GAA0C,CAChFvuD,UAAW,CAAE8L,GAAIA,KADZ3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGvB8R,EAAwCC,YAAYqmD,IAA7CS,EAA8E5mD,YAAAH,EAAA,GAAjD,GAEpC,GAAIhS,EAAS,OACX5B,eAAC03D,GAAa,CACZxnD,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,mCAKZ,GAAIiC,EAAO,OACT7B,eAAC03D,GAAa,CACZxnD,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,kCAKZtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM6d,EAAY7d,EACZ+V,EAAc/V,EAAK84D,oBAErBC,EAAkB,GAClBhjD,EAAY6sC,WACdmW,EAAmBhjD,EAAY6sC,SAASntC,IAK1C,IAAIsK,EAAY,KACZhK,EAAYgK,YACdA,EAAY,IAAI3e,KAAK2U,EAAYgK,YAGnC,IAAIC,EAAU,KAKd,OAJIjK,EAAYiK,UACdA,EAAU,IAAI5e,KAAK2U,EAAYiK,UAI/B9hB,eAAC03D,GAAa,CACZxnD,UAAWA,EACXmzC,eAAe,cACfjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAWA,EACXC,QAASA,EACTgD,QAASjN,EAAYiN,QAAQvN,GAC7BlP,KAAMwP,EAAYxP,KAClBq8C,SAAUmW,EACVlW,MAAO9sC,EAAY8sC,OAErBxwC,iBAAkBomD,GAClBnmD,SAAU,SAACC,EAAM9H,GAAyB,IAElCuV,EAFaxN,EAAa/H,EAAb+H,cAIfwN,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGnB64C,EAA8B,CAAElvD,UAAW,CACzC8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBuN,QAASzQ,EAAOyQ,QAChBzc,KAAMgM,EAAOhM,KACbq8C,SAAUrwC,EAAOqwC,SACjBC,MAAOtwC,EAAOswC,MACd9iC,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,IAEVpN,eAAgB,CACf,CAACC,MAAOolD,GAAmCtuD,UAAW,CAAEm2C,aAAcx+C,EAAM2K,OAAOgpD,cAGtFniD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,mDAAqD,CAClEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC06D,GAA2B,CAC1B/6C,UAAWA,EACX3M,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACe,KAKxC,KCpJO,SAAS6nD,GAA6B/gB,GAC3C,IAAI9xC,EAAY,CACdzD,gBAAYpF,EACZqF,cAAUrF,EACV26C,gBAAY36C,GAOd,OAJI26C,IACF9xC,EAAU8xC,WAAaA,GAGlB9xC,CACT,CAEO,SAAS8yD,GAAoCC,EAAkBjuD,GACpE,MAAO,CACL60C,aAAcoZ,EACdjuD,KAAMA,EAEV,CCmIerN,qBAAkB6C,aAhIjC,SAAsC5C,GAAoD,IAAjDC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgB63D,GAAFt7D,EAAP0D,QAAqB1D,EAAZs7D,cAC1DvkD,GADmF/W,EAAXu7D,YACtBvkD,oBAAS,IAAMC,EAAA7C,YAAA2C,EAAA,GAA1DykD,EAAiBvkD,EAAA,GAAEwkD,EAAoBxkD,EAAA,GACxCokD,EAAmB53D,EAAM2K,OAAOgpD,SAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAChC80B,EAA8EC,aAAcmY,IAAoBlY,EAAAhuB,YAAA8tB,EAAA,GAAxGy5B,EAAWv5B,EAAA,GAAAE,EAAAF,EAAA,GAAII,EAAMF,EAANE,OAAQvgC,EAAOqgC,EAAPrgC,QAASC,EAAKogC,EAALpgC,MAAOC,EAAImgC,EAAJngC,KAAMiV,EAAOkrB,EAAPlrB,QAAS1F,EAAS4wB,EAAT5wB,UAE9D,SAASozC,IACP,OAAOzkD,eAAC04C,GAAW,CACjBx4C,UAAU,OACV24C,gBAAiBt6C,EAAKvB,yCACtB2rB,YAAa/oB,EAAE,wDACfkc,SAAU,SAAC3Z,GACT9D,aAAaC,QAAQC,EAAKvB,yCAA0CmF,GAChEA,IAAUggC,GACZi5B,GAAqB,GACrBE,EAAY,CAAE7vD,UAAWqvD,GAA6B34D,MAC7CA,GAGTi5D,GAAqB,GACrBrkD,EAAQ+jD,GAA6B34D,KAErCi5D,GAAqB,EAEzB,GAEJ,CAEA,OAAKD,EAIDh5B,GAAUvgC,EACZtB,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACykD,EAAM,IACPzkD,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0BAA0BG,SAClDC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,SAKhCmhC,GAAUtgC,EACZvB,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACykD,EAAM,IACPzkD,eAACsrB,KAAK,CAAChnB,KAAK,SAAQvE,SAAEH,EAAE,iCAIxBuiC,IAAWrgC,EAAK28B,SAASr1B,MAAMjK,OACjCmB,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACykD,EAAM,IACPnkD,gBAACgrB,KAAK,CAAChnB,KAAK,UAASvE,SAAA,CACnBC,eAAA,UAAAD,SAASH,EAAE,iEAAwE,IAAE,MACpFA,EAAE,qEAMPU,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACykD,EAAM,IACLtiB,GAAUrgC,EACZ9B,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0BACd8P,SAAU5N,EAAK28B,SAAS/uB,SACxBY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACXgG,MAAO3P,EAAK28B,SAAS/uB,SAASgC,WAEhCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB4sB,SAASr1B,MACpCsG,EAAWmC,EAAgB4sB,SAAS/uB,SAE1C,OAAOoC,EAAS3S,OACZ,CAGEo8D,kBAAmB,CACjB98B,SAAU,CACR1sB,WAAYH,EAAe6sB,SAAS1sB,WACpC3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe6sB,SAASr1B,OAAK4I,aAAKF,IAC9CpC,cAINkC,CACN,GAEJ,EAAE7R,SACVO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACR+B,EAAK28B,SAASr1B,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC9BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKwb,UADQlY,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK0hB,OADQpe,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACNk7D,EAAaO,SAASjyD,EAAKgO,IAC3BvX,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,yEAChCI,eAAC0E,IAAI,CAACtC,GAAI,gCAAkC44D,EAAmB,IAAMK,EAAa,IAAM9xD,EAAKgO,GAAGxX,SAC9FO,gBAACqE,KAAM,CAACG,MAAM,uBAAsB/E,SAAA,CACjCH,EAAE,mBAAmB,IAACI,eAACmG,KAAI,CAACC,KAAK,wBAL1ByG,kBAPFA,eAiBJ,WAKlB,MA7FG7M,eAACykD,EAAM,GAgGlB,KCxIe/kD,iBAAkB6C,aAJP,SAAH5C,GAAOA,EAADC,EAAUD,EAAP42D,QAAO,OACrCv2D,eAAC6G,GAAU,CAAC3G,UAAU,OAAOmG,UAAU,qBAAsB,KCyEhD3G,sBAtEf,SAAkBC,GAAiD,IAA7CC,EAACD,EAADC,EAAGqN,EAActN,EAAdsN,eAAgBwuD,EAAS97D,EAAT87D,UACnCC,GAAoB,EACpBC,GAAyB,EACzBC,GAAc,EAElB,OAL4Dj8D,EAAVm+C,YAMhD,IAAK,aACH4d,GAAoB,EACpB,MACF,IAAK,kBACHC,GAAyB,EACzB,MACF,IAAK,OACHC,GAAc,EAMlB,OACE57D,eAAA,OAAAD,SACEO,gBAAC2F,KAAKmN,MAAK,CAAC2qC,aAAa,EAAKh+C,SAAA,CAC5BC,eAAC0N,GAAoB,CACjBxD,SAAS,yBACTD,WAAW,OAAMlK,SAEnBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,uCAAyC6K,EAAiB,IAAMwuD,EACpEp5D,KAAK,eACLtB,OAAQ26D,EAAkB37D,SAEzBH,EAAE,uBANEiN,kBASX7M,eAAC0N,GAAoB,CACjBxD,SAAS,yBACTD,WAAW,OAAMlK,SAEnBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,6CAA+C6K,EAAiB,IAAMwuD,EAC1Ep5D,KAAK,cACLtB,OAAQ46D,EAAuB57D,SAE9BH,EAAE,kDANEiN,kBASX7M,eAAC0N,GAAoB,CACjBxD,SAAS,wBACTD,WAAW,SAAQlK,SAErBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAI,iCAAmC6K,EAAiB,IAAMwuD,EAC9Dp5D,KAAK,SACLtB,OAAQ66D,EAAY77D,SAEnBH,EAAE,gDANEiN,sBAanB,ICCenN,qBAAkB6C,aA5DjC,SAAwC5C,GAA+D,IAA5DC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAAStD,EAAQJ,EAARI,SAAU87D,EAAYl8D,EAAZk8D,aAChE5uD,GAD4EtN,EAAEoX,QAC7D3T,EAAM2K,OAAOgpD,UAC9B0E,EAAYr4D,EAAM2K,OAAOhB,KACzBsL,EAAS,kDAAAvJ,OAAqD7B,EAAc,KAAA6B,OAAI2sD,GAEtF7nD,EAAyBC,YAAYpa,GAA9B2e,EAA4CrE,YAAAH,EAAA,GAA9B,GAWrB,OACE5T,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,kBAAmB4G,SAAUq1D,EAAa97D,SAC9DO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAC87D,GAAiB,IAElB97D,eAAC2E,KAAM,CACLG,MAAM,YACNzC,KAAK,iBACLnC,UAAU,OACVuQ,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAASgV,EAC7B,EAACtY,SAEDH,EAAE,0BAELI,eAACg1D,GAAqB,CACpBX,aAAa,EACbN,gBA7Bd,WACE,IAAMgI,EAAepwD,KAAO8vD,GAAWx9B,SAAS,EAAG,QAAQryB,OAAO,cAClEvI,EAAQnB,KAAK,sCAAD4M,OAAuC7B,EAAc,KAAA6B,OAAIitD,GACvE,EA2Bc9H,YA1Bd,WACE,IAAM8H,EAAepwD,KAAO8vD,GAAW1xD,IAAI,EAAG,QAAQ6B,OAAO,cAC7DvI,EAAQnB,KAAK,sCAAD4M,OAAuC7B,EAAc,KAAA6B,OAAIitD,GACvE,SA2BQz7D,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACLC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC7BA,IAEHC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC9BC,eAACg8D,GAAS,CACR/uD,eAAgBA,EAChBwuD,UAAWA,EACX3d,WAAW,0BAQ7B,KC3EO,SAASme,GAAct8D,GAA2D,IAAzDC,EAACD,EAADC,EAAGoe,EAAQre,EAARqe,SAAUo5C,EAAYz3D,EAAZy3D,aAAc5C,EAAS70D,EAAT60D,UAAWpnD,EAASzN,EAATyN,UAAWL,EAAIpN,EAAJoN,KAC/E,OAAOnN,EAAE,iBAAmB,KACrBoe,EAAW,KAAOo5C,EAAe,OACjC5C,EAAY,MACZ7oD,KAAOoB,GAAMnB,OAAO,MAAQ,IAAMD,KAAOyB,GAAWxB,OAAO,KACpE,CC2DelM,qBAAkB6C,aAlDjC,SAAoC5C,GAA4C,IAAzCC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBrD,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAUgX,EAAOpX,EAAPoX,QAC5DikD,EAAmB53D,EAAM2K,OAAOgpD,SAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAC1BmD,EAAUtQ,EAAE,sBAClB0D,EAAiCC,YAC/Bg+C,GAA0B,CACxB91C,UAAW,CAAEm2C,aAAcoZ,EAAkBjuD,KAAMsuD,KAF/Cz5D,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAMxB,GAAIF,EAAS,OACX5B,eAACk8D,GAA+B,CAACnlD,QAASA,EAAQhX,SAChDC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACk8D,GAA+B,CAACnlD,QAASA,EAAQhX,SAChDC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,yDAKZ,IAAMu8D,EAAgBr6D,EAAKq6D,cAErBN,EAAeI,GAAe,CAClCr8D,EAAGA,EACHoe,SAAUm+C,EAAchvD,yBAAyBnF,qBAAqB5B,KACtEgxD,aAAc+E,EAAchvD,yBAAyB/G,KACrDouD,UAAW2H,EAAcr0D,sBAAsB1B,KAC/CgH,UAAWsR,GAAsBy9C,EAAc/uD,WAC/CL,KAAMsuD,IAKR,OAFA/iE,QAAQC,IAAI4jE,EAAczzD,QAGxB1I,eAACk8D,GAA+B,CAACL,aAAcA,EAAe9kD,QAASA,EAAQhX,SAC5EA,GAIP,KCbeL,qBAAkB6C,aAnCjC,SAAsC5C,GAAoB,IAAlBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOmG,EAAI5J,EAAJ4J,KAC1CyxD,EAAmB53D,EAAM2K,OAAOgpD,SAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAChC6G,EAAwCC,YAAY2tC,IAA7CG,EAA8E5tC,YAAAH,EAAA,GAAlD,GAEjC,OACE5T,eAAA,UAAQE,UAAU,sCAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,wDACduZ,eAAgBnZ,eAAA,KAAAD,SAAIwJ,EAAKub,QAAQC,WACjC3L,WAAYxZ,EAAE,oDACdgb,eAAgB+mC,EAChBroC,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAAEC,MAAO2sC,GACP71C,UAAWsvD,GAAoCC,EAAkBK,OAI7E,EAAEt7D,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAG1D,KCTA,SAASg2D,GAAmBz8D,GAA4E,IAA1EC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOi5D,EAAgB18D,EAAhB08D,iBAAkB9yD,EAAI5J,EAAJ4J,KAAMb,EAAM/I,EAAN+I,OAAM4zD,EAAA38D,EAAE48D,+BAAuB,IAAAD,EAAC,SAAA1rD,GAAC,OAAEA,CAAC,EAAA0rD,EAC5FtB,EAAmB53D,EAAM2K,OAAOgpD,SAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAEhCwvD,GAAwB,GAExBF,EAAiB,CACf5wD,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACTyqC,cAAet5C,IAGnBgM,eAAgB,CACd,CAACC,MAAO2sC,GACN71C,UAAWsvD,GAAoCC,EAAkBK,KAGrE/B,qBAAqB,IACpB1kD,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACTxJ,QAAQC,IAAI,WAAYuJ,GAExBy6D,GAAwB,GACxB1nD,KAAMC,QACJlV,EAAE,kDAAmD,CACnDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACR06D,GAAwB,GACxB1nD,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACF,CA0NenC,qBAAkB6C,aAvNjC,SAAgCuK,GAAyB,IAAtBlN,EAACkN,EAADlN,EAAGwD,EAAK0J,EAAL1J,MAC9B43D,GAD4CluD,EAAPzJ,QAClBD,EAAM2K,OAAOgpD,UAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAChC2J,EAAwDC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAhE8lD,EAAoB5lD,EAAA,GAAE2lD,EAAuB3lD,EAAA,GACpDtT,EAAqDC,YACnD+9C,GAAqC,CACnC71C,UAAWsvD,GAAoCC,EAAkBK,GACjExvD,YAAa,iBAHTjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAMvCuC,EAA6BC,YAAY4tC,IAAjC4a,EAAiEtoD,YAAAH,EAAA,GAAjD,GACxBoH,EAA2BnH,YAAY6tC,IAA/B+a,EAAyE1oD,YAAAiH,EAAA,GAA3D,GAGtB,GAAIpZ,EAAS,OAAO5B,eAAC08D,GAA2B,CAAA38D,SAC5CC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,sBAAsBG,SAC9CC,eAACc,KAAM,CAACE,QAAQ,EAAMD,QAAQ,QAIpC,GAAIc,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAAC08D,GAA2B,CAAA38D,SAAEH,EAAE,8BAGzC,IAAMu8D,EAAgBr6D,EAAKq6D,cAC3B7jE,QAAQC,IAAI4jE,GACZ,IAAIlB,EAAe,GACnBn5D,EAAKggD,wBAAwB14C,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OAC5C0xD,EAAa/4D,KAAKqH,EAAKub,QAAQvN,GAAG,IAGpC,IAAMN,EAAgBjX,eAACkH,KAAKgQ,QAAO,CAAAnX,SACjCO,gBAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BO,gBAACiI,KAAK,CAACzD,MAAM,UAAS/E,SAAA,CAAEo8D,EAAcQ,eAAe,IAAE/8D,EAAE,kDAAuD,IAAE,IAClHU,gBAACiI,KAAK,CAACzD,MAAM,UAAS/E,SAAA,CAAEo8D,EAAcS,YAAY,IAAEh9D,EAAE,+CAAoD,IAAE,SAMhH,OACEU,gBAACo8D,GAA2B,CAAC3lD,QAASA,EAAQhX,SAAA,CACjB,cAAzBo8D,EAAczzD,OACdpI,gBAACgrB,KAAK,CAAChnB,KAAK,UAASvE,SAAA,CACnBC,eAAA,UAAAD,SAASH,EAAE,+DAAsE,MAAI,IACpFA,EAAE,iEAGLI,eAAC68D,GAA6B,CAC5B5B,aAAcA,IAGlBj7D,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,sBACb8P,SAAU5N,EAAKggD,wBAAwBpyC,SACvCS,cAAe8G,EACf3G,aAAa,EACbT,WAAY,WACVwB,EAAU,CACV5F,UAAW,CACTgG,MAAO3P,EAAKggD,wBAAwBpyC,SAASgC,WAE/CC,YAAa,SAACC,EAAcoY,GAA2B,IAAvBnY,EAAemY,EAAfnY,gBACxBC,EAAWD,EAAgBiwC,wBAAwB14C,MACnDsG,EAAWmC,EAAgBiwC,wBAAwBpyC,SAEzD,OAAOoC,EAAS3S,OACZ,CAGE2C,KAAM,CACJggD,wBAAyB,CACvB/vC,WAAYH,EAAekwC,wBAAwB/vC,WACnD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAekwC,wBAAwB14C,OAAK4I,aAAKF,IAC7DpC,cAINkC,CACJ,GAEJ,EAAE7R,SACE+B,EAAKggD,wBAAwB14C,MAAMjK,OAKrCa,eAACc,KAAM,CAACC,OAAQy7D,EAAsBx7D,QAAQ,EAAKjB,SACjDO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,4BACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACR+B,EAAKggD,wBAAwB14C,MAAMkD,KAAI,SAAA2d,GAAA,IAAG1gB,EAAI0gB,EAAJ1gB,KAAI,OAC3CjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKub,QAAQC,WAEhBzkB,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACRC,eAAC+hD,GAAkB,CAACr5C,OAAQa,EAAKy4C,gBACjChiD,eAAC0b,GAAa,CACRnV,MAAO3G,EAAE,uEACTsZ,WAAYlZ,eAAA,KAAAD,SAAIH,EAAE,sEAClBuZ,eAAgBnZ,eAAA,KAAAD,SAAGC,eAAA,KAAAD,SAAIwJ,EAAKub,QAAQC,aACpC3L,WAAYxZ,EAAE,oDACdyZ,eAAgBojD,EAChB5iD,wBAAyB,CAACpO,UAAW,CAAC8I,MAAO,CAACgD,GAAIhO,EAAKgO,MACvDwC,YAAY,uBACZE,WAAYja,eAACmG,KAAI,CAACC,KAAK,SACvBkQ,WAAY1W,EAAE,sDACdua,gBAAgB,QAGxB7Z,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CAERC,eAAC88D,GAA6B,CAACvzD,KAAMA,IAErCvJ,eAAC6sB,KAAQ,CAEP3sB,UAAU,cACVoE,KAAK,SACLwoB,QAAM,EACNhoB,MAAM,mBACNioB,eAAgBntB,EAAE,kBAClBqC,MAAO,CAiBLjC,eAAC0N,GAAoB,CAAYzD,WAAW,SAASC,SAAS,yBAAwBnK,SACpFC,eAAC6sB,KAASxoB,KAAI,CAEZhC,KAAK,WACLoO,QAAS,WACP2rD,GAAoB,CAClBx8D,EAAGA,EACHwD,MAAOA,EACPi5D,iBAAkBA,EAClB9yD,KAAMA,EACNb,OAAQ,SACR6zD,wBAAyBA,GAE7B,EAAEx8D,SACCH,EAAE,4DAZAiN,iBAFkBA,gBAiB3B7M,eAAC0N,GAAoB,CAAYzD,WAAW,SAASC,SAAS,yBAAwBnK,SACpFC,eAAC6sB,KAASxoB,KAAI,CAEZhC,KAAK,IACLoO,QAAS,WACP2rD,GAAoB,CAClBx8D,EAAGA,EACHwD,MAAOA,EACPi5D,iBAAkBA,EAClB9yD,KAAMA,EACNb,OAAQ,YACR6zD,wBAAyBA,GAE7B,EAAEx8D,SACCH,EAAE,+DAZAiN,iBAFkBA,kBAxCxBA,gBA2DkB,WAAvBtD,EAAKy4C,cACLhiD,eAAC0N,GAAoB,CAAYzD,WAAW,SAASC,SAAS,yBAAwBnK,SACpFC,eAAC2E,KAAM,CAELzE,UAAU,cACV4E,MAAM,UACND,KAAK,KACL4L,QAAS,WACP2rD,GAAoB,CAClBx8D,EAAGA,EACHwD,MAAOA,EACPi5D,iBAAkBA,EAClB9yD,KAAMA,EACNb,OAAQ,YACR6zD,wBAAyBA,GAE7B,EAAEx8D,SACCH,EAAE,oBAdAiN,iBAFkBA,gBAkBA,QAtGjBA,eAwGJ,WAvHtB7M,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,wDA+HlB,KCjPeF,I,GAAAA,iBAAkB6C,aAhCjC,SAA8B5C,GAAmE,IAAhEC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBrD,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQ22D,EAAA/2D,EAAE6G,gBAAQ,IAAAkwD,EAAC,GAAEA,EAAAI,EAAAn3D,EAAE0jD,sBAAc,IAAAyT,EAAC,GAAEA,EACpF7pD,EAAiB7J,EAAM2K,OAAOgpD,SAC9B0E,EAAYr4D,EAAM2K,OAAOhB,KAE/B,OACE/M,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,kBAAmB4G,SAAUA,EAASzG,SAC1DC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC87D,GAAiB,QAGtBx7D,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,EAAG3G,GAAI,EAAE/G,SAC5BA,IAEHC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,EAAG3G,GAAI,EAAE/G,SAC7BC,eAACg8D,GAAS,CACR/uD,eAAgBA,EAChBwuD,UAAWA,EACX3d,WAAYuF,eAQ5B,KCxCa0Z,GAAkCzjE,YAAGC,QAAAC,YAAA,gyBCwFnCkG,I,MAAAA,iBAAkB6C,aAxEjC,SAAqC5C,GAAuB,IAArBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAC3Cq4D,EAAYr4D,EAAM2K,OAAOhB,KACzBE,EAAiB7J,EAAM2K,OAAOgpD,SAC9B1T,EAAiB,kBACjB5uC,EAAOkD,SAAS8jD,EAAUtyB,UAAU,EAAG,IAE7C7lC,EAAiCC,YAASw5D,GAAiC,CACzEtxD,UAAW,CACTgJ,KAAMA,EACNmtC,aAAc30C,KAHVrL,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAOxB,GAAIF,EACF,OACE5B,eAACg9D,GAAqB,CAAC3Z,eAAgBA,EAAetjD,SACjDH,EAAE,+BAKX,GAAIiC,EACF,OACE7B,eAACg9D,GAAqB,CAAC3Z,eAAgBA,EAAetjD,SACjDH,EAAE,8BAMX,IAAMw/B,EAAYt9B,EAAKm7D,gCAAgCC,MAAM5wD,KAAI,SAACizB,EAAM/X,GAAK,OAAAW,wBAAA,GACtEoX,GAAI,IAAE49B,SAAS,GAADruD,OAAKlP,EAAE,gBAAe,KAAAkP,OAAIywB,EAAK69B,OAAM,IAGpDxb,EAAe9/C,EAAK8/C,aACpBp7C,EAAWy1D,GAAe,CAC9Br8D,EAAGA,EACHoe,SAAU4jC,EAAaz0C,yBAAyBnF,qBAAqB5B,KACrEgxD,aAAcxV,EAAaz0C,yBAAyB/G,KACpDouD,UAAW5S,EAAa95C,sBAAsB1B,KAC9CgH,UAAWsR,GAAsBkjC,EAAax0C,WAC9CL,KAAM0uD,IAGR,OACEz7D,eAACg9D,GAAqB,CAAC3Z,eAAgBA,EAAgB78C,SAAUA,EAASzG,SACxEC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,iDAAiDG,SAC9DC,eAACy/B,KAAmB,CAACC,MAAM,OAAOC,OAAQ,IAAI5/B,SAC5CO,gBAACygC,KAAQ,CACPrB,MAAO,IACPG,OAAQ,IACR/9B,KAAMs9B,EACNU,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,IACRngC,SAAA,CAEFC,eAACmgC,KAAK,CAACC,QAAQ,WAAWi9B,SAAU,IACpCr9D,eAACqgC,KAAK,IACNrgC,eAACsgC,KAAO,IACRtgC,eAACugC,KAAM,IACPvgC,eAACghC,KAAG,CAACZ,QAAQ,6BAA6Bh6B,KAAMqO,EAAMmsB,KAAMF,KAAc,QAC1E1gC,eAACghC,KAAG,CAACZ,QAAQ,8BAA8Bh6B,KAAMqO,EAAK,EAAGmsB,KAAMF,KAAO,2BAMlF,KCnEehhC,iBAAkB6C,aARH,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAG22D,EAAO52D,EAAP42D,QAASxpD,EAAIpN,EAAJoN,KAAI,OAC/C/M,eAAC0E,IAAI,CAACtC,GAAI,sCAAwCm0D,EAAU,IAAMxpD,EAAKhN,SACrEO,gBAACqE,KAAM,CAACG,MAAM,yBAAwB/E,SAAA,CACpCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBAAkB,IAAExG,EAAE,oBAE1C,KChBI09D,GAA4BhkE,YAAGC,QAAAC,YAAA,4pDAmF/B+jE,GAAkCjkE,YAAGI,QAAAF,YAAA,oNCtF3C,SAASgkE,GAAkB79D,GAAwD,IACpF0G,EAD8Bo3D,EAAQ99D,EAAR89D,SAAUzC,EAAgBr7D,EAAhBq7D,iBAAkBK,EAAU17D,EAAV07D,WAAYlsB,EAAUxvC,EAAVwvC,WAS1E,MANiB,qBAAbsuB,EACFp3D,EAAY,sCAAwC20D,EAAmB,IAAMK,EACvD,gBAAboC,IACTp3D,EAAY,wBAA0B8oC,EAAa,IAAM6rB,EAAmB,IAAMK,GAG7Eh1D,CACT,CCiFe3G,qBAAkB6C,aA1EjC,SAA+B5C,GAA6D,IAA3DC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAASm4C,EAAS77C,EAAT67C,UAAWiiB,EAAQ99D,EAAR89D,SAAQC,EAAA/9D,EAAEwvC,kBAAU,IAAAuuB,EAAC,KAAIA,EACtFplE,QAAQC,IAAIijD,GACZ,IAAM6C,EAAaj7C,EAAM2K,OAAOswC,WAC1B2c,EAAmB53D,EAAM2K,OAAOgpD,SAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAE1B4wD,EAAc,CAClB,QAAWtf,EACX,aAAgB2c,EAChB,iBAAoBxf,EAAUoK,iBAAiBruC,GAC/C,KAAQ8jD,EACR,eAAkB,YAClB,cAAiB,aAGnBznD,EAA2CC,YAAY0pD,IAAgCK,EAAA7pD,YAAAH,EAAA,GAAhFiqD,EAAYD,EAAA,GAAAE,EAAAF,EAAA,GAAIh8D,EAAOk8D,EAAPl8D,QAASC,EAAKi8D,EAALj8D,MAEhC,GAAID,EACF,OAAO5B,eAAC2E,KAAM,CACZmJ,OAAK,EACLlJ,SAAO,EACP8O,UAAU,EACV5O,MAAM,UAAS/E,SAEdH,EAAE,+CAIP,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAACsrB,KAAK,CAAChnB,KAAK,SAAQvE,SACxBH,EAAE,iDAIP,IAAMyG,EAAYm3D,GAAmB,CACnCC,SAAUA,EACVzC,iBAAkBA,EAClBK,WAAYA,EACZlsB,WAAYA,IAGd,OACEnvC,eAAC2E,KAAM,CACLmJ,OAAK,EACLlJ,SAAO,EACPE,MAAM,UACNzC,KAAK,QACLoO,QAAS,kBAAMotD,EAAa,CAC1BpyD,UAAW,CAAE,MAASkyD,GACtBjpD,eAAgB,CACd,CAACC,MAAO2sC,GAAqC71C,UAAWsvD,GAAoCC,EAAkBK,OAE/GzmD,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACLxJ,QAAQC,IAAI,WAAYuJ,GAExBuB,EAAQnB,KAAKmE,GAEbwO,KAAMC,QAASlV,EAAE,6CAA+C,CAC9DmV,SAAUF,KAAMG,SAASC,cAE7B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GAAE,EAAC9B,SAENH,EAAE,oBAGT,KCxCeF,qBAAkB6C,aAnCjC,SAAqC5C,GAQjC,IAPFC,EAACD,EAADC,EAGA+C,GAFKhD,EAALyD,MACOzD,EAAP0D,QACW1D,EAAXgD,aACAwsC,EAAUxvC,EAAVwvC,WACmB4uB,GADTp+D,EACVq+D,eAAmBr+D,EACnB89D,iBAAQ,IAAAM,EAAC,mBAAkBA,EAG3B,OACEp7D,EAAY2J,KAAI,SAACkvC,GAAS,OACxBx7C,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,EAAG3G,GAAI,EAAE/G,SAC7BO,gBAAC4G,KAAI,CACH4gB,YAAY,OACZvhB,MAAO3G,EAAE,qBAAqBG,SAAA,CAChCO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,KAAAD,SAAIy7C,EAAUoK,iBAAiB/hB,sBAAsBz9B,OAASpG,eAAA,SAC9DM,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CACzBH,EAAE,6BAA6B,KAAG47C,EAAUoK,iBAAiBnK,wBAAwB,IAACz7C,eAAA,SACtFJ,EAAE,uBAAuB,KAAG+L,KAAO6vC,EAAUoK,iBAAiB9jC,SAASlW,OAAO,MAAM,IAAC5L,eAAA,eAG1FA,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACPy7C,EAAUmd,QACX34D,eAACi+D,GAAsB,CAACziB,UAAWA,EAAWiiB,SAAUA,EAAUtuB,WAAYA,IADxDvvC,EAAE,2DAKnB,GAGjB,KCkEeF,qBAAkB6C,aA5FjC,SAAkC5C,GAAgE,IAA9DC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAASi4C,EAAY37C,EAAZ27C,aAAcmiB,EAAQ99D,EAAR89D,SAAQC,EAAA/9D,EAAEwvC,kBAAU,IAAAuuB,EAAC,KAAIA,EAC5FplE,QAAQC,IAAI+iD,GACZ,IAAM+C,EAAaj7C,EAAM2K,OAAOswC,WAC1B2c,EAAmB53D,EAAM2K,OAAOgpD,SAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAE1B4wD,EAAc,CAClB,QAAWtf,EACX,aAAgB2c,EAChB,oBAAuB1f,EAAawH,oBAAoBvrC,GACxD,KAAQ8jD,EACR,eAAkB,eAClB,cAAiB,aAGnBznD,EAA2CC,YAAY0pD,IAAgCK,EAAA7pD,YAAAH,EAAA,GAAhFiqD,EAAYD,EAAA,GAAAE,EAAAF,EAAA,GAAIh8D,EAAOk8D,EAAPl8D,QAASC,EAAKi8D,EAALj8D,MAEhC,GAAID,EACF,OAAO5B,eAAC2E,KAAM,CACZmJ,OAAK,EACLlJ,SAAO,EACP8O,UAAU,EACV5O,MAAM,UAAS/E,SAEdH,EAAE,+CAIP,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAACsrB,KAAK,CAAChnB,KAAK,SAAQvE,SACxBH,EAAE,iDAIP,IAAMyG,EAAYm3D,GAAmB,CACnCC,SAAUA,EACVzC,iBAAkBA,EAClBK,WAAYA,EACZlsB,WAAYA,IAGd,OAAImM,EAAa4iB,QAEb59D,gBAAA,KAAGJ,UAAU,aAAYH,SAAA,CACvBC,eAACmG,KAAI,CAACC,KAAK,mBACVxG,EAAE,uDAKL07C,EAAa6iB,OAEb79D,gBAAA,KAAGJ,UAAU,aAAYH,SAAA,CACvBC,eAACmG,KAAI,CAACC,KAAK,UACVxG,EAAE,sDAMPI,eAAC2E,KAAM,CACLmJ,OAAK,EACLlJ,SAAO,EACPE,MAAM,UACNzC,KAAK,QACLoO,QAAS,kBAAMotD,EAAa,CAC1BpyD,UAAW,CAAE,MAASkyD,GACtBjpD,eAAgB,CACd,CAACC,MAAO2sC,GAAqC71C,UAAWsvD,GAAoCC,EAAkBK,OAE/GzmD,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACLxJ,QAAQC,IAAI,WAAYuJ,GAExBuB,EAAQnB,KAAKmE,GAEbwO,KAAMC,QAASlV,EAAE,6CAA+C,CAC9DmV,SAAUF,KAAMG,SAASC,cAE7B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GAAE,EAAC9B,SAENH,EAAE,oBAGT,KC9DeF,qBAAkB6C,aAlCjC,SAAuC5C,GAOnC,IANFC,EAACD,EAADC,EAGA8C,GAFK/C,EAALyD,MACOzD,EAAP0D,QACa1D,EAAb+C,eACAysC,EAAUxvC,EAAVwvC,WAAU4uB,EAAAp+D,EACV89D,gBAAQ,IAAAM,EAAC,mBAAkBA,EAG3B,OACEr7D,EAAc4J,KAAI,SAACgvC,GAAY,OAC7Bt7C,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,EAAG3G,GAAI,EAAE/G,SAC7BO,gBAAC4G,KAAI,CACH4gB,YAAY,OACZvhB,MAAO3G,EAAE,wBAAwBG,SAAA,CACnCO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,KAAAD,SAAIu7C,EAAawH,oBAAoBhf,yBAAyB19B,OAASpG,eAAA,SACvEA,eAAA,QAAME,UAAU,aAAYH,SACxBu7C,EAAawH,oBAAoBhf,yBAAyB8D,UAAahoC,EAAE,qBAC3EU,gBAAA,QAAAP,SAAA,CAAOH,EAAE,mCAAmC,KAAG07C,EAAa8iB,sBAGhEp+D,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACPu7C,EAAaqd,QACd34D,eAACq+D,GAAyB,CAAC/iB,aAAcA,EAAcmiB,SAAUA,EAAUtuB,WAAYA,IAD9DvvC,EAAE,8DAKtB,GAGjB,KCgDeF,qBAAkB6C,aA1EjC,SAAkC5C,GAAyD,IAAvDC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAAS+iB,EAAKzmB,EAALymB,MAAOq3C,EAAQ99D,EAAR89D,SAAQC,EAAA/9D,EAAEwvC,kBAAU,IAAAuuB,EAAC,KAAIA,EACrFplE,QAAQC,IAAI6tB,GACZ,IAAMi4B,EAAaj7C,EAAM2K,OAAOswC,WAC1B2c,EAAmB53D,EAAM2K,OAAOgpD,SAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAE1B4wD,EAAc,CAClB,QAAWtf,EACX,aAAgB2c,EAChB,sBAAyB50C,EAAM7O,GAC/B,KAAQ8jD,EACR,eAAkB,yBAClB,cAAiB,aAGnBznD,EAA2CC,YAAY0pD,IAAgCK,EAAA7pD,YAAAH,EAAA,GAAhFiqD,EAAYD,EAAA,GAAAE,EAAAF,EAAA,GAAIh8D,EAAOk8D,EAAPl8D,QAASC,EAAKi8D,EAALj8D,MAEhC,GAAID,EACF,OAAO5B,eAAC2E,KAAM,CACZmJ,OAAK,EACLlJ,SAAO,EACP8O,UAAU,EACV5O,MAAM,UAAS/E,SAEdH,EAAE,+CAIP,GAAIiC,EAEF,OADAvJ,QAAQC,IAAIsJ,GACL7B,eAACsrB,KAAK,CAAChnB,KAAK,SAAQvE,SACxBH,EAAE,iDAIP,IAAMyG,EAAYm3D,GAAmB,CACnCC,SAAUA,EACVzC,iBAAkBA,EAClBK,WAAYA,EACZlsB,WAAYA,IAGd,OACEnvC,eAAC2E,KAAM,CACLmJ,OAAK,EACLlJ,SAAO,EACPE,MAAM,UACNzC,KAAK,QACLoO,QAAS,kBAAMotD,EAAa,CAC1BpyD,UAAW,CAAE,MAASkyD,GACtBjpD,eAAgB,CACd,CAACC,MAAO2sC,GAAqC71C,UAAWsvD,GAAoCC,EAAkBK,OAE/GzmD,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACLxJ,QAAQC,IAAI,WAAYuJ,GAExBuB,EAAQnB,KAAKmE,GAEbwO,KAAMC,QAASlV,EAAE,6CAA+C,CAC9DmV,SAAUF,KAAMG,SAASC,cAE7B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GAAE,EAAC9B,SAENH,EAAE,oBAGT,KC/CeF,qBAAkB6C,aA9BjC,SAAqC5C,GAQjC,IAPFC,EAACD,EAADC,EAGA0+D,GAFK3+D,EAALyD,MACOzD,EAAP0D,QACW1D,EAAX2+D,aACAnvB,EAAUxvC,EAAVwvC,WACmB4uB,GADTp+D,EACVq+D,eAAmBr+D,EACnB89D,iBAAQ,IAAAM,EAAC,mBAAkBA,EAK3B,OAHAzlE,QAAQC,IAAI,eACZD,QAAQC,IAAI+lE,GAGVt+D,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,EAAG3G,GAAI,EAAE/G,SAC7BO,gBAAC4G,KAAI,CACH4gB,YAAY,OACZvhB,MAAO3G,EAAE,kBAAkBG,SAAA,CAC7BO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,KAAAD,SAAIu+D,EAAYhnC,eAAiBt3B,eAAA,SAChCJ,EAAE,mDAAmD,IAACI,eAAA,YAEzDA,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVC,eAACu+D,GAAyB,CAACn4C,MAAOk4C,EAAab,SAAUA,EAAUe,WAAYrvB,UAKvF,KCIezvC,qBAAkB6C,aA9BjC,SAAoC5C,GAQhC,IAPFC,EAACD,EAADC,EAGA6+D,GAFK9+D,EAALyD,MACOzD,EAAP0D,QACU1D,EAAV8+D,YACAtvB,EAAUxvC,EAAVwvC,WACmB4uB,GADTp+D,EACVq+D,eAAmBr+D,EACnB89D,iBAAQ,IAAAM,EAAC,mBAAkBA,EAK3B,OAHAzlE,QAAQC,IAAI,cACZD,QAAQC,IAAIkmE,GAGVz+D,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,EAAG3G,GAAI,EAAE/G,SAC7BO,gBAAC4G,KAAI,CACH4gB,YAAY,OACZvhB,MAAO3G,EAAE,iBAAiBG,SAAA,CAC5BO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,KAAAD,SAAI0+D,EAAWnnC,eAAiBt3B,eAAA,SAC/BJ,EAAE,kDAAkD,IAACI,eAAA,YAExDA,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVC,eAACu+D,GAAyB,CAACn4C,MAAOq4C,EAAYhB,SAAUA,EAAUtuB,WAAYA,UAKtF,KCmEezvC,I,SAAAA,iBAAkB6C,aAjFjC,SAA0B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAczD,EAAP0D,QAErChF,aAAaC,QAAQC,EAAKvB,yCAA0C,IAEpE,IAAMqhD,EAAaj7C,EAAM2K,OAAOswC,WAC1B2c,EAAmB53D,EAAM2K,OAAOgpD,SAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAChCzJ,EAAsEC,YACpE+5D,GAA2B,CACzB7xD,UAAW,CACTqZ,QAASu5B,EACTuD,aAAcoZ,EACdjuD,KAAMsuD,EACNqD,SAAU,UAEZ7yD,YAAa,iBARA8kB,EAAYrtB,EAArB1B,QAA8BgvB,EAAUttB,EAAjBzB,MAAyByuD,EAAShtD,EAAfxB,KAclD,GAAI6uB,EAAc,OAAO3wB,eAAA,KAAAD,SAAIH,EAAE,+BAE/B,GAAIgxB,EAEF,OADAt4B,QAAQC,IAAIq4B,GACL5wB,eAAA,KAAAD,SAAIH,EAAE,8BAGftH,QAAQC,IAAI+3D,GACZ,IAAMxrC,EAAUwrC,EAAUqO,4BAA4B75C,QAChDniB,EAAc2tD,EAAUqO,4BAA4Bh8D,YACpDD,EAAgB4tD,EAAUqO,4BAA4Bj8D,cACtDk8D,EAAStO,EAAUqO,4BAA4BE,mBAC/Cjd,EAAe0O,EAAUqO,4BAA4B/c,aACrDgI,EAAWqS,GAAe,CAC9Br8D,EAAGA,EACHoe,SAAU4jC,EAAaz0C,yBAAyBnF,qBAAqB5B,KACrEgxD,aAAcxV,EAAaz0C,yBAAyB/G,KACpDouD,UAAW5S,EAAa95C,sBAAsB1B,KAC9CgH,UAAWsR,GAAsBkjC,EAAax0C,WAC9CL,KAAMsuD,IAMR,OAHA/iE,QAAQC,IAAIqmE,GAIV5+D,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,kBAAmB4G,SAAUojD,EAAS7pD,SAC1DC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC8+D,GAAqB,CAACvI,QAASyE,EAAkBjuD,KAAMsuD,QAG5Dr7D,eAACI,KAAKC,IAAG,CAAAN,SACLO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACfO,gBAAA,MAAAP,SAAA,CAAKH,EAAE,2BAA2B,IAAEklB,EAAQC,YAC5C/kB,eAAA,OAAKE,UAAU,OAAMH,SACrBO,gBAACF,KAAKC,IAAG,CAAC+L,OAAK,EAACC,MAAI,EAAAtM,SAAA,CAClBC,eAAC++D,GAA8B,CAACr8D,cAAeA,IAC/C1C,eAACg/D,GAA4B,CAACr8D,YAAaA,IACzCi8D,GACCA,EAAOK,4BACNj/D,eAACk/D,GAA4B,CAACZ,YAAaM,EAAOK,8BAClD,GACFL,GACEA,EAAOO,6BAAiCr6C,EAAQs6C,qBAChDp/D,eAACq/D,GAA2B,CAACZ,WAAYG,EAAOO,6BAChD,mBAStB,KCpGaG,GAAuChmE,YAAGC,QAAAC,YAAA,g8EAoI1C+lE,GAAmCjmE,YAAGI,QAAAF,YAAA,wKAStCgmE,GAAmClmE,YAAGK,QAAAH,YAAA,iNC9ItCimE,GAAiCjtD,OAAaC,MAAM,CAC/DnF,OAAQkF,OAAaizC,WAAWia,cAChChK,aAAcljD,OAAaizC,WAAWia,gBC6OvBhgE,iBAAkB6C,aAhOL,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASsc,EAAShgB,EAATggB,UAAW3M,EAAYrT,EAAZqT,aAAc6M,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiB3M,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAiBhO,GAAF1G,EAAP6iB,QAAkB7iB,EAAT0G,WAAS,OACpI/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,kBACLwnB,QAASvZ,EAAO6hD,kBAClBl2D,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,2CAEnDI,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,eAIrDnT,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,SACLlG,UAAY+S,EAAOvK,OAAU,0BAA4B,eACzD6K,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,KAATiN,gBACtB7M,eAAA,UAAQmC,MAAM,YAAWpC,SAAaH,EAAE,sBAATiN,gBAC/B7M,eAAA,UAAQmC,MAAM,OAAMpC,SAAaH,EAAE,mCAATiN,mBAE5B7M,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,0BAG3DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,6BAIlEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,UACLlG,UAAY+S,EAAO6R,QAAW,0BAA4B,eAC1DvR,aAAa,MAAKxT,SAAA,CACvBzH,QAAQC,IAAI,gDACZD,QAAQC,IAAIonB,GACb3f,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAU8e,SAASr1B,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACnCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,OAG/D7M,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,2BAA2BG,SAAA,CAC9CO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,OACLlG,UAAY+S,EAAO5K,KAAQ,0BAA4B,eACvDkL,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACtB7M,eAAA,UAAQmC,MAAM,MAAKpC,SAAaH,EAAE,0CAATiN,gBACzB7M,eAAA,UAAQmC,MAAM,YAAWpC,SAAaH,EAAE,gDAATiN,gBAC/B7M,eAAA,UAAQmC,MAAM,QAAOpC,SAAaH,EAAE,4CAATiN,mBAE7B7M,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,6BAI3DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,WACLlG,UAAY+S,EAAOyxC,SAAY,0BAA4B,eAC3DnxC,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAU8e,SAASr1B,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACnCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,OAG/D7M,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,0BAG7DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,4BAA4BG,SAAA,CAC/CO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,QACLlG,UAAY+S,EAAO0xC,MAAS,0BAA4B,eACxDpxC,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACtB7M,eAAA,UAAQmC,MAAM,MAAKpC,SAAaH,EAAE,0CAATiN,gBACzB7M,eAAA,UAAQmC,MAAM,YAAWpC,SAAaH,EAAE,gDAATiN,gBAC/B7M,eAAA,UAAQmC,MAAM,QAAOpC,SAAaH,EAAE,4CAATiN,mBAE7B7M,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,6BAI5DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,2BACLlG,UAAY+S,EAAO9F,yBAA4B,0BAA4B,eAC3EoG,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,sBAATiN,gBACrB8S,EAAU2xB,0BAA0BloC,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OACpDjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKvB,qBAAqB5B,KAAK,MAAImD,EAAKnD,OAA/CyG,eAA6D,OAG9F7M,eAACwT,KAAY,CAACpN,KAAK,2BAA2BqN,UAAU,OAAOvT,UAAU,0BAG7EF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,oBACLlG,UAAY+S,EAAOm/B,mBAAsB,0BAA4B,eACrE7+B,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,sBAATiN,gBACrB8S,EAAUyyB,mBAAmBhpC,MAAMkD,KAAI,SAAA0d,GAAA,IAAGzgB,EAAIygB,EAAJzgB,KAAI,OAC7CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,qBAAqBqN,UAAU,OAAOvT,UAAU,6BAIzEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,wBACLlG,UAAY+S,EAAOnL,sBAAyB,0BAA4B,eACxEyL,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,sBAATiN,gBACrB8S,EAAU8qB,uBAAuBrhC,MAAMkD,KAAI,SAAA2d,GAAA,IAAG1gB,EAAI0gB,EAAJ1gB,KAAI,OACjDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,wBAAwBqN,UAAU,OAAOvT,UAAU,wBAExEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACxCC,eAACm2D,GAAY,CACXj2D,UAAY+S,EAAO7F,UAAa,0BAA4B,eAC5DwO,SAAUvH,EAAOjH,UACjB0O,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,EAChDi2C,WAAW,IAEb71D,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACtCC,eAACm2D,GAAY,CACXj2D,UAAY+S,EAAO5F,QAAW,0BAA4B,eAC1DuO,SAAUvH,EAAOhH,QACjByO,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,EAC9Ci2C,WAAW,IAEb71D,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAI9DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,2BAA2BG,SAAA,CAC9CC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,SACLlG,UAAY+S,EAAO3F,OAAU,0BAA4B,eACzDiG,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,0BAG3DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SAAA,CACtDC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,eACLlG,UAAY+S,EAAOyiD,aAAgB,0BAA4B,eAC/DniD,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,eAAeqN,UAAU,OAAOvT,UAAU,6BAInEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,kBACbC,aAAchV,EAAO+hD,gBACrBx9D,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,kBAAmBqG,EAAE7gB,OAAOkkB,cAC1C3J,EAAgB,mBAAmB,GAAM,EAC3C,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,2BAGzDI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAAC2E,KAAM,CACPG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAEHI,eAAC2E,KAAM,CAACG,MAAM,OAAO2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAACtG,SACvDH,EAAE,yBAGF,KCpLEF,qBAAkB6C,aA1CjC,SAAqC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACzC23D,EAAmB53D,EAAM2K,OAAOgpD,SAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAChC6G,EAAyBC,YAAY0rD,GAAkC,CACrEvuC,YAAa,WAAQ3tB,EAAQnB,KAAK,qBAAsB,IADnDy9D,EAEL5rD,YAAAH,EAAA,GAFmB,GAGfs5C,EAAa,CACjBtL,aAAcoZ,EACdjuD,KAAMsuD,GAGR,OACEr7D,eAAA,UAAQE,UAAU,qCAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,kDACduZ,eAAgBnZ,eAAA,QAChBoZ,WAAYxZ,EAAE,8CACdgb,eAAgB+kD,EAChBrmD,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLqtC,aAAcoZ,EACdjuD,KAAMsuD,IAGV3mD,eAAgB,CACd,CAAEC,MAAO2qD,GAAsC7zD,UAAWyhD,GAC1D,CAAEv4C,MAAOivC,GAAmBn4C,UAAW7D,SAIjD,EAAE7H,SACAO,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,YAAY,IAAE,IAAI,IAAExG,EAAE,sDAGhF,KCuMeF,I,kBAAAA,iBAAkB6C,aA/NjC,SAA0B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACjCu8D,GAAa,EACX3yD,EAAiB7J,EAAM2K,OAAOgpD,SAC9B0E,EAAYr4D,EAAM2K,OAAOhB,KAC/BzU,QAAQC,IAAI0U,GACZ3U,QAAQC,IAAIkjE,GAEZ,IAAMvO,EAAa,CACjBtL,aAAc30C,EACdF,KAAM0uD,GAGRn4D,EAAsEC,YAAS+7D,GAAsC,CACnH7zD,UAAWyhD,IADIv8B,EAAYrtB,EAArB1B,QAA8BgvB,EAAUttB,EAAjBzB,MAAyByuD,EAAShtD,EAAfxB,KAGlD8R,EAAyCC,YAAY2rD,IAA7CK,EAA8E9rD,YAAAH,EAAA,GAAlD,GAWpC,GAAI+c,EAAc,OAAO3wB,eAAA,KAAAD,SAAIH,EAAE,+BAE/B,GAAIgxB,EAEF,OADAt4B,QAAQC,IAAIq4B,GACL5wB,eAAA,KAAAD,SAAIH,EAAE,8BAGftH,QAAQC,IAAI,aACZD,QAAQC,IAAI+3D,GAEZ,IAUIz4C,EAVE+pC,EAAe0O,EAAU1O,aACzBgI,EAAWqS,GAAe,CAC9Br8D,EAAGA,EACHoe,SAAU4jC,EAAaz0C,yBAAyBnF,qBAAqB5B,KACrEgxD,aAAcxV,EAAaz0C,yBAAyB/G,KACpDouD,UAAW5S,EAAa95C,sBAAsB1B,KAC9CgH,UAAWsR,GAAsBkjC,EAAax0C,WAC9CL,KAAM0uD,IAIJxnD,EAAgB,CAAC,EA6DrB,OA5DIq8C,EAAUwP,uBAAuB12D,MAAMjK,QACzCygE,GAAa,EAEb/nD,EAAcy4C,EAAUwP,uBAAuB12D,MAAM,GAAGG,KAExD0K,EAAcvL,OAASmP,EAAYnP,OACnCuL,EAAcpL,YAAcgP,EAAYhP,YACpCgP,EAAYiN,UACd7Q,EAAc6Q,QAAUjN,EAAYiN,QAAQvN,IAE1CM,EAAY6sC,WACdzwC,EAAcywC,SAAW7sC,EAAY6sC,SAASntC,IAEhDtD,EAAc5L,KAAOwP,EAAYxP,MAAQ,GACzC4L,EAAc0wC,MAAQ9sC,EAAY8sC,OAAS,GACvC9sC,EAAY1K,2BACd8G,EAAc9G,yBAA2B0K,EAAY1K,yBAAyBoK,IAE5EM,EAAY/P,wBACdmM,EAAcnM,sBAAwB+P,EAAY/P,sBAAsByP,IAEtEM,EAAY9P,oBACdkM,EAAclM,kBAAoB8P,EAAY9P,kBAAkBwP,IAE9DM,EAAYzK,YACd6G,EAAc7G,UAAYsR,GAAsB7G,EAAYzK,YAE1DyK,EAAYxK,UACd4G,EAAc5G,QAAUqR,GAAsB7G,EAAYxK,UAExDwK,EAAYvK,SACd2G,EAAc3G,OAASuK,EAAYvK,QAEjCuK,EAAY69C,eACdzhD,EAAcyhD,aAAe79C,EAAY69C,cAEvC79C,EAAYq+C,kBACdjiD,EAAciiD,gBAAkBr+C,EAAYq+C,iBAE1Cr+C,EAAYu+C,kBACdniD,EAAcmiD,gBAAkBv+C,EAAYu+C,mBAI9C99D,QAAQC,IAAI,0BACZ0b,EAAcvL,OAAS,GACvBuL,EAAcpL,YAAc,GAC5BoL,EAAc6Q,QAAU,GACxB7Q,EAAc5L,KAAO,GACrB4L,EAAcywC,SAAW,GACzBzwC,EAAc0wC,MAAQ,GACtB1wC,EAAc9G,yBAA2B,GACzC8G,EAAcnM,sBAAwB,GACtCmM,EAAclM,kBAAoB,GAClCkM,EAAc7G,UAAY,GAC1B6G,EAAc5G,QAAU,GACxB4G,EAAciiD,iBAAkB,EAChCjiD,EAAcmiD,gBAAkB,IAIhCp2D,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,kBAAmB4G,SAAUojD,EAAS7pD,SAC1DO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAC87D,GAAiB,IAClB97D,eAACg1D,GAAqB,CACpBX,aAAa,EACbN,gBApGd,WACE,IAAMgI,EAAepwD,KAAO8vD,GAAWx9B,SAAS,EAAG,QAAQryB,OAAO,cAClEvI,EAAQnB,KAAK,gCAAD4M,OAAiC7B,EAAc,KAAA6B,OAAIitD,GACjE,EAkGc9H,YAjGd,WACE,IAAM8H,EAAepwD,KAAO8vD,GAAW1xD,IAAI,EAAG,QAAQ6B,OAAO,cAC7DvI,EAAQnB,KAAK,gCAAD4M,OAAiC7B,EAAc,KAAA6B,OAAIitD,GACjE,SAkGQz7D,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC9BO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,oBAEjBI,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACgU,KAAM,CACLC,cAAeA,EACfE,iBAAkBsrD,GAClBrrD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cAEjBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZ,IAAIjH,OAAYhO,EACZiO,OAAUjO,EACViV,EAAOjH,YACTA,EAAYmR,GAAmBlK,EAAOjH,YAGpCiH,EAAOhH,UACTA,EAAUkR,GAAmBlK,EAAOhH,UAItCwyD,EAA6B,CAAEp0D,UAAW,CACxC8I,MAAO,CACLqtC,aAAc30C,EACdF,KAAM0uD,EACN/yD,OAAQ2L,EAAO3L,OACfG,YAAawL,EAAOxL,YACpBic,QAASzQ,EAAOyQ,QAChBzc,KAAMgM,EAAOhM,KACbq8C,SAAUrwC,EAAOqwC,SACjBC,MAAOtwC,EAAOswC,MACdx3C,yBAA0BkH,EAAOlH,yBACjCrF,sBAAuBuM,EAAOvM,sBAC9BC,kBAAmBsM,EAAOtM,kBAC1BqF,UAAWA,EACXC,QAASA,EACTC,OAAQqK,SAAStD,EAAO/G,QACxBooD,aAAc/9C,SAAStD,EAAOqhD,cAC9BQ,gBAAiB7hD,EAAO6hD,gBACxBE,gBAAiB/hD,EAAO+hD,kBAEzB1hD,eAAgB,CACf,CAACC,MAAO2qD,GAAsC7zD,UAAWyhD,GACzD,CAACv4C,MAAOivC,GAAmBn4C,UAAW7D,SAEzCgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,kDAAoD,CACjEmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAClB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDvJ,QAAQC,IAAI,uCAAwCsJ,EAAMk+D,eAC1DzrD,GAAc,EAChB,GACF,EACDvU,SAEA,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACggE,GAAqB,CACpBrgD,UAAW2wC,EACXt9C,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EAAOtU,SAEdzH,QAAQC,IAAI0a,IACS,WAMlC3S,gBAACF,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAAA,CAC5B6/D,EACA5/D,eAACigE,GAA4B,IAAM,GAErCjgE,eAACg8D,GAAS,CACR/uD,eAAgBA,EAChBwuD,UAAWA,EACX3d,WAAW,qBAQ3B,KCxPaoiB,GAAiC5mE,YAAGC,QAAAC,YAAA,miCAsDpC2mE,GAAuC7mE,YAAGI,QAAAF,YAAA,2iBAgC1C8gB,GAAyBhhB,YAAGK,QAAAH,YAAA,4WAmB5B4mE,GAA0B9mE,YAAGO,QAAAL,YAAA,gMAU7B6mE,GAA6B/mE,YAAGQ,QAAAN,YAAA,mLAUhC8mE,GAA6BhnE,YAAGU,QAAAR,YAAA,2JCvF9BkG,qBAAkB6C,aA9BjC,SAAiC5C,GAA2B,IAAzBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBmU,GAAF5X,EAAP0D,QAAW1D,EAAF4X,IAC9Cg/C,EAAUnzD,EAAM2K,OAAOgpD,SAC7BnjD,EAA2BC,YAAYysD,IAAhCC,EAA2DxsD,YAAAH,EAAA,GAA3C,GACjBs5C,EAAa,CACjBtL,aAAc2U,GAGhB,OACEv2D,eAACw+B,GAAY,CACXtlB,WAAYtZ,EAAE,8CACduZ,eAAgB,GAChBC,WAAYxZ,EAAE,0CACdgb,eAAgB2lD,EAChBpiC,wBACE,CACE1yB,UAAW,CACT8I,MAAO,CACLgD,GAAIA,IAGR7C,eAAgB,CACd,CAAEC,MAAOurD,GAAgCz0D,UAAWyhD,MAMhE,KCsHextD,qBAAkB6C,aAlIjC,SAA4B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAEzB0X,GAFuCnb,EAAP0D,QAClBI,qBAAWxC,IACA6Z,YACzBy7C,EAAUnzD,EAAM2K,OAAOgpD,SACvB1T,EAAiB,SACjBnzC,EAAYtQ,EAAE,iCACdw+B,EAAuB99B,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CAC1CC,eAACg4D,GAAa,IACdh4D,eAACyW,GAAS,CAACL,OAAM,gCAAAtH,OAAkCynD,EAAO,QAAQr2D,UAAU,YAG9EoD,EAA4CC,YAAS28D,GAAgC,CACnFz0D,UAAW,CAAEm2C,aAAc2U,KADrB30D,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAI9B,OAAIzP,EACF5B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKhCa,EACF7B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,+CAMPkC,EAAK+8D,mBAAmBz1D,MAAMjK,OAajCa,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBjlB,qBAAsBA,EACtBy4B,aAAa,EAAM92D,SAErBC,eAACiO,GAAW,CACViC,UAAWA,EAEXI,aAAa,EACbZ,SAAU5N,EAAK+8D,mBAAmBnvD,SAClCG,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO3P,EAAK+8D,mBAAmBnvD,SAASgC,WAE1CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBgtD,mBAAmBz1D,MAC9CsG,EAAWmC,EAAgBgtD,mBAAmBnvD,SAEpD,OAAOoC,EAAS3S,OACZ,CAGE2C,KAAM,CACJ+8D,mBAAoB,CAClB9sD,WAAYH,EAAeitD,mBAAmB9sD,WAC9C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeitD,mBAAmBz1D,OAAK4I,aAAKF,IACxDpC,cAINkC,CACJ,GAEJ,EAAE7R,SACFC,eAAA,OAAAD,SACEO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,SAGpBlS,eAACiS,KAAM9K,KAAI,CAAApH,SACR+B,EAAK+8D,mBAAmBz1D,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACxCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACPzH,QAAQC,IAAIgR,GACbvJ,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,IADjBjO,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKuY,QAAWnW,KAAOpC,EAAKuY,SAASlW,OAAOkP,GAAc,IAD9CjO,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK01D,4BAA4B74D,OAEpCpG,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAK41D,2BAA8B51D,EAAK41D,2BAA2B/4D,KAAO,KAE9E9F,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC2zC,GAAU,CAAClB,QAAO,gCAAA3jC,OAAkCynD,EAAO,UAAAznD,OAASvF,EAAKgO,MAC1EvX,eAACwgE,GAAwB,CAACjpD,GAAIhO,EAAKgO,OAFE1K,kBAdzBA,eAkBJ,eA9EtB7M,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,2CAgFd,KCvEeF,iBAAkB6C,aAjEF,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAmBoT,GAATrT,EAAP0D,QAAc1D,EAALyD,MAAmBzD,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQsL,EAAShgB,EAATggB,UAAWtZ,EAAS1G,EAAT0G,UAAWuZ,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAa,OACrIvf,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,IAEhD5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAI9DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qCAAqCG,SAAA,CACxDO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,8BACLlG,UAAY+S,EAAOgsD,4BAA+B,0BAA4B,eAC9E1rD,aAAa,MAAKxT,SAAA,CACvBzH,QAAQC,IAAI,4CACZD,QAAQC,IAAIonB,GACb3f,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU+nB,wBAAwBt+B,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAClDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,8BAA8BqN,UAAU,OAAOvT,UAAU,0BAGhFF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oCAAoCG,SAAA,CACvDO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,6BACLlG,UAAY+S,EAAOksD,2BAA8B,0BAA4B,eAC7E5rD,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,KAATiN,gBACrB8S,EAAU+nB,wBAAwBt+B,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAClDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,6BAA6BqN,UAAU,OAAOvT,UAAU,gCAKnFI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAACqgB,GAAgB,CAAC3M,SAAUV,IAC5BhT,eAACsgB,GAAgB,CAACja,UAAWA,SAE1B,KCnEI3G,iBAAkB6C,aAJF,SAAH5C,GAAOA,EAADC,EAAN,IAAS22D,EAAO52D,EAAP42D,QAAO,OAC1Cv2D,eAAC6G,GAAU,CAACR,UAAS,gCAAAyI,OAAkCynD,IAAa,KC+GvD72D,qBAAkB6C,aApGjC,SAA8B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MACrCmzD,EAAUnzD,EAAM2K,OAAOgpD,SACvB1wD,EAAS,gCAAAyI,OAAmCynD,GAC5CrmD,EAAYtQ,EAAE,qCACdyjD,EAAiB,SACjBjlB,EAAuBp+B,eAACygE,GAAsB,CAAClK,QAASA,IAC9DjzD,EAAkCC,YAAS+W,IAAnC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACxB8R,EAAgCC,YAAYusD,GAAyB,CACnEpvC,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrCq6D,EAEL3sD,YAAAH,EAAA,GAF0B,GAI5B,GAAIhS,EAAS,OACX5B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAIlC,GAAIa,EAAO,OACT7B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAAA,KAAAD,SAAIH,EAAE,gCAIVtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM6d,EAAY7d,EAGlB,OACE9B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAW,IAAI3e,KACf+7D,4BAA6B,GAC7BE,2BAA4B,IAG9B/qD,SAAU,SAACC,EAAM9H,GAAyB,IAElCuV,EAFaxN,EAAa/H,EAAb+H,cAIfwN,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGnB4+C,EAAsB,CAAEj1D,UAAW,CACjC8I,MAAO,CACLqtC,aAAcx+C,EAAM2K,OAAOgpD,SAC3Bl1C,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,EACTm9C,4BAA6B5qD,EAAO4qD,4BACpCE,2BAA4B9qD,EAAO8qD,6BAEpCzqD,eAAgB,CACf,CAACC,MAAOurD,GAAgCz0D,UAAW,CAAEm2C,aAAcx+C,EAAM2K,OAAOgpD,cAGnFniD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,6CAA+C,CAC5DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC2gE,GAAsB,CACrBhhD,UAAWA,EACX3M,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,KAKZ,KCwJe3G,qBAAkB6C,aA3PjC,SAA+B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MACtCmU,EAAKnU,EAAM2K,OAAOwJ,GAClBg/C,EAAUnzD,EAAM2K,OAAOgpD,SACvB1wD,EAAS,gCAAAyI,OAAmCynD,GAC5ClT,EAAiB,SACjBnzC,EAAYtQ,EAAE,sCACdw+B,EAAuBp+B,eAACygE,GAAsB,CAAClK,QAASA,IAC9DjzD,EAAkCC,YAAS48D,GAAsC,CAC/E10D,UAAW,CACT8L,GAAIA,KAFA3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxB8R,EAAiCC,YAAYwsD,GAA4B,CACvErvC,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrCu6D,EAEL7sD,YAAAH,EAAA,GAF2B,GAK7B,GAAIhS,EAAS,OACX5B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAIlC,GAAIa,EAAO,OACT7B,eAAC03D,GAAa,CACZrU,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAAA,KAAAD,SAAIH,EAAE,gCAKVtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAEI++D,EACAC,EAHEnhD,EAAY7d,EAKd6d,EAAUohD,kBAAkB9B,8BAC9B4B,EAAqClhD,EAAUohD,kBAAkB9B,4BAA4B1nD,IAG3FoI,EAAUohD,kBAAkB5B,6BAC9B2B,EAAoCnhD,EAAUohD,kBAAkB5B,2BAA2B5nD,IAK7F,IAAIsK,EAAY,KACZC,EAAU,KASd,OARInC,EAAUohD,kBAAkBl/C,YAC9BA,EAAY,IAAI3e,KAAKyc,EAAUohD,kBAAkBl/C,YAE/ClC,EAAUohD,kBAAkBj/C,UAC9BA,EAAU,IAAI5e,KAAKyc,EAAUohD,kBAAkBj/C,UAKjD9hB,eAAC03D,GAAa,CACZxnD,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAWA,EACXC,QAASA,EACTm9C,4BAA6B4B,EAC7B1B,2BAA4B2B,GAG9B1sD,SAAU,SAACC,EAAM9H,GAAyB,IAElCuV,EAFaxN,EAAa/H,EAAb+H,cAIfwN,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGnB8+C,EAAuB,CAAEn1D,UAAW,CAClC8I,MAAO,CACLgD,GAAIA,EACJsK,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,EACTm9C,4BAA6B5qD,EAAO4qD,4BACpCE,2BAA4B9qD,EAAO8qD,6BAEpCzqD,eAAgB,CACf,CAACC,MAAOurD,GAAgCz0D,UAAW,CAAEm2C,aAAcx+C,EAAM2K,OAAOgpD,cAGnFniD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,8CAAgD,CAC7DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC2gE,GAAsB,CACrBhhD,UAAWA,EACX3M,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,KAKV,KChHe3G,I,eAAAA,iBAAkB6C,aArBjC,SAA2B5C,GAA4D,IAAzDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQm+C,EAAAv+C,EAAEy+B,4BAAoB,IAAA8f,EAAC,GAAEA,EAChF,OACIl+C,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,kBAAmB4G,SAAU5G,EAAE,yBAAyBG,SAC5EC,eAAA,OAAKE,UAAU,sBAAqBH,SACjCq+B,MAGLp+B,eAACI,KAAKC,IAAG,CAAAN,SACTC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACbA,YAOhB,KC9BaihE,GAA4B1nE,YAAGC,QAAAC,YAAA,0mCAwD/BynE,GAA2B3nE,YAAGI,QAAAF,YAAA,goDA2F9B8gB,GAAyBhhB,YAAGK,QAAAH,YAAA,0+BAiD5B0nE,GAAyB5nE,YAAGO,QAAAL,YAAA,oLAU5B2nE,GAA2B7nE,YAAGQ,QAAAN,YAAA,0LC9MpC,SAASoO,KACd,IAAIiP,EAAWxY,aAAa0E,QAAQxE,EAAKtB,0BACxB,OAAb4Z,IACFA,GAAW,GAGb,IAAI5O,EAAY,CACd4O,SAAwB,SAAbA,GAKb,OAFAve,QAAQC,IAAI0P,GAELA,CACT,CC2CevI,qBAAkB6C,aA9CjC,SAA6B5C,GAA6B,IAA3BC,EAACD,EAADC,EAAmB2J,GAAX5J,EAALyD,MAAczD,EAAP0D,QAAa1D,EAAJ4J,MAChDqK,EAA+BC,YAAYqtD,IAApCE,EAA2DrtD,YAAAH,EAAA,GAAvC,GACrBc,EAAiB,CACrB,CAAEC,MAAOqsD,GAA2Bv1D,UAAW7D,OAGjD,OAAK2B,EAAKsN,SAqBN7W,eAACszC,GAAe,CACdp6B,WAAYtZ,EAAE,yCACdwZ,WAAYxZ,EAAE,sBACduzC,kBAAmBiuB,EACnBhuB,2BAA4B,CACxB3nC,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACTV,UAAU,IAGdnC,eAAgBA,KA9BtB1U,eAACuzC,GAAa,CACZr6B,WAAYtZ,EAAE,uCACdwZ,WAAYxZ,EAAE,oBACdozC,gBAAiBouB,EACjBnuB,yBAA0B,CACtBxnC,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACTV,UAAU,IAGdnC,eAAgBA,IAyB5B,KCtBKrW,aAAa0E,QAAQxE,EAAKtB,2BAC7BoB,aAAaC,QAAQC,EAAKtB,0BAA0B,GA2KvCyC,I,GAAAA,iBAAkB6C,aAvKjC,SAAuB5C,GAAgB,IAAdC,EAACD,EAADC,EAEjBkb,GAF2Bnb,EAAP0D,QACNI,qBAAWxC,IACA6Z,YAC/BxX,EAAqDC,YAASy9D,GAA2B,CACvFv1D,UAAW7D,OADLhG,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAGvCuC,EAAiCC,YAAYstD,IAAtCE,EAA+DttD,YAAAH,EAAA,GAAzC,GAEvBwqB,EAAuBp+B,eAAC0N,GAAoB,CAACzD,WAAW,MAAMC,SAAS,gBAAenK,SAC1FC,eAACyW,GAAS,CAACL,OAAO,2BAGdkrD,EAAoBhhE,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACrCC,eAAC2E,KAAM,CAACG,MAAgE,UAAxDzG,aAAa0E,QAAQxE,EAAKtB,0BAAyC,UAAW,YACtF4H,KAAK,KACL4L,QAAS,WACPpS,aAAaC,QAAQC,EAAKtB,0BAA0B,GACpD8Z,EAAQnP,KACV,EACP7H,SACEH,EAAE,qBAELI,eAAC2E,KAAM,CAACG,MAAgE,SAAxDzG,aAAa0E,QAAQxE,EAAKtB,0BAAwC,UAAW,YACrF4H,KAAK,KACL3E,UAAU,OACVuQ,QAAS,WACPpS,aAAaC,QAAQC,EAAKtB,0BAA0B,GACpD8Z,EAAQnP,KACV,EACP7H,SACEH,EAAE,wBAIP,GAAIgC,EACF,OACE5B,eAACuhE,GAAkB,CAACnjC,qBAAsBA,EAAqBr+B,SAC7DC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,yBACbuQ,cAAemxD,EAAkBvhE,SAEjCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAOxB,GAAIa,EACF,OACE7B,eAACuhE,GAAkB,CAACnjC,qBAAsBA,EAAqBr+B,SAC7DC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,yBACbuQ,cAAemxD,EAAkBvhE,SAEhCH,EAAE,0CAMXtH,QAAQC,IAAIuJ,GAEZ,IAAM0/D,EAAiB1/D,EAAK0/D,eAE5B,OACExhE,eAACuhE,GAAkB,CAACnjC,qBAAsBA,EAAqBr+B,SAC7DC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,yBACbuQ,cAAemxD,EACfhxD,aAAa,EACbZ,SAAU8xD,EAAe9xD,SACrBG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO+vD,EAAe9xD,SAASgC,WAEjCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB2vD,eAAep4D,MAC1CsG,EAAWmC,EAAgB2vD,eAAe9xD,SAEhD,OAAOoC,EAAS3S,OACZ,CAGEqiE,eAAgB,CACdzvD,WAAYH,EAAe4vD,eAAezvD,WAC1C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe4vD,eAAep4D,OAAK4I,aAAKF,IACpDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAENO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,MALFrF,kBAQlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACPyhE,EAAep4D,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAChCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACN4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,GAAa,IAAC9a,eAAA,YAEhDM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACRC,eAAA,QAAMuG,MAAQgD,EAAKnD,KAAMrG,SAAGwJ,EAAKnD,KAAKye,MAAM,MAAY,IAAC7kB,eAAA,SACzDA,eAAA,SAAOE,UAAU,aAAYH,SACzBwJ,EAAKvB,qBAAqB5B,UAGhCpG,eAACiS,KAAMxM,IAAG,CAAA1F,SAELwJ,EAAK/E,WAAc+E,EAAK/E,WAAWugB,SAASF,MAAM,IAAM,KAG7D7kB,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAKm9B,gBAQ5BpmC,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0N,GAAoB,CAAYzD,WAAW,MAAMC,SAAS,gBAAenK,SACxEC,eAAC0b,GAAa,CACZnV,MAAO3G,EAAE,qCACTsZ,WAAY5Y,gBAAA,KAAAP,SAAA,CAAIwJ,EAAKnD,KAAK,IAAGuF,KAAOpC,EAAKsY,WAAWjW,OAAOkP,MAC3D1B,WAAaxZ,EAAE,2CACfyZ,eAAgBgoD,EAChBxnD,wBAAyB,CACvBpO,UAAW,CAAC8I,MAAO,CAACgD,GAAIhO,EAAKgO,KAC7B7C,eAAgB,CACd,CAAEC,MAAOqsD,GAA2Bv1D,UAAW7D,QAGnDmS,YAAY,gBACZE,WAAYja,eAACmG,KAAI,CAACC,KAAK,SACvBkQ,WAAY1W,EAAE,qBACdua,gBAAgB,MAfOtN,gBAkBzBtD,EAAKsN,SACL7W,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,+BAC9BI,eAAC2zC,GAAU,CAAClB,QAAO,yBAAA3jC,OAA2BvF,EAAKgO,MAEvDvX,eAACyhE,GAAoB,CAACl4D,KAAMA,MAvBSsD,kBAxBzBA,eAiDJ,YAO1B,KCzMa60D,GAA6BlvD,OAAaC,MAAM,CAC3Dyc,cAAe1c,OACfk0B,YAAal0B,OACbmvD,iBAAkBnvD,OAClBxK,qBAAsBwK,OACnBG,SAAS/S,YAAE,uBACdmI,kBAAmByK,OACnBhO,WAAYgO,OACZovD,YAAapvD,OACbpM,KAAMoM,OACDK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBAChBiiE,QAASrvD,OACTsvD,QAAStvD,OACT3J,YAAa2J,OACb4jD,gBAAiB5jD,SCuMJ9S,iBAAkB6C,aAxMP,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAY+f,GAAFhgB,EAAP0D,QAAkB1D,EAATggB,WAAW3M,EAAYrT,EAAZqT,aAAc6M,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiBvL,EAAM1U,EAAN0U,OAAQpB,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UAAS,OACzH/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO6a,gBAClBlvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,+BAEnDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,aAGjDzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,cACLwnB,QAASvZ,EAAOqyB,cAChB1mC,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,6BAEnDI,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,aAG/CzT,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,mBACLwnB,QAASvZ,EAAOstD,mBAChB3hE,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,4CAEnDI,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,gBAItDnT,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,uBACLlG,UAAY+S,EAAOjL,qBAAwB,0BAA4B,eACvEuL,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0CAATiN,gBACrB8S,EAAU6uB,sBAAsBplC,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAChDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,uBAAuBqN,UAAU,OAAOvT,UAAU,0BAGzEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,oBACLlG,UAAY+S,EAAOlL,kBAAqB,0BAA4B,eACpEwL,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAUyyB,mBAAmBhpC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC7CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,6BAIxEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,aACLlG,UAAY+S,EAAOzO,WAAc,0BAA4B,eAC7D+O,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,4CAATiN,gBACrB8S,EAAU8e,SAASr1B,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OACnCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,OAG/D7M,eAACwT,KAAY,CAACpN,KAAK,aAAaqN,UAAU,OAAOvT,UAAU,0BAG/DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,cACLlG,UAAY+S,EAAO2uD,YAAe,0BAA4B,eAC9DruD,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAU8e,SAASr1B,MAAMkD,KAAI,SAAA0d,GAAA,IAAGzgB,EAAIygB,EAAJzgB,KAAI,OACnCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,OAG/D7M,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,6BAIlEF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,4BAI3DF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,UACLlG,UAAY+S,EAAO4uD,QAAW,0BAA4B,eAC1DtuD,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,4BAI9DF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,UACbC,aAAchV,EAAOytD,QACrBlpE,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,UAAWqG,EAAE7gB,OAAOkkB,cAClC3J,EAAgB,WAAW,GAAM,EACnC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,4BAI9DF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,cACbC,aAAchV,EAAOxL,YACrBjQ,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,cAAeqG,EAAE7gB,OAAOkkB,cACtC3J,EAAgB,eAAe,GAAM,EACvC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,4BAIlEF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,2BAA2BG,SAAA,CAC9CC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,kBACbC,aAAchV,EAAO+hD,gBACrBx9D,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,kBAAmBqG,EAAE7gB,OAAOkkB,cAC1C3J,EAAgB,mBAAmB,GAAM,EAC3C,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,OAAOvT,UAAU,+BAKxEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACjBH,EAAE,2BAIF,KC/LLmiE,GAAwBzoE,YAAGC,QAAAC,YAAA,+KA+GlBkG,qBAAkB6C,aApGjC,SAAyB5C,GAAkB,IAAfC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACvBgD,EAAY,mBACZ+3B,EAAuBp+B,eAAC6G,GAAU,CAACR,UAAWA,IAEpD/C,EAAiCC,YAAS+W,IAAlC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACxB8R,EAAgCC,YAAYkuD,IAApCC,EAA0DjuD,YAAAH,EAAA,GAAvC,GAE3B,GAAIhS,EACF,OACE5B,eAACuhE,GAAkB,CAACnjC,qBAAsBA,EAAqBr+B,SAC7DC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,uBAAuBG,SACpCC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACc,SAAS,EAAMb,QAAQ,UAOzC,GAAIc,EACF,OACE7B,eAACuhE,GAAkB,CAACnjC,qBAAsBA,EAAqBr+B,SAC7DC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,uBAAuBG,SACpCC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,uCAObtH,QAAQC,IAAI,oCACZD,QAAQC,IAAIuJ,GACZ,IAAM6d,EAAY7d,EAElB,OACE9B,eAACuhE,GAAkB,CAACnjC,qBAAsBA,EAAqBr+B,SAC7DC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,uBAAuBG,SACpCC,eAACgU,KAAM,CACLC,cAAe,CACbib,eAAe,EACfwX,aAAa,EACbtgC,KAAM,GACNyC,YAAa,IAEfsL,iBAAkButD,GAClBttD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ2tD,EAAoB,CAAEv2D,UAAW,CAC/B8I,MAAO,CACL2a,cAAe7a,EAAO6a,cACtBwX,YAAaryB,EAAOqyB,YACpBu7B,iBAAkB5tD,EAAO4tD,iBACzBj6D,qBAAsBqM,EAAOrM,qBAC7BD,kBAAmBsM,EAAOtM,kBAC1B3B,KAAMiO,EAAOjO,KACby7D,QAASxtD,EAAOwtD,QAChBC,QAASztD,EAAOytD,QAChBj5D,YAAawL,EAAOxL,YACpBrE,WAAY6P,EAAO7P,WACnBo9D,YAAavtD,EAAOutD,YACpBxL,gBAAiB/hD,EAAO+hD,kBAEzB1hD,eAAgB,CACf,CAAEC,MAAOqsD,GAA2Bv1D,UAAW7D,SAElDgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,qCAAuC,CACpDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9DrU,eAACkiE,GAAiB,CAChBviD,UAAWA,EACX3M,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,OAMd,KCjCe3G,kBAzFW,SAAHC,GAAA,IAAMC,EAACD,EAADC,EAAGuiE,EAAOxiE,EAAPwiE,QAASrkB,EAAUn+C,EAAVm+C,WAAU,OACjDx9C,gBAAC2F,KAAKmN,MAAK,CAAC2qC,aAAa,EAAKh+C,SAAA,CAC5BC,eAAC0N,GAAoB,CACjBxD,SAAS,gBACTD,WAAW,SAAQlK,SAErBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAE,0BAAA0M,OAA4BqzD,GAC9B9/D,KAAK,SACLtB,OAAwB,YAAf+8C,EAA0B/9C,SAElCH,EAAE,+BANEiN,kBASX7M,eAAC0N,GAAoB,CACjBxD,SAAS,sBACTD,WAAW,OAAMlK,SAEnBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAE,0BAAA0M,OAA4BqzD,EAAO,YACrC9/D,KAAK,YACLtB,OAAwB,YAAf+8C,EAA0B/9C,SAElCH,EAAE,kCANEiN,kBASX7M,eAAC0N,GAAoB,CACjBxD,SAAS,gBACTD,WAAW,OAAMlK,SAEnBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAE,0BAAA0M,OAA4BqzD,EAAO,eACrC9/D,KAAK,WACLtB,OAAwB,eAAf+8C,EAA6B/9C,SAErCH,EAAE,qCANEiN,kBASX7M,eAAC0N,GAAoB,CACjBxD,SAAS,qBACTD,WAAW,OAAMlK,SAEnBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAE,0BAAA0M,OAA4BqzD,EAAO,UACrC9/D,KAAK,QACLtB,OAAwB,UAAf+8C,EAAwB/9C,SAEhCH,EAAE,gCANEiN,kBASX7M,eAAC0N,GAAoB,CACjBxD,SAAS,yBACTD,WAAW,OAAMlK,SAEnBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAE,0BAAA0M,OAA4BqzD,EAAO,eACrC9/D,KAAK,QACLtB,OAAwB,eAAf+8C,EAA6B/9C,SAErCH,EAAE,qCANEiN,kBASX7M,eAAC0N,GAAoB,CACjBxD,SAAS,yCACTD,WAAW,OAAMlK,SAEnBC,eAACiG,KAAK+3C,UAAS,CAEX99C,UAAU,4BACVkC,GAAE,0BAAA0M,OAA4BqzD,EAAO,iCACrC9/D,KAAK,OACLtB,OAAwB,iCAAf+8C,EAA+C/9C,SAEvDH,EAAE,uDANEiN,oBASA,IC5CAnN,qBAAkB6C,aArCjC,SAAkC5C,GAS7B,IARHC,EAACD,EAADC,EACAwD,EAAKzD,EAALyD,MAEArD,GADOJ,EAAP0D,QACQ1D,EAARI,UAAQ+Q,EAAAnR,EACR0G,iBAAS,IAAAyK,EAAC,mBAAkBA,EAC5BpK,EAAiB/G,EAAjB+G,kBACAo3C,EAAUn+C,EAAVm+C,WACA+d,EAAYl8D,EAAZk8D,aAEMsG,EAAU/+D,EAAM2K,OAAOq0D,SAE7B,OACIpiE,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,yBAA0B4G,SAAUq1D,EAAa97D,SACrEO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAElCC,eAAC6G,GAAU,CAACR,UAAWA,IACrBK,OAGNpG,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACTC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACZA,IAEJC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACqiE,GAAqB,CAACvkB,WAAYA,EAAYqkB,QAASA,eAOtE,KCuCeziE,I,GAAAA,iBAAkB6C,aAxEjC,SAA8B5C,GAU3B,IATCC,EAACD,EAADC,EACAwD,EAAKzD,EAALyD,MAGArD,GAFOJ,EAAP0D,QACS1D,EAAT6sD,UACQ7sD,EAARI,UACA+9C,EAAUn+C,EAAVm+C,WACA5tC,EAASvQ,EAATuQ,UACAxJ,EAAiB/G,EAAjB+G,kBAAiBoK,EAAAnR,EACjB0G,iBAAS,IAAAyK,EAAC,mBAAkBA,EAGxBgK,EADcrX,qBAAWxC,IACA6Z,WACzBqnD,EAAU/+D,EAAM2K,OAAOq0D,SAGxBlyD,IACHA,EAAYtQ,EAAE,+BAGhB,IAAA0D,EAAiCC,YAAS09D,GAA0B,CAClEx1D,UAAW,CAAE8L,GAAI4qD,KADXvgE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB,GAAIF,EACF,OACE5B,eAACsiE,GAAyB,CAAC57D,kBAAmBA,EAAmBL,UAAWA,EAAWy3C,WAAYA,EAAW/9C,SAC5GC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACc,SAAS,EAAMb,QAAQ,UAOzC,GAAIc,EACF,OACE7B,eAACsiE,GAAyB,CAAC57D,kBAAmBA,EAAmBL,UAAWA,EAAWy3C,WAAYA,EAAW/9C,SAC5GC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,uCAOb,IAAM8d,EAAQ5b,EAAKupD,cACbxpC,EAAanE,EAAMmE,UAAalW,KAAO+R,EAAMmE,WAAWjW,OAAOkP,GAAc,GAC7EynD,EAAgB7kD,EACtBpd,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxB2d,EAAMtX,KAAO,IAAMyb,KACd,GAEV,OACE7hB,eAACsiE,GAAyB,CACxBpyD,UAAWA,EACXxJ,kBAAmBA,EACnBL,UAAWA,EACXy3C,WAAYA,EAAW/9C,SAEvBO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVO,gBAAC4G,KAAKqJ,MAAK,CAAAxQ,SAAA,CAAEmQ,EAAU,IAAEqyD,OAE1BxiE,MAIP,KChEIyiE,GAAwBlpE,YAAGC,QAAAC,YAAA,+LA4IlBkG,I,YAAAA,iBAAkB6C,aAjIjC,SAA0B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACvBmU,GADqC5X,EAAP0D,QACzBD,EAAM2K,OAAOq0D,UAElBtkB,EAAa,UAEnBx6C,EAAiCC,YAAS09D,GAA0B,CAClEx1D,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAgCC,YAAY2uD,IAApCC,EAA0D1uD,YAAAH,EAAA,GAAvC,GAG3B,GAAIhS,EACF,OACE5B,eAAC0iE,GAAqB,CAAC5kB,WAAYA,EAAW/9C,SAC5CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACc,SAAS,EAAMb,QAAQ,QAMvC,GAAIc,EACF,OACE7B,eAAC0iE,GAAqB,CAAC5kB,WAAYA,EAAW/9C,SAC5CC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,qCAMX,IAAMiY,EAAc/V,EAAKupD,cACnB1rC,EAAY7d,EAEd6gE,EAA4B,GAC5B9qD,EAAY9P,oBACd46D,EAA4B9qD,EAAY9P,kBAAkBwP,IAG5D,IAAIqrD,EAAoB,GACpB/qD,EAAYrT,aACdo+D,EAAoB/qD,EAAYrT,WAAW+S,IAG7C,IAAIsrD,EAAqB,GAKzB,OAJIhrD,EAAY+pD,cACdiB,EAAqBhrD,EAAY+pD,YAAYrqD,IAI7CvX,eAAC0iE,GAAqB,CAAC5kB,WAAYA,EAAW/9C,SAC1CC,eAACgU,KAAM,CACLC,cAAe,CACbib,cAAerX,EAAYqX,cAC3BwX,YAAa7uB,EAAY6uB,YACzBi7B,iBAAkB9pD,EAAY8pD,iBAC9B35D,qBAAsB6P,EAAY7P,qBAAqBuP,GACvDxP,kBAAmB46D,EACnBv8D,KAAMyR,EAAYzR,KAClBy7D,QAAShqD,EAAYgqD,QACrBC,QAASjqD,EAAYiqD,QACrBj5D,YAAagP,EAAYhP,YACzBrE,WAAYo+D,EACZhB,YAAaiB,EACbzM,gBAAiBv+C,EAAYu+C,iBAE/BjiD,iBAAkButD,GAClBttD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ,IAAI4hB,EAAc,CAChB1e,GAAIA,EACJ2X,cAAe7a,EAAO6a,cACtBwX,YAAaryB,EAAOqyB,YACpBi7B,iBAAkBttD,EAAOstD,iBACzB35D,qBAAsBqM,EAAOrM,qBAC7BD,kBAAmBsM,EAAOtM,kBAC1B3B,KAAMiO,EAAOjO,KACby7D,QAASxtD,EAAOwtD,QAChBC,QAASztD,EAAOytD,QAChBj5D,YAAawL,EAAOxL,YACpButD,gBAAiB/hD,EAAO+hD,iBAGtB/hD,EAAO7P,aACTyxB,EAAwB,WAAI5hB,EAAO7P,YAGjC6P,EAAOutD,cACT3rC,EAAyB,YAAI5hB,EAAOutD,aAGtCa,EAAoB,CAAEh3D,UAAW,CAC/B8I,MAAO0hB,GACNvhB,eAAgB,CACf,CAAEC,MAAOqsD,GAA2Bv1D,UAAW7D,SAElDgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,sCAAwC,CACrDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9DrU,eAACkiE,GAAiB,CAChBviD,UAAWA,EACX3M,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRhO,UAvHM,oBAwHN,KAKd,KC9Jay8D,GAAsCxpE,YAAGC,QAAAC,YAAA,+zBA8CzCupE,GAAoCzpE,YAAGI,QAAAF,YAAA,khCA+DvCwpE,GAAiC1pE,YAAGK,QAAAH,YAAA,4IASpC8gB,GAAyBhhB,YAAGO,QAAAL,YAAA,+vBCpB1BkG,qBAAkB6C,aAnFjC,SAAkC5C,GAY9B,IAXFC,EAACD,EAADC,EACAwD,EAAKzD,EAALyD,MAGAsM,GAFO/P,EAAP0D,QACS1D,EAAT6sD,UACQ7sD,EAAR+P,UACAG,EAAUlQ,EAAVkQ,WACAiuC,EAAUn+C,EAAVm+C,WACA/9C,EAAQJ,EAARI,SAAQ0G,EAAA9G,EACR+G,yBAAiB,IAAAD,EAAC,GAAEA,EAAAw8D,EAAAtjE,EACpBk8D,oBAAY,IAAAoH,EAAC,GAAEA,EAAAnyD,EAAAnR,EACf0G,iBAAS,IAAAyK,EAAC,mBAAkBA,EAGtBgK,EADcrX,qBAAWxC,IACA6Z,WACzB5K,EAAYtQ,EAAE,8BACduiE,EAAU/+D,EAAM2K,OAAOq0D,SAE7B9+D,EAAiCC,YAAS09D,GAA0B,CAClEx1D,UAAW,CAAE8L,GAAI4qD,KADXvgE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAK1B,GAAIF,EACF,OACE5B,eAACsiE,GAAyB,CACxB57D,kBAAmBA,EACnBo3C,WAAYA,EACZ+d,aAAcA,EACdx1D,UAAWA,EAAUtG,SAErBC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACc,SAAS,EAAMb,QAAQ,UAOzC,GAAIc,EACF,OACE7B,eAACsiE,GAAyB,CACxB57D,kBAAmBA,EACnBo3C,WAAYA,EACZ+d,aAAcA,EACdx1D,UAAWA,EAAUtG,SAErBC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,uCAOb,IAAM8d,EAAQ5b,EAAKupD,cACbxpC,EAAanE,EAAMmE,UAAalW,KAAO+R,EAAMmE,WAAWjW,OAAOkP,GAAc,GAC7EynD,EAAgB7kD,EACtBpd,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxB2d,EAAMtX,KAAO,IAAMyb,KACd,GAEV,OACE7hB,eAACsiE,GAAyB,CACxB57D,kBAAmBA,EACnBo3C,WAAYA,EACZ+d,aAAcA,EACdx1D,UAAWA,EAAUtG,SAErBC,eAACiO,GAAW,CACViC,UAAW5P,gBAAA,QAAAP,SAAA,CAAOmQ,EAAU,IAAEqyD,KAC9B7yD,SAAUA,EACVG,WAAYA,EACZS,aAAa,EAAMvQ,SAElBA,KAIP,KClDeL,qBAAkB6C,aAnCjC,SAAoC5C,GAA2B,IAAzBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBmU,GAAF5X,EAAP0D,QAAW1D,EAAF4X,IACjD4qD,EAAU/+D,EAAM2K,OAAOq0D,SAC7BxuD,EAAsCC,YAAYmvD,IAA3CE,EAA0EnvD,YAAAH,EAAA,GAA/C,GAC5Bs5C,EAAa,CACjB7B,cAAe8W,GAGjB,OACEniE,eAAA,UAAQE,UAAU,2CAChBqG,MAAO3G,EAAE,kBACT6Q,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,iDACduZ,eAAgBnZ,eAAA,QAChBoZ,WAAYxZ,EAAE,6CACdgb,eAAgBsoD,EAChB5pD,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIA,IAGR7C,eAAgB,CACd,CAAEC,MAAOmuD,GAAqCr3D,UAAWyhD,MAInE,EAAEntD,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,aAG7B,KCyHe1G,qBAAkB6C,aA9IjC,SAAsB5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACnBqxB,GADiC90B,EAAP0D,QACZI,qBAAWxC,KACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBAC/B7S,QAAQC,IAAIk8B,GAEZ,IAAM0tC,EAAU/+D,EAAM2K,OAAOq0D,SACvBtkB,EAAa,aACbzlC,EAAS,kDAAAvJ,OAAqDqzD,GAEpE7+D,EAA4CC,YAASu/D,GAAqC,CACxFr3D,UAAW,CACT4/C,cAAe8W,GAEjBt2D,YAAa,iBAJPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAO9BuC,EAAyBC,YAAYpa,GAA9B2e,EAA4CrE,YAAAH,EAAA,GAA9B,GAEflN,EAAoBpG,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CAEvCC,eAAC2E,KAAM,CACLG,MAAM,YACNzC,KAAK,iBACLnC,UAAU,OACVuQ,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAASgV,EAC7B,EAACtY,SAEDH,EAAE,oBAELI,eAACyW,GAAS,CAACL,OAAM,yBAAAtH,OAA2BqzD,EAAO,mBAAmBjiE,UAAU,YAGlF,GAAI0B,EAAS,OACX5B,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SACrFH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC6iE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SAAA,CACtFC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAM6rC,EAAgBthE,EAAKshE,cACrB1zD,EAAW5N,EAAKshE,cAAc1zD,SAGpC,OAAK0zD,EAAch6D,MAAMjK,OAiCvBa,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYpuC,SAAUA,EAAUG,WAzBtD,WACjBwB,EAAU,CACR5F,UAAW,CACTgG,MAAO2xD,EAAc1zD,SAASgC,WAEhCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBuxD,cAAch6D,MACzCsG,EAAWmC,EAAgBuxD,cAAc1zD,SAE/C,OAAOoC,EAAS3S,OACZ,CAGEikE,cAAe,CACbrxD,WAAYH,EAAewxD,cAAcrxD,WACzC3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAewxD,cAAch6D,OAAK4I,aAAKF,IACnDpC,aAGJkC,CACN,GAEJ,EAGiGlL,kBAAmBA,EAAkB3G,SAClIO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,MAPFrF,kBAUlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNqjE,EAAch6D,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC9BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACP4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,GAAY,IAAC9a,eAAA,SAE5CM,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC1B4L,KAAOpC,EAAKsY,UAAY,IAAMtY,EAAK6D,WAAWxB,OAAOV,GAAY,IAAE,MACnES,KAAOpC,EAAKsY,UAAY,IAAMtY,EAAK8D,SAASzB,OAAOV,GAAY,IAAG,UAGvE5K,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKnD,KAAK,IAACpG,eAAA,SACZA,eAAA,OAAKwM,wBAAyB,CAACC,OAAQC,KAAUC,SAASpD,EAAKV,cAAgB3I,UAAU,kBAE3FI,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAK4D,yBAAyBnF,qBAAqB5B,KAAK,IAACpG,eAAA,SAC1DA,eAAA,SAAOE,UAAU,aAAYH,SAAEwJ,EAAK4D,yBAAyB/G,UAE/D9F,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKub,SAAWvb,EAAKub,QAAQC,SAC5Bxb,EAAKm7C,SAAYpkD,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAACC,eAAA,SAAOuJ,EAAKm7C,SAAS3/B,YAAmB,MAE1FzkB,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKgE,wBAAwB,IAAEhE,EAAK+D,UAEvCtN,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAK2lB,kBAE5B5uB,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,yBAAA0M,OAA2BqzD,EAAO,qBAAArzD,OAAoBvF,EAAKgO,IAAKxX,SACtEC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAACqjE,GAA2B,CAAC9rD,GAAIhO,EAAKgO,UAlC1B1K,eAoCJ,WAnFtB7M,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SACtFC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,8CAuFd,KCjKa0jE,GAAiC9wD,OAAaC,MAAM,CAC/Dyc,cAAe1c,OACfpM,KAAMoM,OACDK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBAChB0N,OAAQkF,OACLG,SAAS/S,YAAE,uBACduN,yBAA0BqF,OACvBG,SAAS/S,YAAE,uBACdiiB,UAAWrP,OACRG,SAAS/S,YAAE,uBACdwN,UAAWoF,OACRgqB,UAAU58B,YAAE,sBACZ+S,SAAS/S,YAAE,uBACdyN,QAASmF,OACNgqB,UAAU58B,YAAE,sBACZ+S,SAAS/S,YAAE,uBACdklB,QAAStS,OACTkyC,SAAUlyC,SCIG9S,qBAAkB6C,aAdjC,SAAkC5C,GAAgB,IAAbC,EAACD,EAADC,EAC7BuiE,EADqCxiE,EAALyD,MAChB2K,OAAOq0D,SACvB/7D,EAAS,yBAAAyI,OAA4BqzD,EAAO,eAElD,OACEniE,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBO,gBAACqE,KAAM,CAACG,MAAM,yBAAwB/E,SAAA,CACpCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBAAkB,IAAExG,EAAE,oBAIrD,KC6JeF,I,GAAAA,iBAAkB6C,aAnKjC,SAAkC5C,GAYjC,IAXCC,EAACD,EAADC,EACAyD,EAAO1D,EAAP0D,QAEA2P,GADKrT,EAALyD,MACYzD,EAAZqT,cACAC,EAAMtT,EAANsT,OACAoB,EAAM1U,EAAN0U,OACAsL,EAAShgB,EAATggB,UACAtZ,EAAS1G,EAAT0G,UACAuZ,EAAejgB,EAAfigB,gBACAC,EAAalgB,EAAbkgB,cAIA,OAJalgB,EACbykC,UAIE9jC,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO6a,gBAClBlvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,0CAEnDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,eAInDzT,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,4BAI3DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO4O,UAAa,0BAA4B,eAC5DjG,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GACT8S,EAAc,YAAa9S,GAC3B6S,EAAgB,aAAa,EAC/B,EACA5D,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACxCC,eAACm2D,GAAY,CACXj2D,UAAY+S,EAAO7F,UAAa,0BAA4B,eAC5DwO,SAAUvH,EAAOjH,UACjB0O,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,EAChDi2C,WAAW,IAMb71D,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACtCC,eAACm2D,GAAY,CACXj2D,UAAY+S,EAAO5F,QAAW,0BAA4B,eAC1DuO,SAAUvH,EAAOhH,QACjByO,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,EAC9Ci2C,WAAW,IAEb71D,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAI9DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,2BACLlG,UAAY+S,EAAO9F,yBAA4B,0BAA4B,eAC3EoG,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU2xB,0BAA0BloC,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACpDjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKvB,qBAAqB5B,KAAK,MAAImD,EAAKnD,OAA/CyG,eAA6D,OAG9F7M,eAACwT,KAAY,CAACpN,KAAK,2BAA2BqN,UAAU,OAAOvT,UAAU,0BAG7EF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACR8B,KAAK,SACLlG,UAAY+S,EAAO3F,OAAU,0BAA4B,eACzDiG,aAAa,QACjBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,6BAI/DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,UACLlG,UAAY+S,EAAO6R,QAAW,0BAA4B,eAC1DvR,aAAa,MAAKxT,SAAA,CACvBzH,QAAQC,IAAI,gDACZD,QAAQC,IAAIonB,GACb3f,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU8e,SAASr1B,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACnCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,OAG/D7M,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,WACLlG,UAAY+S,EAAOyxC,SAAY,0BAA4B,eAC3DnxC,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAU8e,SAASr1B,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OACnCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,OAG/D7M,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,gCAKjEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC2E,KAAM,CAACG,MAAM,OAAO2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAAEgC,KAAK,SAAQtI,SACrEH,EAAE,yBAKjB,KC5JM2jE,GAA8BjqE,YAAGC,QAAAC,YAAA,4KA6HxBkG,qBAAkB6C,aAlHjC,SAAiC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC/B8+D,EAD6CxiE,EAALyD,MACxB2K,OAAOq0D,SACvB/7D,EAAS,yBAAAyI,OAA4BqzD,EAAO,gBAC5CrkB,EAAa,aACb5tC,EAAYtQ,EAAE,kCAEpBgU,EAAiCC,YAAY0vD,GAA6B,CACxEvyC,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrCm9D,EAELzvD,YAAAH,EAAA,GAF2B,GAG7BtQ,EAAiCC,YAAS+W,IAAlC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAElB2hE,EAAiBzjE,eAAC0jE,GAAyB,IAEjD,GAAI9hE,EAAS,OACX5B,eAAC0iE,GAAqB,CACpBe,eAAgBA,EAChBvzD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAErBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACTvB,gBAACoiE,GAAqB,CACpBe,eAAgBA,EAChBvzD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAAA,CAErBC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAM5X,EAAY7d,EAGlB,OAFAxJ,QAAQC,IAAIonB,GAGV3f,eAAC0iE,GAAqB,CACpBe,eAAgBA,EAChBvzD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAErBC,eAACgU,KAAM,CACLC,cAAe,CACbib,eAAe,EACf9oB,KAAM,GACNkH,OAAQ,GACRH,yBAA0B,GAC1B0U,UAAW,IAAI3e,KACfkK,UAAW,GACXC,QAAS,GACTyX,QAAS,GACT4/B,SAAU,IAEZvwC,iBAAkBmvD,GAClBlvD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZmvD,EAAuB,CAAE/3D,UAAW,CAClC8I,MAAO,CACL82C,cAAe8W,EACfj1D,cAAe,WACfg2C,kBAAmB,EACnBygB,iBAAkB,iBAClBz0C,cAAe7a,EAAO6a,cACtB9oB,KAAMiO,EAAOjO,KACbkH,OAAQqK,SAAStD,EAAO/G,QACxBH,yBAA0BkH,EAAOlH,yBACjC2X,QAASzQ,EAAOyQ,QAChB4/B,SAAUrwC,EAAOqwC,SACjB7iC,UAAWvD,GAAejK,EAAOwN,WACjCzU,UAAWmR,GAAmBlK,EAAOjH,WACrCC,QAASkR,GAAmBlK,EAAOhH,WAEpCqH,eAAgB,CACf,CAACC,MAAOmuD,GAAqCr3D,UAAW,CACtD4/C,cAAe8W,OAGpBvtD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,gDAAkD,CAC/DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC4jE,GAAyB,CACxB5wD,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRsL,UAAWA,EACXtZ,UAAWA,GACX,KAKZ,KCnHe3G,sBAvBf,SAAkCC,GAA4C,IAAzCC,EAACD,EAADC,EAAG4sD,EAAS7sD,EAAT6sD,UAAW2V,EAAOxiE,EAAPwiE,QAASl1D,EAActN,EAAdsN,eAG1D,OAFA3U,QAAQC,IAAIi0D,GAGVxsD,eAACssD,GAAQ,CACPv3C,SAAS,MACTq3C,KAAM,CACF,CACEhmD,KAAM,UACNG,MAAO3G,EAAE,6CACT+N,KAAK,yBAADmB,OAA2BqzD,EAAO,qBAAArzD,OAAoB7B,IAE5D,CACE7G,KAAM,aACNG,MAAO3G,EAAE,gDACT+N,KAAK,yBAADmB,OAA2BqzD,EAAO,qBAAArzD,OAAoB7B,EAAc,iBAG9ElM,OAAQyrD,GAGd,ICoEe9sD,I,GAAAA,iBAAkB6C,aAzEjC,SAAsC5C,GAA4C,IAA1CC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBopD,GAAF7sD,EAAP0D,QAAkB1D,EAAT6sD,WAAWzsD,EAAQJ,EAARI,SAE9D+a,EADcrX,qBAAWxC,IACA6Z,WACzB5K,EAAYtQ,EAAE,mCAGduiE,EAAU/+D,EAAM2K,OAAOq0D,SACvBn1D,EAAiB7J,EAAM2K,OAAOwJ,GAEpCjU,EAAiCC,YAAS09D,GAA0B,CAClEx1D,UAAW,CAAE8L,GAAI4qD,KADXvgE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxByJ,EAA+EhI,YAASw/D,GAAmC,CACzHt3D,UAAW,CACT8L,GAAItK,KAFS42D,EAAet4D,EAAxB3J,QAAiCkiE,EAAav4D,EAApB1J,MAA4BkiE,EAAYx4D,EAAlBzJ,KAMlD2hE,EAAiBzjE,eAAC0jE,GAAyB,IAEjD,GAAI9hE,GAAWiiE,EACb,OACE7jE,eAACsiE,GAAyB,CAACmB,eAAgBA,EAAe1jE,SACxDO,gBAAC4G,KAAI,CAACX,MAAO2J,EAAUnQ,SAAA,CACrBC,eAACgkE,GAAyB,CAACxX,UAAWA,EAAW2V,QAASA,EAASl1D,eAAgBA,IACnFjN,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACc,SAAS,EAAMb,QAAQ,WAOzC,GAAIc,GAASiiE,EACX,OACE9jE,eAACsiE,GAAyB,CAACmB,eAAgBA,EAAe1jE,SACxDO,gBAAC4G,KAAI,CAACX,MAAO2J,EAAUnQ,SAAA,CACrBC,eAACgkE,GAAyB,CAACxX,UAAWA,EAAW2V,QAASA,EAASl1D,eAAgBA,IACnFjN,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,wCAOb,IAAM8d,EAAQ5b,EAAKupD,cACbzJ,EAAemiB,EAAaniB,aAC5B//B,EAAanE,EAAMmE,UAAalW,KAAO+R,EAAMmE,WAAWjW,OAAOkP,GAAc,GAC7EynD,EAAgB3gB,EACtBthD,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxB2d,EAAMtX,KAAO,IAAMyb,KACd,GAEJoiD,EAAwBriB,EAC9BthD,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxB6hD,EAAax7C,QACR,GAEV,OACEpG,eAACsiE,GAAyB,CAACxkB,WAzDV,aAyDkC2lB,eAAgBA,EAAe1jE,SAChFO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVO,gBAAC4G,KAAKqJ,MAAK,CAAAxQ,SAAA,CAAEmQ,EAAU,IAAEqyD,EAAa,IAAE0B,OAE1CjkE,eAACgkE,GAAyB,CAACxX,UAAWA,EAAW2V,QAASA,EAASl1D,eAAgBA,IAClFlN,MAIT,KC1EMmkE,GAAiC5qE,YAAGC,QAAAC,YAAA,4KAgJ3BkG,I,GAAAA,iBAAkB6C,aApIjC,SAAkC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OACzC++D,EAAU/+D,EAAM2K,OAAOq0D,SACvBn1D,EAAiB7J,EAAM2K,OAAOwJ,GAC9BlR,EAAS,yBAAAyI,OAA4BqzD,EAAO,gBAC5C3V,EAAY,UACZt8C,EAAYtQ,EAAE,mCAEpBgU,EAAoCC,YAAYqwD,IAAzCC,EAAwEpwD,YAAAH,EAAA,GAA/C,GAChCtQ,EAAiCC,YAASw/D,GAAmC,CAC3Et3D,UAAW,CACT8L,GAAItK,KAFArL,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKlB2hE,EAAiBzjE,eAAC0jE,GAAyB,IAEjD,GAAI9hE,EAAS,OACX5B,eAACokE,GAA6B,CAC5BX,eAAgBA,EAChBvzD,UAAWA,EACXs8C,UAAWA,EACXnmD,UAAWA,EAAUtG,SAEpBH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC8jE,GAA6B,CAC5BX,eAAgBA,EAChBvzD,UAAWA,EACXs8C,UAAWA,EACXnmD,UAAWA,EAAUtG,SAAA,CAErBC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAM5X,EAAY7d,EACZ8/C,EAAe9/C,EAAK8/C,aAC1BtpD,QAAQC,IAAIonB,GAIZ,IAAI0kD,EAAmB,KACnBziB,EAAa//B,YACfwiD,EAAmB,IAAInhE,KAAK0+C,EAAa//B,YAG3C,IAAIs1C,EAAmB,KACnBvV,EAAax0C,YACf+pD,EAAmBz4C,GAAsBkjC,EAAax0C,YAExD,IAAIyqD,EAAiB,KAMrB,OALIjW,EAAav0C,UACfwqD,EAAiBn5C,GAAsBkjC,EAAav0C,UAKpDrN,eAACokE,GAA6B,CAC5BX,eAAgBA,EAChBvzD,UAAWA,EACXs8C,UAAWA,EACXnmD,UAAWA,EAAUtG,SAErBC,eAACgU,KAAM,CACLC,cAAe,CACbib,cAAe0yB,EAAa1yB,cAC5B9oB,KAAMw7C,EAAax7C,KACnBkH,OAAQs0C,EAAat0C,OACrBH,yBAA0By0C,EAAaz0C,yBAAyBoK,GAChEsK,UAAWwiD,EACXj3D,UAAW+pD,EACX9pD,QAASwqD,EACT/yC,QAAU88B,EAAa98B,QAAW88B,EAAa98B,QAAQvN,GAAK,GAC5DmtC,SAAW9C,EAAa8C,SAAY9C,EAAa8C,SAASntC,GAAK,IAEjEpD,iBAAkBmvD,GAClBlvD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZ8vD,EAA0B,CAAE14D,UAAW,CACrC8I,MAAO,CACLgD,GAAItK,EACJiiB,cAAe7a,EAAO6a,cACtB9oB,KAAMiO,EAAOjO,KACbkH,OAAQqK,SAAStD,EAAO/G,QACxBH,yBAA0BkH,EAAOlH,yBACjC2X,QAASzQ,EAAOyQ,QAChB4/B,SAAUrwC,EAAOqwC,SACjB7iC,UAAWvD,GAAejK,EAAOwN,WACjCzU,UAAWmR,GAAmBlK,EAAOjH,WACrCC,QAASkR,GAAmBlK,EAAOhH,WAEpCqH,eAAgB,CACf,CAACC,MAAOmuD,GAAqCr3D,UAAW,CACtD4/C,cAAe8W,OAGpBvtD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,iDAAmD,CAChEmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC4jE,GAAyB,CACxB5wD,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRsL,UAAWA,EACXtZ,UAAWA,GACX,KAKZ,KC7Jai+D,GAAsChrE,YAAGC,QAAAC,YAAA,mlBC0GvCkG,qBAAkB6C,aArFjC,SAA4C5C,GAAkE,IAAhEC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBopD,GAAF7sD,EAAP0D,QAAkB1D,EAAT6sD,WAAW38C,EAAUlQ,EAAVkQ,WAAYH,EAAQ/P,EAAR+P,SAAU3P,EAAQJ,EAARI,SAE1F+a,EADcrX,qBAAWxC,IACA6Z,WACzB5K,EAAYtQ,EAAE,mCACdk+C,EAAa,aAEnBxlD,QAAQC,IAAIi0D,GAEZ,IAAM2V,EAAU/+D,EAAM2K,OAAOq0D,SACvBn1D,EAAiB7J,EAAM2K,OAAOwJ,GAEpCjU,EAAiCC,YAAS09D,GAA0B,CAClEx1D,UAAW,CAAE8L,GAAI4qD,KADXvgE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxByJ,EAA+EhI,YAASw/D,GAAmC,CACzHt3D,UAAW,CACT8L,GAAItK,KAFS42D,EAAet4D,EAAxB3J,QAAiCkiE,EAAav4D,EAApB1J,MAA4BkiE,EAAYx4D,EAAlBzJ,KAMlD2hE,EAAiBzjE,eAAC0jE,GAAyB,IAEjD,GAAI9hE,GAAWiiE,EACb,OACE7jE,eAACsiE,GAAyB,CAAExkB,WAAYA,EAAY2lB,eAAgBA,EAAe1jE,SACjFO,gBAAC4G,KAAI,CAACX,MAAO2J,EAAUnQ,SAAA,CACrBC,eAACgkE,GAAyB,CAACxX,UAAWA,EAAW2V,QAASA,EAASl1D,eAAgBA,IACnFjN,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACc,SAAS,EAAMb,QAAQ,WAOzC,GAAIc,GAASiiE,EACX,OACE9jE,eAACsiE,GAAyB,CAACxkB,WAAYA,EAAY2lB,eAAgBA,EAAe1jE,SAChFO,gBAAC4G,KAAI,CAACX,MAAO2J,EAAUnQ,SAAA,CACrBC,eAACgkE,GAAyB,CAACxX,UAAWA,EAAW2V,QAASA,EAASl1D,eAAgBA,IACnFjN,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,uCAOb,IAAM8d,EAAQ5b,EAAKupD,cACbzJ,EAAemiB,EAAaniB,aAC5B//B,EAAanE,EAAMmE,UAAalW,KAAO+R,EAAMmE,WAAWjW,OAAOkP,GAAc,GAC7EynD,EAAgB3gB,EACtBthD,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxB2d,EAAMtX,KAAO,IAAMyb,KACd,GAEJoiD,EAAwBriB,EAC9BthD,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxB6hD,EAAax7C,QACR,GAEV,OACEpG,eAACsiE,GAAyB,CAACxkB,WAAYA,EAAY2lB,eAAgBA,EAAe1jE,SAChFC,eAACiO,GAAW,CACViC,UAAW5P,gBAAA,QAAAP,SAAA,CAAOmQ,EAAU,IAAEqyD,EAAa,IAAE0B,KAC7C5zD,SAAUrQ,eAACgkE,GAAyB,CAACxX,UAAWA,EAAW2V,QAASA,EAASl1D,eAAgBA,IAC7FqD,aAAa,EACbZ,SAAUA,EACVG,WAAYA,EAAW9P,SAGtBA,KAWT,KCqBeL,I,eAAAA,iBAAkB6C,aA9GjC,SAAwC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAC/C++D,EAAU/+D,EAAM2K,OAAOq0D,SACvBn1D,EAAiB7J,EAAM2K,OAAOwJ,GAC9BlR,EAAS,yBAAAyI,OAA4BqzD,EAAO,gBAC5C3V,EAAY,aACZt8C,EAAYtQ,EAAE,mCAGpB0D,EAA4CC,YAAS+gE,GAAqC,CACxF74D,UAAW,CACT84D,cAAet3D,GAEjBpB,YAAa,iBAJPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAOxBoyD,EAAiBzjE,eAAC0jE,GAAyB,IAEjD,GAAI9hE,EAAS,OACX5B,eAACwkE,GAAmC,CAClCf,eAAgBA,EAChBvzD,UAAWA,EACXs8C,UAAWA,EACXnmD,UAAWA,EAAUtG,SAEpBH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAACkkE,GAAmC,CAClCf,eAAgBA,EAChBvzD,UAAWA,EACXs8C,UAAWA,EACXnmD,UAAWA,EAAUtG,SAAA,CAErBC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAMuqB,EAA0BhgD,EAAKggD,wBACrCxpD,QAAQC,IAAIuJ,GACZ,IAAM4N,EAAWoyC,EAAwBpyC,SAGzC,OAAKoyC,EAAwB14C,MAAMjK,OAiCjCa,eAACwkE,GAEC,CACAhY,UAAWA,EACX98C,SAAUA,EACVG,WA9Be,WACjBwB,EAAU,CACR5F,UAAW,CACTgG,MAAOqwC,EAAwBpyC,SAASgC,WAE1CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBiwC,wBAAwB14C,MACnDsG,EAAWmC,EAAgBiwC,wBAAwBpyC,SAEzD,OAAOoC,EAAS3S,OACZ,CAGE2iD,wBAAyB,CACvB/vC,WAAYH,EAAekwC,wBAAwB/vC,WACnD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAekwC,wBAAwB14C,OAAK4I,aAAKF,IAC7DpC,aAGJkC,CACN,GAEJ,EAQ2B7R,SAEvBO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,4BACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACR+hD,EAAwB14C,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACxCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKub,QAAQC,WAEhB/kB,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC+hD,GAAkB,CAACr5C,OAAQa,EAAKy4C,oBALrBn1C,eAOJ,WAxDpB7M,eAACwkE,GAAmC,CAAC1mB,WAvCpB,aAuC4C0O,UAAWA,EAAWiX,eAAgBA,EAAe1jE,SAChHC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,yDA4Dd,KCzHa6kE,GAAsCnrE,YAAGC,QAAAC,YAAA,mgBAyBzCkrE,GAAqCprE,YAAGI,QAAAF,YAAA,4KAYxCmrE,GAA+BrrE,YAAGK,QAAAH,YAAA,oNAWlCorE,GAAkCtrE,YAAGO,QAAAL,YAAA,oNAWrCqrE,GAAoCvrE,YAAGQ,QAAAN,YAAA,0KCdrCkG,qBAAkB6C,aAnCjC,SAAqC5C,GAA2B,IAAzBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBmU,GAAF5X,EAAP0D,QAAW1D,EAAF4X,IAClD4qD,EAAU/+D,EAAM2K,OAAOq0D,SAC7BxuD,EAAuCC,YAAYgxD,IAA5CC,EAA4E/wD,YAAAH,EAAA,GAAhD,GAC7Bs5C,EAAa,CACjB7B,cAAe8W,GAGjB,OACEniE,eAAA,UAAQE,UAAU,2CAChBqG,MAAO3G,EAAE,kBACT6Q,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,iDACduZ,eAAgBnZ,eAAA,QAChBoZ,WAAYxZ,EAAE,6CACdgb,eAAgBkqD,EAChBxrD,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIA,IAGR7C,eAAgB,CACd,CAAEC,MAAO8vD,GAAqCh5D,UAAWyhD,MAInE,EAAEntD,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,aAG7B,KCuFe1G,qBAAkB6C,aA9GjC,SAAgC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAC7BqxB,GAD2C90B,EAAP0D,QACtBI,qBAAWxC,KACzB6Z,EAAa2Z,EAAY3Z,WAC/BxiB,QAAQC,IAAIk8B,GAEZ,IAAM0tC,EAAU/+D,EAAM2K,OAAOq0D,SACvBtkB,EAAa,aAEbp3C,EAAoB1G,eAACyW,GAAS,CAClCL,OAAM,yBAAAtH,OAA2BqzD,EAAO,mBACxCjiE,UAAU,SAGZoD,EAA4CC,YAASkhE,GAAqC,CACxFh5D,UAAW,CACT4/C,cAAe8W,KAFXvgE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAM9B,GAAIzP,EAAS,OACX5B,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SACrFH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC6iE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SAAA,CACtFC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAIdj/B,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAEZ,IAAMijE,EAA0BjjE,EAAKijE,wBAC/Br1D,EAAW5N,EAAKijE,wBAAwBr1D,SAG9C,OAAKq1D,EAAwB37D,MAAMjK,OAiCjCa,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYpuC,SAAUA,EAAUG,WAzBtD,WACjBwB,EAAU,CACR5F,UAAW,CACTgG,MAAOszD,EAAwBr1D,SAASgC,WAE1CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBkzD,wBAAwB37D,MACnDsG,EAAWmC,EAAgBkzD,wBAAwBr1D,SAEzD,OAAOoC,EAAS3S,OACZ,CAGE4lE,wBAAyB,CACvBhzD,WAAYH,EAAemzD,wBAAwBhzD,WACnD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAemzD,wBAAwB37D,OAAK4I,aAAKF,IAC7DpC,aAGJkC,CACN,GAEJ,EAGiGlL,kBAAmBA,EAAkB3G,SAClIO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mDACpBI,eAACiS,KAAMC,UAAS,MAJFrF,kBAOlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNglE,EAAwB37D,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACxCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,KAEjC9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKuY,SAASlW,OAAOkP,KAE/Bxa,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKy7D,mBAAmB,QAE3B1kE,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,yBAAA0M,OAA2BqzD,EAAO,qBAAArzD,OAAoBvF,EAAKgO,IAAKxX,SACtEC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAACilE,GAA4B,CAAC1tD,GAAIhO,EAAKgO,UAjB3B1K,eAmBJ,WA/DtB7M,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SACtFC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,8CAmEd,KC/HaslE,GAAmC1yD,OAAaC,MAAM,CACjEoP,UAAWrP,OACRG,SAAS/S,YAAE,uBACdkiB,QAAStP,OACNG,SAAS/S,YAAE,uBACdolE,mBAAoBxyD,OACnBG,SAAS/S,YAAE,yBCkFCF,qBAAkB6C,aA1EjC,SAA+B5C,GAW9B,IAVCC,EAACD,EAADC,EAGAoT,GAFOrT,EAAP0D,QACK1D,EAALyD,MACYzD,EAAZqT,cACAC,EAAMtT,EAANsT,OACAoB,EAAM1U,EAAN0U,OACAhO,EAAS1G,EAAT0G,UACAuZ,EAAejgB,EAAfigB,gBACAC,EAAalgB,EAAbkgB,cAGA,OACEvf,gBAAC4S,KAAM,CAAAnT,SAAA,CACLC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO4O,UAAa,0BAA4B,eAC5DjG,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GACT8S,EAAc,YAAa9S,GAC3B6S,EAAgB,aAAa,EAC/B,EACA5D,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO6O,QAAW,0BAA4B,eAC1DlG,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GACT8S,EAAc,UAAW9S,GACzB6S,EAAgB,WAAW,EAC7B,EACA5D,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,IAEhD5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iDAAiDG,SAAA,CACpEC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,qBACLlG,UAAY+S,EAAO+xD,mBAAsB,0BAA4B,eACrEzxD,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,qBAAqBqN,UAAU,OAAOvT,UAAU,+BAK3EI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAOuD,KAAK,SAAQtI,SAC7BH,EAAE,2BAMnB,KCReF,qBAAkB6C,aAlEjC,SAAkC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAChC8+D,EAD8CxiE,EAALyD,MACzB2K,OAAOq0D,SACvB/7D,EAAS,yBAAAyI,OAA4BqzD,EAAO,gBAE5CjyD,EAAYtQ,EAAE,kCAEpBgU,EAAoCC,YAAY8wD,IAAzCQ,EAAsEpxD,YAAAH,EAAA,GAA7C,GAEhC,OACE5T,eAAC0iE,GAAqB,CACpBxyD,UAAWA,EACX4tC,WARe,aASfz3C,UAAWA,EAAUtG,SAErBC,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAW,IAAI3e,KACf4e,QAAS,GACTkjD,mBAAoB,GAEtB7wD,iBAAkB+wD,GAClB9wD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZ8wD,EAA0B,CAAE15D,UAAW,CACrC8I,MAAO,CACL82C,cAAe8W,EACftgD,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASxD,GAAejK,EAAOyN,SAC/BkjD,mBAAoB3wD,EAAO2wD,qBAE5BtwD,eAAgB,CACf,CAACC,MAAO8vD,GAAqCh5D,UAAW,CAAC4/C,cAAe8W,OAE3EvtD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,gDAAkD,CAC/DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAColE,GAA0B,CACzBpyD,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRuL,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GACX,KAKZ,KC+Ce3G,I,YAAAA,iBAAkB6C,aA1GjC,SAAmC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAC1C++D,EAAU/+D,EAAM2K,OAAOq0D,SACvBiD,EAA2BjiE,EAAM2K,OAAOwJ,GACxClR,EAAS,yBAAAyI,OAA4BqzD,EAAO,gBAC5CrkB,EAAa,aACb5tC,EAAYtQ,EAAE,mCAEpBgU,EAAuCC,YAAY+wD,IAA5CU,EAA4EvxD,YAAAH,EAAA,GAAhD,GACnCtQ,EAAiCC,YAASmhE,GAAoC,CAC5Ej5D,UAAW,CACT8L,GAAI8tD,KAFAzjE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxB,GAAIF,EAAS,OACX5B,eAAC0iE,GAAqB,CACpBxyD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAEpBH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAACoiE,GAAqB,CACpBxyD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAAA,CAErBC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAMguC,EAAyBzjE,EAAKyjE,uBAIhClB,EAAmB,KACnBkB,EAAuB1jD,YACzBwiD,EAAmB,IAAInhE,KAAKqiE,EAAuB1jD,YAGrD,IAAI2jD,EAAiB,KAKrB,OAJID,EAAuBzjD,UACzB0jD,EAAiB,IAAItiE,KAAKqiE,EAAuBzjD,UAIjD9hB,eAAC0iE,GAAqB,CACpBxyD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAErBC,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAWwiD,EACXviD,QAAS0jD,EACTR,mBAAoBO,EAAuBP,oBAE7C7wD,iBAAkB+wD,GAClB9wD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZixD,EAA6B,CAAE75D,UAAW,CACxC8I,MAAO,CACLgD,GAAI8tD,EACJxjD,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASxD,GAAejK,EAAOyN,SAC/BkjD,mBAAoB3wD,EAAO2wD,qBAE5BtwD,eAAgB,CACf,CAACC,MAAO8vD,GAAqCh5D,UAAW,CAAC4/C,cAAe8W,OAE3EvtD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,iDAAmD,CAChEmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAColE,GAA0B,CACzBpyD,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRuL,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GACX,KAKZ,KCxHao/D,GAAkCnsE,YAAGC,QAAAC,YAAA,wiBA2BrCksE,GAAiCpsE,YAAGI,QAAAF,YAAA,2JAYpCmsE,GAAgCrsE,YAAGK,QAAAH,YAAA,8JASVF,YAAGO,QAAAL,YAAA,+vBCH1BkG,qBAAkB6C,aAnCjC,SAAiC5C,GAA2B,IAAzBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBmU,GAAF5X,EAAP0D,QAAW1D,EAAF4X,IAC9C4qD,EAAU/+D,EAAM2K,OAAOq0D,SAC7BxuD,EAAmCC,YAAY8xD,IAAxCC,EAAoE7xD,YAAAH,EAAA,GAA5C,GACzBs5C,EAAa,CACjB7B,cAAe8W,GAGjB,OACEniE,eAAA,UAAQE,UAAU,2CAChBqG,MAAO3G,EAAE,kBACT6Q,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,4CACduZ,eAAgBnZ,eAAA,QAChBoZ,WAAYxZ,EAAE,wCACdgb,eAAgBgrD,EAChBtsD,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIA,IAGR7C,eAAgB,CACd,CAAEC,MAAO8wD,GAAiCh6D,UAAWyhD,MAI/D,EAAEntD,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,aAG7B,KCiFe1G,qBAAkB6C,aA1GjC,SAA2B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACxB++D,GADsCxiE,EAAP0D,QACrBD,EAAM2K,OAAOq0D,UACvBtkB,EAAa,QAEbp3C,EAAoB1G,eAACyW,GAAS,CAClCL,OAAM,yBAAAtH,OAA2BqzD,EAAO,cACxCjiE,UAAU,SAGZoD,EAA4CC,YAASkiE,GAAiC,CACpFh6D,UAAW,CACT4/C,cAAe8W,KAFXvgE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAM9B,GAAIzP,EAAS,OACX5B,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SACrFH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC6iE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SAAA,CACtFC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAIdj/B,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAEZ,IAAM+jE,EAAsB/jE,EAAK+jE,oBAC3Bn2D,EAAW5N,EAAK+jE,oBAAoBn2D,SAG1C,OAAKm2D,EAAoBz8D,MAAMjK,OAiC7Ba,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYpuC,SAAUA,EAAUG,WAzBtD,WACjBwB,EAAU,CACR5F,UAAW,CACTgG,MAAOo0D,EAAoBn2D,SAASgC,WAEtCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBg0D,oBAAoBz8D,MAC/CsG,EAAWmC,EAAgBg0D,oBAAoBn2D,SAErD,OAAOoC,EAAS3S,OACZ,CAGE0mE,oBAAqB,CACnB9zD,WAAYH,EAAei0D,oBAAoB9zD,WAC/C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAei0D,oBAAoBz8D,OAAK4I,aAAKF,IACzDpC,aAGJkC,CACN,GAEJ,EAGiGlL,kBAAmBA,EAAkB3G,SAClIO,gBAAC2R,KAAK,CAAAlS,SAAA,CACJC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,IAChBlS,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,yBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,MAJFrF,kBAOlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACN8lE,EAAoBz8D,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACpCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC0qC,KAAM,CAAC7lC,KAAK,KAAKjB,SAAU2F,EAAKoB,2BAEnC3K,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKV,cAER7I,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKqsC,YAERt1C,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,yBAAA0M,OAA2BqzD,EAAO,gBAAArzD,OAAevF,EAAKgO,IAAKxX,SACjEC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAAC8lE,GAAwB,CAACvuD,GAAIhO,EAAKgO,UAjBvB1K,eAmBJ,WA/DtB7M,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SACtFC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,yCAmEd,KCzHammE,GAA8BvzD,OAAaC,MAAM,CAC5D5J,YAAa2J,OACRK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBAChBg2C,UAAWpjC,SCqBE9S,qBAAkB6C,aAdjC,SAA+B5C,GAAgB,IAAbC,EAACD,EAADC,EAC1BuiE,EADkCxiE,EAALyD,MACb2K,OAAOq0D,SACvB/7D,EAAS,yBAAAyI,OAA4BqzD,EAAO,UAElD,OACEniE,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBO,gBAACqE,KAAM,CAACG,MAAM,yBAAwB/E,SAAA,CACpCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBAAkB,IAAExG,EAAE,oBAIrD,KC2DeF,I,GAAAA,iBAAkB6C,aApEjC,SAA+B5C,GAY9B,IAXCC,EAACD,EAADC,EAGAoT,GAFOrT,EAAP0D,QACK1D,EAALyD,MACYzD,EAAZqT,cACAC,EAAMtT,EAANsT,OAEA5M,GADM1G,EAAN0U,OACS1U,EAAT0G,WACAyZ,EAAangB,EAAbmgB,cACAC,EAAcpgB,EAAdogB,eAAcC,EAAArgB,EACdsgB,6BAAqB,IAAAD,EAAC,SAAApP,GAAC,OAAEA,CAAC,EAAAoP,EAG1B,OACE1f,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,0BAGhEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,YACLlG,UAAY+S,EAAO2iC,UAAa,0BAA4B,eAC5DriC,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,6BAIhEF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPC,eAACmT,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mCAAmCG,SACtDO,gBAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,eAAA,SAAOsE,KAAK,OAAO6b,IAAKL,EAAe5f,UAAU,oBAAoB4b,SAAUmE,IAC/EjgB,eAAA,SAAOE,UAAU,oBAAoBkgB,MAAOb,GAA0Bxf,SACnEggB,gBAObzf,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAOuD,KAAK,SAAQtI,SAC7BH,EAAE,2BAMnB,KClEMomE,GAA2B1sE,YAAGC,QAAAC,YAAA,oMAsHrBkG,qBAAkB6C,aA3GjC,SAA8B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC5B8+D,EAD0CxiE,EAALyD,MACrB2K,OAAOq0D,SACvB/7D,EAAS,yBAAAyI,OAA4BqzD,EAAO,WAE5CjyD,EAAYtQ,EAAE,6BAEpBgU,EAAgCC,YAAYmyD,GAA0B,CACpEh1C,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrC4/D,EAELlyD,YAAAH,EAAA,GAF0B,GAK5B8C,EAAgCC,mBAAS,IAAGC,EAAA7C,YAAA2C,EAAA,GAArC8J,EAAQ5J,EAAA,GAAE6J,EAAW7J,EAAA,GACtBkJ,EAAgBY,iBAAO,MACvBX,EAAiBS,GAAY5gB,EAAE,yCAE/BqgB,EAAwB,SAACvC,GAC7BplB,QAAQC,IAAI,uBACZkoB,EAAY/C,EAAMrY,OAAOsb,MAAM,GAAGva,KACpC,EAEMq9D,EAAiBzjE,eAACkmE,GAAsB,IAE9C,OACElmE,eAAC0iE,GAAqB,CACpBe,eAAgBA,EAChBvzD,UAAWA,EACX4tC,WAvBe,QAwBfz3C,UAAWA,EAAUtG,SAErBC,eAACgU,KAAM,CACLC,cAAe,CACbpL,YAAa,GACb+sC,UAAW,GAEbzhC,iBAAkB4xD,GAClB3xD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAIioB,GAEZ,IAAII,EAAY,CACdyqC,cAAe8W,EACft5D,YAAawL,EAAOxL,YACpB+sC,UAAWvhC,EAAOuhC,UAClB1K,cAAe1qB,GAGbM,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB3oB,QAAQC,IAAI0oB,EAAa5b,OAAOiN,QAChC,IAAI4O,EAAeD,EAAa5b,OAAOiN,OACvCha,QAAQC,IAAI2oB,GAEZN,EAAUkqB,MAAQ5pB,EAElB+kD,EAAsB,CAAEx6D,UAAW,CACjC8I,MAAOqM,GACNlM,eAAgB,CACf,CAACC,MAAO8wD,GAAiCh6D,UAAW,CAAC4/C,cAAe8W,OAEvEvtD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,2CAA6C,CAC1DmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,EAClB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAEA,IAAI6M,EAAOrB,EAAcsB,QAAQT,MAAM,GACnCQ,GAAQA,EAAKtc,KAAO,QACtBic,EAAOO,cAAcF,GACZA,GAAQA,EAAKtc,KAAO,SAC7BgQ,KAAMhT,MAAMjC,EAAE,qDAAsD,CAClEmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,KAEdO,KAAMhT,MAAMjC,EAAE,gCAAiC,CAC7CmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,GAElB,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACmmE,GAAsB,CACrBnzD,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRyL,cAAeA,EACfC,eAAgBA,EAChBE,sBAAuBA,EACvB5Z,UAAWA,GACX,KAKZ,KC7Ce3G,I,GAAAA,iBAAkB6C,aAtEjC,SAAmC5C,GAA4C,IAA1CC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAA2BrD,GAAbJ,EAAP0D,QAAkB1D,EAAT6sD,UAAmB7sD,EAARI,UAE3D+a,EADcrX,qBAAWxC,IACA6Z,WAEzBqnD,EAAU/+D,EAAM2K,OAAOq0D,SACvBgE,EAAuBhjE,EAAM2K,OAAOwJ,GACpCrH,EAAYtQ,EAAE,8BAEdyG,EAAS,yBAAAyI,OAA4BqzD,EAAO,WAGlD7+D,EAAiCC,YAAS09D,GAA0B,CAClEx1D,UAAW,CAAE8L,GAAI4qD,KADXvgE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxByJ,EAAsEhI,YAASmiE,GAAgC,CAC7Gj6D,UAAW,CACT8L,GAAI6uD,KAFSC,EAAY96D,EAArB3J,QAA8B0kE,EAAU/6D,EAAjB1J,MAAyB0kE,EAASh7D,EAAfzJ,KAMlD,GAAIF,GAAWykE,EACb,OACErmE,eAACsiE,GAAyB,CAACj8D,UAAWA,EAAUtG,SAC9CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACc,SAAS,EAAMb,QAAQ,UAOzC,GAAIc,GAASykE,EACX,OACEtmE,eAACsiE,GAAyB,CAACj8D,UAAWA,EAAUtG,SAC9CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,uCAOb,IAAM8d,EAAQ5b,EAAKupD,cACbmb,EAAqBD,EAAUC,mBAC/B3kD,EAAanE,EAAMmE,UAAalW,KAAO+R,EAAMmE,WAAWjW,OAAOkP,GAAc,GAC7EynD,EAAgBiE,EACtBlmE,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxB2d,EAAMtX,KAAO,IAAMyb,KACd,GAEJoiD,EAAwBuC,EAC9BlmE,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxBymE,EAAmB39D,eACd,GAEV,OACE7I,eAACsiE,GAAyB,CAACxkB,WApDV,QAoDkCz3C,UAAWA,EAAUtG,SACtEO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVO,gBAAC4G,KAAKqJ,MAAK,CAAAxQ,SAAA,CAAEmQ,EAAU,IAAEqyD,EAAa,IAAE0B,OAEzClkE,MAIT,KCrEM0mE,GAA8BntE,YAAGC,QAAAC,YAAA,oMAqJxBkG,I,kBAAAA,iBAAkB6C,aA1IjC,SAA+B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OACtC++D,EAAU/+D,EAAM2K,OAAOq0D,SACvBgE,EAAuBhjE,EAAM2K,OAAOwJ,GACpClR,EAAS,yBAAAyI,OAA4BqzD,EAAO,WAC5C3V,EAAY,UACZt8C,EAAYtQ,EAAE,8BAEpBgU,EAAmCC,YAAY4yD,IAAxCC,EAAoE3yD,YAAAH,EAAA,GAA5C,GAC/BtQ,EAAiCC,YAASmiE,GAAgC,CACxEj6D,UAAW,CACT8L,GAAI6uD,KAFAxkE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKlB2hE,EAAiBzjE,eAACkmE,GAAsB,IAG9CxvD,EAAgCC,mBAAS,IAAGC,EAAA7C,YAAA2C,EAAA,GAArC8J,EAAQ5J,EAAA,GAAE6J,EAAW7J,EAAA,GACtBkJ,EAAgBY,iBAAO,MACvBX,EAAiBS,GAAY5gB,EAAE,yCAE/BqgB,EAAwB,SAACvC,GAC7BplB,QAAQC,IAAI,uBACZkoB,EAAY/C,EAAMrY,OAAOsb,MAAM,GAAGva,KACpC,EAEA,GAAIxE,EAAS,OACX5B,eAAC2mE,GAA0B,CACzBlD,eAAgBA,EAChBvzD,UAAWA,EACXs8C,UAAWA,EACXnmD,UAAWA,EAAUtG,SAEpBH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAACqmE,GAA0B,CACzBlD,eAAgBA,EAChBvzD,UAAWA,EACXs8C,UAAWA,EACXnmD,UAAWA,EAAUtG,SAAA,CAErBC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAM5X,EAAY7d,EACZ0kE,EAAqB1kE,EAAK0kE,mBAGhC,OAFAluE,QAAQC,IAAIonB,GAGV3f,eAAC2mE,GAA0B,CACzBlD,eAAgBA,EAChBvzD,UAAWA,EACXs8C,UAAWA,EACXnmD,UAAWA,EAAUtG,SAErBC,eAACgU,KAAM,CACLC,cAAe,CACbpL,YAAa29D,EAAmB39D,YAChC+sC,UAAW4wB,EAAmB5wB,WAEhCzhC,iBAAkB4xD,GAClB3xD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAIioB,GAEZ,IAAII,EAAY,CACdrJ,GAAI6uD,EACJv9D,YAAawL,EAAOxL,YACpB+sC,UAAWvhC,EAAOuhC,WAGpB,SAASgxB,IACPF,EAAyB,CAAEj7D,UAAW,CACpC8I,MAAOqM,GACNlM,eAAgB,CACf,CAACC,MAAO8wD,GAAiCh6D,UAAW,CAAC4/C,cAAe8W,OAEvEvtD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,4CAA8C,CAC3DmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,EAClB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,CAEA,IAAIwM,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB3oB,QAAQC,IAAI0oB,EAAa5b,OAAOiN,QAChC,IAAI4O,EAAeD,EAAa5b,OAAOiN,OACvCha,QAAQC,IAAI2oB,GAEZN,EAAUkqB,MAAQ5pB,EAClBN,EAAUsqB,cAAgB1qB,EAE1BomD,GACF,EAEA,IAAIzlD,EAAOrB,EAAcsB,QAAQT,MAAM,GACnCQ,GAAQA,EAAKtc,KAAO,QACtBic,EAAOO,cAAcF,GACZA,GAAQA,EAAKtc,KAAO,SAC7BgQ,KAAMhT,MAAMjC,EAAE,qDAAsD,CAClEmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,IAEdsyD,GAEJ,EAAE7mE,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACmmE,GAAsB,CACrBnzD,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRyL,cAAeA,EACfC,eAAgBA,EAChBE,sBAAuBA,EACvB5Z,UAAWA,GACX,KAKZ,KC/JawgE,GAAwDvtE,YAAGC,QAAAC,YAAA,qkBA2B3D8gB,GAAyBhhB,YAAGI,QAAAF,YAAA,qTAoB5BstE,GAAuDxtE,YAAGK,QAAAH,YAAA,kfA4B1DutE,GAAiDztE,YAAGO,QAAAL,YAAA,oRAWpDwtE,GAAoD1tE,YAAGQ,QAAAN,YAAA,oRAWvDytE,GAAsD3tE,YAAGU,QAAAR,YAAA,0NChDvDkG,qBAAkB6C,aApCjC,SAAqD5C,GAA6B,IAA3BC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBmG,GAAF5J,EAAP0D,QAAa1D,EAAJ4J,MAClE44D,EAAU/+D,EAAM2K,OAAOq0D,SAC7BxuD,EAAuDC,YACrDozD,IADKC,EAENnzD,YAAAH,EAAA,GAFkD,GAG7Cs5C,EAAa,CACjB7B,cAAe8W,GAGjB,OACEniE,eAAA,UAAQE,UAAU,2CAChBqG,MAAO3G,EAAE,kBACT6Q,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,mEACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CAAIwJ,EAAK+tC,8BAA8BlxC,KAAK,MAAImD,EAAKy7D,mBAAmB,QACxF5rD,WAAYxZ,EAAE,+DACdgb,eAAgBssD,EAChB5tD,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAAEC,MAAOkyD,GAAuDp7D,UAAWyhD,MAIrF,EAAEntD,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,aAG7B,KCwFe1G,qBAAkB6C,aApHjC,SAAgD5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAC7CqxB,GAD2D90B,EAAP0D,QACtCI,qBAAWxC,KAE/B3I,QAAQC,IAAIk8B,GAEZ,IAAM0tC,EAAU/+D,EAAM2K,OAAOq0D,SACvBtkB,EAAa,+BAEbp3C,EAAoB1G,eAACyW,GAAS,CAClCL,OAAM,yBAAAtH,OAA2BqzD,EAAO,qCACxCjiE,UAAU,SAGZoD,EAA4CC,YAASsjE,GAAuD,CAC1Gp7D,UAAW,CACT4/C,cAAe8W,KAFXvgE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAM9B,GAAIzP,EAAS,OACX5B,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SACtFC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,QAIpC,GAAIa,EAAO,OACT7B,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SACtFO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,eAKhBj/B,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAEZ,IAAMqlE,EAA0CrlE,EAAKqlE,wCAC/Cz3D,EAAW5N,EAAKqlE,wCAAwCz3D,SAG9D,OAAKy3D,EAAwC/9D,MAAMjK,OAiCjDa,eAACmjE,GAAyB,CACxBrlB,WAAYA,EACZpuC,SAAUA,EACVG,WA5Be,WACjBwB,EAAU,CACR5F,UAAW,CACTgG,MAAO01D,EAAwCz3D,SAASgC,WAE1DC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBs1D,wCAAwC/9D,MACnEsG,EAAWmC,EAAgBs1D,wCAAwCz3D,SAEzE,OAAOoC,EAAS3S,OACZ,CAGEgoE,wCAAyC,CACvCp1D,WAAYH,EAAeu1D,wCAAwCp1D,WACnE3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeu1D,wCAAwC/9D,OAAK4I,aAAKF,IAC7EpC,aAGJkC,CACN,GAEJ,EAOIlL,kBAAmBA,EAAkB3G,SAErCO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,gCACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mDACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNonE,EAAwC/9D,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACxDjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SAEPwJ,EAAK+tC,8BAA8BlxC,OAEtC9F,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKy7D,mBAAmB,QAE3B1kE,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,yBAAA0M,OAA2BqzD,EAAO,uCAAArzD,OAAsCvF,EAAKgO,IAAKxX,SACxFC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAGPI,eAAConE,GAA4C,CAAC79D,KAAMA,SAfxCsD,eAiBJ,WAjEtB7M,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SACtFC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,gEAqEd,KCrIaynE,GAAoD70D,OAAaC,MAAM,CAClF6kC,8BAA+B9kC,OAC5BG,SAAS/S,YAAE,uBACdolE,mBAAoBxyD,OACjBG,SAAS/S,YAAE,yBCqEDF,qBAAkB6C,aA7DjC,SAAmD5C,GAYlD,IAXCC,EAACD,EAADC,EAGAoT,GAFOrT,EAAP0D,QACK1D,EAALyD,MACYzD,EAAZqT,cACAC,EAAMtT,EAANsT,OAEA5M,GADM1G,EAAN0U,OACS1U,EAAT0G,WACAsZ,EAAShgB,EAATggB,UAKA,OAJehgB,EAAfigB,gBACajgB,EAAbkgB,cAIEvf,gBAAC4S,KAAM,CAAAnT,SAAA,CACLC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,8BAA8BG,SAAA,CACjDO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,gCACLlG,UAAY+S,EAAOqkC,8BAAiC,0BAA4B,eAChF/jC,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAUq3B,+BAA+B5tC,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACzDvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,gCAAgCqN,UAAU,OAAOvT,UAAU,0BAGlFF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iDAAiDG,SAAA,CACpEC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,qBACLlG,UAAY+S,EAAO+xD,mBAAsB,0BAA4B,eACrEzxD,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,qBAAqBqN,UAAU,OAAOvT,UAAU,+BAK3EI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAOuD,KAAK,SAAQtI,SAC7BH,EAAE,2BAMnB,KC0CeF,qBAAkB6C,aA7FjC,SAAkD5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAChD8+D,EAD8DxiE,EAALyD,MACzC2K,OAAOq0D,SACvB/7D,EAAS,yBAAAyI,OAA4BqzD,EAAO,kCAC5CrkB,EAAa,aACb5tC,EAAYtQ,EAAE,oDAGpB0D,EAAiCC,YAAS+W,IAAlC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACxB8R,EAAoCC,YAAYkzD,IAAzC5B,EAAwFpxD,YAAAH,EAAA,GAA/D,GAEhC,OAAIhS,EACF5B,eAAC0iE,GAAqB,CACpBxyD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAErBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACE,QAAQ,EAAMD,QAAQ,QAKhCc,EACF7B,eAAC0iE,GAAqB,CACpBxyD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAErBO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,eAMdv3B,eAAC0iE,GAAqB,CACpBxyD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAErBC,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAW,IAAI3e,KACf4e,QAAS,GACTkjD,mBAAoB,GAEtB7wD,iBAAkBkzD,GAClBjzD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZ8wD,EAA0B,CAAE15D,UAAW,CACrC8I,MAAO,CACL82C,cAAe8W,EACf7qB,8BAA+BjjC,EAAOijC,8BACtC0tB,mBAAoB3wD,EAAO2wD,qBAE5BtwD,eAAgB,CACf,CAACC,MAAOkyD,GAAuDp7D,UAAW,CAAC4/C,cAAe8W,OAE7FvtD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,kEAAoE,CACjFmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAColE,GAA0B,CACzBpyD,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRsL,UAAW7d,EACX8d,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GACX,KAKZ,KCDe3G,I,YAAAA,iBAAkB6C,aA9FjC,SAA2C5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAASD,EAAKzD,EAALyD,MAClD++D,EAAU/+D,EAAM2K,OAAOq0D,SACvBkF,EAA2ClkE,EAAM2K,OAAOwJ,GACxDlR,EAAS,yBAAAyI,OAA4BqzD,EAAO,kCAC5CrkB,EAAa,+BACb5tC,EAAYtQ,EAAE,qDAEpBgU,EAAuDC,YAAYmzD,IAA5DO,EAA8GxzD,YAAAH,EAAA,GAAlE,GACnDtQ,EAAiCC,YAASujE,GAAsD,CAC9Fr7D,UAAW,CACT8L,GAAI+vD,KAFA1lE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxB,GAAIF,EAAS,OACX5B,eAAC0iE,GAAqB,CACpBxyD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAErBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACTvB,gBAACoiE,GAAqB,CACpBxyD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAAA,CAErBC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAMiwC,EAAyC1lE,EAAK0lE,uCAGpD,OACExnE,eAAC0iE,GAAqB,CACpBxyD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAErBC,eAACgU,KAAM,CACLC,cAAe,CACbqjC,8BAA+BkwB,EAAuClwB,8BAA8B//B,GACpGytD,mBAAoBwC,EAAuCxC,oBAE7D7wD,iBAAkBkzD,GAClBjzD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZkzD,EAA6C,CAAE97D,UAAW,CACxD8I,MAAO,CACLgD,GAAI+vD,EACJhwB,8BAA+BjjC,EAAOijC,8BACtC0tB,mBAAoB3wD,EAAO2wD,qBAE5BtwD,eAAgB,CACf,CAACC,MAAOkyD,GAAuDp7D,UAAW,CAAC4/C,cAAe8W,OAE7FvtD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,mEAAqE,CAClFmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACynE,GAA0C,CACzCz0D,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRsL,UAAW7d,EACX8d,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GACX,KAKZ,KC5GaqhE,GAAmCpuE,YAAGC,QAAAC,YAAA,q0BAyCtCmuE,GAAkCruE,YAAGI,QAAAF,YAAA,8tCAkErCouE,GAA+BtuE,YAAGK,QAAAH,YAAA,iKASlC8gB,GAAyBhhB,YAAGO,QAAAL,YAAA,s7BCtE1BkG,qBAAkB6C,aAnCjC,SAAkC5C,GAA2B,IAAzBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBmU,GAAF5X,EAAP0D,QAAW1D,EAAF4X,IAC/C4qD,EAAU/+D,EAAM2K,OAAOq0D,SAC7BxuD,EAAsCC,YAAY+zD,IAA1CC,EAAuE9zD,YAAAH,EAAA,GAA9C,GAC3Bs5C,EAAa,CACjB7B,cAAe8W,GAGjB,OACEniE,eAAA,UAAQE,UAAU,2CAChBqG,MAAO3G,EAAE,kBACT6Q,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,8CACduZ,eAAgBnZ,eAAA,QAChBoZ,WAAYxZ,EAAE,0CACdgb,eAAgBitD,EAChBvuD,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIA,IAGR7C,eAAgB,CACd,CAAEC,MAAO+yD,GAAkCj8D,UAAWyhD,MAIhE,EAAEntD,SACAC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,aAG7B,KCjCe1G,sBAJf,SAAqBC,GAAS,IAANC,EAACD,EAADC,EACtB,OAAOI,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,qBACnC,ICkIeF,qBAAkB6C,aAtHjC,SAA6B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAC1BqxB,GADwC90B,EAAP0D,QACnBI,qBAAWxC,KAC/B3I,QAAQC,IAAIk8B,GAEZ,IAAM0tC,EAAU/+D,EAAM2K,OAAOq0D,SACvBtkB,EAAa,UAEbp3C,EAAoB1G,eAACyW,GAAS,CAACL,OAAM,yBAAAtH,OAA2BqzD,EAAO,gBAAgBjiE,UAAU,SAEvGoD,EAA4CC,YAASmkE,GAAkC,CACrFj8D,UAAW,CACT4/C,cAAe8W,KAFXvgE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAM9B,GAAIzP,EAAS,OACX5B,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SACrFH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC6iE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SAAA,CACtFC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAMuwC,EAAuBhmE,EAAKgmE,qBAC5Bp4D,EAAW5N,EAAKgmE,qBAAqBp4D,SAG3C,OAAKo4D,EAAqB1+D,MAAMjK,OA+B9Ba,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYpuC,SAAUA,EAAUG,WAzBtD,WACjBwB,EAAU,CACR5F,UAAW,CACTgG,MAAOq2D,EAAqBp4D,SAASgC,WAEvCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBi2D,qBAAqB1+D,MAChDsG,EAAWmC,EAAgBi2D,qBAAqBp4D,SAEtD,OAAOoC,EAAS3S,OACZ,CAGE2oE,qBAAsB,CACpB/1D,WAAYH,EAAek2D,qBAAqB/1D,WAChD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAek2D,qBAAqB1+D,OAAK4I,aAAKF,IAC1DpC,aAGJkC,CACN,GAEJ,EAGiGlL,kBAAmBA,EAAkB3G,SAClIO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,uBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,MANFrF,kBASlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACR+nE,EAAqB1+D,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACrCjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CAORO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKnD,KAAK,IAACpG,eAAA,SACZA,eAAA,OAAKwM,wBAAyB,CAACC,OAAQC,KAAUC,SAASpD,EAAKV,cAAgB3I,UAAU,kBAE3FI,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAK+tB,aAAa,IAACt3B,eAAA,SAClBuJ,EAAKw+D,UAAa/nE,eAACgoE,GAAY,IAAM,MAEzChoE,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAK2lB,kBAE5BlvB,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKgS,iBAAoBhS,EAAKgS,iBAAiBnV,KAAO,KAE1DpG,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKuO,kBAAqBvO,EAAKuO,kBAAkB1R,KAAO,KAE5D9F,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,yBAAA0M,OAA2BqzD,EAAO,kBAAArzD,OAAiBvF,EAAKgO,IAAKxX,SACnEC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SACtBH,EAAE,oBAIL2J,EAAK0+D,UAAajoE,eAACkoE,GAAyB,CAAC3wD,GAAIhO,EAAKgO,KAAS,QAhCrD1K,eAkCJ,WA9EpB7M,eAACmjE,GAAyB,CAACrlB,WAAYA,EAAYp3C,kBAAmBA,EAAkB3G,SACtFC,eAAA,KAAAD,SAAIH,EAAE,yCAmFZ,KCvIauoE,GAA+B31D,OAAaC,MAAM,CAC7Dyc,cAAe1c,OACfpM,KAAMoM,OACDK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBAChBiJ,YAAa2J,OACb4T,MAAO5T,OACP8M,eAAgB9M,OAChB+I,iBAAkB/I,OAClBsF,kBAAmBtF,SCgBN9S,qBAAkB6C,aAdjC,SAAgC5C,GAAgB,IAAbC,EAACD,EAADC,EAC3BuiE,EADmCxiE,EAALyD,MACd2K,OAAOq0D,SACvB/7D,EAAS,yBAAAyI,OAA4BqzD,EAAO,YAElD,OACEniE,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBO,gBAACqE,KAAM,CAACG,MAAM,yBAAwB/E,SAAA,CACpCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBAAkB,IAAExG,EAAE,oBAIrD,KCkIeF,I,GAAAA,iBAAkB6C,aAxIjC,SAAgC5C,GAY/B,IAXCC,EAACD,EAADC,EACAyD,EAAO1D,EAAP0D,QAEA2P,GADKrT,EAALyD,MACYzD,EAAZqT,cACAC,EAAMtT,EAANsT,OACAoB,EAAM1U,EAAN0U,OACAsL,EAAShgB,EAATggB,UACAtZ,EAAS1G,EAAT0G,UACAuZ,EAAejgB,EAAfigB,gBACAC,EAAalgB,EAAbkgB,cAIA,OAJalgB,EACbykC,UAIE9jC,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO6a,gBAClBlvB,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,uCAEnDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,eAInDzT,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,4BAI3DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CAClCC,eAACsT,KAAK,CAAChP,KAAK,OACR8B,KAAK,QACLlG,UAAY+S,EAAOmT,MAAS,0BAA4B,eACxD7S,aAAa,QACjBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,iBACLlG,UAAY+S,EAAOqM,eAAkB,0BAA4B,eACjE/L,aAAa,MAAKxT,SAAA,CACvBzH,QAAQC,IAAI,yCACZD,QAAQC,IAAIonB,GACb3f,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU0G,gBAAgBjd,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC1CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK8V,WAAW,KAAG9V,EAAK+c,SAAS,MAArDzZ,eAA+D,OAGhG7M,eAACwT,KAAY,CAACpN,KAAK,iBAAiBqN,UAAU,OAAOvT,UAAU,6BAIrEF,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACTO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,cACbC,aAAchV,EAAOxL,YACrBjQ,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,cAAeqG,EAAE7gB,OAAOkkB,cACtC3J,EAAgB,eAAe,GAAM,EACvC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,4BAIhEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,mBACLlG,UAAY+S,EAAOsI,iBAAoB,0BAA4B,eACnEhI,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAUO,kBAAkB9W,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK+N,KAAK,MAA9BzK,eAAwC,OAGzE7M,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,0BAGrEF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,oBACLlG,UAAY+S,EAAO6E,kBAAqB,0BAA4B,eACpEvE,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAUtI,mBAAmBjO,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OAC7CjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKnD,KAAK,KAAGmD,EAAK+N,KAAK,MAA9BzK,eAAwC,OAGzE7M,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,gCAK1EI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC2E,KAAM,CAACG,MAAM,OAAO2L,QAAS,kBAAMpN,EAAQnB,KAAKmE,EAAU,EAAEgC,KAAK,SAAQtI,SACrEH,EAAE,yBAKjB,KCzIMwoE,GAA4B9uE,YAAGC,QAAAC,YAAA,wMAkHtBkG,qBAAkB6C,aAvGjC,SAA+B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC7B8+D,EAD2CxiE,EAALyD,MACtB2K,OAAOq0D,SACvB/7D,EAAS,yBAAAyI,OAA4BqzD,EAAO,aAC5CrkB,EAAa,UACb5tC,EAAYtQ,EAAE,+BAEpBgU,EAAiCC,YAAYu0D,GAA2B,CACtEp3C,YAAa,kBAAM3tB,EAAQnB,KAAKmE,EAAU,IADrCm9D,EAELzvD,YAAAH,EAAA,GAF2B,GAG7BtQ,EAAiCC,YAAS+W,IAAlC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAElB2hE,EAAiBzjE,eAACqoE,GAAuB,IAE/C,GAAIzmE,EAAS,OACX5B,eAAC0iE,GAAqB,CACpBe,eAAgBA,EAChBvzD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAEpBH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAACoiE,GAAqB,CACpBe,eAAgBA,EAChBvzD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAAA,CAErBC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAM5X,EAAY7d,EAElB,OACE9B,eAAC0iE,GAAqB,CACpBe,eAAgBA,EAChBvzD,UAAWA,EACX4tC,WAAYA,EACZz3C,UAAWA,EAAUtG,SAErBC,eAACgU,KAAM,CACLC,cAAe,CACbib,eAAe,EACf9oB,KAAM,GACNyC,YAAa,IAEfsL,iBAAkBg0D,GAClB/zD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZmvD,EAAuB,CAAE/3D,UAAW,CAClC8I,MAAO,CACL82C,cAAe8W,EACfjzC,cAAe7a,EAAO6a,cACtB9oB,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,YACpBud,MAAO/R,EAAO+R,MACd9G,eAAgBjL,EAAOiL,eACvB/D,iBAAkBlH,EAAOkH,iBACzBzD,kBAAmBzD,EAAOyD,oBAE3BpD,eAAgB,CACf,CAACC,MAAO+yD,GAAkCj8D,UAAW,CACnD4/C,cAAe8W,OAGpBvtD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,6CAA+C,CAC5DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACsoE,GAAuB,CACtBt1D,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRsL,UAAWA,EACXtZ,UAAWA,EACX+9B,UAAU,UACV,KAKZ,KChGe1kC,sBA1Bf,SAAgCC,GAAmC,IAAhCC,EAACD,EAADC,EAAGmB,EAAMpB,EAANoB,OAAQohE,EAAOxiE,EAAPwiE,QAASoG,EAAQ5oE,EAAR4oE,SACrD,OACEvoE,eAACssD,GAAQ,CACPv3C,SAAS,MACTq3C,KAAM,CACF,CACEhmD,KAAM,UACNG,MAAO3G,EAAE,6CACT+N,KAAK,yBAADmB,OAA2BqzD,EAAO,kBAAArzD,OAAiBy5D,IAEzD,CACEniE,KAAM,aACNG,MAAO3G,EAAE,gDACT+N,KAAK,yBAADmB,OAA2BqzD,EAAO,kBAAArzD,OAAiBy5D,EAAQ,gBAEjE,CACEniE,KAAM,YACNG,MAAO3G,EAAE,+CACT+N,KAAK,yBAADmB,OAA2BqzD,EAAO,kBAAArzD,OAAiBy5D,EAAQ,gBAGrExnE,OAAQA,GAGd,IC+DerB,I,GAAAA,iBAAkB6C,aAzEjC,SAAoC5C,GAAoF,IAAlFC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBopD,GAAF7sD,EAAP0D,QAAkB1D,EAAT6sD,WAAWzsD,EAAQJ,EAARI,SAAQ0G,EAAA9G,EAAE+G,yBAAiB,IAAAD,EAAC,GAAEA,EAAA+hE,EAAA7oE,EAAE8oE,qBAAa,IAAAD,EAAC,GAAEA,EAE5G1tD,EADcrX,qBAAWxC,IACA6Z,WAEzBqnD,EAAU/+D,EAAM2K,OAAOq0D,SACvBmG,EAAWnlE,EAAM2K,OAAOwJ,GACxBlR,EAAS,yBAAAyI,OAA4BqzD,EAAO,aAC5CjyD,EAAYtQ,EAAE,gCAGpB0D,EAAiCC,YAAS09D,GAA0B,CAClEx1D,UAAW,CAAE8L,GAAI4qD,KADXvgE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxByJ,EAAyEhI,YAASokE,GAAiC,CACjHl8D,UAAW,CACT8L,GAAIgxD,KAFSG,EAAan9D,EAAtB3J,QAA+B+mE,EAAWp9D,EAAlB1J,MAA0B+mE,EAAUr9D,EAAhBzJ,KAMpD,GAAIF,GAAW8mE,EACb,OACE1oE,eAACsiE,GAAyB,CAAC57D,kBAAmBA,EAAmBL,UAAWA,EAAUtG,SACpFO,gBAAC4G,KAAI,CAACX,MAAO2J,EAAUnQ,SAAA,CACrBC,eAAC6oE,GAAuB,CAAC9nE,OAAQyrD,EAAW2V,QAASA,EAAUoG,SAAUA,IACzEvoE,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACc,SAAS,EAAMb,QAAQ,WAOzC,GAAIc,GAAS8mE,EACX,OACE3oE,eAACsiE,GAAyB,CAAC57D,kBAAmBA,EAAmBL,UAAWA,EAAUtG,SACpFO,gBAAC4G,KAAI,CAACX,MAAO2J,EAAUnQ,SAAA,CACrBC,eAAC6oE,GAAuB,CAAC9nE,OAAQyrD,EAAW2V,QAASA,EAASoG,SAAUA,IACxEvoE,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,wCAOb,IAAM8d,EAAQ5b,EAAKupD,cACbyd,EAASF,EAAWxd,oBACpBvpC,EAAanE,EAAMmE,UAAalW,KAAO+R,EAAMmE,WAAWjW,OAAOkP,GAAc,GAC7EynD,EAAgB7kD,EACtBpd,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxB2d,EAAMtX,KAAO,IAAMyb,KACd,GAEJknD,EAAsBD,EAC5BxoE,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxB+oE,EAAO1iE,QACF,GAEV,OACE9F,gBAACgiE,GAAyB,CAAC57D,kBAAmBA,EAAmBo3C,WApDhD,UAoDwEz3C,UAAWA,EAAUtG,SAAA,CAC3G0oE,EACDnoE,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVO,gBAAC4G,KAAKqJ,MAAK,CAAAxQ,SAAA,CAAEmQ,EAAU,IAAEqyD,EAAa,IAAEwG,OAE1C/oE,eAAC6oE,GAAuB,CAAC9nE,OAAQyrD,EAAW2V,QAASA,EAASoG,SAAUA,IACvExoE,OAIT,KCxEMipE,GAA+B1vE,YAAGC,QAAAC,YAAA,wMA8IzBkG,I,MAAAA,iBAAkB6C,aAnIjC,SAAgC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OACvCmU,EAAKnU,EAAM2K,OAAOwJ,GAClB4qD,EAAU/+D,EAAM2K,OAAOq0D,SACvB/7D,EAAS,yBAAAyI,OAA4BqzD,EAAO,aAC5C3V,EAAY,UACZ1O,EAAa,UACb2lB,EAAiBzjE,eAACqoE,GAAuB,IAE/C/kE,EAAiCC,YAASokE,GAAiC,CACzEl8D,UAAW,CACT8L,GAAIA,KAFA3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAMxB8R,EAAoCC,YAAYm1D,IAAzC7E,EAAsEpwD,YAAAH,EAAA,GAA7C,GAEhC,GAAIhS,EAAS,OACX5B,eAACipE,GAA2B,CAC1BxF,eAAgBA,EAChBjX,UAAWA,EACX1O,WAAYA,EACZz3C,UAAWA,EAAUtG,SAEpBH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC2oE,GAA2B,CAC1BxF,eAAgBA,EAChBjX,UAAWA,EACX1O,WAAYA,EACZz3C,UAAWA,EAAUtG,SAAA,CAErBC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAIdj/B,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM6d,EAAY7d,EACZspD,EAAsBtpD,EAAKspD,oBAG7B8d,EAAwB,GACxB9d,EAAoB9rC,iBACtB4pD,EAAwB9d,EAAoB9rC,eAAe/H,IAG7D,IAAI4xD,EAA0B,GAC1B/d,EAAoB7vC,mBACtB4tD,EAA0B/d,EAAoB7vC,iBAAiBhE,IAGjE,IAAI6xD,EAA2B,GAM/B,OALIhe,EAAoBtzC,oBACtBsxD,EAA2Bhe,EAAoBtzC,kBAAkBP,IAKjEvX,eAACipE,GAA2B,CAC1BxF,eAAgBA,EAChBjX,UAAWA,EACX1O,WAAYA,EACZz3C,UAAWA,EAAUtG,SAErBC,eAACgU,KAAM,CACLC,cAAe,CACbib,cAAek8B,EAAoBl8B,cACnC9oB,KAAMglD,EAAoBhlD,KAC1ByC,YAAauiD,EAAoBviD,YACjCud,MAAOglC,EAAoBhlC,MAC3B9G,eAAgB4pD,EAChB3tD,iBAAkB4tD,EAClBrxD,kBAAmBsxD,GAErBj1D,iBAAkBg0D,GAClB/zD,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZ8vD,EAA0B,CAAE14D,UAAW,CACrC8I,MAAO,CACLgD,GAAIA,EACJ2X,cAAe7a,EAAO6a,cACtB9oB,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,YACpBud,MAAO/R,EAAO+R,MACd9G,eAAgBjL,EAAOiL,eACvB/D,iBAAkBlH,EAAOkH,iBACzBzD,kBAAmBzD,EAAOyD,oBAE3BpD,eAAgB,CACf,CAACC,MAAO+yD,GAAkCj8D,UAAW,CACnD4/C,cAAe8W,OAGpBvtD,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,8CAAgD,CAC7DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACsoE,GAAuB,CACtBt1D,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACfF,UAAWA,EACX1M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EACX+9B,UAAU,UACV,KAKZ,KC3JailC,GAAiD/vE,YAAGC,QAAAC,YAAA,4jBCApD8vE,GAA4C92D,OAAaC,MAAM,CAC1E82D,SAAU/2D,SCmCG9S,iBAAkB6C,aA3BW,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAmB8T,GAAT/T,EAAP0D,QAAc1D,EAALyD,MAAezD,EAAR+T,UAAUV,EAAYrT,EAAZqT,aAAcsB,EAAa3U,EAAb2U,cAAemV,EAAU9pB,EAAV8pB,WAAoBpV,GAAF1U,EAANsT,OAActT,EAAN0U,QAAQuL,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAa,OACjK7f,eAACkT,KAAM,CAAAnT,SACLC,eAACc,KAAM,CAACC,OAAQiS,EAAchS,OAAQgS,EAAajT,SACjDO,gBAAC6S,KAAKC,MAAK,CAAClT,UAAU,OAAMH,SAAA,CAC1BO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,WACL0V,SAAU,WACR+D,EAAc,YAAaxL,EAAOk1D,UAClC3pD,EAAgB,YAAY,GAC5BtL,GAAc,GACdsT,YAAW,WAAO6B,GAAY,GAAG,IACnC,EACAmE,QAASvZ,EAAOk1D,SAChB71D,SAAUA,IAEZ1T,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,yBAEjDI,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,cAGrC,KCdL+1D,GAA6ClwE,YAAGC,QAAAC,YAAA,wPAsIvCkG,qBAAkB6C,aA3HjC,SAA0C5C,GAAyB,IAAtBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OACjDmU,EAAKnU,EAAM2K,OAAOwJ,GAClB4qD,EAAU/+D,EAAM2K,OAAOq0D,SACvB/7D,EAAS,yBAAAyI,OAA4BqzD,EAAO,aAC5C3V,EAAY,aACZ1O,EAAa,UACb2lB,EAAiBzjE,eAACqoE,GAAuB,IAE/C/kE,EAAiCC,YAAS8lE,GAAgD,CACxF59D,UAAW,CACT2/C,oBAAqB7zC,KAFjB3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAMxB8R,EAAgDC,YAAY21D,IAArDC,EAAgG11D,YAAAH,EAAA,GAA3D,GAE5C,GAAIhS,EAAS,OACX5B,eAACipE,GAA2B,CAC1BxF,eAAgBA,EAChBjX,UAAWA,EACX1O,WAAYA,EACZz3C,UAAWA,EAAUtG,SAEpBH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC2oE,GAA2B,CAC1BxF,eAAgBA,EAChBjX,UAAWA,EACX1O,WAAYA,EACZz3C,UAAWA,EAAUtG,SAAA,CAErBC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAId,IAAMmyC,EAAgC5nE,EAAK6nE,iCAE3C,OACE3pE,eAACipE,GAA2B,CAC1BxF,eAAgBA,EAChBjX,UAAWA,EACX1O,WAAYA,EACZz3C,UAAWA,EAAUtG,SAErBO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAChS,UAAU,aAAYH,SAAEH,EAAE,2BAG/CI,eAACiS,KAAM9K,KAAI,CAAApH,SACR2pE,EAA8BtgE,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC9CjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKq4C,aAAax7C,OAErBpG,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAC/BC,eAACgU,KAAM,CACLC,cAAe,CACbs1D,SAAUhgE,EAAKggE,UAEjBp1D,iBAAkBm1D,GAClBl1D,SAAU,SAACC,EAAMvH,GAAyB,IAArBwH,EAAaxH,EAAbwH,cACnBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZo1D,EAAsC,CAAEh+D,UAAW,CACjD8I,MAAO,CACHgD,GAAIhO,EAAKgO,GACTgyD,SAAUl1D,EAAOk1D,WAGrB70D,eAAgB,CACZ,CAACC,MAAO00D,GAAgD59D,UAAW,CACjE2/C,oBAAqB7zC,OAI1B3C,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,yDAA2D,CACxEmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiqB,GAAA,IAAIhX,EAAYgX,EAAZhX,aAAcC,EAAM+W,EAAN/W,OAAQoB,EAAM2V,EAAN3V,OAAQuL,EAAeoK,EAAfpK,gBAAiBC,EAAamK,EAAbnK,cAAe4J,EAAUO,EAAVP,WAAYnV,EAAa0V,EAAb1V,cAAa,OAC1FtU,eAAC4pE,GAAmC,CAClC52D,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRX,SAAUnK,EAAK6hD,oBAAoBye,UACnCv1D,cAAeA,EACfmV,WAAYA,GAIwB,QAtD9B5c,eA0DJ,UAMxB,KC4BenN,qBAAkB6C,aA9JjC,SAAyC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAYwD,GAAFzD,EAAP0D,QAAc1D,EAALyD,OAChDmU,EAAKnU,EAAM2K,OAAOwJ,GAClB4qD,EAAU/+D,EAAM2K,OAAOq0D,SACvB/7D,EAAS,yBAAAyI,OAA4BqzD,EAAO,aAC5C3V,EAAY,YACZ1O,EAAa,UAEnBx6C,EAAiCC,YAASunD,GAA0C,CAClFr/C,UAAW,CACT2/C,oBAAqB7zC,KAFjB3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAMxB8R,EAA2CC,YAAYm3C,IAAhDC,EAAqFl3C,YAAAH,EAAA,GAArD,GAOvC,GAHAvV,aAAaC,QAAQC,EAAKvD,6BAA6B,yBAAD8T,OAC3BqzD,EAAO,kBAAArzD,OAAiByI,EAAE,eAEjD3V,EAAS,OACX5B,eAACipE,GAA2B,CAC1Bzc,UAAWA,EACX1O,WAAYA,EACZz3C,UAAWA,EAAUtG,SAEpBH,EAAE,+BAGP,GAAIiC,EAAO,OACTvB,gBAAC2oE,GAA2B,CAC1Bzc,UAAWA,EACX1O,WAAYA,EACZz3C,UAAWA,EAAUtG,SAAA,CAErBC,eAAA,KAAAD,SAAIH,EAAE,8BACNI,eAAA,KAAAD,SAAI8B,EAAM01B,aAIdj/B,QAAQC,IAAIuJ,GAEZ,IAAM4E,EAAoB1G,eAACkB,IAAMsH,SAAQ,CAAAzI,SACvCC,eAACyW,GAAS,CAACL,OAAM,yBAAAtH,OAA2BqzD,EAAO,kBAAArzD,OAAiByI,EAAE,qBACpErX,UAAU,WAKd,OACEF,eAACipE,GAA2B,CAC1Bzc,UAAWA,EACX1O,WAAYA,EACZz3C,UAAWA,EACXK,kBAAmBA,EAAkB3G,SAErCO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,4CACpBI,eAACiS,KAAMC,UAAS,SAGpBlS,eAACiS,KAAM9K,KAAI,CAAApH,SACR+B,EAAKqpD,4BAA4B/hD,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACjDjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKub,QAAQC,SAAS,IAAC/kB,eAAA,SACtBuJ,EAAK+hD,UAAatrD,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,uBAAgC,MAEhFU,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACNwJ,EAAKogD,aAAavgD,OAAS9I,gBAACoE,IAAI,CAACtC,GAAE,0BAAA0M,OAA4BvF,EAAKogD,aAAavgD,MAAM,GAAGG,KAAKuc,eAAevO,IAAKxX,SAAA,CAChHwJ,EAAKogD,aAAavgD,MAAM,GAAGG,KAAKuc,eAAepB,cAAe,IAAC1kB,eAAA,YAGpEM,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC1BwJ,EAAKogD,aAAavgD,OAASG,EAAKogD,aAAavgD,MAAM,GAAGG,KAAKuc,eAAe3K,QAAQ0J,MAAM,IAAK,IAAC7kB,eAAA,eAGnGM,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACRC,eAACivB,GAAY,CAAC9sB,MAAOoH,EAAKgiD,eAAgB,IAACvrD,eAAA,YAG7CA,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAK+hD,UACLtrD,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN2L,QAAS,kBACPw6C,EAAiC,CAAEx/C,UAAW,CAC5C8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACT+zC,WAAW,IAEZ52C,eAAgB,CACf,CAACC,MAAOm2C,GAA0Cr/C,UAAW,CAC3D2/C,oBAAqB7zC,OAG1B3C,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,iDAAmD,CAChEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACD,EACF9B,SAEAH,EAAE,sBAGLI,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN2L,QAAS,kBACPw6C,EAAiC,CAAEx/C,UAAW,CAC5C8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACT+zC,WAAW,IAEZ52C,eAAgB,CACf,CAACC,MAAOm2C,GAA0Cr/C,UAAW,CAC3D2/C,oBAAqB7zC,OAG1B3C,MAAK,SAAA5H,GAAe,IAAZlL,EAAIkL,EAAJlL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,+CAAiD,CAC9DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GAAE,EACH9B,SAEAH,EAAE,wBA9EGiN,eAkFJ,UAMxB,KCjLO,SAAS61C,GAA0B6lB,EAAUxuB,GAClD,IAAI9xC,EAAY,CACdzD,gBAAYpF,EACZqF,cAAUrF,EACV26C,gBAAY36C,EACZmpE,SAAUA,GAOZ,OAJAtgE,EAAU8xC,WAAaA,EAEvBzhD,QAAQC,IAAI0P,GAELA,CACT,CC+NevI,qBAAkB6C,aAjNjC,SAA+C5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAC1DqT,EAAkCC,mBAAS,IAAGC,EAAA7C,YAAA2C,EAAA,GAAzCqjC,EAAUnjC,EAAA,GAAEwhD,EAAaxhD,EAAA,GAExBkE,EADcrX,qBAAWxC,IACA6Z,WAEzBytD,EAAWnlE,EAAM2K,OAAOwJ,GACxB4qD,EAAU/+D,EAAM2K,OAAOq0D,SACvB/7D,EAAS,yBAAAyI,OAA4BqzD,EAAO,kBAAArzD,OAAiBy5D,EAAQ,cACrEzqB,EAAa,UACb5tC,EAAYtQ,EAAE,kDAEpB0D,EAAqDC,YACnD02C,GAAoB,CAClBxuC,UAAWi3C,GAA0B6lB,EAAUxuB,KAF3Cn4C,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAAS1F,EAAS/N,EAAT+N,UAKvCuC,EAA0CC,YAAYk3C,IAA9C+e,EAAgF/1D,YAAAH,EAAA,GAAnD,GAE/BqD,EAAgBjX,eAACkH,KAAKgQ,QAAO,CAAAnX,SACjCC,eAAC04C,GAAW,CACVG,gBAAiBt6C,EAAKrB,yCACtByrB,YAAY,YACZ7M,SAAU,SAAC3Z,GACT7J,QAAQC,IAAI4J,GACZ9D,aAAaC,QAAQC,EAAKrB,yCAA0CiF,GACpEi2D,EAAcj2D,GACd7J,QAAQC,IAAI,qBACZwe,EAAQ,CAAEtL,UAAWi3C,GAA0B6lB,EAAUpmE,IAC3D,MAKJ,GAAIP,EAAS,OACX5B,eAACsiE,GAAyB,CACxBxkB,WAAYA,EACZ5tC,UAAWA,EACX7J,UAAWA,EAAUtG,SAErBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKpC,GAAIa,EAAO,OACT7B,eAACsiE,GAAyB,CACxBxkB,WAAYA,EACZ5tC,UAAWA,EACX7J,UAAWA,EAAUtG,SAErBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,gEAKZtH,QAAQC,IAAIuJ,GACZ,IAAM28B,EAAW38B,EAAK28B,SAChBqqC,EAAShnE,EAAKspD,oBACd1tC,EAAQorD,EAAOzd,cACfF,EAA8BrpD,EAAKqpD,4BACnCtpC,EAAYlW,KAAO+R,EAAMmE,WAAWjW,OAAOkP,GAE3C+gD,EAAY,GAAA/sD,OAAMg6D,EAAOzd,cAAcjlD,KAAI,KAAA0I,OAAI+S,EAAS,OAAA/S,OAAMg6D,EAAO1iE,MACvE2jE,EAAwB,GAO5B,OANA5e,EAA4B/hD,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC3CwgE,EAAsB7nE,KAAKqH,EAAKub,QAAQvN,GAAG,IAE7Cjf,QAAQC,IAAIwxE,GAGPhwB,EAoBAtb,EAASr1B,MAAMjK,OAmBlBa,eAACsiE,GAAyB,CACxBxkB,WAAYA,EACZ5tC,UAAWA,EACX2rD,aAAcA,EACdx1D,UAAWA,EAAUtG,SAErBC,eAACiO,GAAW,CAACiC,UAAWA,EACXR,SAAU+uB,EAAS/uB,SACnBY,aAAa,EACbH,cAAe8G,EACfpH,WAAY,WACTwB,EAAU,CACV5F,UAAW,CACTgG,MAAOgtB,EAAS/uB,SAASgC,WAE3BC,YAAa,SAACC,EAAc9E,GAA2B,IAAvB+E,EAAe/E,EAAf+E,gBACxBC,EAAWD,EAAgB4sB,SAASr1B,MACpCsG,EAAWmC,EAAgB4sB,SAAS/uB,SAE1C,OAAOoC,EAAS3S,OACZ,CAGE2C,KAAM,CACJ28B,SAAU,CACR1sB,WAAYH,EAAe6sB,SAAS1sB,WACpC3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe6sB,SAASr1B,OAAK4I,aAAKF,IAC9CpC,cAINkC,CACN,GAEJ,EAAE7R,SAEZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACR0+B,EAASr1B,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OACzBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKwb,UADQlY,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK0hB,OADQpe,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAC7BgqE,EAAsBvO,SAASjyD,EAAKgO,IACpCvX,eAACuI,KAAK,CAACzD,MAAM,UAAU5E,UAAU,aAAYH,SAAEH,EAAE,qEACjDU,gBAACqE,KAAM,CAACqlE,GAAC,EACPllE,MAAM,UACNF,SAAO,EACP6L,QAAS,kBACPq5D,EAA8B,CAAEr+D,UAAW,CACzC8I,MAAO,CACLuQ,QAASvb,EAAKgO,GACd6zC,oBAAqBmd,IAEtB7zD,eAAgB,CACf,CAACC,MAAOm2C,GAA0Cr/C,UAAW,CAC3D2/C,oBAAqBmd,OAG1B3zD,MAAK,SAAAoV,GAAe,IAAZloB,EAAIkoB,EAAJloB,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAAQ,GAADhG,OAAKlP,EAAE,uDAAsD,KAAAkP,OAAIvF,EAAKwb,UAAa,CAC5FhQ,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GAAE,EACL9B,SAAA,CAEAH,EAAE,gBAAgB,IAACI,eAACmG,KAAI,CAACC,KAAK,sBA/BEyG,kBAPzBA,eA0CJ,aA1GtB7M,eAACsiE,GAAyB,CACxBxkB,WAAYA,EACZ+d,aAAcA,EACdx1D,UAAWA,EAAUtG,SAErBC,eAACiO,GAAW,CAACiC,UAAWA,EACXI,aAAa,EACbH,cAAe8G,EAAclX,SAExCC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACsrB,KAAK,CAAChnB,KAAK,YAAWvE,SAAEH,EAAE,+DA9BjCI,eAACsiE,GAAyB,CACxBxkB,WAAYA,EACZ+d,aAAcA,EACdx1D,UAAWA,EAAUtG,SAErBC,eAACiO,GAAW,CAACiC,UAAWA,EACXI,aAAa,EACbH,cAAe8G,EAAclX,SAExCC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACsrB,KAAK,CAAChnB,KAAK,UAAUjC,KAAK,OAAMtC,SAC9BH,EAAE,uFA0Hf,KCnOO,SAASgI,KACd,IAAIC,EACAmtC,EACAhtC,EAEAC,EAAY,CACdC,SAAU7J,aAAa0E,QAAQxE,EAAKpB,2BACpCgL,UAAW9J,aAAa0E,QAAQxE,EAAKnB,6BAwBvC,OArBAyK,EAAUxJ,aAAa0E,QAAQxE,EAAKlB,6BAElC4K,EAAUJ,QAAUA,GAGtBmtC,EAAoB32C,aAAa0E,QAAQxE,EAAKjB,8BAE5C2K,EAAU+sC,kBADRA,GAG4B,GAGhChtC,EAAuB3J,aAAa0E,QAAQxE,EAAKhB,iCAE/C0K,EAAUD,qBADRA,GAG+B,GAGnC1P,QAAQC,IAAI0P,GAELA,CACT,CA4BO,SAASgiE,GAAuBvhE,GACrC,IAAI5D,EAEJ,OAAQ4D,GACN,IAAK,MACH5D,EAAQ,UACR,MACF,IAAK,YACHA,EAAQ,UACR,MACF,IAAK,OACHA,EAAQ,SACR,MACF,QACEA,EAAQ,UAGZ,OAAO9E,eAAC2I,GAAU,CAAC7D,MAAOA,GAC5B,CAGO,SAAS8D,GAAmBhJ,EAAG8I,EAAQG,EAAaC,EAASC,GAClE,OAAID,EACKxI,gBAAA,QAAAP,SAAA,CAAOH,EAAE,mBAAmB,KAAGmJ,EAAY,OAGrC,aAAXL,EACKG,OADT,CAGF,CCnFA,SAASwa,GAAgBlhB,GACvB,IAAImhB,EAAejlB,aAAa0E,QAAQZ,GACxC,OAAImhB,GAGK,EAEX,CAGA,SAAStG,GAA6BjN,EAAK5N,EAAO4U,GAChD1Y,aAAaC,QAAQyR,EAAK5N,GAC1B4U,EAAQnP,KAEV,CAEA,IAAM0sD,GAAc,kCA0EL50D,qBAAkB6C,aAvEjC,SAA6B5C,GAAiC,IAA9BC,EAACD,EAADC,EAAYkC,GAAFnC,EAAP0D,QAAa1D,EAAJmC,MAAMiV,EAAOpX,EAAPoX,QAChDL,EAA8BC,mBAAS0M,GAAgB9kB,EAAKhB,kCAAiCqZ,EAAA7C,YAAA2C,EAAA,GAAxFsH,EAAQpH,EAAA,GAAE29C,EAAW39C,EAAA,GAC1BsG,EAAwBvG,mBAAS0M,GAAgB9kB,EAAKjB,+BAA8B6f,EAAApJ,YAAAmJ,EAAA,GAA/EgtD,EAAK/sD,EAAA,GAAEgtD,EAAQhtD,EAAA,GAEpB,OACE7c,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACfC,eAAC2E,KAAM,CACLzE,UAAU,cACV4E,MAAM,OACND,KAAK,KACL4L,QAAS,WACPpS,aAAaC,QAAQC,EAAKhB,gCAAiC,IAC3Dc,aAAaC,QAAQC,EAAKjB,6BAA8B,IACxDi3D,EAAY,IACZ4V,EAAS,IACTpzD,EAAQnP,KACV,EAAE7H,SAEDH,EAAE,mBAELI,eAAA,MAAIE,UAAU,YAAWH,SAAEH,EAAE,yBAGjCU,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SAEPO,gBAAA,UACEJ,UAAWo0D,GACXnyD,MAAO6b,EACPlC,SAAW,SAAC4B,GACV62C,EAAY72C,EAAMrY,OAAOlD,OACzB6a,GACEze,EAAKhB,gCACLmgB,EAAMrY,OAAOlD,MACb4U,EAEJ,EAAEhX,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,yCAATiN,gBACrB/K,EAAK0sC,sBAAsBplC,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC3CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,SAI7D7M,eAACI,KAAKqF,IAAG,CAAA1F,SAEPO,gBAAA,UACEJ,UAAWo0D,GACXnyD,MAAO+nE,EACPpuD,SAAW,SAAC4B,GACVysD,EAASzsD,EAAMrY,OAAOlD,OACtB6a,GACEze,EAAKjB,6BACLogB,EAAMrY,OAAOlD,MACb4U,EAEJ,EAAEhX,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,sCAATiN,gBACrB/K,EAAK6yC,mBAAmBvrC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACxCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,cAOrE,KCvEKxO,aAAa0E,QAAQxE,EAAKpB,6BAC7B7E,QAAQC,IAAI,iDACZ8F,aAAaC,QAAQC,EAAKpB,0BAA2BwO,OAASC,OAAO,eACrEvN,aAAaC,QAAQC,EAAKnB,2BAA4BuO,OAAS5B,IAAI,EAAG,QAAQ6B,OAAO,gBAwHxElM,I,eAAAA,iBAAkB6C,aApHjC,SAA2B5C,GAA4C,IAAxCC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAU+B,EAAInC,EAAJmC,KAAMiV,EAAOpX,EAAPoX,QAEzD,OACE/W,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,kBAAmB4G,SAAU5G,EAAE,yBAAyBG,SAC5EO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAA,QAAMuG,MAAO3G,EAAE,6CAA6CG,SAC1DC,eAAC2E,KAAM,CACLtC,KAAK,OACLwyD,QAAQ,OACR30D,UAAU,OACV4E,MAC4D,aAAxDzG,aAAa0E,QAAQxE,EAAKlB,2BAA+CgB,aAAa0E,QAAQxE,EAAKlB,0BAC3F,YAAV,QAEFoT,QAAS,WACPpS,aAAaC,QAAQC,EAAKlB,yBAA0B,YACpD0Z,EAAQnP,KACV,MAGJ5H,eAAA,QAAMuG,MAAO3G,EAAE,8CAA8CG,SAC3DC,eAAC2E,KAAM,CACLtC,KAAK,QACLnC,UAAU,OACV4E,MAC2D,cAAxDzG,aAAa0E,QAAQxE,EAAKlB,0BAC3B,QAAU,YAEZoT,QAAS,WACPpS,aAAaC,QAAQC,EAAKlB,yBAA0B,aACpD0Z,EAAQnP,KACV,MAGJ5H,eAAC4d,GAAY,CACX1d,UAAU,+CACV0b,SAAU,IAAI1Y,KAAK7E,aAAa0E,QAAQxE,EAAKpB,4BAC7C+e,aAAa,EACbJ,SAAU,SAAC/O,GACT,IAAI+nD,EAAenpD,KAAOoB,GACtBgoD,EAAgBppD,KAAOmpD,GAAc/qD,IAAI,EAAG,QAEhD1L,aAAaC,QAAQC,EAAKpB,0BAA2B23D,EAAalpD,OAAO,eACzEvN,aAAaC,QAAQC,EAAKnB,2BAA4B23D,EAAcnpD,OAAO,eAE3EtT,QAAQC,IAAIqP,MAEZmP,EAAQnP,KACV,EACAwU,gBAAiBxc,EAAE,iCAErBU,gBAACqE,KAAOsB,KAAI,CAAC/F,UAAU,sCAAqCH,SAAA,CAC1DC,eAAC2E,KAAM,CACLtC,KAAK,eACLyC,MAAM,YACN2L,QAAU,WACR,IAAIqkD,EAAenpD,KAAOtN,aAAa0E,QAAQxE,EAAKpB,4BAA4B8gC,SAAS,EAAG,QACxF82B,EAAgBppD,KAAOmpD,GAAc/qD,IAAI,EAAG,QAEhD1L,aAAaC,QAAQC,EAAKpB,0BAA2B23D,EAAalpD,OAAO,eACzEvN,aAAaC,QAAQC,EAAKnB,2BAA4B23D,EAAcnpD,OAAO,eAE3EmL,EAAQnP,KACZ,IACA5H,eAAC2E,KAAM,CACLtC,KAAK,SACLyC,MAAM,YACN2L,QAAU,WACR,IAAIwkD,EAAkBtpD,OAClBupD,EAAmBvpD,KAAOspD,GAAiBlrD,IAAI,EAAG,QAEtD1L,aAAaC,QAAQC,EAAKpB,0BAA2B83D,EAAgBrpD,OAAO,eAC5EvN,aAAaC,QAAQC,EAAKnB,2BAA4B83D,EAAiBtpD,OAAO,eAE9EmL,EAAQnP,KACZ,IACA5H,eAAC2E,KAAM,CACLtC,KAAK,gBACLyC,MAAM,YACN2L,QAAU,WACR,IAAIqkD,EAAenpD,KAAOtN,aAAa0E,QAAQxE,EAAKpB,4BAA4B4M,IAAI,EAAG,QACnFgrD,EAAgBppD,KAAOmpD,GAAc/qD,IAAI,EAAG,QAEhD1L,aAAaC,QAAQC,EAAKpB,0BAA2B23D,EAAalpD,OAAO,eACzEvN,aAAaC,QAAQC,EAAKnB,2BAA4B23D,EAAcnpD,OAAO,eAE3EmL,EAAQnP,KACZ,OAEF5H,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,gBAAenK,SAC5CC,eAAC0E,IAAI,CAACtC,GAAI,uBAAuBrC,SAC/BO,gBAACqE,KAAM,CAACG,MAAM,yBAAwB/E,SAAA,CACpCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,gBAAgB,IAAExG,EAAE,2BAMrDI,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACb+B,EACA9B,eAACoqE,GAAoB,CAACtoE,KAAMA,EAAMiV,QAASA,IAC3C,GACDhX,aAOf,KCpJao0C,GAAmB76C,YAAGC,QAAAC,YAAA,0/CAiFtB46C,GAAkB96C,YAAGI,QAAAF,YAAA,whCA4DrB8gB,GAAyBhhB,YAAGK,QAAAH,YAAA,oxBAuC5B6wE,GAAe/wE,YAAGO,QAAAL,YAAA,uiBA8BlB8wE,GAAwBhxE,YAAGQ,QAAAN,YAAA,+ICnLnC6E,aAAa0E,QAAQxE,EAAKpB,6BAC7B7E,QAAQC,IAAI,iDACZ8F,aAAaC,QAAQC,EAAKpB,0BAA2BwO,OAASC,OAAO,eACrEvN,aAAaC,QAAQC,EAAKnB,2BAA4BuO,OAAS5B,IAAI,EAAG,QAAQ6B,OAAO,gBAiMxElM,qBAAkB6C,aA7LjC,SAAuB5C,GAAmB,IAAfC,EAACD,EAADC,EAEnBsL,GAF6BvL,EAAP0D,QACRI,qBAAWxC,IACAkK,kBAE/B7H,EAAwCC,YAAS4wC,GAAkB,CACjE1oC,UAAW7D,KACXiE,YAAa,iBAFRjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAI7BnD,EAA8BC,YAAYy2D,IAAnCC,EAAyDx2D,YAAAH,EAAA,GAAtC,GAE1B,GAAIhS,EACF,OACE5B,eAACwqE,GAAkB,CAAAzqE,SACjBC,eAAA,KAAAD,SAAIH,EAAE,iCAKZ,GAAIiC,EACF,OACE7B,eAACwqE,GAAkB,CAAAzqE,SACjBC,eAAA,KAAAD,SAAIH,EAAE,gCAKZ,IAAM80C,EAAS5yC,EAAK2oE,eAIpB,OAHAnyE,QAAQC,IAAIm8C,GAGPA,EAAOv1C,OASVa,eAACwqE,GAAkB,CAAC1oE,KAAMA,EAAMiV,QAASA,EAAQhX,SAC7C+B,EAAK2oE,eAAen+D,KAAI,SAAAC,GAAA,IAAGQ,EAAIR,EAAJQ,KAAM2nC,EAAMnoC,EAANmoC,OAAM,OACvC10C,eAAA,OAAAD,SACEO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVO,gBAAC4G,KAAKqJ,MAAK,CAAAxQ,SAAA,CACTC,eAAA,KAAAD,SAAI4L,KAAOoB,GAAMnB,OAAO,UAAY,IAAE,IACtC5L,eAAA,QAAME,UAAU,aAAYH,SACzB4L,KAAOoB,GAAMnB,OAAO,aAIxB8oC,EAAOv1C,OACRmB,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,IAChBlS,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,MANFrF,kBASlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACR20C,EAAOpoC,KAAI,SAAAQ,GAAA,IACRG,EAAcH,EAAdG,eACAC,EAAaJ,EAAbI,cACAH,EAAID,EAAJC,KACArE,EAAMoE,EAANpE,OACAI,EAAOgE,EAAPhE,QACAC,EAAW+D,EAAX/D,YACAF,EAAWiE,EAAXjE,YACAic,EAAOhY,EAAPgY,QACA4/B,EAAQ53C,EAAR43C,SACAv3C,EAAwBL,EAAxBK,yBACA6nC,EAAiBloC,EAAjBkoC,kBACA5nC,EAASN,EAATM,UACAC,EAAOP,EAAPO,QAAO,OACT/M,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPkqE,GAAuBvhE,KAE1BpI,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CAEP4L,KAAOoB,EAAO,IAAMK,GAAWxB,OAAOV,GAAY,IAAE,MACpDS,KAAOoB,EAAO,IAAMM,GAASzB,OAAOV,GAAY,IAAG,IAChC,aAAlBgC,EAAgClN,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,kBAA2B,KAAM,IAACI,eAAA,SAC9FA,eAAA,SAAOE,UAAU,aAAYH,SAAE6I,GAAmBhJ,EAAG8I,EAAQG,EAAaC,EAASC,QAErFzI,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CAEPoN,EAAyBnF,qBAAqB5B,KAAK,IAACpG,eAAA,SACrDA,eAAA,SAAOE,UAAU,aAAYH,SAAEoN,EAAyB/G,UAE1DpG,eAACiS,KAAMxM,IAAG,CAAA1F,SAEPi1C,EAAkB5uC,OAErB9F,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CAEL+kB,EACCA,EAAQC,SACR/kB,eAAA,QAAME,UAAU,WAAUH,SAAEH,EAAE,iCACjC,IAACI,eAAA,SACFA,eAAA,SAAOE,UAAU,aAAYH,SACzB2kD,EAAYA,EAAS3/B,SAAW,QAGtC/kB,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC6sB,KAAQ,CAEP3sB,UAAU,aACVoE,KAAK,SACLwoB,QAAM,EACNhoB,MAAM,mBACNioB,eAAgBntB,EAAE,mBAClBqC,MAAO,CACLjC,eAAC0N,GAAoB,CAAYzD,WAAW,OAAOC,SAAS,wBAAuBnK,SACjFC,eAAC0E,IAAI,CAACtC,GAAI,+BAAiC6K,EAAiB,IAAMF,EAAKhN,SACrEC,eAAC6sB,KAASxoB,KAAI,CAEZhC,KAAK,SAAQtC,SAEZH,EAAE,iBAHEiN,mBAHgBA,gBAU3BvM,gBAACoN,GAAoB,CAAYzD,WAAW,SAASC,SAAS,gBAAenK,SAAA,CAC3EC,eAAC6sB,KAAS0oC,YAAW,GAAM1oD,gBAC3B7M,eAAC0E,IAAI,CAACtC,GAAI,6BAA+B6K,EAAelN,SACtDC,eAAC6sB,KAASxoB,KAAI,CAEZiE,MAAO1I,EAAE,wCACT41D,UAAU,YACVnzD,KAAK,SAAQtC,SAEVH,EAAE,iBALAiN,oBAJgBA,gBAa3BvM,gBAACoN,GAAoB,CAAYzD,WAAW,SAASC,SAAS,gBAAenK,SAAA,CAC3EC,eAAC6sB,KAAS0oC,YAAW,GAAM1oD,gBAC3B7M,eAAA,QAAME,UAAU,WAAUH,SAC1BC,eAAC6sB,KAASxoB,KAAI,CAEZiE,MAAO1I,EAAE,wCACT41D,UAAU,SACVnzD,KAAK,UACLoO,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,sCACduZ,eAAgB7Y,gBAAA,KAAAP,SAAA,CACb4L,KAAOoB,EAAO,IAAMK,GAAWxB,OAAOV,GAAY,IAAE,MACpDS,KAAOoB,EAAO,IAAMM,GAASzB,OAAOV,GAAY,IAAE,IAClD8pC,EAAkB5uC,KAAK,IAAE,IAAI,MAAI,IACjC+G,EAAyBnF,qBAAqB5B,KAAK,IAAE,IACrD+G,EAAyB/G,OALJyG,gBAOxBuM,WAAYxZ,EAAE,2BACdgb,eAAgB2vD,EAChBjxD,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAItK,IAELyH,eAAgB,CACjB,CAAEC,MAAOw/B,GAAkB1oC,UAAW7D,SAG5C,EAAE7H,SACHH,EAAE,mBA1BIiN,oBAJkBA,kBA9BxBA,oBAhCKA,eAmGJ,SA9HA7M,eAACkH,KAAKC,KAAI,CAAApH,SAAEH,EAAE,oCAV5BiN,eA8IJ,MAxJV7M,eAACwqE,GAAkB,CAAAzqE,SACjBC,eAAA,KAAAD,SACGH,EAAE,iCA0JX,KChOag1C,GAAepiC,OAAaC,MAAM,CAC3CvF,cAAesF,OACZG,SAAS/S,YAAE,uBACduN,yBAA0BqF,OACvBG,SAAS/S,YAAE,uBACdo1C,kBAAmBxiC,OAChBG,SAAS/S,YAAE,uBACdiiB,UAAWrP,OACRG,SAAS/S,YAAE,uBACdwN,UAAWoF,OACRgqB,UAAU58B,YAAE,sBACZ+S,SAAS/S,YAAE,uBACdyN,QAASmF,OACNgqB,UAAU58B,YAAE,sBACZ+S,SAAS/S,YAAE,yBCyJDF,iBAAkB6C,aAvJT,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAY+f,GAAFhgB,EAAP0D,QAAkB1D,EAATggB,WAAW3M,EAAYrT,EAAZqT,aAAc6M,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiB3M,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAiBhO,GAAF1G,EAAP6iB,QAAkB7iB,EAAT0G,WAAS,OAChI/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kCAAkCG,SAAA,CACrDO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,gBACLlG,UAAY+S,EAAO/F,cAAiB,0BAA4B,eAChEqG,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,WAAUpC,SAAaH,EAAE,qCAATiN,gBAC9B7M,eAAA,UAAQmC,MAAM,SAAQpC,SAAaH,EAAE,mCAATiN,mBAE9B7M,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,OAAOvT,UAAU,wBAEpC,aAAzBmU,EAAOnH,cAAgC,GACxC5M,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sCAAsCG,SAAA,CACzDO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,oBACLlG,UAAY+S,EAAOiwC,kBAAqB,0BAA4B,eACpE3vC,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,mBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,oBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,sBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,qBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,mBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,qBAATiN,gBACvB7M,eAAA,UAAQmC,MAAM,IAAGpC,SAAaH,EAAE,mBAATiN,mBAEzB7M,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,wBAGtEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,2BACLlG,UAAY+S,EAAO9F,yBAA4B,0BAA4B,eAC3EoG,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU2xB,0BAA0BloC,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACpDjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKvB,qBAAqB5B,KAAK,MAAImD,EAAKnD,OAA/CyG,eAA6D,OAG9F7M,eAACwT,KAAY,CAACpN,KAAK,2BAA2BqN,UAAU,OAAOvT,UAAU,0BAG7EF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,oBACLlG,UAAY+S,EAAO+hC,kBAAqB,0BAA4B,eACpEzhC,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAUg1B,mBAAmBvrC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC7CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,6BAIxEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAiC,aAAzBgB,EAAOnH,cAAgCtN,EAAE,gBAAkBA,EAAE,sBAAsBG,SAAA,CACrGC,eAAC4d,GAAY,CACX1d,UAAY+S,EAAO4O,UAAa,0BAA4B,eAC5DjG,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GACT8S,EAAc,YAAa9S,GAC3B6S,EAAgB,aAAa,EAC/B,EACA5D,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAGlC,aAAzBmU,EAAOnH,cAAgC,GACxClN,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GACT8S,EAAc,UAAW9S,GACzB6S,EAAgB,WAAW,EAC7B,EACA5D,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,EAC9CxD,gBAAiBxc,EAAE,0CAErBI,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAKhEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACxCC,eAACm2D,GAAY,CACXj2D,UAAY+S,EAAO7F,UAAa,0BAA4B,eAC5DwO,SAAUvH,EAAOjH,UACjB0O,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,EAChDi2C,WAAW,IAEb71D,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACtCC,eAACm2D,GAAY,CACXj2D,UAAY+S,EAAO5F,QAAW,0BAA4B,eAC1DuO,SAAUvH,EAAOhH,QACjByO,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,EAC9Ci2C,WAAW,IAEb71D,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,gCAkBhEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAAC2E,KAAM,CACPG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAEHI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,2BAIJ,KCnIEF,qBAAkB6C,aAvBjC,SAA6B5C,GAAiB,IAAfC,EAACD,EAADC,EAAGG,EAAQJ,EAARI,SAGhC,OACEC,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,kBAAmB4G,SAAU5G,EAAE,yBAAyBG,SAC5EC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC6G,GAAU,CAACR,UARN,yBAWVrG,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCgGeL,I,GAAAA,iBAAkB6C,aA5GjC,SAAyB5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QACtB6M,EAAYtQ,EAAE,6BACdyG,EAAY,mBAClB/C,EAAiCC,YAAS+W,IAAlC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACxB8R,EAAgCC,YAAYw2D,IAApCK,EAAiD32D,YAAAH,EAAA,GAA9B,GAG3B,GAAIhS,EAAS,OACX5B,eAAC2qE,GAAoB,CAAA5qE,SACnBC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,qCAMd,GAAIiC,EAAO,OACT7B,eAAC2qE,GAAoB,CAAA5qE,SACnBC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,oCAMd,IAAM+f,EAAY7d,EAElB,OACE9B,eAAC2qE,GAAoB,CAAA5qE,SACnBC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACbib,eAAe,EACfhiB,cAAe,SACfg2C,kBAAmB,EACnB/1C,yBAA0B,GAC1B6nC,kBAAmB,GACnBnzB,UAAW,IAAI3e,KACfkK,UAAW,IAAIlK,KACfmK,QAAS,IAAInK,MAEfiR,iBAAkBygC,GAClBxgC,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ,IAIIyN,EAJAohC,EAAoB7uC,EAAO6uC,kBACF,aAAzB7uC,EAAOnH,gBACTg2C,EAAoB,GAIlBphC,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGrB4oD,EAAoB,CAAEj/D,UAAW,CAC/B8I,MAAO,CACLrH,cAAemH,EAAOnH,cACtBg2C,kBAAmBA,EACnB/1C,yBAA0BkH,EAAOlH,yBACjC6nC,kBAAmB3gC,EAAO2gC,kBAC1BnzB,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,EACT1U,UAAWmR,GAAmBlK,EAAOjH,WACrCC,QAASkR,GAAmBlK,EAAOhH,WAEpCqH,eAAgB,CACf,CAACC,MAAOw/B,GAAkB1oC,UAAW7D,SAExCgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,qCAAuC,CACpDmV,SAAUF,KAAMG,SAASC,eAE7B5R,EAAQnB,KAAKmE,EACf,IAAG6O,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQmO,EAAOxV,EAAPwV,QAAO,OACnExiB,eAAC4qE,GAAiB,CAChBjrD,UAAWA,EACX3M,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTnc,UAAWA,GAEO,OAOpC,KC7HaiuC,GAAeh7C,YAAGC,QAAAC,YAAA,iKCOhBkG,kBAJO,SAAHC,GAAOA,EAADC,EAAC,OACtBI,eAAC6G,GAAU,CAACR,UAAU,oBAAqB,IC+BhC3G,kBA1BO,SAAHC,GAAA,IAAMC,EAACD,EAADC,EAAGk+C,EAAUn+C,EAAVm+C,WAAY+sB,EAAOlrE,EAAPkrE,QAAO,OAC7CvqE,gBAAC2F,KAAKmN,MAAK,CAAC2qC,aAAa,EAAKh+C,SAAA,CAC5BC,eAACiG,KAAK+3C,UAAS,CAEb99C,UAAU,4BACVkC,GAAI,8BAAgCyoE,EACpCxoE,KAAK,SACLtB,OAAsB,SAAb+8C,EAAqB/9C,SAE7BH,EAAE,iBANEiN,gBAQP7M,eAAC0N,GAAoB,CAACzD,WAAW,OACXC,SAAS,sBAAqBnK,SAClDC,eAACiG,KAAK+3C,UAAS,CAEb99C,UAAU,4BACVkC,GAAI,mCAAqCyoE,EACzCxoE,KAAK,QACLtB,OAAqB,cAAb+8C,EAAyB/9C,SAEhCH,EAAE,sBANEiN,oBASE,ICYAnN,qBAAkB6C,aAhCjC,SAA0B5C,GAAiH,IAA/GC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOrD,EAAQJ,EAARI,SAAQ22D,EAAA/2D,EAAE6G,gBAAQ,IAAAkwD,EAAC,GAAEA,EAAAC,EAAAh3D,EAAEuQ,iBAAS,IAAAymD,EAAC,GAAEA,EAAAC,EAAAj3D,EAAEk3D,mBAAW,IAAAD,GAAKA,EAAAE,EAAAn3D,EAAE0jD,sBAAc,IAAAyT,EAAC,GAAEA,EAAA5Y,EAAAv+C,EAAEy+B,4BAAoB,IAAA8f,EAAC,GAAEA,EAC/H2sB,EAAUznE,EAAM2K,OAAO+8D,SAE7B,OACE9qE,eAACiL,GAAW,CAAAlL,SACVO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CACVL,MAAO3G,EAAE,kBACT4G,SAAUA,EAASzG,SAEnBC,eAAA,OAAKE,UAAU,sBAAqBH,SACjCq+B,MAGL99B,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACX82D,EACD72D,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACpBA,IAFaA,IAMpBC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAAC+qE,GAAa,CAACjtB,WAAYuF,EAAgBwnB,QAASA,aAMhE,KC+BenrE,qBAAkB6C,aA5DjC,SAAsB5C,GAAoG,IAAlGC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOrD,EAAQJ,EAARI,SAAQ+2D,EAAAn3D,EAAE0jD,sBAAc,IAAAyT,EAAC,GAAEA,EAAAF,EAAAj3D,EAAEk3D,mBAAW,IAAAD,GAAKA,EAAA1Y,EAAAv+C,EAAEy+B,4BAAoB,IAAA8f,EAAC,GAAEA,EAAAyY,EAAAh3D,EAAEuQ,iBAAS,IAAAymD,EAAC,GAAEA,EAC9GkU,EAAUznE,EAAM2K,OAAO+8D,SAC7BxnE,EAAiCC,YAAS6wC,GAAiB,CAAE3oC,UAAW,CACtE8L,GAAIszD,KADEjpE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAQxB,GAJKoO,IACHA,EAAYtQ,EAAE,+BAGZgC,EAAS,OACX5B,eAACgrE,GAAiB,CAChB96D,UAAWA,EACX2mD,aAAa,EACbz4B,qBAAsBA,EACtBilB,eAAgBA,EAAetjD,SAE/BC,eAAA,KAAAD,SAAIH,EAAE,iCAIV,GAAIiC,EAAO,OACTvB,gBAAC0qE,GAAiB,CAChB96D,UAAWA,EACX2mD,aAAa,EACbz4B,qBAAsBA,EACtBilB,eAAgBA,EAAetjD,SAAA,CAE9BzH,QAAQC,IAAIsJ,GACb7B,eAAA,KAAAD,SAAIH,EAAE,iCAIVtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAMmS,EAAgBnS,EAAK8/C,aAErBuV,EAAmBz4C,GAAsBzK,EAAc7G,WACvD5G,EClDD,SAAgC7G,GAAiD,IAA/CC,EAACD,EAADC,EAAGoe,EAAQre,EAARqe,SAAUo5C,EAAYz3D,EAAZy3D,aAAc8S,EAAKvqE,EAALuqE,MAAO7S,EAAS13D,EAAT03D,UACzE,OAAOz3D,EAAE,iBAAmB,KAAOoe,EAAW,KAAOo5C,EAAe,OAAS8S,EAAQ,MAAQv+D,KAAO0rD,GAAWzrD,OAAO,KACxH,CDgDmBq/D,CAAwB,CACvCrrE,EAAGA,EACHoe,SAAU/J,EAAc9G,yBAAyBnF,qBAAqB5B,KACtEgxD,aAAcnjD,EAAc9G,yBAAyB/G,KACrD8jE,MAAOj2D,EAAc+gC,kBAAkB5uC,KACvCixD,UAAWF,IAGb,OACEn3D,eAACgrE,GAAiB,CAChBxkE,SAAUA,EACV0J,UAAWA,EACXkuB,qBAAsBA,EACtBy4B,YAAaA,EACbxT,eAAgBA,EAAetjD,SAE9BA,GAIP,KE6EeL,I,SAAAA,iBAAkB6C,aAhIjC,SAA6B5C,GAAc,IAAZC,EAACD,EAADC,EACvB2X,EAD+B5X,EAALyD,MACf2K,OAAO+8D,SAClBznB,EAAiB,OAEjBnzC,EAAYtQ,EAAE,8BACdw+B,EAAuBp+B,eAACkrE,GAAa,IAC3C5nE,EAAiCC,YAAS6wC,GAAiB,CACzD3oC,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAgCC,YAAYygC,IAApC62B,EAAiDp3D,YAAAH,EAAA,GAA9B,GAE3B,GAAIhS,EAAS,OACX5B,eAACorE,GAAa,CAACzT,gBAAiBtU,EAAgBjlB,qBAAsBA,EAAqBr+B,SACzFC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,mCAKZ,GAAIiC,EAAO,OACT7B,eAACorE,GAAa,CAACzT,gBAAiBtU,EAAgBjlB,qBAAsBA,EAAqBr+B,SACzFC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,kCAKZtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM6d,EAAY7d,EACZmS,EAAgBnS,EAAK8/C,aAErBuV,EAAmBz4C,GAAsBzK,EAAc7G,WACvDyqD,EAAiBn5C,GAAsBzK,EAAc5G,SAGvDwU,EAAY,KACZC,EAAU,KASd,OARI7N,EAAc4N,YAChBA,EAAY,IAAI3e,KAAK+Q,EAAc4N,YAEjC5N,EAAc6N,UAChBA,EAAU,IAAI5e,KAAK+Q,EAAc6N,UAKjC9hB,eAACorE,GAAa,CACZ/nB,eAAgBA,EAChBwT,aAAa,EACbz4B,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACLC,cAAe,CACb/G,cAAe+G,EAAc/G,cAC7Bg2C,kBAAmBjvC,EAAcivC,kBACjC/1C,yBAA0B8G,EAAc9G,yBAAyBoK,GACjEy9B,kBAAmB/gC,EAAc+gC,kBAAkBz9B,GACnDsK,UAAWA,EACXC,QAASA,EACT1U,UAAW+pD,EACX9pD,QAASwqD,GAEX1jD,iBAAkBygC,GAClBxgC,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ,IAIIyN,EAJAohC,EAAoB7uC,EAAO6uC,kBACF,aAAzB7uC,EAAOnH,gBACTg2C,EAAoB,GAIlBphC,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGrBqpD,EAAoB,CAAE1/D,UAAW,CAC/B8I,MAAO,CACLgD,GAAIA,EACJrK,cAAemH,EAAOnH,cACtBg2C,kBAAmBA,EACnB/1C,yBAA0BkH,EAAOlH,yBACjC6nC,kBAAmB3gC,EAAO2gC,kBAC1BnzB,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,EACT1U,UAAWmR,GAAmBlK,EAAOjH,WACrCC,QAASkR,GAAmBlK,EAAOhH,WAEpCqH,eAAgB,CACf,CAACC,MAAOw/B,GAAkB1oC,UAAW7D,SAExCgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,sCAAwC,CACrDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc6M,EAAa7S,EAAb6S,cAAeD,EAAe5S,EAAf4S,gBAAiB3M,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQmO,EAAOxV,EAAPwV,QAAO,OACvExiB,eAAC4qE,GAAiB,CAChBjrD,UAAWA,EACX3M,aAAcA,EACd6M,cAAeA,EACfD,gBAAiBA,EACjB3M,OAAQA,EACRoB,OAAQA,EACRmO,QAASA,EACTnc,UApHM,oBAqHN,OAMd,KChJaglE,GAAuC/xE,YAAGC,QAAAC,YAAA,+5DAwG1C8xE,GAAkChyE,YAAGI,QAAAF,YAAA,uKASrC+xE,GAAkCjyE,YAAGK,QAAAH,YAAA,gNC+BjCkG,iBAAkB6C,aAnIL,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAY+f,GAAFhgB,EAAP0D,QAAkB1D,EAATggB,WAAW3M,EAAYrT,EAAZqT,aAAc6M,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiB3M,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAiBhO,GAAF1G,EAAP6iB,QAAkB7iB,EAAT0G,WAAS,OACpI/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,SACLlG,UAAY+S,EAAOvK,OAAU,0BAA4B,eACzD6K,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,KAATiN,gBACtB7M,eAAA,UAAQmC,MAAM,YAAWpC,SAAaH,EAAE,sBAATiN,gBAC/B7M,eAAA,UAAQmC,MAAM,OAAMpC,SAAaH,EAAE,mCAATiN,mBAE5B7M,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,0BAG3DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,cACLlG,UAAY+S,EAAOpK,YAAe,0BAA4B,eAC9D0K,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,6BAIlEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,UACLlG,UAAY+S,EAAO6R,QAAW,0BAA4B,eAC1DvR,aAAa,MAAKxT,SAAA,CACvBzH,QAAQC,IAAI,gDACZD,QAAQC,IAAIonB,GACb3f,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU8e,SAASr1B,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACnCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,OAG/D7M,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,WACLlG,UAAY+S,EAAOyxC,SAAY,0BAA4B,eAC3DnxC,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAU8e,SAASr1B,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACnCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,OAG/D7M,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,6BAI/DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,2BACLlG,UAAY+S,EAAO9F,yBAA4B,0BAA4B,eAC3EoG,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,sBAATiN,gBACrB8S,EAAU2xB,0BAA0BloC,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OACpDjJ,gBAAA,UAAQ6B,MAAOoH,EAAKgO,GAAGxX,SAAA,CAAawJ,EAAKvB,qBAAqB5B,KAAK,MAAImD,EAAKnD,OAA/CyG,eAA6D,OAG9F7M,eAACwT,KAAY,CAACpN,KAAK,2BAA2BqN,UAAU,OAAOvT,UAAU,0BAG7EF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,oBACLlG,UAAY+S,EAAO+hC,kBAAqB,0BAA4B,eACpEzhC,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,sBAATiN,gBACrB8S,EAAUg1B,mBAAmBvrC,MAAMkD,KAAI,SAAA0d,GAAA,IAAGzgB,EAAIygB,EAAJzgB,KAAI,OAC7CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,OAG3D7M,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,6BAIxEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACxCC,eAACm2D,GAAY,CACXj2D,UAAY+S,EAAO7F,UAAa,0BAA4B,eAC5DwO,SAAUvH,EAAOjH,UACjB0O,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,EAChDi2C,WAAW,IAEb71D,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACtCC,eAACm2D,GAAY,CACXj2D,UAAY+S,EAAO5F,QAAW,0BAA4B,eAC1DuO,SAAUvH,EAAOhH,QACjByO,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,EAC9Ci2C,WAAW,IAEb71D,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,gCAKhEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACVC,eAAC2E,KAAM,CACPG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAEHI,eAACsgB,GAAgB,CAACja,UAAWA,SAExB,KCxIb,IAIe3G,iBAAkB6C,aAJP,SAAH5C,GAAOA,EAADC,EAAUD,EAAP42D,QAAO,OACrCv2D,eAAC6G,GAAU,CAACR,UAAW,oBAAsB,KC6BhC3G,qBAAkB6C,aAvBjC,SAA8B5C,GAAyE,IAAtEC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQm+C,EAAAv+C,EAAEy+B,4BAAoB,IAAA8f,EAAC,GAAEA,EAAAwY,EAAA/2D,EAAE6G,gBAAQ,IAAAkwD,EAAC,GAAEA,EAChG,OACE12D,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,kBAAmB4G,SAAUA,EAASzG,SAC1DO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAACwrE,GAAiB,IACjBptC,OAGLp+B,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KCuBeL,qBAAkB6C,aA1CjC,SAAoC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACxC4J,EAAiB7J,EAAM2K,OAAO+8D,SAC9BW,EAAYroE,EAAM2K,OAAOhB,KAC/B6G,EAAiCC,YAAYy3D,GAAiC,CAC5Et6C,YAAa,WAAQ3tB,EAAQnB,KAAK,oBAAqB,IADlDwpE,EAEL33D,YAAAH,EAAA,GAF2B,GAGvBs5C,EAAa,CACjBtL,aAAc30C,EACdF,KAAM0+D,GAGR,OACEzrE,eAAA,UAAQE,UAAU,qCAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,iDACduZ,eAAgBnZ,eAAA,QAChBoZ,WAAYxZ,EAAE,6CACdgb,eAAgB8wD,EAChBpyD,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLqtC,aAAc30C,EACdF,KAAM0+D,IAGV/2D,eAAgB,CACd,CAAEC,MAAO02D,GAAsC5/D,UAAWyhD,GAC1D,CAAEv4C,MAAOw/B,GAAkB1oC,UAAW7D,SAIhD,EAAE7H,SACAO,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,YAAY,IAAE,IAAI,IAAExG,EAAE,qDAGhF,KCsIeF,I,kBAAAA,iBAAkB6C,aApKjC,SAA0B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAC1Bw8D,GADwCjgE,EAAP0D,SACpB,GACX4J,EAAiB7J,EAAM2K,OAAO+8D,SAC9BW,EAAYroE,EAAM2K,OAAOhB,KAGzBmgD,EAAa,CACjBtL,aAAc30C,EACdF,KAAM0+D,GAGRnoE,EAAsEC,YAAS8nE,GAAsC,CACnH5/D,UAAWyhD,IADIv8B,EAAYrtB,EAArB1B,QAA8BgvB,EAAUttB,EAAjBzB,MAAyByuD,EAAShtD,EAAfxB,KAGlD8R,EAAwCC,YAAY03D,IAA5CI,EAA4E53D,YAAAH,EAAA,GAAjD,GAEnC,GAAI+c,EAAc,OAChB3wB,eAAC4rE,GAAqB,CAAA7rE,SACpBC,eAAA,KAAAD,SAAIH,EAAE,iCAIV,GAAIgxB,EAEF,OADAt4B,QAAQC,IAAIq4B,GAEV5wB,eAAC4rE,GAAqB,CAAA7rE,SACpBC,eAAA,KAAAD,SAAIH,EAAE,gCAKZtH,QAAQC,IAAI,aACZD,QAAQC,IAAI+3D,GAEZ,IAUIz4C,EAVE+pC,EAAe0O,EAAU1O,aACzBgI,ECzDD,SAAsBjqD,GAAuD,IAArDC,EAACD,EAADC,EAAGoe,EAAQre,EAARqe,SAAUo5C,EAAYz3D,EAAZy3D,aAAc8S,EAAKvqE,EAALuqE,MAAO98D,EAASzN,EAATyN,UAAWL,EAAIpN,EAAJoN,KAC1E,OAAOnN,EAAE,iBAAmB,KACrBoe,EAAW,KAAOo5C,EAAe,OACjC8S,EAAQ,MACRv+D,KAAOoB,GAAMnB,OAAO,MAAQ,IAAMD,KAAOyB,GAAWxB,OAAO,KACpE,CDoDmBigE,CAAc,CAC7BjsE,EAAGA,EACHoe,SAAU4jC,EAAaz0C,yBAAyBnF,qBAAqB5B,KACrEgxD,aAAcxV,EAAaz0C,yBAAyB/G,KACpD8jE,MAAOtoB,EAAa5M,kBAAkB5uC,KACtCgH,UAAWsR,GAAsBkjC,EAAax0C,WAC9CL,KAAM0+D,IAIJx3D,EAAgB,CAAC,EAwCrB,OAvCIq8C,EAAUwP,uBAAuB12D,MAAMjK,QACzCygE,GAAa,EAEb/nD,EAAcy4C,EAAUwP,uBAAuB12D,MAAM,GAAGG,KAExD0K,EAAcvL,OAASmP,EAAYnP,OACnCuL,EAAcpL,YAAcgP,EAAYhP,YACpCgP,EAAYiN,UACd7Q,EAAc6Q,QAAUjN,EAAYiN,QAAQvN,IAE1CM,EAAY6sC,WACdzwC,EAAcywC,SAAW7sC,EAAY6sC,SAASntC,IAE5CM,EAAY1K,2BACd8G,EAAc9G,yBAA2B0K,EAAY1K,yBAAyBoK,IAE5EM,EAAYm9B,oBACd/gC,EAAc+gC,kBAAoBn9B,EAAYm9B,kBAAkBz9B,IAE9DM,EAAYzK,YACd6G,EAAc7G,UAAYsR,GAAsB7G,EAAYzK,YAE1DyK,EAAYxK,UACd4G,EAAc5G,QAAUqR,GAAsB7G,EAAYxK,YAI5D/U,QAAQC,IAAI,0BACZ0b,EAAcvL,OAAS,GACvBuL,EAAcpL,YAAc,GAC5BoL,EAAc6Q,QAAU,GACxB7Q,EAAcywC,SAAW,GACzBzwC,EAAc9G,yBAA2B,GACzC8G,EAAc+gC,kBAAoB,GAClC/gC,EAAc7G,UAAY,GAC1B6G,EAAc5G,QAAU,IAKxBrN,eAAC4rE,GAAqB,CAACplE,SAAUojD,EAAUxrB,qBAAuBwhC,EAAc5/D,eAAC8rE,GAA4B,IAAK,GAAG/rE,SACnHO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,oBAEjBI,eAACgU,KAAM,CACLC,cAAeA,EAEfG,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cAEjBhc,QAAQC,IAAI,iBACZD,QAAQC,IAAI8b,GAEZ,IAAIjH,OAAYhO,EACZiO,OAAUjO,EACViV,EAAOjH,YACTA,EAAYmR,GAAmBlK,EAAOjH,YAGpCiH,EAAOhH,UACTA,EAAUkR,GAAmBlK,EAAOhH,UAItCs+D,EAA4B,CAAElgE,UAAW,CACvC8I,MAAO,CACLqtC,aAAc30C,EACdF,KAAM0+D,EACN/iE,OAAQ2L,EAAO3L,OACfG,YAAawL,EAAOxL,YACpBic,QAASzQ,EAAOyQ,QAChB4/B,SAAUrwC,EAAOqwC,SACjBv3C,yBAA0BkH,EAAOlH,yBACjC6nC,kBAAmB3gC,EAAO2gC,kBAC1B5nC,UAAWA,EACXC,QAASA,IAEVqH,eAAgB,CACf,CAACC,MAAO02D,GAAsC5/D,UAAWyhD,GACzD,CAACv4C,MAAOw/B,GAAkB1oC,UAAW7D,SAExCgN,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,iDAAmD,CAChEmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAClB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDvJ,QAAQC,IAAI,uCAAwCsJ,EAAMk+D,eAC1DzrD,GAAc,EAChB,GACF,EACDvU,SAEA,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC+rE,GAAqB,CACpBpsD,UAAW2wC,EACXt9C,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UApJM,mBAoJetG,SAEpBzH,QAAQC,IAAI0a,IACS,QAMpC,KEvLa+4D,GAAoC1yE,YAAGC,QAAAC,YAAA,k7BAiDvCyyE,GAA2C3yE,YAAGI,QAAAF,YAAA,+kBAiC9C8gB,GAAyBhhB,YAAGK,QAAAH,YAAA,iXAoB5B0yE,GAA6B5yE,YAAGO,QAAAL,YAAA,0LAWhC2yE,GAAgC7yE,YAAGQ,QAAAN,YAAA,2LAWnC4yE,GAAgC9yE,YAAGU,QAAAR,YAAA,2JC0EjCkG,qBAAkB6C,aA7KjC,SAA+B5C,GAAwB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAE7B0X,GAF2Cnb,EAAP0D,QACtBI,qBAAWxC,IACA6Z,YAEzB+vD,EAAUznE,EAAM2K,OAAO+8D,SACvBznB,EAAiB,YACjBnzC,EAAYtQ,EAAE,mCACd6W,EAAYzW,eAAC0N,GAAoB,CAACzD,WAAW,MAAMC,SAAS,sBAAqBnK,SACrFC,eAAC0E,IAAI,CAACtC,GAAE,kCAAA0M,OAAoC+7D,EAAO,QAAQ9qE,SACzDO,gBAACqE,KAAM,CAACG,MAAM,eAAc/E,SAAA,CAC5BC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,gBAAgB,IAAExG,EAAE,sBAIzCw+B,EAAuB99B,gBAACqE,KAAOsB,KAAI,CAAAlG,SAAA,CACvCC,eAACkrE,GAAa,IACbz0D,KAEHnT,EAA4CC,YAASyoE,GAAmC,CACtFvgE,UAAW,CAACm2C,aAAcipB,KADpBjpE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAG9BuC,EAAsCC,YAAYu4D,IAA1ChS,EAAwErmD,YAAAH,EAAA,GAA/C,GAKjC,OAAIhS,EACF5B,eAACorE,GAAa,CACZ/nB,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKhCa,EACF7B,eAACorE,GAAa,CACZ/nB,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,iDAMPkC,EAAKw4D,qBAAqBlxD,MAAMjK,OAanCa,eAACorE,GAAa,CACd/nB,eAAgBA,EAChBwT,aAAa,EACbz4B,qBAAsBA,EAAqBr+B,SAEzCC,eAACiO,GAAW,CACViC,UAAWA,EACXR,SAAU5N,EAAKw4D,qBAAqB5qD,SACpCY,aAAa,EACbT,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO3P,EAAKw4D,qBAAqB5qD,SAASgC,WAE5CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgByoD,qBAAqBlxD,MAChDsG,EAAWmC,EAAgByoD,qBAAqB5qD,SAEtD,OAAOoC,EAAS3S,OACZ,CAGE2C,KAAM,CACJw4D,qBAAsB,CACpBvoD,WAAYH,EAAe0oD,qBAAqBvoD,WAChD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe0oD,qBAAqBlxD,OAAK4I,aAAKF,IAC1DpC,cAINkC,CACJ,GAEJ,EAAE7R,SAEFC,eAAA,OAAAD,SACEO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,uBACpBI,eAACiS,KAAMC,UAAS,SAGpBlS,eAACiS,KAAM9K,KAAI,CAAApH,SACR+B,EAAKw4D,qBAAqBlxD,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC1CjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACPzH,QAAQC,IAAIgR,GACbvJ,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,IADjBjO,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKuY,QAAWnW,KAAOpC,EAAKuY,SAASlW,OAAOkP,GAAc,IAD9CjO,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKub,QAAQC,WAEhB/kB,eAACiS,KAAMxM,IAAG,CAAA1F,SACNwJ,EAAKm7C,SAAWn7C,EAAKm7C,SAAS3/B,SAAW,KAE7CzkB,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC0E,IAAI,CAACtC,GAAE,kCAAA0M,OAAoC+7D,EAAO,UAAA/7D,OAASvF,EAAKgO,IAAKxX,SACpEC,eAAC2E,KAAM,CAACzE,UAAU,SACV4E,MAAM,YAAW/E,SAEtBH,EAAE,oBAGPI,eAAA,UAAQE,UAAU,2BACdqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,gDACduZ,eAAgB7Y,gBAAC2F,KAAI,CAAAlG,SAAA,CACjBO,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CAAEH,EAAE,iBAAiB,KAAG+L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,MAChExa,gBAAC2F,KAAK5B,KAAI,CAAAtE,SAAA,CAAEwJ,EAAKub,QAAQC,SAAS,OACjCxb,EAAKm7C,SAAY1kD,eAACiG,KAAK5B,KAAI,CAAAtE,SAAEwJ,EAAKm7C,SAAS3/B,WAAwB,MAExE3L,WAAYxZ,EAAE,qCACdgb,eAAgBw/C,EAChB9gD,kBAAmB,CAAE7N,UAAW,CAC9B8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAEV7C,eAAgB,CACjB,CAACC,MAAOq3D,GAAmCvgE,UAAW,CAAEm2C,aAAcipB,OAE1E,EAAE9qE,SAENC,eAAA,QAAME,UAAU,WAAUH,SACxBC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBAhCUyG,kBAdzBA,eAkDJ,eA9GxB7M,eAACorE,GAAa,CACZ/nB,eAAgBA,EAChBnzC,UAAWA,EACXkuB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,6CAgHd,KClMaysE,GAAiC75D,OAAaC,MAAM,CAC/DqS,QAAStS,OACNG,SAAS/S,YAAE,uBACd8kD,SAAUlyC,OACVqP,UAAWrP,OACRG,SAAS/S,YAAE,yBCsFDF,iBAAkB6C,aA5EC,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAmBoT,GAATrT,EAAP0D,QAAc1D,EAALyD,MAAmBzD,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQsL,EAAShgB,EAATggB,UAAWtZ,EAAS1G,EAAT0G,UAAWuZ,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAa,OACxIvf,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOyN,QACjBhG,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,UAAW9S,EAAK,EAClDiP,OAAQ,kBAAM4D,EAAgB,WAAW,EAAK,IAEhD5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,6BAI9DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,UACLlG,UAAY+S,EAAO6R,QAAW,0BAA4B,eAC1DvR,aAAa,MAAKxT,SAAA,CACvBzH,QAAQC,IAAI,8CACZD,QAAQC,IAAIonB,GACb3f,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,0BAATiN,gBACrB8S,EAAU8e,SAASr1B,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACnCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,OAG/D7M,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,WACLlG,UAAY+S,EAAOyxC,SAAY,0BAA4B,eAC3DnxC,aAAa,MAAKxT,SAAA,CACxBC,eAAA,UAAQmC,MAAM,IAAQ0K,gBACrB8S,EAAU8e,SAASr1B,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACnCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,OAG/D7M,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,gCAKjEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAOuD,KAAK,SAAQtI,SAC7BH,EAAE,2BAIR,KCjFIF,iBAAkB6C,aAJC,SAAH5C,GAAOA,EAADC,EAAN,IAASirE,EAAOlrE,EAAPkrE,QAAO,OAC7C7qE,eAAC6G,GAAU,CAACR,UAAW,kCAAoCwkE,GAAW,KCiHzDnrE,qBAAkB6C,aAvGjC,SAAiC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAC/BwnE,EAD6ClrE,EAALyD,MACxB2K,OAAO+8D,SACvBzkE,EAAS,kCAAAyI,OAAqC+7D,GAC9C36D,EAAYtQ,EAAE,uCACdyjD,EAAiB,YACjBjlB,EAAuBp+B,eAACssE,GAAyB,CAACzB,QAASA,IAEjEvnE,EAA+BC,YAAS+W,IAAjC1Y,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACvB8R,EAAkCC,YAAYq4D,IAAvCK,EAAkEx4D,YAAAH,EAAA,GAA3C,GAE9B,GAAIhS,EAAS,OACX5B,eAACorE,GAAa,CACZl7D,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,mCAKZ,GAAIiC,EAAO,OACT7B,eAACorE,GAAa,CACZl7D,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,kCAKZtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM6d,EAAY7d,EAElB,OACE9B,eAACorE,GAAa,CACZl7D,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAW,IAAI3e,KACf4hB,QAAS,GACT4/B,SAAU,IAEZvwC,iBAAkBk4D,GAClBj4D,SAAU,SAACC,EAAM9H,GAAyB,IAElCuV,EAFaxN,EAAa/H,EAAb+H,cAIfwN,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGnByqD,EAAwB,CAAE9gE,UAAW,CACnC8I,MAAO,CACLqtC,aAAcipB,EACd/lD,QAASzQ,EAAOyQ,QAChB4/B,SAAUrwC,EAAOqwC,SACjB7iC,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,IAEVpN,eAAgB,CACf,CAACC,MAAOq3D,GAAmCvgE,UAAW,CAAEm2C,aAAcipB,OAGzEj2D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,+CAAiD,CAC9DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACwsE,GAAyB,CACxB7sD,UAAWA,EACX3M,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,GACX,KAKZ,KC2Be3G,qBAAkB6C,aAhIjC,SAAkC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACvCkU,EAAKnU,EAAM2K,OAAOwJ,GAClBszD,EAAUznE,EAAM2K,OAAO+8D,SACvBzkE,EAAS,kCAAAyI,OAAqC+7D,GAC9C36D,EAAYtQ,EAAE,wCACdyjD,EAAiB,YACjBjlB,EAAuBp+B,eAACssE,GAAyB,CAACzB,QAASA,IAEjEvnE,EAA+BC,YAAS0oE,GAA0C,CAChFxgE,UAAW,CAAE8L,GAAIA,KADZ3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGvB8R,EAAqCC,YAAYs4D,IAA1CM,EAAwE14D,YAAAH,EAAA,GAA9C,GAEjC,GAAIhS,EAAS,OACX5B,eAACorE,GAAa,CACZl7D,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,mCAKZ,GAAIiC,EAAO,OACT7B,eAACorE,GAAa,CACZl7D,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,kCAKZtH,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GACZ,IAAM6d,EAAY7d,EACZ+V,EAAc/V,EAAK84D,oBAErBC,EAAkB,GAClBhjD,EAAY6sC,WACdmW,EAAmBhjD,EAAY6sC,SAASntC,IAK1C,IAAIsK,EAAY,KACZhK,EAAYgK,YACdA,EAAY,IAAI3e,KAAK2U,EAAYgK,YAGnC,IAAIC,EAAU,KAKd,OAJIjK,EAAYiK,UACdA,EAAU,IAAI5e,KAAK2U,EAAYiK,UAI/B9hB,eAACorE,GAAa,CACZl7D,UAAWA,EACXmzC,eAAgBA,EAChBjlB,qBAAsBA,EAAqBr+B,SAE3CC,eAACgU,KAAM,CACLC,cAAe,CACb4N,UAAWA,EACXC,QAASA,EACTgD,QAASjN,EAAYiN,QAAQvN,GAC7BmtC,SAAUmW,GAEZ1mD,iBAAkBk4D,GAClBj4D,SAAU,SAACC,EAAM9H,GAAyB,IAElCuV,EAFaxN,EAAa/H,EAAb+H,cAIfwN,EADEzN,EAAOyN,QACCxD,GAAejK,EAAOyN,SAEtBzN,EAAOyN,QAGnB2qD,EAA2B,CAAEhhE,UAAW,CACtC8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBuN,QAASzQ,EAAOyQ,QAChB4/B,SAAUrwC,EAAOqwC,SACjB7iC,UAAWvD,GAAejK,EAAOwN,WACjCC,QAASA,IAEVpN,eAAgB,CACf,CAACC,MAAOq3D,GAAmCvgE,UAAW,CAAEm2C,aAAcipB,OAGzEj2D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,gDAAkD,CAC/DmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACwsE,GAAyB,CACxB7sD,UAAWA,EACX3M,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAWA,EAAUtG,SAEpBzH,QAAQC,IAAI0a,IACa,KAKtC,KClGM9P,GAAM,IAAID,KA4QDxD,sBA1Qf,SAA+BC,GAAiC,IAA/BC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAClDuD,EAAiCC,YAASyF,IAAlCnH,EAAKyB,EAALzB,MAAOD,EAAO0B,EAAP1B,QAASE,EAAIwB,EAAJxB,KAExB,OAAIF,EAAgB5B,eAAC0D,GAAsB,IACvC7B,EAAc7B,eAAA,KAAAD,SAAIH,EAAE,gCAExBtH,QAAQC,IAAIuJ,GAGVxB,gBAACyD,KAAKC,QAAO,CACXC,YAAa,CACXC,KAAM,IACN1D,IAAK,cACLoD,SAAU,+CAqCVgH,gBAAiB,CACjBF,UAAW,IACXtE,KAAMtE,EAAKyC,KAAKsG,UAAY,IAAM/I,EAAKyC,KAAKuG,SAC5CjC,YAAa,GACbkC,QAAS,CAEP,CAAE1I,KAAM,OAAQF,MAAO,kBAAmBC,GAAI,4BAC9C,CAAE4I,WAAW,GACb,CAAE3I,KAAM,UAAWF,MAAO,WAAYC,GAAI,sBAM9C6C,2BAA4B1C,YAAW2C,MACvCC,YAAa,CAaXC,UACEpF,eAACkB,WAAc,CAAAnB,SACbO,gBAAA,SAAAP,SAAA,CAAO,wBAELO,gBAAA,KACE4D,KAAK,0BACLmB,OAAO,SACPC,IAAI,sBAAqBvF,SAAA,CAExB,IAAI,iBAEF,KAAK,4BACaoD,GAAIoC,cAAc,SAI/CC,IACElF,gBAACY,WAAc,CAAAnB,SAAA,CACbC,eAACI,KAAKqF,IAAG,CAACC,MAAM,IAUhB1F,eAACI,KAAKqF,IAAG,CAACC,MAAM,QAapB3F,SAAA,CAEDA,EACDC,eAACS,KAAc,CACbC,UAAW,IACXC,WAAYC,UAIpB,IC/IelB,I,YAAAA,iBAAkB6C,aAnBjC,SAAwB5C,GAAIA,EAADC,EAAQD,EAALyD,MAAczD,EAAP0D,QAA0C,IAAjCtD,EAAQJ,EAARI,SAAUwG,EAAK5G,EAAL4G,MAAKmwD,EAAA/2D,EAAE6G,gBAAQ,IAAAkwD,EAAC,GAAEA,EAExE,OACE12D,eAAC0sE,GAAsB,CAAA3sE,SACrBC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAOA,EAAOC,SAAUA,IACnCxG,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACbA,YAOlB,KC1Bak6C,GAAqB3gD,YAAGC,QAAAC,YAAA,khBAiCxB8nD,GAAsChoD,YAAGI,QAAAF,YAAA,wnCAiEzCioD,IATmCnoD,YAAGK,QAAAH,YAAA,0KASJF,YAAGO,QAAAL,YAAA,qNClG3C,SAASshE,GAA6B/gB,GAC3C,IAAI9xC,EAAY,CACd8xC,gBAAY36C,GAKd,OAFA6I,EAAU8xC,WAAaA,EAEhB9xC,CACT,CAEO,SAAS8yD,GAAoC9tD,EAAgBF,GAClE,MAAO,CACL60C,aAAc30C,EACdF,KAAMA,EAEV,CAEO,SAASkgC,GAAYwuB,EAAW7Z,EAAcxvB,GACnD,OAAO9xB,gBAAA,QAAAP,SAAA,CACJ6hD,EAAaz0C,yBAAyBnF,qBAAqB5B,KAAK,IAAG,MACnEuF,KAAO8vD,EAAY,IAAO7Z,EAAax0C,WAAWxB,OAAOwmB,GAAgB,IAAG,IAC5EwvB,EAAa95C,sBAAsB1B,KAAK,IAAG,MAEhD,CCIA,SAASg2D,GAAmBz8D,GAA2F,IAAzFC,EAACD,EAADC,EAAGy8D,EAAgB18D,EAAhB08D,iBAAkB9yD,EAAI5J,EAAJ4J,KAAMb,EAAM/I,EAAN+I,OAAQuE,EAActN,EAAdsN,eAAgBwuD,EAAS97D,EAAT87D,UAAWkR,EAAuBhtE,EAAvBgtE,wBAC1FA,GAAwB,GAExBtQ,EAAiB,CACf5wD,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACTyqC,cAAet5C,IAGnBgM,eAAgB,CACd,CAACC,MAAO2sC,GACN71C,UAAWsvD,GAAoC9tD,EAAgBwuD,KAEnEnC,qBAAqB,IACpB1kD,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACTxJ,QAAQC,IAAI,WAAYuJ,GACxB6qE,GAAwB,GACxB93D,KAAMC,QACJlV,EAAE,kDAAmD,CACnDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACR8qE,GAAwB,GACxB93D,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACF,CAuTenC,I,MAAAA,iBAAkB6C,aApTjC,SAA2BuK,GAAyB,IAAtBlN,EAACkN,EAADlN,EAAGwD,EAAK0J,EAAL1J,MAC/BsT,GAD6C5J,EAAPzJ,QACFsT,oBAAS,IAAMC,EAAA7C,YAAA2C,EAAA,GAA5Ck2D,EAAUh2D,EAAA,GAAEi2D,EAAaj2D,EAAA,GAChCsG,EAAwDvG,oBAAS,GAAMwG,EAAApJ,YAAAmJ,EAAA,GAAhE4vD,EAAoB3vD,EAAA,GAAEwvD,EAAuBxvD,EAAA,GACpDE,EAAoC1G,wBAASvX,GAAUke,EAAAvJ,YAAAsJ,EAAA,GAAhD08B,EAAUz8B,EAAA,GAAE86C,EAAa96C,EAAA,GAC1B6xB,EAAa/rC,EAAM2K,OAAOkjC,YAC1BhkC,EAAiB7J,EAAM2K,OAAOgpD,SAC9B0E,EAAYr4D,EAAM2K,OAAOhB,KACzB0nB,EAAchxB,qBAAWxC,IAGzBmxB,EAFaqC,EAAY3Z,WAEK,IADjB2Z,EAAYtpB,iBAG/B7H,EAKIC,YACF+9C,GAAqC,CACnC71C,UAAWsvD,GAAoC9tD,EAAgBwuD,GAC/D5vD,YAAa,iBANNkhE,EAAsBzpE,EAA/B1B,QACOorE,EAAoB1pE,EAA3BzB,MACMorE,EAAmB3pE,EAAzBxB,KAQF8R,EAA6BC,YAAY4tC,IAAjC4a,EAAiEtoD,YAAAH,EAAA,GAAjD,GAExBiuB,EAKOC,aAAcmY,GAAoB,CAAEpuC,YAAa,iBAAiBk2B,EAAAhuB,YAAA8tB,EAAA,GALjEy5B,EAAWv5B,EAAA,GAAAE,EAAAF,EAAA,GACJmrC,EAAiBjrC,EAA5B5wB,UACS87D,EAAoBlrC,EAA7BrgC,QACOwrE,EAAkBnrC,EAAzBpgC,MACM05D,EAAiBt5B,EAAvBngC,KAMJ,GAHAxJ,QAAQC,IAAI,qBACZD,QAAQC,IAAIgjE,GAERwR,EAAwB,OAC1B/sE,eAACqtE,GAAe,CAAAttE,SACbH,EAAE,+BAGP,GAAIotE,EAAsB,OACxBhtE,eAACqtE,GAAe,CAAAttE,SACbH,EAAE,uCAIPtH,QAAQC,IAAI00E,GACZ,IAAIhS,EAAe,GACnBgS,EAAoBnrB,wBAAwB14C,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OAC3D0xD,EAAa/4D,KAAKqH,EAAKub,QAAQvN,GAAG,IAEpCjf,QAAQC,IAAI0iE,GACZ,IAAMrZ,EAAeqrB,EAAoBrrB,aAEnCp7C,EAAWymC,GACfwuB,EACA7Z,EACAxvB,GAGF,OACE9xB,gBAAC+sE,GAAe,CAAC9mE,MAAO3G,EAAE,6BAA8B4G,SAAUA,EAASzG,SAAA,CACzEC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,sBACb0Q,aAAa,EACZZ,SAAUu9D,EAAoBnrB,wBAAwBpyC,SACtDG,WAAY,WACVq9D,EAAkB,CAClBzhE,UAAW,CACTgG,MAAOw7D,EAAoBnrB,wBAAwBpyC,SAASgC,WAE9DC,YAAa,SAACC,EAAcoY,GAA2B,IAAvBnY,EAAemY,EAAfnY,gBACxBC,EAAWD,EAAgBiwC,wBAAwB14C,MACnDsG,EAAWmC,EAAgBiwC,wBAAwBpyC,SAEzD,OAAOoC,EAAS3S,OACZ,CAGE8tE,oBAAqB,CACnBnrB,wBAAyB,CACvB/vC,WAAYH,EAAekwC,wBAAwB/vC,WACnD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAekwC,wBAAwB14C,OAAK4I,aAAKF,IAC7DpC,cAINkC,CACN,GAEd,EAAE7R,SACEktE,EAAoBnrB,wBAAwB14C,MAAMjK,OAEpDa,eAACc,KAAM,CAACC,OAAQ+rE,EAAsB9rE,QAAQ,EAAKjB,SACnDO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,4BACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRktE,EAAoBnrB,wBAAwB14C,MAAMkD,KAAI,SAAA2d,GAAA,IAAG1gB,EAAI0gB,EAAJ1gB,KAAI,OAC1DjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKub,QAAQC,SAAS,IAAC/kB,eAAA,SACvBuJ,EAAKq8C,kBACJtlD,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC1BwJ,EAAKq8C,iBAAiB/hB,sBAAsBz9B,KAAK,IAAG,OAGxDmD,EAAKq8C,kBACLr8C,EAAKq8C,iBAAiB/hB,sBAAsB8D,WAC5C3nC,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,gDAG7BI,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC+hD,GAAkB,CAACr5C,OAAQa,EAAKy4C,kBAEnC1hD,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CAIRC,eAAC6sB,KAAQ,CAEP3sB,UAAU,aACVoE,KAAK,SACLwoB,QAAM,EACNhoB,MAAM,YACNioB,eAAgBntB,EAAE,kBAClBqC,MAAO,CACLjC,eAAC0N,GAAoB,CAAYzD,WAAW,SAASC,SAAS,yBAAwBnK,SACpFC,eAAC6sB,KAASxoB,KAAI,CAEZhC,KAAK,QACLoO,QAAS,WACP2rD,GAAoB,CAClBx8D,EAAGA,EACHy8D,iBAAkBA,EAClB9yD,KAAMA,EACNb,OAAQ,YACRuE,eAAgBA,EAChBwuD,UAAWA,EACXkR,wBAAyBA,GAE7B,EAAE5sE,SACCH,EAAE,+DAbAiN,iBAFkBA,gBAkB3B7M,eAAC0N,GAAoB,CAAYzD,WAAW,SAASC,SAAS,yBAAwBnK,SACpFC,eAAC6sB,KAASxoB,KAAI,CAEZhC,KAAK,WACLoO,QAAS,WACP2rD,GAAoB,CAClBx8D,EAAGA,EACHy8D,iBAAkBA,EAClB9yD,KAAMA,EACNb,OAAQ,SACRuE,eAAgBA,EAChBwuD,UAAWA,EACXkR,wBAAyBA,GAE7B,EAAE5sE,SACCH,EAAE,4DAbAiN,iBAFkBA,gBAkB3B7M,eAAC0N,GAAoB,CAAYzD,WAAW,SAASC,SAAS,yBAAwBnK,SACpFC,eAAC6sB,KAASxoB,KAAI,CAEZhC,KAAK,IACLoO,QAAS,WACP2rD,GAAoB,CAClBx8D,EAAGA,EACHy8D,iBAAkBA,EAClB9yD,KAAMA,EACNb,OAAQ,YACRuE,eAAgBA,EAChBwuD,UAAWA,EACXkR,wBAAyBA,GAE7B,EAAE5sE,SACCH,EAAE,+DAbAiN,iBAFkBA,kBA3CxBA,gBA+DkB,WAAvBtD,EAAKy4C,cACLhiD,eAAC0N,GAAoB,CAAYzD,WAAW,SAASC,SAAS,yBAAwBnK,SACpFC,eAAC2E,KAAM,CAELzE,UAAU,aACV4E,MAAM,UACND,KAAK,GACL4L,QAAS,WACP2rD,GAAoB,CAClBx8D,EAAGA,EACHy8D,iBAAkBA,EAClB9yD,KAAMA,EACNb,OAAQ,YACRuE,eAAgBA,EAChBwuD,UAAWA,EACXkR,wBAAyBA,GAE7B,EAAE5sE,SACCH,EAAE,oBAfAiN,iBAFkBA,gBAmBA,QAxGjBA,eA0GJ,WAtHlB7M,eAACkH,KAAKC,KAAI,CAAApH,SAAEH,EAAE,oDA6HpBI,eAAA,MAAAD,SAAKH,EAAE,2CACPI,eAAC04C,GAAW,CACVG,gBAAiBkB,EACjBpxB,YAAa/oB,EAAE,UACfkc,SAAU,SAAC3Z,GACT7J,QAAQC,IAAI4J,GACZ9D,aAAaC,QAAQC,EAAKf,2BAA4B2E,GAClDA,GAGF0qE,GAAc,GACdzU,EAAcj2D,GACdm5D,EAAY,CAAE7vD,UAAWqvD,GAA6B34D,OAEtD0qE,GAAc,GACdzU,OAAch5D,GAElB,IACA,IAACY,eAAA,SAED4sE,GAAerR,IAAwB4R,IAA2BC,EAClEptE,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0BACd8P,SAAU6rD,EAAkB98B,SAAS/uB,SACrCY,aAAa,EACbT,WAAY,WACVq9D,EAAkB,CAChBzhE,UAAW,CACXgG,MAAO8pD,EAAkB98B,SAAS/uB,SAASgC,WAE7CC,YAAa,SAACC,EAAcsY,GAA2B,IAAvBrY,EAAeqY,EAAfrY,gBACxBC,EAAWD,EAAgB4sB,SAASr1B,MACpCsG,EAAWmC,EAAgB4sB,SAAS/uB,SAE1C,OAAOoC,EAAS3S,OACZ,CAGEo8D,kBAAmB,CACjB98B,SAAU,CACR1sB,WAAYH,EAAe6sB,SAAS1sB,WACpC3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe6sB,SAASr1B,OAAK4I,aAAKF,IAC9CpC,cAINkC,CACN,GAEJ,EAAE7R,SACNw7D,EAAkB98B,SAASr1B,MAAMjK,OAEnCmB,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRw7D,EAAkB98B,SAASr1B,MAAMkD,KAAI,SAAA8d,GAAA,IAAG7gB,EAAI6gB,EAAJ7gB,KAAI,OAC3CjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKwb,UADQlY,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK0hB,OADQpe,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACNk7D,EAAaO,SAASjyD,EAAKgO,IAC3BvX,eAAA,QAAME,UAAU,aAAYH,SAAEH,EAAE,yEAChCI,eAAC0E,IAAI,CAACtC,GAAI,qBAAuB+sC,EAAa,IAAMliC,EAAiB,IAAMwuD,EAAY,IAAMlyD,EAAKgO,GAAGxX,SACnGO,gBAACqE,KAAM,CAACG,MAAM,uBAAsB/E,SAAA,CACjCH,EAAE,mBAAmB,IAACI,eAACmG,KAAI,CAACC,KAAK,wBAL1ByG,kBAPFA,eAiBJ,SA5BlB7M,eAACkH,KAAKC,KAAI,CAAApH,SAAEH,EAAE,6DAkChB,KAIV,KC3Wa09D,GAA4BhkE,YAAGC,QAAAC,YAAA,mgDA4EGF,YAAGI,QAAAF,YAAA,oNCgCnCkG,I,GAAAA,iBAAkB6C,aAzFjC,SAAkC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAChCqxB,GAD8C90B,EAAP0D,QACzBI,qBAAWxC,KAGzBmxB,EAFaqC,EAAY3Z,WAEK,IADjB2Z,EAAYtpB,iBAGzBkzC,EAAaj7C,EAAM2K,OAAOswC,WAC1B2c,EAAmB53D,EAAM2K,OAAOgpD,SAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAC1BoiC,EAAa/rC,EAAM2K,OAAOkjC,YAChC3tC,EAAsEC,YACpE+5D,GAA2B,CACzB7xD,UAAW,CACTqZ,QAASu5B,EACTuD,aAAcoZ,EACdjuD,KAAMsuD,EACNqD,SAAU,YANC/tC,EAAYrtB,EAArB1B,QAA8BgvB,EAAUttB,EAAjBzB,MAAyByuD,EAAShtD,EAAfxB,KAgBlD,GAJAzD,aAAaO,WAAWL,EAAKf,4BAIzBmzB,EAAc,OAAO3wB,eAAA,KAAAD,SAAIH,EAAE,+BAE/B,GAAIgxB,EAEF,OADAt4B,QAAQC,IAAIq4B,GACL5wB,eAAA,KAAAD,SAAIH,EAAE,8BAGftH,QAAQC,IAAI+3D,GACZ,IAAMxrC,EAAUwrC,EAAUqO,4BAA4B75C,QAChDniB,EAAc2tD,EAAUqO,4BAA4Bh8D,YACpDD,EAAgB4tD,EAAUqO,4BAA4Bj8D,cACtDk8D,EAAStO,EAAUqO,4BAA4BE,mBAC/Cjd,EAAe0O,EAAUqO,4BAA4B/c,aAC3DtpD,QAAQC,IAAIqmE,GAEZ,IAAMp4D,EAAWymC,GACfouB,EACAzZ,EACAxvB,GAGF,OACEpyB,eAACqtE,GAAe,CAAC9mE,MAAO3G,EAAE,6BAA8B4G,SAAUA,EAASzG,SACzEC,eAACI,KAAKC,IAAG,CAAAN,SACLO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACfO,gBAAA,MAAAP,SAAA,CAAKH,EAAE,2BAA2B,IAAEklB,EAAQC,YAC5C/kB,eAAA,OAAKE,UAAU,OAAMH,SACrBO,gBAACF,KAAKC,IAAG,CAAC+L,OAAK,EAACC,MAAI,EAAAtM,SAAA,CAClBC,eAAC++D,GAA8B,CAC7Br8D,cAAeA,EACf+6D,SAAS,cACTtuB,WAAYA,IAEdnvC,eAACg/D,GAA4B,CAC3Br8D,YAAaA,EACb86D,SAAS,cACTtuB,WAAYA,IAEZyvB,GACCA,EAAOK,4BACNj/D,eAACk/D,GAA4B,CAC3BZ,YAAaM,EAAOK,4BACpBxB,SAAS,cACTtuB,WAAYA,IAEd,GACFyvB,GACCA,EAAOO,2BACNn/D,eAACq/D,GAA2B,CAC1BZ,WAAYG,EAAOO,2BACnB1B,SAAS,cACTtuB,WAAYA,IAEd,cAOlB,KC1Gam+B,GAAmCh0E,YAAGC,QAAAC,YAAA,siBCuEpCkG,I,GAAAA,iBAAkB6C,aA1DjC,SAAkB5C,GAAyB,IAAtBC,EAACD,EAADC,EACnB0D,GAD2B3D,EAALyD,MAAczD,EAAP0D,QACIE,YAAS+pE,KAAlC1rE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAExB,OAAIF,EACF5B,eAACqtE,GAAe,CAAAttE,SACbH,EAAE,+BAGHiC,EACF7B,eAACqtE,GAAe,CAAAttE,SACbH,EAAE,yCAMLU,gBAAC+sE,GAAe,CAAC9mE,MAAO3G,EAAE,0BAA0BG,SAAA,CAClDC,eAAA,MAAAD,SAAKH,EAAE,yCACLI,eAACiG,KAAKmN,MAAK,CAAArT,SAEP+B,EAAK0sC,sBAAsBplC,MAAMkD,KAAI,SAAAC,GAAA,IAAEhD,EAAIgD,EAAJhD,KAAI,OACzCvJ,eAACiG,KAAK+3C,UAAS,CAACuvB,QAAM,EAAAxtE,SACpBC,eAAC0E,IAAI,CAACtC,GAAI,yBAA2BmH,EAAKgO,GAAGxX,SAC3CO,gBAAA,OAAAP,SAAA,CACEC,eAAA,QAAME,UAAU,aAAYH,SAACC,eAACmG,KAAI,CAACC,KAAK,oBACxCpG,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAEmD,EAAKnD,WAGhB,QA2B/B,KCpEaonE,GAA6Bl0E,YAAGC,QAAAC,YAAA,suCC2H9BkG,I,MAAAA,iBAAkB6C,aA1GjC,SAAwB5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACtB+rC,GADoCxvC,EAAP0D,QAChBD,EAAM2K,OAAOkjC,aAE1B/lC,EADczH,qBAAWxC,IACAkK,iBACzBsiE,EAAQ9hE,OAASC,OAAO,cAE9BtI,EAAiCC,YAASiqE,GAA4B,CACpE/hE,UAAW,CACTvD,SAAUulE,EACVtlE,UAAWslE,EACXzlE,qBAAsBmnC,KAJlBvtC,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAQxB,GAAIF,EAAS,OACX5B,eAACqtE,GAAe,CAAAttE,SACbH,EAAE,+BAGP,GAAIiC,EAAO,OACT7B,eAACqtE,GAAe,CAAAttE,SACbH,EAAE,uCAIPtH,QAAQC,IAAIuJ,GACZ,IAAM0E,EAAW1E,EAAKkG,qBAAqB5B,KAE3C,OACEpG,eAACqtE,GAAe,CAAC9mE,MAAO3G,EAAE,6BAA8B4G,SAAUA,EAASzG,SACzEC,eAACkH,KAAI,CAAAnH,SACLO,gBAAC2R,KAAK,CAAAlS,SAAA,CACJC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SACZH,EAAE,kBAENI,eAACiS,KAAMC,UAAS,CAAAnS,SACZH,EAAE,kBAENI,eAACiS,KAAMC,UAAS,CAAAnS,SACZH,EAAE,mBAENI,eAACiS,KAAMC,UAAS,CAAAnS,SACZH,EAAE,6BAIVI,eAACiS,KAAM9K,KAAI,CAAApH,SAEP+B,EAAKqK,gBAAgBG,KAAI,SAAAC,GAAOA,EAAJQ,KAAa,OAAAR,EAAP3J,QACxB0J,KAAI,SAAAQ,GAAA,IACRG,EAAcH,EAAdG,eAEAF,GADaD,EAAbI,cACIJ,EAAJC,MAGA+X,GAFMhY,EAANpE,OACWoE,EAAXjE,YACOiE,EAAPgY,SAIA3X,GAHIL,EAAJzE,KACQyE,EAAR43C,SACK53C,EAAL63C,MACwB73C,EAAxBK,0BACArF,EAAqBgF,EAArBhF,sBAEAsF,GADiBN,EAAjB/E,kBACS+E,EAATM,WACAC,EAAOP,EAAPO,QACaP,EAAboiB,cAAa,OAEX5uB,eADA,CACC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACP4L,KAAOoB,EAAO,IAAMK,GAAWxB,OAAOV,GAAY,IAAE,MACpDS,KAAOoB,EAAO,IAAMM,GAASzB,OAAOV,MAEvClL,eAACiS,KAAMxM,IAAG,CAAA1F,SACNoN,EAAyB/G,OAE7BpG,eAACiS,KAAMxM,IAAG,CAAA1F,SACN+H,EAAsB1B,OAE1BpG,eAACiS,KAAMxM,IAAG,CAAA1F,SAEL+kB,EAAWA,EAAQC,SACpB/kB,eAAA,QAAME,UAAU,WAAUH,SAAEH,EAAE,sCAGlCI,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC0E,IAAI,CAACtC,GAAI,wBAA0B+sC,EAAa,IAAMliC,EAAiB,IAAMF,EAAKhN,SACjFO,gBAACqE,KAAM,CAACG,MAAM,YAAY5E,UAAU,aAAYH,SAAA,CAC7CH,EAAE,qCACHI,eAACmG,KAAI,CAACC,KAAK,2BAIP,GAEf,YAQjB,KCvHasnE,GAA4Bp0E,YAAGC,QAAAC,YAAA,iNAe/Bm0E,GAAwBr0E,YAAGI,QAAAF,YAAA,iLCPzBkG,sBANf,SAAqBC,GAAIA,EAADC,EAA6B,IAA5BkR,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,YAAWA,EAC9C,OACE9Q,eAAC6G,GAAU,CAACR,UAAWA,GAE3B,ICgCe3G,qBAAkB6C,aA3BjC,SAAqB5C,GAAwF,IAArFC,EAACD,EAADC,EAAGG,EAAQJ,EAARI,SAAQ6tE,EAAAjuE,EAAEkuE,sBAAc,IAAAD,EAAC,GAAEA,EAAE19D,EAASvQ,EAATuQ,UAAS49D,EAAAnuE,EAAEouE,mBAAW,IAAAD,EAAC,GAAEA,EAAAh9D,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,YAAWA,EACtG,OACE9Q,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,kBAAmB4G,SAAUqnE,EAAe9tE,SAChEC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAACguE,GAAY,CAAC3nE,UAAWA,QAG7BrG,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACdguE,EACDztE,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEmQ,MAEdnQ,gBAQjB,KC6JeL,qBAAkB6C,aAtLjC,SAAsB5C,GAAyB,IAAtBC,EAACD,EAADC,EACjBiuE,GADyBluE,EAALyD,MAAczD,EAAP0D,QACVzD,EAAE,yBACnBsQ,EAAYtQ,EAAE,8BAEpB0D,EAIIC,YAASmqE,GAA2B,CACtCjiE,UAAW,CACTwiE,QAAS,oBALFC,EAAc5qE,EAAvB1B,QACOusE,EAAY7qE,EAAnBzB,MACMusE,EAAW9qE,EAAjBxB,KAMFyJ,EAIIhI,YAASmqE,GAA2B,CACtCjiE,UAAW,CACTwiE,QAAS,0BALFI,EAAY9iE,EAArB3J,QACO0sE,EAAU/iE,EAAjB1J,MACM0sE,EAAShjE,EAAfzJ,KAOF,GAAKosE,GAAoBG,EACvB,OACEruE,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SACvBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAKmtE,GAAiBG,EACpB,OACEtuE,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SACvBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sCAMX,IAAImtC,EAAU,EACV0hC,EAAQ,EAQZ,OAPIL,EAAYM,eAAetlE,MAAMjK,SACnC4tC,EAAUqhC,EAAYM,eAAetlE,MAAM,GAAGG,KAAKpH,OAEjDosE,EAAUG,eAAetlE,MAAMjK,SACjCsvE,EAAQF,EAAUG,eAAetlE,MAAM,GAAGG,KAAKpH,OAI/CnC,eAACwuE,GAAY,CACXX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAErBO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAA,MAAAP,SAAA,CACGH,EAAE,4CAA4C,IAAC,GAAAkP,OAAIi+B,EAAO,KAAAj+B,OAAI2/D,MAEjEzuE,eAAA,MAAAD,SAAKH,EAAE,0BACNA,EAAE,wCAAwC,IAACI,eAAA,SAAMA,eAAA,SAClDA,eAAA,MAAAD,SAAKH,EAAE,qBAAwB,mPACyMI,eAAA,SAAMA,eAAA,SAAM,uEACxLA,eAAA,KAAAD,SAAG,yBAAwB,0CAAuCC,eAAA,KAAAD,SAAG,oBAAmB,OAAIC,eAAA,KAAAD,SAAG,qCAAoC,0DAAuDC,eAAA,SAAMA,eAAA,SAAM,gNAC7DA,eAAA,SAC7MA,eAAA,SAAM,6BACoBA,eAAA,SAC1BA,eAAA,SAAM,uBACcA,eAAA,SACpBA,eAAA,SAAM,sHAC6GA,eAAA,SACnHA,eAAA,SAAM,0HACiHA,eAAA,SACvHA,eAAA,SAAM,WACEA,eAAA,SACRA,eAAA,SAAM,gjBACuiBA,eAAA,SAC7iBA,eAAA,SAAM,4ZACmZA,eAAA,SAAMA,eAAA,SAC/ZA,eAAA,SAAM,0QACiQA,eAAA,SACvQA,eAAA,SAAM,wRAC+QA,eAAA,SACrRA,eAAA,SAAM,qLAC4KA,eAAA,SAClLA,eAAA,SAAM,uXAC8WA,eAAA,SACpXA,eAAA,SAAM,wVAC+UA,eAAA,SACrVA,eAAA,SAAM,sFAC6EA,eAAA,SACnFA,eAAA,SAAM,kEACyDA,eAAA,SAC/DA,eAAA,SAAM,wmBAC+lBA,eAAA,SACrmBA,eAAA,SAAM,sYAC6XA,eAAA,SACnYA,eAAA,SAAM,0aACiaA,eAAA,SACvaA,eAAA,SAAM,gJACuIA,eAAA,SAC7IA,eAAA,SAAM,mQAC0PA,eAAA,SAChQA,eAAA,SAAM,qkDAC4jDA,eAAA,SAClkDA,eAAA,SAAM,qPAC4OA,eAAA,SAClPA,eAAA,SAAM,+OACsOA,eAAA,SAC5OA,eAAA,SAAM,kNACyMA,eAAA,SAC/MA,eAAA,SAAM,u+CAC89CA,eAAA,SACp+CA,eAAA,SAAM,6TACoTA,eAAA,SAC1TA,eAAA,SAAM,ybACgbA,eAAA,SACtbA,eAAA,SAAM,yfACgfA,eAAA,SACtfA,eAAA,SAAM,oaAC2ZA,eAAA,SACjaA,eAAA,SAAM,syBAC6xBA,eAAA,SACnyBA,eAAA,SAAM,6NACoNA,eAAA,SAC1NA,eAAA,SAAM,4mBACmmBA,eAAA,SACzmBA,eAAA,SAAM,sHAC6GA,eAAA,SACnHA,eAAA,SAAM,odAC2cA,eAAA,SACjdA,eAAA,SAAM,6PACoPA,eAAA,SAC1PA,eAAA,SAAM,icACwbA,eAAA,SAC9bA,eAAA,SAAM,yeACgeA,eAAA,SACteA,eAAA,SAAM,cACKA,eAAA,SACXA,eAAA,SAAM,wlBAC+kBA,eAAA,SACrlBA,eAAA,SAAM,wmBAC+lBA,eAAA,SACrmBA,eAAA,SAAM,8BACqBA,eAAA,SAC3BA,eAAA,SAAM,gDACuCA,eAAA,SAC7CA,eAAA,SAAM,yNACgNA,eAAA,SACtNA,eAAA,SAAM,qRAC4QA,eAAA,SAClRA,eAAA,SAAM,qGAC4FA,eAAA,SAClGA,eAAA,SAAM,kPACyOA,eAAA,SAC/OA,eAAA,SAAM,2OACkOA,eAAA,SACxOA,eAAA,SAAM,wRAC+QA,eAAA,SACrRA,eAAA,SAAM,gHACuGA,eAAA,SAC7GA,eAAA,SAAM,ghBACugBA,eAAA,SAC7gBA,eAAA,SAAM,6LACoLA,eAAA,SAC1LA,eAAA,SAAM,kJACyIA,eAAA,SAC/IA,eAAA,SAAM,oEAKN,KC9IeN,iBAAkB6C,aApCO,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAsBqB,GAAF1U,EAANsT,OAActT,EAAN0U,QAAiB1U,EAAT0G,UAAS,OAC5F/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACPO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACnCC,eAACsT,KAAK,CACJpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,6BACLwnB,QAASvZ,EAAOs6D,6BAEhB3uE,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,4CAErDI,eAACwT,KAAY,CAACpN,KAAK,6BAA6BqN,UAAU,aAG9DzT,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UACNR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAUJ,KCuEIF,qBAAkB6C,aArGjC,SAA4B5C,GAAyB,IAAtBC,EAACD,EAADC,EACvBiuE,GAD+BluE,EAALyD,MAAczD,EAAP0D,QAChBzD,EAAE,2BACnBsQ,EAAYtQ,EAAE,wCAEpB0D,EAAiCC,YAASmqE,GAA2B,CACnEjiE,UAAW,CACTwiE,QAAS,gCAFLrsE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAMxB8R,EAA2BC,YAAY85D,IAA/BiB,EAAqD76D,YAAAH,EAAA,GAAvC,GAEtB,GAAIhS,EACF,OACE5B,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIa,EACF,OACE7B,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sCAMX,IAAIqU,EAAgB,CAClB46D,MAAM,GAMR,OAJI/sE,EAAK4sE,eAAetlE,MAAMjK,SAC5B8U,EAAoB,KAA+D,SAA1DnS,EAAK4sE,eAAetlE,MAAM,GAAGG,KAAKpH,MAAMoF,eAIjEvH,eAACwuE,GAAY,CACXX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACgU,KAAM,CACLC,cAAe,CACb06D,2BAA4B16D,EAAoB,MAGlDG,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACXw6D,EAAW,CACf,CAAEb,QAAS,6BAA8B9rE,MAAOkS,EAAOs6D,6BAGzD,IAAK,IAAIziE,KAAK4iE,EACZF,EAAe,CAAEnjE,UAAW,CAC1B8I,MAAO,CACL05D,QAASa,EAAS5iE,GAAG+hE,QACrB9rE,MAAO2sE,EAAS5iE,GAAG/J,MAAM4sE,aAE1Br6D,eAAgB,CACf,CAACC,MAAO+4D,GAA2BjiE,UAAW,CAAEwiE,QAASa,EAAS5iE,GAAG+hE,aAExEr5D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACtDkT,SAAUF,KAAMG,SAASC,eAE3B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GAER,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACgvE,GAA+B,CAC9Bh8D,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EAAOtU,SAEdzH,QAAQC,IAAI0a,IACmB,KAK1C,KChEevT,iBAAkB6C,aArCG,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAiB1U,EAAT0G,UAAS,OACxF/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,6BAA6BG,SAAA,CAChDC,eAACsT,KAAK,CAAChP,KAAK,OACV8B,KAAK,mBACLlG,UAAY+S,EAAOg8D,iBAAoB,0BAA4B,eACnE17D,aAAa,QACfvT,eAACwT,KAAY,CAACpN,KAAK,mBAAmBqN,UAAU,OAAOvT,UAAU,wBAEnEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oCAAoCG,SAAA,CACvDC,eAACsT,KAAK,CAAChP,KAAK,OACV8B,KAAK,0BACLlG,UAAY+S,EAAOi8D,wBAA2B,0BAA4B,eAC1E37D,aAAa,QACfvT,eAACwT,KAAY,CAACpN,KAAK,0BAA0BqN,UAAU,OAAOvT,UAAU,2BAG9EF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UACNR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAUJ,KC4FIF,qBAAkB6C,aA5HjC,SAAgC5C,GAAyB,IAAtBC,EAACD,EAADC,EAC3BiuE,GADmCluE,EAALyD,MAAczD,EAAP0D,QACpBzD,EAAE,2BACnBsQ,EAAYtQ,EAAE,mCACduvE,EAAgB,cAEtB7rE,EAIIC,YAASmqE,GAA2B,CACtCjiE,UAAW,CACTwiE,QAAS,sBALFmB,EAAe9rE,EAAxB1B,QACOytE,EAAa/rE,EAApBzB,MACMytE,EAAYhsE,EAAlBxB,KAMFyJ,EAIIhI,YAASmqE,GAA2B,CACtCjiE,UAAW,CACTwiE,QAAS,6BALFsB,EAAahkE,EAAtB3J,QACO4tE,EAAWjkE,EAAlB1J,MACM4tE,EAAUlkE,EAAhBzJ,KAMF8R,EAA2BC,YAAY85D,IAA/BiB,EAAqD76D,YAAAH,EAAA,GAAvC,GAEtB,GAAKw7D,GAAqBG,EACxB,OACEvvE,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAC/BC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAKquE,GAAkBG,EACrB,OACExvE,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAC/BC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sCAMX,IAAIqU,EAAgB,CAClBihB,SAAU,MACVw6C,OAAQ,UAWV,OATIJ,EAAaZ,eAAetlE,MAAMjK,SACpC8U,EAAwB,SAAIq7D,EAAaZ,eAAetlE,MAAM,GAAGG,KAAKpH,OAEpEstE,EAAWf,eAAetlE,MAAMjK,SAClC8U,EAAsB,OAAIw7D,EAAWf,eAAetlE,MAAM,GAAGG,KAAKpH,OAMlEnC,eAACwuE,GAAY,CACXX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAE/BC,eAACgU,KAAM,CACLC,cAAe,CACbg7D,iBAAkBh7D,EAAwB,SAC1Ci7D,wBAAyBj7D,EAAsB,QAGjDG,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACXw6D,EAAW,CACf,CAAEb,QAAS,mBAAoB9rE,MAAOkS,EAAO46D,kBAC7C,CAAEhB,QAAS,0BAA2B9rE,MAAOkS,EAAO66D,0BAGtD,IAAK,IAAIhjE,KAAK4iE,EAEZF,EAAe,CAAEnjE,UAAW,CAC1B8I,MAAO,CACL05D,QAASa,EAAS5iE,GAAG+hE,QACrB9rE,MAAO2sE,EAAS5iE,GAAG/J,QAEpBuS,eAAgB,CACf,CAACC,MAAO+4D,GAA2BjiE,UAAW,CAAEwiE,QAASa,EAAS5iE,GAAG+hE,aAExEr5D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACtDkT,SAAUF,KAAMG,SAASC,eAE3B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GAER,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAAC2vE,GAA2B,CAC1B38D,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EAAOtU,SAEdzH,QAAQC,IAAI0a,IACe,KAKtC,KCvIa28D,GAAkBp9D,OAAaC,MAAM,CAC9CqI,WAAYtI,OACTG,SAAS/S,YAAE,uBACdsL,WAAYsH,OACTG,SAAS/S,YAAE,yBCqDHF,iBAAkB6C,aA5CG,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAiB1U,EAAT0G,UAAS,OACxF/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gCAAgCG,SAAA,CACnDO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,aACLlG,UAAY+S,EAAO6H,WAAc,0BAA4B,eAC7DvH,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,aAAYpC,SAAaH,EAAE,6CAATiN,gBAChC7M,eAAA,UAAQmC,MAAM,aAAYpC,SAAaH,EAAE,6CAATiN,gBAChC7M,eAAA,UAAQmC,MAAM,aAAYpC,SAAaH,EAAE,6CAATiN,mBAEpC7M,eAACwT,KAAY,CAACpN,KAAK,aAAaqN,UAAU,OAAOvT,UAAU,wBAE7DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gCAAgCG,SAAA,CACnDO,gBAACgT,KAAK,CAACG,UAAU,SACTrN,KAAK,aACLlG,UAAY+S,EAAO/H,WAAc,0BAA4B,eAC7DqI,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,uCAATiN,gBACxB7M,eAAA,UAAQmC,MAAM,KAAIpC,SAAaH,EAAE,uCAATiN,mBAE5B7M,eAACwT,KAAY,CAACpN,KAAK,aAAaqN,UAAU,OAAOvT,UAAU,2BAGjEF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UACNR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAUJ,KCwDIF,qBAAkB6C,aA/FjC,SAAgC5C,GAAyB,IAAtBC,EAACD,EAADC,EAC3BiuE,GADmCluE,EAALyD,MAAczD,EAAP0D,QACpBzD,EAAE,8BACnBsQ,EAAYtQ,EAAE,6BACduvE,EAAgB,UAEtB7rE,EAAiCC,YAASjE,IAAlCsC,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACxB8R,EAA2BC,YAAYtU,IAA/BqvE,EAAmD76D,YAAAH,EAAA,GAArC,GAKtB,OAHAtb,QAAQC,IAAI,2BACZD,QAAQC,IAAIuJ,GAERF,EAEA5B,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAC/BC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMpBa,EAEA7B,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAC/BC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sCAQTI,eAACwuE,GAAY,CACXX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAE/BC,eAACgU,KAAM,CACLC,cAAe,CACb6G,WAAYhZ,EAAK2yB,YAAY3Z,WAC7B5P,WAAYpJ,EAAK2yB,YAAYvpB,WAC7Bwe,KAAM,IAERvV,iBAAkBy7D,GAClBx7D,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAEZ27D,EAAe,CAAEnjE,UAAW,CAC1B8I,MAAO,CACLuG,WAAYzG,EAAOyG,WACnB5P,WAAYmJ,EAAOnJ,aAEpBwJ,eAAgB,CACf,CAACC,MAAOrV,OAEXsV,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAAC6vE,GAA2B,CAC1B78D,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EAAOtU,SAEdzH,QAAQC,IAAI0a,IACe,KAKtC,KCjEevT,iBAAkB6C,aA9BC,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAiB1U,EAAT0G,UAAS,OACtF/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,2CAA2CG,SAAA,CAC9DC,eAACsT,KAAK,CAAChP,KAAK,OACV8B,KAAK,kBACLlG,UAAY+S,EAAO68D,gBAAmB,0BAA4B,eAClEv8D,aAAa,QACfvT,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,OAAOvT,UAAU,0BAGtEF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UACNR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAUJ,KC4EIF,qBAAkB6C,aApGjC,SAA8B5C,GAAyB,IAAtBC,EAACD,EAADC,EACzBiuE,GADiCluE,EAALyD,MAAczD,EAAP0D,QAClBzD,EAAE,2BACnBsQ,EAAYtQ,EAAE,iCACduvE,EAAgB,UAChBY,EAAiB,CACrB9B,QAAS,mBAGX3qE,EAAiCC,YAASmqE,GAA2B,CACnEjiE,UAAWskE,IADLnuE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAA2BC,YAAY85D,IAA/BiB,EAAqD76D,YAAAH,EAAA,GAAvC,GAEtB,GAAIhS,EACF,OACE5B,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAC/BC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIa,EACF,OACE7B,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAC/BC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sCAMX,IAAIowE,EAAW,GAMf,OALIluE,EAAK4sE,eAAetlE,MAAMjK,SAC5B6wE,EAAWluE,EAAK4sE,eAAetlE,MAAM,GAAGG,KAAKpH,OAK7CnC,eAACwuE,GAAY,CACXX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAE/BC,eAACgU,KAAM,CACLC,cAAe,CACb67D,gBAAiBE,GAGnB57D,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAEZ27D,EAAe,CAAEnjE,UAAW,CAC1B8I,MAAO,CACL05D,QAAS,kBACT9rE,MAAOkS,EAAOy7D,kBAEfp7D,eAAgB,CACf,CAAEC,MAAO+4D,GAA2BjiE,UAAWskE,MAElDn7D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACiwE,GAAyB,CACxBj9D,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EAAOtU,SAEdzH,QAAQC,IAAI0a,IACa,KAKpC,KC4GevT,qBAAkB6C,aAlNjC,SAAqB5C,GAAwB,IAArBC,EAACD,EAADC,EACtB,OAD8BD,EAALyD,MAAazD,EAANoO,OAE9B/N,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,oBACtBU,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,8BAETI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,sCACNA,EAAE,0CACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,sCAI3B3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,mCACNA,EAAE,uCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,uCAK7BrN,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,+BAETI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,2CACNA,EAAE,+CACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,4CAI3B3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,iDACNA,EAAE,qDACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,kDAI3B3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,mCACNA,EAAE,uCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,oCAI3B3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,kCACNA,EAAE,sCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,sCAK7BrN,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,8BAETI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,qCACNA,EAAE,yCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,sCAI3B3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,0CACNA,EAAE,8CACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,8CAK7BrN,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,2BAETI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,yCACNA,EAAE,6CACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,0CAI3B3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,mCACNA,EAAE,uCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,oCAI3B3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,uCACNA,EAAE,2CACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,2CAK7BrN,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,2BAETI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,kCACNA,EAAE,sCACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,oCAI3B3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,0CACNA,EAAE,8CACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,+CAK7BrN,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,kCAETI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,0CACNA,EAAE,8CACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,4CAI3B3N,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,uCACNA,EAAE,2CACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CAACnI,KAAK,4CAK7BrN,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,4BAETI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,gCACNA,EAAE,8BACHI,eAAA,SAAMA,eAAA,SACNA,eAAC8V,GAAc,CACbnI,KAAK,kBACLE,UAAWjO,EAAE,+BAUjC,KC3KeF,iBAAkB6C,aArCQ,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAiB1U,EAAT0G,UAAS,OAC7F/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0CAA0CG,SAAA,CAC7DC,eAACsT,KAAK,CAAChP,KAAK,OACV8B,KAAK,oBACLlG,UAAY+S,EAAOi9D,kBAAqB,0BAA4B,eACpE38D,aAAa,QACfvT,eAACwT,KAAY,CAACpN,KAAK,oBAAoBqN,UAAU,OAAOvT,UAAU,wBAEpEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gDAAgDG,SAAA,CACnEC,eAACsT,KAAK,CAAChP,KAAK,OACV8B,KAAK,0BACLlG,UAAY+S,EAAOk9D,wBAA2B,0BAA4B,eAC1E58D,aAAa,QACfvT,eAACwT,KAAY,CAACpN,KAAK,0BAA0BqN,UAAU,OAAOvT,UAAU,2BAG5EF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UACNR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAUJ,KCsGIF,qBAAkB6C,aAnIjC,SAAqC5C,GAAyB,IAAtBC,EAACD,EAADC,EAChCiuE,GADwCluE,EAALyD,MAAczD,EAAP0D,QACzBzD,EAAE,+BACnBsQ,EAAYtQ,EAAE,wCACduvE,EAAgB,cAEtB7rE,EAIIC,YAASmqE,GAA2B,CACtCjiE,UAAW,CACTwiE,QAAS,yCALF7iE,EAAW9H,EAApB1B,QACOyJ,EAAS/H,EAAhBzB,MACMyJ,EAAQhI,EAAdxB,KAMFyJ,EAIIhI,YAASmqE,GAA2B,CACtCjiE,UAAW,CACTwiE,QAAS,mCALFmC,EAAU7kE,EAAnB3J,QACOyuE,EAAQ9kE,EAAf1J,MACMu+B,EAAO70B,EAAbzJ,KAOF8R,EAA2BC,YAAY85D,IAA/BiB,EAAqD76D,YAAAH,EAAA,GAAvC,GAMtB,GAJAtb,QAAQC,IAAI,2BACZD,QAAQC,IAAI+S,GACZhT,QAAQC,IAAI6nC,GAERh1B,GAAeglE,EACjB,OACEpwE,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAC/BC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIqK,GAAaglE,EACf,OACErwE,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAC/BC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sCAMX,IAAI0wE,EAAS,GACThlE,EAASojE,eAAetlE,MAAMjK,SAChCmxE,EAAShlE,EAASojE,eAAetlE,MAAM,GAAGG,KAAKpH,OAGjD,IAAIouE,EAAW,GAKf,OAJInwC,EAAQsuC,eAAetlE,MAAMjK,SAC/BoxE,EAAWnwC,EAAQsuC,eAAetlE,MAAM,GAAGG,KAAKpH,OAIhDnC,eAACwuE,GAAY,CACXX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAE/BC,eAACgU,KAAM,CACLC,cAAe,CACbk8D,wBAAyBG,EACzBJ,kBAAmBK,GAGrBn8D,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAEZ,IAAM67D,EAAW,CACf,CAAEb,QAAS,sCAAuC9rE,MAAOkS,EAAO87D,yBAChE,CAAElC,QAAS,gCAAiC9rE,MAAOkS,EAAO67D,oBAG5D,IAAK,IAAIhkE,KAAK4iE,EACZx2E,QAAQC,IAAI2T,GAEZ0iE,EAAe,CAAEnjE,UAAW,CAC1B8I,MAAO,CACL05D,QAASa,EAAS5iE,GAAG+hE,QACrB9rE,MAAO2sE,EAAS5iE,GAAG/J,QAEpBuS,eAAgB,CACf,CAACC,MAAO+4D,GAA2BjiE,UAAW,CAAEwiE,QAASa,EAAS5iE,GAAG+hE,aAExEr5D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACtDkT,SAAUF,KAAMG,SAASC,eAE3B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GAER,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACwwE,GAAgC,CAC/Bx9D,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EAAOtU,SAEdzH,QAAQC,IAAI0a,IACoB,KAK3C,KCrGevT,iBAAkB6C,aA9BK,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAiB1U,EAAT0G,UAAS,OAC1F/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uCAAuCG,SAAA,CAC1DC,eAACsT,KAAK,CAAChP,KAAK,OACV8B,KAAK,iBACLlG,UAAY+S,EAAOw9D,eAAkB,0BAA4B,eACjEl9D,aAAa,QACfvT,eAACwT,KAAY,CAACpN,KAAK,iBAAiBqN,UAAU,OAAOvT,UAAU,0BAGrEF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UACNR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAUJ,KCPIF,qBAAkB6C,aArBjC,SAA+C5C,GAAuC,IAApCC,EAACD,EAADC,EAChD,OADwDD,EAALyD,MAAczD,EAAP0D,QAAqB1D,EAAZ+wE,aAE1D,GAIPpwE,gBAACgrB,KAAK,CAAChnB,KAAK,UAASvE,SAAA,CACnBC,eAAC4G,KAAO+pE,GAAE,CAAA5wE,SAAEH,EAAE,sDACdI,eAAA,KAAAD,SACGH,EAAE,wDAELI,eAAA,KAAGkE,KAAK,kDAAkDmB,OAAO,SAASC,IAAI,aAAYvF,SACxFO,gBAACqE,KAAM,CAACG,MAAM,UAAUkU,cAAc,SAAQjZ,SAAA,CAC3CH,EAAE,yCAAyC,IAACI,eAACmG,KAAI,CAACC,KAAK,yBAKlE,KC2Fe1G,I,eAAAA,iBAAkB6C,aAxGjC,SAAkC5C,GAAyB,IAAtBC,EAACD,EAADC,EAC7BiuE,GADqCluE,EAALyD,MAAczD,EAAP0D,QACtBzD,EAAE,+BACnBsQ,EAAYtQ,EAAE,qCACduvE,EAAgB,cAEtB7rE,EAAiCC,YAASmqE,GAA2B,CACnEjiE,UAAW,CACTwiE,QAAS,gCAFLrsE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxB8R,EAA2BC,YAAY85D,IAA/BiB,EAAqD76D,YAAAH,EAAA,GAAvC,GAKtB,GAHAtb,QAAQC,IAAI,2BACZD,QAAQC,IAAIuJ,GAERF,EACF,OACE5B,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAC/BC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIa,EACF,OACE7B,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAC/BC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sCAMX,IAAI8wE,EAAe,GAKnB,OAJI5uE,EAAK4sE,eAAetlE,MAAMjK,SAC5BuxE,EAAe5uE,EAAK4sE,eAAetlE,MAAM,GAAGG,KAAKpH,OAIjDnC,eAACwuE,GAAY,CACXX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EACfpB,YAAa/tE,eAAC4wE,GAAsC,CAACF,aAAcA,IAAiB3wE,SAEtFC,eAACgU,KAAM,CACLC,cAAe,CACbw8D,eAAgBC,GAGlBt8D,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAEZ27D,EAAe,CAAEnjE,UAAW,CAC1B8I,MAAO,CACL05D,QAAS,6BACT9rE,MAAOkS,EAAOo8D,iBAEf/7D,eAAgB,CACf,CAACC,MAAO+4D,GAA+BjiE,UAAW,CAChDwiE,QAAS,kCAGdr5D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAAC6wE,GAA6B,CAC5B79D,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EAAOtU,SAEdzH,QAAQC,IAAI0a,IACiB,KAKxC,KCtHa69D,GAA4Bx3E,YAAGC,QAAAC,YAAA,uaAsB/Bu3E,GAA2Bz3E,YAAGI,QAAAF,YAAA,mLAY9Bw3E,GAAqB13E,YAAGK,QAAAH,YAAA,uMAUxBy3E,GAAwB33E,YAAGO,QAAAL,YAAA,uMAU3B03E,GAAwB53E,YAAGQ,QAAAN,YAAA,uJCbzBkG,qBAAkB6C,aA5BjC,SAAuC5C,GAA4C,IAAzCC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EAC5E,OACEvW,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,kBAAmB4G,SAAU5G,EAAE,uBAAuBG,SAC1EC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAU,mCAEtBrG,eAAC0N,GAAoB,CAACzD,WAAW,MACXC,SAAS,sBAAqBnK,SAClDC,eAACyW,GAAS,CAACL,OAAO,6CAK1BpW,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAMd,KCTcL,qBAAkB6C,aAtBjC,SAAwC5C,GAAoB,IAAlBC,EAACD,EAADC,EAAU2J,GAAF5J,EAALyD,MAAWzD,EAAJ4J,MAClDqK,EAAgCC,YAAYq9D,IAApCC,EAA0Dp9D,YAAAH,EAAA,GAAvC,GAE3B,OAAO5T,eAACw+B,GAAY,CAClBtlB,WAAYtZ,EAAE,oDACduZ,eAAgBnZ,eAAA,KAAAD,SAAIwJ,EAAKnD,OACzBgT,WAAYxZ,EAAE,gDACdgb,eAAgBu2D,EAChBhzC,wBAAyB,CACrB1yB,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,KAGb7C,eAAgB,CACd,CAAEC,MAAOm8D,OAInB,KCsFepxE,qBAAkB6C,aA/FjC,SAAmC5C,GAAkB,IAAfC,EAACD,EAADC,EAC9BsQ,GADwCvQ,EAAP0D,QACrBzD,EAAE,wCACpB0D,EAA4CC,YAASutE,IAA7ClvE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAG9B,GAAIzP,EAAS,OACX5B,eAACoxE,GAA8B,CAAArxE,SAC7BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACoxE,GAA8B,CAAArxE,SAC7BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,qDAKZ,IAAMyxE,EAAiBvvE,EAAKwvE,qBAG5B,OAAKD,EAAejoE,MAAMjK,OAWxBa,eAACoxE,GAA8B,CAAArxE,SAC7BC,eAACiO,GAAW,CAACiC,UAAWA,EACVI,aAAa,EACbZ,SAAU2hE,EAAe3hE,SACzBG,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO4/D,EAAe3hE,SAASgC,WAEjCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB0/D,2BAA2BnoE,MACtDsG,EAAWmC,EAAgB0/D,2BAA2B7hE,SAE5D,OAAOoC,EAAS3S,OACZ,CAGEoyE,2BAA4B,CAC1Bx/D,WAAYH,EAAe2/D,2BAA2Bx/D,WACtD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe2/D,2BAA2BnoE,OAAK4I,aAAKF,IAChEpC,aAGJkC,CACN,GAEJ,EAAE7R,SACZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qDACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNsxE,EAAejoE,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC/BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKioE,iBADQ3kE,gBAGhBvM,gBAAC2R,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAA,CAC/BC,eAAC2zC,GAAU,CAAClB,QAAO,uCAAA3jC,OAAyCvF,EAAKgO,MACjEvX,eAACyxE,GAA+B,CAACloE,KAAMA,MAFFsD,kBAPzBA,eAWJ,aA1DxB7M,eAACoxE,GAA8B,CAAArxE,SAC7BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SACGH,EAAE,iDA8Db,KC5Ga8xE,GAAwBl/D,OAAaC,MAAM,CACpDrM,KAAMoM,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdiJ,YAAa2J,OACVK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACd+xE,UAAWn/D,OACRK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACd4xE,gBAAiBh/D,OACdK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBC+DDF,iBAAkB6C,aA/DD,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQwL,EAAalgB,EAAbkgB,cAAeD,EAAejgB,EAAfigB,gBAAiBvZ,EAAS1G,EAAT0G,UAAS,OACpH/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAO7M,KAAQ,0BAA4B,eACvDmN,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAGzDF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mDAAmDG,SAAA,CACtEC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,kBACLlG,UAAY+S,EAAOu+D,gBAAmB,0BAA4B,eAClEj+D,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,OAAOvT,UAAU,6BAIpEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,YACLlG,UAAY+S,EAAO0+D,UAAa,0BAA4B,eAC5Dp+D,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,wBAE5DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,cACbC,aAAchV,EAAOxL,YACrBjQ,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,cAAeqG,EAAE7gB,OAAOkkB,cACtC3J,EAAgB,eAAe,GAAM,EACvC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,2BAGlEI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACPG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAEHI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAChBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,2BAIV,KCEEF,qBAAkB6C,aAxDjC,SAAqC5C,GAAgB,IAAdC,EAACD,EAADC,EAAGyD,EAAO1D,EAAP0D,QAClCgD,EAAY,iCAClBuN,EAA6BC,YAAYm9D,IAAjCY,EAAoD79D,YAAAH,EAAA,GAApC,GAExB,OACC5T,eAACoxE,GAA8B,CAAC56D,UAAU,EAAKzW,SAC9CO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,+CAEjBI,eAACgU,KAAM,CACHC,cAAe,CAAE7N,KAAM,GAAIyC,YAAa,GAAI8oE,UAAW,GAAIH,gBAAiB,IAC5Er9D,iBAAkBu9D,GAClBt9D,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBs9D,EAAiB,CAAEnmE,UAAW,CAC5B8I,MAAO,CACLnO,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,YACpB8oE,UAAWt9D,EAAOs9D,UAClBH,gBAAiBn9D,EAAOm9D,kBAEzB98D,eAAgB,CACf,CAACC,MAAOm8D,OAEXl8D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,mDAAqD,CAClEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc4M,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAexL,EAAMrH,EAANqH,OAAQpB,EAAMjG,EAANiG,OAAM,OAC9DjT,eAAC6xE,GAA6B,CAC5B7+D,aAAcA,EACdqB,OAAQA,EACRpB,OAAQA,EACR2M,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GACX,QAMd,KCoCe3G,I,SAAAA,iBAAkB6C,aAzFjC,SAAsC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAC1CkU,EAAKnU,EAAM2K,OAAOwJ,GAClBlR,EAAY,iCACZ6J,EAAYtQ,EAAE,4CACpB0D,EAAiCC,YAASwtE,GAA0B,CAClEtlE,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAGxB8R,EAAgCC,YAAYo9D,IAApCa,EAA0D/9D,YAAAH,EAAA,GAAvC,GAE3B,GAAIhS,EAAS,OACX5B,eAACoxE,GAA8B,CAAC56D,UAAU,EAAKzW,SAC7CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACoxE,GAA8B,CAAC56D,UAAU,EAAKzW,SAC7CC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,kCAKZ,IAAMiY,EAAc/V,EAAKiwE,oBAIzB,OAHAz5E,QAAQC,IAAI,cACZD,QAAQC,IAAIuJ,GAGV9B,eAACoxE,GAA8B,CAAC56D,UAAU,EAAKzW,SAC7CC,eAACkH,KAAI,CAACX,MAAO2J,EAAUnQ,SACrBC,eAACgU,KAAM,CACHC,cAAe,CACb7N,KAAMyR,EAAYzR,KAClByC,YAAagP,EAAYhP,YACzB8oE,UAAW95D,EAAY85D,UACvBH,gBAAiB35D,EAAY25D,iBAE/Br9D,iBAAkBu9D,GAClBt9D,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZy9D,EAAoB,CAAErmE,UAAW,CAC/B8I,MAAO,CACLgD,GAAInU,EAAM2K,OAAOwJ,GACjBnR,KAAMiO,EAAOjO,KACbyC,YAAawL,EAAOxL,YACpB8oE,UAAWt9D,EAAOs9D,UAClBH,gBAAiBn9D,EAAOm9D,kBAEzB98D,eAAgB,CACf,CAACC,MAAOm8D,OAEXl8D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAKmE,GACbwO,KAAMC,QAASlV,EAAE,oDAAsD,CACnEmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAc4M,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAexL,EAAMrH,EAANqH,OAAQpB,EAAMjG,EAANiG,OAAM,OAC9DjT,eAAC6xE,GAA6B,CAC5B7+D,aAAcA,EACdqB,OAAQA,EACRpB,OAAQA,EACR2M,gBAAiBA,EACjBC,cAAeA,EACfxZ,UAAWA,GACX,OAMhB,KCxGa2rE,GAA0B14E,YAAGC,QAAAC,YAAA,ihBA4B7By4E,GAA8B34E,YAAGI,QAAAF,YAAA,+NAUjC04E,GAA8B54E,YAAGK,QAAAH,YAAA,iLCC/BkG,qBAAkB6C,aA5BjC,SAAsC5C,GAA4C,IAAzCC,EAACD,EAADC,EAAYG,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAQwW,EAAA5W,EAAE6W,gBAAQ,IAAAD,GAAMA,EAC3E,OACEvW,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,kBAAmB4G,SAAU5G,EAAE,uBAAuBG,SAC1EC,eAAA,OAAKE,UAAU,sBAAqBH,SAChCyW,EACAxW,eAAC6G,GAAU,CAACR,UAAU,iCACtB,OAQNrG,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAMd,KCScL,qBAAkB6C,aAjCjC,SAA+C5C,GAA+C,IAA7CC,EAACD,EAADC,EAAU2J,GAAF5J,EAALyD,MAAWzD,EAAJ4J,MAAMmC,EAAS/L,EAAT+L,UAAWymE,EAAcxyE,EAAdwyE,eAC1Ev+D,EAAqCC,YAAYq+D,IAA1CE,EAAsEr+D,YAAAH,EAAA,GAA7C,GAE9B,OACE5T,eAAA,UAAQE,UAAU,sCAChBqG,MAAO3G,EAAE,kBACTsE,KAAK,GACLuM,QAAS,WACPkK,GAAe,CACb/a,EAAGA,EACHsZ,WAAYtZ,EAAE,kDACduZ,eAAgBnZ,eAAA,KAAAD,SAAIwJ,EAAKwb,WACzB3L,WAAYxZ,EAAE,8CACdgb,eAAgBw3D,EAChB94D,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLuQ,QAASpZ,EACT2mE,mBAAoBF,IAGxBz9D,eAAgB,CACd,CAAEC,MAAOq9D,OAInB,EAAEjyE,SACAC,eAAA,QAAME,UAAU,WAAUH,SAACC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAG1D,KC2Fe1G,qBAAkB6C,aAnHjC,SAAkC5C,GAAkB,IAAfC,EAACD,EAADC,EAC7BsQ,GADuCvQ,EAAP0D,QACpBzD,EAAE,sCACpB0D,EAA4CC,YAASyuE,IAA7CpwE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAG9B,GAAIzP,EAAS,OACX5B,eAACsyE,GAA6B,CAAAvyE,SAC5BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,eAACsyE,GAA6B,CAAAvyE,SAC5BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SAAIH,EAAE,mDAKZ,IAAM2yE,EAAgBzwE,EAAK0wE,oBAG3B,OAAKD,EAAcnpE,MAAMjK,QAUzB7G,QAAQC,IAAIg6E,GAGVvyE,eAACsyE,GAA6B,CAAAvyE,SAC5BC,eAACiO,GAAW,CAACiC,UAAWA,EACVI,aAAa,EACbZ,SAAU6iE,EAAc7iE,SACxBG,WAAY,WACZwB,EAAU,CACR5F,UAAW,CACTgG,MAAO8gE,EAAc7iE,SAASgC,WAEhCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB2gE,oBAAoBppE,MAC/CsG,EAAWmC,EAAgB2gE,oBAAoB9iE,SAErD,OAAOoC,EAAS3S,OACZ,CAGEqzE,oBAAqB,CACnBzgE,WAAYH,EAAe4gE,oBAAoBzgE,WAC/C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe4gE,oBAAoBppE,OAAK4I,aAAKF,IACzDpC,aAGJkC,CACN,GAEJ,EAAE7R,SACZO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAChS,UAAU,aAAYH,SAAEH,EAAE,4CAF7BiN,kBAKlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNwyE,EAAcnpE,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC9BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,MADQyG,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACRO,gBAAA,OAAKJ,UAAU,cAAaH,SAAA,CACzBwJ,EAAKk1B,SAASr1B,MAAMkD,KAAI,SAAAU,GAAA,IAASylE,EAAWzlE,EAAjBzD,KAAI,OAG9BjJ,eAFA,CAEA,OAAAP,SAAA,CACEC,eAAA,OAAKE,UAAU,cAAaH,SAC1BC,eAAC0yE,GAA2C,CAC1CnpE,KAAMkpE,EACNN,eAAgB5oE,EAAKgO,GACrB7L,UAAW+mE,EAAYl7D,OAG1Bk7D,EAAY1tD,SAAS/kB,eAAA,SACtBA,eAAA,QAAME,UAAU,aAAYH,SAAE0yE,EAAYxnD,UACtC,IAERjrB,eAAC0E,IAAI,CAACtC,GAAE,4CAAA0M,OAA8CvF,EAAKgO,IAAKxX,SAC9DC,eAAC2E,KAAM,CACLG,MAAM,OACNzC,KAAK,cAAatC,SACfH,EAAE,sDAzBCiN,eA8BJ,cA9ExB7M,eAACsyE,GAA6B,CAAAvyE,SAC5BC,eAACiO,GAAW,CAACiC,UAAWA,EAAUnQ,SAChCC,eAAA,KAAAD,SACGH,EAAE,+CAkFb,KClFeF,qBAAkB6C,aArCjC,SAAiD5C,GAAqC,IAAlCC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAASqI,EAAS/L,EAAT+L,UAC/DymE,EAAiB/uE,EAAM2K,OAAOwJ,GACpC3D,EAAsCC,YAAYo+D,IAA1CU,EAAsE5+D,YAAAH,EAAA,GAA7C,GAEjC,OACEtT,gBAACqE,KAAM,CACLG,MAAM,YACN2L,QAAU,kBACRkiE,EAA0B,CAAElnE,UAAW,CACrC8I,MAAO,CACL89D,mBAAoBF,EACpBrtD,QAASpZ,IAEXgJ,eAAgB,CACd,CAACC,MAAOq9D,OAEXp9D,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACPxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAK,gCACb2S,KAAMC,QAASlV,EAAE,iDAAmD,CAClEmV,SAAUF,KAAMG,SAASC,cAE7B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACtDkT,SAAUF,KAAMG,SAASC,eAE3B3c,QAAQC,IAAI,uCAAwCsJ,EAEtD,GAAE,EACF9B,SAAA,CAEFC,eAACmG,KAAI,CAACC,KAAK,gBAAgB,IAAExG,EAAE,iDAGrC,KC5BA,SAASk7D,GAA6B/gB,GACpC,IAAI9xC,EAAY,CACdzD,gBAAYpF,EACZqF,cAAUrF,EACV26C,gBAAY36C,GAOd,OAJI26C,IACF9xC,EAAU8xC,WAAaA,GAGlB9xC,CACT,CA8IevI,qBAAkB6C,aA3IjC,SAAuB5C,GAQlB,IAPHC,EAACD,EAADC,EACKgzE,GAAAjzE,EAALyD,MAAKzD,EACLukD,mCAA0B,IAAA0uB,EAAC,GAAEA,EAAAC,EAAAlzE,EAC7BmzE,yBAAiB,IAAAD,EAAC,GAAEA,EAAAE,EAAApzE,EACpBqzE,4BAAoB,IAAAD,EAAC,GAAEA,EAAAE,EAAAtzE,EACvBykD,0BAAkB,IAAA6uB,EAAC,GAAEA,EACrBhvB,EAAStkD,EAATskD,UAEAvtC,EAAkDC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAA1DykD,EAAiBvkD,EAAA,GAAEwkD,EAAoBxkD,EAAA,GAC9CirB,EAA8EC,aAAcmY,IAAoBlY,EAAAhuB,YAAA8tB,EAAA,GAAxGy5B,EAAWv5B,EAAA,GAAAE,EAAAF,EAAA,GAAII,EAAMF,EAANE,OAAQvgC,EAAOqgC,EAAPrgC,QAASC,EAAKogC,EAALpgC,MAAOC,EAAImgC,EAAJngC,KAAMiV,EAAOkrB,EAAPlrB,QAAS1F,EAAS4wB,EAAT5wB,UAW9D,SAASozC,IACP,OAAOzkD,eAAC04C,GAAW,CACjBx4C,UAAU,OACV24C,gBAAiBqL,EACjBv7B,YAAamqD,EACbh3D,SAAU,SAAC3Z,GACT9D,aAAaC,QAAQ4lD,EAA4B/hD,GAC7CA,IAAUggC,GACZi5B,GAAqB,GACrBE,EAAY,CAAE7vD,UAAWqvD,GAA6B34D,MAC7CA,GAGTi5D,GAAqB,GACrBrkD,EAAQ+jD,GAA6B34D,KAErCi5D,GAAqB,EAEzB,GAEJ,CAEA,OAAKD,EAIDh5B,GAAUvgC,EACZtB,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACykD,EAAM,IACPzkD,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0BAA0BG,SAClDC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,SAKhCmhC,GAAUtgC,EACZvB,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACykD,EAAM,IACPzkD,eAACsrB,KAAK,CAAChnB,KAAK,SAAQvE,SAAEH,EAAE,iCAIxBuiC,IAAWrgC,EAAK28B,SAASr1B,MAAMjK,OACjCmB,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACykD,EAAM,IACPnkD,gBAACgrB,KAAK,CAAChnB,KAAK,UAASvE,SAAA,CACnBC,eAAA,UAAAD,SAASH,EAAE,sCAA6C,IAAE,MACzDA,EAAE,2CAMPU,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAACykD,EAAM,IACLtiB,GAAUrgC,EACZ9B,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,0BACd8P,SAAU5N,EAAK28B,SAAS/uB,SACxBY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACXgG,MAAO3P,EAAK28B,SAAS/uB,SAASgC,WAEhCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB4sB,SAASr1B,MACpCsG,EAAWmC,EAAgB4sB,SAAS/uB,SAE1C,OAAOoC,EAAS3S,OACZ,CAGEo8D,kBAAmB,CACjB98B,SAAU,CACR1sB,WAAYH,EAAe6sB,SAAS1sB,WACpC3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe6sB,SAASr1B,OAAK4I,aAAKF,IAC9CpC,cAINkC,CACN,GAEJ,EAAE7R,SACVO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,MAHFrF,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACR+B,EAAK28B,SAASr1B,MAAMkD,KAAI,SAAAQ,GAAA,IAtGPpB,EAsGUnC,EAAIuD,EAAJvD,KAAI,OAC9BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKwb,UADQlY,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK0hB,OADQpe,gBAGhB7M,eAACiS,KAAMxM,IAAG,CAAA1F,SACNizE,EAAqBxX,SAASjyD,EAAKgO,IACnCvX,eAAA,QAAME,UAAU,aAAYH,SAAEqkD,IAC9BpkD,eAAA,QAAME,UAAU,aAAYH,UAjHlB2L,EAiHuCnC,EAAKgO,GA/G/D,uCADA0sC,EAEIjkD,eAACkzE,GAAwC,CAACxnE,UAAWA,IAErD,iCAyGiBmB,kBAPFA,eAaJ,WAKlB,MAzFG7M,eAACykD,EAAM,GA4FlB,KClJe/kD,qBAAkB6C,aAhBjC,SAA4C5C,GAAyB,IAAtBC,EAACD,EAADC,EAE7C,OAFqDD,EAALyD,MAAczD,EAAP0D,QAGrDrD,eAACsyE,GAA6B,CAAC97D,UAAU,EAAKzW,SAC5CC,eAACmzE,GAAc,CACbjvB,2BAA2B,GAC3B4uB,kBAAmBlzE,EAAE,0DACrBozE,qBAAsB,CAAC,GACvB5uB,mBAAmB,oBACnBH,UAAU,wCAIlB,KCaevkD,I,SAAAA,iBAAkB6C,aArBjC,SAAkC5C,GAAqC,IAAlCC,EAACD,EAADC,EAAGG,EAAQJ,EAARI,SAAQ6tE,EAAAjuE,EAAEkuE,sBAAc,IAAAD,EAAC,GAAEA,EACjE,OACE5tE,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,oBAAqB4G,SAAQ,GAAAsI,OAAKlP,EAAE,uBAAsB,KAAAkP,OAAI++D,GAAiB9tE,SACnGC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAACguE,GAAY,QAGjBhuE,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACdA,YAOf,KC9BaqzE,GAAkC95E,YAAGC,QAAAC,YAAA,+XAwBrC65E,GAAiC/5E,YAAGI,QAAAF,YAAA,oMAcpC85E,GAA+Bh6E,YAAGK,QAAAH,YAAA,2SCyDhCkG,qBAAkB6C,aA/EjC,SAA4B5C,GAAwB,IAArBC,EAACD,EAADC,EACvB2G,GAD+B5G,EAALyD,MAAazD,EAANoO,OACzBnO,EAAE,kCAChB0D,EAA4CC,YAAS6vE,IAA7CxxE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMuP,EAAS/N,EAAT+N,UAE9B,GAAIzP,EAAS,OACX5B,eAACuzE,GAAyB,CAAChtE,MAAOA,EAAMxG,SACrCH,EAAE,+BAGP,GAAIiC,EAAO,OACT7B,eAACuzE,GAAyB,CAAChtE,MAAOA,EAAMxG,SACrCH,EAAE,2CAIP,IAAM4zE,EAAgB1xE,EAAK2xE,oBAI3B,OACEzzE,eAACuzE,GAAyB,CAAChtE,MAAOA,EAAMxG,SACtCC,eAACiO,GAAW,CACViC,UAAWtQ,EAAE,iCAEb8P,SAAU8jE,EAAc9jE,SACxBY,aAAa,EACbT,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO+hE,EAAc9jE,SAASgC,WAEhCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB4hE,oBAAoBrqE,MAC/CsG,EAAWmC,EAAgB4hE,oBAAoB/jE,SAErD,OAAOoC,EAAS3S,OACZ,CAGEs0E,oBAAqB,CACnB1hE,WAAYH,EAAe6hE,oBAAoB1hE,WAC/C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe6hE,oBAAoBrqE,OAAK4I,aAAKF,IACzDpC,aAGJkC,CACN,GAEJ,EAAE7R,SACFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kCACpBI,eAACiS,KAAMC,UAAS,MAFFrF,kBAKd7M,eAACiS,KAAM9K,KAAI,CAAApH,SACNyzE,EAAcpqE,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC9BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKnD,OAERpG,eAACiS,KAAMxM,IAAG,CAAA1F,SACRC,eAAC0E,IAAI,CAACtC,GAAI,iCAAmCmH,EAAKgO,GAAGxX,SACnDC,eAAC2E,KAAM,CAACzE,UAAU,oBACV4E,MAAM,YAAW/E,SACtBH,EAAE,wBARKiN,eAYJ,YAOhC,KCjCenN,qBAAkB6C,aAhDjC,SAAkC5C,GAA4C,IAAzCC,EAACD,EAADC,EAAGG,EAAQJ,EAARI,SAAU8tE,EAAcluE,EAAdkuE,eAAc6F,EAAA/zE,EAAEg0E,YAAI,IAAAD,EAAC,CAAC,EAACA,EACvE,OACE1zE,eAACiL,GAAW,CAAAlL,SACVC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,oBAAqB4G,SAAQ,GAAAsI,OAAKlP,EAAE,uBAAsB,KAAAkP,OAAI++D,GAAiB9tE,SACnGC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAACguE,GAAY,CAAC3nE,UAAU,iCAG5B/F,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACbA,IAEHO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACdC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,mBAAmBG,SAChCC,eAACkH,KAAKC,KAAI,CAAApH,SACP4zE,EAAKC,YAGV5zE,eAACkH,KAAI,CAACX,MAAO3G,EAAE,iBAAiBG,SAC9BC,eAACkH,KAAKC,KAAI,CAAApH,SACP4zE,EAAKptE,UAGVvG,eAACkH,KAAI,CAACX,MAAO3G,EAAE,uBAAuBG,SACpCC,eAACkH,KAAKC,KAAI,CAAApH,SACP4zE,EAAK9qE,gBAGV7I,eAACkH,KAAI,CAACX,MAAO3G,EAAE,mBAAmBG,SAChCC,eAACkH,KAAKC,KAAI,CAAApH,SACP4zE,EAAK/mE,YAGV5M,eAACkH,KAAI,CAACX,MAAO3G,EAAE,oBAAoBG,SACjCC,eAACkH,KAAKC,KAAI,CAAApH,SACP4zE,EAAKE,yBASxB,KC2Cen0E,qBAAkB6C,aArFjC,SAAqC5C,GAAsG,IAAnGC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQuL,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAexZ,EAAS1G,EAAT0G,UAAW6J,EAASvQ,EAATuQ,UAG3H,OACElQ,eAACkT,KAAM,CAAAnT,SACLO,gBAAC4G,KAAI,CAACX,MAAO2J,EAAUnQ,SAAA,CACrBO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,UACLlG,UAAY+S,EAAO2gE,QAAW,0BAA4B,eAC1DrgE,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,wBAE1DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACsT,KAAK,CAAChP,KAAK,OACN8B,KAAK,QACLlG,UAAY+S,EAAO1M,MAAS,0BAA4B,eACxDgN,aAAa,QACnBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,wBAExDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uBAAuBG,SAAA,CAC1CC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,cACbC,aAAchV,EAAOxL,YACrBjQ,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,cAAeqG,EAAE7gB,OAAOkkB,cACtC3J,EAAgB,eAAe,GAAM,EACvC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,wBAE9DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,UACbC,aAAchV,EAAOzH,QACrBhU,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,UAAWqG,EAAE7gB,OAAOkkB,cAClC3J,EAAgB,WAAW,GAAM,EACnC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,wBAE1DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAACkpB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,WACbC,aAAchV,EAAOw/D,SACrBj7E,KAAMgwB,GACN5M,OAAQ,SAACkK,GACPrG,EAAc,WAAYqG,EAAE7gB,OAAOkkB,cACnC3J,EAAgB,YAAY,GAAM,EACpC,IAEF5f,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,2BAG7DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLzE,UAAU,aACV4E,MAAM,UACN4O,SAAUV,EACV1O,KAAK,SAAQvE,SAEZH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CACLL,KAAK,SACLQ,MAAM,OAAM/E,SAEXH,EAAE,6BAOnB,KCgCeF,qBAAkB6C,aAjHjC,SAAiC5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAC/BmU,GAD6C5X,EAAP0D,QACjCD,EAAM2K,OAAOwJ,IAElBs2D,EAAiBjuE,EAAE,iCACnBsQ,EAAYtQ,EAAE,sCAEpB0D,EAAiCC,YAAS8vE,GAAgC,CACxE5nE,UAAW,CACT8L,GAAIA,KAFA3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxB8R,EAA2BC,YAAYy/D,IAA/B1E,EAA2D76D,YAAAH,EAAA,GAA7C,GAKtB,GAHAtb,QAAQC,IAAI,2BACZD,QAAQC,IAAIuJ,GAERF,EACF,OACE5B,eAAC8zE,GAA4B,CACzBjG,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIa,EACF,OACE7B,eAAC8zE,GAA4B,CACzBjG,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sCAMX,IAAMm0E,EC7DD,SAAyBn0E,EAAGo0E,GACjC,IAAI9jE,EACA+jE,EAGJ,OAAOD,GACL,IAAK,kBACH9jE,EAAYtQ,EAAE,iDACdq0E,EAAY,CACVL,QAASh0E,EAAE,wDACX2G,MAAO3G,EAAE,sDACTiJ,YAAajJ,EAAE,2DAA4D,CACzEzG,cAAe,CAAEqe,OAAQ,KAAM08D,OAAQ,QAEzCtnE,QAAShN,EAAE,uDAAwD,CACjEzG,cAAe,CAAEqe,OAAQ,KAAM08D,OAAQ,QAEzCL,SAAUj0E,EAAE,0DAEd,MACF,IAAK,kBACHsQ,EAAYtQ,EAAE,iDACdq0E,EAAY,CACVL,QAASh0E,EAAE,wDACX2G,MAAO3G,EAAE,sDACTiJ,YAAajJ,EAAE,2DAA4D,CACzEzG,cAAe,CAAEqe,OAAQ,KAAM08D,OAAQ,QAEzCtnE,QAAShN,EAAE,uDAAwD,CACjEzG,cAAe,CAAEqe,OAAQ,KAAM08D,OAAQ,QAEzCL,SAAUj0E,EAAE,0DAEd,MACF,IAAK,iBACHsQ,EAAYtQ,EAAE,gDACdq0E,EAAY,CACVL,QAASh0E,EAAE,uDACX2G,MAAO3G,EAAE,qDACTiJ,YAAajJ,EAAE,0DAA2D,CACxEzG,cAAe,CAAEqe,OAAQ,KAAM08D,OAAQ,QAEzCtnE,QAAShN,EAAE,sDAAuD,CAChEzG,cAAe,CAAEqe,OAAQ,KAAM08D,OAAQ,QAEzCL,SAAUj0E,EAAE,yDAEd,MACF,IAAK,2BACHsQ,EAAYtQ,EAAE,0DACdq0E,EAAY,CACVL,QAASh0E,EAAE,iEACX2G,MAAO3G,EAAE,+DACTiJ,YAAajJ,EAAE,oEAAqE,CAClFzG,cAAe,CAAEqe,OAAQ,KAAM08D,OAAQ,QAEzCtnE,QAAShN,EAAE,gEAAiE,CAC1EzG,cAAe,CAAEqe,OAAQ,KAAM08D,OAAQ,QAEzCL,SAAUj0E,EAAE,mEAEd,MACF,IAAK,gBACHsQ,EAAYtQ,EAAE,+CACdq0E,EAAY,CACVL,QAASh0E,EAAE,sDACX2G,MAAO3G,EAAE,oDACTiJ,YAAajJ,EAAE,yDAA0D,CACvEzG,cAAe,CAAEqe,OAAQ,KAAM08D,OAAQ,QAEzCtnE,QAAShN,EAAE,qDAAsD,CAC/DzG,cAAe,CAAEqe,OAAQ,KAAM08D,OAAQ,QAEzCL,SAAUj0E,EAAE,wDAEd,MACF,IAAK,qBACHsQ,EAAYtQ,EAAE,oDACdq0E,EAAY,CACVL,QAASh0E,EAAE,2DACX2G,MAAO3G,EAAE,yDACTiJ,YAAajJ,EAAE,8DAA+D,CAC5EzG,cAAe,CAAEqe,OAAQ,KAAM08D,OAAQ,QAEzCtnE,QAAShN,EAAE,0DAA2D,CACpEzG,cAAe,CAAEqe,OAAQ,KAAM08D,OAAQ,QAEzCL,SAAUj0E,EAAE,6DAEd,MACF,QACEsQ,EAAYtQ,EAAE,2CACdq0E,EAAY,CACVL,QAASh0E,EAAE,kDACX2G,MAAO3G,EAAE,gDACTiJ,YAAajJ,EAAE,sDACfgN,QAAShN,EAAE,kDACXi0E,SAAUj0E,EAAE,oDAKlB,MAAO,CACL,UAAasQ,EACb,UAAa+jE,EAEjB,CD7CuBE,CAAgBv0E,EAAGkC,EAAKsyE,mBAAmBhuE,MAKhE,OAJA9N,QAAQC,IAAIuJ,EAAKsyE,mBAAmBhuE,MACpC9N,QAAQC,IAAIw7E,GAIV/zE,eAAC8zE,GAA4B,CAC3BjG,eAAgBA,EAChB8F,KAAMI,EAAaE,UAAUl0E,SAE/BC,eAACgU,KAAM,CACLC,cAAe,CACb2/D,QAAS9xE,EAAKsyE,mBAAmBR,QACjCrtE,MAAOzE,EAAKsyE,mBAAmB7tE,MAC/BsC,YAAa/G,EAAKsyE,mBAAmBvrE,YACrC+D,QAAS9K,EAAKsyE,mBAAmBxnE,QACjCinE,SAAU/xE,EAAKsyE,mBAAmBP,UAGpCz/D,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAEZ27D,EAAe,CAAEnjE,UAAW,CAC1B8I,MAAO,CACLgD,GAAIA,EACJq8D,QAASv/D,EAAOu/D,QAChBrtE,MAAO8N,EAAO9N,MACdsC,YAAawL,EAAOxL,YACpB+D,QAASyH,EAAOzH,QAChBinE,SAAUx/D,EAAOw/D,WAElBn/D,eAAgB,CACf,CAACC,MAAOy+D,OAEXx+D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,mDAAqD,CAClEmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAACq0E,GAA4B,CAC3BrhE,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRuL,gBAAiBA,EACjBC,cAAeA,EACf3P,UAAW6jE,EAAa7jE,UACxB7J,UApGU,2BAoGWtG,SAEpBzH,QAAQC,IAAI0a,IACgB,KAKvC,KEnFevT,iBAAkB6C,aAjCM,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAiB1U,EAAT0G,UAAS,OAC3F/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kDAAkDG,SAAA,CACrEO,gBAACgT,KAAK,CAACG,UAAU,SACfrN,KAAK,uCACLlG,UAAY+S,EAAOqhE,qCAAwC,0BAA4B,eACvF/gE,aAAa,MAAKxT,SAAA,CAChBC,eAAA,UAAQmC,MAAM,UAASpC,SAAEH,EAAE,oDAC3BI,eAAA,UAAQmC,MAAM,UAASpC,SAAEH,EAAE,uDAE/BI,eAACwT,KAAY,CAACpN,KAAK,uCAAuCqN,UAAU,OAAOvT,UAAU,0BAG3FF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UACNR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAUJ,KCiFIF,qBAAkB6C,aA1GjC,SAAmC5C,GAAyB,IAAtBC,EAACD,EAADC,EAC9BiuE,GADsCluE,EAALyD,MAAczD,EAAP0D,QACvBzD,EAAE,wBACnBsQ,EAAYtQ,EAAE,wCAEpB0D,EAAiCC,YAASmqE,GAA2B,CACnEjiE,UAAW,CACTwiE,QAAS,0CAFLrsE,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxB8R,EAA2BC,YAAY85D,IAA/BiB,EAAqD76D,YAAAH,EAAA,GAAvC,GAEtB,GAAIhS,EACF,OACE5B,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIa,EACF,OACE7B,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sCAMX,IAAIqU,EAAgB,CAClBqgE,qCAAsC,IAMxC,OAJIxyE,EAAK4sE,eAAetlE,MAAMjK,SAC5B8U,EAAoD,qCAAInS,EAAK4sE,eAAetlE,MAAM,GAAGG,KAAKpH,OAI1FnC,eAACwuE,GAAY,CACXX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACgU,KAAM,CACLC,cAAe,CACbqgE,qCAAsCrgE,EAAoD,sCAG5FG,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACXw6D,EAAW,CACf,CAAEb,QAAS,uCACT9rE,MAAOkS,EAAOigE,uCAGlB,IAAK,IAAIpoE,KAAK4iE,EAEZx2E,QAAQC,IAAI2T,GACZ5T,QAAQC,IAAIu2E,EAAS5iE,GAAG+hE,SACxB31E,QAAQC,IAAIu2E,EAAS5iE,GAAG/J,OAExBysE,EAAe,CAAEnjE,UAAW,CAC1B8I,MAAO,CACL05D,QAASa,EAAS5iE,GAAG+hE,QACrB9rE,MAAO2sE,EAAS5iE,GAAG/J,QAEpBuS,eAAgB,CACf,CAACC,MAAO+4D,GAA2BjiE,UAAW,CAAEwiE,QAASa,EAAS5iE,GAAG+hE,aAExEr5D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACtDkT,SAAUF,KAAMG,SAASC,eAE3B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GAER,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACu0E,GAA8B,CAC7BvhE,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EAAOtU,SAEdzH,QAAQC,IAAI0a,IACkB,KAKzC,KCvHauhE,GAAuBhiE,OAAaC,MAAM,CACnD/P,cAAe8P,OACf7P,YAAa6P,OACb5P,QAAS4P,OACT3P,OAAQ2P,SCyFG9S,iBAAkB6C,aAnFA,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAsBqB,GAAF1U,EAANsT,OAActT,EAAN0U,QAAiB1U,EAAT0G,UAAS,OACrF/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CAaRO,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,gBACLwnB,QAASvZ,EAAO3R,gBAChB1C,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,8BAEnDI,eAACwT,KAAY,CAACpN,KAAK,gBAAgBqN,UAAU,WAE/CnT,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,cACLwnB,QAASvZ,EAAO1R,cAChB3C,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,4BAEnDI,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,WAE7CnT,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,UACLwnB,QAASvZ,EAAOzR,UAChB5C,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,wBAEnDI,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,WAEzCnT,gBAAC6S,KAAKC,MAAK,CAAArT,SAAA,CACTO,gBAAC6S,KAAKwa,MAAK,CAACztB,UAAU,gBAAeH,SAAA,CACjCC,eAACsT,KAAK,CACNpT,UAAU,sBACVoE,KAAK,WACL8B,KAAK,SACLwnB,QAASvZ,EAAOxR,SAChB7C,eAAA,QAAME,UAAU,4BAChBF,eAAA,QAAME,UAAU,4BAA2BH,SAAEH,EAAE,uBAEnDI,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,cAG1CzT,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UACNR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAUJ,KCqBIF,qBAAkB6C,aA7FjC,SAA6B5C,GAAyB,IAAtBC,EAACD,EAADC,EACxBiuE,GADgCluE,EAALyD,MAAczD,EAAP0D,QACjBzD,EAAE,iCACnBsQ,EAAYtQ,EAAE,gCACduvE,EAAgB,UAEtB7rE,EAAiCC,YAAS9B,IAAlCG,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACxB8R,EAA2BC,YAAYnS,IAA/BktE,EAAoD76D,YAAAH,EAAA,GAAtC,GAEtB,GAAIhS,EACF,OACE5B,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAC/BC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIa,EACF,OACE7B,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAC/BC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sCAMX,IAAMmC,EAAeD,EAAKE,kBAE1B,OACEhC,eAACwuE,GAAY,CACXX,eAAgBA,EAChB39D,UAAWA,EACXi/D,cAAeA,EAAcpvE,SAE/BC,eAACgU,KAAM,CACLC,cAAe,CACbwgE,YAAa1yE,EAAa0yE,YAC1B/xE,cAAeX,EAAaW,cAC5BC,YAAaZ,EAAaY,YAC1BC,QAASb,EAAaa,QACtBC,OAAQd,EAAac,QAEvBsR,iBAAkBqgE,GAClBpgE,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACjBs6D,EAAe,CAAEnjE,UAAW,CAC1B8I,MAAO,CACLkgE,YAAapgE,EAAOogE,YACpB/xE,cAAe2R,EAAO3R,cACtBC,YAAa0R,EAAO1R,YACpBC,QAASyR,EAAOzR,QAChBC,OAAQwR,EAAOxR,SAEhB6R,eAAgB,CACf,CAACC,MAAOlT,OAEXmT,MAAK,SAAA9H,GAAOA,EAAJhL,KACL+S,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAAC00E,GAAwB,CACvB1hE,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EAAOtU,SAEdzH,QAAQC,IAAI0a,IACY,KAKnC,KC1DevT,iBAAkB6C,aArCQ,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAiB1U,EAAT0G,UAAS,OAC7F/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qDAAqDG,SAAA,CACxEC,eAACsT,KAAK,CAAChP,KAAK,OACV8B,KAAK,mCACLlG,UAAY+S,EAAO0hE,iCAAoC,0BAA4B,eACnFphE,aAAa,QACfvT,eAACwT,KAAY,CAACpN,KAAK,mCAAmCqN,UAAU,OAAOvT,UAAU,wBAEnFI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gDAAgDG,SAAA,CACnEC,eAACsT,KAAK,CAAChP,KAAK,OACV8B,KAAK,8BACLlG,UAAY+S,EAAO2hE,4BAA+B,0BAA4B,eAC9ErhE,aAAa,QACfvT,eAACwT,KAAY,CAACpN,KAAK,8BAA8BqN,UAAU,OAAOvT,UAAU,2BAGlFF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UACNR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAUJ,KCwFIF,qBAAkB6C,aAvHjC,SAAqC5C,GAAyB,IAAtBC,EAACD,EAADC,EAChCiuE,GADwCluE,EAALyD,MAAczD,EAAP0D,QACzBzD,EAAE,4BACnBsQ,EAAYtQ,EAAE,yCAEpB0D,EAIIC,YAASmqE,GAA2B,CACtCjiE,UAAW,CACTwiE,QAAS,sCALF4G,EAAkBvxE,EAA3B1B,QACOkzE,EAAgBxxE,EAAvBzB,MACMkzE,EAAezxE,EAArBxB,KAMFyJ,EAIIhI,YAASmqE,GAA2B,CACtCjiE,UAAW,CACTwiE,QAAS,iCALF+G,EAAkBzpE,EAA3B3J,QACOqzE,EAAgB1pE,EAAvB1J,MACMqzE,EAAe3pE,EAArBzJ,KAMF8R,EAA2BC,YAAY85D,IAA/BiB,EAAqD76D,YAAAH,EAAA,GAAvC,GAEtB,GAAKihE,GAAwBG,EAC3B,OACEh1E,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAK8zE,GAAqBG,EACxB,OACEj1E,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sCAMX,IAAIqU,EAAgB,CAClB0gE,iCAAkC,KAClCC,4BAA6B,KAS/B,OAPIG,EAAgBrG,eAAetlE,MAAMjK,SACvC8U,EAAgD,iCAAI8gE,EAAgBrG,eAAetlE,MAAM,GAAGG,KAAKpH,OAE/F+yE,EAAgBxG,eAAetlE,MAAMjK,SACvC8U,EAA2C,4BAAIihE,EAAgBxG,eAAetlE,MAAM,GAAGG,KAAKpH,OAI5FnC,eAACwuE,GAAY,CACXX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACgU,KAAM,CACLC,cAAe,CACb0gE,iCAAkC1gE,EAAgD,iCAClF2gE,4BAA6B3gE,EAA2C,6BAG1EG,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACXw6D,EAAW,CACf,CAAEb,QAAS,mCAAoC9rE,MAAOkS,EAAOsgE,kCAC7D,CAAE1G,QAAS,8BAA+B9rE,MAAOkS,EAAOugE,8BAG1D,IAAK,IAAI1oE,KAAK4iE,EACZF,EAAe,CAAEnjE,UAAW,CAC1B8I,MAAO,CACL05D,QAASa,EAAS5iE,GAAG+hE,QACrB9rE,MAAO2sE,EAAS5iE,GAAG/J,QAEpBuS,eAAgB,CACf,CAACC,MAAO+4D,GAA2BjiE,UAAW,CAAEwiE,QAASa,EAAS5iE,GAAG+hE,aAExEr5D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACtDkT,SAAUF,KAAMG,SAASC,eAE3B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GAER,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACm1E,GAAgC,CAC/BniE,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EAAOtU,SAEdzH,QAAQC,IAAI0a,IACoB,KAK3C,KCxFevT,iBAAkB6C,aAjCA,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAiB1U,EAAT0G,UAAS,OACrF/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sDAAsDG,SAAA,CACzEO,gBAACgT,KAAK,CAACG,UAAU,SACfrN,KAAK,4CACLlG,UAAY+S,EAAOmiE,0CAA6C,0BAA4B,eAC5F7hE,aAAa,MAAKxT,SAAA,CAChBC,eAAA,UAAQmC,MAAM,SAAQpC,SAAEH,EAAE,oCAC1BI,eAAA,UAAQmC,MAAM,cAAapC,SAAEH,EAAE,6CAEnCI,eAACwT,KAAY,CAACpN,KAAK,4CAA4CqN,UAAU,OAAOvT,UAAU,0BAGhGF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UACNR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAUJ,KCqFIF,qBAAkB6C,aA9GjC,SAA6B5C,GAAyB,IAAtBC,EAACD,EAADC,EACxBiuE,GADgCluE,EAALyD,MAAczD,EAAP0D,QACjBzD,EAAE,4BACnBsQ,EAAYtQ,EAAE,gCAEpB0D,EAIIC,YAASmqE,GAA2B,CACtCjiE,UAAW,CACTwiE,QAAS,+CALFoH,EAA0B/xE,EAAnC1B,QACO0zE,EAAwBhyE,EAA/BzB,MACM0zE,EAAuBjyE,EAA7BxB,KAMF8R,EAA2BC,YAAY85D,IAA/BiB,EAAqD76D,YAAAH,EAAA,GAAvC,GAEtB,GAAIyhE,EACF,OACEr1E,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIs0E,EACF,OACEt1E,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sCAMX,IAAIqU,EAAgB,CAClBmhE,0CAA2C,IAM7C,OAJIG,EAAwB7G,eAAetlE,MAAMjK,SAC/C8U,EAAyD,0CAAIshE,EAAwB7G,eAAetlE,MAAM,GAAGG,KAAKpH,OAIlHnC,eAACwuE,GAAY,CACXX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACgU,KAAM,CACLC,cAAe,CACbmhE,0CAA2CnhE,EAAyD,2CAGtGG,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACXw6D,EAAW,CACf,CAAEb,QAAS,4CACT9rE,MAAOkS,EAAO+gE,4CAGlB,IAAK,IAAIlpE,KAAK4iE,EAEZx2E,QAAQC,IAAI2T,GACZ5T,QAAQC,IAAIu2E,EAAS5iE,GAAG+hE,SACxB31E,QAAQC,IAAIu2E,EAAS5iE,GAAG/J,OAExBysE,EAAe,CAAEnjE,UAAW,CAC1B8I,MAAO,CACL05D,QAASa,EAAS5iE,GAAG+hE,QACrB9rE,MAAO2sE,EAAS5iE,GAAG/J,QAEpBuS,eAAgB,CACf,CAACC,MAAO+4D,GAA2BjiE,UAAW,CAAEwiE,QAASa,EAAS5iE,GAAG+hE,aAExEr5D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACtDkT,SAAUF,KAAMG,SAASC,eAE3B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GAER,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACw1E,GAAwB,CACvBxiE,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EAAOtU,SAEdzH,QAAQC,IAAI0a,IACY,KAKnC,KCzEevT,iBAAkB6C,aArCc,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAiB1U,EAAT0G,UAAS,OACnG/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,8DAA8DG,SAAA,CACjFC,eAACsT,KAAK,CAAChP,KAAK,OACV8B,KAAK,oDACLlG,UAAY+S,EAAOwiE,kDAAqD,0BAA4B,eACpGliE,aAAa,QACfvT,eAACwT,KAAY,CAACpN,KAAK,oDAAoDqN,UAAU,OAAOvT,UAAU,wBAEpGI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,4DAA4DG,SAAA,CAC/EC,eAACsT,KAAK,CAAChP,KAAK,OACV8B,KAAK,kDACLlG,UAAY+S,EAAOyiE,gDAAmD,0BAA4B,eAClGniE,aAAa,QACfvT,eAACwT,KAAY,CAACpN,KAAK,kDAAkDqN,UAAU,OAAOvT,UAAU,2BAGtGF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UACNR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAUJ,KC+FIF,qBAAkB6C,aA9HjC,SAA2C5C,GAAyB,IAAtBC,EAACD,EAADC,EACtCiuE,GAD8CluE,EAALyD,MAAczD,EAAP0D,QAC/BzD,EAAE,4BACnBsQ,EAAYtQ,EAAE,+CAEpB0D,EAIIC,YAASmqE,GAA2B,CACtCjiE,UAAW,CACTwiE,QAAS,uDALF0H,EAAkBryE,EAA3B1B,QACOg0E,EAAgBtyE,EAAvBzB,MACMg0E,EAAevyE,EAArBxB,KAMFyJ,EAIIhI,YAASmqE,GAA2B,CACtCjiE,UAAW,CACTwiE,QAAS,qDALF6H,EAAgBvqE,EAAzB3J,QACOm0E,EAAcxqE,EAArB1J,MACMm0E,EAAazqE,EAAnBzJ,KAMF8R,EAA2BC,YAAY85D,IAA/BiB,EAAqD76D,YAAAH,EAAA,GAAvC,GAEtB,GAAK+hE,GAAwBG,EAC3B,OACE91E,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAK40E,GAAqBG,EACxB,OACE/1E,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sCAMX,IAAIqU,EAAgB,CAClBwhE,kDAAmD,IACnDC,gDAAiD,KAUnD,OAPIG,EAAgBnH,eAAetlE,MAAMjK,SACvC8U,EAAiE,kDAAI4hE,EAAgBnH,eAAetlE,MAAM,GAAGG,KAAKpH,OAEhH6zE,EAActH,eAAetlE,MAAMjK,SACrC8U,EAA+D,gDAAI+hE,EAActH,eAAetlE,MAAM,GAAGG,KAAKpH,OAI9GnC,eAACwuE,GAAY,CACXX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACgU,KAAM,CACLC,cAAe,CACbwhE,kDAAmDxhE,EAAiE,kDACpHyhE,gDAAiDzhE,EAA+D,iDAGlHG,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAEZ,IAAM67D,EAAW,CACf,CAAEb,QAAS,oDACT9rE,MAAOkS,EAAOohE,mDAChB,CAAExH,QAAS,kDACT9rE,MAAOkS,EAAOqhE,kDAGlB,IAAK,IAAIxpE,KAAK4iE,EACZF,EAAe,CAAEnjE,UAAW,CAC1B8I,MAAO,CACL05D,QAASa,EAAS5iE,GAAG+hE,QACrB9rE,MAAO2sE,EAAS5iE,GAAG/J,QAEpBuS,eAAgB,CACf,CAACC,MAAO+4D,GAA2BjiE,UAAW,CAAEwiE,QAASa,EAAS5iE,GAAG+hE,aAExEr5D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACtDkT,SAAUF,KAAMG,SAASC,eAE3B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GAER,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACi2E,GAAsC,CACrCjjE,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EAAOtU,SAEdzH,QAAQC,IAAI0a,IAC0B,KAKjD,KChGevT,iBAAkB6C,aA9BC,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAiB1U,EAAT0G,UAAS,OACtF/F,gBAAC4S,KAAM,CAAAnT,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACNO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,4CAA4CG,SAAA,CAC/DC,eAACsT,KAAK,CAAChP,KAAK,OACV8B,KAAK,4BACLlG,UAAY+S,EAAOijE,0BAA6B,0BAA4B,eAC5E3iE,aAAa,QACfvT,eAACwT,KAAY,CAACpN,KAAK,4BAA4BqN,UAAU,OAAOvT,UAAU,0BAGhFF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACRC,eAAC2E,KAAM,CACLG,MAAM,UACNR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,wBAUJ,KC0FIF,qBAAkB6C,aAjHjC,SAAqC5C,GAAyB,IAAtBC,EAACD,EAADC,EAChCiuE,GADwCluE,EAALyD,MAAczD,EAAP0D,QACzBzD,EAAE,4BACnBsQ,EAAYtQ,EAAE,yCAEpB0D,EAIIC,YAASmqE,GAA2B,CACtCjiE,UAAW,CACTwiE,QAAS,+BALFkI,EAAsB7yE,EAA/B1B,QACOw0E,EAAoB9yE,EAA3BzB,MACMw0E,EAAmB/yE,EAAzBxB,KAMF8R,EAA2BC,YAAY85D,IAA/BiB,EAAqD76D,YAAAH,EAAA,GAAvC,GAEtB,GAAIuiE,EACF,OACEn2E,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIo1E,EACF,OACEp2E,eAACwuE,GAAY,CACTX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,sCAMX,IAAIqU,EAAgB,CAClBiiE,0BAA2B,KAM7B,OAJIG,EAAoB3H,eAAetlE,MAAMjK,SAC3C8U,EAAyC,0BAAIoiE,EAAoB3H,eAAetlE,MAAM,GAAGG,KAAKpH,OAI9FnC,eAACwuE,GAAY,CACXX,eAAgBA,EAChB39D,UAAWA,EAAUnQ,SAEvBC,eAACgU,KAAM,CACLC,cAAe,CACbiiE,0BAA2BjiE,EAAyC,2BAGtEG,SAAU,SAACC,EAAM9H,EAAqB0G,GAAY,IAA7BqB,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GACZ/b,QAAQC,IAAI0a,GAEZ,IAAM67D,EAAW,CACf,CAAEb,QAAS,4BAA6B9rE,MAAOkS,EAAO6hE,4BAGxD,IAAK,IAAIhqE,KAAK4iE,EAEZx2E,QAAQC,IAAI2T,GACZ5T,QAAQC,IAAIu2E,EAAS5iE,GAAG+hE,SACxB31E,QAAQC,IAAIu2E,EAAS5iE,GAAG/J,OAExBysE,EAAe,CAAEnjE,UAAW,CAC1B8I,MAAO,CACL05D,QAASa,EAAS5iE,GAAG+hE,QACrB9rE,MAAO2sE,EAAS5iE,GAAG/J,QAEpBuS,eAAgB,CACf,CAACC,MAAO+4D,GAA2BjiE,UAAW,CAAEwiE,QAASa,EAAS5iE,GAAG+hE,aAExEr5D,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACtDkT,SAAUF,KAAMG,SAASC,eAE3B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GAER,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACs2E,GAAyB,CACxBtjE,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EAAOtU,SAEdzH,QAAQC,IAAI0a,IACa,KAKpC,KCzGevT,qBAAkB6C,aAbjC,SAA4B5C,GAAgD,IAA7CC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ22D,EAAA/2D,EAAE6G,gBAAQ,IAAAkwD,EAAC,GAAEA,EACrE,OACE12D,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAuB4G,SAAUA,IACrDzG,QAKZ,KCKeL,qBAAkB6C,aAdjC,SAA8B5C,GAAIA,EAADC,EAAwB,IAArB+N,EAAIhO,EAAJgO,KAAM2I,EAAU3W,EAAV2W,WACxC,OACEtW,eAAC0E,IAAI,CAACtC,GAAIuL,EAAK5N,SACbO,gBAACqE,KAAM,CACLC,SAAO,EACPkJ,OAAK,EACLhJ,MAAM,UAAS/E,SAAA,CAEduW,EAAW,IAACtW,eAACmG,KAAI,CAACC,KAAK,sBAIhC,KC+Je1G,I,GAAAA,iBAAkB6C,aAtKjC,SAAwB5C,GAAuB,IAArBC,EAACD,EAADC,EACxB0D,GADgC3D,EAALyD,MAAczD,EAAP0D,QACDE,YAASiH,KAAlC5I,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAQxB,GALAzD,aAAaO,WAAWL,EAAKd,gCAE7BY,aAAaO,WAAWL,EAAKb,2BAGzBkE,EAAS,OACX5B,eAACu2E,GAAmB,CAAAx2E,SAClBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAACu2E,GAAmB,CAAAx2E,SACjBH,EAAE,0CAIP,IAAM2E,EAAOzC,EAAKyC,KAElB,OACEjE,gBAACi2E,GAAmB,CAAC/vE,SAAUjC,EAAKwgB,SAAShlB,SAAA,CACzCwE,EAAKC,YAAcD,EAAKE,SACxBnE,gBAAA,OAAAP,SAAA,CACEC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,gBACNA,EAAE,iCACHI,eAAA,SAAMA,eAAA,SACNA,eAACw2E,GAAqB,CAAC7oE,KAAK,gBAAgB2I,WAAY1W,EAAE,qCAKlEI,eAAA,YAEA,GAEJM,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,gCACNA,EAAE,oCACHI,eAAA,SAAMA,eAAA,SACNA,eAACw2E,GAAqB,CAAC7oE,KAAK,wBAAwB2I,WAAY1W,EAAE,uCAIxEI,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,sCACNA,EAAE,0CACHI,eAAA,SAAMA,eAAA,SACNA,eAACw2E,GAAqB,CAAC7oE,KAAK,8BAA8B2I,WAAY1W,EAAE,uCAI9EI,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,oCACNA,EAAE,wCACHI,eAAA,SAAMA,eAAA,SACNA,eAACw2E,GAAqB,CAAC7oE,KAAK,4BAA4B2I,WAAY1W,EAAE,uCAI5EI,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,sCACNA,EAAE,0CACHI,eAAA,SAAMA,eAAA,SACNA,eAACw2E,GAAqB,CAAC7oE,KAAK,8BAA8B2I,WAAY1W,EAAE,0CAKhFI,eAAA,SAEAM,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,gCACNA,EAAE,oCACHI,eAAA,SAAMA,eAAA,SACNA,eAACw2E,GAAqB,CAAC7oE,KAAK,wBAAwB2I,WAAY1W,EAAE,+CAIxEI,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,qCACNA,EAAE,yCACHI,eAAA,SAAMA,eAAA,SACNA,eAACw2E,GAAqB,CAAC7oE,KAAK,6BAA6B2I,WAAY1W,EAAE,oDAI7EI,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,+BACNA,EAAE,mCACHI,eAAA,SAAMA,eAAA,SACNA,eAACw2E,GAAqB,CAAC7oE,KAAK,uBAAuB2I,WAAY1W,EAAE,uCAIvEI,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,iCACNA,EAAE,qCACHI,eAAA,SAAMA,eAAA,SACNA,eAACw2E,GAAqB,CAAC7oE,KAAK,yBAAyB2I,WAAY1W,EAAE,uCAIzEI,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,sCACNA,EAAE,0CACHI,eAAA,SAAMA,eAAA,SACNA,eAACw2E,GAAqB,CACpB7oE,KAAK,8BACL2I,WAAY1W,EAAE,yCAKtBI,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,wCACNA,EAAE,4CACHI,eAAA,SAAMA,eAAA,SACNA,eAACw2E,GAAqB,CAAC7oE,KAAK,yBAAyB2I,WAAY1W,EAAE,kDAIzEI,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,iCACNA,EAAE,qCACHI,eAAA,SAAMA,eAAA,SACNA,eAACw2E,GAAqB,CAAC7oE,KAAK,gBAAgB2I,WAAY1W,EAAE,gDAOxE,KC/KO,SAAS62E,GAAgB92E,GAC7BA,EAADC,EAME,IALF67D,EAAS97D,EAAT87D,UACAib,EAAS/2E,EAAT+2E,UACA57D,EAAUnb,EAAVmb,WACA5P,EAAUvL,EAAVuL,WACAyrE,EAAWh3E,EAAXg3E,YAEE,OACEr2E,gBAAAwtB,YAAA,CAAA/tB,SAAA,CACEC,eAAA,MAAAD,SAAK22E,EAAU5uE,sBAAsB1B,OACrCpG,eAACmG,KAAI,CAACC,KAAK,UAAU,IAAGuF,KAAO8vD,GAAW7vD,OAAOkP,GAAa,IAAG,IACjExa,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CACzB4L,KAAO8vD,EAAY,IAAMib,EAAUtpE,WAAWxB,OAAOV,GACpDyrE,GAAgBr2E,gBAAAwtB,YAAA,CAAA/tB,SAAA,CAAI,MAAQ4L,KAAO8vD,EAAY,IAAMib,EAAUrpE,SAASzB,OAAOV,SAC5ElL,eAAA,SACPA,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAGswE,EAAUvpE,yBAAyBnF,qBAAqB5B,KAAM,IAAG,IACxFpG,eAAA,QAAME,UAAU,aAAYH,SACxB22E,EAAUvpE,yBAAyB/G,SAa/C,CClCO,IAAMwwE,GAA0Bt9E,YAAGC,QAAAC,YAAA,6jCCmC3BkG,qBAAkB6C,aAvBjC,SAAmC5C,GAAmD,IAAhDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ82E,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EAC/E,OACI72E,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CACVL,MAAO3G,EAAE,sBACT4G,SAAWswE,EAAa/2E,SAExBC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCO,gBAACoE,IAAI,CAACtC,GAAI,wBACJlC,UAAU,oBAAmBH,SAAA,CACjCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAAe,IAAExG,EAAE,uBAI9CG,QAKd,KC2GeL,I,GAAAA,iBAAkB6C,aAvHjC,SAA+B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACnCoxB,EAAchxB,qBAAWxC,IACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBAEzB4rE,EAAe3zE,EAAM2K,OAAOipE,cAC5B/pE,EAAiB7J,EAAM2K,OAAOgpD,SAC9BhqD,EAAO3J,EAAM2K,OAAOhB,KAC1BzJ,EAAqFC,YAASqzE,GAAyB,CACrHnrE,UAAW,CACT8L,GAAIw/D,EACJ9pE,eAAgBA,EAChBF,KAAMA,GAERlB,YAAa,iBANEorE,EAAiB3zE,EAA1B1B,QAAmCs1E,EAAe5zE,EAAtBzB,MAA8Bs1E,EAAc7zE,EAApBxB,KAQ5DyJ,EAAmEhI,YAASiH,IAA3DY,EAAWG,EAApB3J,QAA6ByJ,EAASE,EAAhB1J,MAAwByJ,EAAQC,EAAdzJ,KAChD8R,EAAuCC,YAAY4tC,IAA5C21B,EAA4ErjE,YAAAH,EAAA,GAAhD,GAEnC,GAAIxI,GAAe6rE,EAAmB,OACpCj3E,eAACq3E,GAA0B,CAAAt3E,SACzBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIqK,GAAa6rE,EAAiB,OAChCl3E,eAACq3E,GAA0B,CAAAt3E,SACxBH,EAAE,gDAIP,IAAM2E,EAAO+G,EAAS/G,KACtBjM,QAAQC,IAAI+S,GACZhT,QAAQC,IAAI4+E,GACZ,IAAM5nB,EAAyB4nB,EAAe5nB,uBAG9C,MAA6C,cAAzCA,EAAuBvN,cAEvBhiD,eAACq3E,GAA0B,CAACP,YAAavyE,EAAKwgB,SAAShlB,SACrDC,eAACkH,KAAI,CAAAnH,SACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,MAAAD,SAAKH,EAAE,uDAQZ2vD,EAAuB+nB,qBAc1Bt3E,eAACq3E,GAA0B,CAACP,YAAavyE,EAAKwgB,SAAShlB,SACrDC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CAERC,eAAA,MAAAD,SACGH,EAAE,qDAELI,eAACy2E,GAAgB,CACf72E,EAAGA,EACH67D,UAAW1uD,EACX2pE,UAAWS,EAAe5nB,uBAAuB3N,aACjD9mC,WAAYA,EACZ5P,WAAYA,IAEdlL,eAAA,SACAA,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAAC2E,KAAM,CACLmJ,OAAK,EACL5N,UAAU,OACV4E,MAAM,UACND,KAAK,KACL4L,QAAS,kBACP2mE,EAA6B,CAAE3rE,UAAW,CACxC8I,MAAO,CACLgD,GAAIw/D,EACJ/0B,cAAe,gBAGlBptC,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAK,yBACb2S,KAAMC,QAASlV,EAAE,qCAAuC,CACpDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GAAE,EACH9B,SAEFH,EAAE,sDAvDbI,eAACq3E,GAA0B,CAACP,YAAavyE,EAAKwgB,SAAShlB,SACrDC,eAACkH,KAAI,CAAAnH,SACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,MAAAD,SAAKH,EAAE,6DA+DnB,KC1Iag3E,GAA0Bt9E,YAAGC,QAAAC,YAAA,+jCCiC3BkG,qBAAkB6C,aAvBjC,SAAqC5C,GAAmD,IAAhDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ82E,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EACjF,OACI72E,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CACVL,MAAO3G,EAAE,sBACT4G,SAAWswE,EAAa/2E,SAExBC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCO,gBAACoE,IAAI,CAACtC,GAAI,wBACJlC,UAAU,oBAAmBH,SAAA,CACjCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAAe,IAAExG,EAAE,uBAI9CG,QAKd,KC8GeL,I,GAAAA,iBAAkB6C,aAvHjC,SAAiC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QACrCoxB,EAAchxB,qBAAWxC,IACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBAEzB4rE,EAAe3zE,EAAM2K,OAAOipE,cAC5B/pE,EAAiB7J,EAAM2K,OAAOgpD,SAC9BhqD,EAAO3J,EAAM2K,OAAOhB,KAC1BzJ,EAAqFC,YAASqzE,GAAyB,CACrHnrE,UAAW,CACT8L,GAAIw/D,EACJ9pE,eAAgBA,EAChBF,KAAMA,GAERlB,YAAa,iBANEorE,EAAiB3zE,EAA1B1B,QAAmCs1E,EAAe5zE,EAAtBzB,MAA8Bs1E,EAAc7zE,EAApBxB,KAQ5DyJ,EAAmEhI,YAASiH,IAA3DY,EAAWG,EAApB3J,QAA6ByJ,EAASE,EAAhB1J,MAAwByJ,EAAQC,EAAdzJ,KAChD8R,EAAuCC,YAAY4tC,IAA5C21B,EAA4ErjE,YAAAH,EAAA,GAAhD,GAEnC,GAAIxI,GAAe6rE,EAAmB,OACpCj3E,eAACu3E,GAA4B,CAAAx3E,SAC3BC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIqK,GAAa6rE,EAAiB,OAChCl3E,eAACu3E,GAA4B,CAAAx3E,SAC1BH,EAAE,gDAIP,IAAM2E,EAAO+G,EAAS/G,KACtBjM,QAAQC,IAAI+S,GACZhT,QAAQC,IAAI4+E,GACZ,IAAM5nB,EAAyB4nB,EAAe5nB,uBAG9C,MAA6C,cAAzCA,EAAuBvN,cAEvBhiD,eAACu3E,GAA4B,CAACT,YAAavyE,EAAKwgB,SAAShlB,SACvDC,eAACkH,KAAI,CAAAnH,SACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,MAAAD,SAAKH,EAAE,qDAQZ2vD,EAAuBioB,uBAc1Bx3E,eAACu3E,GAA4B,CAACT,YAAavyE,EAAKwgB,SAAShlB,SACvDC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CAERC,eAAA,MAAAD,SACGH,EAAE,uDAELI,eAACy2E,GAAgB,CACf72E,EAAGA,EACH67D,UAAW1uD,EACX2pE,UAAWS,EAAe5nB,uBAAuB3N,aACjD9mC,WAAYA,EACZ5P,WAAYA,IAEdlL,eAAA,SACAA,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAACqE,KAAM,CACLmJ,OAAK,EACL5N,UAAU,OACV4E,MAAM,UACND,KAAK,KACL4L,QAAS,kBACP2mE,EAA6B,CAAE3rE,UAAW,CACxC8I,MAAO,CACLgD,GAAIw/D,EACJ/0B,cAAe,aAGlBptC,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBuB,EAAQnB,KAAK,yBACb2S,KAAMC,QAASlV,EAAE,uCAAyC,CACtDmV,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GAAE,EACH9B,SAAA,CAEFH,EAAE,2CAA2C,IAACI,eAACmG,KAAI,CAACC,KAAK,gCAvDpEpG,eAACu3E,GAA4B,CAACT,YAAavyE,EAAKwgB,SAAShlB,SACvDC,eAACkH,KAAI,CAAAnH,SACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,MAAAD,SAAKH,EAAE,iEA+DnB,KC5Ia2hD,GAA2BjoD,YAAGC,QAAAC,YAAA,iaC+D5BkG,qBAAkB6C,aAlDjC,SAA8B5C,GAA6C,IAA1CC,EAACD,EAADC,EAAGqN,EAActN,EAAdsN,eAAgBF,EAAIpN,EAAJoN,KAAI0qE,EAAA93E,EAAE+3E,gBAAQ,IAAAD,GAAKA,EAC/DhjD,EAAchxB,qBAAWxC,IACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBAE/B7H,EAAiCC,YAASg+C,GAA0B,CAClE91C,UAAW,CACTwB,eAAgBA,EAChBF,KAAMA,KAHFnL,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAOxB,OAAIF,EACF5B,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,IAE5Ba,EACAjC,EAAE,2CAGNtH,QAAQC,IAAIuJ,GAGRF,GAAYC,EAuBV,GAtBFvB,gBAAA,OAAKJ,UAAU,aAAYH,SAAA,CACzBO,gBAAA,MAAAP,SAAA,CAAIC,eAACmG,KAAI,CAACC,KAAK,SAAS,IACTxG,EAAZ83E,EAAc,gDACA,kDAGjB13E,eAACy2E,GAAgB,CACf72E,EAAGA,EACH67D,UAAW1uD,EACX2pE,UAAW50E,EAAKq6D,cAChBrhD,WAAYA,EACZ5P,WAAYA,IAEdlL,eAAA,SACE8B,EAAKq6D,cAAc/F,gBACnB91D,gBAAA,OAAAP,SAAA,CACEO,gBAAA,MAAAP,SAAA,CAAIC,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAExG,EAAE,yCAC5BI,eAAA,OAAKwM,wBAAyB,CAAEC,OAAQC,KAAUC,SAAS7K,EAAKq6D,cAAc/F,uBAE9E,MAKZ,KCxBe12D,qBAAkB6C,aAvBjC,SAAiC5C,GAAmD,IAAhDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ82E,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EAC7E,OACI72E,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CACVL,MAAO3G,EAAE,sBACT4G,SAAWswE,EAAa/2E,SAExBC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCO,gBAACoE,IAAI,CAACtC,GAAI,wBACJlC,UAAU,oBAAmBH,SAAA,CACjCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,eAAe,IAAExG,EAAE,uBAI9CG,QAKd,KCeeL,I,GAAAA,iBAAkB6C,aAnCjC,SAA6B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAChCE,GAD8C3D,EAAP0D,QACNE,YAASiH,KAAlC5I,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAClBmL,EAAiB7J,EAAM2K,OAAOgpD,SAC9BhqD,EAAO3J,EAAM2K,OAAOhB,KAE1B,GAAInL,EAAS,OACX5B,eAAC23E,GAAwB,CAAA53E,SACvBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAAC23E,GAAwB,CAAA53E,SACtBH,EAAE,gDAIP,IAAM2E,EAAOzC,EAAKyC,KAGlB,OACEvE,eAAC23E,GAAwB,CAACb,YAAavyE,EAAKwgB,SAAShlB,SACnDC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,iCAAiCG,SAC9CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAC43E,GAAqB,CACpB3qE,eAAgBA,EAChBF,KAAMA,EACN2qE,UAAU,SAMtB,KC7CaG,GAA4Bv+E,YAAGC,QAAAC,YAAA,qzBCS7BkG,sBAPf,SAAwBC,GAAIA,EAADC,EAAiC,IAAhCkR,EAAAnR,EAAE0G,iBAAS,IAAAyK,EAAC,gBAAeA,EAErD,OACE9Q,eAAC6G,GAAU,CAACR,UAAWA,GAE3B,ICmBe3G,qBAAkB6C,aAjBjC,SAA+B5C,GAAmD,IAAhDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ82E,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EAC3E,OACE72E,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAuB4G,SAAWswE,EAAa/2E,SACjEC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC83E,GAAe,QAGpB/3E,QAKZ,KC0GeL,qBAAkB6C,aA/GjC,SAA+B5C,GAAuB,IAArBC,EAACD,EAADC,EAEzBkb,GAFiCnb,EAALyD,MAAczD,EAAP0D,QACrBI,qBAAWxC,IACA6Z,YAC/BxX,EAAmEC,YAASiH,IAA3DY,EAAW9H,EAApB1B,QAA6ByJ,EAAS/H,EAAhBzB,MAAwByJ,EAAQhI,EAAdxB,KAChDyJ,EAA4ChI,YAASs0E,GAA2B,CAC9ErsE,KAAMJ,GAAeC,IAAcC,EACnCG,UAAW,CACTqZ,QAASxZ,GAAYA,EAAS/G,KAAO+G,EAAS/G,KAAKmH,UAAY,MAEjEG,YAAa,iBALPjK,EAAO2J,EAAP3J,QAASC,EAAK0J,EAAL1J,MAAOC,EAAIyJ,EAAJzJ,KAAMuP,EAAS9F,EAAT8F,UAS9B,GAAIzP,GAAWwJ,IAAgBtJ,EAAM,OACnC9B,eAAC+3E,GAA0B,CAAAh4E,SACzBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASwJ,EAAW,OACtBrL,eAAC+3E,GAA0B,CAAAh4E,SACxBH,EAAE,iDAIP,IAAM2E,EAAOzC,EAAKyC,KACZ5B,EAAcb,EAAK8hC,mBAGzB,OAAKjhC,EAAYyG,MAAMjK,OAkBrBa,eAAC+3E,GAA0B,CAACjB,YAAavyE,EAAKwgB,SAAShlB,SACrDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,kCACxB0Q,aAAa,EACbZ,SAAU/M,EAAY+M,SACtBG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO9O,EAAY+M,SAASgC,WAE9BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB+xB,mBAAmBx6B,MAC9CsG,EAAWmC,EAAgB+xB,mBAAmBl0B,SAEpD,OAAOoC,EAAS3S,OACZ,CAGEykC,mBAAoB,CAClB7xB,WAAYH,EAAegyB,mBAAmB7xB,WAC9C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAegyB,mBAAmBx6B,OAAK4I,aAAKF,IACxDpC,aAGJkC,CACN,GAEJ,EAAE7R,SACFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,sBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,iCAJNiN,kBAOlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACR4C,EAAYyG,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKs6B,sBAAsBz9B,OAE9BpG,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKsY,WAAWjW,OAAOkP,KAEjC9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAKuY,SAASlW,OAAOkP,KAE/B9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAKkyC,4BAXM5uC,eAaJ,iBArExB7M,eAAC+3E,GAA0B,CAACjB,YAAavyE,EAAKwgB,SAAShlB,SACrDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACkH,KAAI,CAACgJ,UAAWtQ,EAAE,kCAAkCG,SACnDC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,gDAyEnB,KCrGeF,qBAAkB6C,aAjBjC,SAA+B5C,GAAmD,IAAhDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ82E,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EAC3E,OACE72E,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAuB4G,SAAWswE,EAAa/2E,SACjEC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC83E,GAAe,QAGpB/3E,QAKZ,KC0GeL,I,MAAAA,iBAAkB6C,aA5GjC,SAAgC5C,GAAuB,IAArBC,EAACD,EAADC,EAE1Bkb,GAFkCnb,EAALyD,MAAczD,EAAP0D,QACtBI,qBAAWxC,IACA6Z,YAC/BxX,EAAmEC,YAASiH,IAA3DY,EAAW9H,EAApB1B,QAA6ByJ,EAAS/H,EAAhBzB,MAAwByJ,EAAQhI,EAAdxB,KAChDyJ,EAA4ChI,YAASunD,GAA0C,CAC7Ft/C,KAAMJ,GAAeC,IAAcC,EACnCG,UAAW,CACTqZ,QAASxZ,GAAYA,EAAS/G,KAAO+G,EAAS/G,KAAKmH,UAAY,MAEjEG,YAAa,iBALPjK,EAAO2J,EAAP3J,QAASC,EAAK0J,EAAL1J,MAAOC,EAAIyJ,EAAJzJ,KAAMuP,EAAS9F,EAAT8F,UAQ9B,GAAIzP,GAAWwJ,IAAgBtJ,EAAM,OACnC9B,eAACg4E,GAAsB,CAAAj4E,SACrBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASwJ,EAAW,OACtBrL,eAACg4E,GAAsB,CAAAj4E,SACpBH,EAAE,mDAIP,IAAM2E,EAAO+G,EAAS/G,KAChB0zE,EAAen2E,EAAKqpD,4BAG1B,OAAK8sB,EAAa7uE,MAAMjK,OAkBtBa,eAACg4E,GAAsB,CAAClB,YAAavyE,EAAKwgB,SAAShlB,SACjDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACiO,GAAW,CAACiC,UAAWtQ,EAAE,oCACxB0Q,aAAa,EACbZ,SAAUuoE,EAAavoE,SACvBG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOwmE,EAAavoE,SAASgC,WAE/BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBs5C,4BAA4B/hD,MACvDsG,EAAWmC,EAAgBs5C,4BAA4Bz7C,SAE7D,OAAOoC,EAAS3S,OACZ,CAGE84E,aAAc,CACZlmE,WAAYH,EAAeu5C,4BAA4Bp5C,WACvD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeu5C,4BAA4B/hD,OAAK4I,aAAKF,IACjEpC,aAGJkC,CACN,GAEJ,EAAE7R,SACFO,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,oBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,wBAHNiN,kBAMlB7M,eAACiS,KAAM9K,KAAI,CAAApH,SACRk4E,EAAa7uE,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC7BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAK6hD,oBAAoBC,cAAcjlD,KAAK,IAACpG,eAAA,SAC9CA,eAACuI,KAAK,CAAAxI,SAAEwJ,EAAK6hD,oBAAoBhlD,OAAa,IAAE,IAC9CmD,EAAK+hD,UAAatrD,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,uBAAgC,MAEhFI,eAACiS,KAAMxM,IAAG,CAAA1F,SACP4L,KAAOpC,EAAK6hD,oBAAoBC,cAAcxpC,WAAWjW,OAAOkP,KAEnE9a,eAACiS,KAAMxM,IAAG,CAAA1F,SACPwJ,EAAK6hD,oBAAoBC,cAAcrjD,qBAAqB5B,SAVjDyG,eAYJ,iBAnExB7M,eAACg4E,GAAsB,CAAClB,YAAavyE,EAAKwgB,SAAShlB,SACjDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACkH,KAAI,CAACgJ,UAAWtQ,EAAE,oCAAoCG,SACrDC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,kDAuEnB,KC/Ha8jB,GAAoBpqB,YAAGC,QAAAC,YAAA,ovDA8FvB0+E,GAAsB5+E,YAAGI,QAAAF,YAAA,iLClEvBkG,qBAAkB6C,aAjBjC,SAAsC5C,GAAmD,IAAhDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ82E,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EAClF,OACI72E,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAuB4G,SAAWswE,EAAa/2E,SACnEC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC83E,GAAe,CAACzxE,UAAU,+BAG7BtG,QAKd,KCoGeL,qBAAkB6C,aA/GjC,SAAkC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAC/BmU,GAD6C5X,EAAP0D,QACjCD,EAAM2K,OAAOwJ,IAClB4gE,EAAwBv4E,EAAE,sCAE1Bw4E,EAAY13D,iBAAO,MACnB23D,EAAiB/3E,gBAAA,QAAAP,SAAA,CAAMC,eAACmG,KAAI,CAACC,KAAK,gBAAgB,IAAExG,EAAE,oCAAoC,IAACI,eAACmG,KAAI,CAACC,KAAK,qBAC5GsQ,EAA+BC,mBAAS0hE,GAAezhE,EAAA7C,YAAA2C,EAAA,GAAhD4hE,EAAQ1hE,EAAA,GAAE2hE,EAAU3hE,EAAA,GAG3BtT,EAAmEC,YAASiH,IAA3DY,EAAW9H,EAApB1B,QAA6ByJ,EAAS/H,EAAhBzB,MAAwByJ,EAAQhI,EAAdxB,KAChDyJ,EAAiChI,YAASmgB,GAAmB,CAC3DlY,KAAMJ,GAAeC,IAAcC,EACnCG,UAAW,CACT8L,GAAIA,GAEN1L,YAAa,iBALPjK,EAAO2J,EAAP3J,QAASC,EAAK0J,EAAL1J,MAAOC,EAAIyJ,EAAJzJ,KAQxB8R,EAA4BC,YAAYqkE,IAAjCM,EAAqDzkE,YAAAH,EAAA,GAApC,GAoBxB,GAAIhS,GAAWwJ,IAAgBtJ,EAAM,OACnC9B,eAACy4E,GAA6B,CAAA14E,SAC5BC,eAACkH,KAAI,CAACX,MAAO4xE,EAAsBp4E,SACjCC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,UAKtC,GAAIa,GAASwJ,EAAW,OACtBrL,eAACy4E,GAA6B,CAAA14E,SAC5BC,eAACkH,KAAI,CAACX,MAAO4xE,EAAsBp4E,SACjCC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,yDAMXtH,QAAQC,IAAI,kBACZD,QAAQC,IAAIuJ,GACZ,IAAMyC,EAAO+G,EAAS/G,KAChBm0E,EAAU52E,EAAKgkB,eAGrB,OACE9lB,eAACy4E,GAA6B,CAAC3B,YAAavyE,EAAKwgB,SAAShlB,SACxDO,gBAAC4G,KAAI,CAACX,MAAOjG,gBAAA,QAAAP,SAAA,CAAOH,EAAE,mBAAmB,KAAG84E,EAAQh0D,iBAAsB3kB,SAAA,CACxEO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACN24E,EAAQz2E,MAAMmH,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC/BjJ,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACbwJ,EAAKyc,YAAY,IAAChmB,eAAA,SACnBA,eAAA,SAAOE,UAAU,aAAYH,SAC1BwJ,EAAKV,iBAGV7I,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAAA,QAAME,UAAU,cAAaH,SAC1BwJ,EAAK2b,mBAGD,IAGb5kB,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,OAAMH,SAAA,CAC/BC,eAAA,SACCJ,EAAE,oBAELI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAA,QAAMJ,UAAU,mBAAkBH,SAAA,CAChCC,eAAA,SACC04E,EAAQxzD,wBAKjBllB,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVC,eAAA,UACEE,UAAU,8BACVigB,IAAKi4D,EACL3nE,QAhFV,WACE2nE,EAAUh3D,QAAQu3D,aAAa,WAAY,YAC3CJ,EAAW34E,EAAE,sCAIb44E,EAAkB,CAAE/sE,UAAW,CAAE8L,GAAIA,KAAQ3C,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACnDxJ,QAAQC,IAAI,WAAYuJ,GACxB,IAAM82E,EAAc92E,EAAK+2E,gCAAgCC,0BAA0BF,YACnFtpE,OAAO0O,SAAS9Z,KAAO00E,CACzB,IAAG1jE,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACF,EAgEgC9B,SAErBu4E,UAMb,KCtGe54E,qBAAkB6C,aAbjC,SAA4C5C,GAAmD,IAAhDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ82E,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EACxF,OACI72E,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAuB4G,SAAWswE,IACtD/2E,QAKd,KC8FeL,I,GAAAA,iBAAkB6C,aAhGjC,SAAwC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACrCmU,GADmD5X,EAAP0D,QACvCD,EAAM2K,OAAOwJ,IAClB4gE,EAAwBv4E,EAAE,sCAGhC0D,EAAmEC,YAASiH,IAA3DY,EAAW9H,EAApB1B,QAA6ByJ,EAAS/H,EAAhBzB,MAAwByJ,EAAQhI,EAAdxB,KAChDyJ,EAAiChI,YAASmgB,GAAmB,CAC3DlY,KAAMJ,GAAeC,IAAcC,EACnCG,UAAW,CACT8L,GAAIA,KAHA3V,EAAO2J,EAAP3J,QAASC,EAAK0J,EAAL1J,MAAOC,EAAIyJ,EAAJzJ,KAOxB,GAAIF,GAAWwJ,IAAgBtJ,EAAM,OACnC9B,eAAC+4E,GAAmC,CAAAh5E,SAClCC,eAACkH,KAAI,CAACX,MAAO4xE,EAAsBp4E,SACjCC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,UAKtC,GAAIa,GAASwJ,EAAW,OACtBrL,eAAC+4E,GAAmC,CAAAh5E,SAClCC,eAACkH,KAAI,CAACX,MAAO4xE,EAAsBp4E,SACjCC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,gEAMX,IAGIo5E,EAHEz0E,EAAO+G,EAAS/G,KAChBm0E,EAAU52E,EAAKgkB,eAcrB,OAVEkzD,EADqB,SAAnBN,EAAQhwE,OACF1I,eAACsrB,KAAK,CAAChnB,KAAK,UAAUjC,KAAK,QAAOtC,SACvCH,EAAE,0DAGGI,eAACsrB,KAAK,CAAChnB,KAAK,UAAUjC,KAAK,cAAatC,SAC7CH,EAAE,+DAMLU,gBAACy4E,GAAmC,CAACjC,YAAavyE,EAAKwgB,SAAShlB,SAAA,CAC7Di5E,EACD14E,gBAAC4G,KAAI,CAACX,MAAOjG,gBAAA,QAAAP,SAAA,CAAOH,EAAE,mBAAmB,KAAG84E,EAAQh0D,iBAAsB3kB,SAAA,CACxEO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACN24E,EAAQz2E,MAAMmH,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC/BjJ,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SAAA,CACbwJ,EAAKyc,YAAY,IAAChmB,eAAA,SACnBA,eAAA,SAAOE,UAAU,aAAYH,SAC1BwJ,EAAKV,iBAGV7I,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAAA,QAAME,UAAU,cAAaH,SAC1BwJ,EAAK2b,mBAGD,IAGb5kB,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,EAAG5G,UAAU,OAAMH,SAAA,CAC/BC,eAAA,SACCJ,EAAE,oBAELI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdO,gBAAA,QAAMJ,UAAU,mBAAkBH,SAAA,CAChCC,eAAA,SACC04E,EAAQxzD,wBAKjBllB,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVC,eAAC0E,IAAI,CAACtC,GAAG,yBAAwBrC,SAC/BO,gBAACqE,KAAM,CACLG,MAAM,UACN5E,UAAU,cAAaH,SAAA,CAEtBH,EAAE,kDAAkD,IAACI,eAACmG,KAAI,CAACC,KAAK,8BAO/E,KC/Ga6yE,GAAyB3/E,YAAGC,QAAAC,YAAA,q5BC0B1BkG,qBAAkB6C,aAjBjC,SAAgC5C,GAAmD,IAAhDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ82E,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EAC5E,OACI72E,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAuB4G,SAAWswE,EAAa/2E,SACnEC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC83E,GAAe,QAGlB/3E,QAKd,KC0KeL,I,GAAAA,iBAAkB6C,aA1KjC,SAA4B5C,GAAuB,IAArBC,EAACD,EAADC,EACtB60B,GAD8B90B,EAALyD,MAAczD,EAAP0D,QAClBI,qBAAWxC,KACzB6Z,EAAa2Z,EAAY3Z,WACzBo+D,EAA0BzkD,EAAYykD,wBAG5C51E,EAAmEC,YAASiH,IAA3DY,EAAW9H,EAApB1B,QAA6ByJ,EAAS/H,EAAhBzB,MAAwByJ,EAAQhI,EAAdxB,KAChDyJ,EAA4ChI,YAAS01E,GAAwB,CAC3EztE,KAAMJ,GAAeC,IAAcC,EACnCG,UAAW,CACTqZ,QAASxZ,GAAYA,EAAS/G,KAAO+G,EAAS/G,KAAKmH,UAAY,MAEjEG,YAAa,iBALPjK,EAAO2J,EAAP3J,QAASC,EAAK0J,EAAL1J,MAAOC,EAAIyJ,EAAJzJ,KAAMuP,EAAS9F,EAAT8F,UAO9BuC,EAAyBC,YAAYpa,GAA9B2e,EAA4CrE,YAAAH,EAAA,GAA9B,GAErB,GAAIhS,GAAWwJ,IAAgBtJ,EAAM,OACnC9B,eAACm5E,GAAuB,CAAAp5E,SACtBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASwJ,EAAW,OACtBrL,eAACm5E,GAAuB,CAAAp5E,SACrBH,EAAE,8CAIPtH,QAAQC,IAAI,kBACZD,QAAQC,IAAIuJ,GACZ,IAAMyC,EAAO+G,EAAS/G,KAChB6f,EAAWtiB,EAAKwjB,gBAGtB,OAAKlB,EAAShb,MAAMjK,OAkBlBa,eAACm5E,GAAuB,CAACrC,YAAavyE,EAAKwgB,SAAShlB,SAClDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfO,gBAAC0nD,GACC,CACAt4C,SAAU0U,EAAS1U,SACnBG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO2S,EAAS1U,SAASgC,WAE3BC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgByT,gBAAgBlc,MAC3CsG,EAAWmC,EAAgByT,gBAAgB5V,SAEjD,OAAOoC,EAAS3S,OACZ,CAGEmmB,gBAAiB,CACfvT,WAAYH,EAAe0T,gBAAgBvT,WAC3C3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe0T,gBAAgBlc,OAAK4I,aAAKF,IACrDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAAA,CAEFC,eAAA,MAAAD,SAAKH,EAAE,iCACPI,eAACI,KAAKC,IAAG,CAAAN,SACNqkB,EAAShb,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACzBvJ,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHO,gBAAC4G,KAAKN,OAAM,CAAA7G,SAAA,CACVC,eAAC0E,IAAI,CAACtC,GAAE,yBAAA0M,OAA2BvF,EAAKgO,IAAKxX,SAC3CC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEwJ,EAAKmb,kBAEpB1kB,eAACkH,KAAKgQ,QAAO,CAAAnX,SACXC,eAACwjB,GAAqB,CAAC9a,OAAQa,EAAKb,cAGtCa,EAAKkb,UACLnkB,gBAAC4G,KAAKokB,MAAK,CAACxmB,MAAM,UAAS/E,SAAA,CACxBH,EAAE,sCAAsC,KAAEI,eAAA,KAAAD,SAAIwJ,EAAKkb,SAASre,UAGjEpG,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,QAAME,UAAU,YAAWH,SACxBwJ,EAAK4R,YAGRnb,eAACiS,KAAK,CAAC7F,OAAK,EAAArM,SACVO,gBAAC2R,KAAM9K,KAAI,CAAApH,SAAA,CACTO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMxM,IAAG,CAAA1F,SAAE4L,KAAOpC,EAAKyb,UAAUpZ,OAAOkP,QAE3Cxa,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,0BACpBI,eAACiS,KAAMxM,IAAG,CAAA1F,SAAE4L,KAAOpC,EAAK0b,SAASrZ,OAAOkP,QAE1Cxa,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMxM,IAAG,CAAA1F,SAAEwJ,EAAK2b,kBAEnB5kB,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAACC,eAAA,KAAAD,SAAIH,EAAE,wCACvBI,eAACiS,KAAMxM,IAAG,CAAA1F,SAACC,eAAA,KAAAD,SAAIwJ,EAAK4b,2BAI5B7kB,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACS,SAAhBwJ,EAAKb,QAAqC,YAAhBa,EAAKb,SAAyBwwE,EASvD,GARFl5E,eAAC0E,IAAI,CAACtC,GAAI,iCAAmCmH,EAAKgO,GAAGxX,SACnDO,gBAACqE,KAAM,CACLzE,UAAU,cACV4E,MAAM,UAAS/E,SAAA,CAEdH,EAAE,oCAAoC,IAACI,eAACmG,KAAI,CAACC,KAAK,uBAKzDpG,eAAC2E,KAAM,CACLC,SAAO,EACPE,MAAM,UACNzC,KAAK,UACLnC,UAAU,OACVuQ,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAAQ,yBAADyL,OAA2BvF,EAAKgO,IAC3D,EAACxX,SAEDH,EAAE,iBAELI,eAAC0E,IAAI,CAACtC,GAAE,yBAAA0M,OAA2BvF,EAAKgO,IAAKxX,SAC3CC,eAAC2E,KAAM,CACLC,SAAO,EACPE,MAAM,UACNzC,KAAK,YACLnC,UAAU,OAAMH,SAEfH,EAAE,8BAKF,eA5HrBI,eAACm5E,GAAuB,CAACrC,YAAavyE,EAAKwgB,SAAShlB,SAClDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACkH,KAAI,CAACgJ,UAAWtQ,EAAE,+BAA+BG,SAChDC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,6CA+HnB,KC/Law5E,GAAwB9/E,YAAGC,QAAAC,YAAA,y3CC2BzBkG,qBAAkB6C,aAlBjC,SAA+B5C,GAAyE,IAAtEC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAUq+B,EAAoBz+B,EAApBy+B,qBAAoBy4C,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EACjG,OACI72E,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAuB4G,SAAWswE,EAAa/2E,SACnEO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAC83E,GAAe,CAACzxE,UAAU,2BAC1B+3B,OAGHr+B,QAKd,KC6HeL,I,MAAAA,iBAAkB6C,aAjIjC,SAA2B5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACxBqxB,GADsC90B,EAAP0D,QACjBI,qBAAWxC,KACzB6Z,EAAa2Z,EAAY3Z,WACzBo+D,EAA0BzkD,EAAYykD,wBAEtCzoD,EAAYrtB,EAAM2K,OAAOwJ,GAG/BjU,EAAiCC,YAAS61E,GAAuB,CAC/D3tE,UAAW,CACT8L,GAAIkZ,GAEN5kB,YAAa,iBAJPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAQxB,GAAIF,EAAS,OACX5B,eAACq5E,GAAsB,CAAAt5E,SACrBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAACq5E,GAAsB,CAAAt5E,SACpBH,EAAE,6CAIP,IAAM2E,EAAOzC,EAAKyC,KACZm0E,EAAU52E,EAAKgkB,eAEfsY,EAA4C,SAAnBs6C,EAAQhwE,QAAwC,YAAnBgwE,EAAQhwE,SAAyBwwE,EASzF,GARFl5E,eAAC0E,IAAI,CAACtC,GAAI,iCAAmCs2E,EAAQnhE,GAAGxX,SACtDO,gBAACqE,KAAM,CACLzE,UAAU,mBACV4E,MAAM,UAAS/E,SAAA,CAEdH,EAAE,oCAAoC,IAACI,eAACmG,KAAI,CAACC,KAAK,uBAMzD,OACEpG,eAACq5E,GAAsB,CAACvC,YAAavyE,EAAKwgB,SAAUqZ,qBAAsBA,EAAqBr+B,SAC7FC,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACfC,eAAA,OAAKE,UAAU,cAAaH,SAC1BC,eAACwjB,GAAqB,CAAC9a,OAAQgwE,EAAQhwE,WAEzCpI,gBAAA,MAAAP,SAAA,CAAKH,EAAE,8BAA8B,IAAE84E,EAAQh0D,iBAC7Cg0D,EAAQj0D,UACNnkB,gBAACgrB,KAAK,CAAChnB,KAAK,UAASvE,SAAA,CAClBH,EAAE,sCAAsC,KAAEI,eAAA,KAAAD,SAAI24E,EAAQj0D,SAASre,UAGtE9F,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKC,KAAI,CAAApH,SACP24E,EAAQv9D,UAEXnb,eAACiS,KAAK,CAAC7F,OAAK,EAAArM,SACVO,gBAAC2R,KAAM9K,KAAI,CAAApH,SAAA,CACTO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMxM,IAAG,CAAA1F,SAAE4L,KAAO+sE,EAAQ1zD,UAAUpZ,OAAOkP,KAC5C9a,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,0BACpBI,eAACiS,KAAMxM,IAAG,CAAA1F,SAAE4L,KAAO+sE,EAAQzzD,SAASrZ,OAAOkP,QAE7Cxa,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,mBACpBI,eAACiS,KAAMxM,IAAG,CAAA1F,SAAE24E,EAAQxzD,eACpBllB,eAACiS,KAAMC,UAAS,CAAAnS,SAACC,eAAA,KAAAD,SAAIH,EAAE,wCACvBI,eAACiS,KAAMxM,IAAG,CAAA1F,SAACC,eAAA,KAAAD,SAAI24E,EAAQvzD,8BAK/BnlB,eAAA,MAAAD,SAAKH,EAAE,mBACN84E,EAAQz2E,MAAMmH,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC9BvJ,eAACkH,KAAI,CAAAnH,SACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAAA,CAC9BC,eAAA,MAAAD,SAAKwJ,EAAKyc,cACTzc,EAAKV,eAER7I,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC5Bu5E,WAAW/vE,EAAK4c,UAAY,EAAQ7lB,gBAAA,OAAAP,SAAA,CACpCO,gBAAA,KAAAP,SAAA,CAAIwJ,EAAK4c,SAAS,IAAEvmB,EAAE,+BAA+B,OAAKI,eAAA,SACzDuJ,EAAK+tB,aAAa,IAAE13B,EAAE,mBAChB,KAEXI,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC9BO,gBAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,eAAA,KAAAD,SAAIwJ,EAAK2b,eAAiBllB,eAAA,oBAK7B,IAEP04E,EAAQvsD,SAAS/iB,MAAMjK,OACvBmB,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAAA,MAAAD,SAAKH,EAAE,sBACN84E,EAAQvsD,SAAS/iB,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACnCvJ,eAACkH,KAAI,CAAAnH,SACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAAA,CAC9BC,eAAA,MAAAD,SAAK4L,KAAOpC,EAAKwD,MAAMnB,OAAOkP,KAC7BvR,EAAKohB,qBAAqBvkB,QAE7BpG,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC9BO,gBAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,eAAA,KAAAD,SAAIwJ,EAAK0iB,gBAAkBjsB,eAAA,oBAK9B,OAGT,SAKZ,KCnJau5E,GAA+BjgF,YAAGC,QAAAC,YAAA,irBAwClCggF,GAA4ClgF,YAAGI,QAAAF,YAAA,uOCd7CkG,qBAAkB6C,aAjBjC,SAAoC5C,GAAmD,IAAhDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ82E,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EAChF,OACE72E,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAuB4G,SAAWswE,EAAa/2E,SACjEC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC83E,GAAe,QAGpB/3E,QAKZ,KCgEeL,qBAAkB6C,aAzEjC,SAAmC5C,GAA6C,IAA1CC,EAACD,EAADC,EAAG65E,EAAW95E,EAAX85E,YACvC/iE,GAD2D/W,EAAP+5E,QAAO/5E,EAAEoB,OACzB4V,oBAAS,IAAMC,EAAA7C,YAAA2C,EAAA,GAA9C1D,EAAY4D,EAAA,GAAEtC,EAAasC,EAAA,GAChChD,EAAqCC,YAAY2lE,IAAzCG,EAAmF5lE,YAAAH,EAAA,GAA3D,GAEhC,SAASgmE,EAA2BpI,GAClCl9D,GAAc,GAEdqlE,EAAyB,CAAEluE,UAAW,CACpC8I,MAAO,CACLi9D,gBAAiBA,IAElB98D,eAAgB,CACjB,CAACC,MAAO4kE,OAET3kE,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,uEAAyE,CACxFmV,SAAUF,KAAMG,SAASC,eAE3BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACF,CAEF,OACEtU,eAAC0kC,KAAW,CAAA3kC,SACVO,gBAACokC,KAAYG,QAAO,CAAA9kC,SAAA,CAClBO,gBAAA,OAAAP,SAAA,CACAC,eAAA,QAAME,UAAU,cAAaH,SAC3B05E,EAAYI,WAAc75E,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAC,eAAqB,KAExEC,eAAA,MAAAD,SAAK05E,EAAYrzE,UAGjBpG,eAAA,MAAAD,SAAK05E,EAAY9H,YACjB3xE,eAAA,OAAKwM,wBAAyB,CAAEC,OAAQC,KAAUC,SAAS8sE,EAAY5wE,gBAErE4wE,EAAYI,WACR75E,eAAC2E,KAAM,CACLG,MAAM,YACNgJ,OAAK,EACLlJ,SAAO,EACP8O,SAAUV,EACVvC,QAAS,kBAAMmpE,EAA2BH,EAAYjI,gBAAgB,EAACzxE,SAGrEH,EADCoT,EACC,2CACA,4CAGNhT,eAAC2E,KAAM,CACLG,MAAM,UACNgJ,OAAK,EACLlJ,SAAO,EACP8O,SAAUV,EACVvC,QAAS,kBAAMmpE,EAA2BH,EAAYjI,gBAAgB,EAACzxE,SAGrEH,EADCoT,EACC,yCACA,8CAOpB,KCVetT,I,MAAAA,iBAAkB6C,aA/DjC,SAAgC5C,GAAuB,IAArBC,EAACD,EAADC,EAChC0D,GADwC3D,EAALyD,MAAczD,EAAP0D,QACyBE,YAASiH,KAA3DY,EAAW9H,EAApB1B,QAA6ByJ,EAAS/H,EAAhBzB,MAAwByJ,EAAQhI,EAAdxB,KAChDyJ,EAAiChI,YAASg2E,GAA8B,CACtE/tE,KAAMJ,GAAeC,IAAcC,EACnCG,UAAW,CACTqZ,QAASxZ,GAAYA,EAAS/G,KAAO+G,EAAS/G,KAAKmH,UAAY,QAH3D9J,EAAO2J,EAAP3J,QAASC,EAAK0J,EAAL1J,MAAOC,EAAIyJ,EAAJzJ,KAOxB,GAAIF,GAAWwJ,IAAgBtJ,EAAM,OACnC9B,eAAC85E,GAA2B,CAAA/5E,SAC1BC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASwJ,EAAW,OACtBrL,eAAC85E,GAA2B,CAAA/5E,SACzBH,EAAE,mDAIP,IAAM2E,EAAOzC,EAAKyC,KACZw1E,EAAej4E,EAAKwvE,qBAG1B,OAAKyI,EAAa3wE,MAAMjK,OAkBtBmB,gBAACw5E,GAA2B,CAAChD,YAAavyE,EAAKwgB,SAAShlB,SAAA,CACtDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAAA,MAAAD,SAAKH,EAAE,0CAGXI,eAACI,KAAKC,IAAG,CAAAN,SACNg6E,EAAa3wE,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC7BvJ,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC9BC,eAACg6E,GAA0B,CACzBP,YAAalwE,KAGN,SA7BfvJ,eAAC85E,GAA2B,CAAChD,YAAavyE,EAAKwgB,SAAShlB,SACtDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACkH,KAAI,CAACgJ,UAAWtQ,EAAE,oCAAoCG,SACrDC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,kDA6BnB,KCzEaq6E,GAAuB3gF,YAAGC,QAAAC,YAAA,sxCAkE1Bw9B,GAAe19B,YAAGI,QAAAF,YAAA,sLCtChBkG,qBAAkB6C,aAjBjC,SAA8B5C,GAAmD,IAAhDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ82E,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EAC1E,OACI72E,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAuB4G,SAAWswE,EAAa/2E,SACnEC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC83E,GAAe,QAGlB/3E,QAKd,KC7BO,SAASm6E,GAA4BxxE,GACxC,OAAOA,GACH,IAAM,WAEN,IAAM,mBACJ,MAAO,OACT,IAAM,OAEN,IAAM,YACJ,MAAO,QACT,IAAK,YACH,MAAO,SACT,QACE,MAAO,GAEjB,CCkLehJ,I,GAAAA,iBAAkB6C,aAtKjC,SAA0B5C,GAAuB,IAArBC,EAACD,EAADC,EACpB60B,GAD4B90B,EAALyD,MAAczD,EAAP0D,QAChBI,qBAAWxC,KAGzBmxB,EAFaqC,EAAY3Z,WAEK,IADjB2Z,EAAYtpB,iBAEzB+tE,EAA0BzkD,EAAYykD,wBAG5C51E,EAAmEC,YAASiH,IAA3DY,EAAW9H,EAApB1B,QAA6ByJ,EAAS/H,EAAhBzB,MAAwByJ,EAAQhI,EAAdxB,KAChDyJ,EAA4ChI,YAAS02E,GAAsB,CACzEzuE,KAAMJ,GAAeC,IAAcC,EACnCG,UAAW,CACTqZ,QAASxZ,GAAYA,EAAS/G,KAAO+G,EAAS/G,KAAKmH,UAAY,MAEjEG,YAAa,iBALPjK,EAAO2J,EAAP3J,QAASC,EAAK0J,EAAL1J,MAAOC,EAAIyJ,EAAJzJ,KAAMuP,EAAS9F,EAAT8F,UAO9BuC,EAAwBC,YAAYmjB,IAA5BC,EAAyCljB,YAAAH,EAAA,GAA9B,GAEnB,GAAIhS,GAAWwJ,IAAgBtJ,EAAM,OACnC9B,eAACm6E,GAAqB,CAAAp6E,SACpBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASwJ,EAAW,OACtBrL,eAACm6E,GAAqB,CAAAp6E,SACnBH,EAAE,iDAIPtH,QAAQC,IAAI,kBACZD,QAAQC,IAAIuJ,GACZ,IAAMyC,EAAO+G,EAAS/G,KAChB+tB,EAASxwB,EAAKywB,cAGpB,OAAKD,EAAOlpB,MAAMjK,OAkBhBa,eAACm6E,GAAqB,CAACrD,YAAavyE,EAAKwgB,SAAShlB,SAChDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfO,gBAAC0nD,GACC,CACAt4C,SAAU4iB,EAAO5iB,SACjBG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO6gB,EAAO5iB,SAASgC,WAEzBC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgB0gB,cAAcnpB,MACzCsG,EAAWmC,EAAgB0gB,cAAc7iB,SAE/C,OAAOoC,EAAS3S,OACZ,CAGEozB,cAAe,CACbxgB,WAAYH,EAAe2gB,cAAcxgB,WACzC3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAe2gB,cAAcnpB,OAAK4I,aAAKF,IACnDpC,aAGJkC,CACN,GAEJ,EAAE7R,SAAA,CACFC,eAAA,MAAAD,SAAKH,EAAE,+BACN0yB,EAAOlpB,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACvBjJ,gBAAA,OAAAP,SAAA,CACEC,eAAA,QAAME,UAAU,aAAYH,SAC1BC,eAAC+xB,GAAkB,CAACrpB,OAAQa,EAAKb,WAEnC1I,eAAA,SAAOE,UAAU,aAAYH,SAC1B4L,KAAOpC,EAAKipB,WAAW5mB,OAAOwmB,KAEjC9xB,gBAAC4G,KAAI,CAAC4gB,YAAaoyD,GAA4B3wE,EAAKb,QAAQ3I,SAAA,CAC1DO,gBAAC4G,KAAKN,OAAM,CAAA7G,SAAA,CACVC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SAAEH,EAAE,iBAAmB,KAAO2J,EAAK4oB,cAC9C7xB,gBAAC4G,KAAKgQ,QAAO,CAAAnX,SAAA,CACO,aAAhBwJ,EAAKb,QAAyC,qBAAhBa,EAAKb,OACnC1I,eAAC2E,KAAM,CACLC,SAAO,EACPE,MAAM,UACND,KAAK,KACL4L,QAAS,kBCzH5B,SAAoB9Q,GAAkF,IAAhFC,EAACD,EAADC,EAAGsZ,EAAUvZ,EAAVuZ,WAAYC,EAAcxZ,EAAdwZ,eAAgBC,EAAUzZ,EAAVyZ,WAAYghE,EAAcz6E,EAAdy6E,eAAgB9gE,EAAiB3Z,EAAjB2Z,kBACtF,OACEC,wBAAa,CACXC,SAAU,SAAAjN,GAAkB,IAAfkN,EAAOlN,EAAPkN,QACX,OACEnZ,gBAAA,OAAgBJ,UAAU,YAAWH,SAAA,CACnCC,eAAA,MAAAD,SAAKH,EAAE,wCACNsZ,EACAC,EACDnZ,eAAA,UAAQE,UAAU,0BAA0BuQ,QAASgJ,EAAQ1Z,SAAEH,EAAE,2CACjEI,eAAA,UACEE,UAAU,iCACVuQ,QAAS,WACP2pE,EAAe9gE,GACZ1E,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACPxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QACJsE,EAAY,CACVrE,SAAUF,KAAMG,SAASC,cAE/B,IAAGC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,IACF4X,GACF,EAAE1Z,SAEDH,EAAE,8CAxBGiN,eA4Bd,GAGN,CDqFyCwtE,CAAY,CACzBz6E,EAAGA,EACHsZ,WAAYtZ,EAAE,0CACduZ,eAAgBnZ,eAAA,KAAAD,SAAIH,EAAE,iBAAmB,KAAO2J,EAAK4oB,cACrD/Y,WAAYxZ,EAAE,uCACdw6E,eAAgBnjD,EAChB3d,kBAAmB,CACjB7N,UAAW,CACT8I,MAAO,CACLgD,GAAIhO,EAAKgO,GACT7O,OAAQ,gBAId,EAAC3I,SAEFH,EAAE,oBAEL,GACgB,qBAAhB2J,EAAKb,QAAiCwwE,EACtCl5E,eAAC0E,IAAI,CAACtC,GAAI,0BAA4BmH,EAAKgO,GAAGxX,SAC5CO,gBAACqE,KAAM,CACLzE,UAAU,OACV4E,MAAM,UACND,KAAK,KAAI9E,SAAA,CAERH,EAAE,kCAAkC,IAACI,eAACmG,KAAI,CAACC,KAAK,uBAGrD,SAGN9F,gBAAC2R,KAAK,CAAC7F,OAAK,EAAArM,SAAA,CACVC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,qBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,yBACpBI,eAACiS,KAAMC,UAAS,CAAAnS,SAACC,eAAA,QAAME,UAAU,cAAaH,SAAEH,EAAE,0BAGtDU,gBAAC2R,KAAM9K,KAAI,CAAApH,SAAA,CACRwJ,EAAKtH,MAAMmH,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OAC3BjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,CAAA1F,SAAEwJ,EAAKyc,cACjBhmB,eAACiS,KAAMxM,IAAG,CAAA1F,SAAEwJ,EAAKV,cACjB7I,eAACiS,KAAMxM,IAAG,CAAA1F,SAACC,eAAA,QAAME,UAAU,cAAaH,SAAEwJ,EAAK2b,mBACrC,IAEd5kB,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMxM,IAAG,IACVzF,eAACiS,KAAMxM,IAAG,IACVzF,eAACiS,KAAMxM,IAAG,CAAA1F,SAACC,eAAA,QAAME,UAAU,mBAAkBH,SAAEwJ,EAAK2b,+BAKxD,aAvHdllB,eAACm6E,GAAqB,CAACrD,YAAavyE,EAAKwgB,SAAShlB,SAChDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACkH,KAAI,CAACgJ,UAAWtQ,EAAE,6BAA6BG,SAC9CC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,2CAyHnB,KE3La06E,GAAiBhhF,YAAGC,QAAAC,YAAA,4MC6BlBkG,sBApBf,SAA0CC,GAAkB,IAAfC,EAACD,EAADC,EAE3CgU,GAFqDjU,EAAP0D,QAErBwQ,YAAYpa,IAA9B2e,EAA4CrE,YAAAH,EAAA,GAA9B,GAIrB,OACE5T,eAAC2E,KAAM,CACLG,MAAM,YACNzC,KAAK,WACLnC,UAAU,OACVuQ,QAAS,kBAAM0H,GACbvY,EAAGwY,EAAgB/U,EAXN,yBAYd,EAACtD,SAEDH,EAAE,0CAGT,ICSeF,qBAAkB6C,aAxBjC,SAA+B5C,GAAmD,IAAhDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ82E,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EAEvExwE,EAAYhI,aAAa0E,QAAQxE,EAAKb,2BAK1C,OAJK2I,IACHA,EAAY,iBAIZrG,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAuB4G,SAAWswE,EAAa/2E,SACnEO,gBAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,eAAC83E,GAAe,CAACzxE,UAAWA,IAC5BrG,eAACu6E,GAAiC,SAGpCx6E,QAKZ,KC4IeL,iBAAkB6C,aA3JF,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQoB,EAAM1U,EAAN0U,OAAQhO,EAAS1G,EAAT0G,UAAWuZ,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAa,OACnH7f,eAACkT,KAAM,CAAAnT,SACLO,gBAAC4G,KAAI,CAACX,MAAO3G,EAAE,8BAA8BG,SAAA,CAC3CO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,YACLlG,UAAY+S,EAAOpI,UAAa,0BAA4B,eAC5D0I,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,0BAG9DF,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qBAAqBG,SAAA,CACxCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,WACLlG,UAAY+S,EAAOnI,SAAY,0BAA4B,eAC3DyI,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,6BAI/DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACRC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACpCO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,yBAAyBG,SAAA,CAC5CC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOgoC,YACjBvgC,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,cAAe9S,EAAK,EACtDiP,OAAQ,kBAAM4D,EAAgB,eAAe,EAAK,IAEpD5f,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,0BAGhEF,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCO,gBAACgT,KAAK,CAACG,UAAU,SACXrN,KAAK,SACLlG,UAAY+S,EAAOkjC,uBAA0B,0BAA4B,eACzE5iC,aAAa,MAAKxT,SAAA,CACtBC,eAAA,UAAQmC,MAAM,KACdnC,eAAA,UAAQmC,MAAM,IAAGpC,SAAEH,EAAE,oBACrBI,eAAA,UAAQmC,MAAM,IAAGpC,SAAEH,EAAE,kBACrBI,eAAA,UAAQmC,MAAM,IAAGpC,SAAEH,EAAE,sBAEvBI,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,6BAI7DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,QACLlG,UAAY+S,EAAOgY,MAAS,0BAA4B,eACxD1X,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,0BAG1DF,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gCAAgCG,SAAA,CACnDC,eAACsT,KAAK,CAAChP,KAAK,OACL8B,KAAK,YACLlG,UAAY+S,EAAOqpC,UAAa,0BAA4B,eAC5D/oC,aAAa,QACpBvT,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,6BAIhEI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,iBAAiBG,SAAA,CACpCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,QACLlG,UAAY+S,EAAO+X,MAAS,0BAA4B,eACxDzX,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,0BAG1DF,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,kBAAkBG,SAAA,CACrCC,eAACsT,KAAK,CAAChP,KAAK,OACL8B,KAAK,SACLlG,UAAY+S,EAAO4oC,OAAU,0BAA4B,eACzDtoC,aAAa,QACpBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,6BAI7DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,UACLlG,UAAY+S,EAAO8X,QAAW,0BAA4B,eAC1DxX,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,0BAG5DF,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAACsT,KAAK,CAAChP,KAAK,OACL8B,KAAK,WACLlG,UAAY+S,EAAOspC,SAAY,0BAA4B,eAC3DhpC,aAAa,QACpBvT,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,6BAI/DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,gBAAgBG,SAAA,CACnCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,OACLlG,UAAY+S,EAAOupC,KAAQ,0BAA4B,eACvDjpC,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,OAAOqN,UAAU,OAAOvT,UAAU,0BAGzDF,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,mBAAmBG,SAAA,CACtCO,gBAACgT,KAAK,CAACG,UAAU,SACVrN,KAAK,UACLlG,UAAY+S,EAAOwpC,QAAW,0BAA4B,eAC1DlpC,aAAa,MAAKxT,SAAA,CACvBC,eAAA,UAAQmC,MAAM,KACZi6C,GAAkB9vC,KAChB,SAAAmwC,GAAO,OAAIz8C,eAAA,UAAQmC,MAAOs6C,EAAQC,KAAK38C,SAAa08C,EAAQE,MAAf9vC,eAA6B,OAGhF7M,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,gCAK/DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,6BAKR,KC3KE46E,GAAyBhoE,OAAaC,MAAM,CACrD5H,UAAW2H,OACRK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdkL,SAAU0H,OACPK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdqrB,MAAOzY,OACJyY,MAAMrrB,YAAE,cACR+S,SAAS/S,YAAE,yBAGL66E,GAAyBjoE,OAAaC,MAAM,CACrD5H,UAAW2H,OACRK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdkL,SAAU0H,OACPK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdqrB,MAAOzY,OACJyY,MAAMrrB,YAAE,cACR+S,SAAS/S,YAAE,uBACdmrB,QAASvY,OACNK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACd28C,SAAU/pC,OACPK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACd48C,KAAMhqC,OACHK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACd68C,QAASjqC,OACNK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdorB,MAAOxY,OACJK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBC8FHF,I,GAAAA,iBAAkB6C,aAjHjC,SAA2B5C,GAAuB,IAArBC,EAACD,EAADC,EAC3B0D,GADmC3D,EAALyD,MAAczD,EAAP0D,QACJE,YAASiH,KAAlC5I,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KACxB8R,EAA0BC,YAAYymE,IAA9BI,EAA6C3mE,YAAAH,EAAA,GAAhC,GAErB,GAAIhS,EAAS,OACX5B,eAACg4E,GAAsB,CAAAj4E,SACrBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAACg4E,GAAsB,CAAAj4E,SACpBH,EAAE,6CAMP,IAAM2E,EAAOzC,EAAKyC,KAEd4P,EAAmBqmE,GACI,YAAvBj2E,EAAKo2E,gBACPxmE,EAAmBsmE,IAGrB,IAAIp+B,EAAc,KAKlB,OAJI93C,EAAK83C,cACPA,EAAc,IAAIn5C,KAAKqB,EAAK83C,cAI5Br8C,eAACg4E,GAAsB,CAAClB,YAAavyE,EAAKwgB,SAAShlB,SACjDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACgU,KAAM,CACLC,cAAe,CACbpJ,UAAWtG,EAAKsG,UAChBC,SAAUvG,EAAKuG,SACfmgB,MAAO1mB,EAAK0mB,MACZoxB,YAAaA,EACbsC,OAAQp6C,EAAKo6C,OACbrC,UAAW/3C,EAAK+3C,UAChBtxB,MAAOzmB,EAAKymB,MACZ6wB,OAAQt3C,EAAKs3C,OACb9wB,QAASxmB,EAAKwmB,QACdwxB,SAAUh4C,EAAKg4C,SACfC,KAAMj4C,EAAKi4C,KACXC,QAASl4C,EAAKk4C,SAEhBtoC,iBAAkBA,EAClBC,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ,IAAIuqC,EAAa,CACfrnC,GAAIhT,EAAKmH,UACTb,UAAWwJ,EAAOxJ,UAClBC,SAAUuJ,EAAOvJ,SACjBmgB,MAAO5W,EAAO4W,MACd0zB,OAAQtqC,EAAOsqC,OACfrC,UAAWjoC,EAAOioC,UAClBtxB,MAAO3W,EAAO2W,MACd6wB,OAAQxnC,EAAOwnC,OACf9wB,QAAS1W,EAAO0W,QAChBwxB,SAAUloC,EAAOkoC,SACjBC,KAAMnoC,EAAOmoC,KACbC,QAASpoC,EAAOooC,SAGdpoC,EAAOgoC,cACTuC,EAAwB,YAAItgC,GAAejK,EAAOgoC,cAGpDq+B,EAAc,CAAEjvE,UAAW,CACzB8I,MAAOqqC,GACNlqC,eAAgB,KAMlBE,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxB+S,KAAMC,QAASlV,EAAE,2CAA6C,CAC1DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC46E,GAAsB,CACrB5nE,aAAcA,EACd4M,gBAAiBA,EACjBC,cAAeA,EACf5M,OAAQA,EACRoB,OAAQA,EACRhO,UAAW,iBACX,SAOhB,KC/Haw0E,GAA8BvhF,YAAGC,QAAAC,YAAA,y0BC0B/BkG,qBAAkB6C,aAjBjC,SAA+B5C,GAAmD,IAAhDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ82E,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EAC3E,OACE72E,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAuB4G,SAAWswE,EAAa/2E,SACjEC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC83E,GAAe,QAGpB/3E,QAKZ,KCqHeL,I,GAAAA,iBAAkB6C,aAxHjC,SAAiC5C,GAAuB,IAArBC,EAACD,EAADC,EAE3Bkb,GAFmCnb,EAALyD,MAAczD,EAAP0D,QACvBI,qBAAWxC,IACA6Z,YAG/BxX,EAAmEC,YAASiH,IAA3DY,EAAW9H,EAApB1B,QAA6ByJ,EAAS/H,EAAhBzB,MAAwByJ,EAAQhI,EAAdxB,KAChDyJ,EAA4ChI,YAASs3E,GAA6B,CAChFrvE,KAAMJ,GAAeC,IAAcC,EACnCG,UAAW,CACTqZ,QAASxZ,GAAYA,EAAS/G,KAAO+G,EAAS/G,KAAKmH,UAAY,MAEjEG,YAAa,iBALPjK,EAAO2J,EAAP3J,QAASC,EAAK0J,EAAL1J,MAAOC,EAAIyJ,EAAJzJ,KAAMuP,EAAS9F,EAAT8F,UAS9B,GAAIzP,GAAWwJ,IAAgBtJ,EAAM,OACnC9B,eAAC86E,GAA4B,CAAA/6E,SAC3BC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASwJ,EAAW,OACtBrL,eAAC86E,GAA4B,CAAA/6E,SAC1BH,EAAE,mDAIP,IAAM2E,EAAOzC,EAAKyC,KACZ7B,EAAgBZ,EAAK+pD,qBAG3B,OAAKnpD,EAAc0G,MAAMjK,OAkBvBa,eAAC86E,GAA4B,CAAChE,YAAavyE,EAAKwgB,SAAShlB,SACvDC,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACfC,eAAA,MAAAD,SAAKH,EAAE,sCACPI,eAACgoD,GACC,CACAt4C,SAAUhN,EAAcgN,SACxBG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAO/O,EAAcgN,SAASgC,WAEhCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBg6C,qBAAqBziD,MAChDsG,EAAWmC,EAAgBg6C,qBAAqBn8C,SAEtD,OAAOoC,EAAS3S,OACZ,CAGE0sD,qBAAsB,CACpB95C,WAAYH,EAAei6C,qBAAqB95C,WAChD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAei6C,qBAAqBziD,OAAK4I,aAAKF,IAC1DpC,aAGJkC,CACN,GAEJ,EAAE7R,SAGA2C,EAAc0G,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC/BvJ,eAACkH,KAAI,CAAAnH,SACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAI1G,GAAI,GAAG/G,SACvBO,gBAAA,OAAKJ,UAAU,UAASH,SAAA,CACtBC,eAAA,MAAAD,SACIwJ,EAAKu6B,yBAAyB19B,OAGlCpG,eAACmG,KAAI,CAACC,KAAK,aAAa,IAAGuF,KAAOpC,EAAKsY,WAAWjW,OAAOkP,GACtDvR,EAAKuY,SAAYxhB,gBAAA,QAAAP,SAAA,CAAM,MAAI4L,KAAOpC,EAAKuY,SAASlW,OAAOkP,WAG9D9a,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAI1G,GAAI,EAAE/G,SACtBC,eAAC0E,IAAI,CAACtC,GAAE,+BAAA0M,OAAiCvF,EAAKgO,GAAE,YAAWxX,SACzDO,gBAACqE,KAAM,CACLmJ,OAAK,EACLlJ,SAAO,EACPE,MAAM,OACND,KAAK,KAAI9E,SAAA,CAEPwJ,EAAKu6B,yBAAyB8D,UAC9BhoC,EAAE,qBAAuB2J,EAAKwiD,YAAa,IAAE,IAC9CnsD,EAAE,gCAvBJiN,eA6BJ,aA9Ef7M,eAAC86E,GAA4B,CAAChE,YAAavyE,EAAKwgB,SAAShlB,SACvDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACkH,KAAI,CAACgJ,UAAWtQ,EAAE,oCAAoCG,SACrDC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,kDAgFnB,KC1Iam7E,GAAqCzhF,YAAGC,QAAAC,YAAA,m4CC0BtCkG,qBAAkB6C,aAjBjC,SAA2C5C,GAAmD,IAAhDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ82E,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EACvF,OACE72E,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAuB4G,SAAWswE,EAAa/2E,SACjEC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC6G,GAAU,CAACR,UAAS,oCAGzBtG,QAKZ,KCoKeL,qBAAkB6C,aAzKjC,SAAuC5C,GAAuB,IAArBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACpCqxB,GADkD90B,EAAP0D,QAC7BI,qBAAWxC,KACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBAGzBqsC,EAAiBp0C,EAAM2K,OAAO0pC,gBACpCn0C,EAAmEC,YAASiH,IAA3DY,EAAW9H,EAApB1B,QAA6ByJ,EAAS/H,EAAhBzB,MAAwByJ,EAAQhI,EAAdxB,KAChDyJ,EAA4ChI,YAASw3E,GAAoC,CACvFvvE,KAAMJ,GAAeC,IAAcC,EACnCG,UAAW,CACTq3C,oBAAqBtL,GAEvB3rC,YAAa,iBALPjK,EAAO2J,EAAP3J,QAASC,EAAK0J,EAAL1J,MAAOC,EAAIyJ,EAAJzJ,KAAMuP,EAAS9F,EAAT8F,UAQ9B,GAAIzP,GAAWwJ,IAAgBtJ,EAAM,OACnC9B,eAACg7E,GAAkC,CAAAj7E,SACjCC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASwJ,EAAW,OACtBrL,eAACg7E,GAAkC,CAAAj7E,SAChCH,EAAE,mDAIP,IAAM2E,EAAO+G,EAAS/G,KAChB02E,EAAsBn5E,EAAKqtD,2BAIjC,OAHiCrtD,EAAKghD,oBAAoBhf,yBAG7B8D,UAEzB5nC,eAACg7E,GAAkC,CAAClE,YAAavyE,EAAKwgB,SAAShlB,SAC7DC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACkH,KAAI,CAACgJ,UAAWtQ,EAAE,4CAA4CG,SAC7DC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAAC4G,KAAKokB,MAAK,CAACxmB,MAAM,UAAS/E,SAAA,CAACC,eAACmG,KAAI,CAACC,KAAK,UAAU,IAAExG,EAAE,6DAU9Dq7E,EAAoB7xE,MAAMjK,OAoB7Ba,eAACg7E,GAAkC,CAAClE,YAAavyE,EAAKwgB,SAAShlB,SAC7DC,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACfC,eAAA,MAAAD,SAAKH,EAAE,8CACPI,eAACgoD,GACC,CACAt4C,SAAUurE,EAAoBvrE,SAC9BG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOwpE,EAAoBvrE,SAASgC,WAEtCC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBs9C,2BAA2B/lD,MACtDsG,EAAWmC,EAAgBs9C,2BAA2Bz/C,SAE5D,OAAOoC,EAAS3S,OACZ,CAGEgwD,2BAA4B,CAC1Bp9C,WAAYH,EAAeu9C,2BAA2Bp9C,WACtD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAeu9C,2BAA2B/lD,OAAK4I,aAAKF,IAChEpC,aAGJkC,CACN,GAEJ,EAAE7R,SAGAk7E,EAAoB7xE,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACrCvJ,eAACkH,KAAI,CAAY4gB,YAAeve,EAAKgmD,uBAAsC,UAAZ,UAAsBxvD,SACnFC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAI1G,GAAI,EAAE/G,SACtBO,gBAAA,OAAKJ,UAAU,UAASH,SAAA,CACtBC,eAAA,SAAOE,UAAU,aAAYH,SAC1BH,EAAE,iDAELU,gBAAA,MAAAP,SAAA,CACI4L,KAAOpC,EAAKipB,WAAW5mB,OAAOkP,GAChC9a,eAAA,OAAAD,SAAKO,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAC,IAAEwJ,EAAKV,iBAEvCU,EAAK6lD,YAAepvD,eAAA,OAAAD,SACrBO,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC1BH,EAAE,oDAAoD,IAAG+L,KAAOpC,EAAK6lD,YAAYxjD,OAAOkP,gBAMnG9a,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAI1G,GAAI,EAAE/G,SACtBO,gBAAA,OAAKJ,UAAU,UAASH,SAAA,CACtBC,eAAA,SAAOE,UAAU,aAAYH,SAC1BH,EAAE,mDAELI,eAAA,MAAAD,SACI4L,KAAOpC,EAAK8lD,YAAYzjD,OAAOkP,UAIvC9a,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAI1G,GAAI,EAAE/G,SACtBO,gBAAA,OAAKJ,UAAU,UAASH,SAAA,CACtBC,eAAA,SAAOE,UAAU,aAAYH,SAC1BH,EAAE,+CAEF2J,EAAKgmD,uBAMNvvD,eAAA,MAAAD,SAAIC,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,+CAJ5B+L,OAAWA,KAAOpC,EAAK8lD,YACzBrvD,eAAA,MAAAD,SAAIC,eAACuI,KAAK,CAACzD,MAAM,SAAQ/E,SAAEH,EAAE,kDAC7BI,eAAA,MAAAD,SAAIC,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,oDAK9B2J,EAAKgmD,wBAA2BjvD,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC7DC,eAAA,OAAAD,SAAA,GAAA+O,OACMnD,KAAOpC,EAAKgmD,uBAAuBxiD,MAAMnB,OAAOkP,GAAW,mCAAAhM,OAC7DnD,KAAOpC,EAAKgmD,uBAAuBxiD,KAAO,IAAMxD,EAAKgmD,uBAAuB3N,aAAax0C,WAAWxB,OAAOV,GAAW,oCAAA4D,OACpHvF,EAAKgmD,uBAAuB3N,aAAa95C,sBAAsB1B,QAEpEmD,EAAKgmD,uBAAuB3N,aAAaz0C,yBAAyBnF,qBAAqB5B,mBAlDzFyG,eAwDJ,aA3Gf7M,eAACg7E,GAAkC,CAAClE,YAAavyE,EAAKwgB,SAAShlB,SAC7DC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACkH,KAAI,CAACgJ,UAAWtQ,EAAE,4CAA4CG,SAC7DC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,0DA6GnB,KCrKeF,iBAAkB6C,aARP,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAC,OAC5BI,eAAC0E,IAAI,CAACtC,GAAI,gBAAgBrC,SACxBO,gBAACqE,KAAM,CAACG,MAAM,yBAAwB/E,SAAA,CACpCC,eAACmG,KAAI,CAACqR,OAAO,KAAKpR,KAAK,kBAAkB,IAAExG,EAAE,oBAE1C,KCHMF,qBAAkB6C,aAVjC,SAA0B5C,GAAyD,IAAtDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ0G,EAAA9G,EAAE+G,yBAAiB,IAAAD,EAAC,GAAEA,EAE5E,OACEzG,eAACgH,GAAQ,CAACT,MAAO3G,EAAE,2BAA4B8G,kBAAmBA,EAAkB3G,SAC/EA,GAGT,KCyDeL,qBAAkB6C,aAxDjC,SAAkC5C,GAAkC,IAAhCC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAASm4C,EAAS77C,EAAT67C,UAC/Cwf,EAAmB53D,EAAM2K,OAAOgpD,SAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAE1B4wD,EAAc,CAClB,aAAgB3C,EAChB,iBAAoBxf,EAAUoK,iBAAiBruC,GAC/C,KAAQ8jD,EACR,eAAkB,YAClB,eAAiB,EACjB,cAAiB,UAGnBznD,EAA2CC,YAAY0pD,IAAgCK,EAAA7pD,YAAAH,EAAA,GAAhFiqD,EAAYD,EAAA,GAAAE,EAAAF,EAAA,GAAIh8D,EAAOk8D,EAAPl8D,QAASC,EAAKi8D,EAALj8D,MAEhC,OAAID,EACKhC,EAAE,uBAGPiC,EACKjC,EAAE,4BAITU,gBAACqE,KAAM,CACLmJ,OAAK,EACLlJ,SAAO,EACPE,MAAM,UACN2L,QAAS,kBAAMotD,EAAa,CAC1BpyD,UAAW,CAAE,MAASkyD,GACtBjpD,eAAgB,KAGfE,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACLxJ,QAAQC,IAAI,WAAYuJ,GAExBxJ,QAAQC,IAAI,oBACZ8K,EAAQnB,KAAK,wBAAD4M,OAAyBksD,EAAgB,KAAAlsD,OAAIusD,GAM3D,IAAGnmD,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GAAE,EAAC9B,SAAA,CAENH,EAAE,gBAAgB,IAACI,eAACmG,KAAI,CAACC,KAAK,oBAGrC,KCvBe1G,qBAAkB6C,aA7BjC,SAAiC5C,GAAsC,IAAnCC,EAACD,EAADC,EAAmB+C,GAAXhD,EAALyD,MAAczD,EAAP0D,QAAoB1D,EAAXgD,aAIrD,OAHArK,QAAQC,IAAI,eACZD,QAAQC,IAAIoK,GAGVA,EAAY2J,KAAI,SAACkvC,GAAS,OACxBx7C,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,EAAG3G,GAAI,EAAGo0E,GAAI,EAAEn7E,SACpCO,gBAAC4G,KAAI,CACH4gB,YAAY,OACZvhB,MAAO3G,EAAE,qBAAqBG,SAAA,CAChCO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,KAAAD,SAAIy7C,EAAUoK,iBAAiB/hB,sBAAsBz9B,OAASpG,eAAA,SAC9DM,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CACzBH,EAAE,6BAA6B,KAAG47C,EAAUoK,iBAAiBnK,wBAAwB,IAACz7C,eAAA,SACtFJ,EAAE,uBAAuB,KAAG+L,KAAO6vC,EAAUoK,iBAAiB9jC,SAASlW,OAAO,MAAM,IAAC5L,eAAA,eAG1FA,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACPy7C,EAAUmd,QACX34D,eAACm7E,GAAyB,CAAC3/B,UAAWA,IADhB57C,EAAE,2DAKnB,GAGjB,KC6BeF,qBAAkB6C,aAxDjC,SAAqC5C,GAAqC,IAAnCC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAASi4C,EAAY37C,EAAZ27C,aAClD0f,EAAmB53D,EAAM2K,OAAOgpD,SAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAE1B4wD,EAAc,CAClB,aAAgB3C,EAChB,oBAAuB1f,EAAawH,oBAAoBvrC,GACxD,KAAQ8jD,EACR,eAAkB,eAClB,eAAiB,EACjB,cAAiB,UAGnBznD,EAA2CC,YAAY0pD,IAAgCK,EAAA7pD,YAAAH,EAAA,GAAhFiqD,EAAYD,EAAA,GAAAE,EAAAF,EAAA,GAAIh8D,EAAOk8D,EAAPl8D,QAASC,EAAKi8D,EAALj8D,MAEhC,OAAID,EACKhC,EAAE,uBAGPiC,EACKjC,EAAE,4BAITU,gBAACqE,KAAM,CACLmJ,OAAK,EACLlJ,SAAO,EACPE,MAAM,UACN2L,QAAS,kBAAMotD,EAAa,CAC1BpyD,UAAW,CAAE,MAASkyD,GACtBjpD,eAAgB,KAGfE,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACLxJ,QAAQC,IAAI,WAAYuJ,GAExBxJ,QAAQC,IAAI,oBACZ8K,EAAQnB,KAAK,wBAAD4M,OAAyBksD,EAAgB,KAAAlsD,OAAIusD,GAM3D,IAAGnmD,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GAAE,EAAC9B,SAAA,CAENH,EAAE,gBAAgB,IAACI,eAACmG,KAAI,CAACC,KAAK,oBAGrC,KC5Be1G,qBAAkB6C,aA3BjC,SAAmC5C,GAAwC,IAArCC,EAACD,EAADC,EAEpC,OAF4CD,EAALyD,MAAczD,EAAP0D,QAAsB1D,EAAb+C,cAGvC4J,KAAI,SAACgvC,GAAY,OAC7Bt7C,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,EAAG3G,GAAI,EAAGo0E,GAAI,EAAEn7E,SACpCO,gBAAC4G,KAAI,CACH4gB,YAAY,OACZvhB,MAAO3G,EAAE,wBAAwBG,SAAA,CACnCO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,KAAAD,SAAIu7C,EAAawH,oBAAoBhf,yBAAyB19B,OAASpG,eAAA,SACvEA,eAAA,QAAME,UAAU,aAAYH,SACxBu7C,EAAawH,oBAAoBhf,yBAAyB8D,UAAahoC,EAAE,qBAC3EU,gBAAA,QAAAP,SAAA,CAAOH,EAAE,mCAAmC,KAAG07C,EAAa8iB,sBAGhEp+D,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACPu7C,EAAaqd,QACd34D,eAACo7E,GAA4B,CAAC9/B,aAAcA,IADnB17C,EAAE,8DAKtB,GAGjB,KCJeF,qBAAkB6C,aAnBjC,SAA8B5C,GAA8B,IAA5BC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBgjB,GAAFzmB,EAAP0D,QAAc1D,EAALymB,OACjD9tB,QAAQC,IAAI6tB,GACZ,IAAMu/B,EAAcv/B,EAAM7O,GACpBtK,EAAiB7J,EAAM2K,OAAOgpD,SAC9B0E,EAAYr4D,EAAM2K,OAAOhB,KAE/B,OACE/M,eAAC0E,IAAI,CAACtC,GAAE,mBAAA0M,OAAqB62C,EAAW,KAAA72C,OAAI7B,EAAc,KAAA6B,OAAI2sD,GAAY17D,SAC1EO,gBAACqE,KAAM,CACLmJ,OAAK,EACLlJ,SAAO,EACPE,MAAM,UAAS/E,SAAA,CAEdH,EAAE,kCAAkC,IAACI,eAACmG,KAAI,CAACC,KAAK,sBAIvD,KCQe1G,qBAAkB6C,aAzBjC,SAAiC5C,GAK7B,IAJFC,EAACD,EAADC,EAGA0+D,GAFK3+D,EAALyD,MACOzD,EAAP0D,QACW1D,EAAX2+D,aAGA,OACEt+D,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,EAAG3G,GAAI,EAAGo0E,GAAI,EAAEn7E,SACpCO,gBAAC4G,KAAI,CACH4gB,YAAY,OACZvhB,MAAO3G,EAAE,kBAAkBG,SAAA,CAC7BO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,KAAAD,SAAIu+D,EAAYhnC,eAAiBt3B,eAAA,SAChCJ,EAAE,yCAAyC,IAACI,eAAA,YAE/CA,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVC,eAACq7E,GAAqB,CAACj1D,MAAOk4C,UAKtC,KCGe5+D,I,GAAAA,iBAAkB6C,aAzBjC,SAAgC5C,GAK5B,IAJFC,EAACD,EAADC,EAGA6+D,GAFK9+D,EAALyD,MACOzD,EAAP0D,QACU1D,EAAV8+D,YAGA,OACEz+D,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,EAAG3G,GAAI,EAAGo0E,GAAI,EAAEn7E,SACpCO,gBAAC4G,KAAI,CACH4gB,YAAY,QACZvhB,MAAO3G,EAAE,iBAAiBG,SAAA,CAC5BO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,KAAAD,SAAI0+D,EAAWnnC,eAAiBt3B,eAAA,SAC/BJ,EAAE,wCAAwC,IAACI,eAAA,YAE9CA,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVC,eAACq7E,GAAqB,CAACj1D,MAAOq4C,UAKtC,KChCanB,GAA4BhkE,YAAGC,QAAAC,YAAA,qrDC+L7BkG,qBAAkB6C,aAtKjC,SAAsB5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACpBqxB,GADkC90B,EAAP0D,QACbI,qBAAWxC,KACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBAEzB6vD,EAAmB53D,EAAM2K,OAAOgpD,SAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAChCzJ,EAAiCC,YAC/B+5D,GAA2B,CACzB7xD,UAAW,CACTm2C,aAAcoZ,EACdjuD,KAAMsuD,EACNqD,SAAU,aAEZ7yD,YAAa,iBAPTjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAYxB,GAAIF,EAAS,OACX5B,eAACs7E,GAAiB,CAAC50E,kBAAmB1G,eAACu7E,GAAiB,IAAIx7E,SAC1DC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAIlC,GAAIa,EAGF,OAFAvJ,QAAQC,IAAIsJ,GACZvJ,QAAQC,IAAIsJ,EAAMk+D,eACdl+D,EAAMk+D,eAAiBl+D,EAAMk+D,cAAc,GAAGyb,YACD,oCAA3C35E,EAAMk+D,cAAc,GAAGyb,WAAWlkE,KAElCtX,eAACs7E,GAAiB,CAAC50E,kBAAmB1G,eAACu7E,GAAiB,IAAIx7E,SAC1DC,eAAA,KAAAD,SACEC,eAACsrB,KAAK,CAAChnB,KAAK,UAASvE,SACnBC,eAAA,UAAAD,SAAUH,EAAE,kEAStBI,eAACs7E,GAAiB,CAAC50E,kBAAmB1G,eAACu7E,GAAiB,IAAIx7E,SAC1DC,eAAA,KAAAD,SAAIH,EAAE,gCAKZtH,QAAQC,IAAIuJ,GACZ,IA6BI8K,EA7BEuvD,EAAgBr6D,EAAKq6D,cAErBsf,EAAgB35E,EAAK68D,4BAA4B8c,cACjD32D,EAAUhjB,EAAK68D,4BAA4B75C,QAC3CniB,EAAcb,EAAK68D,4BAA4Bh8D,YAC/CD,EAAgBZ,EAAK68D,4BAA4Bj8D,cACjDk8D,EAAS98D,EAAK68D,4BAA4BE,mBAC1Cjd,EAAe9/C,EAAK68D,4BAA4B/c,aAEhD5jC,EAAW4jC,EAAaz0C,yBAAyBnF,qBAAqB5B,KACtEs1E,EAAY95B,EAAa95C,sBAAsB1B,KAC/CgH,EAAYzB,KAAO+S,GAAsBkjC,EAAax0C,YAAYxB,OAAOV,GACzEmC,EAAU1B,KAAO+S,GAAsBkjC,EAAav0C,UAAUzB,OAAOV,GAUrEywE,EATehwE,KAAO0vD,GAAYzvD,OAAOkP,GASb,IAAM1N,EAAY,MAAQC,EAAU,IAAMquE,EAAY,IAAM97E,EAAE,cAAgB,IAAMoe,EAStH,OAPA1lB,QAAQC,IAAIqmE,GACZtmE,QAAQC,IAAI,kBACZD,QAAQC,IAAIkjF,GACZnjF,QAAQC,IAAI4jE,EAAcna,eAInBma,EAAcna,eACnB,IAAK,eACH,IAAM45B,EAAgBzf,EAAcyf,cACpChvE,EAAUtM,gBAACgrB,KAAK,CAAChnB,KAAK,UAAUglC,eAAa,EAAAvpC,SAAA,CACzCC,eAAA,MAAAD,SAAKH,EAAE,sDACNA,EAAE,kDAAoD,IAAM+L,KAAOiwE,GAAehwE,OAAOkP,MAE9F,MACF,IAAK,YACHlO,EAAUtM,gBAACgrB,KAAK,CAAChnB,KAAK,UAAUglC,eAAa,EAAAvpC,SAAA,CACzCC,eAAA,MAAAD,SAAKH,EAAE,sDACNA,EAAE,uDAEP,MACF,IAAK,UACHgN,EAAUtM,gBAACgrB,KAAK,CAAChnB,KAAK,UAAUglC,eAAa,EAAAvpC,SAAA,CACzCC,eAAA,MAAAD,SAAKH,EAAE,sDACNA,EAAE,+DAEP,MACF,IAAK,WACHgN,EAAUtM,gBAACgrB,KAAK,CAAChnB,KAAK,UAAUglC,eAAa,EAAAvpC,SAAA,CACzCC,eAAA,MAAAD,SAAKH,EAAE,sDACNA,EAAE,sDAEP,MACF,IAAK,UACHgN,EAAUtM,gBAACgrB,KAAK,CAAChnB,KAAK,UAAUglC,eAAa,EAAAvpC,SAAA,CACzCC,eAAA,MAAAD,SAAKH,EAAE,sDACNA,EAAE,qDAEP,MACF,IAAK,OACHgN,EAAUtM,gBAACgrB,KAAK,CAAChnB,KAAK,UAAUglC,eAAa,EAAAvpC,SAAA,CACzCC,eAAA,MAAAD,SAAKH,EAAE,sDACNA,EAAE,kDAEP,MACF,IAAK,KACHgN,EAAUtM,gBAACF,KAAKC,IAAG,CAAC+L,OAAK,EAACC,MAAI,EAAAtM,SAAA,CAC5BC,eAAC67E,GAA0B,CAACn5E,cAAeA,IAC3C1C,eAAC87E,GAAwB,CAACn5E,YAAaA,IACrCi8D,GACCA,EAAOK,4BACNj/D,eAAC+7E,GAAwB,CAACzd,YAAaM,EAAOK,8BAChD,GACAL,GACEA,EAAOO,6BAAiCr6C,EAAQs6C,qBAChDp/D,eAACg8E,GAAuB,CAACvd,WAAYG,EAAOO,6BAC5C,MAEN,MACF,QACEvyD,EAAU,GAGd,OACE5M,eAACs7E,GAAiB,CAAC50E,kBAAmB1G,eAACu7E,GAAiB,IAAIx7E,SAC1DC,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAACF,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SAAA,CACfC,eAAA,MAAAD,SAAM47E,IACN37E,eAAA,OAAKE,UAAU,OAAMH,SACjB07E,EACAn7E,gBAACgrB,KAAK,CAAChnB,KAAK,UAAUglC,eAAa,EAAAvpC,SAAA,CACjCC,eAAA,MAAAD,SAAKH,EAAE,sDACNA,EAAE,oCAAoC,IAACI,eAAA,SAAMA,eAAA,SAC9CA,eAAC0E,IAAI,CAACtC,GAAG,wBAAuBrC,SAC9BO,gBAACqE,KAAM,CACLG,MAAM,UACNF,SAAO,EAAA7E,SAAA,CAENH,EAAE,8BAA8B,IAACI,eAACmG,KAAI,CAACC,KAAK,0BAIjDwG,UAOhB,KC/KelN,I,MAAAA,iBAAkB6C,aAVjC,SAA4B5C,GAAyD,IAAtDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ0G,EAAA9G,EAAE+G,yBAAiB,IAAAD,EAAC,GAAEA,EAE9E,OACEzG,eAACgH,GAAQ,CAACT,MAAO3G,EAAE,6BAA8B8G,kBAAmBA,EAAkB3G,SACjFA,GAGT,KCVa8jD,GAAkBvqD,YAAGC,QAAAC,YAAA,oXAoBrByiF,GAAe3iF,YAAGI,QAAAF,YAAA,6KCmEhBkG,qBAAkB6C,aAtEjC,SAAsB5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACpBqxB,GADkC90B,EAAP0D,QACbI,qBAAWxC,KACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBAEzB6vD,EAAmB53D,EAAM2K,OAAOgpD,SAChCsE,EAAaj4D,EAAM2K,OAAOhB,KAChCzJ,EAAiCC,YAC/BsgD,GAAiB,CACfp4C,UAAW,CACTwB,eAAgB+tD,EAChBjuD,KAAMsuD,KAJJz5D,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAUxB,OAAIF,EACF5B,eAACk8E,GAAmB,CAAAn8E,SAClBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAI9Ba,GACFvJ,QAAQC,IAAIsJ,GAEV7B,eAACk8E,GAAmB,CAAAn8E,SAClBC,eAAA,KAAAD,SAAIH,EAAE,kCAKZtH,QAAQC,IAAIuJ,GAKV9B,eAACk8E,GAAmB,CAAAn8E,SAClBC,eAACI,KAAKC,IAAG,CAAC+L,OAAK,EAACC,MAAI,EAAAtM,SAClBC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC4G,KAAI,CAACX,MAAO3G,EAAE,6BAA6BG,SAAA,CAC1CO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACPH,EAAE,yCAAyC,IAACI,eAAA,SAAMA,eAAA,SACnDA,eAACy2E,GAAgB,CACf72E,EAAGA,EACH67D,UAAWJ,EACXqb,UAAW50E,EAAKq6D,cAChBrhD,WAAYA,EACZ5P,WAAYA,OAGhBlL,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVC,eAAC0E,IAAI,CAACtC,GAAI,gBAAgBrC,SACxBO,gBAACqE,KAAM,CACLC,SAAO,EACPkJ,OAAK,EACLhJ,MAAM,UAAS/E,SAAA,CAEdH,EAAE,kCAAkC,IAACI,eAACmG,KAAI,CAACC,KAAK,kCASnE,KCzEe1G,qBAAkB6C,aARjC,SAAgC5C,GAAyD,IAAtDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ0G,EAAA9G,EAAE+G,yBAAiB,IAAAD,EAAC,GAAEA,EAClF,OACEzG,eAACgH,GAAQ,CAACT,MAAO3G,EAAE,sBAAuB8G,kBAAmBA,EAAkB3G,SAC5EA,GAGP,KCVO,SAAS6H,KAEZ,IAAIE,EACAtD,EACAuD,EACAC,EAEAC,EAAY,CACdC,SAAU7J,aAAa0E,QAAQxE,EAAKZ,wBACpCwK,UAAW9J,aAAa0E,QAAQxE,EAAKX,0BAsCvC,OA9BAkK,EAAwBzJ,aAAa0E,QAAQxE,EAAKT,+BAEhDmK,EAAUH,sBADRA,GAGgC,GAGpCtD,EAAanG,aAAa0E,QAAQxE,EAAKR,gCAErCkK,EAAUzD,WADRA,GAGqB,GAGzBuD,EAAoB1J,aAAa0E,QAAQxE,EAAKP,2BAE5CiK,EAAUF,kBADRA,GAG4B,GAGhCC,EAAuB3J,aAAa0E,QAAQxE,EAAKN,8BAE/CgK,EAAUD,qBADRA,GAG+B,GAGnC1P,QAAQC,IAAI0P,GAELA,CACT,CCpCF,SAASob,GAAgBlhB,GACvB,IAAImhB,EAAejlB,aAAa0E,QAAQZ,GACxC,OAAImhB,GAGK,EAEX,CAGA,SAAStG,GAA6BjN,EAAK5N,EAAO4U,GAChD1Y,aAAaC,QAAQyR,EAAK5N,GAC1B4U,EAAQnP,KAEV,CAEA,IAAM0sD,GAAc,kCAmFL50D,iBAAkB6C,aAjFC,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYkC,GAAFnC,EAAP0D,QAAa1D,EAAJmC,MAAMiV,EAAOpX,EAAPoX,QAAO,OAC5DzW,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAE9BO,gBAAA,UACEJ,UAAWo0D,GACXhxC,aAAcD,GAAgB9kB,EAAKN,8BACnC6d,SAAW,SAAC4B,GACVV,GACEze,EAAKN,6BACLyf,EAAMrY,OAAOlD,MACb4U,EAEJ,EAAEhX,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,sCAATiN,gBACrB/K,EAAK0sC,sBAAsBplC,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC3CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,SAI7D7M,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAE9BO,gBAAA,UACEJ,UAAWo0D,GACXhxC,aAAcD,GAAgB9kB,EAAKT,+BACnCge,SAAW,SAAC4B,GACVV,GACEze,EAAKT,8BACL4f,EAAMrY,OAAOlD,MACb4U,EAEJ,EAAEhX,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,uCAATiN,gBACrB/K,EAAK2oC,uBAAuBrhC,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OAC5CvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,SAI7D7M,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAE1BO,gBAAA,UACEJ,UAAWo0D,GACXhxC,aAAcD,GAAgB9kB,EAAKR,gCACnC+d,SAAW,SAAC4B,GACVV,GACEze,EAAKR,+BACL2f,EAAMrY,OAAOlD,MACb4U,EAEJ,EAAEhX,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,wCAATiN,gBACrB/K,EAAK8/B,YAAYx4B,MAAMkD,KAAI,SAAAU,GAAA,IAAGzD,EAAIyD,EAAJzD,KAAI,OACjCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKwb,UAAZlY,eAA8B,SAIrE7M,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAE9BO,gBAAA,UACEJ,UAAWo0D,GACXhxC,aAAcD,GAAgB9kB,EAAKP,2BACnC8d,SAAW,SAAC4B,GACVV,GACEze,EAAKP,0BACL0f,EAAMrY,OAAOlD,MACb4U,EAEJ,EAAEhX,SAAA,CAEFC,eAAA,UAAQmC,MAAM,GAAEpC,SAAaH,EAAE,mCAATiN,gBACrB/K,EAAKswC,mBAAmBhpC,MAAMkD,KAAI,SAAA0d,GAAA,IAAGzgB,EAAIygB,EAAJzgB,KAAI,OACxCvJ,eAAA,UAAQmC,MAAOoH,EAAKgO,GAAGxX,SAAawJ,EAAKnD,MAAZyG,eAA0B,WAIpD,KCzCEnN,qBAAkB6C,aAvDjC,SAAsC5C,GAAkF,IAIlHw8E,EAJmCv8E,EAACD,EAADC,EAAmBqN,GAAXtN,EAALyD,MAAczD,EAAP0D,QAAuB1D,EAAdsN,gBAAgBwuD,EAAS97D,EAAT87D,UAAWmgB,EAAaj8E,EAAbi8E,cAAe55B,EAAariD,EAAbqiD,cAE9FlnC,EADcrX,qBAAWxC,IACA6Z,WAM/B,OAAOknC,GACL,IAAK,eACHm6B,EAAan8E,eAAA,QAAME,UAAU,aAAYH,SACpCH,EAAE,6CAA+C,IAAM+L,KAAOiwE,GAAehwE,OAAOkP,KAEzF,MACF,IAAK,YACHqhE,EAAan8E,eAAA,QAAME,UAAU,aAAYH,SACpCH,EAAE,iDAEP,MACF,IAAK,UACHu8E,EAAan8E,eAAA,QAAME,UAAU,aAAYH,SACpCH,EAAE,yDAEP,MACF,IAAK,WACHu8E,EAAan8E,eAAA,QAAME,UAAU,aAAYH,SACpCH,EAAE,gDAEP,MACF,IAAK,UACHu8E,EAAan8E,eAAA,QAAME,UAAU,aAAYH,SACpCH,EAAE,+CAEP,MACF,IAAK,OACHu8E,EAAan8E,eAAA,QAAME,UAAU,aAAYH,SACpCH,EAAE,4CAEP,MACF,IAAK,KACHu8E,EAAan8E,eAAC0E,IAAI,CAACtC,GAAE,sBAAA0M,OAAwB7B,EAAc,KAAA6B,OAAI2sD,GAAY17D,SACvEO,gBAACqE,KAAM,CAACzE,UAAU,aAAa4E,MAAM,UAAUF,SAAO,EAAA7E,SAAA,CACnDH,EAAE,gBAAgB,IAACI,eAACmG,KAAI,CAACC,KAAK,uBAGrC,MAEF,QACE+1E,EAAa,GAGjB,OAAOA,CACT,KCpCK99E,aAAa0E,QAAQxE,EAAKZ,wBAKVgO,KAAOtN,aAAa0E,QAAQxE,EAAKZ,yBACtCy+E,SAASzwE,OAAU,SAC/BtN,aAAaC,QAAQC,EAAKZ,uBAAwBgO,OAASC,OAAO,eAClEvN,aAAaC,QAAQC,EAAKX,wBAAyB+N,OAAS5B,IAAI,EAAG,QAAQ6B,OAAO,iBAPpFtT,QAAQC,IAAI,iDACZ8F,aAAaC,QAAQC,EAAKZ,uBAAwBgO,OAASC,OAAO,eAClEvN,aAAaC,QAAQC,EAAKX,wBAAyB+N,OAAS5B,IAAI,EAAG,QAAQ6B,OAAO,gBA+KrElM,qBAAkB6C,aArKjC,SAA4B5C,GAAyB,IAAtBC,EAACD,EAADC,EAEvBsL,GAF+BvL,EAALyD,MAAczD,EAAP0D,QACnBI,qBAAWxC,IACAkK,kBAEzB5E,EAAQ3G,EAAE,mBAChB0D,EAA0CC,YAASqgD,GAAmB,CACpEn4C,UAAW7D,KAGXy0E,6BAA6B,IAJvBz6E,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAAMiV,EAAOzT,EAAPyT,QAO9Bze,QAAQC,IAAIqJ,GAEZ,IAAM8E,EAAoBpG,gBAACqE,KAAOsB,KAAI,CAAC/F,UAAU,sCAAqCH,SAAA,CACpFC,eAAC2E,KAAM,CACLtC,KAAK,eACLyC,MAAM,YACN4O,SAAY/H,KAAOtN,aAAa0E,QAAQxE,EAAKZ,yBAAyBsgC,SAAS,EAAG,QAAQm+C,SAASzwE,OAAU,OAC7G8E,QAAU,WACR,IAAI6rE,EAAe3wE,KAAOtN,aAAa0E,QAAQxE,EAAKZ,yBAAyBsgC,SAAS,EAAG,QACrFs+C,EAAgB5wE,KAAO2wE,GAAcvyE,IAAI,EAAG,QAEhD1L,aAAaC,QAAQC,EAAKZ,uBAAwB2+E,EAAa1wE,OAAO,eACtEvN,aAAaC,QAAQC,EAAKX,wBAAyB2+E,EAAc3wE,OAAO,eAExEmL,EAAQnP,KACZ,IACA5H,eAAC2E,KAAM,CACLG,MAAM,YACN2L,QAAU,WACR,IAAIwkD,EAAkBtpD,OAClBupD,EAAmBvpD,KAAOspD,GAAiBlrD,IAAI,EAAG,QAEtD1L,aAAaC,QAAQC,EAAKZ,uBAAwBs3D,EAAgBrpD,OAAO,eACzEvN,aAAaC,QAAQC,EAAKX,wBAAyBs3D,EAAiBtpD,OAAO,eAE3EmL,EAAQnP,KACZ,EAAE7H,SACCH,EAAE,mBAELI,eAAC2E,KAAM,CACLtC,KAAK,gBACLyC,MAAM,YACN2L,QAAU,WACR,IAAIqkD,EAAenpD,KAAOtN,aAAa0E,QAAQxE,EAAKZ,yBAAyBoM,IAAI,EAAG,QAChFgrD,EAAgBppD,KAAOmpD,GAAc/qD,IAAI,EAAG,QAEhD1L,aAAaC,QAAQC,EAAKZ,uBAAwBm3D,EAAalpD,OAAO,eACtEvN,aAAaC,QAAQC,EAAKX,wBAAyBm3D,EAAcnpD,OAAO,eAExEmL,EAAQnP,KACZ,OAGF,OAAIhG,EACFtB,gBAACk8E,GAAuB,CAACj2E,MAAOA,EAAOG,kBAAmBA,EAAkB3G,SAAA,CAC1EC,eAAA,SAAMA,eAAA,SAAMA,eAAA,SAAMA,eAAA,SAClBA,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,OAG9Ba,EACF7B,eAACw8E,GAAuB,CAACj2E,MAAOA,EAAOG,kBAAmBA,EAAkB3G,SACzEH,EAAE,iCAIPtH,QAAQC,IAAIuJ,GACZxJ,QAAQC,IAAIuJ,EAAKqK,iBAIf7L,gBAACk8E,GAAuB,CACtBj2E,MAAOA,EACPG,kBAAmBA,EAAkB3G,SAAA,CAErCC,eAACy8E,GAAyB,CAAC36E,KAAMA,EAAMiV,QAASA,IAC/CjV,EAAKqK,gBAAgBG,KAAI,SAAAC,GAAA,IAAGQ,EAAIR,EAAJQ,KAAM6uE,EAAarvE,EAAbqvE,cAAeh5E,EAAO2J,EAAP3J,QAAO,OACvD5C,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACbO,gBAAC4G,KAAI,CAAAnH,SAAA,CACHC,eAACkH,KAAKN,OAAM,CAAA7G,SACVO,gBAAC4G,KAAKqJ,MAAK,CAAAxQ,SAAA,CACTC,eAAA,KAAAD,SAAIqH,GAAWuE,KAAOoB,GAAMnB,OAAO,WAAa,IAAE,IAClD5L,eAAA,QAAME,UAAU,aAAYH,SACzB4L,KAAOoB,GAAMnB,OAAO,aAIxBhJ,EAAQzD,OAITa,eAACiS,KAAK,CAAC7F,OAAK,EAAArM,SACVC,eAACiS,KAAM9K,KAAI,CAAApH,SACR6C,EAAQ0J,KAAI,SAAAQ,GAAA,IACXG,EAAcH,EAAdG,eAEAF,GADaD,EAAbI,cACIJ,EAAJC,MACArE,EAAMoE,EAANpE,OAIAoc,GAHOhY,EAAPhE,QACWgE,EAAX/D,YACW+D,EAAXjE,YACOiE,EAAPgY,SAIA3X,GAHIL,EAAJzE,KACQyE,EAAR43C,SACK53C,EAAL63C,MACwB73C,EAAxBK,0BACArF,EAAqBgF,EAArBhF,sBACAC,EAAiB+E,EAAjB/E,kBACAqF,EAASN,EAATM,UACAC,EAAOP,EAAPO,QACAC,EAAMR,EAANQ,OACAovE,EAAqB5vE,EAArB4vE,sBAEA16B,GADal1C,EAAboiB,cACapiB,EAAbk1C,eAAa,OACX1hD,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACVO,gBAAA,MAAAP,SAAA,CACI+H,EAAsB1B,KAAM,IAAG,IAChCuF,KAAOoB,EAAO,IAAMK,GAAWxB,OAAOV,GAAY,IAAE,MACpDS,KAAOoB,EAAO,IAAMM,GAASzB,OAAOV,GAAY,IAAG,OAGrDlL,eAAA,QAAME,UAAU,OAAMH,SAAI+kB,EAAWA,EAAQC,SAAW,KACxD/kB,eAAA,QAAME,UAAU,aAAYH,SAAEgI,GAAqBA,EAAkB3B,OACrEpG,eAAA,SACDA,eAAA,QAAME,UAAU,aAAYH,SAAGoN,EAAyBnF,qBAAqB5B,UAE7E9F,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACRC,eAAC28E,GAA6B,CAC5B1vE,eAAgBA,EAChBwuD,UAAW1uD,EACX6uE,cAAeA,EACf55B,cAAeA,IAEG,aAAlBA,GAA2C,cAAXt5C,EAChCpI,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACbC,eAAA,OAAKogB,MAAO,CAACw8D,MAAO,UAClBt8E,gBAAA,OAAKJ,UAAU,mDAAkDH,SAAA,CAC/DC,eAAA,OAAKE,UAAU,cAAaH,SAACC,eAAA,SAAAD,SAAOC,eAACmG,KAAI,CAACC,KAAK,QAAQlG,UAAU,mBACjEF,eAAC68E,KAAQ,CAACh4E,KAAK,KAAK3E,UAAU,8CAA6CH,SAEzEC,eAAC68E,KAAS77C,IAAG,CAACl8B,MAAM,UAAU46B,OAASpyB,EAAOovE,GAAuBpvE,EAAU,cAIrF,QAGI,QA5DpBtN,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,KAAAD,SAAIH,EAAE,yCAbHiN,eAgFJ,OAInB,KC3LenN,qBAAkB6C,aAVjC,SAAwB5C,GAAyD,IAAtDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ0G,EAAA9G,EAAE+G,yBAAiB,IAAAD,EAAC,GAAEA,EAE1E,OACEzG,eAACgH,GAAQ,CAACT,MAAO3G,EAAE,sBAAuB8G,kBAAmBA,EAAkB3G,SAC5EA,GAGP,KC8CeL,qBAAkB6C,aAhDjC,SAAoB5C,GAAyB,IAAtBC,EAACD,EAADC,EAErB0D,GAF6B3D,EAALyD,MAAczD,EAAP0D,QAEEE,YAAS/D,GAAwB,CAChEiM,UAAW,CAAE8L,GAAI,mCADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB,GAAIF,EAAS,OACX5B,eAAC88E,GAAe,CAAA/8E,SACbH,EAAE,+BAGP,GAAIiC,EAAO,OACT7B,eAAC88E,GAAe,CAAA/8E,SACbH,EAAE,oCAIP,IAAM4D,EAAe1B,EAAK0B,aAE1B,OACExD,eAAC88E,GAAe,CAAA/8E,SACdO,gBAAC4G,KAAI,CAACX,MAAO/C,EAAa4C,KAAKrG,SAAA,CAC7BO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,OAAKwM,wBAAyB,CAAEC,OAAQC,KAAUC,SAASnJ,EAAaunB,YACxEzqB,gBAAA,KAAAP,SAAA,CAAIyD,EAAaynB,MAAM,IAACjrB,eAAA,SAAM,IAAEwD,EAAawnB,SAC7C1qB,gBAAA,KAAAP,SAAA,CAAIyD,EAAa0nB,aAAa,IAAClrB,eAAA,SAAM,IAAEwD,EAAa2nB,sBAEtDnrB,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAGzN,SACfC,eAAA,KAAGkE,KAAK,iCAAiCmB,OAAO,SAAQtF,SACrDH,EAAE,oCAGPI,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAGzN,SACfC,eAAA,KAAGE,UAAU,8DACXgE,KAAK,2BAA2BmB,OAAO,SAAQtF,SAC9CH,EAAE,uCAQnB,KC3CeF,I,GAAAA,iBAAkB6C,aATjC,SAAuB5C,GAAmC,IAAhCC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAC3C,OACEC,eAACgH,GAAQ,CAACT,MAAO3G,EAAE,qBAAqBG,SACrCA,GAGP,KCVaihE,GAA4B1nE,YAAGC,QAAAC,YAAA,87CC2F7BkG,qBAAkB6C,aApEjC,SAAmB5C,GAAyB,IAAtBC,EAACD,EAADC,EAEdkb,GAFsBnb,EAALyD,MAAczD,EAAP0D,QACVI,qBAAWxC,IACA6Z,YACzBvU,EAAQ3G,EAAE,mBAChB0D,EAAiCC,YAASy9D,IAAlCp/D,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAExB,GAAIF,EAAS,OACX5B,eAAC+8E,GAAc,CAACx2E,MAAOA,EAAMxG,SAC3BC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAAC+8E,GAAc,CAACx2E,MAAOA,EAAMxG,SAC1BH,EAAE,oCAIPtH,QAAQC,IAAIuJ,GACZ,IAAM0/D,EAAiB1/D,EAAK0/D,eAG5B,OAFAlpE,QAAQC,IAAIipE,GAGVxhE,eAAC+8E,GAAc,CAACx2E,MAAOA,EAAMxG,SACzBC,eAACI,KAAKC,IAAG,CAAAN,SACNyhE,EAAep4D,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC/BvJ,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAACokC,KAAW,CAAA3kC,SAAA,CACRwJ,EAAKyzE,MAAM5zE,MAAMjK,OACjBa,eAAC0kC,KAAYC,MAAK,CAChBpkC,IAAMgJ,EAAKyzE,MAAM5zE,MAAMjK,OAAUoK,EAAKyzE,MAAM5zE,MAAM,GAAGG,KAAK8gD,uBAAwB,GAClFnmD,KAAI,iBAAA4K,OAAmBvF,EAAKgO,MACzB,GACPvX,eAAC0kC,KAAYl0B,OAAM,CAAAzQ,SACjBC,eAAA,MAAAD,SAAKwJ,EAAKnD,SAEZ9F,gBAACokC,KAAYl0B,OAAM,CAAAzQ,SAAA,CACjBC,eAAC0kC,KAAYG,QAAO,CAClB9f,SAAU/kB,eAAA,QAAME,UAAU,GAAEH,SAAGwJ,EAAK/E,WAAc+E,EAAK/E,WAAWugB,SAAU,KAC5Ek4D,WAAY1zE,EAAKvB,qBAAqB5B,OAExCpG,eAAC0kC,KAAYw4C,UAAS,CAAAn9E,SACtBC,eAAC0kC,KAAYy4C,SAAQ,CACnB/2E,KAAK,WACLiN,MAAO1H,KAAOpC,EAAKsY,WAAWjW,OAAOkP,GACrCklB,OAAO,EACPhnB,cAAc,cAIlBhZ,eAAC0E,IAAI,CAACtC,GAAE,gBAAA0M,OAAkBvF,EAAKgO,IAAKxX,SAClCC,eAAC0kC,KAAYl0B,OAAM,CAAC4sE,GAAI,GAAGr9E,SACzBO,gBAACqE,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,OAAM/E,SAAA,CAEXH,EAAE,4BAA4B,IAACI,eAACmG,KAAI,CAACC,KAAK,6BA9BRyG,eAmClC,OAKvB,KCpEenN,qBAAkB6C,aAdjC,SAAsB5C,GAAIA,EAADC,EAAQD,EAALyD,MAAczD,EAAP0D,QAAgC,IAAvBtD,EAAQJ,EAARI,SAAQs9E,EAAA19E,EAAE4G,aAAK,IAAA82E,EAAC,GAAEA,EAE5D,OACEr9E,eAACgH,GAAQ,CACPT,MAAOA,EACPF,UAAU,eACVtG,SAECA,GAGP,KCsEeL,I,GAAAA,iBAAkB6C,aAtEjC,SAAmC5C,GAA4D,IAAzDC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOk6E,EAAW39E,EAAX29E,YAAWC,EAAA59E,EAAE69E,kBAAU,IAAAD,GAAKA,EAAAE,EAAA99E,EAAEoB,cAAM,IAAA08E,GAAMA,EAGlFhpD,EAAchxB,qBAAWxC,IACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBAC/B7S,QAAQC,IAAI+kF,GACZ,IAAMI,EAAsBJ,EAAYI,oBAElCvb,EAAU/+D,EAAM2K,OAAOq0D,SAE7B,OACE9hE,gBAACq9E,KAAW,CAAC58E,OAAQA,EAAOhB,SAAA,CAC1BC,eAAC29E,KAAYC,SAAQ,CAAA79E,SAClBu9E,EAAYl3E,OAEfpG,eAAC29E,KAAYE,MAAK,CAAA99E,SACS,IAAtBu9E,EAAYl3D,MACbxmB,EAAE,0BACF09E,EAAYQ,oBAGhBx9E,gBAACq9E,KAAYI,cAAa,CAAAh+E,SAAA,CACxBO,gBAACq9E,KAAYK,cAAa,CAAAj+E,SAAA,CACtBu9E,EAAYW,iBAAoBj+E,eAAA,QAAAD,SAChCC,eAACuI,KAAK,CAACrI,UAAU,OAAO4E,MAAM,UAAS/E,SAAEH,EAAE,yCACnC,GACR09E,EAAYY,4BAA+Bl+E,eAAA,QAAAD,SAC3CC,eAACuI,KAAK,CAACzD,MAAM,UAAS/E,SAAEH,EAAE,+CAClB,MAEV09E,EAAYW,kBAAoBX,EAAYY,4BAC5C59E,gBAACq9E,KAAYK,cAAa,CAAAj+E,SAAA,CACvBH,EAAE,mCAAmC,IAAE09E,EAAYhmD,gBAEpD,GAEHomD,EAAoBt0E,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACpCjJ,gBAACq9E,KAAYK,cAAa,CAAAj+E,SAAA,CACtBC,eAACmG,KAAI,CAACC,KAAK,aAAa,IAAG,IAC1BuF,KAAOpC,EAAKq4C,aAAa//B,WAAWjW,OAAOkP,GAAY,IAAE,IAEzDnP,KAAOpC,EAAKq4C,aAAa//B,UAAY,IAAMtY,EAAKq4C,aAAax0C,WAAWxB,OAAOV,GAAY,IAAE,MAC7FS,KAAOpC,EAAKq4C,aAAa//B,UAAY,IAAMtY,EAAKq4C,aAAav0C,SAASzB,OAAOV,GAAY,IAAG,IAC/FlL,eAAA,SACAM,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC1BwJ,EAAKq4C,aAAax7C,KAAK,IAACpG,eAACmG,KAAI,CAACC,KAAK,YAAY,IAAEmD,EAAKq4C,aAAaz0C,yBAAyBnF,qBAAqB5B,UAE1F,OAG9Bo3E,IAAeF,EAAYvV,UAC3B/nE,eAAC0E,IAAI,CAACtC,GAAE,gBAAA0M,OAAkBqzD,EAAO,YAAArzD,OAAWwuE,EAAY/lE,IAAKxX,SAC3DO,gBAACq9E,KAAYh5E,OAAM,CAAA5E,SAAA,CAChBH,EAAE,4BAA4B,IAACI,eAACmG,KAAI,CAACC,KAAK,uBAG7C,GAEFo3E,GAAcF,EAAYvV,UAC1B/nE,eAAC29E,KAAYh5E,OAAM,CACjBzE,UAAU,WAAUH,SAEnBH,EAAE,sBACmB,KAGhC,KCnFaqhE,GAA2B3nE,YAAGC,QAAAC,YAAA,23DC+G5BkG,qBAAkB6C,aA5FjC,SAAkB5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAEhB0X,GAF8Bnb,EAAP0D,QACTI,qBAAWxC,IACA6Z,YAE3BqjE,EAAYv+E,EAAE,mBACZuiE,EAAU/+D,EAAM2K,OAAOq0D,SAIvBt/D,EAAkBzE,aAAa0E,QAAQxE,EAAK7D,wBAC9C0jF,GAAsB,GACtB,IAAIl7E,KAAS,KAAQJ,GAAsC,MAAnBA,KAC1Cs7E,GAAsB,GAGxB,IAAA96E,EAAiCC,YAAS09D,GAA0B,CAClEx1D,UAAW,CAAE8L,GAAI4qD,GACjBt2D,YAAa,iBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxB,GAAIF,EAAS,OACX5B,eAACq+E,GAAa,CAAC93E,MAAO43E,EAAUp+E,SAC9BC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAACq+E,GAAa,CAAC93E,MAAO43E,EAAUp+E,SAC7BH,EAAE,8BAIP,IAAM8d,EAAQ5b,EAAKupD,cACbizB,EAAU5gE,EAAM4gE,QAGtB,OACEh+E,gBAAC+9E,GAAa,CAAC93E,MAAOmX,EAAMtX,KAAKrG,SAAA,CAC/BC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,GAAI+O,GAAI,GAAG9V,SACvCC,eAAA,MAAAD,SAAK2d,EAAMmkD,cAGfvhE,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPO,gBAACF,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SAAA,CAClC2d,EAAMs/D,MAAM5zE,MAAMjK,OACnBmB,gBAACokC,KAAW,CAAA3kC,SAAA,CACVC,eAAC0kC,KAAYC,MAAK,CAACpkC,IAAMmd,EAAMs/D,MAAM5zE,MAAMjK,OAAUue,EAAMs/D,MAAM5zE,MAAM,GAAGG,KAAK8gD,uBAAyB,KACxGrqD,eAAC0kC,KAAYG,QAAO,CAAA9kC,SAChB2d,EAAMs/D,MAAM5zE,MAAMjK,OAAUue,EAAMs/D,MAAM5zE,MAAM,GAAGG,KAAKV,YAAc,QAG1E,GACF7I,eAACkH,KAAI,CAACX,MAAO3G,EAAE,gBAAgBG,SAC7BO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRO,gBAAA,MAAAP,SAAA,CAAKH,EAAE,sBAAsB,KAAI8d,EAAMlZ,WAAckZ,EAAMlZ,WAAWugB,SAAU,MAChFzkB,gBAAA,MAAAP,SAAA,CAAKH,EAAE,iBAAiB,KAAI8d,EAAMmE,UAAalW,KAAO+R,EAAMmE,WAAWjW,OAAOkP,GAAa,MAC3Fxa,gBAAA,MAAAP,SAAA,CAAKH,EAAE,eAAe,KAAI8d,EAAMoE,QAAWnW,KAAO+R,EAAMoE,SAASlW,OAAOkP,GAAa,cAI3F9a,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,uBAAuBG,SACpCO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,yBACPI,eAAA,OAAKwM,wBAAyB,CAAEC,OAAQC,KAAUC,SAAS+Q,EAAM7U,0BAKzEvI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,GAAI+O,GAAI,GAAG9V,SACvCC,eAAA,MAAAD,SAAKH,EAAE,0BAETI,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,GAAI+O,GAAI,GAAG9V,SACpCq+E,EAKC,GALsB99E,gBAACgrB,KAAK,CAAChnB,KAAK,UAASvE,SAAA,CAC3CC,eAAC0E,IAAI,CAACtC,GAAG,cAAarC,SACpBC,eAAA,KAAAD,SAAIH,EAAE,uBACD,IAAEA,EAAE,6CAIhB0+E,EAAQl1E,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACxBvJ,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACu+E,GAA0B,CAACC,QAASrc,EAASmb,YAAa/zE,KAClD,SAKrB,KC1Fe7J,I,GAAAA,iBAAkB6C,aAfjC,SAA4B5C,GAA6C,IAA1CC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAgBrD,GAAFJ,EAAP0D,QAAiB1D,EAARI,UAAUyG,EAAQ7G,EAAR6G,SACpD27D,EAAU/+D,EAAM2K,OAAOq0D,SAE7B,OACEpiE,eAACgH,GAAQ,CACPT,MAAO3G,EAAE,4BACT4G,SAAUA,EACVH,UAAS,gBAAAyI,OAAkBqzD,GAC3Bv8D,iBAAiB,QAAO7F,SAEvBA,GAGP,KCde0+E,GALS,CACpBC,4BAA6B,iCAC7BC,sBAAuB,4BCiDZj/E,iBAAkB6C,aAnCR,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAcC,EAAMtT,EAANsT,OAAM,OAC/C3S,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,sBAAsBG,SAAA,CACzCC,eAACsT,KAAK,CAAChP,KAAK,OACLmP,UAAU,WACVrN,KAAK,UACLlG,UAAY+S,EAAOskB,QAAW,0BAA4B,eAC1DhkB,aAAa,QACpBvT,eAACwT,KAAY,CAACpN,KAAK,UAAUqN,UAAU,OAAOvT,UAAU,wBAE1DI,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC1BH,EAAE,oCAAoC,IAACI,eAAA,SACxCM,gBAAA,MAAAP,SAAA,CACEO,gBAAA,MAAAP,SAAA,CAAKH,EAAE,0BAA0B,IAAE,IACjCI,eAAA,KAAGqF,OAAO,SACRC,IAAI,aACJpB,KAAMu6E,GAAgBC,4BAA4B3+E,SAAEH,EAAE,qCAE1DU,gBAAA,MAAAP,SAAA,CAAKH,EAAE,4BAA4B,IAAE,IACnCI,eAAA,KAAGqF,OAAO,SAASC,IAAI,aAAapB,KAAMu6E,GAAgBE,sBAAsB5+E,SAAEH,EAAE,qCAI1FU,gBAACqE,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAAA,CAEtBH,EAAE,oBAAoB,IAACI,eAACmG,KAAI,CAACC,KAAK,uBAE9B,KC7CAuhE,GAAkCruE,YAAGC,QAAAC,YAAA,q5BCwHnCkG,I,GAAAA,iBAAkB6C,aAtGjC,SAAwB5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAC/BkD,EAAQ3G,EAAE,mBACRg/E,EAAwBx7E,EAAM2K,OAAOwJ,GACrC4qD,EAAU/+D,EAAM2K,OAAOq0D,SAE7B9+D,EAAiCC,YAASokE,GAAiC,CACzEl8D,UAAW,CAAE8L,GAAIqnE,GACjB/yE,YAAa,iBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxB8R,EAAsBC,YAAYooE,IAA3B4C,EAAwC9qE,YAAAH,EAAA,GAA7B,GAGlB,GAAIhS,EAAS,OACX5B,eAAC8+E,GAAmB,CAACv4E,MAAOA,EAAMxG,SAChCC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAAC8+E,GAAmB,CAACv4E,MAAOA,EAAMxG,SAC/BH,EAAE,sCAIP,IAAM09E,EAAcx7E,EAAKspD,oBACnB5kD,EAAW82E,EAAYjyB,cAAcjlD,KAG3C,OAAIk3E,EAAYvV,UAEZ/nE,eAAC8+E,GAAmB,CAACv4E,MAAOA,EAAOC,SAAUA,EAASzG,SACpDC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,qCAAqCG,SAClDC,eAACkH,KAAKC,KAAI,CAAApH,SAAEH,EAAE,qCAOpBI,eAAC8+E,GAAmB,CAACv4E,MAAOA,EAAOC,SAAUA,EAASzG,SACpDO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACu+E,GAA0B,CAACpc,QAASA,EAASmb,YAAaA,EAAaE,YAAY,EAAOz8E,QAAQ,MAErGf,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,sCAAsCG,SACnDC,eAACkH,KAAKC,KAAI,CAAApH,SACNu9E,EAAYz0E,YACZ7I,eAAA,OAAKwM,wBAAyB,CAAEC,OAAQC,KAAUC,SAAS2wE,EAAYz0E,gBACvEjJ,EAAE,+CAIVI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,uBAAuBG,SACpCC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACgU,KAAM,CACLC,cAAe,CAAEsjB,QAAS,IAE1BnjB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cAEbyqE,EAAmB,CACrBxnD,QAASljB,EAAOkjB,QAChB6zB,oBAAqBhoD,EAAM2K,OAAOwJ,IAGpCsnE,EAAY,CAAEpzE,UAAW,CACvB8I,MAAOwqE,GAENrqE,eAAgB,KAGlBE,MAAK,SAAA9H,GAAe,IACXkyE,EADGlyE,EAAJhL,KACgBm9E,mBAAmB7nD,aAAa7f,GACrDlU,EAAQnB,KAAK,0BAA4B88E,EAC3C,IAAG9pE,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACk/E,GAAgB,CACflsE,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,GACR,cAWpB,KCvHa8qE,GAA+B7lF,YAAGC,QAAAC,YAAA,mhBCahCkG,qBAAkB6C,aARjC,SAAqB5C,GAAmC,IAAhCC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UACzC,OACEC,eAACgH,GAAQ,CAACT,MAAO3G,EAAE,mBAAmBG,SACjCA,GAGT,KCsCeL,qBAAkB6C,aApCjC,SAAiB5C,GAAyB,IAAtBC,EAACD,EAADC,EAElB0D,GAF0B3D,EAALyD,MAAczD,EAAP0D,QAEKE,YAAS47E,KAAlCv9E,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAExB,GAAIF,EAAS,OACX5B,eAACo/E,GAAY,CAAAr/E,SACVH,EAAE,+BAGP,GAAIiC,EAAO,OACT7B,eAACo/E,GAAY,CAAAr/E,SACVH,EAAE,2CAIP,IAAMmM,EAAgBjK,EAAKkK,0BAE3B,OACEhM,eAACo/E,GAAY,CAAC74E,MAAO3G,EAAE,mBAAmBG,SACxCC,eAACI,KAAKC,IAAG,CAAC+L,OAAK,EAACC,MAAI,EAAAtM,SAChBgM,EAAc3C,MAAMjK,OAAU4M,EAAc3C,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC7DvJ,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC9BC,eAACkH,KAAI,CAACX,MAAOgD,EAAKhD,MAAMxG,SACtBC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,OAAKwM,wBAAyB,CAAEC,OAAQC,KAAUC,SAASpD,EAAKqD,iBAHhCC,eAM3B,IACR,MAKb,KC3BenN,I,GAAAA,iBAAkB6C,aAbjC,SAAgC5C,GAAIA,EAADC,EAAQD,EAALyD,MAAczD,EAAP0D,QAAsB,IAAbtD,EAAQJ,EAARI,SAEpD,OACEC,eAACgH,GACC,CACApB,iBAAiB,UAAS7F,SAEzBA,GAGP,K,UCfas/E,GAAkB/lF,YAAGC,QAAAC,YAAA,yjBCqGnBkG,I,GAAAA,iBAAkB6C,aAvFjC,SAAiC5C,GAA6B,IAA1BC,EAACD,EAADC,EAAG2X,EAAE5X,EAAF4X,GAAEkgE,EAAA93E,EAAE+3E,gBAAQ,IAAAD,GAAMA,EACvDn0E,EAAiCC,YAAS87E,GAAiB,CACzD5zE,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB,GAAIF,EAAS,OACX5B,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,IAEhC,GAAIa,EAAO,OACPjC,EAAE,6CAGN,IAGI67D,EACAxuD,EAEmBqyE,EANjBnoD,EAAQr1B,EAAKs1B,aACbmoD,EAAapoD,EAAMl1B,MAAMmH,MAIvBo2E,EAAAC,aACKF,GAAU,IAAvB,IAAAC,EAAAhiE,MAAA8hE,EAAAE,EAAAE,KAAAC,MAAyB,CACvB,IAAIp2E,EADG+1E,EAAAn9E,MACSoH,KACZA,EAAKq4C,eACP6Z,EAAYlyD,EAAKq2E,eACjB3yE,EAAiB1D,EAAKq4C,aAAarqC,GAEvC,CAAC,OAAAsoE,GAAAL,EAAAt5D,EAAA25D,EAAA,SAAAL,EAAA5uE,GAAA,CAGD,OACEtQ,gBAAC4G,KAAI,CAACX,MAAO3G,EAAE,uCAAuCG,SAAA,CACpDC,eAAA,OAAKE,UAAU,mBAAkBH,SAC/BO,gBAAC2R,KAAK,CAAC7F,OAAO,EAAKrM,SAAA,CACjBC,eAACiS,KAAMrL,OAAM,CAAA7G,SACXO,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRC,eAACiS,KAAMC,UAAS,CAAAnS,SAAEH,EAAE,kBACpBI,eAACiS,KAAMC,UAAS,CAAChS,UAAU,aAAYH,SAAEH,EAAE,wBAG/CU,gBAAC2R,KAAM9K,KAAI,CAAApH,SAAA,CACRw/E,EAAWjzE,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OACrBjJ,gBAAC2R,KAAM5R,IAAG,CAAAN,SAAA,CACRO,gBAAC2R,KAAMxM,IAAG,CAAA1F,SAAA,CACPwJ,EAAKyc,YAAY,IAAChmB,eAAA,SACnBA,eAAA,QAAME,UAAU,aAAYH,SACzBwJ,EAAKV,iBAGV7I,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAAEwJ,EAAK2b,iBAP1BrY,eAQJ,IAEdvM,gBAAC2R,KAAM5R,IAAG,CAACH,UAAU,OAAMH,SAAA,CACzBC,eAACiS,KAAMxM,IAAG,CAAA1F,SACPH,EAAE,mBAELI,eAACiS,KAAMxM,IAAG,CAACvF,UAAU,aAAYH,SAC5Bo3B,EAAMjS,0BAMjBiS,EAAMI,SAAatqB,GAAkBwuD,EACrCn7D,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNo3B,EAAMI,QACNj3B,gBAAA,QAAMJ,UAAU,aAAYH,SAAA,CAC1BO,gBAAA,MAAAP,SAAA,CAAIC,eAACmG,KAAI,CAACC,KAAK,mBAAmB,IAAExG,EAAE,0CAErCu3B,EAAMI,QACPv3B,eAAA,SAAMA,eAAA,YAEN,GAEFiN,GAAkBwuD,EAClBz7D,eAAC43E,GAAqB,CACpB3qE,eAAgBA,EAChBF,KAAM0uD,EACNic,SAAUA,IAEV,MAGJ,KAIV,KClGaQ,GAAsB5+E,YAAGC,QAAAC,YAAA,2KC4IvBkG,qBAAkB6C,aAvHjC,SAA4B5C,GAAmC,IAAhCC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAAS2a,EAAQre,EAARqe,SAE1Ck7D,EADcz1E,qBAAWxC,IACai4E,wBACtCd,EAAY13D,iBAAO,MACnB23D,EAAiB/3E,gBAAA,QAAAP,SAAA,CAAMC,eAACmG,KAAI,CAACC,KAAK,gBAAgB,IAAExG,EAAE,oCAAoC,IAACI,eAACmG,KAAI,CAACC,KAAK,qBAC5GsQ,EAA+BC,mBAAS0hE,GAAezhE,EAAA7C,YAAA2C,EAAA,GAAhD4hE,EAAQ1hE,EAAA,GAAE2hE,EAAU3hE,EAAA,GACrBrQ,EAAQ3G,EAAE,mBACV2X,EAAKnU,EAAM2K,OAAOwJ,GACxBjU,EAAiCC,YAAS87E,GAAiB,CACzD5zE,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB8R,EAA4BC,YAAYqkE,IAAjCM,EAAqDzkE,YAAAH,EAAA,GAApC,GAIxB,GAFAvV,aAAaC,QAAQC,EAAKb,0BAA2BsgB,EAASoH,UAE1DxjB,EAAS,OACX5B,eAAC8/E,GAAuB,CAACv5E,MAAOA,EAAMxG,SACpCC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAAC8/E,GAAuB,CAACv5E,MAAOA,EAAMxG,SACnCH,EAAE,kCAIPtH,QAAQC,IAAIuJ,GACZ,IAAMq1B,EAAQr1B,EAAKs1B,aACbtS,EAAUhjB,EAAKs1B,aAAatS,QAClCxsB,QAAQC,IAAI4+B,GACZ,IAqBI4oD,EACAC,EAtBET,EAAapoD,EAAMl1B,MAAMmH,MAiE/B,OAhEA9Q,QAAQC,IAAIgnF,GAyBQ,SAAhBpoD,EAAM8oD,OACR58E,EAAQnB,KAAK,2BAAD4M,OAA4ByI,IAKrCuN,EAAQo7D,yBAWFhH,GACT6G,EAAcngF,EAAE,wDAChBogF,EAAahgF,eAAA,UACXE,UAAU,4BACVigB,IAAKi4D,EACL3nE,QA7CJ,WACE2nE,EAAUh3D,QAAQu3D,aAAa,WAAY,YAC3CJ,EAAW34E,EAAE,sCAIb44E,EAAkB,CAAE/sE,UAAW,CAAE8L,GAAIA,KAAQ3C,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACnDxJ,QAAQC,IAAI,WAAYuJ,GACxB,IAAM82E,EAAc92E,EAAKq+E,8BAA8BC,wBAAwBxH,YAC/EtpE,OAAO0O,SAAS9Z,KAAO00E,CACzB,IAAG1jE,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,EACtD,GACF,EA6B0B9B,SAErBu4E,MAGHyH,EAAcngF,EAAE,wDAChBogF,EAAahgF,eAAC0E,IAAI,CAACtC,GAAG,IAAGrC,SACvBO,gBAACqE,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,UAAS/E,SAAA,CAEdH,EAAE,oCAAoC,IAACI,eAACmG,KAAI,CAACC,KAAK,yBAzBvD25E,EAAcngF,EAAE,qDAChBogF,EAAahgF,eAAC0E,IAAI,CAACtC,GAAG,wBAAuBrC,SAC3CO,gBAACqE,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,UAAS/E,SAAA,CAEdH,EAAE,wCAAwC,IAACI,eAACmG,KAAI,CAACC,KAAK,wBA0B3DpG,eAAC8/E,GAAuB,CAACv5E,MAAOA,EAAMxG,SAClCO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC4G,KAAI,CAACX,MAAO3G,EAAE,wCAAwCG,SAAA,CACrDO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAIE,UAAW,OAAOH,SAAEH,EAAE,oDACzBA,EAAE,+DAA+D,IAACI,eAAA,SAAMA,eAAA,SACxE+/E,KAEH//E,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACTigF,SAIPhgF,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACqgF,GAAwB,CAAC9oE,GAAIA,UAK1C,KCxHe7X,qBAAkB6C,aAbjC,SAAiC5C,GAAIA,EAADC,EAAQD,EAALyD,MAAczD,EAAP0D,QAAsB,IAAbtD,EAAQJ,EAARI,SAErD,OACEC,eAACgH,GAAQ,CACPT,MAAO,GACPX,iBAAiB,WAAU7F,SAE1BA,GAGP,KCwGeL,I,GAAAA,iBAAkB6C,aAvGjC,SAA6B5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAI3BmD,GAJyC5G,EAAP0D,QAI1BzD,EAAE,oBACV2X,EAAKnU,EAAM2K,OAAOwJ,GACxBjU,EAAiCC,YAAS87E,GAAiB,CACzD5zE,UAAW,CAAE8L,GAAIA,KADX3V,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB,GAAIF,EAAS,OACX5B,eAACsgF,GAAwB,CAAC/5E,MAAOA,EAAMxG,SACrCC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAACsgF,GAAwB,CAAC/5E,MAAOA,EAAMxG,SACpCH,EAAE,kCAIPtH,QAAQC,IAAIuJ,GACZ,IAAMq1B,EAAQr1B,EAAKs1B,aACnB9+B,QAAQC,IAAI4+B,GACZ,IAAMooD,EAAapoD,EAAMl1B,MAAMmH,MAI/B,GAHA9Q,QAAQC,IAAIgnF,IAGPpoD,EACH,OACEn3B,eAACsgF,GAAwB,CAAC/5E,MAAOA,EAAMxG,SACpCH,EAAE,4CAKT,IAAI2gF,EAAY,GACZC,EAAc,GACdC,EAAc,GACd/I,GAAW,EAkCf,MA/BqB,cAAjBvgD,EAAMzuB,QAGY,SAAhByuB,EAAM8oD,OACRM,EAAY3gF,EAAE,uDACd4gF,EAAc5gF,EAAE,4DAEhB2gF,EAAY3gF,EAAE,4CACd4gF,EAAc5gF,EAAE,gDAGlB83E,GAAW,EAGS,SAAhBvgD,EAAM8oD,QACRQ,EAAc7gF,EAAE,kDAKlB2gF,EAAY3gF,EAAE,yCAEd4gF,EAAc5gF,EAAE,4CAGI,SAAhBu3B,EAAM8oD,QACRQ,EAAc7gF,EAAE,8CAMlBI,eAACsgF,GAAwB,CAAC/5E,MAAOA,EAAMxG,SACnCO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCO,gBAAC4G,KAAI,CAACX,MAAO3G,EAAE,gCAAgCG,SAAA,CAC7CO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAIE,UAAW,OAAOH,SAAEwgF,IACvBE,EAAY,IAACzgF,eAAA,SACbwgF,KAEHxgF,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACVC,eAAC0E,IAAI,CAACtC,GAAG,iBAAgBrC,SACvBO,gBAACqE,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,UAAS/E,SAAA,CAEdH,EAAE,4BAA4B,IAACI,eAACmG,KAAI,CAACC,KAAK,8BAMrDpG,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG+O,GAAI,EAAE9V,SACrCC,eAACqgF,GAAwB,CAAC9oE,GAAIA,EAAImgE,SAAUA,UAKxD,KCrHar2B,GAA4B/nD,YAAGC,QAAAC,YAAA,4lCC0B7BkG,qBAAkB6C,aAjBjC,SAA+B5C,GAAmD,IAAhDC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAAQ82E,EAAAl3E,EAAEm3E,mBAAW,IAAAD,EAAC,GAAEA,EAC3E,OACI72E,eAAC2G,GAAe,CAAA5G,SACdC,eAAA,OAAKE,UAAU,eAAcH,SAC3BO,gBAACH,KAAS,CAAAJ,SAAA,CACRC,eAACC,KAAK2G,OAAM,CAACL,MAAO3G,EAAE,sBAAuB4G,SAAWswE,EAAa/2E,SACnEC,eAAA,OAAKE,UAAU,sBAAqBH,SAClCC,eAAC83E,GAAe,QAGlB/3E,QAKd,KCuJeL,qBAAkB6C,aAxJjC,SAA2B5C,GAAuB,IAArBC,EAACD,EAADC,EACrB60B,GAD6B90B,EAALyD,MAAczD,EAAP0D,QACjBI,qBAAWxC,KACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBAG/B7H,EAAmEC,YAASiH,IAA3DY,EAAW9H,EAApB1B,QAA6ByJ,EAAS/H,EAAhBzB,MAAwByJ,EAAQhI,EAAdxB,KAChDyJ,EAA4ChI,YAAS89C,GAA2B,CAC9E71C,KAAMJ,GAAeC,IAAcC,EACnCG,UAAW,CACTqZ,QAASxZ,GAAYA,EAAS/G,KAAO+G,EAAS/G,KAAKmH,UAAY,MAEjEG,YAAa,iBALPjK,EAAO2J,EAAP3J,QAASC,EAAK0J,EAAL1J,MAAOC,EAAIyJ,EAAJzJ,KAAMuP,EAAS9F,EAAT8F,UAU9B,GAAIzP,GAAWwJ,IAAgBtJ,EAAM,OACnC9B,eAAC0gF,GAAsB,CAAA3gF,SACrBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASwJ,EAAW,OACtBrL,eAAC0gF,GAAsB,CAAA3gF,SACpBH,EAAE,6CAIP,IAAM2E,EAAO+G,EAAS/G,KAChBu9C,EAA0BhgD,EAAKggD,wBAGrC,OAAKA,EAAwB14C,MAAMjK,OAmBjCmB,gBAACogF,GAAsB,CAAC5J,YAAavyE,EAAKwgB,SAAShlB,SAAA,CACjDC,eAAA,MAAAD,SAAKH,EAAE,gCACPI,eAACgoD,GACC,CACAt4C,SAAUoyC,EAAwBpyC,SAClCG,WAAY,WACVwB,EAAU,CACR5F,UAAW,CACTgG,MAAOqwC,EAAwBpyC,SAASgC,WAE1CC,YAAa,SAACC,EAAcrF,GAA2B,IAAvBsF,EAAetF,EAAfsF,gBACxBC,EAAWD,EAAgBiwC,wBAAwB14C,MACnDsG,EAAWmC,EAAgBiwC,wBAAwBpyC,SAEzD,OAAOoC,EAAS3S,OACZ,CAGE2iD,wBAAyB,CACvB/vC,WAAYH,EAAekwC,wBAAwB/vC,WACnD3I,MAAM,GAAD0F,OAAAkD,aAAOJ,EAAekwC,wBAAwB14C,OAAK4I,aAAKF,IAC7DpC,aAGJkC,CACN,GAEJ,EAAE7R,SAEE+hD,EAAwB14C,MAAMkD,KAAI,SAAAQ,GAAA,IAAGvD,EAAIuD,EAAJvD,KAAI,OACzCvJ,eAACkH,KAAI,CAAAnH,SACHC,eAACkH,KAAKC,KAAI,CAAApH,SACRO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAI1G,GAAI,GAAG/G,SACvBO,gBAAA,OAAKJ,UAAU,UAASH,SAAA,CACtBO,gBAAA,MAAAP,SAAA,CACIwJ,EAAKq4C,aAAa95C,sBAAsB1B,KAC1C9F,gBAAA,QAAMJ,UAAU,iBAAgBH,SAAA,CAAC,IAACC,eAAC+hD,GAAkB,CAACr5C,OAAQa,EAAKy4C,sBAErEhiD,eAACmG,KAAI,CAACC,KAAK,UAAU,IAAGuF,KAAOpC,EAAKwD,MAAMnB,OAAOkP,GAAa,IAAG,IACjE9a,eAAA,QAAME,UAAU,aAAYH,SACzB4L,KAAOpC,EAAKwD,KAAO,IAAMxD,EAAKq4C,aAAax0C,WAAWxB,OAAOV,KACzDlL,eAAA,SACPA,eAACmG,KAAI,CAACC,KAAK,SAAS,IAAGmD,EAAKq4C,aAAaz0C,yBAAyBnF,qBAAqB5B,KAAM,IAAG,IAChGpG,eAAA,QAAME,UAAU,aAAYH,SACxBwJ,EAAKq4C,aAAaz0C,yBAAyB/G,YAInD9F,gBAACF,KAAKqF,IAAG,CAAC+H,GAAI,GAAI1G,GAAI,EAAE/G,SAAA,CACG,cAAvBwJ,EAAKy4C,cACLhiD,eAAC0E,IAAI,CAACtC,GAAE,4BAAA0M,OAA8BvF,EAAKq4C,aAAarqC,GAAE,KAAAzI,OAAIvF,EAAKwD,MAAOhN,SACxEC,eAAC2E,KAAM,CACLmJ,OAAK,EACLlJ,SAAO,EACPE,MAAM,OACND,KAAK,KACL3E,UAAU,GAAEH,SAEXH,EAAE,oBAGL,GAEsB,cAAvB2J,EAAKy4C,eAAkCz4C,EAAK+tE,qBAC7Ct3E,eAAC0E,IAAI,CAACtC,GAAE,8BAAA0M,OAAgCvF,EAAKq4C,aAAarqC,GAAE,KAAAzI,OAAIvF,EAAKwD,KAAI,KAAA+B,OAAIvF,EAAKgO,IAAKxX,SACrFC,eAAC2E,KAAM,CACLmJ,OAAK,EACLlJ,SAAO,EACPE,MAAM,UACND,KAAK,KACL3E,UAAU,OAAMH,SAEfH,EAAE,sBAGJ2J,EAAKiuE,uBACNx3E,eAAC0E,IAAI,CAACtC,GAAE,gCAAA0M,OAAkCvF,EAAKq4C,aAAarqC,GAAE,KAAAzI,OAAIvF,EAAKwD,KAAI,KAAA+B,OAAIvF,EAAKgO,IAAKxX,SACvFC,eAAC2E,KAAM,CACLmJ,OAAK,EACLlJ,SAAO,EACPE,MAAM,UACND,KAAK,KACL3E,UAAU,OAAMH,SAEfH,EAAE,oBAGP,YA1DDiN,eA+DJ,SA9Gb7M,eAAC0gF,GAAsB,CAAC5J,YAAavyE,EAAKwgB,SAAShlB,SACjDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACkH,KAAI,CAACgJ,UAAWtQ,EAAE,8BAA8BG,SAC/CC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,4CA8GnB,KChKeF,qBAAkB6C,aATjC,SAA4B5C,GAAmC,IAAhCC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAChD,OACEC,eAACgH,GAAQ,CAACT,MAAO3G,EAAE,0BAA0BG,SAC1CA,GAGP,KCmCeL,I,GAAAA,iBAAkB6C,aAjCjC,SAAiC5C,GAA2C,IAAxCC,EAACD,EAADC,EAAG47C,EAAS77C,EAAT67C,UAAWk+B,EAAO/5E,EAAP+5E,QAAO+D,EAAA99E,EAAEoB,cAAM,IAAA08E,GAAMA,EAGrE,OACEn9E,gBAACq9E,KAAW,CAAC58E,OAAQA,EAAOhB,SAAA,CAC1BC,eAAC29E,KAAYC,SAAQ,CAAA79E,SAClBy7C,EAAUp1C,OAEbpG,eAAC29E,KAAYE,MAAK,CAAA99E,SACfy7C,EAAUlkB,eAEbh3B,gBAACq9E,KAAYI,cAAa,CAAAh+E,SAAA,CACxBO,gBAACq9E,KAAYK,cAAa,CAAAj+E,SAAA,CACxBC,eAAA,KAAAD,SAAKy7C,EAAU5T,UAAahoC,EAAE,qBAAuB47C,EAAU54C,UAAa,IAAG,IACtD,IAAtB44C,EAAU54C,SAAmB44C,EAAU5T,UAAahoC,EAAE,mBAAoBA,EAAE,oBAEjFU,gBAACq9E,KAAYK,cAAa,CAAAj+E,SAAA,CACvBH,EAAE,qBAAqB,IAAG,IAC3BU,gBAAA,KAAAP,SAAA,CAAIy7C,EAAU3T,SAAS,IAAE,IAAI,IAAE2T,EAAU1T,6BAG3C4xC,EACA15E,eAAC0E,IAAI,CAACtC,GAAIs3E,EAAQ35E,SAChBO,gBAACq9E,KAAYh5E,OAAM,CAAA5E,SAAA,CAChBH,EAAE,2BAA2B,IAACI,eAACmG,KAAI,CAACC,KAAK,uBAG5C,KAIV,KC3Cau6E,GAAqCrnF,YAAGC,QAAAC,YAAA,+0BCgDtCkG,qBAAkB6C,aAhCjC,SAAwB5C,GAAyB,IAAtBC,EAACD,EAADC,EACzB0D,GADiC3D,EAALyD,MAAczD,EAAP0D,QACFE,YAASo9E,KAAlC/+E,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAExB,GAAIF,EAAS,OACX5B,eAAC4gF,GAAmB,CAAA7gF,SAClBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAAC4gF,GAAmB,CAAA7gF,SACjBH,EAAE,oCAIP,IAAM+C,EAAcb,EAAK4lC,wBAEzB,OACE1nC,eAAC4gF,GAAmB,CAAA7gF,SAClBC,eAACI,KAAKC,IAAG,CAAAN,SACN4C,EAAYyG,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC5BvJ,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC9BC,eAAC6gF,GAAwB,CACvBrlC,UAAWjyC,EACXmwE,QAAS,mBAAqBnwE,EAAKgO,MAE5B,OAKrB,KCzBe7X,I,GAAAA,iBAAkB6C,aAfjC,SAA0B5C,GAAIA,EAADC,EAAQD,EAALyD,MAAczD,EAAP0D,QAA+C,IAAtCqqB,EAAS/tB,EAAT+tB,UAAWmuC,EAAYl8D,EAAZk8D,aAAc97D,EAAQJ,EAARI,SAEvE,OACEC,eAACgH,GAAQ,CACPT,MAAOmnB,EACPlnB,SAAUq1D,EACVx1D,UAAU,oBACVT,iBAAiB,QAAO7F,SAEvBA,GAGP,KCjBaqnC,GAAsB9tC,YAAGC,QAAAC,YAAA,2hBC+JvBkG,qBAAkB6C,aAvIjC,SAAsB5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAAOC,EAAO1D,EAAP0D,QAC3BoxB,EAAchxB,qBAAWxC,IACzB6Z,EAAa2Z,EAAY3Z,WACzB5P,EAAaupB,EAAYtpB,iBAEzBuiB,EAAY9tB,EAAE,qBACd2X,EAAKnU,EAAM2K,OAAOwJ,GAClBtK,EAAiB7J,EAAM2K,OAAOgpD,SAC9B0E,EAAYr4D,EAAM2K,OAAOhB,KAE/BzJ,EAAiCC,YAAS6jC,GAAqB,CAC7D37B,UAAW,CAAE8L,GAAIA,GACjB1L,YAAa,iBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxByJ,EAAsEhI,YAASsgD,GAAiB,CAC9Fp4C,UAAW,CAAEwB,eAAgBA,EAAgBF,KAAM0uD,GACnDjwD,MAAQyB,IAAmBwuD,IAFZqlB,EAAYv1E,EAArB3J,QAA8Bm/E,EAAUx1E,EAAjB1J,MAAyBm/E,EAASz1E,EAAfzJ,KAKlD8R,EAAsBC,YAAYooE,IAA3B4C,EAAwC9qE,YAAAH,EAAA,GAA7B,GAGlB,GAAIhS,EAAS,OACX5B,eAACihF,GAAiB,CAACvzD,UAAWA,EAAU3tB,SACtCC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAACihF,GAAiB,CAACvzD,UAAWA,EAAU3tB,SACrCH,EAAE,kCAIP,IAAM47C,EAAY15C,EAAK+hC,sBACjBt/B,EAAOzC,EAAKyC,KACZs3D,EAAergB,EAAUp1C,KAE/B,OAAI7B,EAAK66D,sBAAwB5jB,EAAU7T,UAEvC3nC,eAACihF,GAAiB,CAACvzD,UAAWA,EAAU3tB,SACtCC,eAACkH,KAAI,CAACwmB,UAAW9tB,EAAE,sCAAsCG,SACvDC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,wDAQXI,eAACihF,GAAiB,CAACvzD,UAAWA,EAAWmuC,aAAcA,EAAa97D,SAClEO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC9BC,eAACkhF,GAA0B,CAAC1lC,UAAWA,EAAWz6C,QAAQ,MAE5DT,gBAACF,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAAA,EAC5BihF,GAAcF,GAAiBC,EAc7B,GAbF/gF,eAACkH,KAAI,CAACwmB,UAAW9tB,EAAE,yCAAyCG,SAC1DO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACPH,EAAE,yCAAyC,IAACI,eAAA,SAAMA,eAAA,SACnDM,gBAAA,KAAAP,SAAA,CACG4L,KAAO8vD,GAAW7vD,OAAOkP,GAAY,IAAE,IACvCnP,KAAO+S,GAAsBsiE,EAAU7kB,cAAc/uD,YAAYxB,OAAOV,GAAY,IAAE,MACtFS,KAAO+S,GAAsBsiE,EAAU7kB,cAAc9uD,UAAUzB,OAAOV,GAAY,IAAClL,eAAA,YAErFghF,EAAU7kB,cAAcr0D,sBAAsB1B,KAAO,IAAMxG,EAAE,cAAgB,IAC5EohF,EAAU7kB,cAAchvD,yBAAyBnF,qBAAqB5B,UAM9EpG,eAACkH,KAAI,CAACwmB,UAAW9tB,EAAE,yCAAyCG,SAC1DC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,OAAKwM,wBAAyB,CAACC,OAAQC,KAAUC,SAAS6uC,EAAU3yC,uBAI1E7I,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC9BC,eAACkH,KAAI,CAACwmB,UAAW9tB,EAAE,2BAA2BG,SAC5CC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACgU,KAAM,CACLC,cAAe,CAAEsjB,QAAS,IAE1BnjB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cAEbyqE,EAAmB,CACrBxnD,QAASljB,EAAOkjB,QAChBsM,sBAAuBzgC,EAAM2K,OAAOwJ,IAGlCtK,GAAkBwuD,IACpBsjB,EAAiBa,eAAiBnkB,EAClCsjB,EAAiBn9B,aAAe30C,GAGlC4xE,EAAY,CAAEpzE,UAAW,CACvB8I,MAAOwqE,GAENrqE,eAAgB,KAGlBE,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBxJ,QAAQC,IAAI,6CACZ,IAAMymF,EAAUl9E,EAAKm9E,mBAAmB7nD,aAAa7f,GACrDlU,EAAQnB,KAAK,0BAA4B88E,EAC3C,IAAG9pE,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACk/E,GAAgB,CACflsE,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,GACR,cAWpB,KCjJe3U,qBAAkB6C,aARjC,SAA8B5C,GAAmC,IAAhCC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAClD,OACEC,eAACgH,GAAQ,CAACT,MAAO3G,EAAE,4BAA4BG,SAC5CA,GAGP,KCmDeL,I,GAAAA,iBAAkB6C,aAlDjC,SAAoC5C,GAAyE,IAAtEC,EAACD,EAADC,EAAG07C,EAAY37C,EAAZ27C,aAAco+B,EAAO/5E,EAAP+5E,QAAO+D,EAAA99E,EAAEoB,cAAM,IAAA08E,GAAMA,EAAA0D,EAAAxhF,EAAEyhF,2BAAmB,IAAAD,GAAMA,EAKlGE,EAAOzhF,EAAE,iBAKb,OAJK07C,EAAa1T,WAA+C,SAAlC0T,EAAaxF,mBAC1CurC,EAAOzhF,EAAE,iBAITU,gBAACq9E,KAAW,CAAC58E,OAAQA,EAAOhB,SAAA,CAC1BC,eAAC29E,KAAYC,SAAQ,CAAA79E,SAClBu7C,EAAal1C,OAEhBpG,eAAC29E,KAAYE,MAAK,CAAA99E,SACfu7C,EAAa5F,oBAEhBp1C,gBAACq9E,KAAYI,cAAa,CAAAh+E,SAAA,CACxBO,gBAACq9E,KAAYK,cAAa,CAAAj+E,SAAA,CACxBC,eAAA,KAAAD,SAAKu7C,EAAa1T,UAAahoC,EAAE,qBAAuB07C,EAAa14C,UAAa,IAAG,IACpFhD,EAAE,mBAAmB,MAAIyhF,KAE5B/gF,gBAACq9E,KAAYK,cAAa,CAAAj+E,SAAA,CACvBH,EAAE,wBAAwB,IAAG,IAC9BU,gBAAA,KAAAP,SAAA,CAAIu7C,EAAazF,YAAY,IAAgC,IAA7ByF,EAAazF,YAAqBj2C,EAAE,iBAAmBA,EAAE,wBAEzFwhF,EACA9gF,gBAACq9E,KAAYK,cAAa,CAAAj+E,SAAA,CACvBH,EAAE,uBAAuB,KAAEI,eAAA,KAAAD,SAAIu7C,EAAagmC,4BAE/C,GACAF,GAAuB9lC,EAAaimC,uBAAyB,EAC7DjhF,gBAACq9E,KAAYK,cAAa,CAAAj+E,SAAA,CACvBH,EAAE,4BAA4B,KAAEI,eAAA,KAAAD,SAAIu7C,EAAakmC,mCAEpD,MAEF9H,EACA15E,eAAC0E,IAAI,CAACtC,GAAIs3E,EAAQ35E,SAChBO,gBAACq9E,KAAYh5E,OAAM,CAAA5E,SAAA,CAChBH,EAAE,6BAA6B,IAACI,eAACmG,KAAI,CAACC,KAAK,uBAG9C,KAIV,KC5Daq7E,GAAuCnoF,YAAGC,QAAAC,YAAA,46BCmDxCkG,qBAAkB6C,aAnCjC,SAA0B5C,GAAyB,IAAtBC,EAACD,EAADC,EAC3B0D,GADmC3D,EAALyD,MAAczD,EAAP0D,QACJE,YAASk+E,KAAlC7/E,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAExB,GAAIF,EAAS,OACX5B,eAAC0hF,GAAqB,CAAA3hF,SACpBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAAC0hF,GAAqB,CAAA3hF,SACnBH,EAAE,sCAIP,IAAM8C,EAAgBZ,EAAK0zC,0BAE3B,OACEx1C,eAAC0hF,GAAqB,CAAA3hF,SAClBC,eAACI,KAAKC,IAAG,CAAAN,SACN2C,EAAc0G,MAAMkD,KAAI,SAAAC,GAAA,IAAGhD,EAAIgD,EAAJhD,KAAI,OAC9BvJ,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC9BC,eAAC2hF,GAA2B,CAC1BrmC,aAAc/xC,EACdmwE,QAAS,sBAAwBnwE,EAAKgO,MAE/B,OAOvB,KCee7X,qBAAkB6C,aAlDjC,SAA2B5C,GAAqD,IAAlDC,EAACD,EAADC,EAAUyD,GAAF1D,EAALyD,MAAczD,EAAP0D,SAASu+E,EAA0BjiF,EAA1BiiF,2BAC/ChuE,EAAsBC,YAAYooE,IAA3B4C,EAAwC9qE,YAAAH,EAAA,GAA7B,GAElB,OACE5T,eAACkH,KAAI,CAACX,MAAO3G,EAAE,uBAAuBG,SACpCC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAACgU,KAAM,CACLC,cAAe,CAAEsjB,QAAS,IAE1BnjB,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cAEbyqE,EAAmB,CACrBxnD,QAASljB,EAAOkjB,QAChBuM,yBAA0B89C,GAG5B/C,EAAY,CAAEpzE,UAAW,CACvB8I,MAAOwqE,GAENrqE,eAAgB,KAGlBE,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBxJ,QAAQC,IAAI,6CACZ,IAAMymF,EAAUl9E,EAAKm9E,mBAAmB7nD,aAAa7f,GACrDlU,EAAQnB,KAAK,0BAA4B88E,EAC3C,IAAG9pE,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACk/E,GAAgB,CACflsE,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,GACR,OAMd,KC1Be3U,qBAAkB6C,aAxBjC,SAAwC5C,GAAyB,IAAtBC,EAACD,EAADC,EAEzC,OAFiDD,EAALyD,MAAczD,EAAP0D,QAGjD/C,gBAAC4G,KAAI,CAACX,MAAO3G,EAAE,2CAA2CG,SAAA,CACxDC,eAACkH,KAAKC,KAAI,CAAApH,SACPH,EAAE,yDAELI,eAACkH,KAAKsJ,OAAM,CAAAzQ,SACZC,eAAC0E,IAAI,CAACtC,GAAG,6BAA4BrC,SACnCO,gBAACqE,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,UACN5E,UAAU,aACVoE,KAAK,SAAQvE,SAAA,CAEZH,EAAE,qCAAqC,IAACI,eAACmG,KAAI,CAACC,KAAK,2BAM9D,KC0Be1G,iBAAkB6C,aA5CP,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAGoT,EAAYrT,EAAZqT,aAAsBqB,GAAF1U,EAANsT,OAActT,EAAN0U,QAAQuL,EAAejgB,EAAfigB,gBAAiBC,EAAalgB,EAAbkgB,cAAa,OACxFvf,gBAAC4S,KAAM,CAAAnT,SAAA,CACLO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,8BAA8BG,SAAA,CACjDC,eAAC4d,GAAY,CACXhC,SAAUvH,EAAOwN,UACjB/F,SAAU,SAAC/O,GAAI,OAAK8S,EAAc,YAAa9S,EAAK,EACpDiP,OAAQ,kBAAM4D,EAAgB,aAAa,EAAK,IAElD5f,eAACwT,KAAY,CAACpN,KAAK,YAAYqN,UAAU,OAAOvT,UAAU,wBAE5DI,gBAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC1BH,EAAE,oCAAoC,IAACI,eAAA,SACxCM,gBAAA,MAAAP,SAAA,CACEO,gBAAA,MAAAP,SAAA,CAAKH,EAAE,0BAA0B,IAAE,IACjCI,eAAA,KAAGqF,OAAO,SACRC,IAAI,aACJpB,KAAMu6E,GAAgBC,4BAA4B3+E,SAEjDH,EAAE,qCAGPU,gBAAA,MAAAP,SAAA,CAAKH,EAAE,4BAA4B,IAAE,IACnCI,eAAA,KAAGqF,OAAO,SACRC,IAAI,aACJpB,KAAMu6E,GAAgBE,sBAAsB5+E,SAE3CH,EAAE,qCAKXU,gBAACqE,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,IAAiBqB,EAAOwN,UAAU9hB,SAAA,CAEzCsU,EAAOwN,UAAyDjiB,EAAE,mBAA9CA,EAAE,wCACxB,IAAI,IAACI,eAACmG,KAAI,CAACC,KAAK,uBAEZ,KCrDAy7E,GAA8BrvE,OAAaC,MAAM,CAC1DoP,UAAWrP,OACRizC,WACA9yC,SAAS/S,YAAE,yBCkEHF,qBAAkB6C,aApDjC,SAA4B5C,GAA8D,IAA3DC,EAACD,EAADC,EAAUyD,GAAF1D,EAALyD,MAAczD,EAAP0D,SAASqI,EAAS/L,EAAT+L,UAAWo4B,EAAwBnkC,EAAxBmkC,yBAC3DlwB,EAA6BC,YAAY43C,IAAlCvV,EAA8DniC,YAAAH,EAAA,GAA5C,GAEzB,OACE5T,eAACkH,KAAI,CAACX,MAAO3G,EAAE,uBAAuBG,SACpCO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CAERC,eAAA,OAAKwM,wBAAyB,CAAEC,OAAQC,KAAUC,SAASm3B,EAAyBmS,uBACpFj2C,eAACgU,KAAM,CACLC,cAAe,CAAEsjB,QAAS,IAC1BpjB,iBAAkB0tE,GAClBztE,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjB4hC,EAAmB,CAAEzqC,UAAW,CAC9B8I,MAAO,CACLuvB,yBAA0BA,EAAyBvsB,GACnDuN,QAASpZ,EACTmW,UAAWvD,GAAejK,EAAOwN,aAGlCnN,eAAgB,KAGlBE,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACxBxJ,QAAQC,IAAI,4DACZ,IAAM8/D,EAAwBv2D,EAAKmqD,0BAA0BnJ,oBAAoBvrC,GACjFlU,EAAQnB,KAAK,6CAAD4M,OAA8CupD,GAC5D,IAAGnjD,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC8hF,GAA2B,CAC1B9uE,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRuL,gBAAiBA,EACjBC,cAAeA,GACf,QAMd,KC9CengB,I,GAAAA,iBAAkB6C,aAfjC,SAA6B5C,GAAIA,EAADC,EAAQD,EAALyD,MAAczD,EAAP0D,QAA+C,IAAtCqqB,EAAS/tB,EAAT+tB,UAAWmuC,EAAYl8D,EAAZk8D,aAAc97D,EAAQJ,EAARI,SAE1E,OACEC,eAACgH,GAAQ,CACPT,MAAOmnB,EACPlnB,SAAUq1D,EACVx1D,UAAU,sBACVT,iBAAiB,QAAO7F,SAEvBA,GAGP,KCjBam1C,GAAyB57C,YAAGC,QAAAC,YAAA,4+BCmF1BkG,qBAAkB6C,aAlEjC,SAAyB5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MACvBsqB,GADqC/tB,EAAP0D,QAClBzD,EAAE,yBACd2X,EAAKnU,EAAM2K,OAAOwJ,GAGxBjU,EAAiCC,YAAS2xC,GAAwB,CAChEzpC,UAAW,CAAE8L,GAAIA,GACjB1L,YAAa,iBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxB,GAAIF,EAAS,OACX5B,eAAC+hF,GAAoB,CAACr0D,UAAWA,EAAU3tB,SACzCC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAAC+hF,GAAoB,CAACr0D,UAAWA,EAAU3tB,SACxCH,EAAE,qCAIP,IAIIoiF,EAJE1mC,EAAex5C,EAAKgiC,yBACpBhf,EAAUhjB,EAAKyC,KACfs3D,EAAevgB,EAAal1C,KAqBlC,MAhBuC,gBAAnCk1C,EAAa2mC,kBAEVn9D,EAAQo9D,mBAOXF,EAAehiF,eAACmiF,GAAuB,CAACz2E,UAAWoZ,EAAQpZ,UAAWo4B,yBAA0BwX,KALhGj9C,aAAaC,QAAQC,EAAKd,+BAA+B,sBAADqR,OAAwByI,IAEhFyqE,EAAehiF,eAACoiF,GAA+B,KAMjDJ,EAAehiF,eAACqiF,GAAkB,CAACT,2BAA4BrqE,IAK/DvX,eAAC+hF,GAAoB,CAACr0D,UAAWA,EAAWmuC,aAAcA,EAAa97D,SACrEO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC9BC,eAAC2hF,GAA2B,CAACrmC,aAAcA,EAAcv6C,QAAQ,EAAMqgF,qBAAqB,MAE9FphF,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC9BC,eAACkH,KAAI,CAACwmB,UAAW9tB,EAAE,4CAA4CG,SAC7DC,eAACkH,KAAKC,KAAI,CAAApH,SACRC,eAAA,OAAKwM,wBAAyB,CAACC,OAAQC,KAAUC,SAAS2uC,EAAazyC,sBAI7E7I,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC7BiiF,QAKX,KC9DetiF,I,GAAAA,iBAAkB6C,aAbjC,SAAiD5C,GAAmC,IAAhCC,EAACD,EAADC,EAAmBG,GAAXJ,EAALyD,MAAczD,EAAP0D,QAAiB1D,EAARI,UAErE,OACEC,eAACgH,GAAQ,CACPT,MAAO3G,EAAE,cACTgG,iBAAiB,WAAU7F,SAE1BA,GAGP,KChBasiD,GAAiC/oD,YAAGC,QAAAC,YAAA,6VCmFlCkG,qBAAkB6C,aAlEjC,SAA6C5C,GAAyB,IAAtBC,EAACD,EAADC,EAAGwD,EAAKzD,EAALyD,MAE3C0X,GAFyDnb,EAAP0D,QACpCI,qBAAWxC,IACA6Z,YACzBvU,EAAQ3G,EAAE,mBACV2X,EAAKnU,EAAM2K,OAAOwJ,GAGxBjU,EAAiCC,YAAS8+C,GAAgC,CACxE52C,UAAW,CAAE8L,GAAIA,GACjB1L,YAAa,iBAFPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAKxB,GAAIF,EAAS,OACX5B,eAACsiF,GAAwC,CAAC/7E,MAAOA,EAAMxG,SACrDC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAACsiF,GAAwC,CAAC/7E,MAAOA,EAAMxG,SACpDH,EAAE,qCAIPtH,QAAQC,IAAIuJ,GACZ,IAAMw5C,EAAex5C,EAAKghD,oBACpBh+B,EAAUhjB,EAAKyC,KAIrB,OAHAjM,QAAQC,IAAI+iD,GACZhjD,QAAQC,IAAIusB,GAGV9kB,eAACsiF,GAAwC,CAAC/7E,MAAOA,EAAMxG,SACrDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,GAAI+O,GAAI,GAAG9V,SACvCC,eAACkH,KAAI,CAACX,MAAO3G,EAAE,qDAAqDG,SAClEO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACPH,EAAE,6DAA6D,IAACI,eAAA,SAEjEA,eAAA,KAAAD,SAAIu7C,EAAaxX,yBAAyB19B,OAAS,IAAExG,EAAE,uDAAuD,IAAE,IAChHI,eAAA,KAAAD,SAAI4L,KAAO2vC,EAAaz5B,WAAWjW,OAAOkP,KAAgB,IAC1D9a,eAAA,SAAMA,eAAA,SACNA,eAAA,KAAAD,SAAIH,EAAE,gEACNU,gBAAC2F,KAAKmN,MAAK,CAAArT,SAAA,CACTC,eAAC0E,IAAI,CAACtC,GAAG,gBAAgBlC,UAAU,OAAMH,SACvCO,gBAAC2F,KAAK+3C,UAAS,CAAAj+C,SAAA,CACZH,EAAE,2DAA2D,IAACI,eAACmG,KAAI,CAACC,KAAK,uBAG9EpG,eAAC0E,IAAI,CAACtC,GAAG,gBAAgBlC,UAAU,OAAMH,SACvCO,gBAAC2F,KAAK+3C,UAAS,CAAAj+C,SAAA,CACZH,EAAE,wDAAwD,IAACI,eAACmG,KAAI,CAACC,KAAK,uBAG3EpG,eAAC0E,IAAI,CAACtC,GAAG,IAAGrC,SACVO,gBAAC2F,KAAK+3C,UAAS,CAAAj+C,SAAA,CACZH,EAAE,kEAAkE,IAACI,eAACmG,KAAI,CAACC,KAAK,oCAUrG,KChFam8E,GAAyB/vE,OAAaC,MAAM,CACrD+vE,gBAAiBhwE,OACdG,SAAS/S,YAAE,uBACdmlD,YAAavyC,OACVG,SAAS/S,YAAE,uBACXiT,IAAI,EAAGjT,YAAE,kBACZ6iF,aAAcjwE,OACXkwE,MAAM,CAAClwE,KAAQ,eAAgB,MAAO5S,YAAE,+BC2ChCF,iBAAkB6C,aA1CF,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAActT,EAAN0U,OAAiB1U,EAAT0G,UAA0B1G,EAAfigB,gBAA8BjgB,EAAbkgB,cAAa,OACnH7f,eAACkT,KAAM,CAAChT,UAAU,OAAOqT,aAAa,MAAKxT,SACzCO,gBAAC4G,KAAKC,KAAI,CAACjH,UAAU,MAAKH,SAAA,CACxBC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SACRH,EAAE,gCAELU,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,yCAAyCG,SAAA,CAC5DC,eAACsT,KAAK,CAAChP,KAAK,WACJ8B,KAAK,kBACLlG,UAAY+S,EAAOuvE,gBAAmB,0BAA4B,eAClEjvE,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,kBAAkBqN,UAAU,OAAOvT,UAAU,wBAElEI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,qCAAqCG,SAAA,CACxDC,eAACsT,KAAK,CAAChP,KAAK,WACJ8B,KAAK,cACLlG,UAAY+S,EAAO8xC,YAAe,0BAA4B,eAC9DxxC,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,cAAcqN,UAAU,OAAOvT,UAAU,wBAE9DI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,4CAA4CG,SAAA,CAC/DC,eAACsT,KAAK,CAAChP,KAAK,WACJ8B,KAAK,eACLlG,UAAY+S,EAAOwvE,aAAgB,0BAA4B,eAC/DlvE,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,eAAeqN,UAAU,OAAOvT,UAAU,wBAE/DF,eAACmT,KAAK3C,OAAM,CAAAzQ,SACVC,eAAC2E,KAAM,CACLmJ,OAAK,EACLlM,QAASoR,EACTlO,MAAM,UACNR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,sCAIF,KCfIF,sBAxBf,SAAyBC,GAAIA,EAADC,EAA2B,IAA1BC,EAAAF,EAAEG,eAAO,IAAAD,EAAC,GAAEA,EAAEE,EAAQJ,EAARI,SAEzC,OACEC,eAACC,KAAI,CAAAF,SACHC,eAAA,OAAKE,UAAU,cAAaH,SAC1BC,eAACG,KAAS,CAAAJ,SACRC,eAACI,KAAKC,IAAG,CAAAN,SACPO,gBAAA,OAAKJ,UAAU,wBAAuBH,SAAA,CACpCC,eAAA,OAAKE,UAAU,mBAAkBH,SAC5BD,EAAWE,eAAA,OAAKO,IAAKT,EAASI,UAAU,MAAMM,IAAI,SAAY,KAElET,EACDC,eAACS,KAAc,CACbC,UAAW,IACXC,WAAYC,iBAQ5B,ICiFelB,qBAAkB6C,aA9FjC,SAA2B5C,GAAuB,IAArBC,EAACD,EAADC,EACrB4D,GAD6B7D,EAALyD,MAAczD,EAAP0D,QAChBI,qBAAWlC,KAChCqS,EAAyBC,YAAY5Z,GAA9B0oF,EAAsD5uE,YAAAH,EAAA,GAAxC,GAErB,OACEtT,gBAACsiF,GAAoB,CAAC9iF,QAAS0D,EAAaohC,aAAa7kC,SAAA,CAEvDC,eAACgU,KAAM,CACLC,cAAe,CACbuuE,gBAAiB,GACjBz9B,YAAa,GACb09B,aAAc,IAEhBtuE,iBAAkBouE,GAClBnuE,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ,IAAI+J,EAAO,CACT7J,MAAO,CACLiuE,gBAAiBnuE,EAAOmuE,gBACxBz9B,YAAa1wC,EAAO0wC,cAIxB49B,EAAe,CAAEl3E,UAAW2S,IACzBxJ,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACPxJ,QAAQC,IAAI,WAAYuJ,GACxB8lB,YAAW,kBAAM/S,KAAMC,QAASlV,EAAE,gCAAkC,CAClEmV,SAAUF,KAAMG,SAASC,cACzB,GAAE,KACJ3F,OAAOjM,QAAQ46C,MACjB,IAAG/oC,OAAM,SAACrT,GAON,IAAIqK,EADN,GALA5T,QAAQC,IAAI,iBACZD,QAAQC,IAAIsJ,EAAMghF,UAClBvqF,QAAQC,IAAIsJ,EAAMk+D,eAClBznE,QAAQC,IAAIiuB,OAAOC,KAAK5kB,IAEpBA,EAAMk+D,cAER,IAAK7zD,EAAI,EAAGA,EAAIrK,EAAMk+D,cAAc5gE,OAAQ+M,IAC1C2I,KAAMhT,MAAMA,EAAMk+D,cAAc,GAAGxoC,QAC9B0vB,QAAQ,KAAM,IACdA,QAAQ,KAAM,IACdA,QAAQ,MAAO,IACfA,QAAQ,MAAO,IAAK,CACvBlyC,SAAUF,KAAMG,SAASC,oBAK7BJ,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACtDkT,SAAUF,KAAMG,SAASC,eAI7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAQuL,EAAe5S,EAAf4S,gBAAiBC,EAAa7S,EAAb6S,cAAa,OAC9D7f,eAAC8iF,GAAsB,CACrB9vE,aAAcA,EACd+vE,aAAcljE,EACdmjE,iBAAkBpjE,EAClB3M,OAAQA,EACRoB,OAAQA,GACR,IAGNrU,eAAA,MAAAD,SAAKH,EAAE,uCACPU,gBAAC2F,KAAI,CAAAlG,SAAA,CACHC,eAACiG,KAAK5B,KAAI,CAAAtE,SAAEH,EAAE,kDACdI,eAACiG,KAAK5B,KAAI,CAAAtE,SAAEH,EAAE,iDACdI,eAACiG,KAAK5B,KAAI,CAAAtE,SAAEH,EAAE,iDACdI,eAACiG,KAAK5B,KAAI,CAAAtE,SAAEH,EAAE,6DAGhBI,eAAC2E,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,OACN2L,QAAS,SAACiN,GACRA,EAAMulE,iBACN3zE,OAAOjM,QAAQ46C,MACjB,EAAEl+C,SAEDH,EAAE,sBAIX,KCxCeF,iBAAkB6C,aArDX,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAM,OACvDjT,eAACkT,KAAM,CAAChT,UAAU,OAAOqT,aAAa,MAAKxT,SACzCO,gBAAC4G,KAAKC,KAAI,CAACjH,UAAU,MAAKH,SAAA,CACxBC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SACRH,EAAE,sBAELU,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,QACLuiB,YAAa/oB,EAAE,gCACfM,UAAY+S,EAAOgY,MAAS,0BAA4B,eACxD1X,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,QAAQqN,UAAU,OAAOvT,UAAU,wBAExDI,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,oBAAoBG,SAAA,CACvCC,eAACsT,KAAK,CAAChP,KAAK,WACJ8B,KAAK,WACLuiB,YAAa/oB,EAAE,mCACfM,UAAY+S,EAAOiwE,SAAY,0BAA4B,eAC3D3vE,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,WAAWqN,UAAU,OAAOvT,UAAU,wBAE3DF,eAACmT,KAAK3C,OAAM,CAAAzQ,SACVO,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAAC2E,KAAM,CACLmJ,OAAK,EACLlM,QAASoR,EACTlO,MAAM,UACNR,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,qBAGPI,eAACI,KAAKqF,IAAG,CAACqB,GAAI,EAAE/G,SACdC,eAAC2E,KAAM,CACLG,MAAM,OACNkU,cAAc,IACd9U,KAAoC,cAA7BoL,OAAO0O,SAASgyD,UAAyD,cAA7B1gE,OAAO0O,SAASgyD,SACjE,mDACA,8BACDjwE,SAEAH,EAAE,6CAMN,KCmCIF,qBAAkB6C,aAjFjC,SAAkB5C,GAAuB,IAArBC,EAACD,EAADC,EAAUyD,GAAF1D,EAALyD,MAAczD,EAAP0D,SACtBG,EAAeC,qBAAWlC,IAE1B4hF,EADc1/E,qBAAWxC,IACUkiF,qBAEzCvvE,EAAwBC,YAAYxa,GAA5B+pF,EAAuCrvE,YAAAH,EAAA,GAA5B,GAKnB,OAFA1V,EAAOa,UAGLuB,gBAACsiF,GAAoB,CAAC9iF,QAAS0D,EAAaohC,aAAa7kC,SAAA,CACvDC,eAAA,OAAKE,UAAU,8BAA6BH,SACzCyD,EAAeA,EAAa4C,KAAO,KAEtCpG,eAACgU,KAAM,CACLC,cAAe,CACbgX,MAAO,GACPi4D,SAAU,IAGZ9uE,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACb8J,EAAO,CACTilE,SAAUhvE,EAAO4W,MACjBi4D,SAAU7uE,EAAO6uE,UAGnBE,EAAY,CAAE33E,UAAW2S,EACvB1J,eAAgB,KAMjBE,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GAExB,IAAMq5C,EAAO98C,aAAa0E,QAAQxE,EAAK5D,kBAAoB,gBAC3DuD,EAAOC,MAAM2D,EAAKwhF,WAClB17D,YAAW,kBAAMvkB,EAAQnB,KAAKi5C,EAAK,GAAE,IACzC,IAAGjmC,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAIsJ,GACZyS,GAAc,EAChB,GACJ,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAM,OACtBjT,eAACujF,GAAa,CACZvwE,aAAcA,EACdC,OAAQA,GACR,IAIHkwE,GAAyB7iF,gBAACY,IAAMsH,SAAQ,CAAAzI,SAAA,CACvCO,gBAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,eAAA,MAAAD,SAAKH,EAAE,kCACNA,EAAE,oCAAoC,IAACI,eAAA,SACvCJ,EAAE,gDAAgD,IAACI,eAAA,YAEtDM,gBAACqE,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,OACNkU,cAAc,IACd9U,KAAoC,cAA7BoL,OAAO0O,SAASgyD,UAAyD,wBAA7B1gE,OAAO0O,SAASgyD,SACjE,2CACA,sBACDjwE,SAAA,CAEAH,EAAE,gCAAgC,IAACI,eAACmG,KAAI,CAACC,KAAK,0BAM3D,KCpDe1G,qBAAkB6C,aAnCjC,SAA0B5C,GAAuB,IAArBC,EAACD,EAADC,EAAUyD,GAAF1D,EAALyD,MAAczD,EAAP0D,SACpCqT,EAA4BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAApC3V,EAAM6V,EAAA,GAAE4sE,EAAS5sE,EAAA,GAExB,OACEtW,gBAACsiF,GAAoB,CAAA7iF,SAAA,CAEnBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SACRH,EAAE,+BAEJA,EAAE,+BAA+B,IAACI,eAAA,SAAMA,eAAA,SACzCM,gBAACqE,KAAM,CACLmJ,OAAK,EACLlM,QAASb,EACT2S,SAAU3S,EACV+D,MAAM,UACNR,KAAK,SACLmM,QAAS,WACP+yE,GAAU,GACV57D,YAAW,kBAAMvkB,EAAQnB,KAAK,cAAc,GAAE,IAChD,EAAEnC,SAAA,CAEDH,EAAE,mCAAmC,IAACI,eAACmG,KAAI,CAACC,KAAK,0BAIxDpG,eAACS,KAAc,CACXC,UAAW,IACXC,WAAYC,SAItB,KCgCelB,qBAAkB6C,aA9DjC,SAAmB5C,GAAuB,IAArBC,EAACD,EAADC,EAAUyD,GAAF1D,EAALyD,MAAczD,EAAP0D,SAC7BuQ,EAAyBC,YAAYja,GAA7B6pF,EAAiD1vE,YAAAH,EAAA,GAArC,GACpBoH,EAAgCnH,YAAY9Z,GAApC2pF,EAAgE3vE,YAAAiH,EAAA,GAA7C,GAC3BtE,EAA4BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAApC3V,EAAM6V,EAAA,GAAE4sE,EAAS5sE,EAAA,GAElBpT,EAAeC,qBAAWlC,IAGhC,OAFAjJ,QAAQC,IAAIiL,GAGVlD,gBAACsiF,GAAoB,CAAC9iF,QAAS0D,EAAaohC,aAAa7kC,SAAA,CAEvDC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SACRH,EAAE,uBAEJA,EAAE,oCAAoC,IAACI,eAAA,SAAMA,eAAA,SAC9CA,eAAC2E,KAAM,CACLmJ,OAAK,EACLlM,QAASb,EACT2S,SAAU3S,EACV+D,MAAM,UACNR,KAAK,SACLmM,QAAS,WACP+yE,GAAU,GACVtlF,EAAOe,SACPwkF,IAAe7uE,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KACrBxJ,QAAQC,IAAI,WAAYuJ,EACxB,IACDoT,OAAM,SAACrT,GACNvJ,QAAQC,IAAIsJ,EACd,IACA6hF,IAAsB9uE,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KAC5BxJ,QAAQC,IAAI,WAAYuJ,EACxB,IACDoT,OAAM,SAACrT,GACNvJ,QAAQC,IAAIsJ,EACd,IACA+lB,YAAW,kBAAM/S,KAAM8uE,KAAK/jF,EAAE,uBAAwB,CACpDmV,SAAUF,KAAMG,SAASC,cACzB,GAAE,KACJ2S,YAAW,kBAAMvkB,EAAQnB,KAAK,IAAI,GAAE,IACtC,EAAEnC,SAEDH,EAAE,yBAITI,eAAC2E,KAAM,CACLmJ,OAAK,EACLhJ,MAAM,OACN2L,QAAS,SAACiN,GACRA,EAAMulE,iBACN3zE,OAAOjM,QAAQ46C,MACjB,EAAEl+C,SAEDH,EAAE,sBAIX,KC5BeF,qBAAkB6C,aAnCjC,SAA2B5C,GAAuB,IAArBC,EAACD,EAADC,EAAUyD,GAAF1D,EAALyD,MAAczD,EAAP0D,SAIrCqT,EAA4BC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAApC3V,EAAM6V,EAAA,GAAE4sE,EAAS5sE,EAAA,GAExB,OACEtW,gBAACsiF,GAAoB,CAAA7iF,SAAA,CAEnBC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAACkH,KAAKqJ,MAAK,CAAAxQ,SACRH,EAAE,gCAEJA,EAAE,gCAAgC,IAACI,eAAA,SAAMA,eAAA,SAC1CM,gBAACqE,KAAM,CACLmJ,OAAK,EACLlM,QAASb,EACT2S,SAAU3S,EACV+D,MAAM,UACNR,KAAK,SACLmM,QAAS,WACP+yE,GAAU,GACV57D,YAAW,kBAAMvkB,EAAQnB,KAAK,cAAc,GAAE,IAChD,EAAEnC,SAAA,CAEDH,EAAE,oCAAoC,IAACI,eAACmG,KAAI,CAACC,KAAK,0BAIzDpG,eAACS,KAAc,CAACC,UAAW,QAGjC,KCmEehB,qBAAkB6C,aA1FjC,SAAgB5C,GAAuB,IAArBC,EAACD,EAADC,EAAUyD,GAAF1D,EAALyD,MAAczD,EAAP0D,SACpBG,EAAeC,qBAAWlC,IAChC+B,EAAiCC,YAASiH,GAAkB,CAC1DqB,YAAa,iBADPjK,EAAO0B,EAAP1B,QAASC,EAAKyB,EAALzB,MAAOC,EAAIwB,EAAJxB,KAIxB,GAAIF,EAAS,OACX5B,eAACa,GAAoB,CAACf,QAAS0D,EAAaohC,aAAa7kC,SACvDC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,eAACa,GAAoB,CAACf,QAAS0D,EAAaohC,aAAa7kC,SACtDH,EAAE,gDAIP,IAAM2E,EAAOzC,EAAKyC,KAQlB,OALKA,EAAKE,UAAaF,EAAKC,YAC1BnB,EAAQnB,KAAK,iBAKb5B,gBAACO,GAAoB,CAACf,QAAS0D,EAAaohC,aAAa7kC,SAAA,CACvDO,gBAAA,OAAKJ,UAAU,mBAAkBH,SAAA,CAC/BO,gBAAA,MAAAP,SAAA,CAAKH,EAAE,mBAAmB,IAAE2E,EAAKsG,aACjC7K,eAAA,MAAAD,SAAKH,EAAE,yCAETU,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG88E,SAAU,EAAE7jF,SAC3CC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,gBACNA,EAAE,iCAAiC,IAACI,eAAA,SAAMA,eAAA,SAC3CA,eAAC0E,IAAI,CAACtC,GAAG,IAAGrC,SACVO,gBAACqE,KAAM,CACLmJ,OAAK,EACLlJ,SAAO,EACPE,MAAM,UAAS/E,SAAA,CAEdH,EAAE,wBAAwB,IAACI,eAACmG,KAAI,CAACC,KAAK,8BAMjDpG,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAE/G,SAC9BC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,qBACNA,EAAE,mCAAmC,IAACI,eAAA,SAAMA,eAAA,SAC7CA,eAAC0E,IAAI,CAACtC,GAAG,WAAUrC,SACjBO,gBAACqE,KAAM,CACLmJ,OAAK,EACLlJ,SAAO,EACPE,MAAM,UAAS/E,SAAA,CAEdH,EAAE,2BAA2B,IAACI,eAACmG,KAAI,CAACC,KAAK,8BAMpDpG,eAAC0N,GAAoB,CAACxD,SAAS,cAAcD,WAAW,OAAOK,aAAa,EAAKvK,SAC/EC,eAACI,KAAKqF,IAAG,CAAC+H,GAAI,GAAIC,GAAI,GAAI3G,GAAI,EAAG88E,SAAU,EAAE7jF,SAC3CC,eAACkH,KAAI,CAAAnH,SACHO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACRC,eAAA,MAAAD,SAAKH,EAAE,4BACNA,EAAE,uCAAuC,IAACI,eAAA,SAAMA,eAAA,SACjDA,eAAC0E,IAAI,CAACtC,GAAG,eAAcrC,SACrBO,gBAACqE,KAAM,CACLmJ,OAAK,EACLlJ,SAAO,EACPE,MAAM,UAAS/E,SAAA,CAEdH,EAAE,+BAA+B,IAACI,eAACmG,KAAI,CAACC,KAAK,qCAUlE,KCjGey9E,I,MAAAA,GAJf,WACE,OAAO7jF,eAAC8jF,KAAY,GACtB,ECVaC,GAA4BzqF,YAAGC,QAAAC,YAAA,6tBA2C/BwqF,GAAsB1qF,YAAGI,QAAAF,YAAA,6LC2BvBkG,iBAAkB6C,aAvDE,SAAH5C,GAAA,IAAMC,EAACD,EAADC,EAAYoT,GAAFrT,EAAP0D,QAAqB1D,EAAZqT,cAAcC,EAAMtT,EAANsT,OAAQ5M,EAAS1G,EAAT0G,UAAS,OAC/ErG,eAACkT,KAAM,CAAAnT,SACLO,gBAAC4G,KAAI,CAACX,MAAO3G,EAAE,mCAAmCG,SAAA,CAClDO,gBAAC4G,KAAKC,KAAI,CAAApH,SAAA,CACNC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0CAA0CG,SAAA,CAC7DC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,SACLlG,UAAY+S,EAAO8sC,OAAU,0BAA4B,eACzDxsC,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,MAAMqN,UAAU,OAAOvT,UAAU,4BAI1DI,gBAACF,KAAKC,IAAG,CAAAN,SAAA,CACPC,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,0CAA0CG,SAAA,CAC7DC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,SACLlG,UAAY+S,EAAO+sC,OAAU,0BAA4B,eACzDzsC,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,SAASqN,UAAU,OAAOvT,UAAU,0BAG3DF,eAACI,KAAKqF,IAAG,CAAA1F,SACPO,gBAAC6S,KAAKC,MAAK,CAACC,MAAOzT,EAAE,uCAAuCG,SAAA,CAC1DC,eAACsT,KAAK,CAAChP,KAAK,OACJ8B,KAAK,MACLlG,UAAY+S,EAAOgtC,IAAO,0BAA4B,eACtD1sC,aAAa,QACrBvT,eAACwT,KAAY,CAACpN,KAAK,MAAMqN,UAAU,OAAOvT,UAAU,gCAK5DI,gBAAC4G,KAAKsJ,OAAM,CAAAzQ,SAAA,CACRC,eAAC2E,KAAM,CACLG,MAAM,UACN5E,UAAU,aACVoE,KAAK,SACLoP,SAAUV,EAAajT,SAEtBH,EAAE,oBAELI,eAAC0E,IAAI,CAACtC,GAAIiE,EAAUtG,SAClBC,eAAC2E,KAAM,CAACG,MAAM,OAAM/E,SACfH,EAAE,6BAKR,KClEEqkF,GAA8BzxE,OAAaC,MAAM,CAC1DstC,OAAQvtC,OACLK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,uBACdogD,OAAQxtC,OACLK,IAAI,EAAGjT,YAAE,kBACT+S,SAAS/S,YAAE,yBC0GHF,qBAAkB6C,aA9FjC,SAA+B5C,GAAuB,IAArBC,EAACD,EAADC,EAAUyD,GAAF1D,EAALyD,MAAczD,EAAP0D,SAEnCk1D,EAAUl6D,aAAa0E,QAAQxE,EAAKd,gCAG1C6F,EAAmEC,YAASiH,IAA3DY,EAAW9H,EAApB1B,QAA6ByJ,EAAS/H,EAAhBzB,MAAwByJ,EAAQhI,EAAdxB,KAChDyJ,EAAiChI,YAASwgF,GAA2B,CACnEv4E,KAAMJ,GAAeC,IAAcC,EACnCG,UAAW,CACTqZ,QAASxZ,GAAYA,EAAS/G,KAAO+G,EAAS/G,KAAKmH,UAAY,MAEjEG,YAAa,iBALPjK,EAAO2J,EAAP3J,QAASC,EAAK0J,EAAL1J,MAAOC,EAAIyJ,EAAJzJ,KAOxB8R,EAA8BC,YAAYmwE,IAAlCE,EAAsDnwE,YAAAH,EAAA,GAArC,GAEzB,GAAIhS,GAAWwJ,IAAgBtJ,EAAM,OACnC9B,eAACg4E,GAAsB,CAAAj4E,SACrBC,eAACc,KAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASwJ,EAAW,OACtBrL,eAACg4E,GAAsB,CAAAj4E,SACpBH,EAAE,kDAIP,IAAM2E,EAAO+G,EAAS/G,KAChB4/E,EAAcriF,EAAKw+C,oBAAoBl3C,MAAM,GAAGG,KAEtD,OACEvJ,eAACg4E,GAAsB,CAAClB,YAAavyE,EAAKwgB,SAAShlB,SACjDC,eAACI,KAAKC,IAAG,CAAAN,SACPC,eAACI,KAAKqF,IAAG,CAACqB,GAAI,GAAG/G,SACfC,eAACgU,KAAM,CACLC,cAAe,CACb+rC,OAAQmkC,EAAYnkC,OACpBD,OAAQokC,EAAYpkC,OACpBE,IAAKkkC,EAAYlkC,KAEnB9rC,iBAAkB8vE,GAClB7vE,SAAU,SAACC,EAAM9H,GAAyB,IAArB+H,EAAa/H,EAAb+H,cACjBhc,QAAQC,IAAI,kBACZD,QAAQC,IAAI8b,GAEZ,IAAIuqC,EAAa,CACfrnC,GAAI4sE,EAAY5sE,GAChByoC,OAAQ3rC,EAAO2rC,OACfD,OAAQ1rC,EAAO0rC,OACfE,IAAK5rC,EAAO4rC,KAGdikC,EAAkB,CAAEz4E,UAAW,CAC7B8I,MAAOqqC,GACNlqC,eAAgB,KAMlBE,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACLxJ,QAAQC,IAAI,WAAYuJ,GACpBy2D,GACFl1D,EAAQnB,KAAKq2D,GAGf1jD,KAAMC,QAASlV,EAAE,gDAAkD,CAC/DmV,SAAUF,KAAMG,SAASC,eAE7BX,GAAc,EAChB,IAAGY,OAAM,SAACrT,GACRgT,KAAMhT,MAAOjC,EAAE,8BAAkCiC,EAAO,CACpDkT,SAAUF,KAAMG,SAASC,eAE7B3c,QAAQC,IAAI,uCAAwCsJ,GACpDyS,GAAc,EAChB,GACN,EAAEvU,SAED,SAAAiN,GAAA,IAAGgG,EAAYhG,EAAZgG,aAAcC,EAAMjG,EAANiG,OAAQoB,EAAMrH,EAANqH,OAAM,OAC9BrU,eAACokF,GAA0B,CACzBpxE,aAAcA,EACdC,OAAQA,EACRoB,OAAQA,EACRhO,UAAW,iBACX,SAOhB,K,iBC+PA,IAAMg+E,GAAe,SAAH1kF,GAA2C,IAA1B+Q,EAAS/Q,EAApB8T,UAAyB6wE,EAAIC,YAAA5kF,EAAA6kF,IACnD9tE,EAAgDC,oBAAS,GAAMC,EAAA7C,YAAA2C,EAAA,GAAvD+tE,EAAe7tE,EAAA,GAAE8tE,EAAkB9tE,EAAA,GAC3ChD,EAAyBC,YAAYpa,GAA9B2e,EAA4CrE,YAAAH,EAAA,GAA9B,GACjB+wE,GAAmB,EACvBrsF,QAAQC,IAAI+rF,EAAKM,MAEjB,IAAMC,EAAmB7kF,eAAC8kF,IAAK38D,wBAAA,GAAKm8D,GAAI,IAAES,OAAQ,SAACp1E,GAAK,OAAO3P,eAAC0Q,EAASyX,YAAA,GAAKxY,GAAS,KACjFq1E,EAAehlF,eAAC8kF,IAAK38D,wBAAA,GAAKm8D,GAAI,IAAES,OAAQ,SAACp1E,GAAK,OAClDrP,gBAACQ,KAAM,CAACC,QAAQ,EAAMC,QAAQ,EAAKjB,SAAA,CAACC,eAAC0Q,EAASyX,YAAA,GAAKxY,IAAS,MAAU,KAClEs1E,EAAgBjlF,eAAC8kF,IAAK38D,wBAAA,GAAKm8D,GAAI,IAAES,OAAQ,SAACp1E,GAAK,OAAO3P,eAACklF,IAAQ,CAAC9iF,GAAG,wBAAyB,KAI5F+iF,EAAW9mF,aAAa0E,QAAQxE,EAAKhE,gBAK3C,GAJK,IAAI2I,KAAS,KAASiiF,IACzBR,GAAmB,GAGjBF,EAEF,OADAnsF,QAAQC,IAAI,mCACLysF,EAGT,IAAIL,EA2CF,OAAOE,EA1CP,IAAM/hF,EAAkBzE,aAAa0E,QAAQxE,EAAK7D,wBAiBlDpC,QAAQC,IAAI,yCACZD,QAAQC,IAAI,IAAI2K,KAAS,KACzB5K,QAAQC,IAAIuK,GAGZ4hF,GAAmB,GACnBtsE,IAAiBxD,MAAK,SAAArI,GAAe,IAAZzK,EAAIyK,EAAJzK,KAMvB,OALAxJ,QAAQC,IAAI,mBAAoBuJ,GAChC5D,EAAOW,gBAAgBiD,EAAKwW,cAC5BsP,YAAW,WACT88D,GAAmB,EACrB,GAAG,KACIG,CACT,IAAG3vE,OAAM,SAACrT,GAQR,OAPAgT,KAAMhT,MAAMA,EAAO,CACjBkT,SAAUF,KAAMG,SAASC,eAE3B3c,QAAQC,IAAI,0CAA2CsJ,GAnE7D,WACEvJ,QAAQC,IAAI,qDACZ,IACM4iD,EADa7rC,OAAO0O,SAAS9Z,KACX2F,MAAM,KAAK,GACnCvR,QAAQC,IAAI4iD,GACZ98C,aAAaC,QAAQC,EAAK5D,gBAAiBwgD,EAC7C,CA8DMiqC,GAEAlnF,EAAOa,UACAkmF,CACT,GAMJ,EAiaevlF,sBA9Zf,SAAgBoN,GAAS,IAANlN,EAACkN,EAADlN,EACjB0D,EAAwFC,YAASjE,IAAhF+lF,EAAkB/hF,EAA3B1B,QAAoC0jF,EAAgBhiF,EAAvBzB,MAA+B0jF,EAAejiF,EAArBxB,KAC9DyJ,EAA2FhI,YAAS/D,GAAwB,CAC1HiM,UAAW,CAAC8L,GAAI,kCADDiuE,EAAmBj6E,EAA5B3J,QAAqC6jF,EAAiBl6E,EAAxB1J,MAAgC6jF,EAAgBn6E,EAAtBzJ,KAMhE,GAAIujF,GAAsBG,EACxB,OACExlF,eAAC0D,GAAsB,IAG3B,GAAI4hF,GAAoBG,EACtB,MAAiC,0BAA7BH,EAAiB/tD,QACZ,GAGLj3B,gBAAA,OAAAP,SAAA,CACIH,EAAE,0BAA2B,IAACI,eAAA,SAC9BslF,EAAiB/tD,QAAS,IAACv3B,eAAA,SAC3BylF,EAAkBluD,WAQ5B,IAAI9C,EAAc8wD,EAAgB9wD,YAC9BjxB,EAAekiF,EAAiBliF,aAEpC,OACExD,eAACoB,GAAmB,CAACe,MAAOsyB,EAAY10B,SACtCC,eAACwB,GAAoB,CAACW,MAAOqB,EAAazD,SACxCC,eAAC2lF,IAAU,CAAA5lF,SACTO,gBAACslF,IAAM,CAAA7lF,SAAA,CAELC,eAAC8kF,IAAK,CAACe,OAAK,EAACjB,KAAK,iBAAiBnxE,UAAWqyE,KAE9C9lF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,WAAWnxE,UAAWsyE,KAG/C/lF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,cAAcnxE,UAAWuyE,KAClDhmF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,4CACLnxE,UAAWwyE,KAC/BjmF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gDACLnxE,UAAWyyE,KAC/BlmF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6CACLnxE,UAAW0yE,KAC/BnmF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iDACLnxE,UAAW2yE,KAC/BpmF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uDACLnxE,UAAW4yE,KAC/BrmF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2DACLnxE,UAAW6yE,KAI/BtmF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,WAAWnxE,UAAWkC,KAC/C3V,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uBAAuBnxE,UAAW8yE,KAC3DvmF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2BAA2BnxE,UAAW+yE,KAC/DxmF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gCAAgCnxE,UAAWgzE,KACpEzmF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,oBAAoBnxE,UAAWizE,KACxD1mF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,wBAAwBnxE,UAAWkzE,KAC5D3mF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6BAA6BnxE,UAAWmzE,KACjE5mF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2BAA2BnxE,UAAWozE,KAC/D7mF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,oBAAoBnxE,UAAWqzE,KACxD9mF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2BAA2BnxE,UAAWszE,KAC/D/mF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6BAA6BnxE,UAAWuzE,KACjEhnF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gCAAgCnxE,UAAW2Z,KACpEptB,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2BAA2BnxE,UAAWwzE,KAC/DjnF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+BAA+BnxE,UAAWyzE,KACnElnF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,oCAAoCnxE,UAAW0zE,KACxEnnF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,oCAAoCnxE,UAAW2zE,KACxEpnF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,4CAA4CnxE,UAAW4zE,KAChFrnF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iDAAiDnxE,UAAW6zE,KACrFtnF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,sBAAsBnxE,UAAW8zE,KAC1DvnF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0BAA0BnxE,UAAW+zE,KAC9DxnF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+BAA+BnxE,UAAWg0E,KACnEznF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kBAAkBnxE,UAAWi0E,KACtD1nF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2BAA2BnxE,UAAWk0E,KAC/D3nF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,sCAAsCnxE,UAAWm0E,KAC1E5nF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+CAA+CnxE,UAAWo0E,KACnF7nF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+CAA+CnxE,UAAWq0E,KACnF9nF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,yDAAyDnxE,UAAWs0E,KAC7F/nF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+CAA+CnxE,UAAWu0E,KACnFhoF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kCAAkCnxE,UAAWw0E,KACtEjoF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,sCAAsCnxE,UAAWy0E,KAC1EloF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2CAA2CnxE,UAAW00E,KAC/EnoF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0BAA0BnxE,UAAW20E,KAC9DpoF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8BAA8BnxE,UAAW40E,KAClEroF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mCAAmCnxE,UAAW60E,KACvEtoF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kBAAkBnxE,UAAW80E,KACtDvoF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,yBAAyBnxE,UAAW+0E,KAC7DxoF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2BAA2BnxE,UAAWg1E,KAC/DzoF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8BAA8BnxE,UAAWgnB,KAClEz6B,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,yBAAyBnxE,UAAWi1E,KAC7D1oF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6BAA6BnxE,UAAWk1E,KACjE3oF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kCAAkCnxE,UAAWm1E,KACtE5oF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,oBAAoBnxE,UAAWo1E,KACxD7oF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,wBAAwBnxE,UAAWq1E,KAC5D9oF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6BAA6BnxE,UAAWs1E,KACjE/oF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,4BAA4BnxE,UAAWu1E,KAGhEhpF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gBAAgBnxE,UAAWswB,KACpD/jC,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,yBAAyBnxE,UAAWw1E,KAC7DjpF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kCAAkCnxE,UAAWy1E,KACtElpF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gDAAgDnxE,UAAW01E,KACpFnpF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2CAA2CnxE,UAAW21E,KAC/EppF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0DAA0DnxE,UAAW41E,KAC9FrpF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8DAA8DnxE,UAAW61E,KAClGtpF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mEAAmEnxE,UAAW81E,KACvGvpF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8BAA8BnxE,UAAW+1E,KAClExpF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kCAAkCnxE,UAAWg2E,KACtEzpF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uCAAuCnxE,UAAWi2E,KAC3E1pF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uCAAuCnxE,UAAWk2E,OAC3E3pF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2CAA2CnxE,UAAWm2E,OAC/E5pF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gDAAgDnxE,UAAWo2E,OACpF7pF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iEAAiEnxE,UAAWq2E,OACrG9pF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,sEAAsEnxE,UAAWs2E,OAC1G/pF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0EAA0EnxE,UAAWu2E,OAC9GhqF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,wFACnBnxE,UAAWw2E,OACjBjqF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,4FACnBnxE,UAAWy2E,OACjBlqF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iGACnBnxE,UAAW02E,OACjBnqF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,4BAA4BnxE,UAAW22E,KAChEpqF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gCAAgCnxE,UAAW42E,KACpErqF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,qCAAqCnxE,UAAW62E,KACzEtqF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mCAAmCnxE,UAAW82E,KACvEvqF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uCAAuCnxE,UAAW+2E,KAC3ExqF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,4CAA4CnxE,UAAWg3E,KAChFzqF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mDAAmDnxE,UAAWi3E,KACvF1qF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2BAA2BnxE,UAAWk3E,KAC/D3qF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+BAA+BnxE,UAAWm3E,KACnE5qF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,oCAAoCnxE,UAAWo3E,KACxE7qF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0CAA0CnxE,UAAWq3E,KAC9E9qF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,4BAA4BnxE,UAAWs3E,KAChE/qF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gCAAgCnxE,UAAWu3E,KACpEhrF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,qCAAqCnxE,UAAWw3E,KACzEjrF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,yBAAyBnxE,UAAWy3E,KAC7DlrF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6BAA6BnxE,UAAW03E,KACjEnrF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kCAAkCnxE,UAAW23E,KACtEprF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,4CAA4CnxE,UAAW43E,KAChFrrF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0BAA0BnxE,UAAW63E,KAC9DtrF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8BAA8BnxE,UAAW83E,KAClEvrF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mCAAmCnxE,UAAW+3E,KACvExrF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uBAAuBnxE,UAAWg4E,KAC3DzrF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2BAA2BnxE,UAAWi4E,KAC/D1rF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gCAAgCnxE,UAAWk4E,KACpE3rF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0BAA0BnxE,UAAWm4E,KAC9D5rF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8BAA8BnxE,UAAWo4E,KAClE7rF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mCAAmCnxE,UAAWq4E,KACvE9rF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6CAA6CnxE,UAAWs4E,KACjF/rF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iDAAiDnxE,UAAWu4E,KACrFhsF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,sDAAsDnxE,UAAWw4E,KAC1FjsF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,yBAAyBnxE,UAAWy4E,KAC7DlsF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6BAA6BnxE,UAAW04E,KACjEnsF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kCAAkCnxE,UAAW24E,KACtEpsF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uBAAuBnxE,UAAW44E,KAC3DrsF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2BAA2BnxE,UAAW64E,KAC/DtsF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gCAAgCnxE,UAAW84E,KAIpEvsF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8BAA8BnxE,UAAW+4E,KAClExsF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kCAAkCnxE,UAAWg5E,KACtEzsF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uCAAuCnxE,UAAWi5E,KAC3E1sF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,qCAAqCnxE,UAAWk5E,KACzE3sF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,yCAAyCnxE,UAAWm5E,KAC7E5sF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8CAA8CnxE,UAAWo5E,KAClF7sF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,4DAA4DnxE,UAAWq5E,KAChG9sF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,sDAAsDnxE,UAAWs5E,KAC1F/sF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0DAA0DnxE,UAAWu5E,KAC9FhtF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+DAA+DnxE,UAAWw5E,KAGnGjtF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,aAAanxE,UAAWglC,KACjDz4C,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,sBAAsBnxE,UAAWy5E,KAC1DltF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0BAA0BnxE,UAAW05E,KAC9DntF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0CAA0CnxE,UAAW25E,KAC9EptF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gDAAgDnxE,UAAW45E,KACpFrtF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,qDAAqDnxE,UAAW65E,KACzFttF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gDAAgDnxE,UAAW85E,KACpFvtF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8EACXnxE,UAAW+5E,KACzBxtF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mFACXnxE,UAAWg6E,KACzBztF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0CAA0CnxE,UAAWi6E,KAC9E1tF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8CAA8CnxE,UAAWk6E,KAClF3tF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kDAAkDnxE,UAAWm6E,KACtF5tF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uDAAuDnxE,UAAWo6E,KAC3F7tF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0DAA0DnxE,UAAWq6E,KAC9F9tF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,4CAA4CnxE,UAAWs6E,KAChF/tF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gDAAgDnxE,UAAWu6E,KACpFhuF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,qDAAqDnxE,UAAWw6E,KACzFjuF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8CAA8CnxE,UAAWy6E,KAClFluF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uDAAuDnxE,UAAW06E,KAC3FnuF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,wDAAwDnxE,UAAW26E,KAC5FpuF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uEACXnxE,UAAW46E,KACzBruF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2EACXnxE,UAAW66E,KACzBtuF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gFACXnxE,UAAW86E,KACzBvuF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2CAA2CnxE,UAAW+6E,KAC/ExuF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+CAA+CnxE,UAAWg7E,KACnFzuF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8CAA8CnxE,UAAWi7E,OAClF1uF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kDAAkDnxE,UAAWk7E,OACtF3uF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uDAAuDnxE,UAAWm7E,OAC3F5uF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,wCAAwCnxE,UAAWo7E,KAC5E7uF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,4CAA4CnxE,UAAWq7E,KAChF9uF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iDAAiDnxE,UAAWs7E,KACrF/uF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,yCAAyCnxE,UAAWu7E,KAC7EhvF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2CAA2CnxE,UAAWw7E,KAC/EjvF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+CAA+CnxE,UAAWy7E,KACnFlvF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,yCAAyCnxE,UAAW07E,KAC7EnvF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6CAA6CnxE,UAAW27E,KACjFpvF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gDAAgDnxE,UAAW47E,KACpFrvF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,gDAAgDnxE,UAAW67E,KACpFtvF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,oDAAoDnxE,UAAW87E,KACxFvvF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,sEACXnxE,UAAW+7E,KACzBxvF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iFACXnxE,UAAWg8E,KACzBzvF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,qFACXnxE,UAAWi8E,KACzB1vF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0FACXnxE,UAAWk8E,KACzB3vF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6EAA6EnxE,UAAWm8E,KACjH5vF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iFAAiFnxE,UAAWo8E,KACrH7vF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,sFACXnxE,UAAWq8E,KACzB9vF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8EAA8EnxE,UAAWs8E,KAClH/vF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kFAAkFnxE,UAAWu8E,KACtHhwF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uFACXnxE,UAAWw8E,KACzBjwF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+EACvBnxE,UAAWy8E,KACblwF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mFACvBnxE,UAAW08E,KACbnwF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6EAA6EnxE,UAAW28E,KACjHpwF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iFAAiFnxE,UAAW48E,KACrHrwF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,sFACXnxE,UAAW68E,KACzBtwF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,wCAAwCnxE,UAAW88E,KAC5EvwF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,qDAAqDnxE,UAAW+8E,KACzFxwF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iBAAiBnxE,UAAWg9E,KACrDzwF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,qBAAqBnxE,UAAWi9E,KACzD1wF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mCAAmCnxE,UAAWk9E,KACvE3wF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uCAAuCnxE,UAAWm9E,KAC3E5wF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2CAA2CnxE,UAAWo9E,KAG/E7wF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,YAAYnxE,UAAWogD,KAChD7zD,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,yBAAyBnxE,UAAWq9E,OAC7D9wF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6BAA6BnxE,UAAWs9E,OACjE/wF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kDAAkDnxE,UAAWu9E,OACtFhxF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,oBAAoBnxE,UAAWw9E,KACxDjxF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,yBAAyBnxE,UAAWy9E,KAC7DlxF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,wCAAwCnxE,UAAW09E,KAC5EnxF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+CAA+CnxE,UAAW29E,KACnFpxF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+CAA+CnxE,UAAW49E,KACnFrxF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,qDAAqDnxE,UAAW69E,KACzFtxF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uFACXnxE,UAAW89E,KACzBvxF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uDACXnxE,UAAW+9E,KACzBxxF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kEAAkEnxE,UAAWg+E,KACtGzxF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0CAA0CnxE,UAAWi+E,KAC9E1xF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6CAA6CnxE,UAAWk+E,KACjF3xF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kDAAkDnxE,UAAWm+E,KACtF5xF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iDAAiDnxE,UAAWo+E,KACrF7xF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+CAA+CnxE,UAAWq+E,KACnF9xF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kDAAkDnxE,UAAWs+E,KACtF/xF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uDAAuDnxE,UAAWu+E,KAC3FhyF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,qDAAqDnxE,UAAWw+E,KACzFjyF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2DACXnxE,UAAWy+E,KACzBlyF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2DAA2DnxE,UAAW0+E,KAC/FnyF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+CAA+CnxE,UAAW2+E,KACnFpyF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mBAAmBnxE,UAAW4+E,KACvDryF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uBAAuBnxE,UAAW6+E,KAC3DtyF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kCAAkCnxE,UAAW8+E,KACtEvyF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6CAA6CnxE,UAAW++E,KACjFxyF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iDAAiDnxE,UAAWg/E,KACrFzyF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,sDAAsDnxE,UAAWi/E,KAC1F1yF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iEACXnxE,UAAWk/E,KACzB3yF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6CAA6CnxE,UAAWm/E,KACjF5yF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iDAAiDnxE,UAAWo/E,KACrF7yF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,sDAAsDnxE,UAAWq/E,KAC1F9yF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,wCAAwCnxE,UAAWs/E,KAC5E/yF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,4CAA4CnxE,UAAWu/E,KAChFhzF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iDAAiDnxE,UAAWw/E,KACrFjzF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+DACXnxE,UAAWy/E,KACzBlzF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mEACXnxE,UAAW0/E,KACzBnzF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,wEACXnxE,UAAW2/E,KACzBpzF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0CAA0CnxE,UAAW4/E,KAC9ErzF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8CAA8CnxE,UAAW6/E,KAClFtzF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mDAAmDnxE,UAAW8/E,KACvFvzF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8DAA8DnxE,UAAW+/E,KAClGxzF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6DAA6DnxE,UAAWggF,KACjGzzF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,oEACXnxE,UAAWigF,KACzB1zF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mBAAmBnxE,UAAWkgF,KACvD3zF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uBAAuBnxE,UAAWmgF,KAC3D5zF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uCAAuCnxE,UAAWogF,KAC3E7zF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,8CAA8CnxE,UAAWqgF,KAClF9zF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,4CAA4CnxE,UAAWsgF,KAChF/zF,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+CAA+CnxE,UAAWugF,KACnFh0F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,oDAAoDnxE,UAAWwgF,KAIxFj0F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,WAAWnxE,UAAW0pB,KAC/Cn9B,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6BAA6BnxE,UAAWygF,KACjEl0F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iCAAiCnxE,UAAW0gF,KACrEn0F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,sCAAsCnxE,UAAW2gF,KAC1Ep0F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uBAAuBnxE,UAAW4gF,KAC3Dr0F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,oCAAoCnxE,UAAW6gF,KACxEt0F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mBAAmBnxE,UAAW8gF,KACvDv0F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,yBAAyBnxE,UAAW+gF,KAC7Dx0F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,uBAAuBnxE,UAAWghF,KAG3Dz0F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,oDAAoDnxE,UAAWihF,KACxF10F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6DACLnxE,UAAWkhF,KAC/B30F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,eAAenxE,UAAWmhF,KACnD50F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,qCAAqCnxE,UAAWohF,KAGzE70F,eAAC8kF,IAAK,CAACe,OAAK,EAACjB,KAAO,IAAInxE,UAAWqhF,KACnC90F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,gBAAgBnxE,UAAWshF,KACtD/0F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,6BAA6BnxE,UAAWuhF,KACnEh1F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,4DACPnxE,UAAWwhF,KAC/Bj1F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,8DACPnxE,UAAWyhF,KAC/Bl1F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,2CAA2CnxE,UAAW0hF,KACjFn1F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,wBAAwBnxE,UAAW2hF,KAC9Dp1F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,4BAA4BnxE,UAAW4hF,KAClEr1F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,8BAA8BnxE,UAAW6hF,KACpEt1F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,oCAAoCnxE,UAAW8hF,KAC1Ev1F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,2CAA2CnxE,UAAW+hF,KACjFx1F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,yBAAyBnxE,UAAWgiF,KAC/Dz1F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,4BAA4BnxE,UAAWiiF,KAClE11F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,8BAA8BnxE,UAAWkiF,KACpE31F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,uBAAuBnxE,UAAWmiF,KAC7D51F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,wBAAwBnxE,UAAWoiF,KAC9D71F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,8BAA8BnxE,UAAWqiF,KACpE91F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,uDAAuDnxE,UAAWsiF,KAC7F/1F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,6BAA6BnxE,UAAWuiF,KACnEh2F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,8BAA8BnxE,UAAWwiF,KACpEj2F,eAAC8kF,IAAK,CAACe,OAAK,EAACjB,KAAO,gBAAgBnxE,UAAWyiF,KAC/Cl2F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,qCAAqCnxE,UAAW0iF,KAC3En2F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,uCAAuCnxE,UAAW2iF,KAC7Ep2F,eAAC8kF,IAAK,CAACe,OAAK,EAACjB,KAAO,oBAAoBnxE,UAAW4iF,KACnDr2F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,sBAAsBnxE,UAAW6iF,KAC5Dt2F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,sCAAsCnxE,UAAW6iF,KAC5Et2F,eAAC8kF,IAAK,CAACe,OAAK,EAACjB,KAAO,gBAAgBnxE,UAAW8iF,KAC/Cv2F,eAAC8kF,IAAK,CAACe,OAAK,EAACjB,KAAO,eAAenxE,UAAW+iF,KAC9Cx2F,eAAC8kF,IAAK,CAACe,OAAK,EAACjB,KAAO,yBAAyBnxE,UAAWgjF,KACxDz2F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,oCAAoCnxE,UAAWijF,KAC1E12F,eAAC8kF,IAAK,CAACe,OAAK,EAACjB,KAAO,sBAAsBnxE,UAAWkjF,KACrD32F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,yBAAyBnxE,UAAWmjF,KAC/D52F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAO,gDAAgDnxE,UAAWojF,KAGtF72F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,YAAYnxE,UAAWqjF,KAChD92F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kBAAkBnxE,UAAWsjF,KACtD/2F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kCAAkCnxE,UAAWujF,KACtEh3F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6BAA6BnxE,UAAWwjF,KACjEj3F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,6BAA6BnxE,UAAWyjF,KACjEl3F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2BAA2BnxE,UAAW0jF,KAC/Dn3F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kCAAkCnxE,UAAW2jF,KACtEp3F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+BAA+BnxE,UAAW4jF,KACnEr3F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,iCAAiCnxE,UAAW6jF,KACrEt3F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,qCAAqCnxE,UAAW8jF,KACzEv3F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0CAA0CnxE,UAAW+jF,KAC9Ex3F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+BAA+BnxE,UAAWgkF,KACnEz3F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,+CAA+CnxE,UAAWikF,KACnF13F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2BAA2BnxE,UAAWkkF,KAC/D33F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,oCAAoCnxE,UAAWmkF,KACxE53F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,kCAAkCnxE,UAAWokF,KACtE73F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0BAA0BnxE,UAAWqkF,KAC9D93F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,mCAAmCnxE,UAAWskF,KACvE/3F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,0BAA0BnxE,UAAWukF,KAC9Dh4F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,yCAAyCnxE,UAAWwkF,KAC7Ej4F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,2BAA2BnxE,UAAWykF,KAG/Dl4F,eAACqkF,GAAY,CAACwB,OAAK,EAACjB,KAAK,wBAAwBnxE,UAAW0kF,KAC5Dn4F,eAAC8kF,IAAK,CAACe,OAAK,EAACjB,KAAK,cAAcnxE,UAAW2kF,KAC3Cp4F,eAAC8kF,IAAK,CAACe,OAAK,EAACjB,KAAK,uBAAuBnxE,UAAW4kF,KACpDr4F,eAAC8kF,IAAK,CAACe,OAAK,EAACjB,KAAK,eAAenxE,UAAW6kF,KAC5Ct4F,eAAC8kF,IAAK,CAACe,OAAK,EAACjB,KAAK,wBAAwBnxE,UAAW8kF,KACrDv4F,eAAC8kF,IAAK,CAACe,OAAK,EAACjB,KAAK,gBAAgBnxE,UAAW+kF,KAE7Cx4F,eAAC8kF,IAAK,CAACrxE,UAAWowE,aAM9B,I,qBC1yBA4U,OAAOC,UAAU7zE,MACf,SAAS66D,GACL,OAAOrgF,KAAKs5F,OAAO,EAAGjZ,EAAE,IAAMrgF,KAAKF,OAASugF,EAAI,MAAQ,GAC5D,EAiBF,IA+HIkZ,GA/HAnU,IAAkB,EAEhBoU,GAAYr+C,aAAQ,SAAA76C,GAAoE,IAAjEogE,EAAapgE,EAAbogE,cAAe+4B,EAAYn5F,EAAZm5F,aAAcC,EAASp5F,EAATo5F,UAAWC,EAAOr5F,EAAPq5F,QAASC,EAAQt5F,EAARs5F,SAC5E3gG,QAAQC,IAAIwgG,GACZzgG,QAAQC,IAAI0gG,GAEZ,IAwBM/sF,EAvBFgtF,GAA4C,EAsBhD,GApBIn5B,GACFA,EAAco5B,SAAQ,SAAA5sF,GAAmC,IAAhCgrB,EAAOhrB,EAAPgrB,QAAS0X,EAAS1iC,EAAT0iC,UAAW21C,EAAIr4E,EAAJq4E,KAC3CtsF,QAAQC,IAAI,6BAADuW,OACoByoB,EAAO,gBAAAzoB,OAAemgC,EAAS,YAAAngC,OAAW81E,GAO3E,IAEEkU,GAAcxgG,QAAQC,IAAI,oBAADuW,OAAqBgqF,IAG9C/4B,GAA8C,gEAA7BA,EAAc,GAAGxoC,SACpCj/B,QAAQuJ,MAAM,kCAIZo3F,EAEF,IAAK/sF,EAAI,EAAGA,EAAI+sF,EAAShmF,OAAO9T,OAAQ+M,IAClC+sF,EAAShmF,OAAO/G,GAAGsvE,YAAcyd,EAAShmF,OAAO/G,GAAGsvE,WAAWlkE,OAAS8hF,EAAKh/F,qBAC/E8+F,GAA4C,GAMlD,GAAIA,EAAuF,CAqBzF,GApBA5gG,QAAQC,IAAI,8BAoBPksF,GAGH,OAFAnsF,QAAQC,IAAI,+BAEL,IAAI8gG,KAAW,SAAAC,GACpB7U,IAAkB,EAClB8U,GAAOC,OAAO,CACZC,SAAUhgG,IAETmb,MAAK,SAAA9H,GAAe,IAAZhL,EAAIgL,EAAJhL,KACPxJ,QAAQC,IAAIuJ,GACZ5D,EAAOW,gBAAgBiD,EAAKwW,cAC5BsP,YAAW,WACT68D,IAAkB,CACpB,GAAG,IACL,IACC7vE,MAAK,WACJ,IAAM8kF,EAAa,CACjBv+C,KAAMm+C,EAASn+C,KAAK1B,KAAK6/C,GACzBz3F,MAAOy3F,EAASz3F,MAAM43C,KAAK6/C,GAC3B5hB,SAAU4hB,EAAS5hB,SAASj+B,KAAK6/C,IAInCN,EAAQD,GAAWY,UAAUD,EAC/B,IACCxkF,OAAM,SAAArT,GAGLvJ,QAAQuJ,MAAM,2BACdvJ,QAAQuJ,MAAMA,GACdy3F,EAASz3F,MAAMA,GACf4iF,IAAkB,EAClBvmF,EAAOa,UA3GnB,WACEzG,QAAQC,IAAI,qDACZ,IACM4iD,EADa7rC,OAAO0O,SAAS9Z,KACX2F,MAAM,KAAK,GACnCvR,QAAQC,IAAI4iD,GACE,gBAATA,GAAqC,0BAATA,GAA+C,yBAATA,GAAqCA,GAK1G98C,aAAaC,QAAQC,EAAK5D,gBAAiBwgD,EAE/C,CAkGYiqC,GACA91E,OAAO0O,SAAS9Z,KAAO,gBACvB0jB,YAAW,WACTtY,OAAO0O,SAAS47E,QAClB,GAAG,IACL,GACJ,IAKSnV,IACTnsF,QAAQC,IAAI,sBAEhB,CACF,IAiBa,SACEshG,KAAY,OAAAC,GAAAjrF,MAAC,KAAD3P,UAAA,UAAA46F,KAc1B,OAd0BA,GAAAl/C,YAAAC,cAAAC,MAA3B,SAAAi/C,IAAA,OAAAl/C,cAAAG,MAAA,SAAAg/C,GAAA,cAAAA,EAAA9+C,KAAA8+C,EAAA7+C,MAAA,WACMy9C,GAAU,CAADoB,EAAA7+C,KAAA,eAAA6+C,EAAAC,OAAA,SAASrB,IAAS,cAAAoB,EAAA7+C,KAAA,EAEzB++C,MAAM,YACTtlF,MAAK,SAAAqkF,GAAQ,OAAIA,EAASkB,MAAM,IAAC,OAOC,OAArCvB,GAAYwB,IAAQC,IAAI,aAAaL,EAAA7+C,KAAA,EAExBy9C,GAAS,cAAAoB,EAAAC,OAAA,SAAAD,EAAAM,MAAA,wBAAAN,EAAA5+C,OAAA,GAAA2+C,EAAA,MACvBlrF,MAAA,KAAA3P,UAAA,CAED,IAAMq7F,GAAWC,YAAe,CAC9BC,IAAK,cACLC,YAAa,gBAaTC,GAAiB,IAAIC,IAAU,eAAA5tF,EAAA4tC,YAAAC,cAAAC,MAAC,SAAAC,EAAOg+C,EAAWC,GAAO,IAAAJ,EAAA,OAAA/9C,cAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACrC0+C,KAAe,KAAD,EAQpC,OARIjB,EAAS39C,EAAAq/C,KACfF,IAAQS,IAAI,YAAajC,GAEzBG,EAAU+B,WAAW,CAEnBC,QAAS,CACL,cAAenC,KAEnB39C,EAAAg/C,OAAA,SAEKjB,EAAQD,IAAU,wBAAA99C,EAAAG,OAAA,GAAAL,EAAA,KAC1B,gBAAAigD,EAAAC,GAAA,OAAAjuF,EAAA6B,MAAA,KAAA3P,UAAA,EAZoC,IA2B/Bq6F,GAAS,IAAI2B,IAAa,CAC9BvtF,KAAMwtF,YAAK,CAACR,GAAgB9B,GAAW0B,KACvCa,MAAO,IAAIC,IAAc,CACvBC,aAAc,CACZC,MAAO,CACLC,OAAQ,CACN/8D,SAAUg9D,qBAmBLC,OAXf,WAIE,OACE17F,eAAC27F,IAAc,CAACpC,OAAQA,GAAOx5F,SAC7BC,eAAC47F,GAAO,KAGd,EClQoBC,QACW,cAA7BvsF,OAAO0O,SAASgyD,UAEe,UAA7B1gE,OAAO0O,SAASgyD,UAEhB1gE,OAAO0O,SAASgyD,SAAS5sE,MACvB,2DCVN04F,IAAS/W,OAAO/kF,eAAC07F,GAAG,IAAKzsF,SAAS8sF,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtnF,MAAK,SAAAsW,GACjCA,EAAaixE,YACf,G","file":"static/js/main.96a71a81.chunk.js","sourcesContent":["import i18n from \"i18next\"\nimport { initReactI18next } from \"react-i18next\"\n// import Backend from 'i18next-xhr-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\n// the translations\n// (tip move them in a JSON file and import them)\n// const resources = {\n//   en: {\n//     translations: {\n//         school: \"School\"\n//     }\n//   }\n// }\n\nimport en_US_common from \"./i18n/en_US/common\"\nconst resources = {\n    en_US: {\n        common: en_US_common\n    },\n}\n\nconsole.log(resources)\n\n\ni18n\n  // load translation using xhr -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  //   .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    resources,\n    lng: \"en_US\",\n    fallbackLng: \"en_US\",\n    ns: [\"common\"],\n    defaultNS: \"common\",\n    debug: true,\n\n    // keySeparator: false, // we do not use keys in form messages.welcome\n    keySeparator: '.', // we use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    }\n  })\n\n  export default i18n","import { gql } from \"@apollo/client\"\n\n\nexport const TOKEN_AUTH = gql`\n  mutation TokenAuth($username: String!, $password: String!) {\n    tokenAuth(username: $username, password: $password) {\n      payload\n      refreshToken\n      refreshExpiresIn\n    }\n  } \n`\n\n\nexport const TOKEN_VERIFY = gql`\n  mutation VerifyToken($token: String!) {\n    verifyToken(token: $token) {\n      payload\n    }\n  }\n`\n\n\nexport const TOKEN_REFRESH = gql`\n  mutation RefreshToken {\n    refreshToken {\n      token\n      payload\n      refreshExpiresIn\n      refreshToken\n    }\n  }\n`\n\n\nexport const TOKEN_REVOKE = gql`\n  mutation RevokeToken($refreshToken: String!) {\n    revokeToken(refreshToken: $refreshToken) {\n      revoked\n    }\n  }\n`\n\n\nexport const TOKEN_COOKIE_DELETE = gql`\n  mutation {\n    deleteTokenCookie {\n      deleted\n    }\n  }\n`\n\n\nexport const TOKEN_REFRESH_COOKIE_DELETE = gql`\n  mutation {\n    deleteRefreshTokenCookie {\n      deleted\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_PASSWORD = gql`\n  mutation UpdateAccountPassword($input: UpdateAccountPasswordInput!) {\n    updateAccountPassword(input: $input) {\n      ok\n    }\n  }\n`","const cs_error_codes = {\n    USER_NOT_LOGGED_IN: \"USER_NOT_LOGGED_IN\"\n}\n\nexport default cs_error_codes\n","const cs_local_storage_keys = {\n    AUTH_TOKEN: 'costasiella:authToken',\n    AUTH_TOKEN_EXP: 'costasiella:authTokenExp',\n    AUTH_TOKEN_ORIGIAT: 'costasiella:authTokenorigIat',\n    AUTH_REFRESH_TOKEN: 'costasiella:authRefreshToken', \n    AUTH_REFRESH_TOKEN_EXP: 'costasiella:refreshTokenExp',\n    AUTH_LOGIN_NEXT: 'costasiella:authLoginNext',\n    FINANCE_EXPENSES_FILTER_DATE_FROM: 'costasiella:financeExpensesFilterDateFrom',\n    FINANCE_EXPENSES_FILTER_DATE_UNTIL: 'costasiella:financeExpensesFilterDateUntil',\n    FINANCE_EXPENSES_FILTER_SUPPLIER: 'costasiella:financeExpensesFilterSupplier',\n    FINANCE_INVOICES_FILTER_STATUS: 'costasiella:financeInvoicesFilterStatus',\n    FINANCE_INVOICES_EDIT_RETURN: 'costasiella:financeInvoicesEditReturn',\n    FINANCE_ORDERS_FILTER_STATUS: 'costasiella:financeOrdersFilterStatus',\n    FINANCE_QUOTES_EDIT_RETURN: 'costasiella:financeQuotesEditReturn',\n    FINANCE_QUOTES_FILTER_STATUS: 'costasiella:financeQuotesFilterStatus',\n    FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE: 'costasiella:financePaymentBatchCategoriesShowArchive',\n    INSIGHT_CLASSPASSES_YEAR: 'costasiella:insightClasspassesYear',\n    INSIGHT_REVENUE_YEAR: 'costasiella:insightRevenueYear',\n    INSIGHT_SUBSCRIPTIONS_YEAR: 'costasiella:insightSubscriptionsYear',\n    INSIGHT_TRIALPASSES_YEAR: 'costasiella:insightTrialpassesYear',\n    INSIGHT_TRIALPASSES_MONTH: 'costasiella:insightTrialpassesMonth',\n    ORGANIZATION_CLASSTYPES_ARCHIVED: 'costasiella:organizationClasstypesArchived',\n    RELATIONS_ACCOUNTS_FILTER_TYPE: 'costasiella:relationsAccountsFilterType',\n    RELATIONS_ACCOUNTS_SEARCH: 'costasiella:relationsAccountsSearch',\n    RELATIONS_ACCOUNTS_IS_ACTIVE: 'costasiella:relationsAccountsIsActive',\n    RELATIONS_ACCOUNT_NOTES_NOTE_TYPE: 'costasiella:relationsAccountNotesNoteType',\n    RELATIONS_ACCOUNT_PROFILE_RETURN: 'costasiella:relationsAccountProfileReturn',\n    RELATIONS_BUSINESSES_SHOW_ARCHIVE: 'costasiella:relationsBusinessesShowArchive',\n    RELATIONS_BUSINESSES_SEARCH: 'costasiella:relationsBusinessesSeach',\n    SCHEDULE_APPOINTMENTS_DATE_FROM: 'costasiella:scheduleAppointmentsDateFrom',\n    SCHEDULE_APPOINTMENTS_DATE_UNTIL: 'costasiella:scheduleAppointmentsDateUntil',\n    SCHEDULE_APPOINTMENTS_ORDER_BY: 'costasiella:scheduleAppointmentsOrderBy',\n    SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE: 'costasiella:scheduleAppointmentsFilterClasstype',\n    SCHEDULE_APPOINTMENTS_FILTER_LOCATION: 'costasiella:scheduleAppointmentsFilterLocation',\n    SCHEDULE_CLASSES_DATE_FROM: 'costasiella:scheduleClassesDateFrom',\n    SCHEDULE_CLASSES_DATE_UNTIL: 'costasiella:scheduleClassesDateUntil',\n    SCHEDULE_CLASSES_ORDER_BY: 'costasiella:scheduleClassesOrderBy',\n    SCHEDULE_CLASSES_FILTER_CLASSTYPE: 'costasiella:scheduleClassesFilterClasstype',\n    SCHEDULE_CLASSES_FILTER_INSTRUCTOR: 'costasiella:scheduleClassesFilterInstructor',\n    SCHEDULE_CLASSES_FILTER_LEVEL: 'costasiella:scheduleClassesFilterLevel',\n    SCHEDULE_CLASSES_FILTER_LOCATION: 'costasiella:scheduleClassesFilterLocation',\n    SCHEDULE_CLASSES_ENROLLMENT_SEARCH: 'costasiella:scheduleClassesEnrollmentSearch',\n    SCHEDULE_CLASSES_ENROLLMENT_RETURN: 'costasiella:scheduleClassesEnrollmentReturn',\n    SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH: 'costasiella:scheduleClassesClassAttendanceSearch',\n    SCHEDULE_EVENTS_ARCHIVED: 'costasiella:scheduleEventsArchived',\n    SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH: 'costasiella:scheduleEventsTicketsCustomersSearch',\n    SCHEDULE_SHIFTS_DATE_FROM: 'costasiella:scheduleShiftsDateFrom',\n    SCHEDULE_SHIFTS_DATE_UNTIL: 'costasiella:scheduleShiftsDateUntil',\n    SCHEDULE_SHIFTS_ORDER_BY: 'costasiella:scheduleShiftsOrderBy',\n    SCHEDULE_SHIFTS_FILTER_SHIFT: 'costasiella:scheduleShitsFilterShift',\n    SCHEDULE_SHIFTS_FILTER_LOCATION: 'costasiella:scheduleShiftsFilterLocation',\n    SELFCHECKIN_CHECKIN_SEARCH: 'costasiella:SelfcheckinCheckinSearch',\n    SHOP_ACCOUNT_BANK_ACCOUNT_NEXT: 'costasiella:ShopAccountBankAccountNext',\n    SHOP_ACCOUNT_PROFILE_NEXT: 'costasiella:ShopAccountProfileNext',\n    SHOP_CLASSES_DATE_FROM: 'costasiella:shopClassesDateFrom',\n    SHOP_CLASSES_DATE_UNTIL: 'costasiella:shopClassesDateUntil',\n    SHOP_CLASSES_ORDER_BY: 'costasiella:shopClassesOrderBy',\n    SHOP_CLASSES_FILTER_CLASSTYPE: 'costasiella:shopClassesFilterClasstype',\n    SHOP_CLASSES_FILTER_INSTRUCTOR: 'costasiella:shopClassesFilterInstructor',\n    SHOP_CLASSES_FILTER_LEVEL: 'costasiella:shopClassesFilterLevel',\n    SHOP_CLASSES_FILTER_LOCATION: 'costasiella:shopClassesFilterLocation',\n}\n\nexport default cs_local_storage_keys\n","import CSLS from \"./cs_local_storage\"\n\n\nexport const CSAuth = {\n    login(tokenData) {\n        // localStorage.setItem(CSLS.AUTH_TOKEN, tokenData.token)\n        localStorage.setItem(CSLS.AUTH_TOKEN_EXP, tokenData.payload.exp)\n        localStorage.setItem(CSLS.AUTH_TOKEN_ORIGIAT, tokenData.payload.origIat)\n        // localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN, tokenData.refreshToken)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN_EXP, tokenData.refreshExpiresIn)\n        localStorage.removeItem(CSLS.AUTH_LOGIN_NEXT)\n    },\n    updateTokenInfo(refreshTokenData) {\n        console.log(\"Token payload:\")\n        console.log(refreshTokenData)\n        // localStorage.setItem(CSLS.AUTH_TOKEN, refreshTokenData.token)\n        localStorage.setItem(CSLS.AUTH_TOKEN_EXP, refreshTokenData.payload.exp)\n        localStorage.setItem(CSLS.AUTH_TOKEN_ORIGIAT, refreshTokenData.payload.origIat)\n        // localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN, refreshTokenData.refreshToken)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN_EXP, refreshTokenData.refreshExpiresIn)\n    },\n    cleanup() {\n        console.warn(\"csauth cleanup called!\")\n        // Like logging out, but don't unset next url. \n        // This function is used when a refreshToken has expired\n        // localStorage.removeItem(CSLS.AUTH_TOKEN)\n        localStorage.removeItem(CSLS.AUTH_TOKEN_EXP)\n        localStorage.removeItem(CSLS.AUTH_TOKEN_ORIGIAT)\n        // localStorage.removeItem(CSLS.AUTH_REFRESH_TOKEN)\n        localStorage.removeItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n    },\n    logout(expired=false) {\n        if (!expired) {\n            // Manual logout, remove everything\n            this.cleanup()\n            localStorage.removeItem(CSLS.AUTH_LOGIN_NEXT)\n        }        \n    }\n}\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_APP_SETTINGS_QUERY = gql`\n  query AppSettings {\n    appSettings(id: \"QXBwU2V0dGluZ3NOb2RlOjE=\") {\n      dateFormat\n      timeFormat\n      timeFormatMoment\n      dateTimeFormatMoment\n      onlinePaymentsAvailable\n      accountSignupEnabled\n    }\n  }\n`\n\n\nexport const UPDATE_APP_SETTINGS = gql`\n  mutation UpdateAppSettings($input: UpdateAppSettingsInput!) {\n    updateAppSettings(input: $input) {\n      appSettings {\n        id\n      }\n    }\n  }\n`","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORGANIZATION_QUERY = gql`\n  query Organization($id: ID!) {\n    organization(id:$id) {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n      urlLogoLogin\n      urlLogoInvoice\n      urlLogoEmail\n      urlLogoShopHeader\n      urlLogoSelfCheckin\n      brandingColorBackground\n      brandingColorText\n      brandingColorAccent\n      brandingColorSecondary\n    }\n  }\n`\n\nexport const UPDATE_ORGANIZATION = gql`\nmutation UpdateOrganization($input: UpdateOrganizationInput!) {\n  updateOrganization(input: $input) {\n    organization {\n      id\n    }\n  }\n}\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { ToastContainer, Slide } from 'react-toastify'\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\"\n\n\nfunction CSStandalonePageWide({ t, urlLogo=\"\", children}) {\n\n  return (\n    <Page>\n      <div className=\"page-single\">\n        <Container>\n          <Grid.Row>\n            <div className=\"col mx-auto\">            \n              <div className=\"text-center mb-5\">\n                { (urlLogo) ? <img src={urlLogo} className=\"h-9\" alt=\"logo\" /> : \"\" }\n              </div>\n              {children}\n              <ToastContainer \n                autoClose={5000} \n                transition={Slide}\n              />\n            </div>\n          </Grid.Row>\n        </Container>\n      </div>\n    </Page>\n  )\n}\n\nexport default withTranslation()(CSStandalonePageWide)\n\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport {\n  Dimmer\n} from \"tabler-react\"\n\nimport CSStandalonePageWide from './CSStandalonePageWide'\n\n\nfunction CSStandalonePageLoader() {\n  return (\n    <CSStandalonePageWide>\n      <div className='text-center'>\n        <Dimmer active={true} loader={true} />\n      </div>\n    </CSStandalonePageWide>\n  )\n}\n\nexport default withTranslation()(CSStandalonePageLoader)\n\n\n\n","import React from 'react'\n\nconst AppSettingsContext = React.createContext({})\n\nexport const AppSettingsProvider = AppSettingsContext.Provider\nexport const AppSettingsConsumer = AppSettingsContext.Consumer\n\nexport default AppSettingsContext","import React from 'react'\n\nconst OrganizationContext = React.createContext({})\n\nexport const OrganizationProvider = OrganizationContext.Provider\nexport const OrganizationConsumer = OrganizationContext.Consumer\n\nexport default OrganizationContext","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SHOP_FEATURES_QUERY = gql`\n  query SystemFeatureShop {\n    systemFeatureShop(id: \"U3lzdGVtRmVhdHVyZVNob3BOb2RlOjE=\") {\n      memberships\n      subscriptions\n      classpasses\n      classes\n      events\n    }\n  }\n`\n\n\nexport const UPDATE_SHOP_FEATURES = gql`\n  mutation UpdateSystemFeatureShop($input: UpdateSystemFeatureShopInput!) {\n    updateSystemFeatureShop(input: $input) {\n      systemFeatureShop {\n        id\n      }\n    }\n  }\n`","import * as React from \"react\"\nimport { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport { GET_SHOP_FEATURES_QUERY } from \"../components/settings/shop/features/queries\"\nimport OrganizationContext from './context/OrganizationContext'\nimport CSLS from \"../tools/cs_local_storage\"\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\n// type subNavItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +LinkComponent?: React.ElementType,\n// |};\n\n// type navItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +active?: boolean,\n//   +LinkComponent?: React.ElementType,\n//   +subItems?: Array<subNavItem>,\n//   +useExact?: boolean,\n// |};\n\n\nconst getNavBarItems = (t, loading, error, data) => {\n  const shopFeatures = data.systemFeatureShop\n\n  let items = []\n  // let permissions = get_all_permissions(user)\n\n  if (loading) {\n    items.push({\n      value: t(\"general.loading_with_dots\"),\n      to: \"/\",\n      icon: \"\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true, \n    })\n\n    return items\n  }\n\n  if (error) {\n    items.push({\n      value: t(\"general.error_sad_smiley\"),\n      to: \"/\",\n      icon: \"\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true, \n    })\n\n    return items\n  }\n\n  items.push({\n    value: t(\"shop.home.title\"),\n    to: \"/\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n\n  if (shopFeatures.subscriptions) {\n    items.push({\n      value: t(\"shop.subscriptions.title\"),\n      to: \"/shop/subscriptions\",\n      icon: \"edit\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.classpasses) {\n    items.push({\n      value: t(\"shop.classpasses.title\"),\n      to: \"/shop/classpasses\",\n      icon: \"credit-card\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.classes) {\n    items.push({\n      value: t(\"shop.classes.title\"),\n      to: \"/shop/classes\",\n      icon: \"book\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.events) {\n    items.push({\n      value: t(\"shop.events.title\"),\n      to: \"/shop/events\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  items.push({\n    value: t(\"shop.contact.title\"),\n    to: \"/shop/contact\",\n    icon: \"message-square\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Check if refresh token is present and if so, hasn't expired\n  const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n  let accountTitle = t(\"shop.account.title\")\n  let accountLink = \"/shop/account\"\n  if (new Date() / 1000 >= refreshTokenExp || refreshTokenExp == null ) {\n    accountTitle = t(\"general.sign_in\")\n    accountLink = \"/user/login\"\n  }\n\n  items.push({\n    value: accountTitle,\n    to: accountLink,\n    icon: \"user\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  return items\n}\n\nfunction getHeaderImageUrl(organization) {\n  let imageURL = \"/d/static/logos/stock/logo_stock_backend.png\"\n\n  if (organization) {\n    if (organization.urlLogoShopHeader) {\n      imageURL = organization.urlLogoShopHeader\n    }\n  }\n\n  return imageURL\n}\n\nconst now = new Date()\n\nfunction SiteWrapperShop({t, match, history, children}) {\n  const { loading, error, data } = useQuery(GET_SHOP_FEATURES_QUERY)\n  const organization = useContext(OrganizationContext)\n\n  if (loading) return <CSStandalonePageLoader/>;\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  const headerImageUrl = getHeaderImageUrl(organization)\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n          href: \"/\",\n          alt: \"Costasiella\",\n          imageURL: headerImageUrl, // Set logo url here\n          navItems: (\n            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n              {(data.user) ? (data.user.instructor || data.user.employee) ? <Link to=\"/user/welcome\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"link\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('goto.title')}\n                </Button>\n              </Link> : \"\" : \"\"}\n            </Nav.Item>\n          ),\n          \n          // notificationsTray: {\n          //   notificationsObjects,\n          //   markAllAsRead: () =>\n          //     this.setState(\n          //       () => ({\n          //         notificationsObjects: this.state.notificationsObjects.map(\n          //           v => ({ ...v, unread: false })\n          //         ),\n          //       }),\n          //       () =>\n          //         setTimeout(\n          //           () =>\n          //             this.setState({\n          //               notificationsObjects: this.state.notificationsObjects.map(\n          //                 v => ({ ...v, unread: true })\n          //               ),\n          //             }),\n          //           5000\n          //         )\n          //     ),\n          //   unread: unreadCount,\n          // },\n        //   accountDropdown: {\n        //   avatarURL: \"#\",\n        //   name: data.user.firstName + ' ' + data.user.lastName,\n        //   description: \"\",\n        //   options: [\n        //     // { icon: \"user\", value: \"Profile\" },\n        //     { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n        //     { isDivider: true },\n        //     { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n        //   ],\n        // },\n        }}\n        // navProps={{ itemsObjects: navBarItems }}\n        navProps={{ itemsObjects: getNavBarItems(t, loading, error, data) }}\n        routerContextComponentType={withRouter(RouterContextProvider)}\n        footerProps={{\n          // links: [\n          //   <a href=\"#\">First Link</a>,\n          //   <a href=\"#\">Second Link</a>,\n          //   <a href=\"#\">Third Link</a>,\n          //   <a href=\"#\">Fourth Link</a>,\n          //   <a href=\"#\">Five Link</a>,\n          //   <a href=\"#\">Sixth Link</a>,\n          //   <a href=\"#\">Seventh Link</a>,\n          //   <a href=\"#\">Eigth Link</a>,\n          // ],\n          // note:\n          //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n          copyright: (\n            <React.Fragment>\n              <small>\n                Peacefully powered by\n                <a\n                  href=\"https://costasiella.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Costasiella\n                </a>{\". \"}\n                All rights reserved © {now.getFullYear()}.\n              </small>\n            </React.Fragment>\n          ),\n          nav: (\n            <React.Fragment>\n              <Grid.Col auto={true}>\n                <Link to=\"/cookie_policy\">\n                  {t(\"cookie_policy.title\")}\n                </Link>\n                {/* <List className=\"list-inline list-inline-dots mb-0\">\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./docs/index.html\">Documentation</a>\n                  </List.Item>\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./faq.html\">FAQ</a>\n                  </List.Item>\n                </List> */}\n              </Grid.Col>\n              <Grid.Col auto={true}>\n                {/* <Button\n                  href=\"https://github.com/tabler/tabler-react\"\n                  size=\"sm\"\n                  outline\n                  color=\"primary\"\n                  RootComponent=\"a\"\n                >\n                  Source code\n                </Button> */}\n              </Grid.Col>\n            </React.Fragment>\n          ),\n        }}\n      >\n      {children}\n      <ToastContainer \n        autoClose={5000} \n        transition={Slide}\n      />\n    </Site.Wrapper>    \n  )\n}\n\n\nexport default withTranslation()(SiteWrapperShop)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Tag,\n} from \"tabler-react\";\n\n\nfunction ShopCheckoutProgress({ t, match, history, checkoutProgress=\"\" }) {\n  let color_order = \"\" \n  let color_payment = \"\"\n  let color_complete = \"\"\n\n  switch(checkoutProgress) {\n    case \"order\":\n      color_order = \"info\"\n      break\n    case \"payment\":\n      color_order = \"success\"\n      color_payment = \"info\"\n      break      \n    case \"complete\":\n      color_order = \"success\"\n      color_payment = \"success\"\n      color_complete = \"success\"\n      break\n    default:\n      break\n  }\n\n  return (\n    <div className=\"d-flex justify-content-center mb-4\">\n    <Tag.List>\n      <Tag color={color_order} addOn={<Icon name=\"shopping-cart\"/>}>\n        {t(\"shop.checkout_progress.order\")} \n      </Tag>\n      <Tag color={color_payment} addOn={<Icon name=\"credit-card\" />}>\n        {t(\"shop.checkout_progress.payment\")} \n      </Tag>\n      <Tag color={color_complete} addOn={<Icon name=\"check\" />}>\n        {t(\"shop.checkout_progress.complete\")}\n      </Tag>\n    </Tag.List>\n    </div>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutProgress))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonBack = ({ t, returnUrl, className=\"\" }) => (\n  <Link to={returnUrl}>\n    <Button\n      className={className}\n      color=\"secondary\"\n      icon=\"arrow-left\">\n        {t(\"general.back\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonBack)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../SiteWrapperShop\"\nimport ShopCheckoutProgress from \"./ShopCheckoutProgress\"\nimport ButtonBack from '../ui/ButtonBack';\n\nfunction ShopBase({ t, match, history, children, title, subTitle, returnUrl, pageHeaderOptions=\"\", checkoutProgress=false }) {\n\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={title} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">\n              {/* Back */}\n              { (returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\" }\n              { pageHeaderOptions }\n            </div>\n          </Page.Header>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                {(checkoutProgress) ?\n                  <ShopCheckoutProgress checkoutProgress={checkoutProgress} />\n                  : \"\" }\n                { children }\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapperShop>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction CookiePolicyBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"cookie_policy.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CookiePolicyBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card, \n} from \"tabler-react\";\nimport CookiePolicyBase from \"./CookiePolicyBase\"\n\n\nfunction CookiePolicy({ t, match, history }) {\n  return (\n    <CookiePolicyBase>\n      <Card>\n        <Card.Body>\n          {t(\"cookie_policy.policy_text\")}\n        </Card.Body>\n      </Card>\n    </CookiePolicyBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CookiePolicy))\n","export function capitalize(word) {\n    const lower = word.toLowerCase();\n    return word.charAt(0).toUpperCase() + lower.slice(1);\n  }\n  ","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\n\nfunction StatusIcon({color=\"\"}) {\n  let className\n\n  switch (color) {\n    case \"success\":\n      className=\"bg-success\"\n      break\n    case \"warning\":\n      className=\"bg-warning\"\n      break\n    case \"danger\":\n      className=\"bg-danger\"\n      break\n    case \"primary\":\n      className=\"bg-primary\"\n      break\n    default:\n      className=\"bg-secondary\"\n  }\n\n  return <span className={\"status-icon \" + className} />\n}\n\n\nexport default withTranslation()(StatusIcon)\n\n\n\n","import React from \"react\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport {\n  Badge,\n  Icon\n} from \"tabler-react\";\n\nimport StatusIcon from \"../../ui/StatusIcon\"\nimport { t } from \"i18next\";\n\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationClasstype\n  let instructor\n  let organizationLevel\n  let organizationLocation\n\n  let queryVars = {\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationClasstype = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE)\n  if (organizationClasstype) {\n    queryVars.organizationClasstype = organizationClasstype\n  } else {\n    queryVars.organizationClasstype = \"\"\n  }\n\n  instructor = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_INSTRUCTOR)\n  if (instructor) {\n    queryVars.instructor = instructor\n  } else {\n    queryVars.instructor = \"\"\n  }\n\n  organizationLevel = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL)\n  if (organizationLevel) {\n    queryVars.organizationLevel = organizationLevel\n  } else {\n    queryVars.organizationLevel = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function represent_instructor(name, role) {\n  let badge\n\n  switch (role) {\n    case \"SUB\":\n      badge = <Badge color=\"primary\">{t(\"schedule.classes.instructor_roles.sub\")}</Badge>\n      break\n    case \"ASSISTANT\":\n      badge = <Badge color=\"success\">{t(\"schedule.classes.instructor_roles.assistant\")}</Badge>\n      break\n    case \"KARMA\":\n      badge = <Badge color=\"warning\">{t(\"schedule.classes.instructor_roles.karma\")}</Badge>\n      break\n    default:\n      break\n  }\n\n  return <React.Fragment><Icon name=\"user\"/> {name} {badge}</React.Fragment>\n}\n\n\nexport function represent_class_status(status) {\n  let color\n\n  switch (status) {\n    case \"SUB\":\n      color = \"primary\"\n      break\n    case \"CANCELLED\":\n      color = \"warning\"\n      break\n    case \"OPEN\":\n      color = \"danger\"\n      break\n    default:\n      color = \"success\"\n  }\n\n  return <StatusIcon color={color} />\n}\n\n\nexport function get_class_messages(t, status, description, holiday, holidayName) {\n  if (holiday) {\n    return <span>{t(\"general.holiday\")} ({holidayName})</span>\n  }\n\n  if (status === 'CANCELLED') {\n    return description\n  }\n}","import { gql } from \"@apollo/client\"\n\nconst GET_USER = gql`\n  query User($before: String, $after: String)  {\n    user {\n      id\n      isActive\n      email\n      firstName\n      lastName\n      employee\n      instructor\n      urlImageThumbnailSmall\n      groups {\n        edges {\n          node {\n            id\n            name\n            permissions(first: 1000, before: $before, after: $after) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n                startCursor\n                endCursor                \n              }\n              edges {\n                node {\n                  id\n                  name\n                  codename\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default GET_USER","export function get_all_permissions(user) {\n    const permissions = {}\n    const groups = user.groups\n    if (groups.edges) {\n      for (let edge_index in groups.edges) {\n        let group_edge = groups.edges[edge_index]\n        if (group_edge.node) {\n          let group_node = group_edge.node \n          if (group_node.permissions.edges) {\n            for (let permission_index in group_node.permissions.edges) {\n              let permission_edge = group_node.permissions.edges[permission_index] \n              if (permission_edge.node) {\n                  let permission_node = permission_edge.node\n                  let codename = permission_node.codename\n                  let codename_split = codename.split('_')\n                  // If code name is not in permissions, create a new set\n                  if (!(codename_split[1] in permissions)) {\n                  permissions[codename_split[1]] = new Set()\n                  }\n                  // Add permission name to set\n                  permissions[codename_split[1]].add(codename_split[0])\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    return permissions\n}\n\n\nexport const has_permission = (permissions, permission, resource) => {\n  let you_shall_not_pass = true\n\n  if (resource in permissions) {\n    if (permissions[resource].has(permission)) {\n      you_shall_not_pass = false\n    }\n  }\n  \n  return !you_shall_not_pass\n}\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\n\nimport GET_USER from '../queries/system/get_user'\nimport { get_all_permissions } from \"../tools/user_tools\"\n\n\nfunction check_permission(permissions, permission, resource) {\n  let you_shall_not_pass = true\n\n  if (resource in permissions) {\n    if (permissions[resource].has(permission)) {\n      you_shall_not_pass = false\n    }\n  }\n  \n  return !you_shall_not_pass\n}\n\nfunction HasPermissionWrapper({t, permission, resource, children, hideLoading=false}) {\n  const {loading, error, data} = useQuery(GET_USER)\n\n  if (loading) {\n    if (!hideLoading) {\n      return <p>{t(\"general.loading_with_dots\")}</p>\n    } else {\n      return \"\"\n    }\n  } \n  if (error) return <p>Error loading user... :(</p>\n\n  const permissions = get_all_permissions(data.user)\n\n  if (check_permission(permissions, permission, resource)) {\n    return children\n  } else {\n    return ''\n  }\n}\n  \nexport default withTranslation()(HasPermissionWrapper)","import { gql } from \"@apollo/client\"\n\nconst GET_USER_PROFILE = gql`\n  query User {\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      instructor\n      employee\n      profilePolicy\n    }\n  }\n`\n\nexport default GET_USER_PROFILE","import { gql } from \"@apollo/client\"\n\nexport const GET_BACKEND_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements(\n    $dateFrom: Date!, \n    $dateUntil:Date!, \n    $orderBy: String, \n    $instructor: ID!\n  ) {\n    organizationAnnouncements(first: 100 displayPublic: true, displayBackend: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayBackend\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        instructor: $instructor,\n        publicOnly: false\n    ){\n      date\n      bookingOpenOn\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        holiday\n        holidayName\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        spaces\n        countAttendingAndBooked\n        availableSpacesOnline\n        availableSpacesTotal\n        displayPublic\n        bookingStatus\n      }\n    }\n  }\n`\n\n\n// Example vars:\n// {\n//   \"dateFrom\": \"2022-08-17\",\n//   \"dateUntil\": \"2022-08-20\",\n//   \"orderBy\": \"starttime\",\n//   \"instructor\": \"QWNjb3VudE5vZGU6Mg==\",\n// }","import * as React from \"react\"\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\nimport GET_USER from \"../queries/system/get_user\"\nimport { get_all_permissions, has_permission } from \"../tools/user_tools\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\n// type subNavItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +LinkComponent?: React.ElementType,\n// |};\n\n// type navItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +active?: boolean,\n//   +LinkComponent?: React.ElementType,\n//   +subItems?: Array<subNavItem>,\n//   +useExact?: boolean,\n// |};\n\n\nconst getNavBarItems = (t, user) => {\n  let items = []\n  let permissions = get_all_permissions(user)\n\n  items.push({\n    value: t(\"home.title\"),\n    to: \"/backend\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Relations\n  if (\n    (has_permission(permissions, 'view', 'account'))\n  ){\n    items.push({\n      value: t(\"relations.title\"),\n      to: \"/relations\",\n      icon: \"users\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Schedule\n  if (\n    (has_permission(permissions, 'view', 'scheduleclass')) ||\n    (has_permission(permissions, 'view', 'scheduleevent'))\n  ){\n    items.push({\n      value: t(\"schedule.title\"),\n      to: \"/schedule\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Finance\n  if (\n    (has_permission(permissions, 'view', 'financecostcenter')) ||\n    (has_permission(permissions, 'view', 'financeglaccount')) ||\n    (has_permission(permissions, 'view', 'financetaxrate')) \n  ){\n    items.push({\n      value: t(\"finance.title\"),\n      to: \"/finance\",\n      icon: \"dollar-sign\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Organization\n  if (\n    (has_permission(permissions, 'view', 'organizationclasspass')) || \n    (has_permission(permissions, 'view', 'organizationclasstype')) ||\n    (has_permission(permissions, 'view', 'organizationdiscovery')) ||\n    (has_permission(permissions, 'view', 'organizationlocation')) ||\n    (has_permission(permissions, 'view', 'organizationmembership')) ||  \n    (has_permission(permissions, 'view', 'organization')) \n   ){\n   items.push({\n      value: t(\"organization.title\"),\n      to: \"/organization\",\n      icon: \"feather\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Insight\n  if (\n    (has_permission(permissions, 'view', 'insight'))\n   ){\n    items.push({\n      value: t(\"insight.title\"),\n      to: \"/insight\",\n      icon: \"bar-chart-2\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Automation\n  if (\n    (has_permission(permissions, 'view', 'automation'))\n   ){\n    items.push({\n      value: t(\"automation.title\"),\n      to: \"/automation\",\n      icon: \"loader\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // let goToSubItems = []\n  // if (has_permission(permissions, 'view', 'selfcheckin')) {\n  //   goToSubItems.push(\n  //     { value: t(\"selfcheckin.home.title\"), to: \"/selfcheckin\", LinkComponent: withRouter(NavLink) }\n  //   )\n  // }\n  // goToSubItems.push(\n  //   { value: t(\"shop.title\"), to: \"/shop\", LinkComponent: withRouter(NavLink) }\n  // )\n\n  // // Go to\n  // if (\n  //   (has_permission(permissions, 'view', 'selfcheckin'))\n  //  ){\n  //   items.push({\n  //     value: t(\"goto.title\"),\n  //     icon: \"link\",\n  //     subItems: goToSubItems,\n  //   })\n  // }\n\n\n  return items\n\n}\n\nconst now = new Date()\n\nfunction SiteWrapper({t, match, history, children}) {\n  const { error, loading, data } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader/>;\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  let avatarURL = \"#\"\n  if (data.user.urlImageThumbnailSmall) {\n    avatarURL = data.user.urlImageThumbnailSmall\n  }\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n          href: \"/\",\n          alt: \"Costasiella\",\n          imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n          navItems: (\n            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n              <Link to=\"/settings\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"settings\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('general.settings')}\n                </Button>\n              </Link>\n              <Link to=\"/user/welcome\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"link\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('goto.title')}\n                </Button>\n              </Link>\n            </Nav.Item>\n          ),\n          // notificationsTray: {\n          //   notificationsObjects,\n          //   markAllAsRead: () =>\n          //     this.setState(\n          //       () => ({\n          //         notificationsObjects: this.state.notificationsObjects.map(\n          //           v => ({ ...v, unread: false })\n          //         ),\n          //       }),\n          //       () =>\n          //         setTimeout(\n          //           () =>\n          //             this.setState({\n          //               notificationsObjects: this.state.notificationsObjects.map(\n          //                 v => ({ ...v, unread: true })\n          //               ),\n          //             }),\n          //           5000\n          //         )\n          //     ),\n          //   unread: unreadCount,\n          // },\n          accountDropdown: {\n          avatarURL: avatarURL,\n          name: data.user.firstName + ' ' + data.user.lastName,\n          description: \"\",\n          options: [\n            // { icon: \"user\", value: \"Profile\" },\n            { icon: \"lock\", value: t(\"user.change_password.title\"), to: \"/#/user/password/change/\" },\n            { isDivider: true },\n            { icon: \"user\", value: t(\"shop.account.title\"), to: \"/#/shop/account/\" },\n            { isDivider: true },\n            { icon: \"log-out\", value: t(\"user.logout.title\"), to: \"/#/user/logout/\" },\n          ],\n        },\n        }}\n        // navProps={{ itemsObjects: navBarItems }}\n        navProps={{ itemsObjects: getNavBarItems(t, data.user) }}\n        routerContextComponentType={withRouter(RouterContextProvider)}\n        footerProps={{\n          // links: [\n          //   <a href=\"#\">First Link</a>,\n          //   <a href=\"#\">Second Link</a>,\n          //   <a href=\"#\">Third Link</a>,\n          //   <a href=\"#\">Fourth Link</a>,\n          //   <a href=\"#\">Five Link</a>,\n          //   <a href=\"#\">Sixth Link</a>,\n          //   <a href=\"#\">Seventh Link</a>,\n          //   <a href=\"#\">Eigth Link</a>,\n          // ],\n          // note:\n          //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n          copyright: (\n            <React.Fragment>\n              <small>\n                Copyleft © {now.getFullYear()}.\n                <a\n                  href=\"https://costasiella.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Edwin van de Ven\n                </a>{\". \"}\n                All rights reserved.\n              </small>\n            </React.Fragment>\n          ),\n          nav: (\n            <React.Fragment>\n              <Grid.Col auto={true}>\n                {/* <List className=\"list-inline list-inline-dots mb-0\">\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./docs/index.html\">Documentation</a>\n                  </List.Item>\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./faq.html\">FAQ</a>\n                  </List.Item>\n                </List> */}\n              </Grid.Col>\n              <Grid.Col auto={true}>\n                {/* <Button\n                  href=\"https://github.com/tabler/tabler-react\"\n                  size=\"sm\"\n                  outline\n                  color=\"primary\"\n                  RootComponent=\"a\"\n                >\n                  Source code\n                </Button> */}\n              </Grid.Col>\n            </React.Fragment>\n          ),\n        }}\n      >\n        {children}\n        <ToastContainer \n          autoClose={5000} \n          transition={Slide}\n        />\n      </Site.Wrapper>\n  )\n}\n\nexport default withTranslation()(SiteWrapper)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nfunction HomeHomeBase({ t, match, history, children }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.home.title\")} />\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(HomeHomeBase))","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport moment from 'moment'\nimport {\n  Badge,\n  Button,\n  Card,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { capitalize } from \"../../../tools/string_tools\"\nimport { represent_class_status, get_class_messages } from '../../schedule/classes/tools'\nimport HasPermissionWrapper from '../../HasPermissionWrapper'\nimport GET_USER_PROFILE from \"../../../queries/system/get_user_profile\"\nimport { GET_BACKEND_ANNOUNCEMENTS_QUERY } from \"./queries\"\nimport HomeHomeBase from './HomeHomeBase';\n\n\nfunction HomeHome({ t, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_BACKEND_ANNOUNCEMENTS_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      instructor: dataUser && dataUser.user ? dataUser.user.accountId : null,\n      dateFrom: moment().format('YYYY-MM-DD'),\n      dateUntil: moment().add(2, 'days').format('YYYY-MM-DD'),\n      orderBy: \"starttime\"\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading || loadingUser ) return (\n    <HomeHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </HomeHomeBase>\n  )\n  if (error || errorUser ) return (\n    <HomeHomeBase>\n      {t(\"home.home.announcements.error_loading\")}\n    </HomeHomeBase>\n  )\n\n  const announcements = data.organizationAnnouncements\n\n  // Empty list\n  if (!announcements.edges.length) return (\n    <HomeHomeBase>\n      {t(\"home.home.announcements_empty_list\")}\n    </HomeHomeBase>\n  )\n\n  console.log(data)\n  let upcomingClasses = false\n  for ( let i=0; i<data.scheduleClasses.length; i++ ) {\n    if (data.scheduleClasses[i]['classes'].length) {\n      upcomingClasses = true\n    }\n  }\n    \n\n  // Data\n  return (\n    <HomeHomeBase>\n      <h4>{t(\"organization.announcements.title\")}</h4>\n      <Grid.Row cards deck>\n        {(announcements.edges.length) ? announcements.edges.map(({ node }) => (\n          <Grid.Col md={6} key={v4()}>\n            <Card title={node.title}>\n              <Card.Body>\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }}></div>\n              </Card.Body>\n            </Card> \n          </Grid.Col>\n        )) : \"\"\n        }\n      </Grid.Row>\n      \n      { upcomingClasses && <React.Fragment>\n        <h4>{t(\"organization.home.upcoming_classes.title\")}</h4>\n          { data.scheduleClasses.map(({ date, classes }) => (\n            !classes.length ? \"\" : <React.Fragment key={v4()}>\n              <h5>\n                {capitalize(moment(date).format(\"dddd\"))} {' '}\n                <small className=\"text-muted\">\n                      {moment(date).format(\"LL\")} \n                </small>\n              </h5>\n              {classes.map((\n                { scheduleItemId, \n                  frequencyType,\n                  date, \n                  status,\n                  holiday,\n                  holidayName,\n                  description,\n                  organizationLocationRoom, \n                  organizationClasstype, \n                  organizationLevel,\n                  timeStart, \n                  timeEnd,\n                  spaces,\n                  countAttendingAndBooked }) => (\n                    <Card key={v4()}>\n                      <Card.Body>\n                        <Grid.Row>\n                          <Grid.Col xs={9} sm={9} md={10}>\n                            <Grid.Row>\n                              <Grid.Col xs={12}>\n                                <h5>\n                                  {represent_class_status(status)}\n                                  <span className='mr-2'>\n                                  {/* Class type */}\n                                  {organizationClasstype.name} { ' ' }\n                                  {/* Start & end time */}\n                                  {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                  {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                                  </span>\n                                  {organizationLevel && <small className=\"text-muted\">\n                                    {organizationLevel.name}\n                                  </small>}\n                                </h5>\n                              </Grid.Col>\n                            </Grid.Row>\n                            <Grid.Row>\n                              <Grid.Col xs={12}>\n                                {/* Location */}\n                                <Icon name=\"home\" /> {organizationLocationRoom.organizationLocation.name} \n                                <small className=\"text-muted\"> | {organizationLocationRoom.name}</small>\n                              </Grid.Col>\n                            </Grid.Row>\n                          </Grid.Col>\n                          <Grid.Col xs={3} sm={3} md={2}>\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                              <Link className=\"float-right\" to={'/schedule/classes/class/attendance/' + scheduleItemId + '/' + date}>\n                                <Button\n                                  size=\"sm\"\n                                  color=\"secondary\"\n                                  icon=\"check-circle\"\n                                >\n                                    {t(\"general.attendance\")}\n                                </Button>\n                              </Link>\n                            </HasPermissionWrapper>\n                          </Grid.Col>\n                        </Grid.Row>\n                        <Grid.Row>\n                          <Grid.Col xs={9} sm={9} md={10}>\n                            <div className=\"mt-1\">\n                              {/* <BadgePublic className=\"mr-2\" isPublic={displayPublic} /> */}\n                              {(frequencyType === 'SPECIFIC') ? \n                                <Badge color=\"primary\" className=\"mr-2\">{t('general.once')}</Badge> : \n                                null } \n                              {(frequencyType === 'LAST_WEEKDAY_OF_MONTH') ? \n                                <Badge color=\"success\" className=\"mr-2\">{t('general.monthly')}</Badge> : \n                                null } \n                              {(status === \"CANCELLED\") ? \n                                <Badge color=\"warning\" className=\"mr-2\">{t('general.cancelled')}</Badge> : \n                                null } \n                                <small className=\"text-muted\"><br />{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                            </div>\n                          </Grid.Col>\n                          <Grid.Col xs={3} sm={3} md={2}>\n                            {/* Attendance */}\n                            <small className='float-right mt-1'><Icon name=\"users\" /> {countAttendingAndBooked}/{spaces}</small>\n                          </Grid.Col>\n                        </Grid.Row>\n                      </Card.Body>\n                    </Card>\n                  )\n                )}\n            </React.Fragment >\n          ))}\n        </React.Fragment> \n      }  {/* End upcoming classes check */}\n    </HomeHomeBase>\n  )\n}\n\n\n// class HomeHome extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Home home props:\")\n//     console.log(props)\n//   }\n\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title={t(\"home.title\")} />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n//               <Card>\n//                 <Card.Header>\n//                   <Card.Title>{t('home.title')}</Card.Title>\n//                 </Card.Header>\n//                 <Card.Body>\n//                     Hello world!\n//                 </Card.Body>\n//               </Card>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(HomeHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\nfunction SettingsHomeItemButton({ t, link, linkTitle=null }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {linkTitle ? linkTitle: t(\"automation.home.link_edit\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsHomeItemButton))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\n\nimport {\n  Card,\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport AutomationHomeItemButton from \"./AutomationHomeItemButton\"\n\n\nfunction AutomationHome({ t, match, params }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"automation.account.subscriptions.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.invoices.title\")}</h5>\n                  {t(\"automation.account.subscriptions.invoices.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/invoices\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.credits.title\")}</h5>\n                  {t(\"automation.account.subscriptions.credits.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/credits\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.mollie_collection.title\")}</h5>\n                  {t(\"automation.account.subscriptions.mollie_collection.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/mollie_collections\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationHome))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Card,\n    Dimmer,\n  } from \"tabler-react\"\n\n\nclass ContentCard extends Component {\n    componentDidMount() {\n      window.addEventListener(\"scroll\", this.handleOnScroll);\n    }\n  \n    componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.handleOnScroll);\n    }\n\n    handleOnScroll = () => {\n      // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n      var scrollTop =\n        (document.documentElement && document.documentElement.scrollTop) ||\n        document.body.scrollTop;\n      var scrollHeight =\n        (document.documentElement && document.documentElement.scrollHeight) ||\n        document.body.scrollHeight;\n      var clientHeight =\n        document.documentElement.clientHeight || window.innerHeight;\n      var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n      if (scrolledToBottom) {\n        const pageInfo = this.props.pageInfo\n        if (pageInfo) {\n          if (pageInfo.hasNextPage) {\n            this.props.onLoadMore()\n          }\n        }\n      }\n    }\n\n    render() {\n      const t = this.props.t\n      const cardTitle = this.props.cardTitle\n      const headerContent = this.props.headerContent\n      const onLoadMore = this.props.onLoadMore \n      const isLoadingMore = this.props.isLoadingMore\n      const pageInfo = this.props.pageInfo\n      const children = this.props.children\n      const cardTabs = this.props.cardTabs\n      const hasCardBody = this.props.hasCardBody \n\n\n      return(\n        <Card>\n          <Card.Header>\n            <Card.Title>{cardTitle}</Card.Title>\n            {headerContent}\n          </Card.Header>\n          {cardTabs}\n          {(hasCardBody) ? \n            <Card.Body>{children}</Card.Body> :\n            children\n          }\n          <Card.Footer>\n            {(isLoadingMore) ? <Dimmer active={true} loader={true}>loading</Dimmer> :\n              (!pageInfo) ? '':\n                (pageInfo.hasNextPage) ? \n                  <Button \n                    link\n                    onClick={onLoadMore} \n                    >\n                    {t('general.load_more')}\n                  </Button>\n                : t('general.loaded_all')\n            }\n          </Card.Footer>\n        </Card>\n      )\n    }\n}\n\nContentCard.defaultProps = {\n  onLoadMore: f=>f,\n  hasCardBody: true,\n  isLoadingMore: false\n}\n  \nexport default withTranslation()(ContentCard)\n","import { gql } from \"@apollo/client\"\n\nexport const GET_TASK_RESULT_QUERY = gql`\nquery TaskResults($before: String, $after: String, $taskName:String) {\n  djangoCeleryResultTaskResults(first: 100, before: $before, after: $after, taskName: $taskName) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        taskId\n        taskName\n        taskArgs\n        taskKwargs\n        status\n        contentType\n        contentEncoding\n        result\n        dateDone\n        traceback\n        meta\n      }\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../ui/ButtonBack\"\n\n\nfunction AutomationBack({ t, returnUrl=\"/automation\" }) { \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(AutomationBack)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionCreditsBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/credits/add\"}>\n                  <Button color=\"primary\" className=\"ml-2\" >\n                    {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditsBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge,\n} from \"tabler-react\";\n\n// Status reference\n// https://docs.celeryproject.org/en/stable/userguide/tasks.html\n\nfunction AutomationTaskResultStatus({t, history, match, status}) {\n  switch(status) {\n    case \"PENDING\":\n      return <Badge color=\"secondary\">{t(\"automation.tasks.result_statuses.pending\")}</Badge>\n    case \"STARTED\":\n      return <Badge color=\"primary\">{t(\"automation.tasks.result_statuses.started\")}</Badge>\n    case \"SUCCESS\":\n      return <Badge color=\"success\">{t(\"automation.tasks.result_statuses.success\")}</Badge>\n    case \"FAILURE\":\n      return <Badge color=\"danger\">{t(\"automation.tasks.result_statuses.failure\")}</Badge>\n    case \"RETRY\":\n      return <Badge color=\"warning\">{t(\"automation.tasks.result_statuses.retry\")}</Badge>\n    case \"REVOKED\":\n      return <Badge color=\"warning\">{t(\"automation.tasks.result_statuses.revoked\")}</Badge>\n    default:\n      return \"status unknown\"\n  }\n}\n\nexport default withTranslation()(withRouter(AutomationTaskResultStatus))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionCreditsBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionCredits({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_add_for_month\"\n    },\n    pollInterval: 5000\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionCreditsBase>\n    )\n  }\n\n  const taskResults = data.djangoCeleryResultTaskResults\n  \n\n  return (\n    <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.credits.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.credits.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCredits))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionCreditForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionCreditForm from './AutomationAccountSubscriptionCreditForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionCreditsBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionCreditForMonth($input:CreateAccountSubscriptionCreditForMonthInput!) {\n    createAccountSubscriptionCreditForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/credits\"\n\n  return (\n    <AutomationAccountSubscriptionCreditsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.credits.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.credits.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionCreditForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionInvoicesBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/invoices/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoicesBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionInvoicesBase from './AutomationAccountSubscriptionInvoicesBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionInvoices({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month\"\n    },\n    pollInterval: 5000\n  })\n\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionInvoicesBase>\n    )\n  }\n\n  console.log(\"Automation invoices data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n\n  return (\n    <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.invoices.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.invoices.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoices))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  invoiceDate: Yup.string()\n    .required(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionInvoicesForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('automation.account.subscriptions.invoices.invoice_date')}>\n              <Field component=\"select\" \n                    name=\"invoiceDate\" \n                    className={(errors.invoiceDate) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"today\" key={v4()}>{t('automation.account.subscriptions.invoices.today')}</option>\n                <option value=\"first_of_month\" key={v4()}>{t('automation.account.subscriptions.invoices.invoice_date_first_day_month')}</option>                \n              </Field>\n              <ErrorMessage name=\"invoiceDate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoicesForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionInvoicesForm from './AutomationAccountSubscriptionInvoicesForm'\nimport AutomationAccountSubscriptionInvoicesBase from './AutomationAccountSubscriptionInvoicesBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionInvoicesForMonth($input:CreateAccountSubscriptionInvoicesForMonthInput!) {\n    createAccountSubscriptionInvoicesForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/invoices\"\n\n  return (\n    <AutomationAccountSubscriptionInvoicesBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.invoices.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 ,\n            description: '',\n            invoiceDate: 'today'\n          }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear,\n                  description: values.description,\n                  invoiceDate: values.invoiceDate\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.invoices.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionInvoicesForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionMollieCollectionBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/mollie_collections/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionMollieCollectionBase from './AutomationAccountSubscriptionMollieCollectionBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionMollieCollections({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month_mollie_collection\"\n    },\n    pollInterval: 5000\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionMollieCollectionBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionMollieCollectionBase>\n    )\n  }\n\n  console.log(\"Automation mollie collection data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n  return (\n    <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.mollie_collection.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          {(!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.mollie_collection.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionMollieCollectionBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollections))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionMollieCollectionForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionMollieCollectionForm from './AutomationAccountSubscriptionMollieCollectionForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionMollieCollectionBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionInvoicesMollieCollectionForMonth(\n    $input:CreateAccountSubscriptionInvoicesMollieCollectionForMonthInput!\n  ) {\n    createAccountSubscriptionInvoicesMollieCollectionForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionMollieCollectionAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/mollie_collections\"\n\n  return (\n    <AutomationAccountSubscriptionCreditsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.mollie_collection.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.mollie_collection.tasks.account_subscription_credits_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.mollie_collection.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionMollieCollectionForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\nfunction HomeItemButton({ t, link, linkTitle=null }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {linkTitle ? linkTitle: t(\"settings.home.link_edit\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(HomeItemButton))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass FinanceHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Finance home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n    const linkTitleView = t(\"general.view\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"finance.title\")} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"finance.home.general.title\")}</h4>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financequote\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.quotes.title\")}</h5>\n                      {t(\"finance.quotes.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/quotes\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.invoices.title\")}</h5>\n                    {t(\"finance.invoices.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/invoices\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.orders.title\")}</h5>\n                    {t(\"finance.orders.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/orders\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financeexpense\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.expenses.title\")}</h5>\n                      {t(\"finance.expenses.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/expenses\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"finance.home.structure.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.glaccounts.title\")}</h5>\n                    {t(\"finance.glaccounts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/glaccounts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.costcenters.title\")}</h5>\n                    {t(\"finance.costcenters.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/costcenters\"/>\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.payment_methods.title\")}</h5>\n                    {t(\"finance.payment_methods.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentmethods\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"finance.home.taxes.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.taxrates.title\")}</h5>\n                    {t(\"finance.taxrates.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/taxrates\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"insightfinancetaxratesummary\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.taxrates_summary.title\")}</h5>\n                      {t(\"finance.taxrates_summary.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitleView} link=\"/finance/taxrates_summary\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"finance.home.batches.title\")}</h4>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatch\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_collections.title\")}</h5>\n                      {t(\"finance.payment_batch_collections.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatches/collection\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatch\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_payments.title\")}</h5>\n                      {t(\"finance.payment_batch_payments.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatches/payment\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatchcategory\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_categories.title\")}</h5>\n                      {t(\"finance.payment_batch_categories.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatchcategories\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(FinanceHome))","import { gql } from \"@apollo/client\"\n\nexport const GET_COSTCENTERS_QUERY = gql`\n  query FinanceCostCenters($after: String, $before: String, $archived: Boolean) {\n    financeCostcenters(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          name,\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_COSTCENTER_QUERY = gql`\n  query FinanceCostcenter($id: ID!) {\n    financeCostcenter(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_COSTCENTER = gql`\nmutation CreateFinanceCostCenter($input:CreateFinanceCostCenterInput!) {\n  createFinanceCostcenter(input: $input) {\n    financeCostcenter{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_COSTCENTER = gql`\nmutation UpdateFinanceCostCenter($input: UpdateFinanceCostCenterInput!) {\n  updateFinanceCostcenter(input: $input) {\n    financeCostcenter {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_COSTCENTER = gql`\nmutation ArchiveFinanceCostCenter($input: ArchiveFinanceCostCenterInput!) {\n  archiveFinanceCostcenter(input: $input) {\n    financeCostcenter {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nfunction ButtonAdd({ t, addUrl, className=\"\", buttonText=\"\" }) {\n  if (!buttonText) {\n    buttonText = t(\"general.add\")\n  }\n\n  return (\n    <Link to={addUrl}>\n      <Button\n        className={className}\n        color=\"primary\"\n        icon=\"plus-circle\">\n          {buttonText}\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(ButtonAdd)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceCostCentersBase({t, history, children, showBack=false, returnUrl=\"/finance/costcenters\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeglaccount\">\n                  <ButtonAdd addUrl={\"/finance/costcenters/add\"} />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCentersBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_COSTCENTERS_QUERY, ARCHIVE_COSTCENTER } from \"./queries\"\nimport FinanceCostCentersBase from './FinanceCostCentersBase'\n\n\nfunction FinanceCostCenters({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.costcenters.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_COSTCENTERS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveCostcenter ] = useMutation(ARCHIVE_COSTCENTER)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  if (error) return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.costcenters.error_loading')}</p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  const costcenters = data.financeCostcenters\n\n  // Empty list\n  if (!costcenters.edges.length) { return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.costcenters.empty_list') : t(\"finance.costcenters.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )}\n\n  return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={costcenters.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: costcenters.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeCostcenters.edges\n                        const pageInfo = fetchMoreResult.financeCostcenters.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new costcenters at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeCostcenters: {\n                                __typename: previousResult.financeCostcenters.__typename,\n                                edges: [ ...previousResult.financeCostcenters.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {costcenters.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/costcenters/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveCostcenter({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenters))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const COSTCENTER_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    code: Yup.number()\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceCostCentersBase from './FinanceCostCentersBase';\nimport { GET_COSTCENTERS_QUERY, ADD_COSTCENTER } from './queries'\nimport { COSTCENTER_SCHEMA } from './yupSchema'\n\n\nfunction FinanceCostCenterAdd({ t, history }) {\n  const returnUrl = \"/finance/costcenters\"\n  const [ addCostcenter ] = useMutation(ADD_COSTCENTER)\n\n  return (\n    <FinanceCostCentersBase showBack={true}>\n      <Card title={t('finance.costcenters.title_add')}>\n        <Formik\n            initialValues={{ name: '', code: '' }}\n            validationSchema={COSTCENTER_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addCostcenter({ variables: {\n                  input: {\n                    name: values.name, \n                    code: parseInt(values.code)\n                  }\n                }, refetchQueries: [\n                    {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('finance.costcenters.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n                <FoForm>\n                    <Card.Body>\n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('finance.code')}>\n                          <Field type=\"text\" \n                                  name=\"code\" \n                                  className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button color=\"link\">\n                            {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenterAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_COSTCENTERS_QUERY, GET_COSTCENTER_QUERY, UPDATE_COSTCENTER } from './queries'\nimport { COSTCENTER_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceCostCentersBase from './FinanceCostCentersBase';\n\n\nfunction FinanceCostCenterEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('finance.costcenters.title_edit')\n  const returnUrl = \"/finance/costcenters\"\n  const { loading, error, data } = useQuery(GET_COSTCENTER_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateCostcenter ] = useMutation(UPDATE_COSTCENTER)\n\n  if (loading) return (\n    <FinanceCostCentersBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  if (error) return (\n    <FinanceCostCentersBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  const initialData = data.financeCostcenter;\n\n  return (\n    <FinanceCostCentersBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              code: initialData.code\n            }}\n            validationSchema={COSTCENTER_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateCostcenter({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    code: parseInt(values.code)\n                  }\n                }, refetchQueries: [\n                    {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('finance.costcenters.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenterEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nfunction ButtonExport({ t, url, className=\"\", buttonText=\"\" }) {\n  if (!buttonText) {\n    buttonText = t(\"general.export\")\n  }\n\n  return (\n    <Link to={url}>\n      <Button\n        className={className}\n        color=\"secondary\"\n        icon=\"download-cloud\">\n          {buttonText}\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(ButtonExport)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n// import { Link } from \"react-router-dom\"\n\nimport {\n  // Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from '../../SiteWrapper'\nimport ButtonAdd from '../../ui/ButtonAdd';\nimport ButtonBack from '../../ui/ButtonBack';\nimport ButtonExport from '../../ui/ButtonExport';\n\n\nfunction FinanceExpensesBase ({ t, history, children, refetch, returnUrl, showListButtons=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {returnUrl && <ButtonBack returnUrl={returnUrl} />}\n              {/* <FinanceInvoicesFilter refetch={refetch}/> */}\n              {(showListButtons) ?\n              <React.Fragment>\n                <ButtonExport url=\"/finance/expenses/export\" className='mr-2' />\n                <ButtonAdd addUrl=\"/finance/expenses/add\" className='mr-2' />\n              </React.Fragment> : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceExpensesBase))","import { CSAuth } from './authentication';\nimport { toast } from 'react-toastify'\n\n// Create a link element and simulate a click. This prevents having to redirect creating a pop up that might be blocked.\nfunction download(dataurl) {\n  let link = document.createElement(\"a\");\n  link.href = dataurl\n  link.target = \"_blank\"\n  // Put the link in the DOM and click it\n  document.body.appendChild(link);\n  link.click();\n  // Cleanup the DOM\n  document.body.removeChild(link);\n}\n\nexport function refreshTokenAndOpenExportLinkInNewTab(t, doTokenRefresh, history, exportUrl) {  \n  doTokenRefresh()\n    .then(({data}) => {\n      console.log(data)\n      CSAuth.updateTokenInfo(data.refreshToken)\n\n      // window.open(url, \"_blank\")\n      download(exportUrl);\n    }).catch((error) => {\n      console.log(error)\n      // history.push(\"/user/login\")\n      // Because safari doesn't deal with double clicks well, let the user refresh.\n      // If there is no valid session, the user will be redirected to the sign-in.\n      toast.error(t(\"general.error_try_refreshing\"), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    })\n}\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button\n} from \"tabler-react\";\n\nimport { TOKEN_REFRESH } from \"../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../tools/refresh_token_and_open_export_link\"\n\n\nfunction FileProtectedDownloadTableButton({ t, history, protectedMediaUrl, showLabel=true, className=\"\" }) {\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <Button \n      color={\"secondary \" + className}\n      size=\"sm\"\n      icon=\"download-cloud\"\n      RootComponent=\"a\" \n      title=\"download\"\n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n        t, doTokenRefresh, history, protectedMediaUrl\n    )}\n    >\n      { showLabel && t('general.download')}\n    </Button>\n  )\n}\n\nexport default withTranslation()(withRouter(FileProtectedDownloadTableButton))\n\n\n\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_action = ({t, title, history, msgConfirm, msgDescription, msgSuccess, actionFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{title}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_action_no')}</button>\n            <button\n              className=\"btn btn-success\"\n              onClick={() => {\n                actionFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    // Redirect to edit finance expense edit\n                    if (data.duplicateFinanceExpense) {\n                      console.log(\"GOT DUPLICATE EXPENSE DATA\")\n                      const financeExpenseId = data.duplicateFinanceExpense.financeExpense.id\n                      history.push(`/finance/expenses/edit/${financeExpenseId}`)\n                    }\n                    \n                    // Show success toast\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"check\" /> {t('general.confirm_action_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_action\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_action from \"../../tools/confirm_action\"\n\n// import {\n//   Icon\n// } from \"tabler-react\"\n\n\nfunction ButtonConfirmAction({\n  t, \n  match, \n  history, \n  title,\n  msgConfirm, \n  msgDescription, \n  msgSuccess, \n  actionFunction, \n  actionFunctionVariables, \n  buttonClass=\"btn-link\",\n  buttonIcon=\"\",\n  buttonText=\"\",\n  buttonTextColor=\"\"\n}) {\n  return (\n    <button className={`btn ${buttonClass} btn-sm`}\n      // title={t('')} \n      onClick={() => {\n        confirm_action({\n          t: t,\n          title: title,\n          history: history,\n          msgConfirm: <p>{msgConfirm}</p>,\n          msgDescription: msgDescription,\n          msgSuccess: msgSuccess,\n          actionFunction: actionFunction,\n          functionVariables: actionFunctionVariables\n        })\n    }}>\n      <span className={buttonTextColor}>\n        {buttonIcon} {buttonText}\n      </span>\n    </button> \n  )\n}\n\n\nexport default withTranslation()(withRouter(ButtonConfirmAction))","import { gql } from \"@apollo/client\"\n\nexport const GET_EXPENSES_QUERY = gql`\nquery FinanceExpenses($after: String, $before: String, $supplier: ID, $dateFrom: Date, $dateUntil: Date) {\n  financeExpenses(first: 25, before: $before, after: $after, supplier: $supplier, date_Gte:$dateFrom, date_Lte:$dateUntil) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          date\n          summary\n          description\n          amountDisplay\n          taxDisplay\n          percentageDisplay\n          totalAmountDisplay\n          totalTaxDisplay\n          totalDisplay\n          supplier {\n            id\n            name\n          }\n          financeGlaccount {\n            id\n            name\n            code\n          }\n          financeCostcenter {\n            id\n            name\n            code\n          }\n          urlProtectedDocument\n        }\n      }\n    }\n    businesses(first: 1000, archived: false, supplier: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_EXPENSE_QUERY = gql`\n  query FinanceExpense($id: ID!) {\n    financeExpense(id:$id) {\n      id\n      date\n      summary\n      description\n      amount\n      tax\n      percentage\n      total\n      supplier {\n        id\n        name\n      }\n      financeGlaccount {\n        id\n        name\n        code\n      }\n      financeCostcenter {\n        id\n        name\n        code\n      }\n      document\n    }\n    businesses(first: 100, archived: false, supplier: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ExpenseInputValues {\n    financeGlaccounts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          code\n        }\n      }\n    }\n    businesses(first: 100, supplier: true, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    \n  }\n`\n\nexport const CREATE_FINANCE_EXPENSE = gql`\n  mutation CreateFinanceExpense($input: CreateFinanceExpenseInput!) {\n    createFinanceExpense(input: $input) {\n      financeExpense {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_FINANCE_EXPENSE = gql`\n  mutation UpdateFinanceExpense($input: UpdateFinanceExpenseInput!) {\n    updateFinanceExpense(input: $input) {\n      financeExpense {\n        id\n      }\n    }\n  }\n`\n\nexport const DUPLICATE_FINANCE_EXPENSE = gql`\n  mutation DuplicateFinanceExpense($input: DuplicateFinanceExpenseInput!) {\n    duplicateFinanceExpense(input: $input) {\n      financeExpense {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_EXPENSE = gql`\n  mutation DeleteFinanceExpense($input: DeleteFinanceExpenseInput!) {\n    deleteFinanceExpense(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_delete')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n            <button\n              className=\"btn btn-danger\"\n              onClick={() => {\n                deleteFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_delete\n","\nimport React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  Badge,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport HasPermissionWrapper from '../../HasPermissionWrapper'\nimport FileProtectedDownloadTableButton from '../../ui/FileProtectedDownloadTableButton'\nimport ButtonConfirm from '../../ui/ButtonConfirm'\n// import { get_list_query_variables } from \"./tools\"\n// import FinanceExpensesStatus from \"../../ui/FinanceExpenseStatus\"\nimport { GET_EXPENSES_QUERY, DUPLICATE_FINANCE_EXPENSE, DELETE_FINANCE_EXPENSE } from \"./queries\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport moment from 'moment'\n\nfunction FinanceExpensesList({t, history, match, expenses, showColRelation=false}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const [ duplicateFinanceExpense ] = useMutation(DUPLICATE_FINANCE_EXPENSE)\n  const [ deleteFinanceExpense ] = useMutation(DELETE_FINANCE_EXPENSE)\n\n  return (\n    <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date')}</Table.ColHeader>\n            <Table.ColHeader className=\"cs-finance-expenses-col-summary\">{t('general.summary')} & {t('general.description')}</Table.ColHeader>\n            {/* {showColRelation && <Table.ColHeader>{t('general.supplier')}</Table.ColHeader>} */}\n            <Table.ColHeader>{t('general.amount')} & {t(\"general.tax\")}</Table.ColHeader>\n            <Table.ColHeader>{t('general.glaccount_short')} & {t('general.costcenter')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {expenses.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col key={v4()}>\n                {moment(node.date).format(dateFormat)} <br />\n                {node.supplier && <Badge color=\"default\">{node.supplier.name}</Badge>}\n              </Table.Col>\n              <Table.Col>\n                {node.summary} <br />\n                <small className='text-muted'>{node.description}</small>\n              </Table.Col>\n              {/* <Table.Col>\n                {node.supplier && node.supplier.name}\n              </Table.Col> */}\n              <Table.Col>\n                {node.totalAmountDisplay} <Badge color=\"default\">{node.percentageDisplay}</Badge><br />\n                <small className=\"text-small\">{node.totalTaxDisplay} <Badge color=\"default\">{node.percentageDisplay}</Badge></small>\n              </Table.Col>\n              <Table.Col>\n                {node.financeGlaccount && <span>\n                  <Badge color=\"default\">{node.financeGlaccount.name} {node.financeGlaccount.code && <span>({node.financeGlaccount.code})</span>}</Badge>\n                </span>} <br />\n                <small className=\"text-small\">\n                  {node.financeCostcenter && <span>\n                    <Badge color=\"default\">{node.financeCostcenter.name} {node.financeCostcenter.code && <span>({node.financeCostcenter.code})</span>}</Badge>\n                  </span>}\n                </small>\n              </Table.Col>\n              <Table.Col className=\"text-right\" key={v4()}>\n                {/* Download */}\n                <FileProtectedDownloadTableButton \n                  protectedMediaUrl={node.urlProtectedDocument} \n                  showLabel={false}\n                />\n                {/* Duplicate */}\n                <HasPermissionWrapper key={v4()} permission=\"add\" resource=\"financeexpense\">\n                    <ButtonConfirm\n                      title={t(\"finance.expenses.confirm_duplicate\")}\n                      msgConfirm={<p><b>{moment(node.date).format(dateFormat)} - {node.summary}</b><br/> {node.description}</p>}\n                      msgSuccess={(t(\"finance.expenses.toast_duplicate_success\"))}\n                      actionFunction={duplicateFinanceExpense} \n                      actionFunctionVariables={{\n                        variables: {input: {id: node.id}},\n                        refetchQueries: [\n                          { query: GET_EXPENSES_QUERY }\n                        ]\n                      }}\n                      buttonClass=\"btn-secondary\"\n                      buttonIcon={<Icon name=\"copy\" />}\n                      buttonText={t(\"general.duplicate\")}\n                      buttonTextColor=\"\"\n                    />\n                  </HasPermissionWrapper>\n                {/* Edit */}\n                <Link to={\"/finance/expenses/edit/\" + node.id}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                <button className=\"icon btn btn-link btn-sm\" \n                  title={t('general.delete')} \n                  href=\"\"\n                  onClick={() => {\n                    confirm_delete({\n                      t: t,\n                      msgConfirm: t(\"finance.expenses.delete_confirm_msg\"),\n                      msgDescription: <p>{node.expenseNumber}</p>,\n                      msgSuccess: t('finance.expenses.deleted'),\n                      deleteFunction: deleteFinanceExpense,\n                      functionVariables: { \n                        variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, \n                        refetchQueries: [\n                          {query: GET_EXPENSES_QUERY } \n                          // {query: GET_EXPENSES_QUERY, variables: get_list_query_variables() } \n                        ]\n                      }\n                    })\n                }}>\n                  <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                </button>\n            </Table.Col>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceExpensesList))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  // Supplier\n  let supplier = localStorage.getItem(CSLS.FINANCE_EXPENSES_FILTER_SUPPLIER)\n  if (supplier) {\n    queryVars.supplier = supplier\n  } else {\n    queryVars.supplier = undefined\n  }\n\n  // Date from\n  let dateFrom = localStorage.getItem(CSLS.FINANCE_EXPENSES_FILTER_DATE_FROM)\n  if (dateFrom) {\n    queryVars.dateFrom = dateFrom\n  } else {\n    queryVars.dateFrom = undefined\n  }\n\n  // Date until\n  let dateUntil = localStorage.getItem(CSLS.FINANCE_EXPENSES_FILTER_DATE_UNTIL)\n  if (dateUntil) {\n    queryVars.dateUntil = dateUntil\n  } else {\n    queryVars.dateUntil = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React, { useContext } from 'react'\nimport DatePicker from \"react-datepicker\"\nimport { withTranslation } from 'react-i18next'\n\nimport AppSettingsContext from \"../context/AppSettingsContext\"\n\n\nfunction CSDatePicker ({t, selected, onChange=f=>f, onBlur=f=>f, className=\"form-control\", isClearable=true, placeholderText=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const sysDateFormat = appSettings.dateFormat\n  let dateFormat\n\n  switch (sysDateFormat) {\n    case \"MM-DD-YYYY\":\n      dateFormat = \"MM-dd-yyyy\"\n      break\n    case \"DD-MM-YYYY\":\n      dateFormat = \"dd-MM-yyyy\"\n      break\n    default:\n      dateFormat = \"yyyy-MM-dd\"\n  }\n\n\n  return (\n    <DatePicker \n        todayButton={t('general.today')}\n        dateFormat={dateFormat}\n        selected={selected}\n        placeholderText={(placeholderText) ? placeholderText : t('datepicker.placeholder')}\n        isClearable={isClearable}\n        className={className}\n        showMonthDropdown\n        showYearDropdown\n        dropdownMode=\"select\"\n        onChange={(date) => onChange(date)}\n        onBlur={() => onBlur()}\n    />\n  )\n}\n\nexport default withTranslation()(CSDatePicker)","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from \"moment\"\nimport {\n  Button,\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\nimport CSDatePicker from '../../ui/CSDatePicker';\n\n\nfunction getDefaultValue(lsKey) {\n  let defaultValue = localStorage.getItem(lsKey)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\nfunction getDefaultValueDate(lsKey) {\n  let dateValue\n  if (lsKey === CSLS.FINANCE_EXPENSES_FILTER_DATE_FROM) {\n    dateValue = new Date(moment().startOf('quarter'))  \n  } else {\n    dateValue = new Date(moment().endOf('quarter'))  \n  }\n  \n  const lsValue = localStorage.getItem(lsKey)\n  if (lsValue) {\n    dateValue = new Date(lsValue)\n  }\n\n  // TODO: Add a sanity check here. Date until can't be smaller then date from\n\n  return dateValue\n}\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nfunction FinanceExpensesFilter({ t, history, data, refetch }) {\n  let [supplier, setSupplier] = useState(getDefaultValue(CSLS.FINANCE_EXPENSES_FILTER_SUPPLIER))\n  let [dateFrom, setDateFrom] = useState(getDefaultValueDate(CSLS.FINANCE_EXPENSES_FILTER_DATE_FROM))\n  let [dateUntil, setDateUntil] = useState(getDefaultValueDate(CSLS.FINANCE_EXPENSES_FILTER_DATE_UNTIL))\n\n  return (\n    <div className=\"mb-4\">\n      {/* Filter */}\n      <Grid.Row>\n        <Grid.Col lg={3} md={4} s={6} xs={12}>\n          {/* Supplier */}\n          <label class=\"bold\">{t(\"finance.expenses.filter_label_supplier\")}</label>\n          <select \n            className={selectClass}\n            value={supplier}\n            onChange={ (event) => {\n              setSupplier(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.FINANCE_EXPENSES_FILTER_SUPPLIER,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"finance.expenes.filter_all_suppliers\")}</option>\n            {data.businesses.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col lg={3} md={4} s={6} xs={12}>\n          <label class=\"bold\">{t(\"finance.expenses.filter_label_date_from\")}</label>\n          <CSDatePicker \n            className=\"form-control mr-2\"\n            selected={dateFrom}\n            isClearable={false}\n            onChange={(date) => {\n              let dateStr = moment(date).format('YYYY-MM-DD')\n              setDateFrom(date)\n              updateLocalStorageAndRefetch(\n                CSLS.FINANCE_EXPENSES_FILTER_DATE_FROM,\n                dateStr,\n                refetch\n              )\n            }}\n            placeholderText={t('finance.expenses.filter_label_date_from')}\n          />\n        </Grid.Col>\n        <Grid.Col lg={3} md={4} s={6} xs={12}>\n          <label class=\"bold\">{t(\"finance.expenses.filter_label_date_until\")}</label>\n          <CSDatePicker \n            className=\"form-control mr-2\"\n            selected={dateUntil}\n            isClearable={false}\n            onChange={(date) => {\n              let dateStr = moment(date).format('YYYY-MM-DD')\n              setDateUntil(date)\n              updateLocalStorageAndRefetch(\n                CSLS.FINANCE_EXPENSES_FILTER_DATE_UNTIL,\n                dateStr,\n                refetch\n              )\n            }}\n            placeholderText={t('finance.expenses.filter_label_date_until')}\n          />\n        </Grid.Col>\n        <Grid.Col lg={3} md={4} s={6} xs={12}>\n          <Button\n            className=\"float-right\"\n            color=\"link\"\n            size=\"sm\"\n            onClick={() => {\n              // Supplier\n              localStorage.setItem(CSLS.FINANCE_EXPENSES_FILTER_SUPPLIER, \"\")\n              setSupplier(\"\")\n              // Date from\n              const dateFromDefault = moment().startOf('quarter')\n              localStorage.setItem(CSLS.FINANCE_EXPENSES_FILTER_DATE_FROM, \n                dateFromDefault.format(\"YYYY-MM-DD\"))\n              setDateFrom(new Date(dateFromDefault))\n              // Date until\n              const dateUntilDefault = moment().endOf('quarter')\n              localStorage.setItem(CSLS.FINANCE_EXPENSES_FILTER_DATE_UNTIL, \n                dateUntilDefault.format(\"YYYY-MM-DD\"))\n              setDateUntil(new Date(dateUntilDefault))\n              // Refetch\n              refetch(get_list_query_variables())\n            }}\n          >\n            {t(\"general.reset_filter\")}\n          </Button>\n        </Grid.Col>\n      </Grid.Row>\n    </div>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceExpensesFilter))","\nimport React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceExpensesBase from \"./FinanceExpensesBase\"\nimport FinanceExpensesList from './FinanceExpensesList'\nimport FinanceExpensesFilter from './FinanceExpensesFilter';\n\nimport { get_list_query_variables } from \"./tools\"\nimport { GET_EXPENSES_QUERY } from \"./queries\"\n\n\nfunction FinanceExpenses({ t, location, history }) {\n  // Fetch data\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_EXPENSES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n\n  function test(vars) {\n    refetch(get_list_query_variables())\n    console.log(vars)\n  }\n\n\n  if (loading) return (\n    <FinanceExpensesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.expenses.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceExpensesBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceExpensesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.expenses.title')}>\n        <p>{t('finance.expenses.error_loading')}</p>\n      </ContentCard>\n    </FinanceExpensesBase>\n  )\n\n  const expenses = data.financeExpenses\n\n  // Empty list\n  if (!expenses.edges.length) { return (\n    <FinanceExpensesBase refetch={refetch} showListButtons={true}>\n      <FinanceExpensesFilter data={data} refetch={refetch} />\n      <ContentCard cardTitle={t('finance.expenses.title')}>\n        <p>\n          {t('finance.expenses.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceExpensesBase>\n  )}\n\n  return (\n    <FinanceExpensesBase refetch={refetch} showListButtons={true}>\n      <FinanceExpensesFilter data={data} refetch={test} />\n      <ContentCard \n        cardTitle={t('finance.expenses.title')}\n        hasCardBody={false}\n        pageInfo={expenses.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: expenses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeExpenses.edges\n              const pageInfo = fetchMoreResult.financeExpenses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new expenses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeExpenses: {\n                      __typename: previousResult.financeExpenses.__typename,\n                      edges: [ ...previousResult.financeExpenses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceExpensesList \n          expenses={expenses} \n          showColRelation={true}\n        />\n      </ContentCard>\n    </FinanceExpensesBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceExpenses))","import moment from 'moment'\n\nexport function dateToLocalISO(date) {\n    return moment(date).format(\"YYYY-MM-DD\")\n    // if (date instanceof Date) {\n    //     return date.getFullYear() + '-' + \n    //            (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' +\n    //            (\"0\" + date.getDate()).slice(-2)\n    // } else {\n    //     return date\n    // }\n}\n\nexport function dateToLocalISOTime(date) {\n    if (date instanceof Date) {\n        return date.getHours() + ':' + \n               ('0' + date.getMinutes()).slice(-2)\n    } else {\n        return date\n    }\n}\n\n\nexport function TimeStringToJSDateOBJ(time_string) {\n    // time_string is Expected to be \"HH:MM:SS\"\n    let date_obj = new Date()\n    let time_split = time_string.split(':')\n    date_obj.setHours(time_split[0])\n    date_obj.setMinutes(time_split[1])\n\n    return date_obj\n}\n\n\nexport function getFirstDayMonth(year, month) {\n    const firstDayMonth = moment(`${year}-${month}-01`).startOf('month')\n    return new Date(firstDayMonth)\n}\n\n\nexport function getLastDayMonth(year, month) {\n    const firstDayMonth = moment(`${year}-${month}-01`).endOf('month')\n    return new Date(firstDayMonth)\n}\n\nexport function getWeekdayNames(t) {\n    return [\n        t(\"datetime.isoweekdays.monday\"),\n        t(\"datetime.isoweekdays.tuesday\"),\n        t(\"datetime.isoweekdays.wednesday\"),\n        t(\"datetime.isoweekdays.thursday\"),\n        t(\"datetime.isoweekdays.friday\"),\n        t(\"datetime.isoweekdays.saturday\"),\n        t(\"datetime.isoweekdays.sunday\"),\n    ]\n}\n\nexport function getMonthNamesShort(t) {\n    return [\n        t(\"datetime.months.short_january\"),\n        t(\"datetime.months.short_february\"),\n        t(\"datetime.months.short_march\"),\n        t(\"datetime.months.short_april\"),\n        t(\"datetime.months.short_may\"),\n        t(\"datetime.months.short_june\"),\n        t(\"datetime.months.short_july\"),\n        t(\"datetime.months.short_august\"),\n        t(\"datetime.months.short_september\"),\n        t(\"datetime.months.short_october\"),\n        t(\"datetime.months.short_november\"),\n        t(\"datetime.months.short_decemer\"),\n      ]\n}\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const EXPENSE_SCHEMA = Yup.object().shape({\n  date: Yup.date()\n  .required(t('yup.field_required')),\n  summary: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n  description: Yup.string(),\n  amount: Yup.number()\n    .required(t('yup.field_required')),\n  tax: Yup.number()\n    .required(t('yup.field_required')),\n  percentage: Yup.number()\n    .min(0)\n    .max(100)\n    .required(t('yup.field_required')),\n  financeTaxRate: Yup.string(),\n  financeGlaccount: Yup.string(),\n  financeCostcenter: Yup.string(),\n})\n","export const customFileInputLabelStyle = {\n    whiteSpace: \"nowrap\",\n    display: \"block\",\n    overflow: \"hidden\"\n  }  \n  ","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonFormSubmit = ({ t, disabled, className=\"\" }) => (\n  <Button\n    type=\"submit\"\n    disabled={disabled}\n    className={`pull-right ${className}`}\n    color=\"primary\"\n  >\n      {t(\"general.submit\")}\n  </Button>\n)\n\nexport default withTranslation()(ButtonFormSubmit)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonFormCancel = ({ t, returnUrl, className=\"\" }) => (\n  <Link to={returnUrl}>\n    <Button\n      role=\"button\"\n      className={className}\n      color=\"link\"\n    >\n        {t(\"general.cancel\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonFormCancel)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"  \nimport ButtonFormSubmit from '../../ui/ButtonFormSubmit'\nimport ButtonFormCancel from '../../ui/ButtonFormCancel'\n\nfunction FinanceExpenseForm({ \n  t, \n  history, \n  errors, \n  values, \n  inputData,\n  isSubmitting, \n  setFieldTouched,\n  setFieldValue,\n  returnUrl, \n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f, \n}) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                className={(errors.date) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.date}\n                onChange={(date) => {\n                  setFieldValue(\"date\", date)\n                  setFieldTouched(\"date\", true)\n                }}\n                onBlur={() => setFieldTouched(\"date\", true)}\n              />\n              <ErrorMessage name=\"date\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.summary')}>\n              <Field type=\"text\" \n                    name=\"summary\" \n                    className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n                <Field type=\"text\" \n                    name=\"amount\" \n                    className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.tax')}>\n                <Field type=\"text\" \n                    name=\"tax\" \n                    className={(errors.tax) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"tax\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.percentage')}>\n                <Field type=\"text\" \n                    name=\"percentage\" \n                    className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.supplier')}>\n              <Field component=\"select\" \n                      name=\"supplier\" \n                      className={(errors.supplier) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.businesses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"supplier\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                      name=\"financeGlaccount\" \n                      className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                      name=\"financeCostcenter\" \n                      className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <ButtonFormSubmit disabled={isSubmitting} />\n          <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceExpenseForm))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { GET_EXPENSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_FINANCE_EXPENSE } from './queries'\nimport { EXPENSE_SCHEMA } from './yupSchema'\nimport FinanceExpenseForm from './FinanceExpenseForm'\nimport FinanceExpensesBase from './FinanceExpensesBase';\n\n\nfunction FinanceExpenseAdd({t, match, history}) {\n  const cardTitle = t('finance.expenses.title_add')\n  const returnUrl = `/finance/expenses`\n  \n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createFinanceExpense] = useMutation(CREATE_FINANCE_EXPENSE)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return(\n    <FinanceExpensesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Dimmer loader={true} active={true} />\n      </Card>\n    </FinanceExpensesBase>\n  )\n\n  if (error) return (\n    <FinanceExpensesBase returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </FinanceExpensesBase>\n  )\n  \n  const inputData = data\n\n  return (\n    <FinanceExpensesBase\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: \"\",\n            percentage: 100\n          }}\n          validationSchema={EXPENSE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              date: dateToLocalISO(values.date),\n              summary: values.summary,\n              description: values.description,\n              amount: values.amount,\n              tax: values.tax,\n              percentage: values.percentage,\n              supplier: values.supplier,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter,\n              documentFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n  \n              createFinanceExpense({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_EXPENSES_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.expenses.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceExpenseForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </FinanceExpenseForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceExpensesBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceExpenseAdd))\n","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { GET_EXPENSES_QUERY, GET_EXPENSE_QUERY, UPDATE_FINANCE_EXPENSE } from './queries'\nimport { EXPENSE_SCHEMA } from './yupSchema'\nimport FinanceExpenseForm from './FinanceExpenseForm'\nimport FinanceExpensesBase from './FinanceExpensesBase';\n\n\nfunction FinanceExpenseEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('finance.expenses.title_edit')\n  const returnUrl = `/finance/expenses`\n  \n  const { loading, error, data } = useQuery(GET_EXPENSE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [ updateFinanceExpense ] = useMutation(UPDATE_FINANCE_EXPENSE)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return(\n    <FinanceExpensesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Dimmer loader={true} active={true} />\n      </Card>\n    </FinanceExpensesBase>\n  )\n\n  if (error) return (\n    <FinanceExpensesBase returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </FinanceExpensesBase>\n  )\n\n  const financeExpense = data.financeExpense\n\n  let initialSupplier\n  let initialGlaccount\n  let initialCostcenter\n\n  if ( financeExpense.supplier ) { \n    initialSupplier = financeExpense.supplier.id\n  }\n\n  if ( financeExpense.financeGlaccount ) { \n    initialGlaccount = financeExpense.financeGlaccount.id\n  }\n\n  if ( financeExpense.financeCostcenter ) { \n    initialCostcenter = financeExpense.financeCostcenter.id\n  }\n  \n  return (\n    <FinanceExpensesBase\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            // DatePicker doesn't like a string as an initial value\n            // This makes it a happy DatePicker :)\n            date: new Date(financeExpense.date),\n            summary: financeExpense.summary,\n            description: financeExpense.description,\n            amount: financeExpense.amount,\n            tax: financeExpense.tax,\n            percentage: financeExpense.percentage,\n            supplier: initialSupplier,\n            financeGlaccount: initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={EXPENSE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              id: id,\n              date: dateToLocalISO(values.date),\n              summary: values.summary,\n              description: values.description,\n              amount: values.amount,\n              tax: values.tax,\n              percentage: values.percentage,\n              supplier: values.supplier,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter,\n            }\n\n            function doUpdate() {\n              updateFinanceExpense({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_EXPENSES_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.expenses.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n              inputVars.documentFileName = fileName\n              \n              doUpdate()              \n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              doUpdate()\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceExpenseForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </FinanceExpenseForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceExpensesBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceExpenseEdit))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const EXPENSES_EXPORT_SCHEMA = Yup.object().shape({\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n// import { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\n// import { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\n\n\nconst FinanceExpensesExportForm = ({ t, history, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer> \n        <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n        >\n          {t('finance.invoices.export.btn_prepare_export')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(FinanceExpensesExportForm))","import React, { useContext, useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Container,\n  Icon,\n  List,\n  Page\n} from \"tabler-react\"\n\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from '../../../SiteWrapper'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport ButtonBack from '../../../ui/ButtonBack';\n\nimport { EXPENSES_EXPORT_SCHEMA } from './yupSchema'\nimport FinanceExpensesExportForm from './FinanceExpensesExportForm';\nimport moment from 'moment'\n\n\nfunction FinanceExpensesExport({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [dateStart, setDateStart] = useState(new Date(moment().startOf('month')))\n  const [dateEnd, setDateEnd] = useState(new Date(moment().endOf('month')))\n  const [prepared, setPrepared] = useState(false)\n  const [exportUrl, setExportUrl] = useState(\"\")\n\n  const cardTitle = t(\"finance.expenses.export.title\")\n  const returnUrl = \"/finance/expenses\" \n\n  const [ doTokenRefresh ] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Card title={cardTitle}>\n            <Formik\n            initialValues={{ \n              dateStart: dateStart,\n              dateEnd: dateEnd\n            }}\n            validationSchema={EXPENSES_EXPORT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                setDateStart(values.dateStart)\n                setDateEnd(values.dateEnd)\n\n                const isoDateStart = dateToLocalISO(values.dateStart)\n                const isoDateEnd = dateToLocalISO(values.dateEnd)\n                setExportUrl(\n                  `/d/export/finance_expenses/excel/${isoDateStart}/${isoDateEnd}`\n                )\n                \n                setSubmitting(false)\n                setPrepared(true)  \n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n              <FinanceExpensesExportForm\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n              )\n            }\n          </Formik>\n        </Card>\n        {(prepared) ? \n          <Card title={t(\"finance.expenses.export.ready.title\")}>\n            <Card.Body>\n              {t(\"finance.expenses.export.ready.explanation\")}\n              <List>\n                <List.Item>\n                  {t(\"general.period\")}{ \": \" } \n                  {moment(dateStart).format(dateFormat)} { \" - \" }\n                  {moment(dateEnd).format(dateFormat)}\n                </List.Item>\n              </List>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                <Icon name=\"download-cloud\" /> {t(\"general.download\")}\n              </Button>\n            </Card.Footer>\n          </Card>\n          : \"\"}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceExpensesExport))","import { gql } from \"@apollo/client\"\n\nexport const GET_GLACCOUNTS_QUERY = gql`\n  query FinanceGLAccounts($after: String, $before: String, $archived: Boolean) {\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          name,\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_GLACCOUNT_QUERY = gql`\n  query FinanceGLAccount($id: ID!) {\n    financeGlaccount(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_GLACCOUNT = gql`\nmutation CreateFinanceGLAccount($input:CreateFinanceGLAccountInput!) {\n  createFinanceGlaccount(input: $input) {\n    financeGlaccount{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_GLACCOUNT = gql`\nmutation UpdateFinanceGLAccount($input: UpdateFinanceGLAccountInput!) {\n  updateFinanceGlaccount(input: $input) {\n    financeGlaccount {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_GLACCOUNT = gql`\nmutation ArchiveFinanceGLAccount($input: ArchiveFinanceGLAccountInput!) {\n  archiveFinanceGlaccount(input: $input) {\n    financeGlaccount {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceGLAccountsBase({ t, history, children, showBack=false, returnUrl=\"/finance/glaccounts\" }) {\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeglaccount\">\n                  <ButtonAdd addUrl=\"/finance/glaccounts/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceGLAccountsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_GLACCOUNTS_QUERY, ARCHIVE_GLACCOUNT } from \"./queries\"\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccounts({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t(\"finance.glaccounts.title\")\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_GLACCOUNTS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveGlaccount ] = useMutation(ARCHIVE_GLACCOUNT)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  if (error) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.glaccounts.error_loading')}</p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  const glaccounts = data.financeGlaccounts\n   \n  // Empty list\n  if (!glaccounts.edges.length) { return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}\n                   headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.glaccounts.empty_list') : t(\"finance.glaccounts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )} \n\n  return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}\n                headerContent={headerOptions}\n                pageInfo={glaccounts.pageInfo}\n                hasCardBody={false}\n                onLoadMore={() => {\n                fetchMore({\n                  variables: {\n                    after: glaccounts.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.financeGlaccounts.edges\n                    const pageInfo = fetchMoreResult.financeGlaccounts.pageInfo\n\n                    return newEdges.length\n                      ? {\n                          // Put the new glaccounts at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          financeGlaccounts: {\n                            __typename: previousResult.financeGlaccounts.__typename,\n                            edges: [ ...previousResult.financeGlaccounts.edges, ...newEdges ],\n                            pageInfo\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {glaccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/glaccounts/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveGlaccount({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceGLAccounts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const GLACCOUNT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    code: Yup.number()\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { GET_GLACCOUNTS_QUERY, ADD_GLACCOUNT } from './queries'\nimport { GLACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccountAdd({t, history}) {\n  const returnUrl = \"/finance/glaccounts\"\n  const [ addGlaccount ] = useMutation(ADD_GLACCOUNT)\n\n  return (\n    <FinanceGLAccountsBase showBack={true}>\n      <Card title={t('finance.glaccounts.title_add')}>\n        <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={GLACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addGlaccount({ variables: {\n                input: {\n                  name: values.name, \n                  code: parseInt(values.code)\n                }\n              }, refetchQueries: [\n                  {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.glaccounts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <FoForm>\n                <Card.Body>\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    <Form.Group label={t('finance.code')}>\n                      <Field type=\"text\" \n                              name=\"code\" \n                              className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      color=\"primary\"\n                      className=\"pull-right\" \n                      type=\"submit\" \n                      disabled={isSubmitting}\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button color=\"link\">\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceGLAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceGLAccountAdd))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_GLACCOUNTS_QUERY, GET_GLACCOUNT_QUERY, UPDATE_GLACCOUNT } from './queries'\nimport { GLACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccountEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/glaccounts\"\n  const cardTitle = t('finance.glaccounts.title_edit')\n  const { loading, error, data } = useQuery(GET_GLACCOUNT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateGlaccount ] = useMutation(UPDATE_GLACCOUNT)\n\n  if (loading) return (\n    <FinanceGLAccountsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  if (error) return (\n    <FinanceGLAccountsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  const initialData = data.financeGlaccount;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceGLAccountsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            code: parseInt(initialData.code)\n          }}\n          validationSchema={GLACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateGlaccount({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  code: parseInt(values.code)\n                }\n              }, refetchQueries: [\n                  {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.glaccounts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n                <Card.Body>\n                  <Form.Group label={t('general.name')}>\n                    <Field type=\"text\" \n                            name=\"name\" \n                            className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                  <Form.Group label={t('finance.code')}>\n                    <Field type=\"text\" \n                            name=\"code\" \n                            className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      className=\"pull-right\"\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      type=\"submit\"\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button\n                        type=\"button\" \n                        color=\"link\" \n                      >\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceGLAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceGLAccountEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_INVOICES_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceInvoicesFilter = ({ t, history, data, refetch }) => (\n  <div className=\"mr-2\">\n    {/* Status */}\n    <select \n      className={`${selectClass}`}\n      value={getDefaultValue(CSLS.FINANCE_INVOICES_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_INVOICES_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"finance.invoices.statuses.all\")}</option>\n      <option value=\"DRAFT\" key={v4()}>{t('finance.invoices.statuses.draft')}</option>\n      <option value=\"SENT\" key={v4()}>{t('finance.invoices.statuses.sent')}</option>\n      <option value=\"PAID\" key={v4()}>{t('finance.invoices.statuses.paid')}</option>\n      <option value=\"OVERDUE\" key={v4()}>{t('finance.invoices.statuses.overdue')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.invoices.statuses.cancelled')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceInvoicesFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from '../../SiteWrapper'\nimport ButtonExport from '../../ui/ButtonExport';\nimport FinanceInvoicesFilter from \"./FinanceInvoicesFilter\"\n\n\nfunction FinanceInvoicesBase ({ t, history, children, refetch }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <FinanceInvoicesFilter refetch={refetch}/>\n              <ButtonExport url=\"/finance/invoices/export\" className='mr-2' />\n              <Link to=\"/finance/invoices/groups\">\n                <Button\n                  color=\"secondary\"\n                  icon=\"folder\"\n                >\n                  {t('general.groups')}\n                </Button>\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceInvoicesStatus extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance costcenter edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"ALL\":\n        return <Badge color=\"secondary\">{t('finance.invoices.status.ALL')}</Badge>\n      case \"DRAFT\":\n        return <Badge color=\"secondary\">{t('finance.invoices.status.DRAFT')}</Badge>\n      case \"SENT\":\n        return <Badge color=\"primary\">{t('finance.invoices.status.SENT')}</Badge>\n      case \"PAID\":\n        return <Badge color=\"success\">{t('finance.invoices.status.PAID')}</Badge>\n      case \"OVERDUE\":\n        return <Badge color=\"danger\">{t('finance.invoices.status.OVERDUE')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.invoices.status.CANCELLED')}</Badge>\n      default:\n        return t('finance.invoices.status.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicesStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: CostasiellaFinanceInvoiceStatusChoices) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INVOICE_QUERY = gql`\n  query FinanceInvoice($id: ID!, $before: String, $after: String) {\n    financeInvoice(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      business {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      customTo\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      invoiceNumber\n      dateSent\n      dateDue\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      paidDisplay\n      balance\n      balanceDisplay\n      creditInvoiceNumber\n      creditInvoiceId\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n            onlinePaymentId\n          }\n        }\n      }\n    }\n    businesses(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    organization(id:\"T3JnYW5pemF0aW9uTm9kZToxMDA=\") {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n    }\n  }\n`\n\n\nexport const UPDATE_INVOICE = gql`\n  mutation UpdateFinanceInvoice($input: UpdateFinanceInvoiceInput!) {\n    updateFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n        summary\n      }\n    }\n  }\n`\n\n\nexport const CANCEL_AND_CREATE_CREDIT_INVOICE = gql`\n  mutation CancelAndCreateCreditFinanceInvoice($input: CancelAndCreateCreditFinanceInvoiceInput!) {\n    cancelAndCreateCreditFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_INVOICE = gql`\n  mutation DeleteFinanceInvoice($input: DeleteFinanceInvoiceInput!) {\n    deleteFinanceInvoice(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const CREATE_INVOICE_ITEM = gql`\n  mutation CreateFinanceInvoiceItem($input: CreateFinanceInvoiceItemInput!) {\n    createFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_INVOICE_ITEM = gql`\n  mutation UpdateFinanceInvoiceItem($input: UpdateFinanceInvoiceItemInput!) {\n    updateFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_INVOICE_ITEM = gql`\n  mutation DeleteFinanceInvoiceItem($input: DeleteFinanceInvoiceItemInput!) {\n    deleteFinanceInvoiceItem(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const DELETE_INVOICE_PAYMENT = gql`\n  mutation DeleteFinanceInvoicePayment($input: DeleteFinanceInvoicePaymentInput!) {\n    deleteFinanceInvoicePayment(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  Button,\n  Table, \n  Text\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport FinanceInvoicesStatus from \"../../ui/FinanceInvoiceStatus\"\nimport { GET_INVOICES_QUERY, DELETE_FINANCE_INVOICE } from \"./queries\"\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport moment from 'moment'\n\nfunction FinanceInvoicesList({\n  t, \n  history, \n  match, \n  invoices, \n  showBtnPDF=false,\n  showColRelation=false,\n}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [ deleteFinanceInvoice ] = useMutation(DELETE_FINANCE_INVOICE)\n\n  return (\n    <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n            {showColRelation && <Table.ColHeader>{t('finance.invoices.relation')}</Table.ColHeader>}\n            <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n            {/* <Table.ColHeader>{t('finance.invoices.due')}</Table.ColHeader> */}\n            <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {invoices.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col key={v4()}>\n                <FinanceInvoicesStatus status={node.status} /> <br />\n                {(node.business && !showColRelation) && \n                  <Link to={\"/relations/b2b/\" + node.business.id + \"/edit\"}>\n                    <small><Icon name=\"home\" /> {node.business.name}</small>\n                  </Link>\n                }\n              </Table.Col>\n              <Table.Col key={v4()}>\n                <Link to={\"/finance/invoices/edit/\" + node.id}>\n                  {node.invoiceNumber}\n                </Link><br />\n                <Text.Small color=\"gray\">{node.summary.trunc(28)}</Text.Small>\n              </Table.Col>\n              {showColRelation &&\n                <Table.Col key={v4()}>\n                  { node.account && \n                    <Link to={\"/relations/accounts/\" + node.account.id + \"/profile\"}>\n                      <Icon name=\"user\" /> {node.account.fullName} <br />\n                    </Link> \n                  }\n                  { node.business && \n                    <Link to={\"/relations/b2b/\" + node.business.id + \"/edit\"}>\n                      <small><Icon name=\"home\" /> {node.business.name}</small>\n                    </Link>\n                  }\n                </Table.Col>\n              }\n              <Table.Col key={v4()}>\n                {moment(node.dateSent).format(dateFormat)} <br />\n                {moment(node.dateDue).format(dateFormat)}\n              </Table.Col>\n              <Table.Col key={v4()}>\n                {node.totalDisplay}\n              </Table.Col>\n              <Table.Col key={v4()}>\n                {node.balanceDisplay}\n              </Table.Col>\n              <Table.Col className=\"text-right\" key={v4()}>\n                {(showBtnPDF) && <Button\n                  color=\"secondary\"\n                  icon=\"printer\"\n                  className=\"mr-2\"\n                  size=\"sm\"\n                  onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                    t, doTokenRefresh, history, `/d/export/invoice/pdf/${node.id}`\n                  )}\n                >\n                  {t('general.pdf')} \n                </Button>}\n                <Link to={\"/finance/invoices/edit/\" + node.id}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                <button className=\"icon btn btn-link btn-sm\" \n                  title={t('general.delete')} \n                  href=\"\"\n                  onClick={() => {\n                    confirm_delete({\n                      t: t,\n                      msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n                      msgDescription: <p>{node.invoiceNumber}</p>,\n                      msgSuccess: t('finance.invoices.deleted'),\n                      deleteFunction: deleteFinanceInvoice,\n                      functionVariables: { \n                        variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, \n                        refetchQueries: [\n                          {query: GET_INVOICES_QUERY, variables: get_list_query_variables() } \n                        ]\n                      }\n                    })\n                }}>\n                  <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                </button>\n            </Table.Col>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesList))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceInvoicesBase from \"./FinanceInvoicesBase\"\nimport FinanceInvoicesList from './FinanceInvoicesList'\n\nimport { get_list_query_variables } from \"./tools\"\nimport { GET_INVOICES_QUERY } from \"./queries\"\n\n\nfunction FinanceInvoices({ t, location, history }) {\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  // Set back location for account profile\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_INVOICES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n\n\n  if (loading) return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <p>{t('finance.invoices.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n\n  const invoices = data.financeInvoices\n\n  // Empty list\n  if (!invoices.edges.length) { return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <p>\n          {t('finance.invoices.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )}\n\n  return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard \n        cardTitle={t('finance.invoices.title')}\n        hasCardBody={false}\n        pageInfo={invoices.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: invoices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeInvoices.edges\n              const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeInvoices: {\n                      __typename: previousResult.financeInvoices.__typename,\n                      edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceInvoicesList \n          invoices={invoices} \n          showBtnPDF={true}\n          showColRelation={true}\n        />\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceInvoices))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INVOICES_EXPORT_SCHEMA = Yup.object().shape({\n    status: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\n\n\nconst ScheduleClassForm = ({ t, history, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                    name=\"status\" \n                    className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"ALL\" key={v4()}>{t('general.all')}</option>\n                <option value=\"DRAFT\" key={v4()}>{t('finance.invoices.status.DRAFT')}</option>\n                <option value=\"SENT\" key={v4()}>{t('finance.invoices.status.SENT')}</option>\n                <option value=\"PAID\" key={v4()}>{t('finance.invoices.status.PAID')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('finance.invoices.status.CANCELLED')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer> \n        <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n        >\n          {t('finance.invoices.export.btn_prepare_export')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassForm))","import React, { useContext, useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Container,\n  Icon,\n  List,\n  Page\n} from \"tabler-react\"\n\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from '../../../SiteWrapper'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport ButtonBack from '../../../ui/ButtonBack';\n\nimport { INVOICES_EXPORT_SCHEMA } from './yupSchema'\nimport FinanceInvoicesExportForm from './FinanceInvoicesExportForm';\nimport moment from 'moment'\n\n\nfunction FinanceInvoicesExport({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [dateStart, setDateStart] = useState(new Date(moment().startOf('month')))\n  const [dateEnd, setDateEnd] = useState(new Date(moment().endOf('month')))\n  const [status, setStatus] = useState(\"ALL\")\n  const [prepared, setPrepared] = useState(false)\n  const [exportUrl, setExportUrl] = useState(\"\")\n\n  const cardTitle = t(\"finance.invoices.export.title\")\n  const returnUrl = \"/finance/invoices\" \n\n  const [ doTokenRefresh ] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Card title={cardTitle}>\n            <Formik\n            initialValues={{ \n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              status: status\n            }}\n            validationSchema={INVOICES_EXPORT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                setDateStart(values.dateStart)\n                setDateEnd(values.dateEnd)\n                setStatus(values.status)\n\n                const isoDateStart = dateToLocalISO(values.dateStart)\n                const isoDateEnd = dateToLocalISO(values.dateEnd)\n                setExportUrl(\n                  `/d/export/invoices/${isoDateStart}/${isoDateEnd}/${status}`\n                )\n                \n                setSubmitting(false)\n                setPrepared(true)  \n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n              <FinanceInvoicesExportForm\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n              )\n            }\n          </Formik>\n        </Card>\n        {(prepared) ? \n          <Card title={t(\"finance.invoices.export.ready.title\")}>\n            <Card.Body>\n              {t(\"finance.invoices.export.ready.explanation\")}\n              <List>\n                <List.Item>\n                  {t(\"general.period\")}{ \": \" } \n                  {moment(dateStart).format(dateFormat)} { \" - \" }\n                  {moment(dateEnd).format(dateFormat)}\n                </List.Item>\n                <List.Item>\n                  {t(\"general.status\")}: {t(`finance.invoices.status.${status}`)}\n                </List.Item>\n              </List>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                <Icon name=\"download-cloud\" /> {t(\"general.download\")}\n              </Button>\n            </Card.Footer>\n          </Card>\n          : \"\"}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesExport))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceInvoiceEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            {children}\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { CREATE_INVOICE_ITEM, GET_INVOICE_QUERY } from \"../queries\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceItemAdd({t, match}) {\n  const [ addInvoiceItem ] = useMutation(CREATE_INVOICE_ITEM)\n\n    return (\n      <button className=\"btn btn-primary btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          addInvoiceItem({ variables: {\n            input: {\n              financeInvoice: match.params.id              \n            }\n          }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: match.params.id}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.invoice.toast_add_item_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              // setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              // setSubmitting(false)\n            })\n      }}>\n        <Icon prefix=\"fe\" name=\"plus\" /> { ' ' }\n        {t('finance.invoice.item_add')}\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemAdd))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { DELETE_INVOICE_ITEM, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction FinanceInvoiceItemDelete({t, match, node}) {\n  const [deleteInvoiceItem] = useMutation(DELETE_INVOICE_ITEM)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.invoices.item_delete_confirm_msg\"),\n            msgDescription: <p>{node.productName} <br /> {node.description}</p>,\n            msgSuccess: t('finance.invoices.item_deleted'),\n            deleteFunction: deleteInvoiceItem,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemDelete))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport FinanceInvoiceItemDelete from './FinanceInvoiceItemDelete'\n\n\nconst FinanceInvoiceItemEditForm = ({ t, isSubmitting, errors, node, touched, handleChange, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Grid.Row>\n      {/* <Icon name=\"more-vertical\" /> */}\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"productName\" \n                    className={(errors.productName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"productName\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"productName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    component=\"textarea\"\n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"description\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                   name=\"quantity\" \n                   className={(errors.quantity) ? \"form-control is-invalid\" : \"form-control\"} \n                   autoComplete=\"off\" \n                   onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"quantity\", true, true)\n                  }}\n            />\n            <ErrorMessage name=\"quantity\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"price\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field component=\"select\" \n                  name=\"financeTaxRate\" \n                  className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\"\n                  onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"financeTaxRate\", true, true)\n                  }}\n            >\n              {console.log(\"query data in form finance tax rate:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\">{node.totalDisplay}</span> <br /><br />\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\"><FinanceInvoiceItemDelete node={node}/></span><br /><br /> <br />\n          {(Object.keys(touched).length === 0) ? \"\" :\n            <Button \n              color=\"primary\"\n              className=\"pull-right\" \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.submit')}\n            </Button>\n          }\n        </Grid.Col>\n      </Grid.Row>\n      {/* {(Object.keys(touched).length === 0) ? \"\" :\n        <Grid.Row>\n          <Grid.Col md={12} className=\"cs-grid-table-cell\">\n            <Alert type=\"primary\">\n              <p>A change was detected to the item above. Click the save button to save it. </p>\n              <Button \n                color=\"primary\"\n                // className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n            </Alert>\n          </Grid.Col>\n        </Grid.Row>\n      } */}\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_INVOICE_ITEM, GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceItemEditForm from './FinanceInvoiceItemEditForm'\n\n\nfunction FinanceInvoiceItemEdit({t, match, initialValues, node, inputData}) {\n  const [updateInvoiceItem] = useMutation(UPDATE_INVOICE_ITEM)\n\n    return (\n      <Formik\n        initialValues={{\n          productName: initialValues.productName,\n          description: initialValues.description,\n          price: initialValues.price,\n          quantity: initialValues.quantity,\n          financeTaxRate: (initialValues.financeTaxRate) ? initialValues.financeTaxRate.id : null\n        }}\n        // validationSchema={INVOICE_GROUP_SCHEMA}\n        onSubmit={(values, { setSubmitting, setTouched }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateInvoiceItem({ variables: {\n            input: {\n              id: initialValues.id,\n              productName: values.productName, \n              description: values.description,\n              price: values.price,\n              quantity: values.quantity,\n              financeTaxRate: values.financeTaxRate\n            }\n          }, refetchQueries: [\n            {query: GET_INVOICE_QUERY, variables: {id: match.params.id}}\n              // {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.invoice.item.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n              setTouched({})\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n      >\n        {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n          <FinanceInvoiceItemEditForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            touched={touched}\n            handleChange={handleChange}\n            setFieldTouched={setFieldTouched}\n            node={node}\n            inputData={inputData}\n          >\n          </FinanceInvoiceItemEditForm>   \n        )}\n      </Formik>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemEdit))","import React, { useState } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer, \n  Grid, \n} from \"tabler-react\"\n\nimport FinanceInvoiceItemAdd from \"./FinanceInvoiceItemAdd\"\nimport { GET_INVOICE_QUERY } from '../queries'\n\nimport FinanceInvoiceItemEdit from './FinanceInvoiceItemEdit'\n\n\nexport const UPDATE_INVOICE_ITEM = gql`\n  mutation UpdateFinanceInvoiceItem($input: UpdateFinanceInvoiceItemInput!) {\n    updateFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n      }\n    }\n  }\n`\n\nfunction FinanceInvoiceEditItems ({ t, history, match, refetchInvoice, inputData }) {\n  const [ updateItem ] = useMutation(UPDATE_INVOICE_ITEM)\n  const [ updating, setUpdating ] = useState(false)\n\n  const updateLineNumber = ({ node_id, line_number }) => {\n    setUpdating(true)\n    updateItem({ \n      variables: { \n        input: {\n          id: node_id,\n          lineNumber: line_number\n        } \n      },\n      refetchQueries: [\n        { query: GET_INVOICE_QUERY, variables: { id: inputData.financeInvoice.id }}\n      ]\n    }).then(({ data }) => {\n      console.log('got data', data)\n      toast.success((t('finance.invoice.saved_item_sorting')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      setTimeout(() => setUpdating(false), 125)\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      console.log('there was an error sending the query', error)\n      setTimeout(() => setUpdating(false), 125)\n    })\n  }\n\n  const onDragEnd = (result) => {\n    // the only one that is required\n    console.log('onDragEnd triggered...')\n    console.log(result)\n    const { draggableId, destination, source, reason } = result\n    console.log(source)\n    console.log(destination)\n    console.log(reason)\n\n    // Nothing to do, nowhere to go...\n    console.log(\"drop cancelled...\")\n    if (!destination || reason === 'CANCEL') {\n      return\n    }\n\n    // Moved back to the same spot\n    console.log(\"dropped to the same spot\")\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    updateLineNumber({\n      node_id: draggableId,\n      line_number: destination.index\n    })\n  }\n  // const onDragEnd = useCallback((result) => {\n  //   // the only one that is required\n  //   console.log('onDragEnd triggered...')\n  //   console.log(result)\n  //   const { draggableId, destination, source, reason } = result\n  //   console.log(source)\n  //   console.log(destination)\n  //   console.log(reason)\n\n  //   // Nothing to do, nowhere to go...\n  //   console.log(\"drop cancelled...\")\n  //   if (!destination || reason === 'CANCEL') {\n  //     return\n  //   }\n\n  //   // Moved back to the same spot\n  //   console.log(\"dropped to the same spot\")\n  //   if (\n  //     destination.droppableId === source.droppableId &&\n  //     destination.index === source.index\n  //   ) {\n  //     return\n  //   }\n\n  //   updateLineNumber({\n  //     node_id: draggableId,\n  //     line_number: destination.index\n  //   })\n  // }, []);\n\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} >\n      <Card statusColor=\"blue\">\n        <Card.Header>\n          <Card.Title>{t('general.items')}</Card.Title>\n          <Card.Options>\n            <FinanceInvoiceItemAdd />\n          </Card.Options>\n        </Card.Header>\n        <Card.Body>\n          <Dimmer active={updating} loader={updating}>\n              <Grid.Row className=\"cs-grid-table-header\">\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.product\")}</Grid.Col>\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.description\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.quantity_short_and_price\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.tax\")}</Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"><span className=\"float-right\">{t(\"general.total\")}</span></Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"></Grid.Col>\n              </Grid.Row>\n              <Droppable droppableId=\"invoice_items\">\n                {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef} \n                      {...provided.droppableProps} \n                    >\n                      {inputData.financeInvoice.items.edges.map(({ node }, idx) => (\n                        <Draggable \n                          draggableId={node.id}\n                          index={idx}\n                          key={node.id}\n                        >\n                          {(provided, snapshot) => (\n                              <div \n                                ref={provided.innerRef}\n                                index={node.lineNumber}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                >\n                                <FinanceInvoiceItemEdit initialValues={node} inputData={inputData} node={node} />\n                              </div>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                )}\n              </Droppable>\n          </Dimmer>\n        </Card.Body>\n      </Card>\n    </DragDropContext>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditItems))","export const tinymceBasicConf = {\n    resize: true,\n    menubar: false,\n    plugins: 'link image code lists paste fullscreen',\n    statusbar: false,\n    toolbar: ' undo redo | formatselect | bold italic strikethrough | bullist numlist | alignleft aligncenter alignright | link image | pastetext code | fullscreen',    \n}\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditTermsForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"terms\", e.target.getContent())\n            setFieldTouched(\"terms\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTermsForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditFooterForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"footer\", e.target.getContent())\n            setFieldTouched(\"footer\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditFooterForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm,  ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditNoteForm = ({ t, isSubmitting, values, errors, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Tab,\n  TabbedCard\n} from \"tabler-react\"\n\n\nimport { UPDATE_INVOICE, GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceEditTermsForm from \"./FinanceInvoiceEditTermsForm\"\nimport FinanceInvoiceEditFooterForm from \"./FinanceInvoiceEditFooterForm\"\nimport FinanceInvoiceEditNoteForm from \"./FinanceInvoiceEditNoteForm\"\n\n\nfunction FinanceInvoiceEditAdditional({t, history, match, initialData}) {\n  const id = match.params.id\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <TabbedCard initialTab={t('general.terms_and_conditions')}>\n      <Tab title={t('general.terms_and_conditions')}>\n        <Formik\n          initialValues={{ \n            terms: initialData.financeInvoice.terms, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                terms: values.terms, \n              }\n            }, refetchQueries: [\n                {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_terms_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditTermsForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditTermsForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.footer')}>\n        <Formik\n          initialValues={{ \n            footer: initialData.financeInvoice.footer, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                footer: values.footer, \n              }\n            }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_footer_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditFooterForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              handleChange={handleChange}\n              touched={touched}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditFooterForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.note')}>\n        <Formik\n          initialValues={{ \n            note: initialData.financeInvoice.note, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                note: values.note, \n              }\n            }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_note_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditNoteForm>\n          )}\n        </Formik>\n      </Tab>\n    </TabbedCard>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditAdditional))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceInvoiceEditBalance = ({ t, history, financeInvoice }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.balance')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.subtotal')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.subtotalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.tax')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.taxDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.total')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.totalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.paid')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.paidDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.balance')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.balanceDisplay}\n        </span>\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditBalance))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nconst FinanceInvoiceEditOptionsForm = ({ t, isSubmitting, values, errors, handleChange, touched, setFieldValue, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('finance.invoices.invoice_number')}>\n        <Field type=\"text\" \n                name=\"invoiceNumber\" \n                className={(errors.invoiceNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"invoiceNumber\", true, true)\n                }}           \n        />\n        <ErrorMessage name=\"invoiceNumber\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.invoices.date')}>\n        <CSDatePicker \n          className={(errors.dateSent) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateSent}\n          onChange={(date) => {\n            setFieldValue(\"dateSent\", date)\n            setFieldTouched(\"dateSent\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateSent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.invoices.due')}>\n        <CSDatePicker \n          className={(errors.dateDue) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateDue}\n          onChange={(date) => {\n            setFieldValue(\"dateDue\", date)\n            setFieldTouched(\"dateDue\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateDue\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.status')}>\n        <Field component=\"select\" \n              name=\"status\" \n              className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\"\n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"status\", true, true)\n              }}\n        >\n          <option value=\"DRAFT\">{t('finance.invoices.status.DRAFT')}</option>\n          <option value=\"SENT\">{t('finance.invoices.status.SENT')}</option>\n          <option value=\"PAID\">{t('finance.invoices.status.PAID')}</option>\n          <option value=\"CANCELLED\">{t('finance.invoices.status.CANCELLED')}</option>\n        </Field>\n        <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.payment_method')}>\n        <Field component=\"select\" \n              name=\"financePaymentMethod\" \n              className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"financePaymentMethod\", true, true)\n              }}\n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}></option>\n          {inputData.financePaymentMethods.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>  \n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOptionsForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditOptionsForm from \"./FinanceInvoiceEditOptionsForm\"\n\n\nfunction FinanceInvoiceEditOptions({t, match, initialData}) {\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n  \n  let initialPaymentMethod = \"\"\n  if (initialData.financeInvoice.financePaymentMethod) {\n    initialPaymentMethod = initialData.financeInvoice.financePaymentMethod.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateSent = null\n  if (initialData.financeInvoice.dateSent) {\n    dateSent = new Date(initialData.financeInvoice.dateSent)\n  }\n  let dateDue = null\n  if (initialData.financeInvoice.dateDue) {\n    dateDue = new Date(initialData.financeInvoice.dateDue)\n  }\n\n  return (\n    <Card title={t('general.options')} statusColor=\"blue\">\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            invoiceNumber: initialData.financeInvoice.invoiceNumber, \n            dateSent: dateSent,\n            dateDue: dateDue,\n            status: initialData.financeInvoice.status,\n            financePaymentMethod: initialPaymentMethod\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                invoiceNumber: values.invoiceNumber, \n                dateSent: dateToLocalISO(values.dateSent),\n                dateDue: dateToLocalISO(values.dateDue),\n                status: values.status,\n                financePaymentMethod: values.financePaymentMethod,\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_options_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditOptionsForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditOptionsForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport DOMPurify from 'dompurify'\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceInvoiceEditOrganization = ({ t, history, organization }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.from')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div className=\"bold\">\n        {organization.name}\n      </div>\n      {(organization.address) ?\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organization.address)}} />\n        : \"\"\n      }      \n      <div>\n        {organization.phone}\n      </div>\n      <div>\n        {organization.email}\n      </div>\n      <div>\n        {organization.registration}\n      </div>\n      <div>\n        {organization.taxRegistration}\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOrganization))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinanceInvoiceEditSummaryForm = ({ t, isSubmitting, errors, touched, setFieldTouched, handleChange }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group>\n        <Field \n          type=\"text\" \n          name=\"summary\" \n          className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n          autoComplete=\"off\" \n          onChange={(e) => {\n            handleChange(e)\n            setFieldTouched(\"summary\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditSummaryForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditSummaryForm from \"./FinanceInvoiceEditSummaryForm\"\n\n\nfunction FinanceInvoiceEditSummary({t, history, match, location, initialData}) {  \n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.summary')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            summary: initialData.financeInvoice.summary, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                summary: values.summary, \n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_summary_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, setFieldTouched, handleChange }) => (\n            <FinanceInvoiceEditSummaryForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditSummaryForm>\n          )}\n        </Formik>\n        {(initialData.financeInvoice.creditInvoiceId) ?\n          <Alert type=\"warning\">\n            {t(\"finance.invoice.credit_invoice_for\")} { \" \" }\n            <Link to={`/finance/invoices/edit/${initialData.financeInvoice.creditInvoiceId}`}>\n              <Alert.Link>{initialData.financeInvoice.creditInvoiceNumber}</Alert.Link>\n            </Link>\n          </Alert>\n        : \"\"}\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditSummary))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceEditTo({ t, history, match, financeInvoice }) {\n  const id = match.params.id\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.to')} </Card.Title>\n        <Card.Options>\n          <Link to={`/finance/invoices/edit/${id}/to`}>\n            <Button color=\"secondary\" size=\"sm\">\n              {t('general.edit')}\n            </Button>\n          </Link> \n        </Card.Options>\n      </Card.Header>\n      <Card.Body>\n        <div className='mb-3'>\n          <div className=\"bold\">\n            {financeInvoice.relationCompany}\n          </div>\n          <div>\n            {financeInvoice.relationCompanyRegistration}\n          </div>\n          <div>\n            {financeInvoice.relationCompanyTaxRegistration}\n          </div>\n        </div>\n          <div className=\"bold\">\n            {financeInvoice.relationContactName}\n          </div>\n          <div>\n            {financeInvoice.relationAddress}\n          </div>\n          <div>\n            {financeInvoice.relationPostcode} {financeInvoice.relationCity}\n          </div>\n          <div>\n            {financeInvoice.relationCountry}\n          </div>\n      </Card.Body>\n      <Card.Footer>\n        {(financeInvoice.business) && <span className='float-right'>\n          <Link to={`/relations/b2b/${financeInvoice.business.id}/edit`}>\n            <Button icon=\"home\" color=\"link\">\n              {financeInvoice.business.name}\n            </Button> \n          </Link>\n          </span>}\n        {(financeInvoice.account) && <Link to={`/relations/accounts/${financeInvoice.account.id}/profile`}>\n          <Button icon=\"user\" color=\"link\">\n            {financeInvoice.account.fullName}\n          </Button> \n        </Link>}\n      </Card.Footer>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTo))","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n// import { get_list_query_variables } from \"../tools\"\nimport { DELETE_INVOICE_PAYMENT, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\nimport moment from 'moment'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { get_list_query_variables } from \"../tools\"\n\n\nfunction FinanceInvoiceEditPaymentDelete({t, match, node}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [deleteInvoicePayment] = useMutation(DELETE_INVOICE_PAYMENT)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.invoices.payment_delete_confirm_msg\"),\n            msgDescription: <p>{ moment(node.date).format(dateFormat) } - {node.amountDisplay}</p>,\n            msgSuccess: t('finance.invoices.payment_deleted'),\n            deleteFunction: deleteInvoicePayment,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditPaymentDelete))\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Icon, \n  Table\n} from \"tabler-react\"\n\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoiceEditPaymentDelete from \"./FinanceInvoiceEditPaymentDelete\"\n\n\nfunction FinanceInvoiceEditPayments ({ t, history, match, refetchInvoice, inputData }) {\n  const id = match.params.id\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const paymentAddUrl = `/finance/invoices/${id}/payment/add`\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.payments')}</Card.Title>\n        <Card.Options>\n          {/* <FinanceInvoiceItemAdd /> */}\n          <Link to={paymentAddUrl}>\n            <Button className=\"btn-sm\" color=\"primary\">\n              <Icon prefix=\"fe\" name=\"plus\" /> {t('finance.invoice.payments.add')} \n            </Button>\n          </Link>\n        </Card.Options>\n      </Card.Header>\n      {(!inputData.financeInvoice.payments.edges.length) ?\n        <Card.Body>\n          <p>{t('finance.invoice.payments.empty_list')}</p>\n        </Card.Body> :\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.amount\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.payment_method\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.note\")}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {inputData.financeInvoice.payments.edges.map(({ node }) => (\n              <Table.Row key={\"payment_\" + node.id}>\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) }\n                </Table.Col>\n                <Table.Col>\n                  { node.amountDisplay }\n                </Table.Col>\n                <Table.Col>\n                  { (node.financePaymentMethod) ? node.financePaymentMethod.name : \"\" }\n                  { (node.onlinePaymentId) ? <div><small className=\"text-muted\">{node.onlinePaymentId}</small></div> : \"\" }\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.note) }}></div>\n                </Table.Col>\n                <Table.Col>\n                  <span className=\"pull-right\">\n                    <Link to={ \"/finance/invoices/\" + inputData.financeInvoice.id + \"/payment/edit/\" + node.id } \n                          className='btn btn-secondary btn-sm mr-2'\n                    >\n                      {t('general.edit')}\n                    </Link>\n                    <FinanceInvoiceEditPaymentDelete node={node} />\n                  </span>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      }\n    </Card>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditPayments))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport { toast } from 'react-toastify'\nimport {\n  Alert,\n  Dropdown,\n  Page,\n  Grid,\n  Icon,\n  Button,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport { GET_INVOICE_QUERY, CANCEL_AND_CREATE_CREDIT_INVOICE } from '../queries'\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport FinanceInvoiceEditBase from \"./FinanceInvoiceEditBase\"\nimport FinanceInvoiceEditItems from \"./FinanceInvoiceEditItems\"\nimport FinanceInvoiceEditAdditional from \"./FinanceInvoiceEditAdditional\"\nimport FinanceInvoiceEditBalance from \"./FinanceInvoiceEditBalance\"\nimport FinanceInvoiceEditOptions from \"./FinanceInvoiceEditOptions\"\nimport FinanceInvoiceEditOrganization from \"./FinanceInvoiceEditOrganization\"\nimport FinanceInvoiceEditSummary from \"./FinanceInvoiceEditSummary\"\nimport FinanceInvoiceEditTo from \"./FinanceInvoiceEditTo\"\nimport FinanceInvoiceEditPayments from \"./FinanceInvoiceEditPayments\"\n\nfunction FinanceInvoiceEdit({t, match, history, location}) {\n  const id = match.params.id\n  const { loading, error, data, refetch } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: id\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [cancelAndCreateCreditInvoice] = useMutation(CANCEL_AND_CREATE_CREDIT_INVOICE)\n\n  // Set back location for account profile\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n  \n  // Loading\n  if (loading) return <FinanceInvoiceEditBase>{t('general.loading_with_dots')}</FinanceInvoiceEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceInvoiceEditBase>{t('general.error_sad_smiley')}</FinanceInvoiceEditBase>\n  }\n\n  // Fetch back location from localStorage, if no value set, default back to /finance/invoices\n  let returnUrl = localStorage.getItem(CSLS.FINANCE_INVOICES_EDIT_RETURN)\n  if (!returnUrl) {\n    returnUrl = \"/finance/invoices\"\n  }\n  const export_url = \"/d/export/invoice/pdf/\" + id\n  const payment_add_url = `/finance/invoices/${id}/payment/add`\n  const shopAccountInvoiceUrl = `${window.location.protocol}//${window.location.host}/#/shop/account/invoice/${id}`\n\n  return (\n    <FinanceInvoiceEditBase>\n      <Page.Header title={t('finance.invoice.title') + ' #' + data.financeInvoice.invoiceNumber}>\n        <div className=\"page-options d-flex\">\n          {/* Back */}\n          <Link to={returnUrl} \n                className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n          </Link>\n          {/* Add payment */}\n          <Link to={payment_add_url} \n              className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"dollar-sign\" /> {t('finance.invoice.payments.add')} \n          </Link>\n          {/* Export as PDF */}\n          <Button\n            color=\"secondary\"\n            icon=\"printer\"\n            className=\"mr-2\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url\n            )}\n          >\n            {t('general.pdf')} \n          </Button>\n          {/* Tools */}\n          <Dropdown\n            className=\"\"\n            type=\"button\"\n            toggle\n            icon=\"tool\"\n            color=\"secondary\"\n            triggerContent={t(\"general.tools\")}\n            items={[\n              <HasPermissionWrapper permission=\"change\" resource=\"financeinvoice\">\n                <Dropdown.Item\n                  key={v4()}\n                  icon=\"slash\"\n                  onClick={() => {\n                    cancelAndCreateCreditInvoice({ variables: {\n                      input: {\n                        id: id,\n                      }\n                    }, refetchQueries: []\n                    })\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        const creditInvoiceId = data.cancelAndCreateCreditFinanceInvoice.financeInvoice.id\n                        history.push(`/finance/invoices/edit/${creditInvoiceId}`)\n                        toast.success((t('finance.invoice.now_editing_credit_invoice')), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                      })\n                  }}>\n                    {t('finance.invoice.cancel_and_create_credit_invoice')}\n                </Dropdown.Item>\n              </HasPermissionWrapper>\n            ]}>\n          </Dropdown>\n        </div>\n      </Page.Header>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <FinanceInvoiceEditSummary \n            initialData={data}\n          />\n        <Alert type=\"primary\">\n          <div className=\"mb-1\"><b>{t(\"finance.invoice.account_profile_link\")}</b></div>\n          {shopAccountInvoiceUrl}<br />\n          <div className=\"mt-1\"><small><Icon name=\"info\" /> {t(\"finance.invoice.account_profile_link_explanation\")}</small></div>\n        </Alert>\n          <Grid.Row>\n            <Grid.Col md={6} ml={0}>\n              <FinanceInvoiceEditOrganization organization={data.organization} />\n            </Grid.Col>\n            <Grid.Col md={6} ml={0}>\n              <FinanceInvoiceEditTo financeInvoice={data.financeInvoice} />\n            </Grid.Col>\n          </Grid.Row>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          <FinanceInvoiceEditBalance financeInvoice={data.financeInvoice} />\n          <FinanceInvoiceEditOptions initialData={data} />\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <FinanceInvoiceEditItems inputData={data} refetchInvoice={refetch} />\n          <FinanceInvoiceEditAdditional initialData={data} />\n          <FinanceInvoiceEditPayments inputData={data} />\n        </Grid.Col>\n      </Grid.Row>\n    </FinanceInvoiceEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceInvoiceEditToBase({t, match, history, children, invoiceNumber}) {\n  const pageTitle = t('finance.invoice.edit_to.title') + ' #' + invoiceNumber && invoiceNumber\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={pageTitle} />\n            <Grid.Row md={12}>\n              {children}\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditToBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport {\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../ui/ButtonFormSubmit'\n\n\nconst FinanceInvoiceEditToForm = ({ t, history, isSubmitting, errors, values, setFieldValue, setFieldTouched, inputData, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n          <Field \n            className=\"custom-switch-input\"\n            type=\"checkbox\" \n            name=\"customer\" \n            checked={values.customTo} \n            onChange={ (event) => {\n              setFieldTouched('customTo', true, true)\n              setFieldValue('customTo', !(values.customTo))\n            }}\n          />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('finance.invoices.edit_to.custom_to')}</span>\n        </Form.Label>\n        <ErrorMessage name=\"customTo\" component=\"div\" />   \n      </Form.Group>  \n      { !(values.customTo)  ?\n          <Form.Group label={t('relations.accounts.invoice_to_business')}>\n            <Field component=\"select\" \n                  name=\"business\" \n                  className={(errors.business) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              {(inputData.financeInvoice.account) &&\n                <option value=\"\" key={v4()}>{t('relations.accounts.invoice_to_account')}: {inputData.financeInvoice.account.fullName}</option>\n              }\n              {inputData.businesses.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"business\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      : \n        <>\n          <Form.Group label={t(\"finance.invoices.relation_company\")}>\n            <Field type=\"text\" \n                    name=\"relationCompany\" \n                    className={(errors.relationCompany) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\"     \n            />\n            <ErrorMessage name=\"relationCompany\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_company_registration\")}>\n                <Field type=\"text\" \n                        name=\"relationCompanyRegistration\" \n                        className={(errors.relationCompanyRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCompanyRegistration\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_company_tax_registration\")}>\n                <Field type=\"text\" \n                        name=\"relationCompanyTaxRegistration\" \n                        className={(errors.relationCompanyTaxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCompanyTaxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Form.Group label={t(\"finance.invoices.relation_contact_name\")}>\n            <Field type=\"text\" \n                    name=\"relationContactName\" \n                    className={(errors.relationContactName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n            />\n            <ErrorMessage name=\"relationContactName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_address\")}>\n                <Field type=\"text\" \n                        name=\"relationAddress\" \n                        className={(errors.relationAddress) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationAddress\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_postcode\")}>\n                <Field type=\"text\" \n                        name=\"relationPostcode\" \n                        className={(errors.relationPostcode) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationPostcode\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_city\")}>\n                <Field type=\"text\" \n                        name=\"relationCity\" \n                        className={(errors.relationCity) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCity\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_country\")}>\n                <Field type=\"text\" \n                        name=\"relationCountry\" \n                        className={(errors.relationCountry) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCountry\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </>\n      }\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit disabled={isSubmitting} />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditToForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditToBase from \"./FinanceInvoiceEditToBase\"\nimport FinanceInvoiceEditToForm from \"./FinanceInvoiceEditToForm\"\n\n\nfunction FinanceInvoiceEditTo({ t, history, match }) {\n  const id = match.params.id\n  const returnUrl = `/finance/invoices/edit/${id}`\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: id\n    },\n  })\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  // Loading\n  if (loading) return <FinanceInvoiceEditToBase>{t('general.loading_with_dots')}</FinanceInvoiceEditToBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceInvoiceEditToBase>{t('general.error_sad_smiley')}</FinanceInvoiceEditToBase>\n  }\n\n  console.log(data)\n    \n  let initialBusiness = \"\"\n  if (data.financeInvoice.business) {\n    initialBusiness = data.financeInvoice.business.id\n  }\n\n  return (\n    <FinanceInvoiceEditToBase invoiceNumber={data.financeInvoice.invoiceNumber} >\n      <Card title={t('general.to')} statusColor=\"blue\">\n        <Formik\n          initialValues={{ \n            customTo: data.financeInvoice.customTo,\n            relationCompany: data.financeInvoice.relationCompany, \n            relationCompanyRegistration: data.financeInvoice.relationCompanyRegistration, \n            relationCompanyTaxRegistration: data.financeInvoice.relationCompanyTaxRegistration, \n            relationContactName: data.financeInvoice.relationContactName, \n            relationAddress: data.financeInvoice.relationAddress, \n            relationPostcode: data.financeInvoice.relationPostcode, \n            relationCity: data.financeInvoice.relationCity, \n            relationCountry: data.financeInvoice.relationCountry, \n            business: initialBusiness\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                customTo: values.customTo,\n                relationCompany: values.relationCompany,\n                relationCompanyRegistration: values.relationCompanyRegistration,\n                relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n                relationContactName: values.relationContactName,\n                relationAddress: values.relationAddress,\n                relationPostcode: values.relationPostcode,\n                relationCity: values.relationCity,\n                relationCountry: values.relationCountry,\n                business: values.business\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICE_QUERY, variables: {id:id}},\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('finance.invoice.toast_edit_to_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditToForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              inputData={data}\n              returnUrl={returnUrl}\n            >\n            </FinanceInvoiceEditToForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceEditToBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTo))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nconst BadgeBoolean = ({ t, value }) => (\n    (value) ?\n        <Badge color=\"success\">{t('general.yes')}</Badge> :\n        <Badge color=\"danger\">{t('general.no')}</Badge> \n)\n\nexport default withTranslation()(BadgeBoolean)","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICE_GROUPS_QUERY = gql`\n  query FinanceInvoiceGroupsQuery($archived: Boolean!) {\n    financeInvoiceGroups(archived: $archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          name\n          nextId\n          dueAfterDays\n          prefix\n          prefixYear\n          autoResetPrefixYear\n          terms\n          footer\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INVOICE_GROUP_QUERY = gql`\n  query FinanceInvoiceGroup($id: ID!) {\n    financeInvoiceGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_INVOICE_GROUP = gql`\nmutation UpdateFinanceInvoiceGroup($input: UpdateFinanceInvoiceGroupInput!) {\n  updateFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ADD_INVOICE_GROUP = gql`\nmutation CreateFinanceInvoiceGroup($input:CreateFinanceInvoiceGroupInput!) {\n  createFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup{\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_INVOICE_GROUP = gql`\nmutation ArchiveFinanceInvoiceGroup($input: ArchiveFinanceInvoiceGroupInput!) {\n  archiveFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction FinanceInvoiceGroupsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showEditBack) ? \n                // Back for add or edit component\n                <ButtonBack returnUrl=\"/finance/invoices/groups\" className=\"mr-2\" />\n              :\n                // Back for list\n                <ButtonBack returnUrl=\"/finance/invoices\" className=\"mr-2\" />\n              }\n              <Link to=\"/finance/invoices/groups/defaults\" \n                    className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"settings\" /> {t('finance.invoice_groups_defaults.title')}\n              </Link> \n              <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeinvoicegroup\">\n                <ButtonAdd addUrl=\"/finance/invoices/groups/add\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_INVOICE_GROUPS_QUERY, ARCHIVE_INVOICE_GROUP } from \"./queries\"\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase'\n\n\nfunction FinanceInvoiceGroups({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.invoice_groups.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_INVOICE_GROUPS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveInvoiceGroup ] = useMutation(ARCHIVE_INVOICE_GROUP)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.invoice_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  const invoiceGroups = data.financeInvoiceGroups\n\n  return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups.title')}\n                   headerContent={headerOptions}\n                   pageInfo={invoiceGroups.pageInfo}\n                   hasCardBody={false}\n                   onLoadMore={() => {\n                   fetchMore({\n                     variables: {\n                       after: invoiceGroups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                        const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoiceGroups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoiceGroups: {\n                                __typename: previousResult.financeInvoiceGroups.__typename,\n                                edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups.next_id')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups.due_after_days')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.prefix')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader />\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {invoiceGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.nextId}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dueAfterDays}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.prefix} \n                    {(node.prefixYear) ? <span>[{t('general.year')}]<br /></span>: ''}\n                    {(node.autoResetPrefixYear) ? <Text.Small color=\"gray\">\n                      {t('finance.invoice_groups.auto_reset_prefix_year')}\n                    </Text.Small>: ''}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/invoices/groups/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveInvoiceGroup({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INVOICE_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    dueAfterDays: Yup.number()\n      .moreThan(0, t('yup.field_above_0'))\n      .required(t('yup.field_required')),\n    nextId: Yup.number(),\n    prefix: Yup.string(),\n    prefixYear: Yup.boolean(),\n    autoResetPrefixYear: Yup.boolean(),\n    terms: Yup.string(),\n    footer: Yup.string(),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n\nconst FinanceInvoiceGroupForm = ({ t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, returnUrl, edit=false }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.name')}>\n        <Field type=\"text\" \n                name=\"name\" \n                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        {(edit) ?\n        <Grid.Col>\n          <Form.Group label={t('finance.invoice_groups.next_id')}>\n            <Field type=\"text\" \n                    name=\"nextId\" \n                    className={(errors.nextId) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"nextId\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col> : \"\"}\n        <Grid.Col>\n          <Form.Group label={t('finance.invoice_groups.due_after_days')}>\n            <Field type=\"text\" \n                    name=\"dueAfterDays\" \n                    className={(errors.dueAfterDays) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"dueAfterDays\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.prefix')}>\n        <Field type=\"text\" \n                name=\"prefix\" \n                className={(errors.prefix) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"prefix\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"prefixYear\" \n                checked={values.prefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"prefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoResetPrefixYear\" \n                checked={values.autoResetPrefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.auto_reset_prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoResetPrefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.terms')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"terms\", true, true)\n            setFieldValue(\"terms\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"footer\", true, true)\n            setFieldValue(\"footer\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.code')}>\n        <Field type=\"text\" \n                name=\"code\" \n                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button \n            type=\"button\" \n            color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICE_GROUPS_QUERY, ADD_INVOICE_GROUP } from './queries'\nimport { INVOICE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase';\nimport FinanceInvoiceGroupForm from './FinanceInvoiceGroupForm'\n\n\nfunction FinanceInvoiceGroupAdd({ t, history }) {\n  const returnUrl = \"/finance/invoices/groups\"\n  const [addInvoiceGroup] = useMutation(ADD_INVOICE_GROUP)\n\n  return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <Card title={t('finance.invoice_groups.title_add')}>\n        <Formik\n          initialValues={{ \n            name: '', \n            displayPublic: true,\n            dueAfterDays: 30,\n            prefix: 'INV',\n            prefixYear: true,\n            autoResetPrefixYear: true,\n            terms: '',\n            footer: '',\n            code: '' \n          }}\n          validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addInvoiceGroup({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  dueAfterDays: values.dueAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.invoice_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldValue, setFieldTouched }) => (\n            <FinanceInvoiceGroupForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICE_GROUPS_QUERY, GET_INVOICE_GROUP_QUERY, UPDATE_INVOICE_GROUP } from './queries'\nimport { INVOICE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceInvoiceGroupForm from './FinanceInvoiceGroupForm'\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase';\n\n\nfunction FinanceInvoiceGroupEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/invoices/groups\"\n  const cardTitle = t('finance.invoice_groups.title_edit')\n  const { loading, error, data } = useQuery(GET_INVOICE_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateInvoiceGroup ] = useMutation(UPDATE_INVOICE_GROUP)\n\n  if (loading) return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.invoice_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n                    \n  const initialData = data.financeInvoiceGroup;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic,\n            dueAfterDays: initialData.dueAfterDays,\n            nextId: initialData.nextId,\n            prefix: initialData.prefix,\n            prefixYear: initialData.prefixYear,\n            autoResetPrefixYear: initialData.autoResetPrefixYear,\n            terms: initialData.terms,\n            footer: initialData.footer,\n            code: initialData.code\n          }}\n          validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateInvoiceGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  nextId: values.nextId,\n                  dueAfterDays: values.dueAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.invoice_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              edit={true}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction FinanceInvoiceGroupsDefaultsBase({ t, history, children }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl=\"/finance/invoices/groups\" />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsDefaultsBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceGroupDefaultForm({ t, history, inputData, isSubmitting, setFieldTouched, setFieldValue, errors, values, submitForm }) {\n  return (\n    <FoForm>\n      <Dimmer active={isSubmitting} loader={isSubmitting} >\n        <Form.Group>\n          <Field component=\"select\" \n                name=\"financeInvoiceGroup\" \n                className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                onChange={(e) => {\n                  setFieldValue('financeInvoiceGroup', e.target.value)\n                  setFieldTouched('financeInvoiceGroup', true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                autoComplete=\"off\">\n            {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>  \n      </Dimmer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupDefaultForm))","import * as Yup from 'yup'\n\nexport const INVOICE_GROUP_DEFAULT_SCHEMA = Yup.object().shape({\n    financeInvoiceGroup: Yup.string(),\n  })\n","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICE_GROUPS_DEFAULTS_QUERY = gql`\nquery FinanceInvoiceGroupDefaults($archived: Boolean!) {\n  financeInvoiceGroupDefaults(first: 100) {\n    edges {\n      node {\n        id\n        itemType\n        financeInvoiceGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n  financeInvoiceGroups(archived: $archived) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        archived\n        displayPublic\n        name\n        nextId\n        dueAfterDays\n        prefix\n        prefixYear\n        autoResetPrefixYear\n        terms\n        footer\n        code\n      }\n    }\n  }\n}\n`\n\nexport const GET_INVOICE_GROUP_QUERY = gql`\n  query FinanceInvoiceGroup($id: ID!) {\n    financeInvoiceGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_INVOICE_GROUP_DEFAULT = gql`\n  mutation UpdateFinanceInvoiceGroupDefault($input: UpdateFinanceInvoiceGroupDefaultInput!) {\n    updateFinanceInvoiceGroupDefault(input: $input) {\n      financeInvoiceGroupDefault {\n        id\n        itemType\n        financeInvoiceGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { Formik } from 'formik'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport FinanceInvoiceGroupDefaultsBase from './FinanceInvoiceGroupDefaultsBase'\nimport FinanceInvoiceGroupDefaultForm from './FinanceInvoiceGroupDefaultForm'\n\nimport { INVOICE_GROUP_DEFAULT_SCHEMA } from \"./yupSchema\"\nimport { GET_INVOICE_GROUPS_DEFAULTS_QUERY, UPDATE_INVOICE_GROUP_DEFAULT } from \"./queries\"\n\n\nconst fetch_default_type_name = (t, itemType) => {\n  switch(itemType) {\n    case \"MEMBERSHIPS\":\n      return t('finance.invoice_groups_defaults.MEMBERSHIPS')\n    case \"SUBSCRIPTIONS\":\n      return t('finance.invoice_groups_defaults.SUBSCRIPTIONS')\n    case \"CLASSPASSES\":\n      return t('finance.invoice_groups_defaults.CLASSPASSES')\n    case \"DROPINCLASSES\":\n      return t('finance.invoice_groups_defaults.DROPINCLASSES')\n    case \"TRIALCLASSES\":\n      return t('finance.invoice_groups_defaults.TRIALCLASSES')\n    case \"EVENT_TICKETS\":\n      return t('finance.invoice_groups_defaults.EVENT_TICKETS')\n    case \"SHOP_SALES\":\n      return t('finance.invoice_groups_defaults.SHOP_SALES')\n    case \"INSTRUCTOR_PAYMENTS\":\n      return t('finance.invoice_groups_defaults.INSTRUCTOR_PAYMENTS')\n    case \"EMPLOYEE_EXPENSES\":\n      return t('finance.invoice_groups_defaults.EMPLOYEE_EXPENSES')\n    default:\n      return t('finance.invoice_groups_defaults.TYPE_NOT_FOUND')\n  }\n}\n\n\nfunction FinanceInvoiceGroupsDefaults({ t, history }) {\n  const { loading, error, data, fetchMore } = useQuery(GET_INVOICE_GROUPS_DEFAULTS_QUERY, {\n    variables: { archived: false }\n  })\n\n  const [updateDefaultGroup] = useMutation(UPDATE_INVOICE_GROUP_DEFAULT)\n\n  // Loading\n  if (loading) return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <p>{t('finance.invoice_groups_defaults.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n\n  const financeInvoiceGroupDefaults = data.financeInvoiceGroupDefaults\n  \n  // Empty list\n  if (!financeInvoiceGroupDefaults.edges.length) { return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <p>\n          {t('finance.invoice_groups_defaults.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )} \n\n  return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}\n                  pageInfo={financeInvoiceGroupDefaults.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: financeInvoiceGroupDefaults.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                        const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoice_groups_defaults at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoiceGroups: {\n                                __typename: previousResult.financeInvoiceGroups.__typename,\n                                edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('finance.invoice_groups_defaults.item_type')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups_defaults.invoice_group')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeInvoiceGroupDefaults.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    { fetch_default_type_name(t, node.itemType) }\n                  </Table.Col>\n                  <Table.Col>\n                    <Formik\n                      initialValues={{ \n                        financeInvoiceGroup:node.financeInvoiceGroup.id\n                      }}\n                      validationSchema={INVOICE_GROUP_DEFAULT_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log('submit values:')\n                          console.log(values)\n\n                          updateDefaultGroup({ variables: {\n                            input: {\n                              id: node.id,\n                              financeInvoiceGroup: values.financeInvoiceGroup\n                            }\n                          }, refetchQueries: [\n                              // {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data)\n                              toast.success((t('finance.invoice_groups.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                        <FinanceInvoiceGroupDefaultForm\n                          inputData={data}\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          values={values}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          submitForm={submitForm}\n                        />\n                      )}\n                    </Formik>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsDefaults))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INVOICE_PAYMENT_QUERY = gql`\n  query FinanceInvoicePayment($id: ID!) {\n    financeInvoicePayment(id:$id) {\n      id\n      date\n      amount\n      financePaymentMethod {\n        id\n        name\n      }\n      note\n      onlinePaymentId\n    }\n  }\n`\n\nexport const ADD_FINANCE_INVOICE_PAYMENT = gql`\nmutation CreateFinanceInvoicePayment($input:CreateFinanceInvoicePaymentInput!) {\n  createFinanceInvoicePayment(input:$input) {\n    financeInvoicePayment {\n      id\n    } \n  }\n}\n`\n\nexport const UPDATE_FINANCE_INVOICE_PAYMENT = gql`\n  mutation UpdateFinanceInvoicePayment($input:UpdateFinanceInvoicePaymentInput!) {\n    updateFinanceInvoicePayment(input:$input) {\n      financeInvoicePayment {\n        id\n      } \n    }\n  }\n`\n\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport {\n  Page,\n  Grid,\n  Icon,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport { GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceEditBalance from \"../edit/FinanceInvoiceEditBalance\"\n\n\nfunction FinanceInvoicePaymentBase({ t, history, match, children, form_type=\"create\" }) {\n  const invoiceId = match.params.invoice_id\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: queryLoading, error: queryError, data, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n\n  if (queryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (queryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(queryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const invoice_number = inputData.financeInvoice.invoiceNumber\n\n  let title\n  if ( form_type === \"create\" ) {\n    title = t('finance.invoice.payments.add')\n  } else {\n    title = t('finance.invoice.payments.edit')\n  }\n\n  title = title + \" #\" + invoice_number\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={ title }>\n            <div className=\"page-options d-flex\">\n              {/* Back */}\n              <Link to={returnUrl} \n                    className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={8}>\n              {/* Form can go here */}\n              {children} \n            </Grid.Col>\n            <Grid.Col md={4}>\n            <Card statusColor=\"blue\">\n              <Card.Header>\n                <Card.Title>{t('general.info')}</Card.Title>\n              </Card.Header>\n              <Card.Body padding={0}>\n                <h4> #{ invoice_number } </h4>\n                { (inputData.financeInvoice.relationCompany) && <span>{inputData.financeInvoice.relationCompany}<br /></span> } \n                { (inputData.financeInvoice.relationName) && <span>{inputData.financeInvoice.relationName}<br /></span> } \n                { inputData.financeInvoice.summary }\n              </Card.Body>\n            </Card>\n            <FinanceInvoiceEditBalance financeInvoice={inputData.financeInvoice} />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nconst FinanceInvoicePaymentForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.details')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                selected={values.date}\n                onChange={(date) => setFieldValue(\"date\", date)}\n                onBlur={() => setFieldTouched(\"date\", true)}\n              />\n              <ErrorMessage name=\"date\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n              <Field type=\"text\" \n                      name=\"amount\" \n                      className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.payment_method')}>\n              <Field component=\"select\" \n                      name=\"financePaymentMethod\" \n                      className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in finance payment form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('')}</option>\n                {inputData.financePaymentMethods.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.note')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"note\"\n                initialValue={values.note}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"note\", e.target.getContent())\n                  setFieldTouched(\"note\", true)\n                }}\n              />\n            <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"../tools\"\n\nimport { ADD_FINANCE_INVOICE_PAYMENT } from \"./queries\"\nimport { GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport FinanceInvoicePaymentBase from \"./FinanceInvoicePaymentBase\"\nimport FinanceInvoicePaymentForm from \"./FinanceInvoicePaymentForm\"\n\n\nfunction FinanceInvoicePaymentAdd({ t, history, match }) {\n  const invoiceId = match.params.invoice_id\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: queryLoading, error: queryError, data, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n  const [addInvoicePayment] = useMutation(ADD_FINANCE_INVOICE_PAYMENT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (queryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (queryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(queryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n\n  return (\n    <FinanceInvoicePaymentBase form_type={\"create\"}>\n      <Formik\n        initialValues={{ \n          date: new Date() ,\n          amount: inputData.financeInvoice.balance,\n          financePaymentMethod: \"\",\n          note: \"\"\n        }}\n        // validationSchema={FINANCE_INVOICE_PAYMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            addInvoicePayment({ variables: {\n              input: {\n                financeInvoice: invoiceId,\n                date: dateToLocalISO(values.date),\n                amount: values.amount,\n                financePaymentMethod: values.financePaymentMethod,\n                note: values.note\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: { id: invoiceId }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.invoice.payments.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <FinanceInvoicePaymentForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </FinanceInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"../tools\"\n\nimport { GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport { GET_INVOICE_PAYMENT_QUERY, UPDATE_FINANCE_INVOICE_PAYMENT } from './queries'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport FinanceInvoicePaymentBase from \"./FinanceInvoicePaymentBase\"\nimport FinanceInvoicePaymentForm from \"./FinanceInvoicePaymentForm\"\n\n\n\nfunction FinanceInvoicePaymentEdit({ t, history, match }) {\n  const invoiceId = match.params.invoice_id\n  const id = match.params.id\n  console.log(invoiceId)\n  console.log(id)\n\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: invoiceQueryLoading, error: invoiceQueryError, data: invoiceData, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n  const { loading: paymentQueryLoading, error: paymentQueryError, data: paymentData, } = useQuery(GET_INVOICE_PAYMENT_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [updateInvoicePayment] = useMutation(UPDATE_FINANCE_INVOICE_PAYMENT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (invoiceQueryLoading || paymentQueryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (invoiceQueryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(invoiceQueryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n  // Error\n  if (paymentQueryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(paymentQueryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(invoiceData)\n  console.log(paymentData)\n  const inputData = invoiceData\n  const initialValues = paymentData.financeInvoicePayment\n\n  let initialPaymentMethod\n  if (initialValues.financePaymentMethod) {\n    initialPaymentMethod = initialValues.financePaymentMethod.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDate = null\n  if (initialValues.date) {\n    initialDate = new Date(initialValues.date)\n  }\n\n  return (\n    <FinanceInvoicePaymentBase form_type={\"update\"}>\n      <Formik\n        initialValues={{ \n          date: initialDate,\n          amount: initialValues.amount,\n          financePaymentMethod: initialPaymentMethod,\n          note: initialValues.note\n        }}\n        // validationSchema={FINANCE_INVOICE_PAYMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            updateInvoicePayment({ variables: {\n              input: {\n                id: id,\n                date: dateToLocalISO(values.date),\n                amount: values.amount,\n                financePaymentMethod: values.financePaymentMethod,\n                note: values.note\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: { id: invoiceId }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.invoice.payments.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n        }\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <FinanceInvoicePaymentForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </FinanceInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_ORDERS_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceOrdersFilter = ({ t, history, data, refetch }) => (\n  <div>\n    {/* Status */}\n    <select \n      className={selectClass}\n      value={getDefaultValue(CSLS.FINANCE_ORDERS_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_ORDERS_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t('finance.orders.statuses.all')}</option>\n      <option value=\"RECEIVED\" key={v4()}>{t('finance.orders.statuses.RECEIVED')}</option>\n      <option value=\"AWAITING_PAYMENT\" key={v4()}>{t('finance.orders.statuses.AWAITING_PAYMENT')}</option>\n      <option value=\"PAID\" key={v4()}>{t('finance.orders.statuses.PAID')}</option>\n      <option value=\"DELIVERED\" key={v4()}>{t('finance.orders.statuses.DELIVERED')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.orders.statuses.CANCELLED')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceOrdersFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport FinanceOrdersFilter from \"./FinanceOrdersFilter\"\n\n\nconst FinanceOrdersBase = ({ t, history, children, refetch }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"finance.title\")}>\n          <div className=\"page-options d-flex\">\n            <FinanceOrdersFilter refetch={refetch}/>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n)\n\nexport default withTranslation()(withRouter(FinanceOrdersBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceOrderStatus extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance order status props:\")\n    console.log(props)\n  }\n\n  // ('RECEIVED', _(\"Received\")),\n  // ('AWAITING_PAYMENT', _(\"Awaiting payment\")),\n  // ('PAID', _(\"Paid\")),\n  // ('DELIVERED', _(\"Delivered\")),\n  // ('CANCELLED', _(\"Cancelled\")),\n\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"RECEIVED\":\n        return <Badge color=\"secondary\">{t('finance.orders.statuses.RECEIVED')}</Badge>\n      case \"AWAITING_PAYMENT\":\n        return <Badge color=\"primary\">{t('finance.orders.statuses.AWAITING_PAYMENT')}</Badge>\n      case \"PAID\":\n        return <Badge color=\"success\">{t('finance.orders.statuses.PAID')}</Badge>\n      case \"DELIVERED\":\n        return <Badge color=\"success\">{t('finance.orders.statuses.DELIVERED')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.orders.statuses.CANCELLED')}</Badge>\n      default:\n        return t('finance.orders.statuses.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_ORDERS_QUERY = gql`\n  query FinanceOrders($after: String, $before: String, $status: CostasiellaFinanceOrderStatusChoices) {\n    financeOrders(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          financeInvoice {\n            id\n            invoiceNumber\n          }\n          account {\n            id\n            fullName\n          }\n          message\n          status\n          total\n          totalDisplay\n          createdAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      orderNumber\n      financeInvoice {\n        id\n        invoiceNumber\n      }\n      account {\n        id\n        fullName\n      }\n      message\n      status\n      total\n      totalDisplay\n      createdAt\n      items {\n        edges {\n          node {\n            id\n            productName\n          }\n        }\n      }\n      \n    }\n  }\n`\n\n\nexport const UPDATE_FINANCE_ORDER = gql`\n  mutation UpdateFinanceOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_ORDER = gql`\n  mutation DeleteFinanceOrder($input: DeleteFinanceOrderInput!) {\n    deleteFinanceOrder(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\nimport { DELETE_FINANCE_ORDER, GET_ORDERS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction FinanceOrderDelete({t, match, node}) {\n  const [deleteOrder] = useMutation(DELETE_FINANCE_ORDER)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.orders.delete_confirm_msg\"),\n            msgDescription: <p>{t(\"general.order\")} # { node.orderNumber }</p>,\n            msgSuccess: t('finance.orders.deleted'),\n            deleteFunction: deleteOrder,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_ORDERS_QUERY, variables: get_list_query_variables() },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Table, \n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport CSLS from '../../../tools/cs_local_storage'\nimport { get_list_query_variables } from \"./tools\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceOrdersBase from './FinanceOrdersBase'\nimport FinanceOrderStatus from \"./FinanceOrderStatus\"\nimport FinanceOrderDelete from \"./FinanceOrderDelete\"\n\nimport { GET_ORDERS_QUERY } from \"./queries\"\nimport moment from 'moment'\n\n\n\nfunction FinanceOrders({t, match, location, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormat = appSettings.dateTimeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_ORDERS_QUERY, {\n    variables: {get_list_query_variables},\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <FinanceOrdersBase title={title}>\n      {t(\"general.loading_with_dots\")}\n    </FinanceOrdersBase>\n  )\n\n  if (error) return (\n    <FinanceOrdersBase title={title}>\n      {t(\"finance.orders.error_loading\")}\n    </FinanceOrdersBase>\n  )\n\n  const orders = data.financeOrders\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  // Empty list\n  if (!orders.edges.length) { return (\n    <FinanceOrdersBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.orders.title')}>\n        <p>\n          {t('finance.orders.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceOrdersBase>\n  )}\n\n  return (\n    <FinanceOrdersBase title={title} refetch={refetch}>\n      <ContentCard \n        cardTitle={t('finance.orders.title')} \n        pageInfo={orders.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: orders.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeOrders.edges\n              const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeOrders: {\n                      __typename: previousResult.financeOrders.__typename,\n                      edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              {/* <Table.ColHeader>{t('general.status')}</Table.ColHeader> */}\n              <Table.ColHeader>{t('general.order')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.relation')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {orders.edges.map(({ node }) => (        \n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      # {node.orderNumber} <br />\n                    </Link>\n                    <FinanceOrderStatus status={node.status} />\n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    \n                  </Table.Col> */}\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateTimeFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.account && node.account.fullName}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.financeInvoice) && \n                      <Link to={`/finance/invoices/edit/${node.financeInvoice.id}`}>\n                        {node.financeInvoice.invoiceNumber}\n                      </Link>}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <FinanceOrderDelete node={node}/>\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      <Button className='btn-sm float-right' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceOrdersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrders))","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nexport function get_list_query_variables(batchType) {\n  let queryVars = {\n    batchType: batchType.toUpperCase()\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function get_add_options_collection(t, batchType) {\n  return (\n    <List unstyled>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/invoices`}>\n          <b>{t(\"finance.payment_batch_collections.invoices_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_collections.invoices_batch_description\")}</p>\n      </List.Item>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/category`}>\n          <b>{t(\"finance.payment_batch_collections.category_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_collections.category_batch_description\")}</p>\n      </List.Item>\n    </List>\n  )\n}\n\n\nexport function get_add_options_payment(t, batchType) {\n  return (\n    <List unstyled>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/category`}>\n          <b>{t(\"finance.payment_batch_payments.category_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_payments.category_batch_description\")}</p>\n      </List.Item>\n    </List>\n  )\n}","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeFinancePaymentBatchStatus({ t, status }) {\n  switch (status) {\n    case \"SENT_TO_BANK\":\n      return <Badge color=\"success\">{t('finance.payment_batches.status.SENT_TO_BANK')}</Badge> \n    case \"APPROVED\":\n      return <Badge color=\"success\">{t('finance.payment_batches.status.APPROVED')}</Badge> \n    case \"AWAITING_APPROVAL\":\n      return <Badge color=\"primary\">{t('finance.payment_batches.status.AWAITING_APPROVAL')}</Badge> \n    case \"REJECTED\":\n      return <Badge color=\"danger\">{t('finance.payment_batches.status.REJECTED')}</Badge> \n    default:\n      return t(\"finance.payment_batches.status.invalid_type\")\n  }\n}\n\nexport default withTranslation()(BadgeFinancePaymentBatchStatus)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinancePaymentBatchesBase({t, history, match, children, showAdd=false, showBack=false, returnUrl=\"\"}) {\n  const batchType = match.params.batch_type\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentbatch\">\n                  <ButtonAdd addUrl={`/finance/paymentbatches/${batchType}/add_what`} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"financepaymentbatch\">\n                  <ButtonBack returnUrl={returnUrl} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_BATCHES_QUERY = gql`\n  query FinancePaymentBatches($after: String, $before: String, $batchType: CostasiellaFinancePaymentBatchBatchTypeChoices!) {\n    financePaymentBatches(first: 15, before: $before, after: $after, batchType: $batchType) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          status\n          financePaymentBatchCategory {\n            id\n            name\n          }\n          description\n          batchType\n          year\n          month\n          includeZeroAmounts\n          note\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_BATCH_QUERY = gql`\n  query FinancePaymentBatch($id: ID!) {\n    financePaymentBatch(id:$id) {\n      id\n      name\n      status\n      financePaymentBatchCategory {\n        id\n        name\n      }\n      description\n      batchType\n      year\n      month\n      includeZeroAmounts\n      note\n      totalDisplay\n      countItems\n      items {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            account {\n              id\n              fullName\n            }\n            financeInvoice {\n              id\n              invoiceNumber\n            }\n            accountHolder\n            accountNumber\n            accountBic\n            mandateReference\n            mandateSignatureDate\n            amount\n            amountDisplay\n            currency\n            description\n          }\n        }\n      }\n      exports {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            account {\n              id\n              fullName\n            }\n            createdAt\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES = gql`\n  query InputValues($after: String, $before: String, $batchCategoryType: CostasiellaFinancePaymentBatchCategoryBatchCategoryTypeChoices!) {\n    financePaymentBatchCategories(first: 1000, before:$before, after:$after, archived:false, batchCategoryType: $batchCategoryType) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_PAYMENT_BATCH = gql`\n  mutation CreateFinancePaymentBatch($input:CreateFinancePaymentBatchInput!) {\n    createFinancePaymentBatch(input: $input) {\n      financePaymentBatch {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_PAYMENT_BATCH = gql`\n  mutation UpdateFinancePaymentBatch($input:UpdateFinancePaymentBatchInput!) {\n    updateFinancePaymentBatch(input: $input) {\n      financePaymentBatch {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_PAYMENT_BATCH = gql`\n  mutation DeleteFinancePaymentBatch($input: DeleteFinancePaymentBatchInput!) {\n    deleteFinancePaymentBatch(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport BadgeFinancePaymentBatchStatus from \"../../ui/BadgeFinancePaymentBatchStatus\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentBatchesBase from \"./FinancePaymentBatchesBase\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { GET_PAYMENT_BATCHES_QUERY, DELETE_PAYMENT_BATCH } from \"./queries\"\n\n\nfunction FinancePaymentBatches({t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const batchType = match.params.batch_type\n\n  const { loading, error, data, fetchMore } = useQuery(GET_PAYMENT_BATCHES_QUERY, {\n    variables: get_list_query_variables(batchType),\n  })\n  const [deletePaymentBatch] = useMutation(DELETE_PAYMENT_BATCH)\n\n  let cardTitle\n  let msgEmptyList\n  if (batchType === \"collection\") {\n    cardTitle = t('finance.payment_batch_collections.title')\n    msgEmptyList = t('finance.payment_batch_collections.empty_list')\n  } else {\n    cardTitle = t('finance.payment_batch_payments.title')\n    msgEmptyList = t('finance.payment_batch_payments.empty_list')\n  }\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading')}</p>\n      </ContentCard>\n      </FinancePaymentBatchesBase>\n  )\n\n  let financePaymentBatches = data.financePaymentBatches\n  // Empty list\n  if (!financePaymentBatches.edges.length) { return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle} >\n        <p>{msgEmptyList}</p>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )}\n\n  return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={financePaymentBatches.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: financePaymentBatches.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.financePaymentBatches.edges\n            const pageInfo = fetchMoreResult.financePaymentBatches.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  financePaymentBatches: {\n                    __typename: previousResult.financePaymentBatches.__typename,\n                    edges: [ ...previousResult.financePaymentBatches.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batches.execution_date')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batches.batch_category')}</Table.ColHeader>             \n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {financePaymentBatches.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <BadgeFinancePaymentBatchStatus status={node.status} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.executionDate).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {(node.financePaymentBatchCategory) ? node.financePaymentBatchCategory.name : t(\"general.invoices\")}\n                  {(node.year) ? <div><small className=\"text-muted\">{node.year} - {node.month}</small></div> : \"\"}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/finance/paymentbatches/${batchType}/view/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.view')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"finance.payment_batches.delete_confirm_msg\"),\n                        msgDescription: <p>{node.name}</p>,\n                        msgSuccess: t('finance.payment_batches.deleted'),\n                        deleteFunction: deletePaymentBatch,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType) } \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatches))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card\n} from \"tabler-react\";\n\nimport FinancePaymentBatchesBase from \"./FinancePaymentBatchesBase\"\nimport { get_add_options_collection, get_add_options_payment } from './tools'\n\n\nfunction FinancePaymentBatchAddWhat({t, history, match }) {\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n\n  let cardTitle\n  let options\n  if (batchType === \"collection\") {\n    cardTitle = t('finance.payment_batch_collections.title_add_what')\n    options = get_add_options_collection(t, batchType)\n  } else {\n    cardTitle = t('finance.payment_batch_payments.title_add_what')\n    options = get_add_options_payment(t, batchType)\n  }\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          {options}\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchAddWhat))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinancePaymentBatchCategory extends Component {\n  render() {\n    const t = this.props.t\n    const categoryType = this.props.categoryType\n\n    switch (categoryType) {\n      case \"COLLECTION\":\n        return <Badge color=\"success\">{t('finance.payment_batch_categories.payment_batch_category_type.COLLECTION')}</Badge>\n      case \"PAYMENT\":\n        return <Badge color=\"warning\">{t('finance.payment_batch_categories.payment_batch_category_type.PAYMENT')}</Badge>\n      default:\n        return t('finance.payment_batch_categories.payment_batch_category_type.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategory))","import React, {useState} from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { useMutation } from \"@apollo/client\"\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport { UPDATE_PAYMENT_BATCH, GET_PAYMENT_BATCHES_QUERY } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction FinancePaymentBatchViewBase({t, history, match, children, status}) {\n  const batchId = match.params.id\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n  const exportUrl = `/d/export/finance_payment_batch/csv/${batchId}`\n  const [disabled, setDisabled] = useState(false)\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  let sentToBankColor = \"secondary\"\n  let approvedColor = \"secondary\"\n  let awaitingApprovalColor = \"secondary\"\n  let rejectedColor = \"secondary\"\n\n  switch (status) {\n    case \"SENT_TO_BANK\":\n      sentToBankColor = \"success\"\n      break\n    case \"APPROVED\":\n      approvedColor = \"success\"\n      break\n    case \"AWAITING_APPROVAL\":\n      awaitingApprovalColor = \"primary\"\n      break\n    case \"REJECTED\":\n      rejectedColor = \"danger\"\n      break\n    default:\n      break\n  }\n\n  function onClickStatusButton(newStatus) {\n    setDisabled(true)\n\n    updateFinancePaymentBatch({ \n      variables: { input: {id: batchId, status: newStatus} }, \n      refetchQueries: [\n        {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n    ]})\n    .then(({ data }) => {\n        console.log('got data', data);\n        toast.success((t('finance.payment_batches.toast_edit_status_success')), {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        if (status !== \"SENT_TO_BANK\") {\n          console.log(status)\n          setDisabled(false)\n        }\n      }).catch((error) => {\n        toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        console.log('there was an error sending the query', error)\n        if (status !== \"SENT_TO_BANK\") {\n          console.log(status)\n          setDisabled(false)\n        }\n      })\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} subTitle={t('finance.payment_batch.title_view')}>\n            <div className=\"page-options d-flex\">\n                <Link to={returnUrl} \n                      className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')}\n                </Link>\n                {/* Export as sold as excel sheet */}\n                <Button\n                  className='mr-2'\n                  color=\"secondary\"\n                  RootComponent=\"a\"\n                  icon=\"download-cloud\"\n                  onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                    t, doTokenRefresh, history, exportUrl\n                  )}\n                >\n                  {t(\"general.export\")}\n                </Button>\n                <Link to={`/finance/paymentbatches/${batchType}/edit/${batchId}`} \n                      className='btn btn-secondary'>\n                  <Icon name=\"edit-2\" /> {t('general.edit')}\n                </Link>\n            </div>\n          </Page.Header>\n            {(status) ? \n              (status === \"SENT_TO_BANK\") ?\n                <Button.List>\n                  <Button \n                    icon=\"mail\"\n                    disabled={true}\n                    color={sentToBankColor}\n                    onClick={() => onClickStatusButton(\"SENT_TO_BANK\")}\n                  >\n                    {t('finance.payment_batch.status.SENT_TO_BANK')}\n                  </Button>\n                </Button.List>\n              :\n                <Grid.Row>\n                  <Grid.Col md={12} className=\"mb-2 \">\n                    \n\n                    <Button.List className=\"float-right\">\n                      <Button \n                        icon=\"mail\"\n                        disabled={disabled}\n                        color={sentToBankColor}\n                        onClick={() => onClickStatusButton(\"SENT_TO_BANK\")}\n                      >\n                        {t('finance.payment_batch.status.SENT_TO_BANK')}\n                      </Button>\n                      <Button \n                        icon=\"check\"\n                        disabled={disabled}\n                        color={approvedColor}\n                        onClick={() => onClickStatusButton(\"APPROVED\")}\n                      >\n                        {t('finance.payment_batch.status.APPROVED')}\n                      </Button>\n                      <Button \n                        icon=\"clock\"\n                        disabled={disabled}\n                        color={awaitingApprovalColor}\n                        onClick={() => onClickStatusButton(\"AWAITING_APPROVAL\")}\n                      >\n                        {t('finance.payment_batch.status.AWAITING_APPROVAL')}\n                      </Button>\n                      <Button \n                        icon=\"x\"\n                        disabled={disabled}\n                        color={rejectedColor}\n                        onClick={() => onClickStatusButton(\"REJECTED\")}\n                      >\n                        {t('finance.payment_batch.status.REJECTED')}\n                      </Button>\n                    </Button.List>\n                    <h6 className=\"float-right mr-2\">{t(\"general.status\")}</h6>\n                  </Grid.Col>\n                </Grid.Row>\n              : \"\"\n            }\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchViewBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card,\n  Table,\n  List,\n} from \"tabler-react\"\n\nimport { GET_PAYMENT_BATCH_QUERY } from './queries'\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport FinancePaymentBatchViewBase from './FinancePaymentBatchViewBase'\nimport BadgeBoolean from '../../ui/BadgeBoolean';\n\n\nfunction FinancePaymentBatchView({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const batchId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_QUERY, {\n    variables: { id: batchId },\n    pollInterval: 5000,\n  })\n  // const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchViewBase>\n      <p>{t(\"general.loading_with_dots\")}</p>\n    </FinancePaymentBatchViewBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchViewBase>\n      <p>{t('finance.payment_batch.error_loading')}</p>\n    </FinancePaymentBatchViewBase>\n  )\n\n  const financePaymentBatch = data.financePaymentBatch\n  console.log(financePaymentBatch)\n\n  return (\n    <FinancePaymentBatchViewBase status={financePaymentBatch.status}>\n      <Grid.Row>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_info\")}>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.Col>\n                    {t(\"general.name\")}\n                  </Table.Col>\n                  <Table.Col>\n                    {financePaymentBatch.name}\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batch_categories.batch_category_type')}\n                  </Table.Col>\n                  <Table.Col>\n                    <FinancePaymentBatchCategory categoryType={financePaymentBatch.batchType} />\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.batch_category')}\n                  </Table.Col>\n                  <Table.Col>\n                    {\n                      (financePaymentBatch.financePaymentBatchCategory) ? \n                        <div>\n                          {financePaymentBatch.financePaymentBatchCategory.name}\n                          <div><small className=\"text-muted\">{financePaymentBatch.year} - {financePaymentBatch.month}</small></div>\n                        </div> : \n                        t(\"general.invoices\")\n                    }\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.execution_date')}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(financePaymentBatch.executionDate).format(dateFormat)}\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.include_zero_amounts')}\n                  </Table.Col>\n                  <Table.Col>\n                    <BadgeBoolean value={financePaymentBatch.includeZeroAmounts} />\n                  </Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_totals\")}>\n            <Table cards>\n              <Table.Row>\n                <Table.Col>\n                  {t('general.total')}\n                </Table.Col>\n                <Table.Col>\n                  {financePaymentBatch.totalDisplay}\n                </Table.Col>\n              </Table.Row>\n              <Table.Row>\n                <Table.Col>\n                  {t('general.items')}\n                </Table.Col>\n                <Table.Col>\n                  {financePaymentBatch.countItems}\n                </Table.Col>\n              </Table.Row>\n            </Table>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_exports\")}>\n            <Card.Body>\n              <List unstyled>\n              {financePaymentBatch.exports.edges.map(({ node }) => (\n                <List.Item>\n                  {moment(node.createdAt).format(dateTimeFormat)} <br /> \n                  <small>{node.account && node.account.fullName}</small>\n                </List.Item>\n              ))}\n              </List>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {(financePaymentBatch.note) ?\n        <Grid.Row>\n          <Grid.Col md={12}>\n              <Card title={t(\"finance.payment_batch.title_batch_note\")}>\n                <Card.Body>\n                  {financePaymentBatch.note}\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n      : \"\" }\n      <Grid.Row>\n        <Grid.Col>\n          <Card title={t(\"finance.payment_batch.title_batch_items\")}>\n            <small>\n              <Table cards >\n                <Table.Header>\n                  <Table.Row>\n                    <Table.ColHeader>\n                      {t(\"general.line\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.account\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"relations.account.bank_accounts.holder\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"relations.account.bank_accounts.number\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.description\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"settings.finance.currency.title\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.amount\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"finance.invoices.invoice_number\")}\n                    </Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {financePaymentBatch.items.edges.map(({ node }, index) => (\n                    <Table.Row>\n                      <Table.Col>{index + 1}</Table.Col>\n                      <Table.Col>\n                        {node.account && \n                          <Link to={`/relations/accounts/${node.account.id}/profile`}>\n                            {node.account.fullName}\n                          </Link>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        {node.accountHolder}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.accountNumber} {(node.accountBic) ? <div>{node.accountBic}</div> : \"\"}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.description}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.currency}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.amountDisplay}\n                      </Table.Col>\n                      <Table.Col>\n                        {(node.financeInvoice) ?\n                          <Link to={`/finance/invoices/edit/${node.financeInvoice.id}`}>\n                            {node.financeInvoice.invoiceNumber}\n                          </Link> : \"\" }\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </small>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '', executionDate: new Date() }}\n          // validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType == \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputValues={inputValues}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card> */}\n    </FinancePaymentBatchViewBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchView))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_BATCH_INVOICES_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    executionDate: Yup.date()\n      .required(t('yup.field_required')),\n    note: Yup.string(),\n    includeZeroAmounts: Yup.boolean()\n  })\n\nexport const PAYMENT_BATCH_CATEGORY_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n  executionDate: Yup.date()\n    .required(t('yup.field_required')),\n  financePaymentBatchCategory: Yup.string()\n  .required(t('yup.field_required')),\n  year: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  month: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  note: Yup.string(),\n  includeZeroAmounts: Yup.boolean()\n  })\n\nexport const PAYMENT_BATCH_EDIT_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nconst FinancePaymentCollectionBatchForm = (\n  { t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, inputData, returnUrl, create=false, category=false }\n  ) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          {(create) ? \n            <Grid.Col>\n              <Form.Group label={t('finance.payment_batches.execution_date')}>\n                <CSDatePicker \n                  selected={values.executionDate}\n                  onChange={(executionDate) => {\n                    setFieldValue(\"executionDate\", executionDate)\n                    setFieldTouched(\"executionDate\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"executionDate\", true)}\n                  placeholderText={t('')}\n                />\n                <ErrorMessage name=\"executionDate\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            : \"\" \n          }\n        </Grid.Row>\n        {(create && category) ?\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.category')}>\n                <Field component=\"select\" \n                        name=\"financePaymentBatchCategory\" \n                        className={(errors.financePaymentBatchCategory) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                  <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                  {inputData.financePaymentBatchCategories.edges.map(({ node }) =>\n                    <option value={node.id} key={v4()}>{node.name}</option>\n                  )}\n                </Field>\n                <ErrorMessage name=\"financePaymentBatchCategory\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.year')} >\n                <Field type=\"text\" \n                      name=\"year\" \n                      className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.month')} >\n                <Field type=\"text\" \n                      name=\"month\" \n                      className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row> \n          : \"\"\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.note')}>\n              <Field type=\"textarea\"\n                     component=\"textarea\" \n                     name=\"note\" \n                     className={(errors.note) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {(create) ? \n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"includeZeroAmounts\" \n                  checked={values.includeZeroAmounts} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('finance.payment_batches.include_zero_amounts')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"includeZeroAmounts\" component=\"div\" />   \n              </Form.Group>  \n            </Grid.Col>\n          </Grid.Row>\n          : \"\" \n        }\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { ADD_PAYMENT_BATCH, GET_PAYMENT_BATCHES_QUERY, GET_INPUT_VALUES } from './queries'\nimport { PAYMENT_BATCH_INVOICES_SCHEMA, PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport FinancePaymentBatchesBase from './FinancePaymentBatchesBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\n\n\nfunction FinancePaymentCollectionBatchAdd({ t, history, match }) {\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}/add_what`\n  const categoryType = match.params.category_type\n  const cardTitle = t('finance.payment_batch.title_add')\n\n\n  let invoices = false\n  let category = false\n  switch (categoryType) {\n    case \"invoices\":\n      invoices = true\n      break\n    case \"category\":\n      category = true\n      break\n    default:\n      break\n  }\n\n  let batchCategoryType\n  switch (batchType) {\n    case \"collection\":\n      batchCategoryType = \"COLLECTION\"\n      break\n    case \"payment\":\n      batchCategoryType = \"PAYMENT\"\n      break\n    default:\n      break\n  }\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES, { variables: {\n    batchCategoryType: batchCategoryType\n  }})\n  const [addFinancePaymentBatch] = useMutation(ADD_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card cardTitle={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading_input_values')}</p>\n      </Card>\n      </FinancePaymentBatchesBase>\n  )\n\n  const inputData = data\n\n  let initialValues = { name: '', description: '', executionDate: new Date() }\n  let yupSchema\n  if (categoryType === \"category\") {\n    initialValues.year = new Date().getFullYear()\n    initialValues.month = new Date().getMonth() + 1\n    yupSchema = PAYMENT_BATCH_CATEGORY_SCHEMA\n  } else {\n    yupSchema = PAYMENT_BATCH_INVOICES_SCHEMA\n  }\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={yupSchema}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType === \"category\") {\n              input.year = parseInt(values.year)\n              input.month = parseInt(values.month)\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                const id = data.createFinancePaymentBatch.financePaymentBatch.id\n                history.push(`/finance/paymentbatches/${batchType}/view/${id}`)\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputData={inputData}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { UPDATE_PAYMENT_BATCH, GET_PAYMENT_BATCH_QUERY, GET_PAYMENT_BATCHES_QUERY } from './queries'\nimport { PAYMENT_BATCH_EDIT_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\nimport FinancePaymentBatchesBase from './FinancePaymentBatchesBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\n\n\nfunction FinancePaymentCollectionBatchEdit({ t, history, match }) {\n  const batchType = match.params.batch_type\n  const batchId = match.params.id\n  const returnUrl = `/finance/paymentbatches/${batchType}/view/${batchId}`\n  const cardTitle = t('finance.payment_batch.title_edit')\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_QUERY, {\n    variables: { id: batchId }\n  })\n  const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={false} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading_input_values')}</p>\n      </Card>\n      </FinancePaymentBatchesBase>\n  )\n\n  const inputValues = data.financePaymentBatch\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: inputValues.name , note: inputValues.note }}\n          validationSchema={PAYMENT_BATCH_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                id: batchId,\n                name: values.name, \n                note: values.note,\n            }\n\n            updateFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                create={false}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let showArchive = localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE)\n  if (showArchive === null) {\n    showArchive = \"false\"\n  }\n\n  let queryVars = {\n    archived: (showArchive === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinancePaymentBatchCategoriesBase({t, history, children, showAdd=false, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className={'page-options d-flex'}>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentbatchcategory\">\n                  <ButtonAdd addUrl={'/finance/paymentbatchcategories/add'} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"financepaymentbatchcategory\">\n                  <ButtonBack returnUrl=\"/finance/paymentbatchcategories\" />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoriesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_BATCH_CATEGORIES_QUERY = gql`\n  query FinancePaymentBatchCategories($after: String, $before: String, $archived: Boolean) {\n    financePaymentBatchCategories(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          description\n          batchCategoryType\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_BATCH_CATEGORY_QUERY = gql`\n  query FinancePaymentBatchCategory($id: ID!) {\n    financePaymentBatchCategory(id:$id) {\n      id\n      name\n      description\n      archived\n    }\n  }\n`\n\n\nexport const ARCHIVE_PAYMENT_BATCH_CATEGORY = gql`\n  mutation ArchiveFinancePaymentBatchCategory($input: ArchiveFinancePaymentBatchCategoryInput!) {\n    archiveFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n        archived\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"./tools\"\n\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentBatchCategoriesBase from \"./FinancePaymentBatchCategoriesBase\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY, ARCHIVE_PAYMENT_BATCH_CATEGORY } from \"./queries\"\n\nfunction FinancePaymentBatchCategories({t, history}) {\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_PAYMENT_BATCH_CATEGORIES_QUERY, {\n    variables: get_list_query_variables(),\n  })\n  const [archivePaymentBatchCategory] = useMutation(ARCHIVE_PAYMENT_BATCH_CATEGORY)\n\n  // TODO: use local storage for archive buttons\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE) !== \"true\") ? \n      'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}>\n        <p>{t('finance.payment_batch_categories.error_loading')}</p>\n      </ContentCard>\n      </FinancePaymentBatchCategoriesBase>\n  )\n\n  let payment_batch_categories = data.financePaymentBatchCategories\n  // Empty list\n  if (!payment_batch_categories.edges.length) { return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}\n                    headerContent={headerOptions}>\n        <p>\n          { (localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE === \"true\")) ? \n              t(\"finance.payment_batch_categories.empty_archive\") :\n              t('finance.payment_batch_categories.empty_list')\n          }\n        </p>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )}\n\n  return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}\n        headerContent={headerOptions}\n        pageInfo={payment_batch_categories.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: payment_batch_categories.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.financePaymentBatchCategories.edges\n            const pageInfo = fetchMoreResult.financePaymentBatchCategories.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  financePaymentBatchCategories: {\n                    __typename: previousResult.financePaymentBatchCategories.__typename,\n                    edges: [ ...previousResult.financePaymentBatchCategories.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batch_categories.batch_category_type')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {payment_batch_categories.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <FinancePaymentBatchCategory categoryType={node.batchCategoryType} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/finance/paymentbatchcategories/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      onClick={() => {\n                        console.log(\"clicked archived\")\n                        let id = node.id\n                        archivePaymentBatchCategory({ variables: {\n                          input: {\n                          id,\n                          archived: !node.archived\n                        }\n                      }, refetchQueries: [\n                          {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (node.archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                        })\n                      }}>\n                    <Icon prefix=\"fa\" name=\"inbox\" />\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\n\n\n// const FinancePaymentMethods = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"finance.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_PAYMENT_METHODS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {financePaymentMethods: payment_methods}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}>\n//                     <p>{t('finance.payment_methods.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!payment_methods.edges.length) { return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('finance.payment_methods.empty_list') : t(\"finance.payment_methods.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={payment_methods.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: payment_methods.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.financePaymentMethods.edges\n//                                     const pageInfo = fetchMoreResult.financePaymentMethods.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new payment_methods at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           financePaymentMethods: {\n//                                             __typename: previousResult.financePaymentMethods.__typename,\n//                                             edges: [ ...previousResult.financePaymentMethods.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {payment_methods.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     {node.code}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/finance/paymentmethods/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   {(node.systemMethod) ? \n//                                     <Table.Col></Table.Col> :\n//                                     <Mutation mutation={ARCHIVE_PAYMENT_METHOD} key={v4()}>\n//                                       {(archivePaymentMethod, { data }) => (\n//                                         <Table.Col className=\"text-right\" key={v4()}>\n//                                           <button className=\"icon btn btn-link btn-sm\" \n//                                             title={t('general.archive')} \n//                                             href=\"\"\n//                                             onClick={() => {\n//                                               console.log(\"clicked archived\")\n//                                               let id = node.id\n//                                               archivePaymentMethod({ variables: {\n//                                                 input: {\n//                                                   id,\n//                                                   archived: !archived\n//                                                 }\n//                                           }, refetchQueries: [\n//                                               {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": archived }}\n//                                           ]}).then(({ data }) => {\n//                                             console.log('got data', data);\n//                                             toast.success(\n//                                               (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                           }).catch((error) => {\n//                                             toast.error((t('general.toast_server_error')) +  error, {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             console.log('there was an error sending the query', error);\n//                                           })\n//                                           }}>\n//                                             <Icon prefix=\"fa\" name=\"inbox\" />\n//                                           </button>\n//                                         </Table.Col>\n//                                       )}\n//                                     </Mutation>\n//                                   }\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"financepaymentmethod\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/finance/paymentmethods/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('finance.payment_methods.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategories))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst FinancePaymentBatchCategoryForm = ({ t, history, isSubmitting, errors, values, returnUrl, create=false }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {(create) ?\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('finance.payment_batch_categories.batch_category_type')}>\n                <Field component=\"select\" \n                        name=\"batchCategoryType\" \n                        className={(errors.batchCategoryType) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                  <option value=\"COLLECTION\" key={v4()}>{t('general.collection')}</option>\n                  <option value=\"PAYMENT\" key={v4()}>{t('general.payment')}</option>\n                </Field>\n                <ErrorMessage name=\"batchCategoryType\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row> \n          : \"\"\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_BATCH_CATEGORY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string()\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinancePaymentBatchCategoriesBase from './FinancePaymentBatchCategoriesBase'\nimport FinancePaymentBatchCategoryForm from './FinancePaymentBatchCategoryForm'\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY } from './queries'\nimport { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\n\n\nconst ADD_PAYMENT_BATCH_CATEGORY = gql`\n  mutation CreateFinancePaymentBatchCategory($input:CreateFinancePaymentBatchCategoryInput!) {\n    createFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n      }\n    }\n  }\n`\n\nfunction FinancePaymentBatchCategoryAdd({ t, history }) {\n  const returnUrl = \"/finance/paymentbatchcategories\"\n  const [addFinancePaymentBatchCategory] = useMutation(ADD_PAYMENT_BATCH_CATEGORY, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('finance.payment_batch_categories.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', batchCategoryType: \"COLLECTION\", description: '' }}\n          validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            addFinancePaymentBatchCategory({ variables: {\n              input: {\n                name: values.name, \n                batchCategoryType: values.batchCategoryType,\n                description: values.description\n              }\n            }, refetchQueries: [\n                {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batch_categories.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FinancePaymentBatchCategoryForm\n                create={true}\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryAdd))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY, GET_PAYMENT_BATCH_CATEGORY_QUERY } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport FinancePaymentBatchCategoriesBase from './FinancePaymentBatchCategoriesBase'\nimport FinancePaymentBatchCategoryForm from './FinancePaymentBatchCategoryForm'\n\n\nconst UPDATE_PAYMENT_BATCH_CATEGORY = gql`\n  mutation UpdateFinancePaymentBatchCategory($input: UpdateFinancePaymentBatchCategoryInput!) {\n    updateFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n      }\n    }\n  }\n`\n\nfunction FinancePaymentBatchCategoryEdit({ t, history, match }) {\n  const returnUrl = \"/finance/paymentbatchcategories\"\n  const paymentBatchCategoryId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_CATEGORY_QUERY, {\n    variables: {'id': paymentBatchCategoryId},\n  })\n  const [updateFinancePaymentBatchCategory] = useMutation(UPDATE_PAYMENT_BATCH_CATEGORY)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card cardTitle={t('finance.payment_batch_categories.title')}>\n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true} />\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card cardTitle={t('finance.payment_batch_categories.title')}>\n        <Card.Body>\n          <p>{t('finance.payment_batch_categories.error_loading')}</p>\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n\n  const initialData = data.financePaymentBatchCategory\n\n  return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('finance.payment_batch_categories.title_edit')}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              name: initialData.name, \n              batchCategoryType: initialData.batchCategoryType,\n              description: initialData.description,\n            }}\n            validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateFinancePaymentBatchCategory({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  batchCategoryType: values.batchCategoryType,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('finance.payment_batch_categories.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n              }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FinancePaymentBatchCategoryForm\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  returnUrl={returnUrl}\n                />\n               \n            )}\n          </Formik>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_FINANCE_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      financeInvoice {\n        id\n        invoiceNumber\n      }\n      orderNumber\n      status\n      message\n      createdAt\n      total\n      totalDisplay\n      balanceDisplay\n      items(first: 100) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            organizationClasspass {\n              id\n              name\n            }\n            productName \n            description\n            quantity\n            price\n            priceDisplay\n            financeTaxRate {\n              name\n            }\n            subtotalDisplay\n            taxDisplay\n            totalDisplay\n            financeGlaccount {\n              name\n            }\n          \tfinanceCostcenter {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ORDER = gql`\n  mutation UpdateFinanceOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\n\nconst FinanceOrderEditForm = ({ t, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card title={t('general.status')}>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col md={10}>\n            <Form.Group>\n              <Field component=\"select\" \n                     name=\"status\" \n                     className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value={\"RECEIVED\"} key={v4()}>{t(\"finance.orders.statuses.RECEIVED\")}</option>\n                <option value={\"AWAITING_PAYMENT\"} key={v4()}>{t(\"finance.orders.statuses.AWAITING_PAYMENT\")}</option>\n                <option value={\"PAID\"} key={v4()}>{t(\"finance.orders.statuses.PAID\")}</option>\n                <option value={\"DELIVERED\"} key={v4()}>{t(\"finance.orders.statuses.DELIVERED\")}</option>\n                <option value={\"CANCELLED\"} key={v4()}>{t(\"finance.orders.statuses.CANCELLED\")}</option>\n                <option value={\"NOT_FOUND\"} key={v4()}>{t(\"finance.orders.statuses.NOT_FOUND\")}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <span className=\"text-muted\">\n              <Icon name=\"info\" /> {' '}\n              {t(\"finance.orders.set_status_to_delivered_to_deliver_manually\")}\n            </span>\n          </Grid.Col>\n          <Grid.Col md={2}>\n          <Button \n                className=\"pull-right\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n              >\n                {t('general.submit')}\n              </Button>\n          </Grid.Col>\n        </Grid.Row> \n      </Card.Body>\n    </Card>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(FinanceOrderEditForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ButtonBack from '../../../ui/ButtonBack';\n\n\nfunction FinanceOrderEditBase ({ t, match, history, children, refetch }) {\n  const returnUrl = \"/finance/orders\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceOrderEditBase))","import React, { useContext } from 'react'\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport { GET_ORDERS_QUERY } from '../queries'\nimport { GET_FINANCE_ORDER_QUERY, UPDATE_ORDER } from './queries'\nimport FinanceOrderEditForm from \"./FinanceOrderEditForm\"\nimport FinanceOrderEditBase from './FinanceOrderEditBase'\n\nimport {\n  Grid,\n  Icon,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\n\nfunction FinanceOrderEdit({t, match, location, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n\n  const id = match.params.id\n  const returnUrl = \"/finance/orders\"\n  \n  const { loading, error, data } = useQuery(GET_FINANCE_ORDER_QUERY, {\n    variables: { id: id },\n  })\n  const [updateOrder] = useMutation(UPDATE_ORDER)\n\n\n  // Loading\n  if (loading) return (\n    <FinanceOrderEditBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </FinanceOrderEditBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <FinanceOrderEditBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </FinanceOrderEditBase>\n    )\n  }\n\n  const order = data.financeOrder\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  return(\n    <FinanceOrderEditBase>\n      {/* Start info row */}\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Card title={t(\"finance.orders.edit_details\")}>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.order\")} #</Table.ColHeader>\n                  <Table.Col>{order.orderNumber}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.account\")}</Table.ColHeader>\n                  <Table.Col>{order.account && order.account.fullName}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"finance.orders.placed_at\")}</Table.ColHeader>\n                  <Table.Col>{moment(order.createdAt).format(dateTimeFormat)}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.invoice\")}</Table.ColHeader>\n                  <Table.Col>\n                    {(order.financeInvoice && \n                      <Link to={`/finance/invoices/edit/${order.financeInvoice.id}`}>\n                        {order.financeInvoice.invoiceNumber}\n                      </Link>\n                    )}\n                  </Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n\n        </Grid.Col>\n        <Grid.Col md={6}>\n          {(order.status !== \"DELIVERED\") ? \n            <Formik\n              initialValues={{ \n                status: order.status, \n              }}\n              // validationSchema={GLACCOUNT_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                  console.log('submit values:')\n                  console.log(values)\n\n                  updateOrder({ variables: {\n                    input: {\n                      id: match.params.id,\n                      status: values.status\n                    }\n                  }, refetchQueries: [\n                      {query: GET_ORDERS_QUERY }\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      toast.success((t('finance.orders.toast_edit_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      setSubmitting(false)\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                      setSubmitting(false)\n                    })\n              }}\n              >\n              {({ isSubmitting, errors, values }) => (\n                <FinanceOrderEditForm\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  returnUrl={returnUrl}\n                />\n              )}\n            </Formik>\n            :     \n            <Card title={t('general.status')}>\n              <Card.Body> \n                <span className=\"text-green\"><Icon name=\"check\" /></span> {t(\"finance.orders.statuses.DELIVERED\")}\n              </Card.Body>\n            </Card>\n          }\n        </Grid.Col>\n      </Grid.Row> \n      {/* End information row */}\n      {/* Start items row */}\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Card title={t(\"general.items\")}>\n            <Table cards>\n              <Table.Header>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.product\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.description\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.quantity_short_and_price\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.tax\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                { order.items.edges.map(({ node }) => (        \n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.productName}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.description}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.quantity} <br />\n                      {node.priceDisplay}\n                    </Table.Col>\n                    <Table.Col>\n                      {(node.financeTaxRate) ? node.financeTaxRate.name : \"\"}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.totalDisplay}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>                \n            </Table>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* End items row */}\n      {/* Start note row */}\n      { (order.message) ?\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card title={t('finance.orders.customer_message')}>\n              <Card.Body>\n                {order.message}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row> : \"\"\n      }\n      {/* End note row */}\n    </FinanceOrderEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderEdit))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\nfunction FinancePaymentMethodsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"finance.title\")} >\n          <div className='page-options d-flex'>\n            {(showBack) ?\n              <ButtonBack returnUrl={\"/finance/paymentmethods\"} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentmethod\">\n                  <ButtonAdd addUrl={\"/finance/paymentmethods/add\"} />\n                </HasPermissionWrapper>\n              }\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_METHODS_QUERY = gql`\n  query FinancePaymentMethods($after: String, $before: String, $archived: Boolean) {\n    financePaymentMethods(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          systemMethod\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_METHOD_QUERY = gql`\n  query FinancePaymentMethod($id: ID!) {\n    financePaymentMethod(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_PAYMENT_METHOD = gql`\nmutation CreateFinancePaymentMethod($input:CreateFinancePaymentMethodInput!) {\n  createFinancePaymentMethod(input: $input) {\n    financePaymentMethod{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_PAYMENT_METHOD = gql`\nmutation UpdateFinancePaymentMethod($input: UpdateFinancePaymentMethodInput!) {\n  updateFinancePaymentMethod(input: $input) {\n    financePaymentMethod {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_PAYMENT_METHOD = gql`\nmutation ArchiveFinancePaymentMethod($input: ArchiveFinancePaymentMethodInput!) {\n  archiveFinancePaymentMethod(input: $input) {\n    financePaymentMethod {\n      id\n      archived\n    }\n  }\n}\n`","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase'\n\nimport { GET_PAYMENT_METHODS_QUERY, ARCHIVE_PAYMENT_METHOD } from \"./queries\"\n\n\nfunction FinancePaymentMethods({ t, history }) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.payment_methods.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_PAYMENT_METHODS_QUERY, {\n    variables: { archived: archived }\n  })\n\n  const [ archivePaymentMethod ] = useMutation(ARCHIVE_PAYMENT_METHOD)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  if (error) return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.payment_methods.error_loading')}</p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  const paymentMethods = data.financePaymentMethods\n\n  // Empty list\n  if (!paymentMethods.edges.length) { return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.payment_methods.empty_list') : t(\"finance.payment_methods.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )}\n\n  return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={paymentMethods.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: paymentMethods.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financePaymentMethods.edges\n                        const pageInfo = fetchMoreResult.financePaymentMethods.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new paymentMethods at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financePaymentMethods: {\n                                __typename: previousResult.financePaymentMethods.__typename,\n                                edges: [ ...previousResult.financePaymentMethods.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {paymentMethods.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/finance/paymentmethods/edit/${node.id}`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    {(node.systemMethod) ? \"\" :\n                      <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archivePaymentMethod({ variables: {\n                            input: {\n                              id,\n                              archived: !archived\n                            }\n                      }, refetchQueries: [\n                          {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": archived }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fa\" name=\"inbox\" />\n                      </button>\n                    }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>      \n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethods))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_METHOD_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinancePaymentMethodForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('finance.code')}>\n            <Field type=\"text\" \n                    name=\"code\" \n                    className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentMethodForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_PAYMENT_METHODS_QUERY, ADD_PAYMENT_METHOD } from './queries'\nimport { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase';\nimport FinancePaymentMethodForm from './FinancePaymentMethodForm'\n\n\nfunction FinancePaymentMethodAdd({ t, history }) {\n  const returnUrl = \"/finance/paymentmethods\"\n  const [ addPaymentMethod ] = useMutation(ADD_PAYMENT_METHOD)\n\n  return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <Card title={t('finance.payment_methods.title_add')}>\n        <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addPaymentMethod({ variables: {\n                input: {\n                  name: values.name, \n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.payment_methods.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FinancePaymentMethodForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_PAYMENT_METHODS_QUERY, GET_PAYMENT_METHOD_QUERY, UPDATE_PAYMENT_METHOD } from './queries'\nimport { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase';\nimport FinancePaymentMethodForm from './FinancePaymentMethodForm'\n\n\nfunction FinancePaymentMethodEdit({ t, history, match }) {\n  const id = match.params.id\n  const cardTitle = t('finance.payment_methods.title_edit')\n  const returnUrl = \"/finance/paymentmethods\"\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_METHOD_QUERY, {\n    variables: { id: id }\n  })\n  const [ updatePaymentMethod ] = useMutation(UPDATE_PAYMENT_METHOD)\n\n  if (loading) return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  if (error) return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  const initialData = data.financePaymentMethod;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            code: initialData.code\n          }}\n          validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updatePaymentMethod({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.payment_methods.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n              <FinancePaymentMethodForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_QUOTES_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceQuotesFilter = ({ t, history, data, refetch }) => (\n  <div className=\"mr-2\">\n    {/* Status */}\n    <select \n      className={`${selectClass}`}\n      value={getDefaultValue(CSLS.FINANCE_QUOTES_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_QUOTES_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"finance.quotes.status.ALL\")}</option>\n      <option value=\"DRAFT\" key={v4()}>{t('finance.quotes.status.DRAFT')}</option>\n      <option value=\"SENT\" key={v4()}>{t('finance.quotes.status.SENT')}</option>\n      <option value=\"ACCEPTED\" key={v4()}>{t('finance.quotes.status.ACCEPTED')}</option>\n      <option value=\"REJECTED\" key={v4()}>{t('finance.quotes.status.REJECTED')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.quotes.status.CANCELLED')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceQuotesFilter))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from '../../SiteWrapper'\nimport ButtonExport from '../../ui/ButtonExport';\nimport FinanceQuotesFilter from \"./FinanceQuotesFilter\"\n\n\nfunction FinanceQuotesBase ({ t, history, children, refetch }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <FinanceQuotesFilter refetch={refetch}/>\n              <ButtonExport url=\"/finance/quotes/export\" className='mr-2' />\n              <Link to=\"/finance/quotes/groups\">\n                <Button\n                  color=\"secondary\"\n                  icon=\"folder\"\n                >\n                  {t('general.groups')}\n                </Button>\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuotesBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceQuoteStatus extends Component {\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"ALL\":\n        return <Badge color=\"secondary\">{t('finance.quotes.status.ALL')}</Badge>\n      case \"DRAFT\":\n        return <Badge color=\"secondary\">{t('finance.quotes.status.DRAFT')}</Badge>\n      case \"SENT\":\n        return <Badge color=\"primary\">{t('finance.quotes.status.SENT')}</Badge>\n      case \"ACCEPTED\":\n        return <Badge color=\"success\">{t('finance.quotes.status.ACCEPTED')}</Badge>\n      case \"REJECTED\":\n        return <Badge color=\"danger\">{t('finance.quotes.status.REJECTED')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.quotes.status.CANCELLED')}</Badge>\n      default:\n        return t('finance.quotes.status.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_QUOTES_QUERY = gql`\n  query FinanceQuotes($after: String, $before: String, $status: CostasiellaFinanceQuoteStatusChoices) {\n    financeQuotes(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          quoteNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateExpire\n          total\n          totalDisplay\n        }\n      }\n    }\n  }\n`\n\nexport const GET_QUOTE_QUERY = gql`\n  query FinanceQuote($id: ID!, $before: String, $after: String) {\n    financeQuote(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      business {\n        id\n        name\n      }\n      customTo\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      quoteNumber\n      dateSent\n      dateExpire\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    businesses(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    organization(id:\"T3JnYW5pemF0aW9uTm9kZToxMDA=\") {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n    }\n  }\n`\n\n\nexport const UPDATE_QUOTE = gql`\n  mutation UpdateFinanceQuote($input: UpdateFinanceQuoteInput!) {\n    updateFinanceQuote(input: $input) {\n      financeQuote {\n        id\n        summary\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_QUOTE = gql`\n  mutation DeleteFinanceQuote($input: DeleteFinanceQuoteInput!) {\n    deleteFinanceQuote(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const CREATE_QUOTE_ITEM = gql`\n  mutation CreateFinanceQuoteItem($input: CreateFinanceQuoteItemInput!) {\n    createFinanceQuoteItem(input: $input) {\n      financeQuoteItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_QUOTE_ITEM = gql`\n  mutation UpdateFinanceQuoteItem($input: UpdateFinanceQuoteItemInput!) {\n    updateFinanceQuoteItem(input: $input) {\n      financeQuoteItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_QUOTE_ITEM = gql`\n  mutation DeleteFinanceQuoteItem($input: DeleteFinanceQuoteItemInput!) {\n    deleteFinanceQuoteItem(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  Button,\n  Table, \n  Text\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport FinanceQuoteStatus from \"../../ui/FinanceQuoteStatus\"\nimport { GET_QUOTES_QUERY, DELETE_FINANCE_QUOTE } from \"./queries\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport moment from 'moment'\n\nfunction FinanceQuotesList({t, history, match, quotes, showColRelation=false}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const [ deleteFinanceQuote ] = useMutation(DELETE_FINANCE_QUOTE)\n\n  return (\n    <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.quotes.quote_number')} & {t('finance.quotes.summary')}</Table.ColHeader>\n            {showColRelation && <Table.ColHeader>{t('finance.quotes.relation')}</Table.ColHeader>}\n            <Table.ColHeader>{t('finance.quotes.date')} & {t('finance.quotes.expiration')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {quotes.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col key={v4()}>\n                <FinanceQuoteStatus status={node.status} /> <br />\n                {(node.business && !showColRelation) && \n                  <Link to={\"/relations/b2b/\" + node.business.id + \"/edit\"}>\n                    <small><Icon name=\"home\" /> {node.business.name}</small>\n                  </Link>\n                }\n              </Table.Col>\n              <Table.Col key={v4()}>\n                <Link to={\"/finance/quotes/edit/\" + node.id}>\n                  {node.quoteNumber}\n                </Link><br />\n                <Text.Small color=\"gray\">{node.summary.trunc(28)}</Text.Small>\n              </Table.Col>\n              {showColRelation &&\n                <Table.Col key={v4()}>\n                  { node.account && \n                    <Link to={\"/relations/accounts/\" + node.account.id + \"/profile\"}>\n                      <Icon name=\"user\" /> {node.account.fullName} <br />\n                    </Link> \n                  }\n                  { node.business && \n                    <Link to={\"/relations/b2b/\" + node.business.id + \"/edit\"}>\n                      <small><Icon name=\"home\" /> {node.business.name}</small>\n                    </Link>\n                  }\n                </Table.Col>\n              }\n              <Table.Col key={v4()}>\n                {moment(node.dateSent).format(dateFormat)} <br />\n                {moment(node.dateExpire).format(dateFormat)}\n              </Table.Col>\n              <Table.Col key={v4()}>\n                {node.totalDisplay}\n              </Table.Col>\n              <Table.Col className=\"text-right\" key={v4()}>\n                <Link to={\"/finance/quotes/edit/\" + node.id}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                <button className=\"icon btn btn-link btn-sm\" \n                  title={t('general.delete')} \n                  href=\"\"\n                  onClick={() => {\n                    confirm_delete({\n                      t: t,\n                      msgConfirm: t(\"finance.quotes.delete_confirm_msg\"),\n                      msgDescription: <p>{node.quoteNumber}</p>,\n                      msgSuccess: t('finance.quotes.deleted'),\n                      deleteFunction: deleteFinanceQuote,\n                      functionVariables: { \n                        variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, \n                        refetchQueries: [\n                          {query: GET_QUOTES_QUERY, variables: get_list_query_variables() } \n                        ]\n                      }\n                    })\n                }}>\n                  <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                </button>\n            </Table.Col>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuotesList))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceQuotesBase from \"./FinanceQuotesBase\"\nimport FinanceQuotesList from './FinanceQuotesList'\n\nimport { get_list_query_variables } from \"./tools\"\nimport { GET_QUOTES_QUERY } from \"./queries\"\n\n\nfunction FinanceQuotes({ t, location, history }) {\n  // Set back location for edit quote\n  localStorage.setItem(CSLS.FINANCE_QUOTES_EDIT_RETURN, location.pathname)\n  // Set back location for account profile\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_QUOTES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n\n\n  if (loading) return (\n    <FinanceQuotesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.quotes.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceQuotesBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceQuotesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.quotes.title')}>\n        <p>{t('finance.quotes.error_loading')}</p>\n      </ContentCard>\n    </FinanceQuotesBase>\n  )\n\n  const quotes = data.financeQuotes\n\n  // Empty list\n  if (!quotes.edges.length) { return (\n    <FinanceQuotesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.quotes.title')}>\n        <p>\n          {t('finance.quotes.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceQuotesBase>\n  )}\n\n  return (\n    <FinanceQuotesBase refetch={refetch}>\n      <ContentCard \n        cardTitle={t('finance.quotes.title')}\n        hasCardBody={false}\n        pageInfo={quotes.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: quotes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeQuotes.edges\n              const pageInfo = fetchMoreResult.financeQuotes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new quotes at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeQuotes: {\n                      __typename: previousResult.financeQuotes.__typename,\n                      edges: [ ...previousResult.financeQuotes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceQuotesList \n          quotes={quotes} \n          showColRelation={true}\n        />\n      </ContentCard>\n    </FinanceQuotesBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceQuotes))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const QUOTES_EXPORT_SCHEMA = Yup.object().shape({\n    status: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\n\n\nconst FinanceQuotesExportForm = ({ t, history, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                    name=\"status\" \n                    className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"ALL\" key={v4()}>{t('general.all')}</option>\n                <option value=\"DRAFT\" key={v4()}>{t('finance.quotes.status.DRAFT')}</option>\n                <option value=\"SENT\" key={v4()}>{t('finance.quotes.status.SENT')}</option>\n                <option value=\"ACCEPTED\" key={v4()}>{t('finance.quotes.status.ACCEPTED')}</option>\n                <option value=\"REJECTED\" key={v4()}>{t('finance.quotes.status.REJECTED')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('finance.quotes.status.CANCELLED')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer> \n        <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n        >\n          {t('finance.quotes.export.btn_prepare_export')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(FinanceQuotesExportForm))","import React, { useContext, useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Container,\n  Icon,\n  List,\n  Page\n} from \"tabler-react\"\n\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from '../../../SiteWrapper'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport ButtonBack from '../../../ui/ButtonBack';\n\nimport { QUOTES_EXPORT_SCHEMA } from './yupSchema'\nimport FinanceQuotesExportForm from './FinanceQuotesExportForm';\nimport moment from 'moment'\n\n\nfunction FinanceQuotesExport({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [dateStart, setDateStart] = useState(new Date(moment().startOf('month')))\n  const [dateEnd, setDateEnd] = useState(new Date(moment().endOf('month')))\n  const [status, setStatus] = useState(\"ALL\")\n  const [prepared, setPrepared] = useState(false)\n  const [exportUrl, setExportUrl] = useState(\"\")\n\n  const cardTitle = t(\"finance.quotes.export.title\")\n  const returnUrl = \"/finance/quotes\" \n\n  const [ doTokenRefresh ] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Card title={cardTitle}>\n            <Formik\n            initialValues={{ \n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              status: status\n            }}\n            validationSchema={QUOTES_EXPORT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                setDateStart(values.dateStart)\n                setDateEnd(values.dateEnd)\n                setStatus(values.status)\n\n                const isoDateStart = dateToLocalISO(values.dateStart)\n                const isoDateEnd = dateToLocalISO(values.dateEnd)\n                setExportUrl(\n                  `/d/export/quotes/${isoDateStart}/${isoDateEnd}/${status}/`\n                )\n                \n                setSubmitting(false)\n                setPrepared(true)  \n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n              <FinanceQuotesExportForm\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n              )\n            }\n          </Formik>\n        </Card>\n        {(prepared) ? \n          <Card title={t(\"finance.quotes.export.ready.title\")}>\n            <Card.Body>\n              {t(\"finance.quotes.export.ready.explanation\")}\n              <List>\n                <List.Item>\n                  {t(\"general.period\")}{ \": \" } \n                  {moment(dateStart).format(dateFormat)} { \" - \" }\n                  {moment(dateEnd).format(dateFormat)}\n                </List.Item>\n                <List.Item>\n                  {t(\"general.status\")}: {t(`finance.quotes.status.${status}`)}\n                </List.Item>\n              </List>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                <Icon name=\"download-cloud\" /> {t(\"general.download\")}\n              </Button>\n            </Card.Footer>\n          </Card>\n          : \"\"}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuotesExport))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceQuoteEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            {children}\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { CREATE_QUOTE_ITEM, GET_QUOTE_QUERY } from \"../queries\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction FinanceQuoteItemAdd({t, match}) {\n  const [ addQuoteItem ] = useMutation(CREATE_QUOTE_ITEM)\n\n    return (\n      <button className=\"btn btn-primary btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          addQuoteItem({ variables: {\n            input: {\n              financeQuote: match.params.id              \n            }\n          }, refetchQueries: [\n              {query: GET_QUOTE_QUERY, variables: {id: match.params.id}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.quote.toast_add_item_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              // setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              // setSubmitting(false)\n            })\n      }}>\n        <Icon prefix=\"fe\" name=\"plus\" /> { ' ' }\n        {t('finance.quote.item_add')}\n      </button>\n    )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteItemAdd))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { DELETE_QUOTE_ITEM, GET_QUOTES_QUERY, GET_QUOTE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction FinanceQuoteItemDelete({t, match, node}) {\n  const [deleteQuoteItem] = useMutation(DELETE_QUOTE_ITEM)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.quotes.item_delete_confirm_msg\"),\n            msgDescription: <p>{node.productName} <br /> {node.description}</p>,\n            msgSuccess: t('finance.quotes.item_deleted'),\n            deleteFunction: deleteQuoteItem,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_QUOTES_QUERY, variables: get_list_query_variables() },\n                {query: GET_QUOTE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteItemDelete))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport FinanceQuoteItemDelete from './FinanceQuoteItemDelete'\n\n\nconst FinanceQuoteItemEditForm = ({ t, isSubmitting, errors, node, touched, handleChange, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Grid.Row>\n      {/* <Icon name=\"more-vertical\" /> */}\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"productName\" \n                    className={(errors.productName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"productName\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"productName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    component=\"textarea\"\n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"description\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                   name=\"quantity\" \n                   className={(errors.quantity) ? \"form-control is-invalid\" : \"form-control\"} \n                   autoComplete=\"off\" \n                   onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"quantity\", true, true)\n                  }}\n            />\n            <ErrorMessage name=\"quantity\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"price\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field component=\"select\" \n                  name=\"financeTaxRate\" \n                  className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\"\n                  onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"financeTaxRate\", true, true)\n                  }}\n            >\n              {console.log(\"query data in form finance tax rate:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\">{node.totalDisplay}</span> <br /><br />\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\"><FinanceQuoteItemDelete node={node}/></span><br /><br /> <br />\n          {(Object.keys(touched).length === 0) ? \"\" :\n            <Button \n              color=\"primary\"\n              className=\"pull-right\" \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.submit')}\n            </Button>\n          }\n        </Grid.Col>\n      </Grid.Row>\n      {/* {(Object.keys(touched).length === 0) ? \"\" :\n        <Grid.Row>\n          <Grid.Col md={12} className=\"cs-grid-table-cell\">\n            <Alert type=\"primary\">\n              <p>A change was detected to the item above. Click the save button to save it. </p>\n              <Button \n                color=\"primary\"\n                // className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n            </Alert>\n          </Grid.Col>\n        </Grid.Row>\n      } */}\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteItemEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_QUOTE_ITEM, GET_QUOTE_QUERY } from \"../queries\"\nimport FinanceQuoteItemEditForm from './FinanceQuoteItemEditForm'\n\n\nfunction FinanceQuoteItemEdit({t, match, initialValues, node, inputData}) {\n  const [updateQuoteItem] = useMutation(UPDATE_QUOTE_ITEM)\n\n    return (\n      <Formik\n        initialValues={{\n          productName: initialValues.productName,\n          description: initialValues.description,\n          price: initialValues.price,\n          quantity: initialValues.quantity,\n          financeTaxRate: (initialValues.financeTaxRate) ? initialValues.financeTaxRate.id : null\n        }}\n        // validationSchema={QUOTE_GROUP_SCHEMA}\n        onSubmit={(values, { setSubmitting, setTouched }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateQuoteItem({ variables: {\n            input: {\n              id: initialValues.id,\n              productName: values.productName, \n              description: values.description,\n              price: values.price,\n              quantity: values.quantity,\n              financeTaxRate: values.financeTaxRate\n            }\n          }, refetchQueries: [\n            {query: GET_QUOTE_QUERY, variables: {id: match.params.id}}\n              // {query: GET_QUOTES_QUERY, variables: get_list_query_variables()}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.quote.item.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n              setTouched({})\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n      >\n        {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n          <FinanceQuoteItemEditForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            touched={touched}\n            handleChange={handleChange}\n            setFieldTouched={setFieldTouched}\n            node={node}\n            inputData={inputData}\n          >\n          </FinanceQuoteItemEditForm>   \n        )}\n      </Formik>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteItemEdit))","import React, { useState } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer, \n  Grid, \n} from \"tabler-react\"\n\nimport FinanceQuoteItemAdd from \"./FinanceQuoteItemAdd\"\nimport { GET_QUOTE_QUERY } from '../queries'\n\nimport FinanceQuoteItemEdit from './FinanceQuoteItemEdit'\n\n\nexport const UPDATE_QUOTE_ITEM = gql`\n  mutation UpdateFinanceQuoteItem($input: UpdateFinanceQuoteItemInput!) {\n    updateFinanceQuoteItem(input: $input) {\n      financeQuoteItem {\n        id\n      }\n    }\n  }\n`\n\nfunction FinanceQuoteEditItems ({ t, history, match, refetchQuote, inputData }) {\n  const [ updateItem ] = useMutation(UPDATE_QUOTE_ITEM)\n  const [ updating, setUpdating ] = useState(false)\n\n  const updateLineNumber = ({ node_id, line_number }) => {\n    setUpdating(true)\n    updateItem({ \n      variables: { \n        input: {\n          id: node_id,\n          lineNumber: line_number\n        } \n      },\n      refetchQueries: [\n        { query: GET_QUOTE_QUERY, variables: { id: inputData.financeQuote.id }}\n      ]\n    }).then(({ data }) => {\n      console.log('got data', data)\n      toast.success((t('finance.quote.saved_item_sorting')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      setTimeout(() => setUpdating(false), 125)\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      console.log('there was an error sending the query', error)\n      setTimeout(() => setUpdating(false), 125)\n    })\n  }\n\n  const onDragEnd = (result) => {\n    // the only one that is required\n    console.log('onDragEnd triggered...')\n    console.log(result)\n    const { draggableId, destination, source, reason } = result\n    console.log(source)\n    console.log(destination)\n    console.log(reason)\n\n    // Nothing to do, nowhere to go...\n    console.log(\"drop cancelled...\")\n    if (!destination || reason === 'CANCEL') {\n      return\n    }\n\n    // Moved back to the same spot\n    console.log(\"dropped to the same spot\")\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    updateLineNumber({\n      node_id: draggableId,\n      line_number: destination.index\n    })\n  }\n  // const onDragEnd = useCallback((result) => {\n  //   // the only one that is required\n  //   console.log('onDragEnd triggered...')\n  //   console.log(result)\n  //   const { draggableId, destination, source, reason } = result\n  //   console.log(source)\n  //   console.log(destination)\n  //   console.log(reason)\n\n  //   // Nothing to do, nowhere to go...\n  //   console.log(\"drop cancelled...\")\n  //   if (!destination || reason === 'CANCEL') {\n  //     return\n  //   }\n\n  //   // Moved back to the same spot\n  //   console.log(\"dropped to the same spot\")\n  //   if (\n  //     destination.droppableId === source.droppableId &&\n  //     destination.index === source.index\n  //   ) {\n  //     return\n  //   }\n\n  //   updateLineNumber({\n  //     node_id: draggableId,\n  //     line_number: destination.index\n  //   })\n  // }, []);\n\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} >\n      <Card statusColor=\"blue\">\n        <Card.Header>\n          <Card.Title>{t('general.items')}</Card.Title>\n          <Card.Options>\n            <FinanceQuoteItemAdd />\n          </Card.Options>\n        </Card.Header>\n        <Card.Body>\n          <Dimmer active={updating} loader={updating}>\n              <Grid.Row className=\"cs-grid-table-header\">\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.product\")}</Grid.Col>\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.description\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.quantity_short_and_price\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.tax\")}</Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"><span className=\"float-right\">{t(\"general.total\")}</span></Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"></Grid.Col>\n              </Grid.Row>\n              <Droppable droppableId=\"quote_items\">\n                {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef} \n                      {...provided.droppableProps} \n                    >\n                      {inputData.financeQuote.items.edges.map(({ node }, idx) => (\n                        <Draggable \n                          draggableId={node.id}\n                          index={idx}\n                          key={node.id}\n                        >\n                          {(provided, snapshot) => (\n                              <div \n                                ref={provided.innerRef}\n                                index={node.lineNumber}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                >\n                                <FinanceQuoteItemEdit initialValues={node} inputData={inputData} node={node} />\n                              </div>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                )}\n              </Droppable>\n          </Dimmer>\n        </Card.Body>\n      </Card>\n    </DragDropContext>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditItems))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\nconst FinanceQuoteEditTermsForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"terms\", e.target.getContent())\n            setFieldTouched(\"terms\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditTermsForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceQuoteEditFooterForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"footer\", e.target.getContent())\n            setFieldTouched(\"footer\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditFooterForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm,  ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceQuoteEditNoteForm = ({ t, isSubmitting, values, errors, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Tab,\n  TabbedCard\n} from \"tabler-react\"\n\n\nimport { UPDATE_QUOTE, GET_QUOTE_QUERY } from \"../queries\"\nimport FinanceQuoteEditTermsForm from \"./FinanceQuoteEditTermsForm\"\nimport FinanceQuoteEditFooterForm from \"./FinanceQuoteEditFooterForm\"\nimport FinanceQuoteEditNoteForm from \"./FinanceQuoteEditNoteForm\"\n\n\nfunction FinanceQuoteEditAdditional({t, history, match, initialData}) {\n  const id = match.params.id\n  const [ updateQuote ] = useMutation(UPDATE_QUOTE)\n\n  return (\n    <TabbedCard initialTab={t('general.terms_and_conditions')}>\n      <Tab title={t('general.terms_and_conditions')}>\n        <Formik\n          initialValues={{ \n            terms: initialData.financeQuote.terms, \n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                terms: values.terms, \n              }\n            }, refetchQueries: [\n                {query: GET_QUOTE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_terms_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditTermsForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceQuoteEditTermsForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.footer')}>\n        <Formik\n          initialValues={{ \n            footer: initialData.financeQuote.footer, \n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                footer: values.footer, \n              }\n            }, refetchQueries: [\n              {query: GET_QUOTE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_footer_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditFooterForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              handleChange={handleChange}\n              touched={touched}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceQuoteEditFooterForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.note')}>\n        <Formik\n          initialValues={{ \n            note: initialData.financeQuote.note, \n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                note: values.note, \n              }\n            }, refetchQueries: [\n              {query: GET_QUOTE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_note_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceQuoteEditNoteForm>\n          )}\n        </Formik>\n      </Tab>\n    </TabbedCard>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditAdditional))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceQuoteEditBalance = ({ t, history, financeQuote }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.balance')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.subtotal')}\n        </span>\n        <span className=\"pull-right\">\n          {financeQuote.subtotalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.tax')}\n        </span>\n        <span className=\"pull-right\">\n          {financeQuote.taxDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.total')}\n        </span>\n        <span className=\"pull-right\">\n          {financeQuote.totalDisplay}\n        </span>\n      </div><br />\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditBalance))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nconst FinanceQuoteEditOptionsForm = ({ t, isSubmitting, values, errors, handleChange, touched, setFieldValue, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('finance.quotes.quote_number')}>\n        <Field type=\"text\" \n                name=\"quoteNumber\" \n                className={(errors.quoteNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"quoteNumber\", true, true)\n                }}           \n        />\n        <ErrorMessage name=\"quoteNumber\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.quotes.date')}>\n        <CSDatePicker \n          className={(errors.dateSent) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateSent}\n          onChange={(date) => {\n            setFieldValue(\"dateSent\", date)\n            setFieldTouched(\"dateSent\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateSent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.quotes.expiration')}>\n        <CSDatePicker \n          className={(errors.dateExpire) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateExpire}\n          onChange={(date) => {\n            setFieldValue(\"dateExpire\", date)\n            setFieldTouched(\"dateExpire\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateDue\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.status')}>\n        <Field component=\"select\" \n              name=\"status\" \n              className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\"\n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"status\", true, true)\n              }}\n        >\n          <option value=\"DRAFT\">{t('finance.quotes.status.DRAFT')}</option>\n          <option value=\"SENT\">{t('finance.quotes.status.SENT')}</option>\n          <option value=\"ACCEPTED\">{t('finance.quotes.status.ACCEPTED')}</option>\n          <option value=\"REJECTED\">{t('finance.quotes.status.REJECTED')}</option>\n          <option value=\"CANCELLED\">{t('finance.quotes.status.CANCELLED')}</option>\n        </Field>\n        <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditOptionsForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_QUOTE, GET_QUOTES_QUERY } from \"../queries\"\nimport FinanceQuoteEditOptionsForm from \"./FinanceQuoteEditOptionsForm\"\n\n\nfunction FinanceQuoteEditOptions({t, match, initialData}) {\n  const [ updateQuote ] = useMutation(UPDATE_QUOTE)\n  \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateSent = null\n  if (initialData.financeQuote.dateSent) {\n    dateSent = new Date(initialData.financeQuote.dateSent)\n  }\n  let dateExpire = null\n  if (initialData.financeQuote.dateExpire) {\n    dateExpire = new Date(initialData.financeQuote.dateExpire)\n  }\n\n  return (\n    <Card title={t('general.options')} statusColor=\"blue\">\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            quoteNumber: initialData.financeQuote.quoteNumber, \n            dateSent: dateSent,\n            dateExpire: dateExpire,\n            status: initialData.financeQuote.status,\n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                quoteNumber: values.quoteNumber, \n                dateSent: dateToLocalISO(values.dateSent),\n                dateExpire: dateToLocalISO(values.dateExpire),\n                status: values.status,\n              }\n            }, refetchQueries: [\n                {query: GET_QUOTES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_options_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditOptionsForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceQuoteEditOptionsForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteEditOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport DOMPurify from 'dompurify'\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceQuoteEditOrganization = ({ t, history, organization }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.from')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div className=\"bold\">\n        {organization.name}\n      </div>\n      {(organization.address) ?\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organization.address)}} />\n        : \"\"\n      }      \n      <div>\n        {organization.phone}\n      </div>\n      <div>\n        {organization.email}\n      </div>\n      <div>\n        {organization.registration}\n      </div>\n      <div>\n        {organization.taxRegistration}\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditOrganization))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinanceQuoteEditSummaryForm = ({ t, isSubmitting, errors, touched, setFieldTouched, handleChange }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group>\n        <Field \n          type=\"text\" \n          name=\"summary\" \n          className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n          autoComplete=\"off\" \n          onChange={(e) => {\n            handleChange(e)\n            setFieldTouched(\"summary\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditSummaryForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_QUOTE, GET_QUOTES_QUERY } from \"../queries\"\nimport FinanceQuoteEditSummaryForm from \"./FinanceQuoteEditSummaryForm\"\n\n\nfunction FinanceQuoteEditSummary({t, history, match, location, initialData}) {  \n  const [ updateQuote ] = useMutation(UPDATE_QUOTE)\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.summary')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            summary: initialData.financeQuote.summary, \n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                summary: values.summary, \n              }\n            }, refetchQueries: [\n                {query: GET_QUOTES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_summary_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, setFieldTouched, handleChange }) => (\n            <FinanceQuoteEditSummaryForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceQuoteEditSummaryForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditSummary))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n} from \"tabler-react\"\n\n\nfunction FinanceQuoteEditTo({ t, history, match, financeQuote }) {\n  const id = match.params.id\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.to')} </Card.Title>\n        <Card.Options>\n          <Link to={`/finance/quotes/edit/${id}/to`}>\n            <Button color=\"secondary\" size=\"sm\">\n              {t('general.edit')}\n            </Button>\n          </Link> \n        </Card.Options>\n      </Card.Header>\n      <Card.Body>\n        <div className='mb-3'>\n          <div className=\"bold\">\n            {financeQuote.relationCompany}\n          </div>\n          <div>\n            {financeQuote.relationCompanyRegistration}\n          </div>\n          <div>\n            {financeQuote.relationCompanyTaxRegistration}\n          </div>\n        </div>\n          <div className=\"bold\">\n            {financeQuote.relationContactName}\n          </div>\n          <div>\n            {financeQuote.relationAddress}\n          </div>\n          <div>\n            {financeQuote.relationPostcode} {financeQuote.relationCity}\n          </div>\n          <div>\n            {financeQuote.relationCountry}\n          </div>\n      </Card.Body>\n      <Card.Footer>\n        {(financeQuote.business) && <span className='float-right'>\n          <Link to={`/relations/b2b/${financeQuote.business.id}/edit`}>\n            <Button icon=\"home\" color=\"link\">\n              {financeQuote.business.name}\n            </Button> \n          </Link>\n          </span>}\n        {(financeQuote.account) && <Link to={`/relations/accounts/${financeQuote.account.id}/profile`}>\n          <Button icon=\"user\" color=\"link\">\n            {financeQuote.account.fullName}\n          </Button> \n        </Link>}\n      </Card.Footer>\n    </Card>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditTo))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n} from \"tabler-react\";\n\nimport { GET_QUOTE_QUERY } from '../queries'\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport FinanceQuoteEditBase from \"./FinanceQuoteEditBase\"\nimport FinanceQuoteEditItems from \"./FinanceQuoteEditItems\"\nimport FinanceQuoteEditAdditional from \"./FinanceQuoteEditAdditional\"\nimport FinanceQuoteEditBalance from \"./FinanceQuoteEditBalance\"\nimport FinanceQuoteEditOptions from \"./FinanceQuoteEditOptions\"\nimport FinanceQuoteEditOrganization from \"./FinanceQuoteEditOrganization\"\nimport FinanceQuoteEditSummary from \"./FinanceQuoteEditSummary\"\nimport FinanceQuoteEditTo from \"./FinanceQuoteEditTo\"\n\nfunction FinanceQuoteEdit({t, match, history, location}) {\n  const id = match.params.id\n  const { loading, error, data, refetch } = useQuery(GET_QUOTE_QUERY, {\n    variables: {\n      id: id\n    },\n  })\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  \n  // Set back location for account profile\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n  \n  // Loading\n  if (loading) return <FinanceQuoteEditBase>{t('general.loading_with_dots')}</FinanceQuoteEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceQuoteEditBase>{t('general.error_sad_smiley')}</FinanceQuoteEditBase>\n  }\n\n  // Fetch back location from localStorage, if no value set, default back to /finance/quotes\n  let returnUrl = localStorage.getItem(CSLS.FINANCE_QUOTES_EDIT_RETURN)\n  if (!returnUrl) {\n    returnUrl = \"/finance/quotes\"\n  }\n  const export_url = \"/d/export/quote/pdf/\" + id\n  // const shopAccountQuoteUrl = `${window.location.protocol}//${window.location.host}/#/shop/account/quote/${id}`\n\n  return (\n    <FinanceQuoteEditBase>\n      <Page.Header title={t('finance.quote.title') + ' #' + data.financeQuote.quoteNumber}>\n        <div className=\"page-options d-flex\">\n          {/* Back */}\n          <Link to={returnUrl} \n                className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n          </Link>\n          {/* Export as PDF */}\n          <Button\n            color=\"secondary\"\n            icon=\"printer\"\n            className=\"mr-2\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url\n            )}\n          >\n            {t('general.pdf')} \n          </Button>\n          {/* Tools */}\n        </div>\n      </Page.Header>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <FinanceQuoteEditSummary \n            initialData={data}\n          />\n          {/* Activate code below once quotes are in shop accounts */}\n        {/* <Alert type=\"primary\">\n          <div className=\"mb-1\"><b>{t(\"finance.quote.account_profile_link\")}</b></div>\n          {shopAccountQuoteUrl}<br />\n          <div className=\"mt-1\"><small><Icon name=\"info\" /> {t(\"finance.quote.account_profile_link_explanation\")}</small></div>\n        </Alert> */}\n          <Grid.Row>\n            <Grid.Col md={6} ml={0}>\n              <FinanceQuoteEditOrganization organization={data.organization} />\n            </Grid.Col>\n            <Grid.Col md={6} ml={0}>\n              <FinanceQuoteEditTo financeQuote={data.financeQuote} />\n            </Grid.Col>\n          </Grid.Row>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          <FinanceQuoteEditBalance financeQuote={data.financeQuote} />\n          <FinanceQuoteEditOptions initialData={data} />\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <FinanceQuoteEditItems inputData={data} refetchQuote={refetch} />\n          <FinanceQuoteEditAdditional initialData={data} />\n        </Grid.Col>\n      </Grid.Row>\n    </FinanceQuoteEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceQuoteEditToBase({t, match, history, children, quoteNumber}) {\n  const pageTitle = t('finance.quote.edit_to.title') + ' #' + quoteNumber && quoteNumber\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={pageTitle} />\n            <Grid.Row md={12}>\n              {children}\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditToBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport {\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../ui/ButtonFormSubmit'\n\n\nconst FinanceQuoteEditToForm = ({ t, history, isSubmitting, errors, values, setFieldValue, setFieldTouched, inputData, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n          <Field \n            className=\"custom-switch-input\"\n            type=\"checkbox\" \n            name=\"customer\" \n            checked={values.customTo} \n            onChange={ (event) => {\n              setFieldTouched('customTo', true, true)\n              setFieldValue('customTo', !(values.customTo))\n            }}\n          />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('finance.quotes.edit_to.custom_to')}</span>\n        </Form.Label>\n        <ErrorMessage name=\"customTo\" component=\"div\" />   \n      </Form.Group>  \n      { !(values.customTo)  ?\n          <Form.Group label={t('relations.accounts.quote_to_business')}>\n            <Field component=\"select\" \n                  name=\"business\" \n                  className={(errors.business) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('relations.accounts.quote_to_account')}: {inputData.financeQuote.account.fullName}</option>\n              {inputData.businesses.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"business\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      : \n        <>\n          <Form.Group label={t(\"finance.quotes.relation_company\")}>\n            <Field type=\"text\" \n                    name=\"relationCompany\" \n                    className={(errors.relationCompany) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\"     \n            />\n            <ErrorMessage name=\"relationCompany\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_company_registration\")}>\n                <Field type=\"text\" \n                        name=\"relationCompanyRegistration\" \n                        className={(errors.relationCompanyRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCompanyRegistration\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_company_tax_registration\")}>\n                <Field type=\"text\" \n                        name=\"relationCompanyTaxRegistration\" \n                        className={(errors.relationCompanyTaxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCompanyTaxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Form.Group label={t(\"finance.quotes.relation_contact_name\")}>\n            <Field type=\"text\" \n                    name=\"relationContactName\" \n                    className={(errors.relationContactName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n            />\n            <ErrorMessage name=\"relationContactName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_address\")}>\n                <Field type=\"text\" \n                        name=\"relationAddress\" \n                        className={(errors.relationAddress) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationAddress\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_postcode\")}>\n                <Field type=\"text\" \n                        name=\"relationPostcode\" \n                        className={(errors.relationPostcode) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationPostcode\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_city\")}>\n                <Field type=\"text\" \n                        name=\"relationCity\" \n                        className={(errors.relationCity) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCity\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_country\")}>\n                <Field type=\"text\" \n                        name=\"relationCountry\" \n                        className={(errors.relationCountry) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCountry\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </>\n      }\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit disabled={isSubmitting} />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditToForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_QUOTE, GET_QUOTE_QUERY, GET_QUOTES_QUERY } from \"../queries\"\nimport FinanceQuoteEditToBase from \"./FinanceQuoteEditToBase\"\nimport FinanceQuoteEditToForm from \"./FinanceQuoteEditToForm\"\n\n\nfunction FinanceQuoteEditTo({ t, history, match }) {\n  const id = match.params.id\n  const returnUrl = `/finance/quotes/edit/${id}`\n  const { loading, error, data } = useQuery(GET_QUOTE_QUERY, {\n    variables: {\n      id: id\n    },\n  })\n  const [ updateQuote ] = useMutation(UPDATE_QUOTE)\n\n  // Loading\n  if (loading) return <FinanceQuoteEditToBase>{t('general.loading_with_dots')}</FinanceQuoteEditToBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceQuoteEditToBase>{t('general.error_sad_smiley')}</FinanceQuoteEditToBase>\n  }\n\n  console.log(data)\n    \n  let initialBusiness = \"\"\n  if (data.financeQuote.business) {\n    initialBusiness = data.financeQuote.business.id\n  }\n\n  return (\n    <FinanceQuoteEditToBase quoteNumber={data.financeQuote.quoteNumber} >\n      <Card title={t('general.to')} statusColor=\"blue\">\n        <Formik\n          initialValues={{ \n            customTo: data.financeQuote.customTo,\n            relationCompany: data.financeQuote.relationCompany, \n            relationCompanyRegistration: data.financeQuote.relationCompanyRegistration, \n            relationCompanyTaxRegistration: data.financeQuote.relationCompanyTaxRegistration, \n            relationContactName: data.financeQuote.relationContactName, \n            relationAddress: data.financeQuote.relationAddress, \n            relationPostcode: data.financeQuote.relationPostcode, \n            relationCity: data.financeQuote.relationCity, \n            relationCountry: data.financeQuote.relationCountry, \n            business: initialBusiness\n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                customTo: values.customTo,\n                relationCompany: values.relationCompany,\n                relationCompanyRegistration: values.relationCompanyRegistration,\n                relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n                relationContactName: values.relationContactName,\n                relationAddress: values.relationAddress,\n                relationPostcode: values.relationPostcode,\n                relationCity: values.relationCity,\n                relationCountry: values.relationCountry,\n                business: values.business\n              }\n            }, refetchQueries: [\n                {query: GET_QUOTE_QUERY, variables: {id:id}},\n                {query: GET_QUOTES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('finance.quote.toast_edit_to_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditToForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              inputData={data}\n              returnUrl={returnUrl}\n            >\n            </FinanceQuoteEditToForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceQuoteEditToBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditTo))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_QUOTE_GROUPS_QUERY = gql`\n  query FinanceQuoteGroupsQuery($archived: Boolean!) {\n    financeQuoteGroups(archived: $archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          name\n          nextId\n          expiresAfterDays\n          prefix\n          prefixYear\n          autoResetPrefixYear\n          terms\n          footer\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_QUOTE_GROUP_QUERY = gql`\n  query FinanceQuoteGroup($id: ID!) {\n    financeQuoteGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      expiresAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_QUOTE_GROUP = gql`\nmutation UpdateFinanceQuoteGroup($input: UpdateFinanceQuoteGroupInput!) {\n  updateFinanceQuoteGroup(input: $input) {\n    financeQuoteGroup {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ADD_QUOTE_GROUP = gql`\nmutation CreateFinanceQuoteGroup($input:CreateFinanceQuoteGroupInput!) {\n  createFinanceQuoteGroup(input: $input) {\n    financeQuoteGroup{\n      id\n    }\n  }\n}\n`\n\nexport const ARCHIVE_QUOTE_GROUP = gql`\nmutation ArchiveFinanceQuoteGroup($input: ArchiveFinanceQuoteGroupInput!) {\n  archiveFinanceQuoteGroup(input: $input) {\n    financeQuoteGroup {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction FinanceQuoteGroupsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showEditBack) ? \n                // Back for add or edit component\n                <ButtonBack returnUrl=\"/finance/quotes/groups\" className=\"mr-2\" />\n              :\n                // Back for list\n                <ButtonBack returnUrl=\"/finance/quotes\" className=\"mr-2\" />\n              }\n              <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financequotegroup\">\n                <ButtonAdd addUrl=\"/finance/quotes/groups/add\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteGroupsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_QUOTE_GROUPS_QUERY, ARCHIVE_QUOTE_GROUP } from \"./queries\"\nimport FinanceQuoteGroupsBase from './FinanceQuoteGroupsBase'\n\n\nfunction FinanceQuoteGroups({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.quote_groups.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_QUOTE_GROUPS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveQuoteGroup ] = useMutation(ARCHIVE_QUOTE_GROUP)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceQuoteGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceQuoteGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.quote_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n\n  const quoteGroups = data.financeQuoteGroups\n\n  return (\n    <FinanceQuoteGroupsBase>\n      <ContentCard cardTitle={t('finance.quote_groups.title')}\n                   headerContent={headerOptions}\n                   pageInfo={quoteGroups.pageInfo}\n                   hasCardBody={false}\n                   onLoadMore={() => {\n                   fetchMore({\n                     variables: {\n                       after: quoteGroups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeQuoteGroups.edges\n                        const pageInfo = fetchMoreResult.financeQuoteGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new quoteGroups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeQuoteGroups: {\n                                __typename: previousResult.financeQuoteGroups.__typename,\n                                edges: [ ...previousResult.financeQuoteGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.quote_groups.next_id')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.quote_groups.expires_after_days')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.prefix')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader />\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {quoteGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.nextId}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.expiresAfterDays}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.prefix} \n                    {(node.prefixYear) ? <span>[{t('general.year')}]<br /></span>: ''}\n                    {(node.autoResetPrefixYear) ? <Text.Small color=\"gray\">\n                      {t('finance.quote_groups.auto_reset_prefix_year')}\n                    </Text.Small>: ''}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/quotes/groups/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveQuoteGroup({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_QUOTE_GROUPS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const QUOTE_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    expiresAfterDays: Yup.number()\n      .moreThan(0, t('yup.field_above_0'))\n      .required(t('yup.field_required')),\n    nextId: Yup.number(),\n    prefix: Yup.string(),\n    prefixYear: Yup.boolean(),\n    autoResetPrefixYear: Yup.boolean(),\n    terms: Yup.string(),\n    footer: Yup.string(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nconst FinanceInvoiceGroupForm = ({ t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, returnUrl, edit=false }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.quote_groups.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.name')}>\n        <Field type=\"text\" \n                name=\"name\" \n                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        {(edit) ?\n        <Grid.Col>\n          <Form.Group label={t('finance.quote_groups.next_id')}>\n            <Field type=\"text\" \n                    name=\"nextId\" \n                    className={(errors.nextId) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"nextId\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col> : \"\"}\n        <Grid.Col>\n          <Form.Group label={t('finance.quote_groups.expires_after_days')}>\n            <Field type=\"text\" \n                    name=\"expiresAfterDays\" \n                    className={(errors.expiresAfterDays) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"expiresAfterDays\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.prefix')}>\n        <Field type=\"text\" \n                name=\"prefix\" \n                className={(errors.prefix) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"prefix\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"prefixYear\" \n                checked={values.prefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.quote_groups.prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"prefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoResetPrefixYear\" \n                checked={values.autoResetPrefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.quote_groups.auto_reset_prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoResetPrefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.terms')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"terms\", true, true)\n            setFieldValue(\"terms\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"footer\", true, true)\n            setFieldValue(\"footer\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.code')}>\n        <Field type=\"text\" \n                name=\"code\" \n                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button \n            type=\"button\" \n            color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_QUOTE_GROUPS_QUERY, ADD_QUOTE_GROUP } from './queries'\nimport { QUOTE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinanceQuoteGroupsBase from './FinanceQuoteGroupsBase';\nimport FinanceQuoteGroupForm from './FinanceQuoteGroupForm'\n\n\nfunction FinanceQuoteGroupAdd({ t, history }) {\n  const returnUrl = \"/finance/quotes/groups\"\n  const [addQuoteGroup] = useMutation(ADD_QUOTE_GROUP)\n\n  return (\n    <FinanceQuoteGroupsBase showEditBack={true}>\n      <Card title={t('finance.quote_groups.title_add')}>\n        <Formik\n          initialValues={{ \n            name: '', \n            displayPublic: true,\n            expiresAfterDays: 30,\n            prefix: 'QUO',\n            prefixYear: true,\n            autoResetPrefixYear: true,\n            terms: '',\n            footer: '',\n            code: '' \n          }}\n          validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addQuoteGroup({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  expiresAfterDays: values.expiresAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_QUOTE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.quote_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldValue, setFieldTouched }) => (\n            <FinanceQuoteGroupForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceQuoteGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteGroupAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_QUOTE_GROUPS_QUERY, GET_QUOTE_GROUP_QUERY, UPDATE_QUOTE_GROUP } from './queries'\nimport { QUOTE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceQuoteGroupForm from './FinanceQuoteGroupForm'\nimport FinanceQuoteGroupsBase from './FinanceQuoteGroupsBase';\n\n\nfunction FinanceQuoteGroupEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/quotes/groups\"\n  const cardTitle = t('finance.quote_groups.title_edit')\n  const { loading, error, data } = useQuery(GET_QUOTE_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateQuoteGroup ] = useMutation(UPDATE_QUOTE_GROUP)\n\n  if (loading) return (\n    <FinanceQuoteGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceQuoteGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.quote_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n                    \n  const initialData = data.financeQuoteGroup;\n\n  return (\n    <FinanceQuoteGroupsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic,\n            expiresAfterDays: initialData.expiresAfterDays,\n            nextId: initialData.nextId,\n            prefix: initialData.prefix,\n            prefixYear: initialData.prefixYear,\n            autoResetPrefixYear: initialData.autoResetPrefixYear,\n            terms: initialData.terms,\n            footer: initialData.footer,\n            code: initialData.code\n          }}\n          validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateQuoteGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  nextId: parseInt(values.nextId),\n                  expiresAfterDays: parseInt(values.expiresAfterDays),\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_QUOTE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.quote_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              edit={true}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceQuoteGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteGroupEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceTaxRatesBase({ t, history, children, showBack=false, returnUrl=\"/finance/taxrates\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n               {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financetaxrate\">\n                  <ButtonAdd addUrl={\"/finance/taxrates/add\"} />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRatesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_TAXRATES_QUERY = gql`\n  query FinanceTaxRates($after: String, $before: String, $archived: Boolean) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_TAXRATE_QUERY = gql`\n  query FinanceTaxRate($id: ID!) {\n    financeTaxRate(id:$id) {\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n`\n\nexport const ADD_TAXRATE = gql`\nmutation CreateFinanceTaxRate($input:CreateFinanceTaxRateInput!) {\n  createFinanceTaxRate(input: $input) {\n    financeTaxRate{\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_TAXRATE = gql`\nmutation UpdateFinanceTaxRate($input: UpdateFinanceTaxRateInput!) {\n  updateFinanceTaxRate(input: $input) {\n    financeTaxRate {\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_TAXRATE = gql`\nmutation ArchiveFinanceTaxRate($input: ArchiveFinanceTaxRateInput!) {\n  archiveFinanceTaxRate(input: $input) {\n    financeTaxRate {\n      id\n      archived\n    }\n  }\n}\n`\n","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase'\n\nimport { GET_TAXRATES_QUERY, ARCHIVE_TAXRATE } from \"./queries\"\n\nfunction FinanceTaxRates({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.taxrates.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_TAXRATES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveTaxrate ] = useMutation(ARCHIVE_TAXRATE)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  if (error) return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.glaccounts.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  const taxrates = data.financeTaxRates\n\n  // Empty list\n  if (!taxrates.edges.length) { return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.taxrates.empty_list') : t(\"finance.taxrates.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )}\n\n  return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={taxrates.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: taxrates.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeTaxRates.edges\n                        const pageInfo = fetchMoreResult.financeTaxRates.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new taxrates at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeTaxRates: {\n                                __typename: previousResult.financeTaxRates.__typename,\n                                edges: [ ...previousResult.financeTaxRates.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.percentage')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.rateType')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {taxrates.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.percentage} %\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.rateType}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/taxrates/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveTaxrate({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_TAXRATES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRates))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const TAX_RATE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    percentage: Yup.number()\n      .max(100)\n      .typeError(t('yup.field_has_to_be_number'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TAXRATES_QUERY, ADD_TAXRATE } from './queries'\nimport { TAX_RATE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase';\n\n\nfunction FinanceTaxRateAdd({t, history}) {\n  const returnUrl = \"/finance/taxrates\"\n  const [ addFinanceTaxrate ] = useMutation(ADD_TAXRATE)\n\n  return (\n    <FinanceTaxRatesBase showBack={true}>\n      <Card title={t('finance.taxrates.title_add')}>\n        <Formik\n            initialValues={{ name: \"\", percentage: \"\", rateType: \"IN\", code: \"\" }}\n            validationSchema={TAX_RATE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addFinanceTaxrate({ variables: {\n                  input: {\n                    name: values.name,\n                    percentage: values.percentage,\n                    rateType: values.rateType, \n                    code: values.code,\n                  }\n                }, refetchQueries: [\n                    {query: GET_TAXRATES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('finance.taxrates.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <FoForm>\n                  <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.percentage')}>\n                        <Field type=\"text\" \n                                name=\"percentage\" \n                                className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.rateType')}>\n                        <Field component=\"select\" \n                                name=\"rateType\" \n                                className={(errors.rateType) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\">\n                          <option value=\"IN\">{t('finance.taxrates.including')}</option>\n                          <option value=\"EX\">{t('finance.taxrates.excluding')}</option>\n                        </Field>\n                        <ErrorMessage name=\"rateType\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        color=\"primary\"\n                        className=\"pull-right\" \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button color=\"link\">\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                  </Card.Footer>\n              </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceTaxRatesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRateAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TAXRATES_QUERY, GET_TAXRATE_QUERY, UPDATE_TAXRATE } from './queries'\nimport { TAX_RATE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase';\n\n\nfunction FinanceTaxRateEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/taxrates\"\n  const cardTitle = t('finance.taxrates.title_edit')\n  const { loading, error, data } = useQuery(GET_TAXRATE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateTaxrate ] = useMutation(UPDATE_TAXRATE)\n\n  if (loading) return (\n    <FinanceTaxRatesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  if (error) return (\n    <FinanceTaxRatesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.taxrates.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  const initialData = data.financeTaxRate;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceTaxRatesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              percentage: initialData.percentage,\n              rateType: initialData.rateType,\n              code: initialData.code,\n            }}\n            validationSchema={TAX_RATE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateTaxrate({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    percentage: values.percentage,\n                    rateType: values.rateType,\n                    code: values.code,\n                  }\n                }, refetchQueries: [\n                    {query: GET_TAXRATES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('finance.taxrates.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.percentage')}>\n                        <Field type=\"text\" \n                              name=\"percentage\" \n                              className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.rateType')}>\n                        <Field component=\"select\" \n                              name=\"rateType\" \n                              className={(errors.rateType) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\">\n                          <option value=\"IN\">{t('finance.taxrates.including')}</option>\n                          <option value=\"EX\">{t('finance.taxrates.excluding')}</option>\n                        </Field>\n                        <ErrorMessage name=\"rateType\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceTaxRatesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRateEdit))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const TAX_SUMMARY_SCHEMA = Yup.object().shape({\n    dateStart: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Grid\n} from \"tabler-react\";\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nfunction FinanceTaxRatesSummaryFilter({ t, history, values, errors, data, isSubmitting, setFieldTouched=f=>f, setFieldValue=f=>f,  refetch }) {\n  console.log(errors)\n  return (\n    <FoForm>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateStart}\n              onChange={(date) => {\n                setFieldValue(\"dateStart\", date)\n                setFieldTouched(\"dateStart\", true)\n              }}\n              // onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.date_end')}>\n            <CSDatePicker \n              className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateEnd}\n              onChange={(date) => {\n                setFieldValue(\"dateEnd\", date)\n                setFieldTouched(\"dateEnd\", true)\n              }}\n            />\n            <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <br />\n          <Button \n            block\n            color=\"primary\"\n            className=\"pull-right mt-1\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('finance.taxrates_summary.set_dates')}\n          </Button>\n        </Grid.Col>\n      </Grid.Row>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummaryFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport moment from 'moment'\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport { TAX_SUMMARY_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport SiteWrapper from '../../SiteWrapper'\nimport FinanceTaxRatesSummaryFilter from \"./FinanceTaxRatesSummaryFilter\"\n\n\nfunction FinanceTaxRatesSummaryBase ({ t, history, children, refetch }) {\n  const dateStart = moment().startOf('month')\n  const dateEnd   = moment().endOf('month')\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} subTitle={t('finance.taxrates_summary.title')}>\n            <div className=\"page-options d-flex\">\n              {/* <Link to=\"/finance/invoices/groups\" \n                    className='btn btn-outline-secondary btn-sm'>\n                <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n              </Link> */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Formik \n                initialValues={{\n                  dateStart: new Date(dateStart),\n                  dateEnd: new Date(dateEnd)\n                }}\n                validationSchema={TAX_SUMMARY_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n                  refetch({\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateToLocalISO(values.dateEnd),\n                  })\n                  setSubmitting(false)                  \n                }}\n              >\n                {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n                <FinanceTaxRatesSummaryFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  handleChange={handleChange}\n                  setFieldTouched={setFieldTouched}\n                  setFieldValue={setFieldValue}\n                />\n                )}\n              </Formik>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummaryBase))\n\n\n\n// <Formik\n// initialValues={{ \n//   relationCompany: initialData.financeInvoice.relationCompany, \n//   relationCompanyRegistration: initialData.financeInvoice.relationCompanyRegistration, \n//   relationCompanyTaxRegistration: initialData.financeInvoice.relationCompanyTaxRegistration, \n//   relationContactName: initialData.financeInvoice.relationContactName, \n//   relationAddress: initialData.financeInvoice.relationAddress, \n//   relationPostcode: initialData.financeInvoice.relationPostcode, \n//   relationCity: initialData.financeInvoice.relationCity, \n//   relationCountry: initialData.financeInvoice.relationCountry, \n// }}\n// // validationSchema={INVOICE_GROUP_SCHEMA}\n// onSubmit={(values, { setSubmitting, setTouched }) => {\n//   console.log('submit values:')\n//   console.log(values)\n\n//   updateInvoice({ variables: {\n//     input: {\n//       id: match.params.id,\n//       relationCompany: values.relationCompany,\n//       relationCompanyRegistration: values.relationCompanyRegistration,\n//       relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n//       relationContactName: values.relationContactName,\n//       relationAddress: values.relationAddress,\n//       relationPostcode: values.relationPostcode,\n//       relationCity: values.relationCity,\n//       relationCountry: values.relationCountry\n//     }\n//   }, refetchQueries: [\n//       {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n//   ]})\n//   .then(({ data }) => {\n//       console.log('got data', data)\n//       toast.success((t('finance.invoice.toast_edit_to_success')), {\n//           position: toast.POSITION.BOTTOM_RIGHT\n//         })\n//       setSubmitting(false)\n//       setTouched({})\n//     }).catch((error) => {\n//       toast.error((t('general.toast_server_error')) +  error, {\n//           position: toast.POSITION.BOTTOM_RIGHT\n//         })\n//       console.log('there was an error sending the query', error)\n//       setSubmitting(false)\n//     })\n//   }}\n// >\n// {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n//   <FinanceInvoiceEditToForm\n//     isSubmitting={isSubmitting}\n//     errors={errors}\n//     values={values}\n//     touched={touched}\n//     handleChange={handleChange}\n//     setFieldTouched={setFieldTouched}\n//   >\n//   </FinanceInvoiceEditToForm>\n// )}\n// </Formik>","import { gql } from \"@apollo/client\"\n\nexport const GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY = gql`\n  query InsightFinanceTaxSummary($dateStart: Date!, $dateEnd: Date!) {\n    insightFinanceTaxRateSummary(dateStart:$dateStart, dateEnd: $dateEnd) {\n      dateStart\n      dateEnd\n      data {\n        financeTaxRate {\n          id\n          name\n          percentage\n          rateType        \n        }\n        subtotal\n        subtotalDisplay\n        tax\n        taxDisplay\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Dimmer,\n  Table, \n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesSummaryBase from \"./FinanceTaxRatesSummaryBase\"\nimport { GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY } from \"./queries\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\n\n\nfunction FinanceTaxRatesSummary({ t, location, history }) {\n  const cardTitle = t('finance.taxrates_summary.title')\n  const dateStart = moment().startOf('month')\n  const dateEnd   = moment().endOf('month')\n\n  // Set back location for edit invoice\n  // localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY, {\n    variables: {\n      dateStart: dateToLocalISO(dateStart),\n      dateEnd: dateToLocalISO(dateEnd)\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.taxrates_summary.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n\n  const taxRatesSummary = data.insightFinanceTaxRateSummary\n\n  // Empty list\n  if (!taxRatesSummary.data.length) { return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>\n          {t('finance.taxrates_summary.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )}\n\n  return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.taxrates_summary.title')}\n                  pageInfo={taxRatesSummary.pageInfo}\n                  hasCardBody={false}\n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.percentage')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates_summary.taxable_amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.tax')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {taxRatesSummary.data.map(({financeTaxRate, taxDisplay, subtotalDisplay }) => (\n              <Table.Row>\n                <Table.Col>{financeTaxRate.name}</Table.Col>\n                <Table.Col>{financeTaxRate.percentage} %</Table.Col>\n                <Table.Col>{subtotalDisplay}</Table.Col>\n                <Table.Col>{taxDisplay}</Table.Col>\n              </Table.Row>  \n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummary))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass InsightHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Insight home props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"insight.home.link_view\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"insight.title\")} />\n            <Grid.Row>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightclasspasses\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.classpasses.title\")}</h5>\n                      {t(\"insight.classpasses.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/classpasses\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightsubscriptions\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.subscriptions.title\")}</h5>\n                      {t(\"insight.subscriptions.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/subscriptions\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insighttrialpasses\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.trialpasses.title\")}</h5>\n                      {t(\"insight.trialpasses.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/trialpasses\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightrevenue\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.revenue.title\")}</h5>\n                      {t(\"insight.revenue.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/revenue\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightaccountsinactive\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.inactive_accounts.title\")}</h5>\n                      {t(\"insight.inactive_accounts.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/inactive_accounts\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightinstructorclassesmonth\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.instructor_classes_month.title\")}</h5>\n                      {t(\"insight.instructor_classes_month.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/instructor_classes_month\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(InsightHome))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction InsightInactiveAccountsBase({\n  t, \n  history, \n  match, \n  children, \n  showAdd=false, \n  showBack=false, \n  returnUrl=\"/insight/inactive_accounts\"}) \n{\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} >\n            <div className='page-options d-flex'>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"insightaccountinactive\">\n                  <ButtonAdd addUrl={`/insight/inactive_accounts/add`} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ? <ButtonBack returnUrl={returnUrl} /> : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INSIGHT_ACCOUNTS_INACTIVES = gql`\n  query InsightAccountInactives {\n    insightAccountInactives(first: 100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          noActivityAfterDate \n          countInactiveAccounts\n          countDeletedInactiveAccounts\n          createdAt\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INSIGHT_ACCOUNTS_INACTIVE = gql`\n  query InsightAccountInactive($id: ID!) {\n    insightAccountInactive(id: $id) {\n      id\n      noActivityAfterDate\n      countInactiveAccounts\n      createdAt\n      accounts {\n        edges {\n          node {\n            account {\n              id\n              fullName\n              email\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_INSIGHT_ACCOUNTS_INACTIVE = gql`\n  mutation CreateInsightAccountInactive($input: CreateInsightAccountInactiveInput!) {\n    createInsightAccountInactive(input: $input) {\n      insightAccountInactive {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_INSIGHT_ACCOUNTS_INACTIVE = gql`\n  mutation deleteInsightAccountInactive($input: DeleteInsightAccountInactiveInput!) {\n    deleteInsightAccountInactive(input: $input){\n      ok\n    }\n  }\n`\n\nexport const DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS = gql`\n  mutation deleteInsightAccountInactiveAccounts($input: DeleteInsightAccountInactiveAccountsInput!) {\n    deleteInsightAccountInactiveAccounts(input: $input){\n      ok\n    }\n  } \n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ContentCard from \"../../general/ContentCard\"\nimport InsightInactiveAccountsBase from './InsightInactiveAccountsBase'\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { GET_INSIGHT_ACCOUNTS_INACTIVES, DELETE_INSIGHT_ACCOUNTS_INACTIVE } from \"./queries\"\n\n\nfunction InsightInactiveAccounts({t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n  const cardTitle = t(\"insight.inactive_accounts.title\")\n\n  const { loading, error, data, fetchMore } = useQuery(GET_INSIGHT_ACCOUNTS_INACTIVES)\n  const [deleteInsightAccountsInactive] = useMutation(DELETE_INSIGHT_ACCOUNTS_INACTIVE)\n\n  // Loading\n  if (loading) return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </InsightInactiveAccountsBase>\n  )\n  // Error\n  if (error) return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('insight.inactive_accounts.error_loading')}</p>\n      </ContentCard>\n      </InsightInactiveAccountsBase>\n  )\n\n  console.log(data)\n\n  const insightAccountInactives = data.insightAccountInactives\n  // Empty list\n  if (!insightAccountInactives.edges.length) { return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle} >\n        <p>{t(\"insight.inactive_accounts.empty_list\")}</p>\n      </ContentCard>\n    </InsightInactiveAccountsBase>\n  )}\n\n  return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={insightAccountInactives.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: insightAccountInactives.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.insightAccountInactives.edges\n            const pageInfo = fetchMoreResult.insightAccountInactives.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  insightAccountInactives: {\n                    __typename: previousResult.insightAccountInactives.__typename,\n                    edges: [ ...previousResult.insightAccountInactives.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('insight.inactive_accounts.created_at')}</Table.ColHeader>\n              <Table.ColHeader>{t('insight.inactive_accounts.no_activity_after_date')}</Table.ColHeader>      \n              <Table.ColHeader>{t('insight.inactive_accounts.count_inactive_accounts')}</Table.ColHeader>      \n              <Table.ColHeader>{t('insight.inactive_accounts.count_deleted_inactive_accounts')}</Table.ColHeader>      \n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {insightAccountInactives.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.createdAt).format(dateTimeFormatMoment)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.noActivityAfterDate).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {node.countInactiveAccounts}\n                </Table.Col>\n                <Table.Col>\n                  {node.countDeletedInactiveAccounts}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/insight/inactive_accounts/view/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('insight.inactive_accounts.btn_view_inactive_accounts')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"insight.inactive_accounts.delete_confirm_msg\"),\n                        msgDescription: <p>{moment(node.created_at).format(dateTimeFormatMoment)} { \" - \" } \n                          {moment(node.noActivityAfterDate).format(dateFormat)}</p>,\n                        msgSuccess: t('insight.inactive_accounts.deleted'),\n                        deleteFunction: deleteInsightAccountsInactive,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_INSIGHT_ACCOUNTS_INACTIVES } \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </InsightInactiveAccountsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccounts))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport ButtonFormSubmit from '../../ui/ButtonFormSubmit'\nimport ButtonFormCancel from '../../ui/ButtonFormCancel'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nconst InsightInactiveAccountsForm = ({ t, history, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        {console.log(values)}\n        <Form.Group label={t(\"insight.inactive_accounts.no_activity_after_date\")}>\n          <CSDatePicker \n            className={(errors.noActivityAfterDate) ? \"form-control is-invalid\" : \"form-control\"} \n            selected={values.noActivityAfterDate}\n            onChange={(date) => {\n              setFieldValue(\"noActivityAfterDate\", date)\n              setFieldTouched(\"noActivityAfterDate\", true)\n            }}\n            onBlur={() => setFieldTouched(\"noActivityAfterDate\", true)}\n          />\n          <ErrorMessage name=\"noActivityAfterDate\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <ButtonFormSubmit disabled={isSubmitting} />\n          <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\n\nimport { GET_INSIGHT_ACCOUNTS_INACTIVES, ADD_INSIGHT_ACCOUNTS_INACTIVE } from './queries'\n// import { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport InsightInactiveAccountsBase from './InsightInactiveAccountsBase';\nimport InsightInactiveAccountsForm from './InsightInactiveAccountsForm'\n\n\nfunction InsightInactiveAccountsAdd({ t, history }) {\n  const returnUrl = \"/insight/inactive_accounts\"\n  const [ addInsightAccountsInactive ] = useMutation(ADD_INSIGHT_ACCOUNTS_INACTIVE)\n\n  return (\n    <InsightInactiveAccountsBase showBack={true}>\n      <Card title={t('insight.inactive_accounts.title_add')}>\n        <Formik\n          initialValues={{ noActivityAfterDate: new Date(moment().subtract(1, \"year\")) }}\n          // validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addInsightAccountsInactive({ variables: {\n                input: {\n                  noActivityAfterDate: dateToLocalISO(values.noActivityAfterDate), \n                }\n              }, refetchQueries: [\n                  {query: GET_INSIGHT_ACCOUNTS_INACTIVES}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('insight.inactive_accounts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n              <InsightInactiveAccountsForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </InsightInactiveAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_delete from \"../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonDelete({\n  t, \n  match, \n  history, \n  msgConfirm, \n  msgDescription, \n  msgSuccess, \n  deleteFunction, \n  deleteFunctionVariables, \n  className=\"\",\n  buttonClass=\"btn-link\",\n  buttonText=\"\",\n  buttonTextColor=\"text-red\"\n}) {\n  return (\n    <button className={`icon btn ${buttonClass} btn-sm ${className}`}\n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: <p>{msgConfirm}</p>,\n          msgDescription: msgDescription,\n          msgSuccess: msgSuccess,\n          deleteFunction: deleteFunction,\n          functionVariables: deleteFunctionVariables\n        })\n    }}>\n      <span className={buttonTextColor}>\n        <Icon prefix=\"fe\" name=\"trash-2\" /> {buttonText}\n      </span>\n    </button> \n  )\n}\n\n\nexport default withTranslation()(withRouter(ButtonDelete))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\n\nfunction InsightInactiveAccountsViewBase({t, history, match, children, subTitle, pageHeaderButtonList}) {\n  const returnUrl = `/insight/inactive_accounts`\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.inactive_accounts.title\")} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">\n                <Link to={returnUrl} \n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')}\n                </Link>\n                {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsViewBase))","\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Grid,\n  Card,\n  Table,\n} from \"tabler-react\"\n\nimport { GET_INSIGHT_ACCOUNTS_INACTIVE, DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS } from './queries'\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ButtonDelete from '../../ui/ButtonDelete'\nimport InsightInactiveAccountsViewBase from './InsightInactiveAccountsViewBase'\n\n\nfunction InsightInactiveAccountsView({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n  const id = match.params.id\n\n  const { loading, error, data } = useQuery(GET_INSIGHT_ACCOUNTS_INACTIVE, {\n    variables: { id: id },\n    pollInterval: 5000\n  })\n  const [deleteAccounts] = useMutation(DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS)\n\n  // Loading\n  if (loading) return (\n    <InsightInactiveAccountsViewBase>\n      <Card title={t(\"insight.inactive_accounts.card_title\")}>\n        <Card.Body>\n          <Dimmer active={true} loader={true}/>\n        </Card.Body>\n      </Card>\n    </InsightInactiveAccountsViewBase>\n  )\n  // Error\n  if (error) return (\n    <InsightInactiveAccountsViewBase>\n      <p>{t('insight.inactive_accounts.error_loading')}</p>\n    </InsightInactiveAccountsViewBase>\n  )\n\n  const insightAccountInactive = data.insightAccountInactive\n  console.log(insightAccountInactive)\n  const cardTitle = t(\"insight.inactive_accounts.card_title\") + \" \" + moment(insightAccountInactive.noActivityAfterDate).format(dateFormat)\n  const subTitle = t(\"general.generated on\") + \" \" + moment(insightAccountInactive.createdAt).format(dateTimeFormatMoment)\n\n  const pageHeaderButtonList = <ButtonDelete\n    msgConfirm={t(\"insight.inactive_accounts.accounts.delete_confirm_msg\")}\n    msgDescription={<p><b>{insightAccountInactive.countInactiveAccounts} {t(\"insight.inactive_accounts.accounts.count_will_be_deleted\")}</b></p>} \n    msgSuccess={t(\"insight.inactive_accounts.accounts.deleted\")}\n    deleteFunction={deleteAccounts} \n    deleteFunctionVariables={{\n      variables: {input: {id: id}}\n    }}\n    buttonClass=\"btn-danger ml-2\"\n    buttonText=\"Delete accounts\" \n    buttonTextColor=\"text-white\"\n  />\n\n  if (!insightAccountInactive.accounts.edges.length) return (\n    <InsightInactiveAccountsViewBase subTitle={subTitle}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"insight.inactive_accounts.accounts.empty_list\")}\n        </Card.Body>\n      </Card>\n    </InsightInactiveAccountsViewBase>\n  )\n\n  return (\n    <InsightInactiveAccountsViewBase subTitle={subTitle} pageHeaderButtonList={pageHeaderButtonList}>\n      <Grid.Row>\n        <Grid.Col>\n          <Card title={cardTitle}>\n            <Card.Alert color=\"primary\">\n              {t(\"insight.inactive_accounts.explanation_when_inactive\")}\n            </Card.Alert>\n            <small>\n              <Table cards >\n                <Table.Header>\n                  <Table.Row>\n                    <Table.ColHeader>\n                      {t(\"general.name\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.email\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.last_login\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.created_at\")}\n                    </Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {insightAccountInactive.accounts.edges.map(({ node }, index) => (\n                    <Table.Row>\n                      <Table.Col>\n                        {\n                          <Link to={`/relations/accounts/${node.account.id}/profile`}>\n                            {node.account.fullName}\n                          </Link>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        {node.account.email}\n                      </Table.Col>\n                      <Table.Col>\n                        {moment(node.account.lastLogin).format(dateTimeFormatMoment)}\n                      </Table.Col>\n                      <Table.Col>\n                        {moment(node.account.createdAt).format(dateTimeFormatMoment)}\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </small>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '', executionDate: new Date() }}\n          // validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType == \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputValues={inputValues}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card> */}\n    </InsightInactiveAccountsViewBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsView))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INSIGHT_CLASSPASSES_QUERY = gql`\nquery InsightAccountClasspasses($year: Int!) {\n  insightAccountClasspasses(year: $year) {\n    year\n    months {\n      month\n      sold\n      active\n    }\n  }\n}\n`\n","\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nconst InsightBackHome = ({ t }) => (\n  <div className=\"page-options d-flex\">\n    <Link to=\"/insight\" \n          className='btn btn-secondary'>\n        <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('insight.title')}\n    </Link>\n  </div>\n)\n\nexport default withTranslation()(InsightBackHome)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightClasspassesBase ({ t, history, children, year, refetch }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.classpasses\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, previousYear) \n\n                    refetch({year: previousYear})\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = parseInt(moment().format('YYYY'))\n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, currentYear) \n\n                    console.log(currentYear)\n                    \n                    refetch({year: currentYear})\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, nextYear) \n\n                    refetch({year: nextYear})\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            {children}\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightClasspassesBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { AreaChart, Area, XAxis, YAxis, Legend, Tooltip, ResponsiveContainer } from 'recharts'\n\nimport {\n  colors,\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { getMonthNamesShort } from '../../../tools/date_tools'\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { GET_INSIGHT_CLASSPASSES_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightClasspassesBase from './InsightClasspassesBase'\n\nfunction InsightClasspasses ({ t, history }) {\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR))\n  const export_url_active = \"/d/export/insight/classpasses/active/\" + year\n  const export_url_sold = \"/d/export/insight/classpasses/sold/\" + year\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_CLASSPASSES_QUERY, {\n    variables: { year: year },\n  })\n\n  if (loading) {\n    return (\n      <InsightClasspassesBase year={year} refetch={refetch}>\n        <Card title={t('general.chart')}>\n          <Dimmer active={true} loader={true} />\n        </Card>\n      </InsightClasspassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightClasspassesBase year={year} refetch={refetch}>\n        <Card title={t('general.chart')}>\n          {t(\"general.error_sad_smiley\")}\n        </Card>\n      </InsightClasspassesBase>\n    )\n  }\n\n  const monthNames = getMonthNamesShort(t)\n\n  // Add month name to data\n  const chartData = data.insightAccountClasspasses.months.map((item, index) => (\n    { ...item, monthName: monthNames[index] }\n  ))\n\n  return (\n    <InsightClasspassesBase year={year} refetch={refetch}>\n        <Grid.Col md={9}>\n          <Card title={t('general.chart')}>\n            <ResponsiveContainer width=\"100%\" aspect={2.5}>\n              <AreaChart\n                width={500}\n                height={300}\n                data={chartData}\n                margin={{\n                  top: 20,\n                  right: 20,\n                  left: 0,\n                  bottom: 20,\n                }}\n              >\n                <XAxis dataKey=\"monthName\"/>\n                <YAxis width={40} />\n                <Tooltip />\n                <Legend />\n                <Area type=\"monotone\" dataKey=\"sold\" stroke={colors[\"blue\"]} fillOpacity={0.4} fill={colors[\"blue\"]} />\n                <Area type=\"monotone\" dataKey=\"active\" stroke={colors[\"green\"]} fillOpacity={0.1} fill={colors[\"green\"]} />\n              </AreaChart>\n            </ResponsiveContainer>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.classpasses.sold.export_excel\")}\n          </Button>\n          {/* Export as active as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.classpasses.active.export_excel\")}\n          </Button>\n        </Grid.Col>\n    </InsightClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightClasspasses))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_REVENUE_QUERY = gql`\n  query InsightRevenueTotal($year: Int!) {\n    insightRevenueTotal(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueClasspasses(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueSubscriptions(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueEventTickets(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueOther(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Button,\n  Container,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightRevenueBase ({ t, history, children, year, refetch=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.revenue\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, previousYear) \n\n                    refetch({year: previousYear})\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = parseInt(moment().format('YYYY'))\n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, currentYear) \n                    \n                    refetch({year: currentYear})\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, nextYear) \n\n                    refetch({year: nextYear})\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n            {children}\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenueBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts'\nimport {\n  colors,\n  Dimmer,\n  Grid,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport { getMonthNamesShort } from '../../../tools/date_tools'\n\n\nfunction InsightRevenueDisplay({ \n  t, \n  history, \n  error, \n  loading, \n  cardTitle,\n  data\n }) {\n\n  if (loading) {\n    return (\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <Card title={cardTitle}>\n            <Card.Body>\n              <Dimmer loader={true} active={true} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n        </Grid.Col>\n      </Grid.Row>\n    )\n  }\n\n  if (error) {\n    <Grid.Row>\n      <Grid.Col md={9}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.error_sad_smiley\")}\n          </Card.Body>\n        </Card>\n      </Grid.Col>\n    </Grid.Row>\n  }\n\n\n\n  const monthNames = getMonthNamesShort(t)\n  // Add month name to data\n  const chartData = data.months.map((item, index) => (\n    { ...item, monthName: monthNames[index] }\n  ))\n\n  return (\n    <Grid.Row>\n      <Grid.Col md={9}>\n        <Card title={cardTitle}>\n          <ResponsiveContainer width=\"100%\" aspect={2.6}>\n            <BarChart\n              width={500}\n              height={300}\n              data={chartData}\n              margin={{\n                top: 10,\n                right: 20,\n                left: 0,\n                bottom: 10,\n              }}\n            >\n              <XAxis dataKey=\"monthName\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"total\" fill={colors['blue']} />\n              <Bar dataKey=\"subtotal\" stackId=\"a\" fill={colors['green']} />\n              <Bar dataKey=\"tax\" stackId=\"a\" fill={colors['orange']} />\n            </BarChart>\n          </ResponsiveContainer>\n          <Card.Footer>\n            {t(\"insight.revenue.total.explanation\")}\n          </Card.Footer>\n        </Card>\n      </Grid.Col>\n      <Grid.Col md={3}>\n        <Card title={t(\"general.data\")}>\n          <small>\n          <Table cards>\n            <Table.Body>\n              {data.months.map((item, index) => (\n                <Table.Row>\n                  <Table.Col className=\"cs-insight-data-table-cell\">\n                    {monthNames[index]}\n                  </Table.Col>\n                  <Table.Col className=\"cs-insight-data-table-cell text-right\">\n                    {item['totalDisplay']}\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </small>\n        </Card>\n        {/* Export as sold as excel sheet */}\n        {/* <Button\n          block\n          color=\"secondary\"\n          RootComponent=\"a\"\n          icon=\"download-cloud\"\n          onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n            t, doTokenRefresh, history, export_url_sold\n          )}\n        >\n          {t(\"insight.classpasses.sold.export_excel\")}\n        </Button> */}\n        {/* Export as active as excel sheet */}\n        {/* <Button\n          block\n          color=\"secondary\"\n          RootComponent=\"a\"\n          icon=\"download-cloud\"\n          onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n            t, doTokenRefresh, history, export_url_active\n          )}\n        >\n          {t(\"insight.classpasses.active.export_excel\")}\n        </Button> */}\n      </Grid.Col>\n    </Grid.Row>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenueDisplay))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { GET_REVENUE_QUERY } from './queries'\nimport InsightRevenueBase from './InsightRevenueBase'\nimport InsightRevenueDisplay from './InsightRevenueDisplay'\n\nfunction InsightRevenue ({ t, history }) {\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR))\n\n  const { loading, error, data, refetch } = useQuery(GET_REVENUE_QUERY, {\n    variables: { year: year }\n  })\n\n  return (\n    <InsightRevenueBase year={year} refetch={refetch}>\n      {/* Total */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.total\")}\n        data={data && data.insightRevenueTotal}\n      />\n      {/* Subscriptions */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.subscriptions\")}\n        data={data && data.insightRevenueSubscriptions}\n      />\n      {/* Classpasses */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.classpasses\")}\n        data={data && data.insightRevenueClasspasses}\n      />\n      {/* Event tickets */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.event_tickets\")}\n        data={data && data.insightRevenueEventTickets}\n      />\n      {/* Other */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.other\")}\n        data={data && data.insightRevenueOther}\n      />\n    </InsightRevenueBase> \n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenue))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INSIGHT_INSTRUCTOR_CLASSES_SCHEMA = Yup.object().shape({\n    year: Yup.number()\n      .required(t('yup.field_required')),\n    month: Yup.number()\n      .required(t('yup.field_required')),\n    instructor: Yup.string()\n      .required(t('yup.field_required')),\n  })\n","import { gql } from \"@apollo/client\"\n\nexport const GET_INSTRUCTORS_QUERY = gql`\nquery Instructors {\n    instructors(first: 1000) {\n    edges {\n      node {\n        id\n        fullName\n      }\n    }\n  }\n}\n`\n\nexport const GET_INSTRUCTORS_CLASSES_MONTH_CLASSES = gql`\nquery InsightInstructorClassesMonth($year:Int!, $month:Int!, $instructor: ID!) {\n  insightInstructorClassesMonth(year: $year, month:$month, instructor: $instructor) {\n    year\n    month\n    instructor\n    classes {\n      scheduleItemId,\n      frequencyType,\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      date\n    \ttimeStart\n      status\n      description\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Page\n} from \"tabler-react\"\n\nimport SiteWrapper from '../../SiteWrapper'\nimport InsightBackHome from '../InsightBackHome'\n\n\nfunction InsightInstructorClassesMonthBase({t, history, children}) {\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n            </div>\n          </Page.Header>\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInstructorClassesMonthBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst InsightInstructorClassesForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.year')}>\n              <Field type=\"number\" \n                      name=\"year\" \n                      className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.month')}>\n              <Field component=\"select\" \n                    name=\"month\" \n                    className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\"\n              >\n                <option value=\"1\" key={v4()}>{t(\"datetime.months.january\")}</option>\n                <option value=\"2\" key={v4()}>{t(\"datetime.months.february\")}</option>\n                <option value=\"3\" key={v4()}>{t(\"datetime.months.march\")}</option>\n                <option value=\"4\" key={v4()}>{t(\"datetime.months.april\")}</option>\n                <option value=\"5\" key={v4()}>{t(\"datetime.months.may\")}</option>\n                <option value=\"6\" key={v4()}>{t(\"datetime.months.june\")}</option>\n                <option value=\"7\" key={v4()}>{t(\"datetime.months.july\")}</option>\n                <option value=\"8\" key={v4()}>{t(\"datetime.months.august\")}</option>\n                <option value=\"9\" key={v4()}>{t(\"datetime.months.september\")}</option>\n                <option value=\"10\" key={v4()}>{t(\"datetime.months.october\")}</option>\n                <option value=\"11\" key={v4()}>{t(\"datetime.months.november\")}</option>\n                <option value=\"12\" key={v4()}>{t(\"datetime.months.december\")}</option>\n              </Field>\n              <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                    name=\"instructor\" \n                    className={(errors.instructor) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.instructors.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"instructor\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n            >\n              {t('insight.instructor_classes_month.find_classes')}\n            </Button>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(InsightInstructorClassesForm))","import React, { useContext } from 'react'\nimport { useQuery, useLazyQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { represent_class_status } from '../../schedule/classes/tools'\n\nimport { INSIGHT_INSTRUCTOR_CLASSES_SCHEMA } from './yupSchema'\nimport { GET_INSTRUCTORS_QUERY, GET_INSTRUCTORS_CLASSES_MONTH_CLASSES } from './queries'\nimport InsightInstructorClassesMonthBase from './InsightInstructorClassesMonthBase'\nimport InsightInstructorClassesForm from './InsightInstructorClassesForm';\n\n\nfunction InsightInstructorClassesMonth({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  // const [prepared, setPrepared] = useState(false)\n  const cardTitle = t(\"insight.instructor_classes_month.title\")\n\n  const { loading, error, data } = useQuery(GET_INSTRUCTORS_QUERY)\n  const [ getInstructoClassesInMonth, { \n    called: calledReport, \n    loading: loadingReport, \n    error: errorReport, \n    data: dataReport, \n  } ] = useLazyQuery( GET_INSTRUCTORS_CLASSES_MONTH_CLASSES )\n\n  if (loading) {\n    return (\n      <InsightInstructorClassesMonthBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n      </InsightInstructorClassesMonthBase>\n    )\n  }\n\n  if (error || errorReport) {\n    console.error(error)\n    return (\n      <InsightInstructorClassesMonthBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.error_sad_smiley\")}\n          </Card.Body>\n        </Card>\n      </InsightInstructorClassesMonthBase>\n    )\n  }\n\n  return (\n    <InsightInstructorClassesMonthBase>\n      <Card title={cardTitle}>\n        <Formik\n        initialValues={{ \n          year: moment().year(),\n          month: moment().month()+1,\n          instructor: \"\"\n        }}\n        validationSchema={INSIGHT_INSTRUCTOR_CLASSES_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            // execute lazy query to fetch classes for instructor\n            getInstructoClassesInMonth({\n              variables: { \n                year: parseInt(values.year),\n                month: parseInt(values.month),\n                instructor: values.instructor\n              }\n            })\n\n            setSubmitting(false)\n            // setPrepared(true)  \n        }}\n        >\n        {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n          <InsightInstructorClassesForm\n            inputData={data}\n            isSubmitting={isSubmitting}\n            setFieldValue={setFieldValue}\n            setFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n          />\n          )\n        }\n      </Formik>\n    </Card>\n\n    {/* Show loader */}\n    {(calledReport && loadingReport) ? <Card>\n      <Card.Body>\n        <Dimmer active={true} loader={true} /><br />\n        <div className=\"text-center\">\n          Loading...\n        </div>\n      </Card.Body>\n      </Card> : \"\"}\n    {/* Prepared & loaded lazy query */}\n    {(calledReport && dataReport) ? \n    // List instructor classes in this card\n      <Card title={t(\"\")}>\n        {console.log(dataReport)}\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {dataReport.insightInstructorClassesMonth.classes.map(({ \n              description,\n              date,\n              timeStart,\n              organizationClasstype,\n              organizationLocationRoom,\n              status\n             }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {represent_class_status(status)} {\" \"}\n                  {moment(date).format(dateFormat)} - {moment(`${date} ${timeStart}`).format(timeFormat)} <br />\n                  <small className=\"text-muted\">\n                    {description}\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {organizationClasstype.name}\n                </Table.Col>\n                <Table.Col>\n                  {organizationLocationRoom.organizationLocation.name} - {organizationLocationRoom.name}\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </Card>\n      : \"\"}\n    </InsightInstructorClassesMonthBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInstructorClassesMonth))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INSIGHT_SUBSCRIPTIONS_QUERY = gql`\n  query InsightAccountSubscriptions($year: Int!) {\n    insightAccountSubscriptions(year: $year) {\n      year\n      months {\n        month\n        sold\n        stopped\n        active\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Button,\n  Page,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n\nfunction InsightSubscriptionsBase ({ t, history, children, year, refetch=f=>f}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.subscriptions\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, previousYear) \n\n                    refetch({year: previousYear})\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = parseInt(moment().format('YYYY'))\n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, currentYear) \n                    \n                    refetch({year: currentYear})\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, nextYear) \n\n                    refetch({year: nextYear})\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          {children}\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightSubscriptionsBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { CartesianGrid, XAxis, YAxis, Legend, LineChart, Line, Tooltip, ResponsiveContainer } from 'recharts'\nimport moment from 'moment'\nimport {\n  colors,\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { getMonthNamesShort } from '../../../tools/date_tools'\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { GET_INSIGHT_SUBSCRIPTIONS_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightSubscriptionsBase from './InsightSubscriptionsBase'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, moment().format('YYYY')) \n} \n\n\nfunction InsightSubscriptions ({ t, history }) {\n  const cardTitle = t('general.chart')\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR))\n  const export_url_active = \"/d/export/insight/subscriptions/active/\" + year\n  const export_url_sold = \"/d/export/insight/subscriptions/sold/\" + year\n  const export_url_stopped = \"/d/export/insight/subscriptions/stopped/\" + year\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  console.log(year)\n\n\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_SUBSCRIPTIONS_QUERY, {\n    variables: { year: year }\n  })\n\n  if (loading) {\n    return (\n      <InsightSubscriptionsBase year={year} refetch={refetch}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n      </InsightSubscriptionsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightSubscriptionsBase year={year} refetch={refetch}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.error_sad_smiley\")}\n          </Card.Body>\n        </Card>\n      </InsightSubscriptionsBase>\n    )\n  }\n\n  const monthNames = getMonthNamesShort(t)\n\n  // Add month name to data\n  const chartData = data.insightAccountSubscriptions.months.map((item, index) => (\n    { ...item, monthName: monthNames[index] }\n  ))\n\n\n  return (\n    <InsightSubscriptionsBase year={year} refetch={refetch}>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <Card title={cardTitle}>\n            <ResponsiveContainer width=\"100%\" aspect={2.5}>\n              <LineChart\n                width={500}\n                height={300}\n                data={chartData}\n                margin={{\n                  top: 20,\n                  right: 20,\n                  left: 0,\n                  bottom: 20,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"monthName\"/>\n                <YAxis width={40} />\n                <Tooltip />\n                <Legend />\n                {/* <Area type=\"monotone\" dataKey=\"sold\" stroke={colors[\"green\"]} fillOpacity={0.4} fill={colors[\"green\"]} />\n                <Area type=\"monotone\" dataKey=\"stopped\" stroke={colors[\"red\"]} fillOpacity={0.4} fill={colors[\"red\"]} />\n                <Area type=\"monotone\" dataKey=\"active\" stroke={colors[\"blue\"]} fillOpacity={0.1} fill={colors[\"blue\"]} /> */}\n                <Line type=\"monotone\" dataKey=\"sold\" stroke={colors[\"green\"]} />\n                <Line type=\"monotone\" dataKey=\"stopped\" stroke={colors[\"red\"]} />\n                <Line type=\"monotone\" dataKey=\"active\" stroke={colors[\"blue\"]} />\n              </LineChart>\n            </ResponsiveContainer>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.subscriptions.sold.export_excel\")}\n          </Button>\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_stopped\n            )}\n          >\n            {t(\"insight.subscriptions.stopped.export_excel\")}\n          </Button>\n          {/* Export as active as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.subscriptions.active.export_excel\")}\n          </Button>\n        </Grid.Col>\n      </Grid.Row>\n    </InsightSubscriptionsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightSubscriptions))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_TRIALPASSES_QUERY = gql`\n  query AccountClasspasses($dateStartFrom: Date!, $dateStartUntil: Date!) {\n    accountClasspasses(first:100, organizationClasspass_TrialPass: true, dateStart_Gte: $dateStartFrom, dateStart_Lte:$dateStartUntil), {\n      edges {\n        node {\n          id\n          dateStart\n          dateEnd\n          account {\n            id\n            fullName\n            classpasses(organizationClasspass_TrialPass: false) {\n              edges {\n                node {\n                  id\n                  dateStart\n                  organizationClasspass{\n                    name\n                  }\n                }\n              }\n            }\n            subscriptions {\n              edges {\n                node {\n                  dateStart\n                  organizationSubscription {\n                    name\n                  }\n                }\n              }\n            }\n          }\n          organizationClasspass {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\n\nfunction InsightTrialpassesFilter({ t, history, values, errors, isSubmitting }) {\n  return (\n    <FoForm>\n      <Card>\n        <Card.Body>\n          <Form.Group label={t('general.year')}>\n            <Field type=\"number\" \n                    name=\"year\" \n                    className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.month')}>\n            <Field component=\"select\" \n                  name=\"month\" \n                  className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\"\n                  // onChange={(e) => {\n                  //   handleChange(e)\n                  //   setFieldTouched(\"financeTaxRate\", true, true)\n                  // }}\n            >\n              <option value=\"01\" key={v4()}>{t(\"datetime.months.january\")}</option>\n              <option value=\"02\" key={v4()}>{t(\"datetime.months.february\")}</option>\n              <option value=\"03\" key={v4()}>{t(\"datetime.months.march\")}</option>\n              <option value=\"04\" key={v4()}>{t(\"datetime.months.april\")}</option>\n              <option value=\"05\" key={v4()}>{t(\"datetime.months.may\")}</option>\n              <option value=\"06\" key={v4()}>{t(\"datetime.months.june\")}</option>\n              <option value=\"07\" key={v4()}>{t(\"datetime.months.july\")}</option>\n              <option value=\"08\" key={v4()}>{t(\"datetime.months.august\")}</option>\n              <option value=\"09\" key={v4()}>{t(\"datetime.months.september\")}</option>\n              <option value=\"10\" key={v4()}>{t(\"datetime.months.october\")}</option>\n              <option value=\"11\" key={v4()}>{t(\"datetime.months.november\")}</option>\n              <option value=\"12\" key={v4()}>{t(\"datetime.months.december\")}</option>\n            </Field>\n              <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n          <Button \n            block\n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('insight.trialpasses.set_month')}\n          </Button>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpassesFilter))","import CSLS from \"../../../tools/cs_local_storage\"\nimport { dateToLocalISO, getFirstDayMonth, getLastDayMonth } from '../../../tools/date_tools'\n\nexport function getListQueryVariables() {\n  let dateStartFrom = dateToLocalISO(getFirstDayMonth(\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  ))\n  let dateStartUntil = dateToLocalISO(getLastDayMonth(\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  ))\n\n  return {\n    dateStartFrom: dateStartFrom,\n    dateStartUntil: dateStartUntil\n  }\n}","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InsightTrialpassesFilter from './InsightTrialpassesFilter';\nimport { getListQueryVariables } from './tools'\n\n// Set some initial values for dates, if not found\n// if (!localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) {\n//   console.log('year from not found... defaulting to today...')\n//   localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, moment().format('YYYY')) \n// } \n\nfunction InsightTrialpassesBase ({ t, history, children, year, month, refetch=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"insight.trialpasses.title\") + \" \" + year + \"-\" + month}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              {/* <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = moment().format('YYYY')\n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List>  */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n            <Formik \n                initialValues={{\n                  year: localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n                  month: localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                  console.log(\"hello world\")\n                  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_YEAR, values.year)\n                  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_MONTH, values.month)\n\n                  const listVariables = getListQueryVariables()\n                  refetch(listVariables)\n                  setSubmitting(false)\n                  \n                }}\n              >\n                {({ isSubmitting, errors, values }) => (\n                <InsightTrialpassesFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                />\n                )}\n              </Formik>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpassesBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\nimport {\n  Card,\n  Icon,\n  List,\n  Table\n} from \"tabler-react\";\n\nimport { GET_TRIALPASSES_QUERY } from './queries'\nimport ContentCard from '../../general/ContentCard'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InsightTrialpassesBase from './InsightTrialpassesBase'\nimport { getListQueryVariables } from './tools'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_YEAR, moment().format('YYYY')) \n  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_MONTH, moment().format('MM')) \n} \n\nfunction InsightTrialpasses ({ t, history }) {\n  const year = localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR)\n  const month = localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  const cardTitle = t(\"insight.trialpasses.title\")\n\n  const listVariables = getListQueryVariables()\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_TRIALPASSES_QUERY, {\n    variables: listVariables\n  })\n\n  if (loading) {\n    return (\n      <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n        {t(\"general.loading_with_dots\")}\n      </InsightTrialpassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightTrialpassesBase>\n    )\n  }\n\n  console.log(data)\n  let accountClasspasses = data.accountClasspasses\n\n  // Empty list\n  if (!accountClasspasses.edges.length) {\n    return (\n      <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t(\"insight.trialpasses.empty_list\")}</p>\n          </Card.Body>\n        </Card>\n      </InsightTrialpassesBase>\n    )\n  }\n\n\n  return (\n    <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}\n          // headerContent={headerOptions}\n          hasCardBody={false}\n          pageInfo={accountClasspasses.pageInfo}\n          onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountClasspasses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountClasspasses.edges\n              const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new glaccounts at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountClasspasses.__typename,\n                      edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.products')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountClasspasses.edges.map(({ node }) => (\n                <Table.Row>\n                  <Table.Col>\n                    {node.organizationClasspass.name} <br />\n                    <small className='text-muted'>\n                      {node.dateStart}\n                    </small>\n                  </Table.Col>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.account.id}/profile/`}>\n                      {node.account.fullName}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col>\n                    <List unstyled>\n                      {node.account.classpasses.edges && node.account.classpasses.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"credit-card\" /> { \" \" }\n                          {node.organizationClasspass.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                    <List unstyled>\n                      {node.account.subscriptions.edges && node.account.subscriptions.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"edit\" /> { \" \" }\n                          {node.organizationSubscription.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </InsightTrialpassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpasses))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport HomeItemButton from \"../../ui/HomeItemButton\"\n\n\nclass OrganizationHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"School home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"organization.title\")} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"organization.home.products.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.classpasses.title\")}</h5>\n                    {t(\"organization.classpasses.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/classpasses\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.subscriptions.title\")}</h5>\n                    {t(\"organization.subscriptions.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/subscriptions\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"organizationproduct\">\n\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"organization.products.title\")}</h5>\n                      {t(\"organization.products.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/organization/products\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              {/* <Grid.Col md={3} lg={3}>\n                <Link to='/organization/appointment_categories'>\n                  <StampCard header={<small>{t('organization.appointments.title')}</small>} footer={t('')} color=\"blue\" icon=\"calendar\" />\n                </Link>\n              </Grid.Col> */}\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"organization.home.scheduling.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.locations.title\")}</h5>\n                    {t(\"organization.locations.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/locations\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.classtypes.title\")}</h5>\n                    {t(\"organization.classtypes.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/classtypes\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.levels.title\")}</h5>\n                    {t(\"organization.levels.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/levels\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.shifts.title\")}</h5>\n                    {t(\"organization.shifts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/shifts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.holidays.title\")}</h5>\n                    {t(\"organization.holidays.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/holidays\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"organization.home.accounts.title\")}</h4>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"organizationannouncement\">\n\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"organization.announcements.title\")}</h5>\n                      {t(\"organization.announcements.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/organization/announcements\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.discoveries.title\")}</h5>\n                    {t(\"organization.discoveries.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/discoveries\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.languages.title\")}</h5>\n                    {t(\"organization.languages.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/languages\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"organization.home.about.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.organization.title\")}</h5>\n                    {t(\"organization.organization.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.documents.title\")}</h5>\n                    {t(\"organization.documents.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/documents/T3JnYW5pemF0aW9uTm9kZToxMDA=\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.organization.branding.title\")}</h5>\n                    {t(\"organization.organization.branding.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=/branding\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationHome))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ORGANIZATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .required(t('yup.field_required')),\n    address: Yup.string(),\n    phone: Yup.string(),\n    email: Yup.string()\n      .email(t('yup.email')),\n    registration: Yup.string(),\n    taxRegistration: Yup.string(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nconst OrganizationForm = ({ \n  t, \n  history, \n  isSubmitting, \n  errors, \n  values, \n  setFieldTouched, \n  setFieldValue,\n}) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group label={t('general.name')}>\n          <Field type=\"text\" \n                  name=\"name\" \n                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.address')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"address\"\n            initialValue={values.address}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"address\", e.target.getContent())\n              setFieldTouched(\"address\", true, true)\n            }}\n          />\n          <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('organization.organization.registration')}>\n              <Field type=\"text\" \n                      name=\"registration\" \n                      className={(errors.registration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"registration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('organization.organization.tax_registration')}>\n              <Field type=\"text\" \n                      name=\"taxRegistration\" \n                      className={(errors.taxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"taxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n          color=\"primary\"\n          // className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.submit')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nfunction OrganizationEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            <div className=\"page-options d-flex\">\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('organization.organization.title_edit')}</Card.Title>\n              </Card.Header>\n              {children}\n            </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationEditBase))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY } from './queries'\nimport { ORGANIZATION_SCHEMA } from './yupSchema'\nimport OrganizationForm from './OrganizationForm'\nimport OrganizationEditBase from \"./OrganizationEditBase\"\n\nconst UPDATE_ORGANIZATION = gql`\n  mutation UpdateOrganization($input: UpdateOrganizationInput!) {\n    updateOrganization(input: $input) {\n      organization {\n        id\n        name\n      }\n    }\n  }\n`\n\n\nfunction OrganizationEdit({t, match, history}) {\n  const id = match.params.id\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {\n      id: id\n  }})\n\n  if (loading) return (\n    <OrganizationEditBase>\n      {t(\"general.loading_with_dots\")}\n    </OrganizationEditBase>\n  )\n  if (error) return (\n    <OrganizationEditBase>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </OrganizationEditBase>\n  )\n\n  const initialData = data.organization\n\n  return (\n \n    <OrganizationEditBase>\n      <Formik\n        initialValues={{ \n          name: initialData.name, \n          address: initialData.address,\n          phone: initialData.phone,\n          email: initialData.email,\n          registration: initialData.registration,\n          taxRegistration: initialData.taxRegistration,\n        }}\n        validationSchema={ORGANIZATION_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateOrganization({ variables: {\n            input: {\n              id: match.params.id,\n              name: values.name,\n              address: values.address,\n              phone: values.phone,\n              email: values.email,\n              registration: values.registration,\n              taxRegistration: values.taxRegistration,\n            }\n          }})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('organization.organization.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <OrganizationForm \n            isSubmitting={isSubmitting}\n            values={values}\n            errors={errors}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n          />\n        )}\n      </Formik>\n    </OrganizationEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction OrganizationBrandingBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h3>{t('organization.organization.branding.title')}</h3>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBrandingBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Card,\n    Form,\n    Grid,\n    Icon,\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport ButtonFormSubmit from '../../../ui/ButtonFormSubmit'\n\n\nfunction OrganizationBrandingEditColorsForm({ t, history, errors, formTitle, isSubmitting }) {\n  return (\n    <FoForm>\n      <Card title={formTitle}>\n        <Card.Body>\n          <Card.Alert color=\"info\">\n            <Icon name=\"info\" /> {t(\"organization.branding.colors_explanation\")}\n          </Card.Alert>\n        </Card.Body>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col md={3}>\n              <Form.Group label={t('organization.branding.color_background')}>\n                <Field type=\"color\" \n                      name=\"colorBackground\" \n                      className={(errors.colorBackground) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"colorBackground\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Form.Group label={t('organization.branding.color_text')}>\n                <Field type=\"color\" \n                      name=\"colorText\" \n                      className={(errors.colorText) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"colorText\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Form.Group label={t('organization.branding.color_accent')}>\n                <Field type=\"color\" \n                      name=\"colorAccent\" \n                      className={(errors.colorAccent) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"colorAccent\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={3}>   \n              <Form.Group label={t('organization.branding.color_secondary')}>\n                <Field type=\"color\" \n                      name=\"colorSecondary\" \n                      className={(errors.colorSecondary) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"colorSecondary\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <ButtonFormSubmit disabled={isSubmitting} />\n        </Card.Footer>\n      </Card>\n    </FoForm>\n  )\n}\n  \n  \n  export default withTranslation()(withRouter(OrganizationBrandingEditColorsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Button,\n  GalleryCard,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport { GET_ORGANIZATION_QUERY, UPDATE_ORGANIZATION } from '../queries'\nimport OrganizationBrandingBase from \"./OrganizationBrandingBase\"\nimport OrganizationBrandingEditColorsForm from \"./OrganizationBrandingEditColorsForm\"\n\n\nfunction OrganizationBranding({t, match, history}) {\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {\n      id: id\n  }})\n  const [ updateOrganization ] = useMutation(UPDATE_ORGANIZATION)\n\n  if (loading) return (\n    <OrganizationBrandingBase>\n      {t(\"general.loading_with_dots\")}\n    </OrganizationBrandingBase>\n  )\n  if (error) return (\n    <OrganizationBrandingBase>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </OrganizationBrandingBase>\n  )\n\n  const organization = data.organization\n\n  return (\n \n    <OrganizationBrandingBase>\n        <Grid.Row>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_login')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoLogin}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoLogin`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_invoice')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoInvoice}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoInvoice`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_email')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoEmail}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoEmail`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_shop_header')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoShopHeader}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoShopHeader`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_self_checkin')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoSelfCheckin}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoSelfCheckin`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n        </Grid.Row>\n        {/* Colors */}\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <h3>{t('organization.branding.title_colors')}</h3>\n            <Formik\n              initialValues={{ \n                colorBackground: organization.brandingColorBackground, \n                colorText: organization.brandingColorText, \n                colorAccent: organization.brandingColorAccent, \n                colorSecondary: organization.brandingColorSecondary, \n              }}\n              // validationSchema={LEVEL_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                  updateOrganization({ variables: {\n                    input: {\n                      id: id,\n                      brandingColorBackground: values.colorBackground,\n                      brandingColorText: values.colorText,\n                      brandingColorAccent: values.colorAccent,\n                      brandingColorSecondary: values.colorSecondary,\n                    }\n                  }, refetchQueries: [\n                      {query: GET_ORGANIZATION_QUERY, variables: {id: id }}\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data);\n                      setSubmitting(false)\n                      toast.success((t('organization.branding.toast_save_colors_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                      setSubmitting(false)\n                    })\n              }}\n              >\n              {({ isSubmitting, errors }) => (\n                <OrganizationBrandingEditColorsForm \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                />\n              )}\n            </Formik>\n          </Grid.Col>\n        </Grid.Row>\n    </OrganizationBrandingBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBranding))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm } from 'formik'\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n\n\nconst OrganizationBrandingEditForm = ({ \n  t, \n  history, \n  formTitle,\n  isSubmitting, \n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n}) => (\n    <FoForm>\n      <Card title={formTitle}>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.custom_file_input_label')}>\n                <div className=\"custom-file\">\n                  <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                  <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                    {fileInputLabel}\n                  </label>\n                </div>\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationBrandingEditForm))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY, UPDATE_ORGANIZATION } from '../queries'\nimport OrganizationBrandingBase from \"./OrganizationBrandingBase\"\nimport OrganizationBrandingEditForm from \"./OrganizationBrandingEditForm\"\n\n\nfunction OrganizationBrandingEdit({t, match, history}) {\n  const id = match.params.id\n  const updateField = match.params.update_field\n  const returnUrl = `/organization/edit/${id}/branding`\n\n  let formTitle = \"\"\n  switch (updateField) {\n    case \"logoLogin\":\n      formTitle = t(\"organization.branding.logo_login\")\n      break\n    default:\n      break\n  }\n\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  return (\n \n    <OrganizationBrandingBase>\n      <Formik\n        initialValues={{}}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            id: id\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            switch(updateField) {\n              case \"logoLogin\":\n                inputVars.logoLoginFileName = fileName\n                inputVars.logoLogin = b64_enc_file\n                break\n              case \"logoInvoice\":\n                inputVars.logoInvoiceFileName = fileName\n                inputVars.logoInvoice = b64_enc_file\n                break\n              case \"logoEmail\":\n                inputVars.logoEmailFileName = fileName\n                inputVars.logoEmail = b64_enc_file\n                break\n              case \"logoShopHeader\":\n                inputVars.logoShopHeaderFileName = fileName\n                inputVars.logoShopHeader = b64_enc_file\n                break\n              case \"logoSelfCheckin\":\n                inputVars.logoSelfCheckinFileName = fileName\n                inputVars.logoSelfCheckin = b64_enc_file\n                break\n              default:\n                break              \n            }\n            \n            updateOrganization({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_ORGANIZATION_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                setSubmitting(false)\n                history.push(returnUrl)\n                toast.success((t('organization.branding.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            toast.error(t(\"general.please_select_a_file\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <OrganizationBrandingEditForm \n            isSubmitting={isSubmitting}\n            formTitle={formTitle}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n          />\n        )}\n      </Formik>\n    </OrganizationBrandingBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBrandingEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationAnnouncementsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"organization.title\")} >\n          <div className='page-options d-flex'>\n            {(showEditBack) ?\n              <ButtonBack returnUrl=\"/organization/announcements\" />\n            :\n              <HasPermissionWrapper permission=\"add\"\n                          resource=\"organizationlevel\">\n                <ButtonAdd addUrl=\"/organization/announcements/add\" />\n              </HasPermissionWrapper>\n            }\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementsBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayShop\n          displayBackend\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ANNOUNCEMENT_QUERY = gql`\n  query OrganizationAnnouncement($id: ID!) {\n    organizationAnnouncement(id:$id) {\n      id\n      displayPublic\n      displayShop\n      displayBackend\n      title\n      content\n      dateStart\n      dateEnd\n      priority\n    }\n  }\n`\n\nexport const ADD_ANNOUNCEMENT = gql`\n  mutation CreateOrganizationAnnouncement($input:CreateOrganizationAnnouncementInput!) {\n    createOrganizationAnnouncement(input: $input) {\n      organizationAnnouncement {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ANNOUNCEMENT = gql`\n  mutation UpdateOrganizationAnnouncement($input: UpdateOrganizationAnnouncementInput!) {\n    updateOrganizationAnnouncement(input: $input) {\n      organizationAnnouncement {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ANNOUNCEMENT = gql`\nmutation DeleteOrganizationAnnouncement($input: DeleteOrganizationAnnouncementInput!) {\n  deleteOrganizationAnnouncement(input: $input) {\n    ok\n  }\n}\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Button,\n  Icon,\n  Table\n} from \"tabler-react\"\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ContentCard from \"../../general/ContentCard\"\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport OrganizationAnnouncementsBase from \"./OrganizationAnnouncementsBase\"\n\nimport { GET_ANNOUNCEMENTS_QUERY, DELETE_ANNOUNCEMENT } from \"./queries\"\n\nfunction OrganizationAnnouncements({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ANNOUNCEMENTS_QUERY)\n  const [ deleteAnnouncement ] = useMutation(DELETE_ANNOUNCEMENT)\n\n  const cardTitle = t('organization.announcements.title')\n\n  // Loading\n  if (loading) return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.announcements.error_loading')}</p>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n\n  const organizationAnnouncements = data.organizationAnnouncements\n\n  // Empty list\n  if (!organizationAnnouncements.edges.length) { return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.announcements.empty_list')}</p>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )}\n\n  return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}\n                    pageInfo={organizationAnnouncements.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: organizationAnnouncements.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationAnnouncements.edges\n                        const pageInfo = fetchMoreResult.organizationAnnouncements.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new organizationAnnouncements at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationAnnouncements: {\n                                __typename: previousResult.organizationAnnouncements.__typename,\n                                edges: [ ...previousResult.organizationAnnouncements.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.display_public')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.backend')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.priority')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                  {organizationAnnouncements.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col key={v4()}>\n                        {node.title}\n                      </Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayPublic} /></Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayShop} /></Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayBackend} /></Table.Col>\n                      <Table.Col>{moment(node.dateStart).format(dateFormat)}</Table.Col>\n                      <Table.Col>{(node.dateEnd) ? moment(node.dateEnd).format(dateFormat): \"\"}</Table.Col>\n                      <Table.Col>{node.priority}</Table.Col>\n                      <Table.Col className=\"text-right\" key={v4()}>\n                        <Link to={`/organization/announcements/edit/${node.id}`}>\n                          <Button className='btn-sm' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                        <button \n                          className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"organization.announcements.delete_confirm_msg\"),\n                              msgDescription: <p><br />{node.title}</p>,\n                              msgSuccess: t('organization.announcements.deleted'),\n                              deleteFunction: deleteAnnouncement,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_ANNOUNCEMENTS_QUERY} \n                              ]}\n                            })\n                        }}>\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\n// const OrganizationLevels = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_LEVELS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationLevels: levels}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <p>{t('organization.levels.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!levels.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={levels.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: levels.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationLevels.edges\n//                                     const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new levels at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationLevels: {\n//                                             __typename: previousResult.organizationLevels.__typename,\n//                                             edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {levels.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Link to={\"/organization/announcements/add\"}\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(OrganizationAnnouncements))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ANNOUNCEMENT_SCHEMA = Yup.object().shape({\n    title: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    content: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n    priority: Yup.number()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nfunction OrganizationAnnouncementForm({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayPublic\" \n                  checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayShop\" \n                  checked={values.displayShop} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_shop')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayShop\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayBackend\" \n                  checked={values.displayBackend} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_backend')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayBackend\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.title')}>\n              <Field type=\"text\" \n                      name=\"title\" \n                      className={(errors.title) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"title\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('organization.announcements.content')}>\n              <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"content\"\n                initialValue={values.content}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldTouched(\"content\", true)\n                  setFieldValue(\"content\", e.target.getContent())\n                }}\n                />\n              <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.priority')}>\n              <Field type=\"text\" \n                      name=\"priority\" \n                      className={(errors.priority) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"priority\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \n  \nexport default withTranslation()(withRouter(OrganizationAnnouncementForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationAnnouncementsBase from './OrganizationAnnouncementsBase';\nimport { GET_ANNOUNCEMENTS_QUERY, ADD_ANNOUNCEMENT } from './queries'\nimport { ANNOUNCEMENT_SCHEMA } from './yupSchema'\nimport OrganizationAnnouncementForm from './OrganizationAnnouncementForm'\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\n\nfunction OrganizationAnnouncementAdd({t, history}) {\n  const returnUrl = \"/organization/announcements\"\n  const [addAnnouncement] = useMutation(ADD_ANNOUNCEMENT)\n  \n  return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.announcements.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              displayPublic: false,\n              displayShop: false,\n              displayBackend: false,\n              title: '', \n              content: '',\n              dateStart: new Date(),\n              dateEnd: new Date(),\n              priority: 100,\n            }}\n            validationSchema={ANNOUNCEMENT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n              let inputValues = {\n                displayPublic: values.displayPublic,\n                displayBackend: values.displayBackend,\n                displayShop: values.displayShop,\n                title: values.title, \n                content: values.content,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateToLocalISO(values.dateEnd),\n                priority: parseInt(values.priority)\n              }\n\n              addAnnouncement({ variables: {\n                input: inputValues\n              }, refetchQueries: [\n                  {query: GET_ANNOUNCEMENTS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.announcements.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                <OrganizationAnnouncementForm \n                  isSubmitting={isSubmitting}\n                  values={values}\n                  errors={errors}\n                  setFieldTouched={setFieldTouched}\n                  setFieldValue={setFieldValue}\n                  returnUrl={returnUrl}\n                />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementAdd))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationAnnouncementsBase from \"./OrganizationAnnouncementsBase\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { GET_ANNOUNCEMENTS_QUERY, GET_ANNOUNCEMENT_QUERY, UPDATE_ANNOUNCEMENT } from './queries'\nimport { ANNOUNCEMENT_SCHEMA } from './yupSchema'\nimport OrganizationAnnouncementForm from './OrganizationAnnouncementForm'\n\n\nfunction OrganizationAnnouncementEdit({t, history, match}) {\n  const announcementId = match.params.id\n  const cardTitle = t(\"organization.announcements.title_edit\")\n  const returnUrl = \"/organization/announcements\"\n  \n  const { loading, error, data } = useQuery(GET_ANNOUNCEMENT_QUERY, { variables: {\n    id: announcementId\n  }})\n  const [updateAnnouncement] = useMutation(UPDATE_ANNOUNCEMENT)\n\n  if (loading) return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"general.loading_with_dots\")}\n        </Card.Body>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n\n  if (error) return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"general.error_sad_smiley\")}\n        </Card.Body>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n\n  const organizationAnnouncement = data.organizationAnnouncement\n  \n  return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n              initialValues={{ \n                displayPublic: organizationAnnouncement.displayPublic,\n                displayShop: organizationAnnouncement.displayShop,\n                displayBackend: organizationAnnouncement.displayBackend,\n                title: organizationAnnouncement.title, \n                content: organizationAnnouncement.content,\n                dateStart: new Date(organizationAnnouncement.dateStart),\n                dateEnd: new Date(organizationAnnouncement.dateEnd),\n                priority: organizationAnnouncement.priority,\n              }}\n              validationSchema={ANNOUNCEMENT_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                let inputValues = {\n                  id: announcementId,\n                  displayPublic: values.displayPublic,\n                  displayBackend: values.displayBackend,\n                  displayShop: values.displayShop,\n                  title: values.title, \n                  content: values.content,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateToLocalISO(values.dateEnd),\n                  priority: parseInt(values.priority)\n                }\n\n                updateAnnouncement({ variables: {\n                  input: inputValues\n                }, refetchQueries: [\n                    {query: GET_ANNOUNCEMENTS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.announcements.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n              }}\n              >\n              {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                  <OrganizationAnnouncementForm \n                    isSubmitting={isSubmitting}\n                    values={values}\n                    errors={errors}\n                    setFieldTouched={setFieldTouched}\n                    setFieldValue={setFieldValue}\n                    returnUrl={returnUrl}\n                  />\n              )}\n          </Formik>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationClasspassesBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/classpasses\" />           \n              :\n                <React.Fragment>\n                  <Link to=\"/organization/classpasses/groups\" \n                    className='btn btn-secondary mr-2'>\n                    <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n                  </Link>\n                  <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasspass\">\n                    <ButtonAdd addUrl=\"/organization/classpasses/add\" />\n                  </HasPermissionWrapper>    \n                </React.Fragment>          \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSPASSES_QUERY = gql`\n  query OrganizationClasspasses($after: String, $before: String, $archived: Boolean) {\n    organizationClasspasses(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          trialPass\n          name\n          description\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          validity\n          validityUnit\n          validityUnitDisplay\n          classes\n          unlimited\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_CLASSPASS_QUERY = gql`\n  query OrganizationClasspass($id: ID!, $after: String, $before: String) {\n    organizationClasspass(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      trialPass\n      name\n      description\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      validity\n      validityUnit\n      validityUnitDisplay\n      classes\n      unlimited\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_CLASSPASS = gql`\nmutation CreateClasspass($input: CreateOrganizationClasspassInput!) {\n  createOrganizationClasspass(input: $input) {\n    organizationClasspass {\n      id\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSPASS = gql`\n  mutation UpdateOrganizationClasspass($input: UpdateOrganizationClasspassInput!) {\n    updateOrganizationClasspass(input: $input) {\n      organizationClasspass {\n        id\n      }\n    }\n  }\n`\n\nexport const ARCHIVE_CLASSPASS = gql`\nmutation ArchiveOrganizationClasspass($input: ArchiveOrganizationClasspassInput!) {\n  archiveOrganizationClasspass(input: $input) {\n    organizationClasspass {\n      id\n      archived\n    }\n  }\n}\n`\n","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase'\n\nimport { GET_CLASSPASSES_QUERY, ARCHIVE_CLASSPASS } from \"./queries\"\n\n\nfunction OrganizationClasspasses({t, history}) {\n  const cardTitle = t('organization.classpasses.title')\n  let [archived, setArchived] = useState(false)\n\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_CLASSPASSES_QUERY, {\n    variables: { archived: archived },\n    fetchPolicy: \"network-only\"\n  })\n  const [ archiveClasspass ] = useMutation(ARCHIVE_CLASSPASS)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.classpasses.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  let classpasses = data.organizationClasspasses\n\n  // Empty list\n  if (!classpasses.edges.length) { return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.classpasses.empty_list') : t(\"organization.classpasses.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )}\n\n  return (\n    <OrganizationClasspassesBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={classpasses.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: classpasses.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationClasspasses.edges\n            const pageInfo = fetchMoreResult.organizationClasspasses.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new memberships at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationClasspasses: {\n                    __typename: previousResult.organizationClasspasses.__typename,\n                    edges: [ ...previousResult.organizationClasspasses.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader>{t('organization.classpasses.trial_pass')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.validity')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classpasses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayShop} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.trialPass} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.unlimited) ? t('general.unlimited') : node.classes }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay} <br />\n                    {(node.financeTaxRate) ? \n                      <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                      : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.validity} <br />\n                    <span className=\"text-muted\">\n                      {node.validityUnitDisplay}\n                    </span>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/classpasses/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveClasspass({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                      </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspasses))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n  .min(3, t('yup.min_len_3'))\n  .required(t('yup.field_required')),\n  price: Yup.number()\n    .required(t('yup.field_required')),\n  financeTaxRate: Yup.string()\n    .required(t('yup.field_required')),\n  validity: Yup.number()\n    .positive(t('yup.positive_number_required'))\n    .required(t('yup.field_required')),\n  validityUnit: Yup.string()\n    .required(t('yup.field_required')),\n  classes: Yup.number(),\n  quickStatsAmount: Yup.number()\n})\n\n","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Grid,\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\n\nclass OrganizationClasspassForm extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization classpass form props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const returnUrl = \"/organization/classpasses\"\n    const initialData = this.props.initialData\n    const isSubmitting = this.props.isSubmitting\n    const setFieldValue = this.props.setFieldValue\n    const setFieldTouched = this.props.setFieldTouched\n    const errors = this.props.errors\n    const values = this.props.values\n\n    return (\n        <FoForm>\n            <Card.Body> \n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group>\n                  <Form.Label className=\"custom-switch\">\n                      <Field \n                      className=\"custom-switch-input\"\n                      type=\"checkbox\" \n                      name=\"displayPublic\" \n                      checked={values.displayPublic} />\n                      <span className=\"custom-switch-indicator\" ></span>\n                      <span className=\"custom-switch-description\">{t('organization.classpass.public')}</span>\n                  </Form.Label>\n                  <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                </Form.Group>      \n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group>\n                    <Form.Label className=\"custom-switch\">\n                        <Field \n                        className=\"custom-switch-input\"\n                        type=\"checkbox\" \n                        name=\"displayShop\" \n                        checked={values.displayShop} />\n                        <span className=\"custom-switch-indicator\" ></span>\n                        <span className=\"custom-switch-description\">{t('organization.classpass.shop')}</span>\n                    </Form.Label>\n                    <ErrorMessage name=\"displayShop\" component=\"div\" />   \n                </Form.Group> \n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group>\n                  <Form.Label className=\"custom-switch\">\n                      <Field \n                      className=\"custom-switch-input\"\n                      type=\"checkbox\" \n                      name=\"trialPass\" \n                      checked={values.trialPass} />\n                      <span className=\"custom-switch-indicator\" ></span>\n                      <span className=\"custom-switch-description\">{t('organization.classpass.trial_pass')}</span>\n                  </Form.Label>\n                  <ErrorMessage name=\"displayShop\" component=\"div\" />   \n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>            \n            <Form.Group label={t('general.name')} >\n                <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.description')}>\n                <Editor\n                  tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                  textareaName=\"description\"\n                  initialValue={values.description}\n                  init={tinymceBasicConf}\n                  onBlur={(e) => {\n                    setFieldTouched(\"description\", true)\n                    setFieldValue(\"description\", e.target.getContent())\n                  }}\n                />\n                <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.price')}>\n                    <Field type=\"text\" \n                        name=\"price\" \n                        className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                    <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.taxrate')}>\n                  <Field component=\"select\" \n                          name=\"financeTaxRate\" \n                          className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  {console.log(\"query data in classpass add:\")}\n                  {console.log(initialData)}\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeTaxRates.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.validity')}>\n                  <Field type=\"text\" \n                      name=\"validity\" \n                      className={(errors.validity) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                  <ErrorMessage name=\"validity\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.validity_unit')}>\n                  <Field component=\"select\" \n                          name=\"validityUnit\" \n                          className={(errors.validityUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"DAYS\" key={v4()}>{t('validity.days')}</option>\n                  <option value=\"WEEKS\" key={v4()}>{t('validity.weeks')}</option>\n                  <option value=\"MONTHS\" key={v4()}>{t('validity.months')}</option>\n                  </Field>\n                  <ErrorMessage name=\"validityUnit\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"unlimited\" \n                    checked={values.unlimied} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('general.unlimited')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"unlimited\" component=\"div\" />   \n            </Form.Group>  \n            { (values.unlimited) ? \"\" :\n            <Form.Group label={t('general.classes')}>\n                <Field type=\"text\" \n                        name=\"classes\" \n                        className={(errors.classes) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"classes\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> } \n            {/* <Form.Group label={t('general.membership')}>\n                <Field component=\"select\" \n                        name=\"organizationMembership\" \n                        className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.membership_not_required\")}</option>\n                {initialData.organizationMemberships.edges.map(({ node }) =>\n                    <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n                </Field>\n                <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>  */}\n            { (values.unlimited) ? \n                    <Form.Group label={t('general.quickStatsAmount')}>\n                    <Field type=\"text\" \n                            name=\"quickStatsAmount\" \n                            className={(errors.quickStatsAmount) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"quickStatsAmount\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    : \"\"\n            }\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.glaccount')}>\n                  <Field component=\"select\" \n                          name=\"financeGlaccount\" \n                          className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeGlaccounts.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.costcenter')}>\n                  <Field component=\"select\" \n                          name=\"financeCostcenter\" \n                          className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeCostcenters.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n                <Button \n                className=\"pull-right\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n                >\n                {t('general.submit')}\n                </Button>\n                <Button\n                type=\"button\" \n                color=\"link\" \n                onClick={() => history.push(returnUrl)}\n                >\n                    {t('general.cancel')}\n                </Button>\n            </Card.Footer>\n        </FoForm>\n    ) \n  }\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase';\nimport OrganizationClasspassForm from \"./OrganizationClasspassForm\"\n\n\nfunction OrganizationClasspassAdd({t, match, history}) {\n  const cardTitle = t('organization.classpasses.title_add')\n  const returnUrl = \"/organization/classpasses\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createClasspass] = useMutation(CREATE_CLASSPASS)\n\n  if (loading) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n                    \n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  return (\n    <OrganizationClasspassesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            displayShop: true,\n            trialPass: false,\n            name: \"\",\n            description: \"\",\n            price: 0,\n            financeTaxRate: \"\",\n            validity: 1,\n            validityUnit: \"MONTHS\",\n            classes: 1,\n            unlimited: false,\n            quickStatsAmount: 0,\n            financeGlaccount: \"\",\n            financeCostcenter: \"\"\n          }}\n          validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              createClasspass({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  trialPass: values.trialPass,\n                  name: values.name,\n                  description: values.description,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  validity: parseInt(values.validity),\n                  validityUnit: values.validityUnit,\n                  classes: parseInt(values.classes),\n                  unlimited: values.unlimited,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpasses.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationClasspassForm \n              initialData = {initialData}\n              isSubmitting = {isSubmitting}\n              setFieldValue = {setFieldValue}\n              setFieldTouched = {setFieldTouched}\n              errors = {errors}\n              values = {values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSPASS_QUERY, UPDATE_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase'\nimport OrganizationClasspassForm from \"./OrganizationClasspassForm\"\n\n\nfunction OrganizationClasspassEdit({ t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.classpasses.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASSPASS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateClasspass] = useMutation(UPDATE_CLASSPASS)\n\n  if (loading) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  let initialTaxRate = \"\"\n  if (initialData.organizationClasspass.financeTaxRate) {\n    initialTaxRate = initialData.organizationClasspass.financeTaxRate.id\n  }\n\n  let initialGlaccount = \"\"\n  if (initialData.organizationClasspass.financeGlaccount) {\n    initialGlaccount =  initialData.organizationClasspass.financeGlaccount.id\n  } \n\n  let initialCostcenter = \"\"\n  if (initialData.organizationClasspass.financeCostcenter) {\n    initialCostcenter =  initialData.organizationClasspass.financeCostcenter.id\n  } \n\n  return (\n    <OrganizationClasspassesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.organizationClasspass.displayPublic,\n            displayShop: initialData.organizationClasspass.displayShop,\n            trialPass: initialData.organizationClasspass.trialPass,\n            name: initialData.organizationClasspass.name,\n            description: initialData.organizationClasspass.description,\n            price: initialData.organizationClasspass.price,\n            financeTaxRate: initialTaxRate,\n            validity: initialData.organizationClasspass.validity,\n            validityUnit: initialData.organizationClasspass.validityUnit,\n            classes: initialData.organizationClasspass.classes,\n            unlimited: initialData.organizationClasspass.unlimited,\n            quickStatsAmount: initialData.organizationClasspass.quickStatsAmount,\n            financeGlaccount:  initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateClasspass({ variables: {\n                input: {\n                  id: match.params.id,\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  trialPass: values.trialPass,\n                  name: values.name,\n                  description: values.description,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  validity: parseInt(values.validity),\n                  validityUnit: values.validityUnit,\n                  classes: parseInt(values.classes),\n                  unlimited: values.unlimited,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('organization.classpasses.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationClasspassForm \n              initialData = {initialData}\n              isSubmitting = {isSubmitting}\n              setFieldValue = {setFieldValue}\n              setFieldTouched = {setFieldTouched}\n              errors = {errors}\n              values = {values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationClasspassesGroupsBase({ t, history, children, showAdd=false, returnUrl=\"/organization/classpasses\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasspassgroup\">\n                  <ButtonAdd addUrl=\"/organization/classpasses/groups/add\" className='ml-2' />\n                </HasPermissionWrapper> \n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspassesGroupsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSPASS_GROUPS_QUERY = gql`\n  query OrganizationClasspassGroups($after: String, $before: String) {\n    organizationClasspassGroups(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_CLASSPASS_GROUP_QUERY = gql`\n  query OrganizationClasspassGroup($id: ID!) {\n    organizationClasspassGroup(id:$id) {\n      id\n      name\n      description\n    }\n  }\n`\n\n\nexport const GET_CLASSPASS_GROUP_PASSES_QUERY = gql`\n  query GetPassesAndGroupMembership($after: String, $before: String, $id:ID!) {\n    organizationClasspasses(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationClasspassGroup(id: $id) {\n      id\n      name\n      description\n      organizationClasspasses {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_CLASSPASS_GROUP = gql`\nmutation CreateOrganizationClasspassGroup($input:CreateOrganizationClasspassGroupInput!) {\n  createOrganizationClasspassGroup(input: $input) {\n    organizationClasspassGroup{\n      id\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSPASS_GROUP = gql`\nmutation UpdateOrganizationClasspassGroup($input: UpdateOrganizationClasspassGroupInput!) {\n  updateOrganizationClasspassGroup(input: $input) {\n    organizationClasspassGroup {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const DELETE_CLASSPASS_GROUP = gql`\n  mutation DeleteClasspassGroup($input: DeleteOrganizationClasspassGroupInput!) {\n    deleteOrganizationClasspassGroup(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const ADD_CARD_TO_GROUP = gql`\n  mutation AddCardToGroup($input: CreateOrganizationClasspassGroupClasspassInput!) {\n    createOrganizationClasspassGroupClasspass(input:$input) {\n      organizationClasspassGroupClasspass {\n        id\n        organizationClasspass {\n          id\n          name\n        }\n        organizationClasspassGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_CARD_FROM_GROUP = gql`\n  mutation DeleteCardFromGroup($input: DeleteOrganizationClasspassGroupClasspassInput!) {\n    deleteOrganizationClasspassGroupClasspass(input:$input) {\n      ok\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from \"./OrganizationClasspassesGroupsBase\"\n\nimport { GET_CLASSPASS_GROUPS_QUERY, DELETE_CLASSPASS_GROUP } from \"./queries\"\n\n\nfunction OrganizationClasspassesGroups({ t, history}) {\n  const { loading, error, data, fetchMore } = useQuery(GET_CLASSPASS_GROUPS_QUERY)\n  const [deleteClasspassGroup] = useMutation(DELETE_CLASSPASS_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <p>{t('organization.classpass_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  \n  const classpass_groups = data.organizationClasspassGroups\n\n  // Empty list\n  if (!classpass_groups.edges.length) { return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <p>{t('organization.classpass_groups.empty_list')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )} \n\n  \n  // We have data\n  return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}\n                    pageInfo={classpass_groups.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: classpass_groups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationClasspassGroups.edges\n                        const pageInfo = fetchMoreResult.organizationClasspassGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new classpass_groups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationClasspassGroups: {\n                                __typename: previousResult.organizationClasspassGroups.__typename,\n                                edges: [ ...previousResult.organizationClasspassGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {classpass_groups.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.description.substring(0, 24)}\n                    </Table.Col>\n                    <Table.Col className=\"text-right\" key={v4()}>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classpasses/groups/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classpasses/groups/edit/passes/\" + node.id)}\n                                color=\"secondary\">\n                          {t('organization.classpasses.groups.edit_passes')}\n                        </Button>\n                      <button className=\"icon btn btn-link btn-sm float-right\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t(\"organization.classpasses.groups.delete_confirm_msg\"),\n                            msgDescription: <p>{node.name}</p>,\n                            msgSuccess: t('organization.classpasses.groups.deleted'),\n                            deleteFunction: deleteClasspassGroup,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_CLASSPASS_GROUPS_QUERY} \n                            ]}\n                          })\n                      }}>\n                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                      </button>\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n   )\n\n}\n\n\n\n// const OrganizationClasspassesGroups = ({ t, history }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")}>\n//           <div className=\"page-options d-flex\">\n//             <Link to=\"/organization/classpasses\" \n//                   className='btn btn-outline-secondary btn-sm'>\n//                 <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('organization.classpasses.title')}\n//             </Link>\n//           </div>\n//         </Page.Header>\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_CLASSPASS_GROUPS_QUERY} >\n//              {({ loading, error, data: {organizationClasspassGroups: classpass_groups}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <p>{t('organization.classpass_groups.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n                \n//                 // Empty list\n//                 if (!classpass_groups.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <p>{t('organization.classpass_groups.empty_list')}</p>\n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}\n//                                pageInfo={classpass_groups.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: classpass_groups.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationClasspassGroups.edges\n//                                     const pageInfo = fetchMoreResult.organizationClasspassGroups.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new classpass_groups at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationClasspassGroups: {\n//                                             __typename: previousResult.organizationClasspassGroups.__typename,\n//                                             edges: [ ...previousResult.organizationClasspassGroups.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                         <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {classpass_groups.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/groups/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/groups/edit/passes/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('organization.classpasses.groups.edit_passes')}\n//                                       </Button>\n//                                   </Table.Col>\n//                                   {/* <Mutation mutation={ARCHIVE_CLASSPASS_GROUP} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_CLASSPASS_GROUPS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation> */}\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationclasspassgroup\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/classpasses/groups/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.classpass_groups.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// )\n\nexport default withTranslation()(withRouter(OrganizationClasspassesGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { GET_CLASSPASS_GROUPS_QUERY, ADD_CLASSPASS_GROUP } from './queries'\nimport { CLASSPASS_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupAdd({t, history}) {\n  const returnUrl = \"/organization/classpasses/groups\"\n  const [ addClasspassGroup ] = useMutation(ADD_CLASSPASS_GROUP)\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={t('organization.classpass_groups.title_add')}>\n        <Formik\n          initialValues={{ name: '', description: '' }}\n          validationSchema={CLASSPASS_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addClasspassGroup({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description, \n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASS_GROUPS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpass_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FoForm>\n                  <Card.Body>\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    <Form.Group label={t('general.description')}>\n                      <Field type=\"text\" \n                              name=\"description\" \n                              className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        color=\"primary\"\n                        className=\"pull-right\" \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button color=\"link\">\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                      {(isSubmitting) ? \n                        <Alert type=\"primary\" hasExtraSpace>\n                          <strong>{t('general.please_wait')}</strong> {t('organization.classpass_groups.toast_creating_might_take_a_while')}\n                        </Alert> : \n                        \"\"\n                      }\n                  </Card.Footer>\n              </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Card,\n  Dimmer,\n  Button,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\nimport { GET_CLASSPASS_GROUPS_QUERY, GET_CLASSPASS_GROUP_QUERY, UPDATE_CLASSPASS_GROUP } from './queries'\nimport { CLASSPASS_GROUP_SCHEMA } from './yupSchema'\n\n\nfunction OrganizationClasspassGroupEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.classpass_groups.title_edit')\n  const returnUrl = \"/organization/classpasses/groups\"\n  const { loading, error, data } = useQuery(GET_CLASSPASS_GROUP_QUERY, {\n    variables: {id: id}\n  })\n  const [ updateClasspassGroup ] = useMutation(UPDATE_CLASSPASS_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n    \n\n  const initialData = data.organizationClasspassGroup;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            description: initialData.description,\n          }}\n          validationSchema={CLASSPASS_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateClasspassGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  description: values.description,\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASS_GROUPS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpass_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n              <FoForm>\n                  <Card.Body>    \n                      <Form.Group label={t('general.name')} >\n                        <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('general.description')}>\n                        <Field type=\"text\" \n                                name=\"description\" \n                                className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        className=\"pull-right\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        type=\"submit\"\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button\n                          type=\"button\" \n                          color=\"link\" \n                        >\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                  </Card.Footer>\n              </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Icon,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_CLASSPASS_GROUP_PASSES_QUERY, ADD_CARD_TO_GROUP, DELETE_CARD_FROM_GROUP } from './queries'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupEditPasses({ t, match, history }) {\n  const groupId = match.params.id\n  const returnUrl = \"/organization/classpasses/groups\"\n  let cardTitle = t('organization.classpass_group_classpasses.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASSPASS_GROUP_PASSES_QUERY, { \n    variables: { id: groupId }\n  })\n  const [ addCardToGroup ] = useMutation(ADD_CARD_TO_GROUP)\n  const [ deleteCardFromGroup ] = useMutation(DELETE_CARD_FROM_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const passes = data.organizationClasspasses\n  const group = data.organizationClasspassGroup\n\n  cardTitle = `${cardTitle} - ${group.name}`\n  let group_passes = {}\n  if (group.organizationClasspasses.edges) {\n    group.organizationClasspasses.edges.map(({ node}) => (\n      group_passes[node.id] = true\n    ))\n  }\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {passes.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {(node.id in group_passes) ? \n                        <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                      }\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    {console.log((node.id in group_passes))}\n                    {(!(node.id in group_passes)) ?\n                      // Add\n                      <Table.Col className=\"text-right text-green\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.add_to_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked add\")\n                            let pass_id = node.id\n                            addCardToGroup({ variables: {\n                              input: {\n                                organizationClasspass: pass_id,\n                                organizationClasspassGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_CLASSPASS_GROUP_PASSES_QUERY, variables: {\"id\": groupId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.added_to_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                          {t('general.add_to_group')} \n                        </Button>\n                      </Table.Col>\n                      :\n                      // Delete\n                      <Table.Col className=\"text-right text-red\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.delete_from_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked delete\")\n                            console.log(node.id)\n                            let pass_id = node.id\n                            deleteCardFromGroup({ variables: {\n                              input: {\n                                organizationClasspass: pass_id,\n                                organizationClasspassGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_CLASSPASS_GROUP_PASSES_QUERY, variables: {\"id\": groupId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.deleted_from_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                          {t('general.delete_from_group')}\n                        </Button>\n                      </Table.Col>\n                      }\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupEditPasses))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let archived = localStorage.getItem(CSLS.ORGANIZATION_CLASSTYPES_ARCHIVED)\n  if (archived === null) {\n    archived = false\n  }\n\n  let queryVars = {\n    archived: (archived === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSTYPES_QUERY = gql`\nquery OrganizationClasstypes($after: String, $before: String, $archived: Boolean) {\n  organizationClasstypes(first: 15, before: $before, after: $after, archived: $archived) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        archived\n        displayPublic\n        name\n        description\n        urlWebsite\n        urlImage\n        urlImageThumbnailSmall\n      }\n    }\n  }\n}\n`\n\nexport const GET_CLASSTYPE_QUERY = gql`\nquery getOrganizationClasstype($id: ID!) {\n  organizationClasstype(id:$id) {\n    id\n    archived\n    name\n    description\n    displayPublic\n    urlWebsite\n    urlImage\n  }\n}\n`\n\nexport const ADD_CLASSTYPE = gql`\nmutation CreateOrganizationClasstype($input: CreateOrganizationClasstypeInput!) {\n  createOrganizationClasstype(input: $input) {\n    organizationClasstype {\n      id\n      archived\n      name\n      description\n      displayPublic\n      urlWebsite\n      image\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSTYPE = gql`\n  mutation UpdateOrganizationClasstype($input: UpdateOrganizationClasstypeInput!) {\n    updateOrganizationClasstype(input: $input) {\n      organizationClasstype {\n        id\n        archived\n        name\n        description\n        displayPublic\n        urlWebsite\n      }\n    }\n  }\n`\n\nexport const UPDATE_CLASSTYPE_IMAGE = gql`\nmutation UploadOrganizationClasstypeImage($input: UploadOrganizationClasstypeImageInput!) {\n  uploadOrganizationClasstypeImage(input: $input) {\n    organizationClasstype {\n      id\n      archived\n      name\n      description\n      displayPublic\n      urlWebsite\n      image\n    }\n  }\n}\n`\n\nexport const ARCHIVE_CLASSTYPE = gql`\nmutation ArchiveOrganizationClasstype($input: ArchiveOrganizationClasstypeInput!) {\n    archiveOrganizationClasstype(input: $input) {\n      organizationClasstype {\n        id\n        archived\n      }\n    }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationClasstypesBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title=\"Organization\">\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl={\"/organization/classtypes\"} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasstype\">\n                  <ButtonAdd addUrl=\"/organization/classtypes/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>          \n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypesBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Avatar,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport { get_list_query_variables } from './tools'\nimport { GET_CLASSTYPES_QUERY, ARCHIVE_CLASSTYPE } from \"./queries\"\nimport OrganizationClasstypesBase from \"./OrganizationClasstypesBase\"\n\n\nfunction OrganizationClasstypes({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_CLASSTYPES_QUERY, { \n    variables: get_list_query_variables()\n  })\n  const [archiveClasstype] = useMutation(ARCHIVE_CLASSTYPE)\n\n  if (loading) return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}>\n        <p>{t('organization.classtypes.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  \n  const classtypes = data.organizationClasstypes\n  // Empty list\n  if (!classtypes.edges.length) { return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}\n                  headerContent={headerOptions}>\n        <p>\n        {(!archived) ? t('organization.classtypes.empty_list') : t(\"organization.classtypes.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )}   \n\n  return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}\n                   headerContent={headerOptions}\n                   hasCardBody={false}\n                   pageInfo={classtypes.pageInfo}\n                   onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: classtypes.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationClasstypes.edges\n                        const pageInfo = fetchMoreResult.organizationClasstypes.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationClasstypes: {\n                                __typename: previousResult.organizationClasstypes.__typename,\n                                edges: [ ...previousResult.organizationClasstypes.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classtypes.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                        <React.Fragment>\n                          <Button className='btn-sm' \n                                  onClick={() => history.push(\"/organization/classtypes/edit_image/\" + node.id)}\n                                  color=\"secondary\">\n                            <Icon name=\"image\" />\n                          </Button>\n                          <Button className='btn-sm' \n                                  onClick={() => history.push(\"/organization/classtypes/edit/\" + node.id)}\n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </React.Fragment>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          archiveClasstype({ variables: {\n                            input: {\n                              id: node.id,\n                              archived: !node.archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_CLASSTYPES_QUERY, variables: get_list_query_variables()}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (node.archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypes))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSTYPE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    urlWebsite: Yup.string()\n      .url(t(\"yup.url\")),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_CLASSTYPES_QUERY, ADD_CLASSTYPE } from './queries'\nimport { CLASSTYPE_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from './tools'\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\n\n\nfunction OrganizationClasstypeAdd({t, history}) {\n  const returnUrl = \"/organization/classtypes\"\n  const [addClasstype] = useMutation(ADD_CLASSTYPE)\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.classtypes.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: \"\", description: \"\", displayPublic: true, urlWebsite: '' }}\n          validationSchema={CLASSTYPE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addClasstype({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description,\n                  displayPublic: values.displayPublic,\n                  urlWebsite: values.urlWebsite,\n                  image: values.image\n                },\n                // file: values.image\n              }, refetchQueries: [\n                  {query: GET_CLASSTYPES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classtypes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                <FoForm>\n                  {/* {console.log('values in FoForm')}\n                  {console.log(values)} */}\n                    <Card.Body>\n                        <Form.Group>\n                          <Form.Label className=\"custom-switch\">\n                            <Field \n                              className=\"custom-switch-input\"\n                              type=\"checkbox\" \n                              name=\"displayPublic\" \n                              checked={values.displayPublic} />\n                            <span className=\"custom-switch-indicator\" ></span>\n                            <span className=\"custom-switch-description\">{t('organization.classtype.public')}</span>\n                          </Form.Label>\n                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                        </Form.Group>    \n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('general.description')}>\n                          <Editor\n                              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                              textareaName=\"description\"\n                              initialValue={values.description}\n                              init={tinymceBasicConf}\n                              onBlur={(e) => {\n                                setFieldValue(\"description\", e.target.getContent())\n                                setFieldTouched(\"description\", true)\n                              }}\n                            />\n                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('organization.classtype.url_website')}>\n                          <Field type=\"text\" \n                                name=\"urlWebsite\" \n                                className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                            {t('general.cancel')}\n                        </Button>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_CLASSTYPES_QUERY, GET_CLASSTYPE_QUERY, UPDATE_CLASSTYPE } from './queries'\nimport { CLASSTYPE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\n\n\nfunction OrganizationClasstypeEdit({ t, history, match }) {\n  const id = match.params.id\n  const cardTitle = t('organization.classtypes.title_edit')\n  const returnUrl = \"/organization/classtypes\"\n  const { loading, error, data } = useQuery(GET_CLASSTYPE_QUERY, { variables: {\n    id: id\n  }})\n  const [ updateClasstype ] = useMutation(UPDATE_CLASSTYPE)\n\n  if (loading) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n\n                      \n  const initialData = data.organizationClasstype\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description,\n              displayPublic: initialData.displayPublic,\n              urlWebsite: initialData.urlWebsite\n            }}\n            validationSchema={CLASSTYPE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateClasstype({ variables: {\n                  input: {\n                    id: id,\n                    name: values.name,\n                    description: (values.description) ? values.description: '',\n                    displayPublic: values.displayPublic,\n                    urlWebsite: (values.urlWebsite) ? values.urlWebsite: ''\n                  }\n                }, refetchQueries: [\n                    {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('organization.classtypes.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n                <FoForm>\n                    {console.log(values)}\n                    <Card.Body>\n                        <Form.Group>\n                          <Form.Label className=\"custom-switch\">\n                            <Field \n                              className=\"custom-switch-input\"\n                              type=\"checkbox\" \n                              name=\"displayPublic\" \n                              checked={values.displayPublic} />\n                            <span className=\"custom-switch-indicator\" ></span>\n                            <span className=\"custom-switch-description\">{t('organization.classtype.public')}</span>\n                          </Form.Label>\n                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                        </Form.Group>     \n                        <Form.Group label={t('general.name')} >\n                          <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('general.description')}>\n                          <Editor\n                            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                            textareaName=\"description\"\n                            initialValue={values.description}\n                            init={tinymceBasicConf}\n                            onBlur={(e) => {\n                              setFieldValue(\"description\", e.target.getContent())\n                              setFieldTouched(\"description\", true)\n                            }}\n                          />\n                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('organization.classtype.url_website')}>\n                          <Field type=\"text\" \n                                name=\"urlWebsite\" \n                                className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeEdit))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport { \n  Formik,\n  Form as FoForm, \n} from 'formik'\n\n\nimport { GET_CLASSTYPES_QUERY, GET_CLASSTYPE_QUERY, UPDATE_CLASSTYPE_IMAGE } from './queries'\n\nimport {\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nfunction OrganizationClasstypeEditImage({t, history, match}) {\n  const classtypeId = match.params.id\n  const returnUrl = \"/organization/classtypes\"\n  let cardTitle = t('organization.classtypes.edit_image')\n  const { loading, error, data } = useQuery(GET_CLASSTYPE_QUERY, {\n    variables: { id: classtypeId }\n  })\n  const [ uploadImage ] = useMutation(UPDATE_CLASSTYPE_IMAGE)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n\n  if (loading) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n\n  cardTitle = `${cardTitle} - ${data.organizationClasstype.name}`\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card title={cardTitle}>\n       <Formik\n          initialValues={{}}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              id: classtypeId,\n              imageFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.image = b64_enc_file\n  \n              uploadImage({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classtypes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Link to={returnUrl}>\n                <Button color=\"link\">\n                  {t('general.cancel')}\n                </Button>\n              </Link>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeEditImage))","import { gql } from \"@apollo/client\"\n\nexport const GET_DISCOVERIES_QUERY = gql`\n  query OrganizationDiscoveries($after: String, $before: String, $archived: Boolean) {\n    organizationDiscoveries(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_DISCOVERY_QUERY = gql`\n  query SchoolDiscovery($id: ID!) {\n    organizationDiscovery(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_DISCOVERY = gql`\n  mutation CreateOrganizationDiscovery($input:CreateOrganizationDiscoveryInput!) {\n    createOrganizationDiscovery(input: $input) {\n      organizationDiscovery{\n        id\n        archived\n        name\n      }\n    }\n  }\n`\n\nexport const UPDATE_DISCOVERY = gql`\nmutation UpdateOrganizationDiscovery($input: UpdateOrganizationDiscoveryInput!) {\n  updateOrganizationDiscovery(input: $input) {\n    organizationDiscovery {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_DISCOVERY = gql`\nmutation ArchiveOrganizationDiscovery($input: ArchiveOrganizationDiscoveryInput!) {\n  archiveOrganizationDiscovery(input: $input) {\n    organizationDiscovery {\n      id\n      archived\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationDiscoveriesBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/discoveries\" />  \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationdiscovery\">\n                  <ButtonAdd addUrl=\"/organization/discoveries/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveriesBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_DISCOVERIES_QUERY, ARCHIVE_DISCOVERY } from \"./queries\"\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase'\n\n\nfunction OrganizationDiscoveries({ t, history }) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.discoveries.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_DISCOVERIES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  if (error) return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.discoveries.error_loading')}</p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  const discoveries = data.organizationDiscoveries\n\n  // Empty list\n  if (!discoveries.edges.length) { return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p> \n          {(!archived) ? t('organization.discoveries.empty_list') : t(\"organization.discoveries.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )}\n\n  return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={discoveries.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: discoveries.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationDiscoveries.edges\n                        const pageInfo = fetchMoreResult.organizationDiscoveries.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new discoveries at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationDiscoveries: {\n                                __typename: previousResult.organizationDiscoveries.__typename,\n                                edges: [ ...previousResult.organizationDiscoveries.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {discoveries.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/discoveries/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveDiscovery({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveries))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DISCOVERY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\n\nimport { GET_DISCOVERIES_QUERY, ADD_DISCOVERY } from './queries'\nimport { DISCOVERY_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase';\n\n\nfunction OrganizationDiscoveryAdd({t, history}) {\n  const returnUrl = \"/organization/discoveries\"\n  const [ addDiscovery ] = useMutation(ADD_DISCOVERY)\n\n  return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <Card title={t('organization.discoveries.title_add')}>\n        <Formik\n            initialValues={{ name: '', code: '' }}\n            validationSchema={DISCOVERY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addDiscovery({ variables: {\n                  input: {\n                    name: values.name, \n                  }\n                }, refetchQueries: [\n                    {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('organization.discoveries.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n                <FoForm>\n                    <Card.Body>\n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button color=\"link\">\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationDiscoveriesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveryAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { GET_DISCOVERIES_QUERY, GET_DISCOVERY_QUERY, UPDATE_DISCOVERY } from './queries'\nimport { DISCOVERY_SCHEMA } from './yupSchema'\n\nimport {\n  Dimmer,\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase';\n\n\nfunction OrganizationDiscoveryEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/discoveries\"\n  const cardTitle = t('organization.discoveries.title_edit')\n  const { loading, error, data } = useQuery(GET_DISCOVERY_QUERY, {\n    variables: {id: id}\n  })\n  const [ updateDiscovery ] = useMutation(UPDATE_DISCOVERY)\n\n  if (loading) return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  if (error) return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  const initialData = data.organizationDiscovery;\n\n  return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={DISCOVERY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateDiscovery({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.discoveries.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>    \n                        <Form.Group label={t('general.name')} >\n                          <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationDiscoveriesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveryEdit))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\n\nfunction OrganizationDocuments({ t, match }) {\n  const organizationId = match.params.organization_id\n  const docTypes = [\n    [ \"TERMS_AND_CONDITIONS\", t(\"general.terms_and_conditions\")],\n    [ \"PRIVACY_POLICY\", t(\"general.privacy_policy\")],\n  ]\n\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            {/* <div className=\"page-options d-flex\">\n              <Link to={`/organization/edit/${organizationId}`}>\n                <Button \n                  icon=\"arrow-left\"\n                  className=\"mr-2\"\n                  outline\n                  color=\"secondary\"\n                >\n                  {t('general.back_to')} {t('organization.title')}\n                </Button>\n              </Link>\n            </div> */}\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.documents.title')}</Card.Title>\n                </Card.Header>\n                <Table cards>\n                  <Table.Header>\n                    <Table.Row key={v4()}>\n                      <Table.ColHeader>{t('general.document')}</Table.ColHeader>\n                      <Table.ColHeader></Table.ColHeader>\n                    </Table.Row>\n                  </Table.Header>\n                  <Table.Body>\n                      {docTypes.map((docType) => (\n                        <Table.Row key={v4()}>\n                          <Table.Col key={v4()}>\n                            {docType[1]}\n                          </Table.Col>\n                          <Table.Col className=\"text-right\" key={v4()}>\n                            <Link to={`/organization/documents/${organizationId}/${docType[0]}`}>\n                              <Button className='btn-sm' \n                                      color=\"secondary\">\n                                {t('general.manage')} <Icon name=\"chevron-right\" />\n                              </Button>\n                            </Link>\n                          </Table.Col>\n                        </Table.Row>\n                      ))}\n                  </Table.Body>\n                </Table>\n              </Card>        \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocuments))","import { useContext } from 'react'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../context/AppSettingsContext'\n\n\nfunction FormatISODateStr({ ISODateStr }) {\n    const appSettings = useContext(AppSettingsContext)\n    const dateFormat = appSettings.dateFormat\n\n    return (\n        moment(ISODateStr).format(dateFormat)    \n    )\n}\n\nexport default FormatISODateStr\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button\n} from \"tabler-react\";\n\nconst FileDownloadTableButton = ({ t, mediaUrl, className=\"\", target=\"_blank\" }) => {\n  return <Button \n           color={\"secondary \" + className}\n           size=\"sm\"\n           icon=\"download-cloud\"\n           target={target}\n           RootComponent=\"a\" \n           href={mediaUrl}\n          >\n           {t('general.download')}\n          </Button>\n}\n\nexport default withTranslation()(FileDownloadTableButton)\n\n\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\n\nfunction OrganizationDocumentsBase({ t, children, pageHeaderButtonList }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            <div className=\"page-options d-flex\">\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}        \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocumentsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_DOCUMENTS_QUERY = gql`\n  query OrganizationDocuments($documentType: CostasiellaOrganizationDocumentDocumentTypeChoices!) {\n    organizationDocuments(documentType:$documentType) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          documentType\n          version\n          dateStart\n          dateEnd\n          document\n          urlDocument\n        }\n      }\n    }\n  }\n`\n\nexport const GET_DOCUMENT_QUERY = gql`\n  query OrganizationDocument($id: ID!) {\n    organizationDocument(id:$id) {\n      id\n      version\n      dateStart\n      dateEnd\n      document\n    }\n  }\n`\n\nexport const ADD_DOCUMENT = gql`\n  mutation CreateOrganizationDocument($input:CreateOrganizationDocumentInput!) {\n    createOrganizationDocument(input: $input) {\n      organizationDocument{\n        id\n        version\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nexport const UPDATE_DOCUMENT = gql`\n  mutation UpdateOrganizationDocument($input:UpdateOrganizationDocumentInput!) {\n    updateOrganizationDocument(input: $input) {\n      organizationDocument{\n        id\n        version\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nexport const DELETE_DOCUMENT = gql`\n  mutation DeleteOrganizationDocument($input:DeleteOrganizationDocumentInput!) {\n    deleteOrganizationDocument(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_DOCUMENT, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport confirmDelete from \"../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction OrganizationDocumentDelete({t, match, node}) {\n  const [ deleteOrganizationDocument ] = useMutation(DELETE_DOCUMENT)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirmDelete({\n          t: t,\n          msgConfirm: t(\"organization.documents.delete_confirm_msg\"),\n          msgDescription: <p> {t(\"general.version\")}: {node.version}</p>,\n          msgSuccess: t('organization.documents.deleted'),\n          deleteFunction: deleteOrganizationDocument,\n          functionVariables: { \n            variables: {\n              input: { id: node.id }\n            }, \n            refetchQueries: [\n              {query: GET_DOCUMENTS_QUERY, variables: { documentType: node.documentType} },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDocumentDelete))\n","\nexport function getSubtitle(t, documentType) {\n  switch (documentType) {\n    case \"TERMS_AND_CONDITIONS\":\n      return t('general.terms_and_conditions')\n    case \"PRIVACY_POLICY\":\n      return t('general.privacy_policy')\n    default:\n      return \"Invalid document type\"\n  }\n}\n  ","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\nimport ISODateString from \"../../ui/ISODateString\"\nimport FileDownloadTableButton from \"../../ui/FileDownloadTableButton\"\nimport ContentCard from \"../../general/ContentCard\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport OrganizationDocumentsDelete from \"./OrganizationDocumentDelete\"\nimport { getSubtitle } from './tools'\n\nimport { GET_DOCUMENTS_QUERY } from \"./queries\"\n\n\nfunction OrganizationListDocuments({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const subTitle = getSubtitle(t, documentType)\n  const cardTitle = t('organization.documents.title') + ' - ' + subTitle\n\n  const pageHeaderButtonList = <React.Fragment>\n      <ButtonBack returnUrl={`/organization/documents/${organizationId}`} />\n      <HasPermissionWrapper \n        permission=\"add\"\n        resource=\"organizationdocument\"\n      >\n        <ButtonAdd addUrl={`/organization/documents/${organizationId}/${documentType}/add`} className=\"ml-2\" />\n      </HasPermissionWrapper>\n    </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_DOCUMENTS_QUERY, {\n    variables: { documentType: documentType }\n  })\n\n  if (loading) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t('general.loading_with_dots')}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <OrganizationDocumentsBase  pageHeaderButtonList={pageHeaderButtonList}>\n        {t('organization.documents.error_loading')}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  // Empty list\n  if (!data.organizationDocuments.edges.length) { return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>\n         {t('organization.documents.empty_list')}\n        </p>\n      </ContentCard>\n    </OrganizationDocumentsBase>\n  )}   \n  \n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.organizationDocuments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: data.organizationDocuments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.organizationDocuments.edges\n              const pageInfo = fetchMoreResult.organizationDocuments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the fetched documents at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    organizationDocuments: {\n                      __typename: previousResult.organizationDocuments.__typename,\n                      edges: [ ...previousResult.organizationDocuments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }}\n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.version')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {data.organizationDocuments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <ISODateString ISODateStr={node.dateStart} />\n                    {(node.dateEnd) ? <span> - <ISODateString ISODateStr={node.dateEnd} /></span> : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.version}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <FileDownloadTableButton mediaUrl={node.urlDocument} />\n                    <Link to={`/organization/documents/${organizationId}/${documentType}/edit/${node.id}`} >\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <OrganizationDocumentsDelete node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationDocumentsBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(OrganizationListDocuments))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { ADD_DOCUMENT, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport { getSubtitle } from './tools'\n\n\nconst customFileInputLabelStyle = {\n  whiteSpace: \"nowrap\",\n  display: \"block\",\n  overflow: \"hidden\"\n}  \n\n\nfunction OrganizationDocumentAdd({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const subTitle = getSubtitle(t, documentType)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  // Vars for document file input field end\n  \n  const returnUrl = `/organization/documents/${organizationId}/${documentType}`\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const [addDocument] = useMutation(ADD_DOCUMENT, {\n    onCompleted: () => history.push(returnUrl)\n  })\n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={t('organization.documents.add') + ' - ' + subTitle}>\n        <Formik\n          initialValues={{ \n            version: '',\n            dateStart: '', \n            dateEnd: '',\n            document: ''\n          }}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n\n            let inputVars = {\n              documentType: documentType,\n              version: values.version,\n              dateStart: dateToLocalISO(values.dateStart),\n              documentFileName: fileName,\n            }\n\n            if (values.dateEnd) {\n              inputVars.dateEnd = dateToLocalISO(values.dateEnd)\n            }\n\n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n\n              addDocument({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_DOCUMENTS_QUERY, variables: {documentType: documentType}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('organization.documents.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            reader.readAsDataURL(file)\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.version')}>\n                    <Field type=\"text\" \n                          name=\"version\" \n                          className={(errors.version) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\" />\n                    <ErrorMessage name=\"version\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_start')}>\n                    <CSDatePicker \n                      selected={values.dateStart}\n                      onChange={(date) => setFieldValue(\"dateStart\", date)}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                    />\n                    <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                {t('general.cancel')}\n              </Button>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationDocumentsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocumentAdd))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next';\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_DOCUMENT, GET_DOCUMENT_QUERY, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport {\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport { getSubtitle } from './tools'\n\n\nfunction OrganizationDocumentEdit({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const id = match.params.id\n  const subTitle = getSubtitle(t, documentType)\n  \n  const returnUrl = `/organization/documents/${organizationId}/${documentType}`\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const [ updateDocument ] = useMutation(UPDATE_DOCUMENT, {\n    onCompleted: () => history.push(returnUrl)\n  })\n  const { loading, error, data } = useQuery(GET_DOCUMENT_QUERY, {\n    variables: { \"id\": id }\n  })\n\n  if (loading) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t(\"general.loading_with_dots\")}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t(\"organization.documents.error_loading\")}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateEnd = null\n  if (data.organizationDocument.dateEnd) {\n    dateEnd = new Date(data.organizationDocument.dateEnd)\n  }\n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card>\n        <Card.Header>\n          <Card.Title>\n            {t('organization.documents.edit') + ' - ' + subTitle}\n          </Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            version: data.organizationDocument.version,\n            dateStart: new Date(data.organizationDocument.dateStart), \n            dateEnd: dateEnd,\n          }}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n\n            let inputVars = {\n              id: id,\n              version: values.version,\n              dateStart: dateToLocalISO(values.dateStart),\n            }\n\n            if (values.dateEnd) {\n              inputVars.dateEnd = dateToLocalISO(values.dateEnd)\n            }\n\n            updateDocument({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_DOCUMENTS_QUERY, variables: {documentType: documentType}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('organization.documents.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.version')}>\n                    <Field type=\"text\" \n                          name=\"version\" \n                          className={(errors.version) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\" />\n                    <ErrorMessage name=\"version\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                {/* <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col> */}\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_start')}>\n                    <CSDatePicker \n                      selected={values.dateStart}\n                      onChange={(date) => setFieldValue(\"dateStart\", date)}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                    />\n                    <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                {t('general.cancel')}\n              </Button>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationDocumentsBase>\n  )\n}\n\nexport default withTranslation()(OrganizationDocumentEdit)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationHolidaysBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/holidays\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationholiday\">\n                  <ButtonAdd addUrl=\"/organization/holidays/add\" />\n                </HasPermissionWrapper>\n              }   \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationHolidaysBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_HOLIDAYS_QUERY = gql`\n  query OrganizationHolidays($after: String, $before: String) {\n    organizationHolidays(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          dateStart\n          dateEnd\n          classes\n          organizationLocations {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_HOLIDAY_QUERY = gql`\n  query OrganizationHoliday($id: ID!) {\n    organizationHoliday(id:$id) {\n      id\n      name\n      description\n      dateStart\n      dateEnd\n      classes\n    }\n  }\n`\n\nexport const ADD_HOLIDAY = gql`\n  mutation CreateOrganizationHoliday($input:CreateOrganizationHolidayInput!) {\n    createOrganizationHoliday(input: $input) {\n      organizationHoliday {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_HOLIDAY = gql`\n  mutation UpdateOrganizationHoliday($input: UpdateOrganizationHolidayInput!) {\n    updateOrganizationHoliday(input: $input) {\n      organizationHoliday {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const DELETE_HOLIDAY = gql`\n  mutation DeleteOrganizationHoliday($input: DeleteOrganizationHolidayInput!) {\n    deleteOrganizationHoliday(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const GET_HOLIDAY_LOCATIONS_QUERY = gql`\n  query GetOrganizationHolidayLocations($after: String, $before: String, $id:ID!) {\n    organizationLocations(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationHoliday(id: $id) {\n      id\n      name\n      description\n      organizationLocations {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_LOCATION_TO_HOLIDAY = gql`\n  mutation AddLocationToHoliday($input: CreateOrganizationHolidayLocationInput!) {\n    createOrganizationHolidayLocation(input:$input) {\n      organizationHolidayLocation {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_LOCATION_FROM_HOLIDAY = gql`\n  mutation DeleteLocationFromHoliday($input: DeleteOrganizationHolidayLocationInput!) {\n    deleteOrganizationHolidayLocation(input:$input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from \"moment\"\nimport DOMPurify from 'dompurify'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n\nimport {\n  Badge,\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase'\n\nimport { GET_HOLIDAYS_QUERY, DELETE_HOLIDAY } from \"./queries\"\n\n\nfunction OrganizationHolidays({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const cardTitle = t('organization.holidays.title')\n  \n  const { loading, error, data, fetchMore } = useQuery(GET_HOLIDAYS_QUERY)\n  const [ deleteHoliday ] = useMutation(DELETE_HOLIDAY)\n\n  if (loading) return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  if (error) return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.holidays.error_loading')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  let holidays = data.organizationHolidays\n\n  // Empty list\n  if (!holidays.edges.length) { return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.holidays.empty_list')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )}\n\n\n  return (\n    <OrganizationHolidaysBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={holidays.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: holidays.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationHolidays.edges\n            const pageInfo = fetchMoreResult.organizationHolidays.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new levels at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationHolidays: {\n                    __typename: previousResult.organizationHolidays.__typename,\n                    edges: [ ...previousResult.organizationHolidays.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('organization.locations.title')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {holidays.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name} \n                    <div className=\"text-muted\">\n                      <small dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                    </div>\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.organizationLocations.edges.map(({ node: location }) => (\n                       <div><Badge color=\"primary\" className=\"mr-1\">{location.name}</Badge></div>\n                    ))}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/organization/holidays/edit/${node.id}/locations`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('organization.holidays.locations.title_edit')}\n                      </Button>\n                    </Link>\n                    <Link to={`/organization/holidays/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"organization.holidays.holiday_delete_confirm_msg\"),\n                          msgDescription: <p>{node.name}</p>,\n                          msgSuccess: t('organization.holidays.payment_deleted'),\n                          deleteFunction: deleteHoliday,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_HOLIDAYS_QUERY },\n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationHolidays))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const HOLIDAY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"  \nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nconst OrganizationHolidayForm = ({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.date_start')}>\n                  <CSDatePicker \n                      className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                      selected={values.dateStart}\n                      onChange={(date) => {\n                      setFieldValue(\"dateStart\", date)\n                      setFieldTouched(\"dateStart\", true)\n                      }}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                  />\n                  <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => {\n                          setFieldValue(\"dateEnd\", date)\n                          setFieldTouched(\"dateEnd\", true)\n                      }}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                      placeholderText={t('general.date_end')}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            <h5>{t(\"general.apply_to\")}</h5>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"classes\" \n                  checked={values.classes} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.classes')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"classes\" component=\"div\" />   \n            </Form.Group>  \n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                    setFieldValue(\"description\", e.target.getContent())\n                    setFieldTouched(\"description\", true, true)\n                }}\n                />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationHolidayForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n\nimport { GET_HOLIDAYS_QUERY, ADD_HOLIDAY } from './queries'\nimport { HOLIDAY_SCHEMA } from './yupSchema'\nimport OrganizationHolidayForm from './OrganizationHolidayForm'\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\n\n\nfunction OrganizationHolidayAdd({t, history}) {\n  const returnUrl = \"/organization/holidays\"\n  const [ addHoliday ] = useMutation(ADD_HOLIDAY)\n  \n  return (\n   <OrganizationHolidaysBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.holidays.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', description: '', classes: true }}\n          validationSchema={HOLIDAY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addHoliday({ variables: {\n                input: {\n                  name: values.name, \n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateToLocalISO(values.dateEnd),\n                  description: values.description,\n                  classes: values.classes,\n                }\n              }, refetchQueries: [\n                  {query: GET_HOLIDAYS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.holidays.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n            <OrganizationHolidayForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationHolidaysBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationHolidayAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_HOLIDAYS_QUERY, GET_HOLIDAY_QUERY, UPDATE_HOLIDAY } from './queries'\nimport { HOLIDAY_SCHEMA } from './yupSchema'\nimport OrganizationHolidayForm from './OrganizationHolidayForm'\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationHolidayEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.holidays.title_edit')\n  const returnUrl = \"/organization/holidays\"\n  const { loading, error, data } = useQuery(GET_HOLIDAY_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateHoliday ] = useMutation(UPDATE_HOLIDAY)\n\n  if (loading) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  if (error) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n                    \n  const initialData = data.organizationHoliday;\n  console.log('query data')\n  console.log(data)\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n\n  return (\n    <OrganizationHolidaysBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description,\n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              classes: initialData.classes\n            }}\n            validationSchema={HOLIDAY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateHoliday({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    description: values.description,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateToLocalISO(values.dateEnd)\n                  }\n                }, refetchQueries: [\n                    {query: GET_HOLIDAYS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.holidays.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n              <OrganizationHolidayForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationHolidaysBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationHolidayEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_HOLIDAY_LOCATIONS_QUERY, ADD_LOCATION_TO_HOLIDAY, DELETE_LOCATION_FROM_HOLIDAY } from './queries'\n\nimport {\n  Dimmer,\n  Icon,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\n\n\nfunction OrganizationHolidayEditLocations({ t, match, history }) {\n  const holidayId = match.params.id\n  let cardTitle = t('organization.holidays.locations.title_edit')\n  const { loading, error, data } = useQuery(GET_HOLIDAY_LOCATIONS_QUERY, { \n    variables: { id: holidayId }\n  })\n  const [ addLocationToHoliday ] = useMutation(ADD_LOCATION_TO_HOLIDAY)\n  const [ deleteLocationFromHoliday ] = useMutation(DELETE_LOCATION_FROM_HOLIDAY)\n\n  // Loading\n  if (loading) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const locations = data.organizationLocations\n  const holiday = data.organizationHoliday\n\n  let holiday_locations = {}\n  if (holiday.organizationLocations.edges) {\n    holiday.organizationLocations.edges.map(({ node}) => (\n      holiday_locations[node.id] = true\n    ))\n  }\n\n  cardTitle = cardTitle + \" - \" + holiday.name\n\n  return (\n    <OrganizationHolidaysBase showBack={true}>\n      <Card title={cardTitle}>\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locations.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {(node.id in holiday_locations) ? \n                      <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  {console.log((node.id in holiday_locations))}\n                  {(!(node.id in holiday_locations)) ?\n                    // Add\n                    <Table.Col className=\"text-right text-green\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('organization.holiday.locations.add_to_holiday')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked add\")\n                          let locationId = node.id\n                          addLocationToHoliday({ variables: {\n                            input: {\n                              organizationHoliday: holidayId,\n                              organizationLocation: locationId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_HOLIDAY_LOCATIONS_QUERY, variables: {\"id\": holidayId }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('organization.holiday.locations.added_to_holiday'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                        {t('organization.holiday.locations.add_to_holiday')} \n                      </Button>\n                    </Table.Col>\n                    :\n                    // Delete\n                    <Table.Col className=\"text-right text-red\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('organization.holiday.locations.delete_from_holiday')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked delete\")\n                          console.log(node.id)\n                          let locationId = node.id\n                          deleteLocationFromHoliday({ variables: {\n                            input: {\n                              organizationHoliday: holidayId,\n                              organizationLocation: locationId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_HOLIDAY_LOCATIONS_QUERY, variables: {\"id\": holidayId }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('organization.holiday.locations.deleted_from_holiday'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                        {t('organization.holiday.locations.delete_from_holiday')}\n                      </Button>\n                    </Table.Col>\n                    }\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </Card>\n    </OrganizationHolidaysBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationHolidayEditLocations))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\n\nfunction OrganizationLanguagesBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/languages\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlanguage\">\n                  <ButtonAdd addUrl=\"/organization/languages/add\" />\n                </HasPermissionWrapper>\n              }    \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLanguagesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_LANGUAGES_QUERY = gql`\n  query OrganizationLanguages($after: String, $before: String, $archived: Boolean) {\n    organizationLanguages(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LANGUAGE_QUERY = gql`\n  query OrganizationLanguage($id: ID!) {\n    organizationLanguage(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_LANGUAGE = gql`\nmutation CreateOrganizationLanguage($input:CreateOrganizationLanguageInput!) {\n  createOrganizationLanguage(input: $input) {\n    organizationLanguage{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LANGUAGE = gql`\nmutation UpdateOrganizationLanguage($input: UpdateOrganizationLanguageInput!) {\n  updateOrganizationLanguage(input: $input) {\n    organizationLanguage {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LANGUAGE = gql`\nmutation ArchiveOrganizationLanguage($input: ArchiveOrganizationLanguageInput!) {\n  archiveOrganizationLanguage(input: $input) {\n    organizationLanguage {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase'\n\nimport { GET_LANGUAGES_QUERY, ARCHIVE_LANGUAGE } from \"./queries\"\n\n\nfunction OrganizationLanguages({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.languages.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LANGUAGES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLanguage ] = useMutation(ARCHIVE_LANGUAGE)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  if (error) return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.languages.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  let languages = data.organizationLanguages\n\n  // Empty list\n  if (!languages.edges.length) { return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={t('organization.languages.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.languages.empty_list') : t(\"organization.languages.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )}\n\n\n  return (\n    <OrganizationLanguagesBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={languages.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: languages.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationLanguages.edges\n            const pageInfo = fetchMoreResult.organizationLanguages.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new languages at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationLanguages: {\n                    __typename: previousResult.organizationLanguages.__typename,\n                    edges: [ ...previousResult.organizationLanguages.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {languages.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/languages/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLanguage({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LANGUAGES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLanguages))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LANGUAGE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationLanguageForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationLanguageForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LANGUAGES_QUERY, ADD_LANGUAGE } from './queries'\nimport { LANGUAGE_SCHEMA } from './yupSchema'\nimport OrganizationLanguageForm from './OrganizationLanguageForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase';\n\n\nfunction OrganizationLanguageAdd({t, history}) {\n  const returnUrl = \"/organization/languages\"\n  const [ addLanguage ] = useMutation(ADD_LANGUAGE)\n  \n  return (\n   <OrganizationLanguagesBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.languages.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={LANGUAGE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLanguage({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_LANGUAGES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.languages.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationLanguageForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationLanguagesBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLanguageAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LANGUAGES_QUERY, GET_LANGUAGE_QUERY, UPDATE_LANGUAGE } from './queries'\nimport { LANGUAGE_SCHEMA } from './yupSchema'\nimport OrganizationLanguageForm from './OrganizationLanguageForm'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationLanguageEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.languages.title_edit')\n  const returnUrl = \"/organization/languages\"\n  const { loading, error, data } = useQuery(GET_LANGUAGE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLanguage ] = useMutation(UPDATE_LANGUAGE)\n\n  if (loading) return (\n    <OrganizationLanguagesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  if (error) return (\n    <OrganizationLanguagesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n                    \n  const initialData = data.organizationLanguage;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLanguagesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={LANGUAGE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLanguage({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_LANGUAGES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.languages.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationLanguageForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationLanguagesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLanguageEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATIONS_QUERY = gql`\n  query OrganizationLocations($after: String, $before: String, $archived: Boolean) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          displayPublic,\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LOCATION_QUERY = gql`\n  query OrganizationLocation($id: ID!) {\n    organizationLocation(id:$id) {\n      id\n      name\n      displayPublic\n      archived\n    }\n  }\n`\n\nexport const ADD_LOCATION = gql`\nmutation CreateOrganizationLocation($input: CreateOrganizationLocationInput!) {\n  createOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      archived\n      displayPublic\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LOCATION = gql`\nmutation UpdateOrganizationLocation($input: UpdateOrganizationLocationInput!) {\n  updateOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      name\n      displayPublic\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LOCATION = gql`\nmutation ArchiveOrganizationLocation($input: ArchiveOrganizationLocationInput!) {\n  archiveOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      archived\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationLocationsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title=\"Organization\">\n            <div className=\"page-options d-flex\">\n              {(showBack) ? \n                <ButtonBack returnUrl=\"/organization/locations\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                resource=\"organizationlocation\">\n                  <ButtonAdd addUrl=\"/organization/locations/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>  \n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_LOCATIONS_QUERY, ARCHIVE_LOCATION } from \"./queries\"\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\nfunction OrganizationLocations({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.locations.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LOCATIONS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLocation ] = useMutation(ARCHIVE_LOCATION)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.locations.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n\n  let locations = data.organizationLocations\n\n  // Empty list\n  if (!locations.edges.length) { return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n        {(!archived) ? t('organization.locations.empty_list') : t(\"organization.locations.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )}\n\n  return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}\n                headerContent={headerOptions}\n                hasCardBody={false}\n                pageInfo={locations.pageInfo}\n                onLoadMore={() => {\n                fetchMore({\n                  variables: {\n                    after: locations.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.organizationLocations.edges\n                    const pageInfo = fetchMoreResult.organizationLocations.pageInfo\n\n                    return newEdges.length\n                      ? {\n                          // Put the new locations at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          organizationLocations: {\n                            __typename: previousResult.organizationLocations.__typename,\n                            edges: [ ...previousResult.organizationLocations.edges, ...newEdges ],\n                            pageInfo\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locations.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <React.Fragment>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/rooms/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.rooms')}\n                        </Button>\n                      </React.Fragment>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLocation({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LOCATIONS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocations))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LOCATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_LOCATIONS_QUERY, ADD_LOCATION } from './queries'\nimport { LOCATION_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\nfunction OrganizationLocationAdd({ t, history }) {\n  const returnUrl = \"/organization/locations\"\n  const cardTitle = t('organization.locations.title_add')\n  const [ addLocation ] = useMutation(ADD_LOCATION)\n\n  return (\n    <OrganizationLocationsBase showBack={true}>\n      <Card>    \n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', displayPublic: true }}\n          validationSchema={LOCATION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLocation({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic\n                }\n              }, refetchQueries: [\n                  {query: GET_LOCATIONS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.locations.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n                <Card.Body>\n                    <Form.Group>\n                      <Form.Label className=\"custom-switch\">\n                        <Field \n                          className=\"custom-switch-input\"\n                          type=\"checkbox\" \n                          name=\"displayPublic\" \n                          checked={values.displayPublic} />\n                        <span className=\"custom-switch-indicator\" ></span>\n                        <span className=\"custom-switch-description\">{t('organization.location.public')}</span>\n                      </Form.Label>\n                      <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                    </Form.Group>    \n\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      color=\"primary\"\n                      className=\"pull-right\" \n                      type=\"submit\" \n                      disabled={isSubmitting}\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button color=\"link\">\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_LOCATIONS_QUERY, GET_LOCATION_QUERY, UPDATE_LOCATION } from './queries'\nimport { LOCATION_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\n\nfunction OrganizationLocationEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.locations.title_edit')\n  const returnUrl = \"/organization/locations\"\n  const { loading, error, data } = useQuery(GET_LOCATION_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLocation ] = useMutation(UPDATE_LOCATION)\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.locations.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n\n  const initialData = data.organizationLocation;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLocationsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n          {console.log(match.params.id)}\n        </Card.Header>                    \n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              displayPublic: initialData.displayPublic \n            }}\n            validationSchema={LOCATION_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLocation({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    displayPublic: values.displayPublic \n                  }\n                }, refetchQueries: [\n                    {query: GET_LOCATIONS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.locations.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n              <FoForm>\n                  <Card.Body>\n                      <Form.Group>\n                        <Form.Label className=\"custom-switch\">\n                          <Field \n                            className=\"custom-switch-input\"\n                            type=\"checkbox\" \n                            name=\"displayPublic\" \n                            checked={values.displayPublic} />\n                          <span className=\"custom-switch-indicator\" ></span>\n                          <span className=\"custom-switch-description\">{t('organization.location.public')}</span>\n                        </Form.Label>\n                        <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                      </Form.Group>     \n                      <Form.Group label={t('general.name')} >\n                        <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        className=\"pull-right\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        type=\"submit\"\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button\n                          type=\"button\" \n                          color=\"link\" \n                        >\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                    </Card.Footer>\n                </FoForm>\n              )}\n            </Formik>\n          </Card>\n    </OrganizationLocationsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATION_ROOMS_QUERY = gql`\n  query OrganizationLocationRooms($after: String, $before: String, $organizationLocation: ID!, $archived: Boolean!) {\n    organizationLocationRooms(first: 15, before: $before, after: $after, organizationLocation: $organizationLocation, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationLocation {\n            id\n            name\n          }\n          archived,\n          displayPublic\n          name\n        }\n      }\n    }\n    organizationLocation(id: $organizationLocation) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_LOCATION_ROOM_QUERY = gql`\n  query OrganizationLocationRoom($id: ID!) {\n    organizationLocationRoom(id:$id) {\n      id\n      organizationLocation {\n        id\n        name\n      }\n      name\n      displayPublic\n      archived\n    }\n  }\n`\n\nexport const ADD_LOCATION_ROOM = gql`\n  mutation CreateOrganizationLocationRoom($input: CreateOrganizationLocationRoomInput!) {\n    createOrganizationLocationRoom(input: $input) {\n      organizationLocationRoom {\n        id\n        organizationLocation {\n          id\n          name\n        }\n        archived\n        displayPublic\n        name\n      }\n    }\n  }\n`\n\nexport const UPDATE_LOCATION_ROOM = gql`\nmutation UpdateOrganizationLocationRoom($input: UpdateOrganizationLocationRoomInput!) {\n  updateOrganizationLocationRoom(input: $input) {\n    organizationLocationRoom {\n      id\n      organizationLocation {\n        id\n        name\n      }\n      name\n      displayPublic\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LOCATION_ROOM = gql`\nmutation ArchiveOrganizationLocationRoom($input: ArchiveOrganizationLocationRoomInput!) {\n  archiveOrganizationLocationRoom(input: $input) {\n    organizationLocationRoom {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport ButtonBack from '../../../ui/ButtonBack';\n\n\nfunction OrganizationLocationRoomsBase({t, history, match, children, showAdd=false, returnUrl=\"/organization/locations\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlocationroom\">\n                  <ButtonAdd addUrl={`/organization/locations/rooms/add/${match.params.location_id}`}\n                    className=\"ml-2\" />\n                </HasPermissionWrapper>\n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>        \n)}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_LOCATION_ROOMS_QUERY, ARCHIVE_LOCATION_ROOM } from \"./queries\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase'\n\n\nfunction OrganizationLocationsRooms({ t, history, match }) {\n  const organizationLocationId = match.params.location_id\n  let cardTitle = t('organization.location_rooms.title')\n  let [archived, setArchived] = useState(false)\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LOCATION_ROOMS_QUERY, {\n    variables: { archived: archived, organizationLocation: organizationLocationId }\n  })\n  const [ archiveLocationRoom ] = useMutation(ARCHIVE_LOCATION_ROOM)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.location_rooms.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n\n  let locationRooms = data.organizationLocationRooms\n  let location = data.organizationLocation\n\n  cardTitle = `${cardTitle} - ${location.name}`\n\n  // Empty list\n  if (!locationRooms.edges.length) { return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.location_rooms.empty_list') : t(\"organization.location_rooms.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )}\n\n  return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard \n        cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={locationRooms.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: locationRooms.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationLocationsRooms.edges\n                        const pageInfo = fetchMoreResult.organizationLocationsRooms.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationLocationsRooms: {\n                                __typename: previousResult.organizationLocationsRooms.__typename,\n                                edges: [ ...previousResult.organizationLocationsRooms.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locationRooms.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/locations/rooms/edit/\" + match.params.location_id + '/' + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                      <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.archive')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked archived\")\n                            let id = node.id\n                            archiveLocationRoom({ variables: {\n                              input: {\n                              id,\n                              archived: !archived\n                              }\n                      }, refetchQueries: [\n                          { \n                            query: GET_LOCATION_ROOMS_QUERY, \n                            variables: {archived: archived, organizationLocation: organizationLocationId }\n                          }\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fa\" name=\"inbox\" />\n                      </button>\n                    </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationsRooms))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LOCATION_ROOM_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst OrganizationLocationRoomForm = ({ t, history, match, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('organization.location_room.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_LOCATION_ROOMS_QUERY, ADD_LOCATION_ROOM } from './queries'\nimport { LOCATION_ROOM_SCHEMA } from './yupSchema'\nimport OrganizationLocationRoomForm from './OrganizationLocationRoomForm'\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase';\n\n\nfunction OrganizationLocationRoomAdd({ t, history, match }) {\n  const locationId = match.params.location_id\n  const returnUrl = `/organization/locations/rooms/${locationId}`\n  const [ addLocationRoom ] = useMutation(ADD_LOCATION_ROOM)\n\n  return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <Card title={t(\"organization.location_rooms.title_add\")}>\n        <Formik\n          initialValues={{ name: '', displayPublic: true }}\n          validationSchema={LOCATION_ROOM_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLocationRoom({ variables: {\n                input: {\n                  organizationLocation: locationId,\n                  name: values.name, \n                  displayPublic: values.displayPublic\n                }\n              }, refetchQueries: [\n                  {query: GET_LOCATION_ROOMS_QUERY,\n                    variables: {\"archived\": false, \"organizationLocation\": locationId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.location_rooms.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationLocationRoomForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LOCATION_ROOMS_QUERY, GET_LOCATION_ROOM_QUERY, UPDATE_LOCATION_ROOM } from './queries'\nimport { LOCATION_ROOM_SCHEMA } from './yupSchema'\nimport OrganizationLocationRoomForm from './OrganizationLocationRoomForm'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase'\n\n\nfunction OrganizationLocationRoomEdit({t, history, match}) {\n  const id = match.params.id\n  const locationId = match.params.location_id\n  const returnUrl = `/organization/locations/rooms/${locationId}`\n  const cardTitle = t('organization.location_rooms.title_edit')\n  const { loading, error, data } = useQuery(GET_LOCATION_ROOM_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLocationRoom ] = useMutation(UPDATE_LOCATION_ROOM)\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n\n  const initialData = data.organizationLocationRoom;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic \n          }}\n          validationSchema={LOCATION_ROOM_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateLocationRoom({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  displayPublic: values.displayPublic \n                }\n              }, refetchQueries: [\n                {query: GET_LOCATION_ROOMS_QUERY,\n                  variables: {\"archived\": false, \"organizationLocation\": match.params.location_id }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.location_rooms.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationLocationRoomForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationLevelsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/levels\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlevel\">\n                  <ButtonAdd addUrl=\"/organization/levels/add\" />\n                </HasPermissionWrapper>\n              }     \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLevelsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_LEVELS_QUERY = gql`\n  query OrganizationLevels($after: String, $before: String, $archived: Boolean) {\n    organizationLevels(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LEVEL_QUERY = gql`\n  query SchoolLevel($id: ID!) {\n    organizationLevel(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_LEVEL = gql`\nmutation CreateOrganizationLevel($input:CreateOrganizationLevelInput!) {\n  createOrganizationLevel(input: $input) {\n    organizationLevel{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LEVEL = gql`\nmutation UpdateOrganizationLevel($input: UpdateOrganizationLevelInput!) {\n  updateOrganizationLevel(input: $input) {\n    organizationLevel {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LEVEL = gql`\nmutation ArchiveOrganizationLevel($input: ArchiveOrganizationLevelInput!) {\n  archiveOrganizationLevel(input: $input) {\n    organizationLevel {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLevelsBase from './OrganizationLevelsBase'\n\nimport { GET_LEVELS_QUERY, ARCHIVE_LEVEL } from \"./queries\"\n\n\nfunction OrganizationLevels({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.levels.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LEVELS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLevel ] = useMutation(ARCHIVE_LEVEL)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  if (error) return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.levels.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  let levels = data.organizationLevels\n\n  // Empty list\n  if (!levels.edges.length) { return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={t('organization.levels.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )}\n\n\n  return (\n    <OrganizationLevelsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={levels.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: levels.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationLevels.edges\n            const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new levels at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationLevels: {\n                    __typename: previousResult.organizationLevels.__typename,\n                    edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {levels.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLevel({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationLevels))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LEVEL_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationLevelForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationLevelForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LEVELS_QUERY, ADD_LEVEL } from './queries'\nimport { LEVEL_SCHEMA } from './yupSchema'\nimport OrganizationLevelForm from './OrganizationLevelForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationLevelsBase from './OrganizationLevelsBase';\n\n\nfunction OrganizationLevelAdd({t, history}) {\n  const returnUrl = \"/organization/levels\"\n  const [ addLevel ] = useMutation(ADD_LEVEL)\n  \n  return (\n   <OrganizationLevelsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.levels.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={LEVEL_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLevel({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.levels.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationLevelForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationLevelsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLevelAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LEVELS_QUERY, GET_LEVEL_QUERY, UPDATE_LEVEL } from './queries'\nimport { LEVEL_SCHEMA } from './yupSchema'\nimport OrganizationLevelForm from './OrganizationLevelForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationLevelsBase from './OrganizationLevelsBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationLevelEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.levels.title_edit')\n  const returnUrl = \"/organization/levels\"\n  const { loading, error, data } = useQuery(GET_LEVEL_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLevel ] = useMutation(UPDATE_LEVEL)\n\n  if (loading) return (\n    <OrganizationLevelsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  if (error) return (\n    <OrganizationLevelsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n                    \n  const initialData = data.organizationLevel;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLevelsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={LEVEL_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLevel({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.levels.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationLevelForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationLevelsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLevelEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonEdit = ({ t, editUrl, className=\"\" }) => (\n  <Link to={editUrl}>\n    <Button\n      className={`btn-sm ${className}`}\n      color=\"secondary\"\n    >\n        {t(\"general.edit\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonEdit)\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORGANIZATION_PRODUCTS_QUERY = gql`\n  query OrganizationProducts($before:String, $after:String, $archived: Boolean) {\n    organizationProducts(first: 100, before:$before, after:$after, archived: $archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          description\n          priceDisplay\n          urlImage\n          urlImageThumbnailSmall\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_ORGANIZATION_PRODUCT_QUERY = gql`\n  query OrganizationProduct($id:ID!) {\n    organizationProduct(id: $id) {\n      id\n      name\n      description\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_ORGANIZATION_PRODUCT = gql`\n  mutation CreateOrganizationProduct($input:CreateOrganizationProductInput!) {\n    createOrganizationProduct(input: $input) {\n      organizationProduct {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ORGANIZATION_PRODUCT = gql`\n  mutation UpdateOrganizationProduct($input:UpdateOrganizationProductInput!) {\n    updateOrganizationProduct(input: $input) {\n      organizationProduct {\n        id\n      }\n    }\n  }\n`\n\n\nexport const ARCHIVE_ORGANIZATION_PRODUCT   = gql`\n  mutation ArchiveOrganizationProduct($input: ArchiveOrganizationProductInput!) {\n    archiveOrganizationProduct(input: $input) {\n      organizationProduct {\n        id\n        archived\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_archive = ({t, msgConfirm, msgDescription, msgSuccess, archiveFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_archive')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_archive_no')}</button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                archiveFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"inbox\" /> {t('general.confirm_archive_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_archive\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_archive from '../../tools/confirm_archive'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonArchive({t, match, history, msgConfirm, msgDescription, msgSuccess, archiveFunction, archiveFunctionVariables}) {\n  return (\n    <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.archive')} \n        onClick={() => {\n          confirm_archive({\n              t: t,\n              msgConfirm: <p>{msgConfirm}</p>,\n              msgDescription: msgDescription,\n              msgSuccess: msgSuccess,\n              archiveFunction: archiveFunction,\n              functionVariables: archiveFunctionVariables\n          })\n      }}>\n      <Icon prefix=\"fe\" name=\"inbox\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ButtonArchive))","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_unarchive = ({t, msgConfirm, msgDescription, msgSuccess, unArchiveFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_unarchive')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_unarchive_no')}</button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                unArchiveFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"corner-up-left\" /> {t('general.confirm_unarchive_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_unarchive\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_unarchive from \"../../tools/confirm_unarchive\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonUnArchive({t, match, history, msgConfirm, msgDescription, msgSuccess, unArchiveFunction, unArchiveFunctionVariables}) {\n  return (\n    <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.unarchive')} \n        onClick={() => {\n          confirm_unarchive({\n              t: t,\n              msgConfirm: <p>{msgConfirm}</p>,\n              msgDescription: msgDescription,\n              msgSuccess: msgSuccess,\n              unArchiveFunction: unArchiveFunction,\n              functionVariables: unArchiveFunctionVariables\n          })\n      }}>\n      <Icon prefix=\"fe\" name=\"inbox\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ButtonUnArchive))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { ARCHIVE_ORGANIZATION_PRODUCT, GET_ORGANIZATION_PRODUCTS_QUERY } from \"./queries\"\n\nimport ButtonArchive from '../../ui/ButtonArchive'\nimport ButtonUnArchive from '../../ui/ButtonUnArchive'\n\n\nfunction OrganizationProductArchive({t, match, history, node}) {\n  const [archiveProduct] = useMutation(ARCHIVE_ORGANIZATION_PRODUCT)\n  const refetchQueries = [\n    { query: GET_ORGANIZATION_PRODUCTS_QUERY, variables: { archived: node.archived } },\n  ]\n\n  if (!node.archived) {\n    return (\n      <ButtonArchive\n        msgConfirm={t(\"organization.products.archive_confirm_msg\")}\n        msgSuccess={t(\"general.archived\")}\n        archiveFunction={archiveProduct}\n        archiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: true\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n\n  } else {\n    return (\n      <ButtonUnArchive\n        msgConfirm={t(\"organization.products.unarchive_confirm_msg\")}\n        msgSuccess={t(\"general.unarchived\")}\n        unArchiveFunction={archiveProduct}\n        unArchiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: false\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n  }\n}\n\nexport default withTranslation()(withRouter(OrganizationProductArchive))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationProductsBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/products\" />           \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                    resource=\"organizationproduct\">\n                  <ButtonAdd addUrl=\"/organization/products/add\" />\n                </HasPermissionWrapper>    \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationProductsBase))","import React, { useState } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Avatar,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport ButtonEdit from \"../../ui/ButtonEdit\"\nimport { GET_ORGANIZATION_PRODUCTS_QUERY  } from \"./queries\"\nimport OrganizationProductArchive from './OrganizationProductArchive'\nimport OrganizationProductsBase from \"./OrganizationProductsBase\"\n\n\nfunction OrganizationProducts({t, history}) {\n  const cardTitle = t('organization.products.title')\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_ORGANIZATION_PRODUCTS_QUERY, { \n    variables: {archived: archived}\n  })\n\n  if (loading) return (\n    <OrganizationProductsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationProductsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationProductsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.products.error_loading')}</p>\n      </ContentCard>\n    </OrganizationProductsBase>\n  )\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  \n  const products = data.organizationProducts\n  // Empty list\n  if (!products.edges.length) { return (\n    <OrganizationProductsBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.products.empty_list') : t(\"organization.products.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationProductsBase>\n  )}   \n\n  return (\n    <OrganizationProductsBase>\n      <ContentCard cardTitle={cardTitle}\n                   headerContent={headerOptions}\n                   hasCardBody={false}\n                   pageInfo={products.pageInfo}\n                   onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: products.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationProducts.edges\n                        const pageInfo = fetchMoreResult.organizationProducts.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationProducts: {\n                                __typename: previousResult.organizationProducts.__typename,\n                                edges: [ ...previousResult.organizationProducts.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {products.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name} <br />\n                    <small className=\"text-muted\">{node.description.trunc(46)}</small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                        <ButtonEdit editUrl={`/organization/products/edit/${node.id}`} />\n                    }\n                    <OrganizationProductArchive node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationProductsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationProducts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PRODUCT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    price: Yup.number(),\n    // sortOrder: Yup.number()\n    //   .min(0),\n    // minDuration: Yup.number()\n    //   .min(0),\n    // classes: Yup.number()\n    //   .min(0),\n    // subscriptionUnit: Yup.string(),\n    // creditValidity: Yup.number()\n    //   .min(0),\n    // reconciliationClasses: Yup.number()\n    //   .min(0),\n    // quickStatsAmount: Yup.number()\n    //   .min(0),\n    // termsAndConditions: Yup.string()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nfunction OrganizationProductForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  returnUrl,\n  initialData,\n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.price')}>\n                <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.taxrate')}>\n              <Field component=\"select\" \n                      name=\"financeTaxRate\" \n                      className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n              {console.log(\"query data in classpass add:\")}\n              {console.log(initialData)}\n              <option value=\"\" key={v4()}></option>\n              {initialData.financeTaxRates.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n              </Field>\n              <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                      name=\"financeGlaccount\" \n                      className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {initialData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                      name=\"financeCostcenter\" \n                      className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {initialData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationProductForm))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\"\n\nimport { GET_ORGANIZATION_PRODUCTS_QUERY, ADD_ORGANIZATION_PRODUCT, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { PRODUCT_SCHEMA } from './yupSchema'\n\nimport OrganizationProductsBase from \"./OrganizationProductsBase\"\nimport OrganizationProductForm from './OrganizationProductForm'\n\n\n\nfunction OrganizationProductAdd({ t, history, match }) {\n  const returnUrl = `/organization/products/`\n  const cardTitle = t(\"organization.products.add\")\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addOrganizationProduct] = useMutation(ADD_ORGANIZATION_PRODUCT)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return (\n    <OrganizationProductsBase showBack={true} >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </OrganizationProductsBase>\n  )\n\n  if (error) {\n    console.log(error)\n    return (\n      <OrganizationProductsBase showBack={true} >\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </OrganizationProductsBase>\n    )\n  } \n\n  return (\n    <OrganizationProductsBase showBack={true} >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: \"\",\n            description: \"\",\n          }}\n          validationSchema={ PRODUCT_SCHEMA }\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n\n            let inputVars = {\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeCostcenter: values.financeCostcenter,\n              financeGlaccount: values.financeGlaccount,\n              imageFileName: fileName,\n            }\n\n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.image = b64_enc_file\n\n              addOrganizationProduct({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_ORGANIZATION_PRODUCTS_QUERY, variables: {archived: false}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.products.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n        >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationProductForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              initialData={data}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationProductsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationProductAdd))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\"\n\nimport { GET_ORGANIZATION_PRODUCTS_QUERY, UPDATE_ORGANIZATION_PRODUCT, GET_ORGANIZATION_PRODUCT_QUERY } from \"./queries\"\nimport { PRODUCT_SCHEMA } from './yupSchema'\n\n// import ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport OrganizationProductsBase from \"./OrganizationProductsBase\"\nimport OrganizationProductForm from './OrganizationProductForm'\n\n\n\nfunction OrganizationProductEdit({ t, history, match }) {\n  const id = match.params.id\n  const returnUrl = `/organization/products/`\n  // const activeLink = 'media'\n  const cardTitle = t(\"organization.products.edit\")\n\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_PRODUCT_QUERY, { \n    variables: { id: id }\n  })\n  const [ updateOrganizationProduct ] = useMutation(UPDATE_ORGANIZATION_PRODUCT)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return (\n    <OrganizationProductsBase showBack={true} >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </OrganizationProductsBase>\n  )\n\n  if (error) {\n    console.log(error)\n    return (\n      <OrganizationProductsBase showBack={true} >\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </OrganizationProductsBase>\n    )\n  } \n\n  const organizationProduct = data.organizationProduct\n\n  // Initial finance tax rate\n  let initialTaxRate = \"\"\n  if ( organizationProduct.financeTaxRate ) {\n    initialTaxRate = organizationProduct.financeTaxRate.id\n  }\n  // Initial finance GLaccount\n  let initialGlaccount = \"\"\n  if ( organizationProduct.financeGlaccount ) {\n    initialGlaccount = organizationProduct.financeGlaccount.id\n  }\n  // Initial finance cost center\n  let initialCostcenter = \"\"\n  if ( organizationProduct.financeCostcenter ) {\n    initialCostcenter = organizationProduct.financeCostcenter.id\n  }\n\n\n  return (\n    <OrganizationProductsBase showBack={true} >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: organizationProduct.name,\n            description: organizationProduct.description,\n            price: organizationProduct.price,\n            financeTaxRate: initialTaxRate,\n            financeGlaccount: initialGlaccount,\n            financeCostcenter: initialCostcenter,\n          }}\n          validationSchema={ PRODUCT_SCHEMA }\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n\n            let inputVars = {\n              id: id,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeCostcenter: values.financeCostcenter,\n              financeGlaccount: values.financeGlaccount,\n            }\n  \n            function updateProduct() {\n              updateOrganizationProduct({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                {query: GET_ORGANIZATION_PRODUCTS_QUERY, variables: { archived: false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('organization.products.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.image = b64_enc_file\n              inputVars.imageFileName = fileName\n  \n              updateProduct()\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              // No file provided, update the data by calling updateProduct\n              updateProduct()\n            }\n          }}\n        >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationProductForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              initialData={data}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationProductsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationProductEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationShiftsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/shifts\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationshift\">\n                  <ButtonAdd addUrl=\"/organization/shifts/add\" />\n                </HasPermissionWrapper>\n              }  \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationShiftsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SHIFTS_QUERY = gql`\n  query OrganizationShifts($after: String, $before: String, $archived: Boolean) {\n    organizationShifts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SHIFT_QUERY = gql`\n  query SchoolShift($id: ID!) {\n    organizationShift(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_SHIFT = gql`\nmutation CreateOrganizationShift($input:CreateOrganizationShiftInput!) {\n  createOrganizationShift(input: $input) {\n    organizationShift{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_SHIFT = gql`\nmutation UpdateOrganizationShift($input: UpdateOrganizationShiftInput!) {\n  updateOrganizationShift(input: $input) {\n    organizationShift {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_SHIFT = gql`\nmutation ArchiveOrganizationShift($input: ArchiveOrganizationShiftInput!) {\n  archiveOrganizationShift(input: $input) {\n    organizationShift {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationShiftsBase from './OrganizationShiftsBase'\n\nimport { GET_SHIFTS_QUERY, ARCHIVE_SHIFT } from \"./queries\"\n\n\nfunction OrganizationShifts({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.shifts.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_SHIFTS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveShift ] = useMutation(ARCHIVE_SHIFT)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  if (error) return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.shifts.error_loading')}</p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  let shifts = data.organizationShifts\n\n  // Empty list\n  if (!shifts.edges.length) { return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={t('organization.shifts.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.shifts.empty_list') : t(\"organization.shifts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )}\n\n\n  return (\n    <OrganizationShiftsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={shifts.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: shifts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationShifts.edges\n            const pageInfo = fetchMoreResult.organizationShifts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new shifts at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationShifts: {\n                    __typename: previousResult.organizationShifts.__typename,\n                    edges: [ ...previousResult.organizationShifts.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {shifts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/shifts/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveShift({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_SHIFTS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationShifts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SHIFT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationShiftForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationShiftForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_SHIFTS_QUERY, ADD_SHIFT } from './queries'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport OrganizationShiftForm from './OrganizationShiftForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationShiftsBase from './OrganizationShiftsBase';\n\n\nfunction OrganizationShiftAdd({t, history}) {\n  const returnUrl = \"/organization/shifts\"\n  const [ addShift ] = useMutation(ADD_SHIFT)\n  \n  return (\n   <OrganizationShiftsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.shifts.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '' }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addShift({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.shifts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationShiftForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationShiftsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationShiftAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_SHIFT_QUERY, UPDATE_SHIFT } from './queries'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport OrganizationShiftForm from './OrganizationShiftForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationShiftsBase from './OrganizationShiftsBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationShiftEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.shifts.title_edit')\n  const returnUrl = \"/organization/shifts\"\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateShift ] = useMutation(UPDATE_SHIFT)\n\n  if (loading) return (\n    <OrganizationShiftsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  if (error) return (\n    <OrganizationShiftsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n                    \n  const initialData = data.organizationShift;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationShiftsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={SHIFT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateShift({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_SHIFTS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.shifts.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationShiftForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationShiftsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationShiftEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ? \n                <ButtonBack returnUrl=\"/organization/subscriptions\" />\n              :\n                <React.Fragment>\n                  <Link to=\"/organization/subscriptions/groups\" \n                        className='btn btn-secondary ml-2 mr-2'>\n                      <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n                  </Link>\n                  <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscription\">\n                    <ButtonAdd addUrl=\"/organization/subscriptions/add\" />\n                  </HasPermissionWrapper>\n                </React.Fragment>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTIONS_QUERY = gql`\n  query OrganizationSubscriptions($after: String, $before: String, $archived: Boolean) {\n    organizationSubscriptions(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          priceTodayDisplay\n          displayPublic\n          displayShop\n          name\n          description\n          sortOrder\n          minDuration\n          classes\n          subscriptionUnit\n          subscriptionUnitDisplay\n          reconciliationClasses\n          creditValidity\n          unlimited\n          termsAndConditions\n          registrationFee\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SUBSCRIPTION_QUERY = gql`\n  query OrganizationSubscription($id: ID!, $after: String, $before: String) {\n    organizationSubscription(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      name\n      description\n      sortOrder\n      minDuration\n      classes\n      subscriptionUnit\n      subscriptionUnitDisplay\n      reconciliationClasses\n      creditValidity\n      unlimited\n      termsAndConditions\n      registrationFee\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query SubscriptionInputValues($after: String, $before: String) {\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SUBSCRIPTION = gql`\n  mutation CreateSubscription($input: CreateOrganizationSubscriptionInput!) {\n    createOrganizationSubscription(input: $input) {\n      organizationSubscription {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SUBSCRIPTION = gql`\n  mutation UpdateOrganizationSubscription($input: UpdateOrganizationSubscriptionInput!) {\n    updateOrganizationSubscription(input: $input) {\n      organizationSubscription {\n        id\n      }\n    }\n  }\n`\n\n\nexport const ARCHIVE_SUBSCRIPTION = gql`\nmutation ArchiveOrganizationSubscription($input: ArchiveOrganizationSubscriptionInput!) {\n  archiveOrganizationSubscription(input: $input) {\n    organizationSubscription {\n      id\n      archived\n    }\n  }\n}\n`","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from './OrganizationSubscriptionsBase'\n\nimport { GET_SUBSCRIPTIONS_QUERY, ARCHIVE_SUBSCRIPTION } from \"./queries\"\n\n\nfunction OrganizationSubscriptions({t, history}) {\n  const cardTitle = t('organization.subscriptions.title')\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_SUBSCRIPTIONS_QUERY, {\n    variables: {archived: archived},\n    fetchPolicy: \"network-only\"\n  })\n  const [archiveSubscription] = useMutation(ARCHIVE_SUBSCRIPTION)\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.subscriptions.error_loading')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  let subscriptions = data.organizationSubscriptions\n\n  // Empty list\n  if (!subscriptions.edges.length) { return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.subscriptions.empty_list') : t(\"organization.subscriptions.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )}\n\n  return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={t('organization.subscriptions.title')}\n                  headerContent={headerOptions}\n                  hasCardBody={false}\n                  pageInfo={subscriptions.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: subscriptions.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationSubscriptions.edges\n                        const pageInfo = fetchMoreResult.organizationSubscriptions.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new subscriptions at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationSubscriptions: {\n                                __typename: previousResult.organizationSubscriptions.__typename,\n                                edges: [ ...previousResult.organizationSubscriptions.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n              <Table.ColHeader><span className=\"pull-right\">{t('general.price')}</span></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {subscriptions.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <BadgeBoolean value={node.displayPublic} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <BadgeBoolean value={node.displayShop} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {\n                    (node.unlimited) ? t(\"general.unlimited\"):\n                    <div>\n                      {node.classes} <br />\n                      <span className=\"text-muted\"> {t(\"general.a\")} {node.subscriptionUnitDisplay}</span>\n                    </div>\n                  }\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {node.priceTodayDisplay} <br />\n                  <Link to={\"/organization/subscriptions/prices/\" + node.id}\n                        className='btn btn-link btn-sm'>\n                      {/* <Icon prefix=\"fe\" name=\"dollar-sign\" />  */}\n                      {t('general.edit_price')}\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(node.archived) ? \n                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  }\n                  <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      href=\"\"\n                      onClick={() => {\n                        console.log(\"clicked archived\")\n                        let id = node.id\n                        archiveSubscription({ variables: {\n                          input: {\n                          id,\n                          archived: !archived\n                          }\n                  }, refetchQueries: [\n                      {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": archived }}\n                  ]}).then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      (archived) ? t('general.unarchived'): t('general.archived'), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                  }}>\n                    <Icon name=\"inbox\" />\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ContentCard>\n  </OrganizationSubscriptionsBase>\n)}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptions))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    sortOrder: Yup.number()\n      .min(0),\n    minDuration: Yup.number()\n      .min(0),\n    classes: Yup.number()\n      .min(0),\n    subscriptionUnit: Yup.string(),\n    creditValidity: Yup.number()\n      .min(0),\n    reconciliationClasses: Yup.number()\n      .min(0),\n    quickStatsAmount: Yup.number()\n      .min(0),\n    termsAndConditions: Yup.string()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\";\n\n\nconst OrganizationSubscriptionForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.subscription.public')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n      </Form.Group>      \n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayShop\" \n              checked={values.displayShop} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.subscription.shop')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"displayShop\" component=\"div\" />   \n      </Form.Group>      \n      <Form.Group label={t('general.name')} >\n        <Field type=\"text\" \n              name=\"name\" \n              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.description')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"description\"\n            initialValue={values.description}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"description\", e.target.getContent())\n              setFieldTouched(\"description\", true)\n            }}\n          />\n        <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('shop.subscriptions.min_duration_in_months')}>\n            <Field type=\"text\" \n                  name=\"minDuration\" \n                  className={(errors.minDuration) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"minDuration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.sort_order')}>\n            <Field type=\"text\" \n                  name=\"sortOrder\" \n                  className={(errors.sortOrder) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"sortOrder\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"unlimited\" \n              checked={values.unlimied} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('general.unlimited')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"unlimited\" component=\"div\" />   \n      </Form.Group>  \n      {/* Show if unlimited */}\n      { (values.unlimited) ? \"\"\n        : \n        // Show if not unlimited\n        <React.Fragment>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.classes')}>\n                <Field type=\"text\" \n                      name=\"classes\" \n                      className={(errors.classes) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"classes\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group> \n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.subscription_unit')}>\n                <Field component=\"select\" \n                      name=\"subscriptionUnit\" \n                      className={(errors.subscriptionUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                  <option value=\"WEEK\" key={v4()}>{t('subscription_unit.week')}</option>\n                  <option value=\"MONTH\" key={v4()}>{t('subscription_unit.month')}</option>\n                </Field>\n                <ErrorMessage name=\"subscriptionUnit\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('organization.subscriptions.credit_validity')}>\n                <Field type=\"text\" \n                      name=\"creditValidity\" \n                      className={(errors.creditValidity) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"creditValidity\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('organization.subscriptions.reconciliation_classes')}>\n                <Field type=\"text\" \n                      name=\"reconciliationClasses\" \n                      className={(errors.reconciliationClasses) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"reconciliationClasses\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </React.Fragment>\n      } \n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"termsAndConditions\"\n            initialValue={values.termsAndConditions}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"termsAndConditions\", e.target.getContent())\n              setFieldTouched(\"termsAndConditions\", true)\n            }}\n          />\n        <ErrorMessage name=\"termsAndConditions\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {/* <Form.Group label={t('general.membership')}>\n        <Field component=\"select\" \n              name=\"organizationMembership\" \n              className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t(\"general.membership_not_required\")}</option>\n          {inputData.organizationMemberships.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>  */}\n      <Form.Group label={t('general.quickStatsAmount')}>\n        <Field type=\"text\" \n              name=\"quickStatsAmount\" \n              className={(errors.quickStatsAmount) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"quickStatsAmount\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.glaccount')}>\n            <Field component=\"select\" \n                  name=\"financeGlaccount\" \n                  className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeGlaccounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.costcenter')}>\n            <Field component=\"select\" \n                  name=\"financeCostcenter\" \n                  className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeCostcenters.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\"\n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionForm from './OrganizationSubscriptionForm'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from \"./OrganizationSubscriptionsBase\"\n\n\nfunction OrganizationSubscriptionAdd({ t, history }) {\n  const cardTitle = t('organization.subscriptions.title_add')\n  const returnUrl =  \"/organization/subscriptions\"\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createSubscription] = useMutation(CREATE_SUBSCRIPTION)\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              displayPublic: true,\n              displayShop: true,\n              name: \"\",\n              description: \"\",\n              sortOrder: 0,\n              minDuration: 1,\n              classes: 1,\n              subscriptionUnit: \"WEEK\",\n              reconciliationClasses: 0,\n              creditValidity: 31,\n              unlimited: false,\n              termsAndConditions: \"\",\n              organizationMembership: \"\",\n              quickStatsAmount: 0,\n              financeGlaccount: \"\",\n              financeCostcenter: \"\"\n            }}\n            validationSchema={SUBSCRIPTION_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                createSubscription({ variables: {\n                  input: {\n                    displayPublic: values.displayPublic,\n                    displayShop: values.displayShop,\n                    name: values.name,\n                    description: values.description,\n                    sortOrder: parseInt(values.sortOrder),\n                    minDuration: parseInt(values.minDuration),\n                    classes: parseInt(values.classes),\n                    subscriptionUnit: values.subscriptionUnit,\n                    reconciliationClasses: parseInt(values.reconciliationClasses),\n                    creditValidity: parseInt(values.creditValidity),\n                    unlimited: values.unlimited,\n                    termsAndConditions: values.termsAndConditions,\n                    quickStatsAmount: values.quickStatsAmount,\n                    financeGlaccount: values.financeGlaccount,\n                    financeCostcenter: values.financeCostcenter\n                  }\n                }})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.subscriptions.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n              }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <OrganizationSubscriptionForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsBase>\n  )\n}\n\n\n\n// class OrganizationSubscriptionAdd extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization subscription add props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const history = this.props.history\n//     const returnUrl = \"/organization/subscriptions\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title=\"Organization\" />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n\n//               </Grid.Col>\n//               <Grid.Col md={3}>\n//                 <HasPermissionWrapper permission=\"add\"\n//                                       resource=\"organizationsubscription\">\n//                   <Button color=\"primary btn-block mb-6\"\n//                           onClick={() => history.push(returnUrl)}>\n//                     <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                   </Button>\n//                 </HasPermissionWrapper>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_QUERY, UPDATE_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionForm from './OrganizationSubscriptionForm'\n\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from './OrganizationSubscriptionsBase';\n\n\nfunction OrganizationSubscriptionEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/subscriptions\"\n  const cardTitle = t('organization.subscriptions.title_edit')\n\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_QUERY, { \n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateSubscription ] = useMutation(UPDATE_SUBSCRIPTION)\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  const initialData = data\n\n  let initialMembership = \"\"\n  if (initialData.organizationSubscription.organizationMembership) {\n    initialMembership =  initialData.organizationSubscription.organizationMembership.id\n  } \n\n  let initialGlaccount = \"\"\n  if (initialData.organizationSubscription.financeGlaccount) {\n    initialGlaccount =  initialData.organizationSubscription.financeGlaccount.id\n  } \n\n  let initialCostcenter = \"\"\n  if (initialData.organizationSubscription.financeCostcenter) {\n    initialCostcenter =  initialData.organizationSubscription.financeCostcenter.id\n  } \n\n  return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.organizationSubscription.displayPublic,\n            displayShop: initialData.organizationSubscription.displayShop,\n            name: initialData.organizationSubscription.name,\n            description: initialData.organizationSubscription.description,\n            sortOrder: initialData.organizationSubscription.sortOrder,\n            minDuration: initialData.organizationSubscription.minDuration,\n            classes: initialData.organizationSubscription.classes,\n            subscriptionUnit: initialData.organizationSubscription.subscriptionUnit,\n            reconciliationClasses: initialData.organizationSubscription.reconciliationClasses,\n            creditValidity: initialData.organizationSubscription.creditValidity,\n            unlimited: initialData.organizationSubscription.unlimited,\n            termsAndConditions: initialData.organizationSubscription.termsAndConditions,\n            organizationMembership: initialMembership,\n            quickStatsAmount: initialData.organizationSubscription.quickStatsAmount,\n            financeGlaccount:  initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={SUBSCRIPTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateSubscription({ variables: {\n                input: {\n                  id: match.params.id,\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  name: values.name,\n                  description: values.description,\n                  sortOrder: parseInt(values.sortOrder),\n                  minDuration: parseInt(values.minDuration),\n                  classes: parseInt(values.classes),\n                  subscriptionUnit: values.subscriptionUnit,\n                  reconciliationClasses: parseInt(values.reconciliationClasses),\n                  creditValidity: parseInt(values.creditValidity),\n                  unlimited: values.unlimited,\n                  termsAndConditions: values.termsAndConditions,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('organization.subscriptions.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationSubscriptionForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsGroupsBase({ \n  t, history, children, showAdd=false, returnUrl=\"/organization/subscriptions\" \n}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscriptiongroup\">\n                  <ButtonAdd addUrl=\"/organization/subscriptions/groups/add\" className=\"ml-2\" />\n                </HasPermissionWrapper>\n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsGroupsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTION_GROUPS_QUERY = gql`\n  query OrganizationSubscriptionGroups($after: String, $before: String) {\n    organizationSubscriptionGroups(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTION_GROUP_QUERY = gql`\n  query OrganizationSubscriptionGroup($id: ID!) {\n    organizationSubscriptionGroup(id:$id) {\n      id\n      name\n      description\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY = gql`\n  query GetPassesAndGroupMembership($after: String, $before: String, $id:ID!) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationSubscriptionGroup(id: $id) {\n      id\n      name\n      description\n      organizationSubscriptions {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SUBSCRIPTION_GROUP = gql`\n  mutation CreateOrganizationSubscriptionGroup($input:CreateOrganizationSubscriptionGroupInput!) {\n    createOrganizationSubscriptionGroup(input: $input) {\n      organizationSubscriptionGroup{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_SUBSCRIPTION_GROUP = gql`\nmutation UpdateOrganizationSubscriptionGroup($input: UpdateOrganizationSubscriptionGroupInput!) {\n  updateOrganizationSubscriptionGroup(input: $input) {\n    organizationSubscriptionGroup {\n      id\n    }\n  }\n}\n`\n\nexport const DELETE_SUBSCRIPTION_GROUP = gql`\n  mutation DeleteSubscriptionGroup($input: DeleteOrganizationSubscriptionGroupInput!) {\n    deleteOrganizationSubscriptionGroup(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const ADD_CARD_TO_GROUP = gql`\n  mutation AddCardToGroup($input: CreateOrganizationSubscriptionGroupSubscriptionInput!) {\n    createOrganizationSubscriptionGroupSubscription(input:$input) {\n      organizationSubscriptionGroupSubscription {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        organizationSubscriptionGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_CARD_FROM_GROUP = gql`\n  mutation DeleteCardFromGroup($input: DeleteOrganizationSubscriptionGroupSubscriptionInput!) {\n    deleteOrganizationSubscriptionGroupSubscription(input:$input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\n\nimport OrganizationGroupsSubscriptionsBase from \"./OrganizationSubscriptionsGroupsBase\"\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, DELETE_SUBSCRIPTION_GROUP } from \"./queries\"\n\n\nfunction OrganizationSubscriptionsGroups({ t, history }) {\n  const { loading, error, data, fetchMore } = useQuery(GET_SUBSCRIPTION_GROUPS_QUERY)\n  const [deleteSubscriptionGroup] = useMutation(DELETE_SUBSCRIPTION_GROUP)\n\n  if (loading) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <p>{t('organization.subscription_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n\n  const subscription_groups = data.organizationSubscriptionGroups\n  \n  // Empty list\n  if (!subscription_groups.edges.length) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <p>{t('organization.subscription_groups.empty_list')}</p>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n\n  return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}\n            hasCardBody={false}\n            pageInfo={subscription_groups.pageInfo}\n            onLoadMore={() => {\n            fetchMore({\n              variables: {\n                after: subscription_groups.pageInfo.endCursor\n              },\n              updateQuery: (previousResult, { fetchMoreResult }) => {\n                const newEdges = fetchMoreResult.organizationSubscriptionGroups.edges\n                const pageInfo = fetchMoreResult.organizationSubscriptionGroups.pageInfo\n\n                return newEdges.length\n                  ? {\n                      // Put the new subscription_groups at the end of the list and update `pageInfo`\n                      // so we have the new `endCursor` and `hasNextPage` values\n                      organizationSubscriptionGroups: {\n                        __typename: previousResult.organizationSubscriptionGroups.__typename,\n                        edges: [ ...previousResult.organizationSubscriptionGroups.edges, ...newEdges ],\n                        pageInfo\n                      }\n                    }\n                  : previousResult\n              }\n            })\n          }} >\n        <Table cards>\n          <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {subscription_groups.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.description.substring(0, 24)}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <span>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/groups/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/groups/edit/subscriptions/\" + node.id)}\n                            color=\"secondary\">\n                      {t('organization.subscriptions.groups.edit_subscriptions')}\n                    </Button>\n                  </span>\n                  <button className=\"icon btn btn-link btn-sm float-right\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"organization.subscriptions.groups.delete_confirm_msg\"),\n                        msgDescription: <p>{node.name}</p>,\n                        msgSuccess: t('organization.subscriptions.groups.deleted'),\n                        deleteFunction: deleteSubscriptionGroup,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUPS_QUERY} \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nconst OrganizationSubscriptionGroupForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.description')}>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        {(isSubmitting) ?\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          loading\n          disabled={isSubmitting}\n        >\n          {t(\"general.submit\")}\n        </Button>\n        :\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n        }\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n        {(isSubmitting) ? \n          <Alert type=\"primary\" hasExtraSpace>\n            <strong>{t('general.please_wait')}</strong> {t('organization.subscription_groups.toast_creating_might_take_a_while')}\n          </Alert> : \n          \"\"\n        }\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, ADD_SUBSCRIPTION_GROUP } from './queries'\nimport { SUBSCRIPTION_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionGroupForm from './OrganizationSubscriptionsGroupForm'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\nfunction OrganizationSubscriptionGroupAdd({t, history}) {\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const [addSubscriptionGroup] = useMutation(ADD_SUBSCRIPTION_GROUP)\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.subscription_groups.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '' }}\n          validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            addSubscriptionGroup({ variables: {\n              input: {\n                name: values.name, \n                description: values.description,\n              }\n            }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('organization.subscription_groups.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationSubscriptionGroupForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, GET_SUBSCRIPTION_GROUP_QUERY, UPDATE_SUBSCRIPTION_GROUP } from './queries'\nimport { SUBSCRIPTION_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionGroupForm from './OrganizationSubscriptionsGroupForm'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\n\nfunction OrganizationSubscriptionGroupEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const cardTitle = t('organization.subscription_groups.title_edit')\n  const {loading, error, data} = useQuery(GET_SUBSCRIPTION_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateSubscriptionGroup ] = useMutation(UPDATE_SUBSCRIPTION_GROUP)\n  \n  if (loading) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.subscription_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n\n  const initialData = data.organizationSubscriptionGroup;\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            description: initialData.description,\n          }}\n          validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateSubscriptionGroup({ variables: {\n              input: {\n                id: match.params.id,\n                name: values.name,\n                description: values.description,\n              }\n            }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('organization.subscription_groups.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationSubscriptionGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\n\n// class OrganizationSubscriptionGroupEdit extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization subscriptiongroup edit props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n//     const returnUrl = \"/organization/subscriptions/groups\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title=\"Organization\" />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n//               <Card>\n//                 <Card.Header>\n//                   <Card.Title>{t('organization.subscription_groups.title_edit')}</Card.Title>\n//                   {console.log(match.params.id)}\n//                 </Card.Header>\n//                 <Query query={GET_SUBSCRIPTION_GROUP_QUERY} variables={{ id }} >\n//                 {({ loading, error, data, refetch }) => {\n//                     // Loading\n//                     if (loading) return <p>{t('general.loading_with_dots')}</p>\n//                     // Error\n//                     if (error) {\n//                       console.log(error)\n//                       return <p>{t('general.error_sad_smiley')}</p>\n//                     }\n                    \n//                     const initialData = data.organizationSubscriptionGroup;\n//                     console.log('query data')\n//                     console.log(data)\n\n//                     return (\n                      \n//                       <Mutation mutation={UPDATE_SUBSCRIPTION_GROUP} onCompleted={() => history.push(returnUrl)}> \n//                       {(updateSubscriptionGroup, { data }) => (\n//                           <Formik\n//                               initialValues={{ \n//                                 name: initialData.name, \n//                                 description: initialData.description,\n//                               }}\n//                               validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n//                               onSubmit={(values, { setSubmitting }) => {\n//                                   console.log('submit values:')\n//                                   console.log(values)\n\n//                                   updateSubscriptionGroup({ variables: {\n//                                     input: {\n//                                       id: match.params.id,\n//                                       name: values.name,\n//                                       description: values.description,\n//                                     }\n//                                   }, refetchQueries: [\n//                                       {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n//                                   ]})\n//                                   .then(({ data }) => {\n//                                       console.log('got data', data)\n//                                       toast.success((t('organization.subscription_groups.toast_edit_success')), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error)\n//                                       setSubmitting(false)\n//                                     })\n//                               }}\n//                               >\n//                               {({ isSubmitting, errors, values }) => (\n//                                 <OrganizationSubscriptionGroupForm\n//                                   isSubmitting={isSubmitting}\n//                                   errors={errors}\n//                                   returnUrl={returnUrl}\n//                                 />\n//                               )}\n//                           </Formik>\n//                       )}\n//                       </Mutation>\n//                       )}}\n//                 </Query>\n//               </Card>\n//               </Grid.Col>\n//               <Grid.Col md={3}>\n//                 <HasPermissionWrapper permission=\"change\"\n//                                       resource=\"organizationsubscriptiongroup\">\n//                   <Button color=\"primary btn-block mb-6\"\n//                           onClick={() => history.push(returnUrl)}>\n//                     <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                   </Button>\n//                 </HasPermissionWrapper>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupEdit))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, ADD_CARD_TO_GROUP, DELETE_CARD_FROM_GROUP } from './queries'\n\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from '../../general/ContentCard'\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\nfunction OrganizationSubscriptionGroupEditSubscriptions({t, match, history}) {\n  const groupId = match.params.id\n  const returnUrl = \"/organization/subscriptions/groups\"\n  let cardTitle = t('organization.subscription_group_subscriptions.title_edit')\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, {\n    variables: { id: groupId }\n  })\n  const [ addCardToGroup ] = useMutation(ADD_CARD_TO_GROUP)\n  const [ deleteCardFromGroup ] = useMutation(DELETE_CARD_FROM_GROUP)\n\n  if (loading) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const subscriptions = data.organizationSubscriptions\n  const group = data.organizationSubscriptionGroup\n\n  let group_subscriptions = {}\n  if (group.organizationSubscriptions.edges) {\n    group.organizationSubscriptions.edges.map(({ node }) => (\n      group_subscriptions[node.id] = true\n    ))\n  }\n\n  console.log(\"group_subscriptions\")\n  console.log(group_subscriptions)\n\n  cardTitle = `${cardTitle} - ${group.name}`\n\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n      {(!subscriptions.edges) ? \"\" : \n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {subscriptions.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {(node.id in group_subscriptions) ? \n                      <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  {console.log((node.id in group_subscriptions))}\n                  {(!(node.id in group_subscriptions)) ?\n                    // Add\n                    <Table.Col className=\"text-right text-green\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('general.add_to_group')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked add\")\n                          let pass_id = node.id\n                          addCardToGroup({ variables: {\n                            input: {\n                              organizationSubscription: pass_id,\n                              organizationSubscriptionGroup: groupId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, variables: {\"id\": groupId, \"archived\": false }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('general.added_to_group'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                        {t('general.add_to_group')} \n                      </Button>\n                    </Table.Col>\n                    :\n                    // Delete\n                    <Table.Col className=\"text-right text-red\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('general.delete_from_group')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked delete\")\n                          console.log(node.id)\n                          let pass_id = node.id\n                          deleteCardFromGroup({ variables: {\n                            input: {\n                              organizationSubscription: pass_id,\n                              organizationSubscriptionGroup: groupId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, variables: {\"id\": groupId, \"archived\": false }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('general.deleted_from_group'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                        {t('general.delete_from_group')}\n                      </Button>\n                    </Table.Col>\n                    }\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      }\n    </Card>\n  </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupEditSubscriptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsPricesBase ({ t, history, match, children, showAdd=false, returnUrl=\"/organization/subscriptions\" }) {\n  const subscriptionId = match.params.subscription_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscriptionprice\">\n                  <ButtonAdd addUrl={`/organization/subscriptions/prices/add/${subscriptionId}`} className=\"ml-2\" />\n                </HasPermissionWrapper>\n              : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsPricesBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTION_PRICES_QUERY = gql`\n  query OrganizationSubscriptionPrices($after: String, $before: String, $organizationSubscription: ID!) {\n    organizationSubscriptionPrices(first: 15, before: $before, after: $after, organizationSubscription: $organizationSubscription) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n          }\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n        }\n      }\n    }\n    organizationSubscription(id: $organizationSubscription) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_SUBSCRIPTION_PRICE_QUERY = gql`\n  query OrganizationSubscriptionPrice($id: ID!, $after: String, $before: String) {\n    organizationSubscriptionPrice(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SUBSCRIPTION_PRICE = gql`\nmutation CreateOrganizationSubscriptionPrice($input: CreateOrganizationSubscriptionPriceInput!) {\n  createOrganizationSubscriptionPrice(input: $input) {\n    organizationSubscriptionPrice {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n  }\n}\n`\n\nexport const UPDATE_SUBSCRIPTION_PRICE = gql`\nmutation UpdateOrganizationSubscriptionPrice($input: UpdateOrganizationSubscriptionPriceInput!) {\n  updateOrganizationSubscriptionPrice(input: $input) {\n    organizationSubscriptionPrice {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n  }\n}\n`\n\nexport const DELETE_SUBSCRIPTION_PRICE = gql`\n  mutation DeleteOrganizationSubscriptionPrice($input: DeleteOrganizationSubscriptionPriceInput!) {\n    deleteOrganizationSubscriptionPrice(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase'\nimport { GET_SUBSCRIPTION_PRICES_QUERY, DELETE_SUBSCRIPTION_PRICE } from \"./queries\"\nimport { GET_SUBSCRIPTIONS_QUERY } from \"../queries\"\n\nimport ButtonDelete from '../../../ui/ButtonDelete'\n\n\nfunction OrganizationSubscriptionsPrices ({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const subscriptionId = match.params.subscription_id\n  let cardTitle = t('organization.subscription_prices.title')\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SUBSCRIPTION_PRICES_QUERY, {\n    variables: {\n      organizationSubscription: subscriptionId\n    }\n  })\n  const [deleteSubscriptionPrice] = useMutation(DELETE_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  const subscriptionPrices = data.organizationSubscriptionPrices\n  cardTitle = `${cardTitle} - ${data.organizationSubscription.name}`\n  \n\n  if (!subscriptionPrices.edges.length) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t('organization.subscription_prices.empty_list')}\n        </Card.Body>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={subscriptionPrices.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: subscriptionPrices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.organizationSubscriptionsPrices.edges\n              const pageInfo = fetchMoreResult.organizationSubscriptionsPrices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    organizationSubscriptionsPrices: {\n                      __typename: previousResult.organizationSubscriptionsPrices.__typename,\n                      edges: [ ...previousResult.organizationSubscriptionsPrices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {subscriptionPrices.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay} <br />\n                    <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/subscriptions/prices/edit/\" + subscriptionId + '/' + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <ButtonDelete \n                      msgConfirm={t('organization.subscription_prices.delete_confirm_msg')}\n                      msgDescription={<p>\n                        {node.priceDisplay} {node.financeTaxRate && node.financeTaxRate.name} <br />\n                        <span className=\"text-muted\">\n                          {node.dateStart} {(node.dateEnd) ? ' - ' + node.dateEnd : \"\"}\n                        </span>\n                      </p>}\n                      msgSuccess={t('organization.subscription_prices.deleted')}\n                      deleteFunction={deleteSubscriptionPrice}\n                      deleteFunctionVariables={{ variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: { organizationSubscription: subscriptionId }},\n                          {query: GET_SUBSCRIPTIONS_QUERY, variables: {archived: false}},\n                      ]}}\n                    />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsPrices))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_PRICE_SCHEMA = Yup.object().shape({\n    price: Yup.number()\n      .typeError(t('yup.type_error_number'))\n      .required(t('yup.field_required'))\n      .max(99999999999999999999, t('yup.max_decimal_number')),\n    financeTaxRate: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    // dateEnd: Yup.date(),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\n\nimport {\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from \"../../../ui/ButtonFormCancel\" \nimport ButtonFormSubmit from \"../../../ui/ButtonFormSubmit\"\n\n\nconst OrganizationSubscriptionPriceForm = (\n  { t, history, inputData, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl }\n  ) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.price')}>\n            <Field type=\"text\" \n                  name=\"price\" \n                  className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.taxrate')}>\n            <Field component=\"select\" \n                    name=\"financeTaxRate\" \n                    className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n              {console.log(\"query data in subscription price add:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              selected={values.dateStart}\n              onChange={(date) => setFieldValue(\"dateStart\", date)}\n              onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.date_end')}>\n            <CSDatePicker \n              selected={values.dateEnd}\n              onChange={(date) => setFieldValue(\"dateEnd\", date)}\n              onBlur={() => setFieldTouched(\"dateEnd\", true)}\n            />\n            <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY, ADD_SUBSCRIPTION_PRICE, GET_INPUT_VALUES_QUERY } from './queries'\nimport { GET_SUBSCRIPTIONS_QUERY } from '../queries'\nimport { SUBSCRIPTION_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase';\nimport OrganizationSubscriptionPriceForm from './OrganizationSubscriptionPriceForm'\n\n\nfunction OrganizationSubscriptionPriceAdd({ t, history, match }) {\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = t('organization.subscription_prices.title_add')\n  const returnUrl = `/organization/subscriptions/prices/${subscriptionId}`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ addSubscriptionPrice ] = useMutation(ADD_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ price: \"\", dateStart: new Date() }}\n          validationSchema={SUBSCRIPTION_PRICE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              let dateEnd\n              if (values.dateEnd) {\n                dateEnd = dateToLocalISO(values.dateEnd)\n              } else {\n                dateEnd = values.dateEnd\n              }\n\n              addSubscriptionPrice({ variables: {\n                input: {\n                  organizationSubscription: match.params.subscription_id,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd\n                }\n              }, refetchQueries: [\n                  {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: {\"organizationSubscription\": match.params.subscription_id }},\n                  {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.subscription_prices.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <OrganizationSubscriptionPriceForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY, GET_SUBSCRIPTION_PRICE_QUERY, UPDATE_SUBSCRIPTION_PRICE } from './queries'\nimport { GET_SUBSCRIPTIONS_QUERY } from '../queries'\nimport { SUBSCRIPTION_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionPriceForm from './OrganizationSubscriptionPriceForm'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase';\n\n\nfunction OrganizationSubscriptionPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = t('organization.subscription_prices.title_edit')\n  const returnUrl = `/organization/subscriptions/prices/${subscriptionId}`\n\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_PRICE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateSubscriptionPrice ] = useMutation(UPDATE_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  const initialData = data.organizationSubscriptionPrice\n\n    // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            price: initialData.price, \n            financeTaxRate: initialData.financeTaxRate.id,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n          }}\n          validationSchema={SUBSCRIPTION_PRICE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let dateEnd\n              if (values.dateEnd) {\n                if (values.dateEnd instanceof Date) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              } else {\n                dateEnd = values.dateEnd\n              }\n\n              let dateStart\n              if (values.dateStart instanceof Date) {\n                dateStart = dateToLocalISO(values.dateStart)\n              } else {\n                // Input hasn't changed and DatePicket hasn't made a Date object out of it\n                dateStart = values.dateStart\n              }\n\n              updateSubscriptionPrice({ variables: {\n                input: {\n                  id: match.params.id,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  dateStart: dateStart,\n                  dateEnd: dateEnd,\n                }\n              }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: { organizationSubscription: subscriptionId }},\n                {query: GET_SUBSCRIPTIONS_QUERY, variables: { \"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.subscription_prices.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <OrganizationSubscriptionPriceForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </OrganizationSubscriptionPriceForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceEdit))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass RelationsHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"School home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"relations.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"relations.accounts.title\")}</h5>\n                    {t(\"relations.accounts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/relations/accounts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              {/* <HasPermissionWrapper permission=\"view\"\n                                    resource=\"business\">\n                <Grid.Col md={4} lg={4}>\n                  <Link to='/relations/suppliers')}>\n                    <StampCard header={<small>{t('relations.suppliers.title')}</small>} footer={t('')} color=\"blue\" icon=\"package\" />\n                  </Link>\n                </Grid.Col>\n              </HasPermissionWrapper> */}\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"business\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"relations.b2b.title\")}</h5>\n                      {t(\"relations.b2b.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/relations/b2b\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(RelationsHome))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Icon\n  } from \"tabler-react\"\n\n\nclass InputSearch extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Input search props:\")\n    console.log(props)\n    this.input = React.createRef()\n    let inputValue\n    const initialValue = localStorage.getItem(this.props.initialValueKey)\n    if (initialValue) {\n      inputValue = initialValue \n    } else {\n      inputValue = \"\"\n    }\n\n    this.state = {\n      inputValue: inputValue,\n      submitValue: \"\",\n      doneTypingInterval: 500\n    }\n  }\n  \n  componentDidMount() {\n    this.typingTimer = null\n    this.input.current.focus()\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.typingTimer)\n  }\n\n\n  onInputKeyUp() {\n    // Clear timeout\n    if (this.typingTimer) {\n      clearTimeout(this.typingTimer)\n    }\n    \n    this.typingTimer = setTimeout(() => {\n      // console.log(this.input.current.value)  \n      this.setState({submitValue: this.input.current.value})\n      // Trigger onChange after typing timer timeout\n      this.props.onChange(this.state.submitValue)\n    }, this.state.doneTypingInterval)\n  }\n\n\n  onInputChange(event) {\n    this.setState({inputValue: event.target.value})\n  }\n\n\n  render() {\n    // const t = this.props.t\n    const placeholder = this.props.placeholder\n\n    return(\n        <div className=\"row row gutters-xs\">\n          <div className=\"col\">\n            <div className=\"input-icon\">\n              <span className=\"input-icon-addon\">\n                <Icon name=\"search\" />\n              </span>\n              <input \n                ref={this.input}\n                className={`form-control ${this.props.className}`}\n                type=\"text\" \n                placeholder={placeholder} \n                value={this.state.inputValue}\n                onKeyUp={this.onInputKeyUp.bind(this)}\n                onChange={this.onInputChange.bind(this)}\n              />\n            </div>\n          </div>\n          {(this.state.inputValue) ?\n            <div className=\"col col-auto\">\n              <Button\n                color=\"secondary\"\n                // icon=\"x\"\n                disabled={!(this.state.inputValue)}\n                onClick={() => {\n                  this.setState({inputValue: \"\", submitValue: \"\"}, () => {\n                    // setState callback, this makes sure the onChange function is calles with new values\n                    console.log(this.state)\n                    this.props.onChange(this.state.submitValue) \n                  })\n                }}\n              >\n                {this.props.t(\"general.clear_search\")}\n              </Button>\n            </div>\n          : \"\" }\n        </div>\n    )\n  }\n}\n\nInputSearch.defaultProps = {\n  onChange: f=>f,\n  onClear: f=>f,\n}\n  \nexport default withTranslation()(InputSearch)","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let isActive = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE)\n  if (isActive === null) {\n    isActive = true\n  }\n\n  let queryVars = {\n    isActive: (isActive === \"true\") ? true : false,\n    customer: undefined,\n    instructor: undefined,\n    employee: undefined,\n    orderBy: \"-createdAt\"\n  }\n\n  let search = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_SEARCH)\n  queryVars.searchName = search\n\n  if (search) {\n    queryVars.orderBy = \"fullName\"\n  }\n\n  let type_filter = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_FILTER_TYPE)\n  switch (type_filter) {\n    case \"customer\":\n      queryVars.customer = true\n      break\n    case \"instructor\":\n      queryVars.instructor = true\n      break\n    case \"employee\":\n      queryVars.employee = true\n      break\n    default:\n      break\n  }\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Form,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\n\n\nimport { TOKEN_REFRESH } from '../../../queries/system/auth'\nimport { refreshTokenAndOpenExportLinkInNewTab } from '../../../tools/refresh_token_and_open_export_link';\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport InputSearch from \"../../general/InputSearch\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction RelationsAccountsBase({t, history, children, refetch}) {\n  const exportUrl = `/d/export/relations/accounts/active`\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  \n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"relations.title\")}>\n            <div className=\"page-options d-flex\">\n              <InputSearch \n                initialValueKey={CSLS.RELATIONS_ACCOUNTS_SEARCH}\n                placeholder=\"Search...\"\n                onChange={(value) => {\n                  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_SEARCH, value)\n                  refetch(get_list_query_variables())\n                }}\n              />\n              <Form.Select\n                className=\"w-auto ml-2\"\n                onChange={(event) => {\n                  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_FILTER_TYPE, event.target.value)\n                  console.log(refetch(get_list_query_variables()))\n                }}\n              >\n                <option value=\"\">{t(\"general.all_accounts\")}</option>\n                <option value=\"customer\">{t(\"general.customers\")}</option>\n                <option value=\"instructor\">{t(\"general.instructors\")}</option>\n                <option value=\"employee\">{t(\"general.employees\")}</option>\n              </Form.Select>\n              {/* Export Active Accounts */}\n              <Button\n                color=\"secondary\"\n                icon=\"download-cloud\"\n                className=\"ml-2\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                {t('relations.btn_export_active_accounts')} \n              </Button>\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"account\">\n                <Button color=\"primary ml-2\"\n                        onClick={() => history.push(\"/relations/accounts/add\")}>\n                  <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n                </Button>\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>        \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\nquery Accounts(\n  $after: String, \n  $before: String, \n  $isActive: Boolean!, \n  $searchName: String,\n  $customer: Boolean,\n  $instructor: Boolean,\n  $employee: Boolean,\n  $orderBy: String!\n) {\n  accounts(\n    first: 15, \n    before: $before, \n    after: $after, \n    isActive: $isActive, \n    fullName_Icontains: $searchName,\n    customer: $customer,\n    instructor: $instructor,\n    employee: $employee,\n    orderBy: $orderBy,\n  ) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        customer\n        instructor\n        employee\n        firstName\n        lastName\n        fullName\n        email\n        phone\n        mobile\n        isActive\n        urlImageThumbnailSmall\n        subscriptionsLatest {\n          organizationSubscription {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n        }\n        classpassesLatest {\n          id\n          organizationClasspass {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemaining\n          classesRemainingDisplay\n          isExpired\n        }\n      }\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_QUERY = gql`\n  query Account($id: ID!) {\n    account(id:$id) {\n      id\n      customer\n      instructor\n      employee\n      firstName\n      lastName\n      email\n      dateOfBirth\n      gender\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      isActive\n      keyNumber\n      mollieCustomerId\n      urlImageThumbnailSmall\n      organizationDiscovery {\n        id\n      }\n      organizationLanguage {\n        id\n      }\n      invoiceToBusiness {\n        id\n      }\n    }\n    organizationDiscoveries(first: 100){\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationLanguages(first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    businesses(first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_ACCOUNT = gql`\n  mutation CreateAccount($input:CreateAccountInput!) {\n    createAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT = gql`\n  mutation UpdateAccount($input:UpdateAccountInput!) {\n    updateAccount(input: $input) {\n      account {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_ACTIVE = gql`\n  mutation UpdateAccountActive($input: UpdateAccountActiveInput!) {\n    updateAccountActive(input: $input) {\n      account {\n        id\n        isActive\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT = gql`\n  mutation DeleteAccount($input: DeleteAccountInput!) {\n    deleteAccount(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Avatar,\n  Badge,\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Container,\n  List,\n  SocialNetworksList,\n  Table,\n  Tooltip\n} from \"tabler-react\";\n\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport RelationsAccountsBase from \"./RelationsAccountsBase\"\nimport { GET_ACCOUNTS_QUERY, UPDATE_ACCOUNT_ACTIVE, DELETE_ACCOUNT } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n// Set some initial value for isActive, if not found\nif (!localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE)) {\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, true) \n} \n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          {msgConfirm}\n          {msgDescription}\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deleteFunction(functionVariables)\n                .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success(\n                    msgSuccess, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error);\n                })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n        </div>\n      )\n    }\n  })\n}\n\n\nfunction RelationsAccounts({t, location}) {\n  const [isLoadingMore, setIsLoadingMore] = useState(false)\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const {loading, error, data, fetchMore, refetch } = useQuery(GET_ACCOUNTS_QUERY, {\n    variables: get_list_query_variables(),\n    onError: console.log,\n    // These options would be nice to enable, but behave strangely with current caching\n    // notifyOnNetworkStatusChange: true\n    // fetchPolicy: \"network-only\"\n  })\n  const [updateAccountActive] = useMutation(UPDATE_ACCOUNT_ACTIVE)\n  const [deleteAccount] = useMutation(DELETE_ACCOUNT)\n\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n\n  if (loading || (data && !data.accounts)) return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.accounts.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )\n  \n  if (error) return (\n    <RelationsAccountsBase refetch={refetch}>\n      <Container>\n        <ContentCard cardTitle={t('relations.accounts.title')}>\n          <p>{t('relations.accounts.error_loading')}</p>\n        </ContentCard>\n      </Container>\n    </RelationsAccountsBase>\n  )\n\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.active')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"false\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.deleted')}\n    </Button>\n  </Card.Options>\n\n  let accounts = data.accounts\n  let pageInfo = accounts.pageInfo\n\n  // Empty list\n  if (!accounts.edges.length) { return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.accounts.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") ? t('relations.accounts.empty_list') : t(\"relations.accounts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )}\n\n  // Data\n  return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard \n        cardTitle={t('relations.accounts.title')}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={data.accounts.pageInfo}\n        isLoadingMore={isLoadingMore}\n        onLoadMore={async () => {\n          setIsLoadingMore(true)\n          if (pageInfo.hasNextPage) {\n            await fetchMore({\n              variables: {\n                after: pageInfo.endCursor,\n              },\n            });\n          }\n          setIsLoadingMore(false)\n        }}\n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.products')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.contact')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.id}/profile`}>\n                      {(node.urlImageThumbnailSmall) ? \n                        <Avatar size={\"lg\"} imageURL={node.urlImageThumbnailSmall} /> :\n                        <Avatar size={\"lg\"} icon=\"user\" />\n                      }\n                    </Link>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <span className=\"bold\">{node.fullName}</span>\n                    <div className=\"text-muted\">\n                      <a href={`mailto:${node.email}`}>{node.email}</a>\n                    </div>\n                    {(node.customer) ? <span>\n                        <Badge color=\"primary\" className=\"mr-1\">{t(\"general.customer\")}</Badge>\n                      </span> : null}\n                    {(node.instructor) ? <span>\n                        <Badge color=\"info\" className=\"mr-1\">{t(\"general.instructor\")}</Badge>\n                      </span> : null}\n                    {(node.employee) ? <span>\n                        <Badge color=\"secondary\">{t(\"general.employee\")}</Badge>\n                      </span> : null}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.subscriptionsLatest) ? \n                      node.subscriptionsLatest.map((subscription) => (\n                        <div key={v4()}>\n                          <small>\n                          <Icon name=\"edit\" /> {' '}\n                          { subscription.organizationSubscription.name } <br />\n                          <div className=\"text-muted \">\n                            <small>\n                              { moment(subscription.dateStart).format(dateFormat) } \n                              {(subscription.dateEnd) ? \n                                <span> - {moment(subscription.dateEnd).format(dateFormat)}</span>  \n                                : \"\"\n                              }\n                            </small>\n                          </div>\n                          </small>\n                        </div>\n                      )) \n                      : \"\"\n                    }\n                    {(node.classpassesLatest) ? \n                      node.classpassesLatest.map((classpass) => (\n                        <div key={v4()}>\n                          <small>\n                          <Icon name=\"credit-card\" /> {' '}\n                          { classpass.organizationClasspass.name } <br />\n                          <div className=\"text-muted \">\n                            <small>\n                              { moment(classpass.dateStart).format(dateFormat) } {\" - \"}\n                              { moment(classpass.dateEnd).format(dateFormat)} { \" | \" }  \n                              { t(\"general.classes_remaining\") }: { classpass.classesRemainingDisplay }\n                            </small>\n                          </div>\n                          </small>\n                        </div>\n                      )) \n                      : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col>\n                    <SocialNetworksList className=\"mb-0 mt-2\">\n                      {\n                        (node.phone) ? \n                          <List.Item inline>\n                            <Tooltip content={node.phone} placement=\"top\">\n                              <span>\n                                <Icon prefix=\"fe\" name=\"phone\" />\n                              </span>\n                            </Tooltip>\n                          </List.Item>\n                        // No phone number found\n                        : \"\"\n                      }\n                      {\n                        (node.mobile) ?\n                          <List.Item inline>\n                            <Tooltip content={node.mobile} placement=\"top\">\n                              <span>\n                                <Icon prefix=\"fe\" name=\"smartphone\" />\n                              </span>\n                            </Tooltip>\n                          </List.Item> \n                          // No mobile number found\n                          : \"\"\n                      }\n\n                      <List.Item inline>\n                        <Tooltip content={node.email} placement=\"top\">\n                          <a href={\"mailto:\" + node.email}>\n                            <Icon prefix=\"fe\" name=\"mail\" />\n                          </a>\n                        </Tooltip>\n                      </List.Item>\n                    </SocialNetworksList>\n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    {(node.customer) ? <span>\n                        <Badge color=\"primary\" className=\"mb-1\">{t(\"general.customer\")}</Badge> <br />\n                      </span> : null}\n                    {(node.instructor) ? <span>\n                        <Badge color=\"info\" className=\"mb-1\">{t(\"general.instructor\")}</Badge> <br />\n                      </span> : null}\n                    {(node.employee) ? <span>\n                        <Badge color=\"secondary\" className=\"mb-1\">{t(\"general.employee\")}</Badge> <br />\n                      </span> : null}\n                  </Table.Col> */}\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(!node.isActive) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/relations/accounts/${node.id}/profile`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.deactivate')} \n                      href=\"\"\n                      onClick={() => {\n                        let id = node.id\n                        let isActive \n                        if (localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") {\n                          isActive = true\n                        } else {\n                          isActive = false\n                        }\n\n                        updateAccountActive({ variables: {\n                          input: {\n                            id,\n                            isActive: !isActive // invert, as we need the opposite from the list currently displayed\n                          }\n                    }, refetchQueries: [\n                        {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (isActive) ? t('relations.accounts.deactivated'): t('relations.accounts.restored'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      {\n                        (node.isActive) ?\n                          <Icon prefix=\"fe\" name=\"trash-2\" /> :\n                          t(\"general.restore\")\n                      }\n                    </button>\n                  {\n                    (node.isActive) ? '' :\n                        <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"relations.accounts.delete_confirm_msg\"),\n                              msgDescription: <p>{node.first_name} {node.last_name}</p>,\n                              msgSuccess: t('relations.accounts.deleted'),\n                              deleteFunction: deleteAccount,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                              ]}\n                            })\n                        }}>\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                  }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccounts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SCHEMA = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.first_name')}>\n                <Field type=\"text\" \n                        name=\"firstName\" \n                        className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.last_name')}>\n                <Field type=\"text\" \n                        name=\"lastName\" \n                        className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Form.Group label={t('general.email')}>\n            <Field type=\"text\" \n                    name=\"email\" \n                    className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">{t('general.cancel')}</Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, ADD_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack';\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountForm from \"./RelationsAccountForm\"\n\nconst returnUrl = \"/relations/accounts\"\n\n\nfunction RelationsAccountAdd({t, history}) {\n  const [addAccount] = useMutation(ADD_ACCOUNT)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('relations.title')} >\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('relations.accounts.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ name: '', code: '' }}\n                    validationSchema={ACCOUNT_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        addAccount({ variables: {\n                          input: {\n                            firstName: values.firstName,\n                            lastName: values.lastName,\n                            email: values.email\n                          }\n                        }, refetchQueries: [\n                            {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            const accountId = data.createAccount.account.id\n                            history.push(`/relations/accounts/${accountId}/profile`)\n                            toast.success((t('relations.accounts.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors }) => (\n                        <RelationsAccountForm\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          returnUrl={returnUrl}\n                        />\n                    )}\n                </Formik>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountAdd))","import { t } from 'i18next'\n\nconst ISO_COUNTRY_CODES = [{\"Name\":t(\"countries.Afghanistan\"),\"Code\":\"AF\"},{\"Name\":t(\"countries.Åland_Islands\"),\"Code\":\"AX\"},{\"Name\":t(\"countries.Albania\"),\"Code\":\"AL\"},{\"Name\":t(\"countries.Algeria\"),\"Code\":\"DZ\"},{\"Name\":t(\"countries.American_Samoa\"),\"Code\":\"AS\"},{\"Name\":t(\"countries.Andorra\"),\"Code\":\"AD\"},{\"Name\":t(\"countries.Angola\"),\"Code\":\"AO\"},{\"Name\":t(\"countries.Anguilla\"),\"Code\":\"AI\"},{\"Name\":t(\"countries.Antarctica\"),\"Code\":\"AQ\"},{\"Name\":t(\"countries.Antigua_and_Barbuda\"),\"Code\":\"AG\"},{\"Name\":t(\"countries.Argentina\"),\"Code\":\"AR\"},{\"Name\":t(\"countries.Armenia\"),\"Code\":\"AM\"},{\"Name\":t(\"countries.Aruba\"),\"Code\":\"AW\"},{\"Name\":t(\"countries.Australia\"),\"Code\":\"AU\"},{\"Name\":t(\"countries.Austria\"),\"Code\":\"AT\"},{\"Name\":t(\"countries.Azerbaijan\"),\"Code\":\"AZ\"},{\"Name\":t(\"countries.Bahamas\"),\"Code\":\"BS\"},{\"Name\":t(\"countries.Bahrain\"),\"Code\":\"BH\"},{\"Name\":t(\"countries.Bangladesh\"),\"Code\":\"BD\"},{\"Name\":t(\"countries.Barbados\"),\"Code\":\"BB\"},{\"Name\":t(\"countries.Belarus\"),\"Code\":\"BY\"},{\"Name\":t(\"countries.Belgium\"),\"Code\":\"BE\"},{\"Name\":t(\"countries.Belize\"),\"Code\":\"BZ\"},{\"Name\":t(\"countries.Benin\"),\"Code\":\"BJ\"},{\"Name\":t(\"countries.Bermuda\"),\"Code\":\"BM\"},{\"Name\":t(\"countries.Bhutan\"),\"Code\":\"BT\"},{\"Name\":t(\"countries.Bolivia,_Plurinational_State_of\"),\"Code\":\"BO\"},{\"Name\":t(\"countries.Bonaire,_Sint_Eustatius_and_Saba\"),\"Code\":\"BQ\"},{\"Name\":t(\"countries.Bosnia_and_Herzegovina\"),\"Code\":\"BA\"},{\"Name\":t(\"countries.Botswana\"),\"Code\":\"BW\"},{\"Name\":t(\"countries.Bouvet_Island\"),\"Code\":\"BV\"},{\"Name\":t(\"countries.Brazil\"),\"Code\":\"BR\"},{\"Name\":t(\"countries.British_Indian_Ocean_Territory\"),\"Code\":\"IO\"},{\"Name\":t(\"countries.Brunei_Darussalam\"),\"Code\":\"BN\"},{\"Name\":t(\"countries.Bulgaria\"),\"Code\":\"BG\"},{\"Name\":t(\"countries.Burkina_Faso\"),\"Code\":\"BF\"},{\"Name\":t(\"countries.Burundi\"),\"Code\":\"BI\"},{\"Name\":t(\"countries.Cambodia\"),\"Code\":\"KH\"},{\"Name\":t(\"countries.Cameroon\"),\"Code\":\"CM\"},{\"Name\":t(\"countries.Canada\"),\"Code\":\"CA\"},{\"Name\":t(\"countries.Cape_Verde\"),\"Code\":\"CV\"},{\"Name\":t(\"countries.Cayman_Islands\"),\"Code\":\"KY\"},{\"Name\":t(\"countries.Central_African_Republic\"),\"Code\":\"CF\"},{\"Name\":t(\"countries.Chad\"),\"Code\":\"TD\"},{\"Name\":t(\"countries.Chile\"),\"Code\":\"CL\"},{\"Name\":t(\"countries.China\"),\"Code\":\"CN\"},{\"Name\":t(\"countries.Christmas_Island\"),\"Code\":\"CX\"},{\"Name\":t(\"countries.Cocos_(Keeling)_Islands\"),\"Code\":\"CC\"},{\"Name\":t(\"countries.Colombia\"),\"Code\":\"CO\"},{\"Name\":t(\"countries.Comoros\"),\"Code\":\"KM\"},{\"Name\":t(\"countries.Congo\"),\"Code\":\"CG\"},{\"Name\":t(\"countries.Congo,_the_Democratic_Republic_of_the\"),\"Code\":\"CD\"},{\"Name\":t(\"countries.Cook_Islands\"),\"Code\":\"CK\"},{\"Name\":t(\"countries.Costa_Rica\"),\"Code\":\"CR\"},{\"Name\":t(\"countries.Côte_d'Ivoire\"),\"Code\":\"CI\"},{\"Name\":t(\"countries.Croatia\"),\"Code\":\"HR\"},{\"Name\":t(\"countries.Cuba\"),\"Code\":\"CU\"},{\"Name\":t(\"countries.Curaçao\"),\"Code\":\"CW\"},{\"Name\":t(\"countries.Cyprus\"),\"Code\":\"CY\"},{\"Name\":t(\"countries.Czech_Republic\"),\"Code\":\"CZ\"},{\"Name\":t(\"countries.Denmark\"),\"Code\":\"DK\"},{\"Name\":t(\"countries.Djibouti\"),\"Code\":\"DJ\"},{\"Name\":t(\"countries.Dominica\"),\"Code\":\"DM\"},{\"Name\":t(\"countries.Dominican_Republic\"),\"Code\":\"DO\"},{\"Name\":t(\"countries.Ecuador\"),\"Code\":\"EC\"},{\"Name\":t(\"countries.Egypt\"),\"Code\":\"EG\"},{\"Name\":t(\"countries.El_Salvador\"),\"Code\":\"SV\"},{\"Name\":t(\"countries.Equatorial_Guinea\"),\"Code\":\"GQ\"},{\"Name\":t(\"countries.Eritrea\"),\"Code\":\"ER\"},{\"Name\":t(\"countries.Estonia\"),\"Code\":\"EE\"},{\"Name\":t(\"countries.Ethiopia\"),\"Code\":\"ET\"},{\"Name\":t(\"countries.Falkland_Islands_(Malvinas)\"),\"Code\":\"FK\"},{\"Name\":t(\"countries.Faroe_Islands\"),\"Code\":\"FO\"},{\"Name\":t(\"countries.Fiji\"),\"Code\":\"FJ\"},{\"Name\":t(\"countries.Finland\"),\"Code\":\"FI\"},{\"Name\":t(\"countries.France\"),\"Code\":\"FR\"},{\"Name\":t(\"countries.French_Guiana\"),\"Code\":\"GF\"},{\"Name\":t(\"countries.French_Polynesia\"),\"Code\":\"PF\"},{\"Name\":t(\"countries.French_Southern_Territories\"),\"Code\":\"TF\"},{\"Name\":t(\"countries.Gabon\"),\"Code\":\"GA\"},{\"Name\":t(\"countries.Gambia\"),\"Code\":\"GM\"},{\"Name\":t(\"countries.Georgia\"),\"Code\":\"GE\"},{\"Name\":t(\"countries.Germany\"),\"Code\":\"DE\"},{\"Name\":t(\"countries.Ghana\"),\"Code\":\"GH\"},{\"Name\":t(\"countries.Gibraltar\"),\"Code\":\"GI\"},{\"Name\":t(\"countries.Greece\"),\"Code\":\"GR\"},{\"Name\":t(\"countries.Greenland\"),\"Code\":\"GL\"},{\"Name\":t(\"countries.Grenada\"),\"Code\":\"GD\"},{\"Name\":t(\"countries.Guadeloupe\"),\"Code\":\"GP\"},{\"Name\":t(\"countries.Guam\"),\"Code\":\"GU\"},{\"Name\":t(\"countries.Guatemala\"),\"Code\":\"GT\"},{\"Name\":t(\"countries.Guernsey\"),\"Code\":\"GG\"},{\"Name\":t(\"countries.Guinea\"),\"Code\":\"GN\"},{\"Name\":t(\"countries.Guinea-Bissau\"),\"Code\":\"GW\"},{\"Name\":t(\"countries.Guyana\"),\"Code\":\"GY\"},{\"Name\":t(\"countries.Haiti\"),\"Code\":\"HT\"},{\"Name\":t(\"countries.Heard_Island_and_McDonald_Islands\"),\"Code\":\"HM\"},{\"Name\":t(\"countries.Holy_See_(Vatican_City_State)\"),\"Code\":\"VA\"},{\"Name\":t(\"countries.Honduras\"),\"Code\":\"HN\"},{\"Name\":t(\"countries.Hong_Kong\"),\"Code\":\"HK\"},{\"Name\":t(\"countries.Hungary\"),\"Code\":\"HU\"},{\"Name\":t(\"countries.Iceland\"),\"Code\":\"IS\"},{\"Name\":t(\"countries.India\"),\"Code\":\"IN\"},{\"Name\":t(\"countries.Indonesia\"),\"Code\":\"ID\"},{\"Name\":t(\"countries.Iran,_Islamic_Republic_of\"),\"Code\":\"IR\"},{\"Name\":t(\"countries.Iraq\"),\"Code\":\"IQ\"},{\"Name\":t(\"countries.Ireland\"),\"Code\":\"IE\"},{\"Name\":t(\"countries.Isle_of_Man\"),\"Code\":\"IM\"},{\"Name\":t(\"countries.Israel\"),\"Code\":\"IL\"},{\"Name\":t(\"countries.Italy\"),\"Code\":\"IT\"},{\"Name\":t(\"countries.Jamaica\"),\"Code\":\"JM\"},{\"Name\":t(\"countries.Japan\"),\"Code\":\"JP\"},{\"Name\":t(\"countries.Jersey\"),\"Code\":\"JE\"},{\"Name\":t(\"countries.Jordan\"),\"Code\":\"JO\"},{\"Name\":t(\"countries.Kazakhstan\"),\"Code\":\"KZ\"},{\"Name\":t(\"countries.Kenya\"),\"Code\":\"KE\"},{\"Name\":t(\"countries.Kiribati\"),\"Code\":\"KI\"},{\"Name\":t(\"countries.Korea,_Democratic_People's_Republic_of\"),\"Code\":\"KP\"},{\"Name\":t(\"countries.Korea,_Republic_of\"),\"Code\":\"KR\"},{\"Name\":t(\"countries.Kuwait\"),\"Code\":\"KW\"},{\"Name\":t(\"countries.Kyrgyzstan\"),\"Code\":\"KG\"},{\"Name\":t(\"countries.Lao_People's_Democratic_Republic\"),\"Code\":\"LA\"},{\"Name\":t(\"countries.Latvia\"),\"Code\":\"LV\"},{\"Name\":t(\"countries.Lebanon\"),\"Code\":\"LB\"},{\"Name\":t(\"countries.Lesotho\"),\"Code\":\"LS\"},{\"Name\":t(\"countries.Liberia\"),\"Code\":\"LR\"},{\"Name\":t(\"countries.Libya\"),\"Code\":\"LY\"},{\"Name\":t(\"countries.Liechtenstein\"),\"Code\":\"LI\"},{\"Name\":t(\"countries.Lithuania\"),\"Code\":\"LT\"},{\"Name\":t(\"countries.Luxembourg\"),\"Code\":\"LU\"},{\"Name\":t(\"countries.Macao\"),\"Code\":\"MO\"},{\"Name\":t(\"countries.Macedonia,_the_Former_Yugoslav_Republic_of\"),\"Code\":\"MK\"},{\"Name\":t(\"countries.Madagascar\"),\"Code\":\"MG\"},{\"Name\":t(\"countries.Malawi\"),\"Code\":\"MW\"},{\"Name\":t(\"countries.Malaysia\"),\"Code\":\"MY\"},{\"Name\":t(\"countries.Maldives\"),\"Code\":\"MV\"},{\"Name\":t(\"countries.Mali\"),\"Code\":\"ML\"},{\"Name\":t(\"countries.Malta\"),\"Code\":\"MT\"},{\"Name\":t(\"countries.Marshall_Islands\"),\"Code\":\"MH\"},{\"Name\":t(\"countries.Martinique\"),\"Code\":\"MQ\"},{\"Name\":t(\"countries.Mauritania\"),\"Code\":\"MR\"},{\"Name\":t(\"countries.Mauritius\"),\"Code\":\"MU\"},{\"Name\":t(\"countries.Mayotte\"),\"Code\":\"YT\"},{\"Name\":t(\"countries.Mexico\"),\"Code\":\"MX\"},{\"Name\":t(\"countries.Micronesia,_Federated_States_of\"),\"Code\":\"FM\"},{\"Name\":t(\"countries.Moldova,_Republic_of\"),\"Code\":\"MD\"},{\"Name\":t(\"countries.Monaco\"),\"Code\":\"MC\"},{\"Name\":t(\"countries.Mongolia\"),\"Code\":\"MN\"},{\"Name\":t(\"countries.Montenegro\"),\"Code\":\"ME\"},{\"Name\":t(\"countries.Montserrat\"),\"Code\":\"MS\"},{\"Name\":t(\"countries.Morocco\"),\"Code\":\"MA\"},{\"Name\":t(\"countries.Mozambique\"),\"Code\":\"MZ\"},{\"Name\":t(\"countries.Myanmar\"),\"Code\":\"MM\"},{\"Name\":t(\"countries.Namibia\"),\"Code\":\"NA\"},{\"Name\":t(\"countries.Nauru\"),\"Code\":\"NR\"},{\"Name\":t(\"countries.Nepal\"),\"Code\":\"NP\"},{\"Name\":t(\"countries.Netherlands\"),\"Code\":\"NL\"},{\"Name\":t(\"countries.New_Caledonia\"),\"Code\":\"NC\"},{\"Name\":t(\"countries.New_Zealand\"),\"Code\":\"NZ\"},{\"Name\":t(\"countries.Nicaragua\"),\"Code\":\"NI\"},{\"Name\":t(\"countries.Niger\"),\"Code\":\"NE\"},{\"Name\":t(\"countries.Nigeria\"),\"Code\":\"NG\"},{\"Name\":t(\"countries.Niue\"),\"Code\":\"NU\"},{\"Name\":t(\"countries.Norfolk_Island\"),\"Code\":\"NF\"},{\"Name\":t(\"countries.Northern_Mariana_Islands\"),\"Code\":\"MP\"},{\"Name\":t(\"countries.Norway\"),\"Code\":\"NO\"},{\"Name\":t(\"countries.Oman\"),\"Code\":\"OM\"},{\"Name\":t(\"countries.Pakistan\"),\"Code\":\"PK\"},{\"Name\":t(\"countries.Palau\"),\"Code\":\"PW\"},{\"Name\":t(\"countries.Palestine,_State_of\"),\"Code\":\"PS\"},{\"Name\":t(\"countries.Panama\"),\"Code\":\"PA\"},{\"Name\":t(\"countries.Papua_New_Guinea\"),\"Code\":\"PG\"},{\"Name\":t(\"countries.Paraguay\"),\"Code\":\"PY\"},{\"Name\":t(\"countries.Peru\"),\"Code\":\"PE\"},{\"Name\":t(\"countries.Philippines\"),\"Code\":\"PH\"},{\"Name\":t(\"countries.Pitcairn\"),\"Code\":\"PN\"},{\"Name\":t(\"countries.Poland\"),\"Code\":\"PL\"},{\"Name\":t(\"countries.Portugal\"),\"Code\":\"PT\"},{\"Name\":t(\"countries.Puerto_Rico\"),\"Code\":\"PR\"},{\"Name\":t(\"countries.Qatar\"),\"Code\":\"QA\"},{\"Name\":t(\"countries.Réunion\"),\"Code\":\"RE\"},{\"Name\":t(\"countries.Romania\"),\"Code\":\"RO\"},{\"Name\":t(\"countries.Russian_Federation\"),\"Code\":\"RU\"},{\"Name\":t(\"countries.Rwanda\"),\"Code\":\"RW\"},{\"Name\":t(\"countries.Saint_Barthélemy\"),\"Code\":\"BL\"},{\"Name\":t(\"countries.Saint_Helena,_Ascension_and_Tristan_da_Cunha\"),\"Code\":\"SH\"},{\"Name\":t(\"countries.Saint_Kitts_and_Nevis\"),\"Code\":\"KN\"},{\"Name\":t(\"countries.Saint_Lucia\"),\"Code\":\"LC\"},{\"Name\":t(\"countries.Saint_Martin_(French_part)\"),\"Code\":\"MF\"},{\"Name\":t(\"countries.Saint_Pierre_and_Miquelon\"),\"Code\":\"PM\"},{\"Name\":t(\"countries.Saint_Vincent_and_the_Grenadines\"),\"Code\":\"VC\"},{\"Name\":t(\"countries.Samoa\"),\"Code\":\"WS\"},{\"Name\":t(\"countries.San_Marino\"),\"Code\":\"SM\"},{\"Name\":t(\"countries.Sao_Tome_and_Principe\"),\"Code\":\"ST\"},{\"Name\":t(\"countries.Saudi_Arabia\"),\"Code\":\"SA\"},{\"Name\":t(\"countries.Senegal\"),\"Code\":\"SN\"},{\"Name\":t(\"countries.Serbia\"),\"Code\":\"RS\"},{\"Name\":t(\"countries.Seychelles\"),\"Code\":\"SC\"},{\"Name\":t(\"countries.Sierra_Leone\"),\"Code\":\"SL\"},{\"Name\":t(\"countries.Singapore\"),\"Code\":\"SG\"},{\"Name\":t(\"countries.Sint_Maarten_(Dutch_part)\"),\"Code\":\"SX\"},{\"Name\":t(\"countries.Slovakia\"),\"Code\":\"SK\"},{\"Name\":t(\"countries.Slovenia\"),\"Code\":\"SI\"},{\"Name\":t(\"countries.Solomon_Islands\"),\"Code\":\"SB\"},{\"Name\":t(\"countries.Somalia\"),\"Code\":\"SO\"},{\"Name\":t(\"countries.South_Africa\"),\"Code\":\"ZA\"},{\"Name\":t(\"countries.South_Georgia_and_the_South_Sandwich_Islands\"),\"Code\":\"GS\"},{\"Name\":t(\"countries.South_Sudan\"),\"Code\":\"SS\"},{\"Name\":t(\"countries.Spain\"),\"Code\":\"ES\"},{\"Name\":t(\"countries.Sri_Lanka\"),\"Code\":\"LK\"},{\"Name\":t(\"countries.Sudan\"),\"Code\":\"SD\"},{\"Name\":t(\"countries.Suriname\"),\"Code\":\"SR\"},{\"Name\":t(\"countries.Svalbard_and_Jan_Mayen\"),\"Code\":\"SJ\"},{\"Name\":t(\"countries.Swaziland\"),\"Code\":\"SZ\"},{\"Name\":t(\"countries.Sweden\"),\"Code\":\"SE\"},{\"Name\":t(\"countries.Switzerland\"),\"Code\":\"CH\"},{\"Name\":t(\"countries.Syrian_Arab_Republic\"),\"Code\":\"SY\"},{\"Name\":t(\"countries.Taiwan,_Province_of_China\"),\"Code\":\"TW\"},{\"Name\":t(\"countries.Tajikistan\"),\"Code\":\"TJ\"},{\"Name\":t(\"countries.Tanzania,_United_Republic_of\"),\"Code\":\"TZ\"},{\"Name\":t(\"countries.Thailand\"),\"Code\":\"TH\"},{\"Name\":t(\"countries.Timor-Leste\"),\"Code\":\"TL\"},{\"Name\":t(\"countries.Togo\"),\"Code\":\"TG\"},{\"Name\":t(\"countries.Tokelau\"),\"Code\":\"TK\"},{\"Name\":t(\"countries.Tonga\"),\"Code\":\"TO\"},{\"Name\":t(\"countries.Trinidad_and_Tobago\"),\"Code\":\"TT\"},{\"Name\":t(\"countries.Tunisia\"),\"Code\":\"TN\"},{\"Name\":t(\"countries.Turkey\"),\"Code\":\"TR\"},{\"Name\":t(\"countries.Turkmenistan\"),\"Code\":\"TM\"},{\"Name\":t(\"countries.Turks_and_Caicos_Islands\"),\"Code\":\"TC\"},{\"Name\":t(\"countries.Tuvalu\"),\"Code\":\"TV\"},{\"Name\":t(\"countries.Uganda\"),\"Code\":\"UG\"},{\"Name\":t(\"countries.Ukraine\"),\"Code\":\"UA\"},{\"Name\":t(\"countries.United_Arab_Emirates\"),\"Code\":\"AE\"},{\"Name\":t(\"countries.United_Kingdom\"),\"Code\":\"GB\"},{\"Name\":t(\"countries.United_States\"),\"Code\":\"US\"},{\"Name\":t(\"countries.United_States_Minor_Outlying_Islands\"),\"Code\":\"UM\"},{\"Name\":t(\"countries.Uruguay\"),\"Code\":\"UY\"},{\"Name\":t(\"countries.Uzbekistan\"),\"Code\":\"UZ\"},{\"Name\":t(\"countries.Vanuatu\"),\"Code\":\"VU\"},{\"Name\":t(\"countries.Venezuela,_Bolivarian_Republic_of\"),\"Code\":\"VE\"},{\"Name\":t(\"countries.Viet_Nam\"),\"Code\":\"VN\"},{\"Name\":t(\"countries.Virgin_Islands_British\"),\"Code\":\"VG\"},{\"Name\":t(\"countries.Virgin_Islands_US\"),\"Code\":\"VI\"},{\"Name\":t(\"countries.Wallis_and_Futuna\"),\"Code\":\"WF\"},{\"Name\":t(\"countries.Western_Sahara\"),\"Code\":\"EH\"},{\"Name\":t(\"countries.Yemen\"),\"Code\":\"YE\"},{\"Name\":t(\"countries.Zambia\"),\"Code\":\"ZM\"},{\"Name\":t(\"countries.Zimbabwe\"),\"Code\":\"ZW\"}]\n\nexport default ISO_COUNTRY_CODES","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nconst RelationsAccountProfileForm = ({ t, history, isSubmitting, errors, values, inputData, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"customer\" \n                  checked={values.customer} \n                />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.customer')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"customer\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"instructor\" \n                  checked={values.instructor} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.instructor')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"instructor\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"employee\" \n                  checked={values.employee} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.employee')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"employee\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.first_name')}>\n              <Field type=\"text\" \n                      name=\"firstName\" \n                      className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.last_name')}>\n              <Field type=\"text\" \n                      name=\"lastName\" \n                      className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n         <Grid.Col>\n            <Form.Group label={t('general.date_of_birth')}>\n              <CSDatePicker \n                selected={values.dateOfBirth}\n                onChange={(date) => setFieldValue(\"dateOfBirth\", date)}\n                onBlur={() => setFieldTouched(\"dateOfBirth\", true)}\n              />\n              <ErrorMessage name=\"dateOfBirth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.gender')}>\n              <Field component=\"select\" \n                    name=\"gender\" \n                    className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                <option value=\"F\">{t(\"genders.female\")}</option>\n                <option value=\"M\">{t(\"genders.male\")}</option>\n                <option value=\"X\">{t(\"genders.other\")}</option>\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.emergency')}>\n              <Field type=\"text\" \n                     name=\"emergency\" \n                     className={(errors.emergency) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"emergency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.mobile')}>\n              <Field type=\"text\" \n                     name=\"mobile\" \n                     className={(errors.mobile) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"mobile\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                     name=\"postcode\" \n                     className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                     name=\"country\" \n                     className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"country\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.discovery')}>\n              <Field component=\"select\" \n                    name=\"organizationDiscovery\" \n                    className={(errors.organizationDiscovery) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.organizationDiscoveries.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationDiscovery\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.language')}>\n              <Field component=\"select\" \n                    name=\"organizationLanguage\" \n                    className={(errors.organizationLanguage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.organizationLanguages.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLanguage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.invoice_to_business')}>\n              <Field component=\"select\" \n                    name=\"invoiceToBusiness\" \n                    className={(errors.invoiceToBusiness) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"relations.accounts.invoice_to_account\")}</option>\n                {inputData.businesses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"invoiceToBusiness\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.key_number')}>\n              <Field type=\"text\" \n                      name=\"keyNumber\" \n                      className={(errors.keyNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"keyNumber\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountProfileForm))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Avatar,\n  Card,\n  Icon,\n  List,\n  Media,\n  SocialNetworksList,\n  Tooltip,\n} from \"tabler-react\"\n\nfunction ProfileCardSmall({ t, value, user, avatarSize='lg' }) {\n  if (!user) {\n    return \"\"\n  }\n\n  const accountId = user.id\n\n  return (\n    <Card>\n      <Card.Body>\n        <Media>\n          <Link to={`/relations/accounts/${accountId}/profile/image`}>\n            {(user.urlImageThumbnailSmall) ? \n              <Avatar size={avatarSize + \" mr-5\"} imageURL={user.urlImageThumbnailSmall} /> :\n              <Avatar size={avatarSize + \" mr-5\"} icon=\"user\" />\n            }\n          </Link>\n          <Media.Body>\n            <h4 className=\"mb-2\">{user.firstName + \" \" + user.lastName}</h4>\n            <div className=\"text-muted mb-0\">\n              <SocialNetworksList className=\"mb-0 mt-2\">\n                {\n                  (user.phone) ? \n                    <List.Item inline>\n                      <Tooltip content={user.phone} placement=\"top\">\n                        <span>\n                          <Icon prefix=\"fe\" name=\"phone\" />\n                        </span>\n                      </Tooltip>\n                    </List.Item>\n                  // No phone number found\n                  : \"\"\n                }\n                {\n                  (user.mobile) ?\n                    <List.Item inline>\n                      <Tooltip content={user.mobile} placement=\"top\">\n                        <span>\n                          <Icon prefix=\"fe\" name=\"smartphone\" />\n                        </span>\n                      </Tooltip>\n                    </List.Item> \n                    // No mobile number found\n                    : \"\"\n                }\n\n                <List.Item inline>\n                  <Tooltip content={user.email} placement=\"top\">\n                    <a href={\"mailto:\" + user.email}>\n                      <Icon prefix=\"fe\" name=\"mail\" />\n                    </a>\n                  </Tooltip>\n                </List.Item>\n\n              </SocialNetworksList>\n              {/* items={[\n                <a href={\"mailto:\" + user.email}\n                  title={user.email}>\n                  <Icon prefix=\"fe\" name=\"mail\" />\n                </a>,\n                <span title=\"Phone number here\">\n                  <Icon prefix=\"fe\" name=\"phone\" />\n                </span>,\n                <span title=\"Phone number here\">\n                  <Icon prefix=\"fe\" name=\"mobile\" />\n                </span>,\n                \n              ]}\n            /> */}\n              {/* <Text.Small>\n                <Icon name=\"mail\" />  <a href={\"mailto:\" + user.email}>{user.email}</a> <br/>\n                <Icon name=\"phone\" /> user phone nr here... <br />\n                <Icon name=\"smartphone\" /> user mobile nr here...\n              </Text.Small> */}\n            </div>\n            {/* <SocialNetworksList\n              items={[\n                <a href=\"http://www.twitter.com\">\n                  <Icon prefix=\"fa\" name=\"twitter\" />\n                </a>,\n                <a href=\"http://www.facebook.com\">\n                  <Icon prefix=\"fa\" name=\"facebook\" />\n                </a>,\n              ]}\n            /> */}\n          </Media.Body>\n        </Media>\n      </Card.Body>\n    </Card>  \n  )\n}\n\nexport default withTranslation()(ProfileCardSmall)","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\nimport { GET_ACCOUNT_QUERY } from './queries'\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nlet profile_active\nlet subscriptions_active\nlet classpasses_active\nlet classes_active\nlet documents_active\nlet tickets_active\nlet instructor_profile_active\nlet orders_active\nlet invoices_active\nlet bank_account_active\nlet notes_active\nlet finance_payment_batch_category_item_active\nlet accepted_documents_active\n\n\nfunction ProfileMenu({t, accountId, activeLink}) {\n    const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n        variables: {id: accountId}\n    })\n\n    if (loading) return <p>{t('general.loading_with_dots')}</p>\n    // Error\n    if (error) {\n      console.log(error)\n      return <p>{t('general.error_sad_smiley')}</p>\n    }\n    const account = data.account\n    console.log('account in profile menu')\n    console.log(account)\n\n    return (\n      <List.Group transparent={true}>\n        {(activeLink === 'profile') ? profile_active = true: profile_active = false}\n        {(activeLink === 'subscriptions') ? subscriptions_active = true: subscriptions_active = false}\n        {(activeLink === 'classpasses') ? classpasses_active = true: classpasses_active = false}\n        {(activeLink === 'classes') ? classes_active = true: classes_active = false}\n        {(activeLink === 'documents') ? documents_active = true: documents_active = false}\n        {(activeLink === 'tickets') ? tickets_active = true: tickets_active = false}\n        {(activeLink === 'instructor_profile') ? instructor_profile_active = true: instructor_profile_active = false}\n        {(activeLink === 'orders') ? orders_active = true: orders_active = false}\n        {(activeLink === 'invoices') ? invoices_active = true: invoices_active = false}\n        {(activeLink === 'bank_account') ? bank_account_active = true: bank_account_active = false}\n        {(activeLink === 'notes') ? notes_active = true: notes_active = false}\n        {(activeLink === 'finance_payment_batch_category_item') ? \n            finance_payment_batch_category_item_active = true : \n            finance_payment_batch_category_item_active = false }\n        {(activeLink === 'accepted_documents') ? accepted_documents_active = true: accepted_documents_active = false}\n        \n\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/relations/accounts/\" + accountId + \"/profile\"}\n            icon=\"user\"\n            active={profile_active}\n        >\n            {t('relations.accounts.profile')}\n        </List.GroupItem>\n        {/* <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountmembership\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/memberships\"}\n                icon=\"clipboard\"\n                active={memberships_active}\n                >\n            {t('relations.account.memberships.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper> */}\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountsubscription\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/subscriptions\"}\n                icon=\"edit\"\n                active={subscriptions_active}\n                >\n            {t('relations.account.subscriptions.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountclasspass\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/classpasses\"}\n                icon=\"credit-card\"\n                active={classpasses_active}\n                >\n            {t('relations.account.classpasses.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"scheduleitemattendance\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/classes\"}\n                icon=\"book\"\n                active={classes_active}\n                >\n            {t('relations.account.classes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"scheduleitemenrollment\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/enrollments\"}\n                icon=\"refresh-cw\"\n                active={activeLink === 'enrollments'}\n                >\n            {t('relations.account.enrollments.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountscheduleeventticket\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/event_tickets\"}\n                icon=\"clipboard\"\n                active={tickets_active}\n                >\n            {t('relations.account.event_tickets.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountproduct\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/products\"}\n                icon=\"package\"\n                active={(activeLink === 'products')}\n                >\n            {t('relations.account.products.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeorder\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/orders\"}\n                icon=\"file-plus\"\n                active={orders_active}\n                >\n            {t('relations.account.orders.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financequote\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/quotes\"}\n                icon=\"file\"\n                active={(activeLink === \"quotes\")}\n                >\n            {t('relations.account.quotes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeinvoice\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/invoices\"}\n                icon=\"file-text\"\n                active={invoices_active}\n                >\n            {t('relations.account.invoices.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountbankaccount\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/bank_accounts\"}\n                icon=\"briefcase\"\n                active={bank_account_active}\n                >\n            {t('relations.account.bank_accounts.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountfinancepaymentbatchcategoryitem\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/finance_payment_batch_category_items\"}\n                icon=\"list\"\n                active={finance_payment_batch_category_item_active}\n                >\n            {t('relations.account.finance_payment_batch_category_items.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        { (account.instructor) ?\n            <HasPermissionWrapper \n                permission=\"view\"\n                resource=\"accountinstructorprofile\">\n                <List.GroupItem\n                    key={v4()}\n                    className=\"d-flex align-items-center\"\n                    to={\"#/relations/accounts/\" + accountId + \"/instructor_profile\"}\n                    icon=\"paperclip\"\n                    active={instructor_profile_active}\n                    >\n                {t('relations.account.instructor_profile.title')}\n                </List.GroupItem>\n            </HasPermissionWrapper>\n        : \"\" }\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountaccepteddocument\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/accepted_documents\"}\n                icon=\"check-square\"\n                active={accepted_documents_active}\n                >\n            {t('relations.account.accepted_documents.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountdocument\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/documents\"}\n                icon=\"file\"\n                active={documents_active}\n                >\n            {t('relations.account.documents.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountnote\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/notes\"}\n                icon=\"message-square\"\n                active={notes_active}\n                >\n            {t('relations.account.notes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"change\"\n            resource=\"account\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/tools\"}\n                icon=\"settings\"\n                active={(activeLink === 'tools')}\n                >\n            {t('relations.account.tools.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n  )\n}\n\nexport default withTranslation()(ProfileMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\n\nimport CSLS from '../../../tools/cs_local_storage'\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ProfileCardSmall from \"../../ui/ProfileCardSmall\"\n\nimport ButtonBack from '../../ui/ButtonBack'\nimport ProfileMenu from \"./ProfileMenu\"\n\n\nfunction RelationsAccountProfileBase({t, match, children, back, returnUrl='/relations/accounts', pageHeaderButtonList=\"\", activeLink=\"\", user={}}) {\n  const accountId = match.params.account_id\n  let headerTitle = \"\"\n  if (user) {\n    headerTitle = `${user.firstName} ${user.lastName}`\n  }\n\n  returnUrl = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN)\n  if (!returnUrl) {\n    returnUrl = '/relations/accounts'\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={headerTitle}>\n            <div className=\"page-options d-flex\">\n              {(back) ? back : <ButtonBack returnUrl={returnUrl} />}\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>                                    \n            <Grid.Col md={3}>\n              <ProfileCardSmall user={user}/>\n              <ProfileMenu \n                activeLink={activeLink}\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfileBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountProfileForm from \"./RelationsAccountProfileForm\"\nimport RelationsAccountProfileBase from './RelationsAccountProfileBase'\n\n\nfunction RelationsAccountProfile({t, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"profile\"\n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId},\n    fetchPolicy: \"network-only\"\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateOfBirth = null\n  if (account.dateOfBirth) {\n    dateOfBirth = new Date(account.dateOfBirth)\n  }\n\n  let initialValues = { \n    customer: account.customer, \n    instructor: account.instructor, \n    employee: account.employee, \n    firstName: account.firstName, \n    lastName: account.lastName, \n    email: account.email,\n    dateOfBirth: dateOfBirth,\n    gender: account.gender,\n    emergency: account.emergency,\n    phone: account.phone,\n    mobile: account.mobile,\n    address: account.address,\n    postcode: account.postcode,\n    city: account.city,\n    country: account.country,\n    keyNumber: account.keyNumber\n  }\n\n  if (account.organizationDiscovery) {\n    initialValues.organizationDiscovery = account.organizationDiscovery.id\n  }\n\n  if (account.organizationLanguage) {\n    initialValues.organizationLanguage = account.organizationLanguage.id\n  }\n\n  if (account.invoiceToBusiness) {\n    initialValues.invoiceToBusiness = account.invoiceToBusiness.id\n  }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n\n        <Formik\n            initialValues={initialValues}\n            validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: accountId,\n                  customer: values.customer,\n                  instructor: values.instructor,\n                  employee: values.employee,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  gender: values.gender,\n                  emergency: values.emergency,\n                  phone: values.phone,\n                  mobile: values.mobile,\n                  address: values.address,\n                  postcode: values.postcode,\n                  city: values.city,\n                  country: values.country,\n                  keyNumber: values.keyNumber,\n                  organizationDiscovery: values.organizationDiscovery,\n                  organizationLanguage: values.organizationLanguage,\n                  invoiceToBusiness: values.invoiceToBusiness\n                }\n\n                if (values.dateOfBirth) {\n                  input_vars['dateOfBirth'] = dateToLocalISO(values.dateOfBirth)\n                } \n\n                updateAccount({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // Refetch list\n                    {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // Refresh local cached results for this account\n                    {query: GET_ACCOUNT_QUERY, variables: {id: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('relations.accounts.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <RelationsAccountProfileForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                inputData={data}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfile))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nconst RelationsAccountProfileImageForm = ({ t, history, isSubmitting, returnUrl, inputFileName, fileInputLabel, handleFileInputChange=f=>f }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Link to={returnUrl}>\n            <Button color=\"link\" className=\"pull-right\">\n              {t('general.cancel')}\n            </Button>\n          </Link>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountProfileImageForm))\n\n","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from './queries'\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountProfileImageForm from \"./RelationsAccountProfileImageForm\"\nimport RelationsAccountProfileBase from './RelationsAccountProfileBase'\n\n\nfunction RelationsAccountProfileImage({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"profile\"\n  const cardTitle = t('relations.accounts.profile_image')\n  const returnUrl = `/relations/accounts/${accountId}/profile` \n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId}\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n\n  // Vars file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n  // Vars file input field end\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{}}\n            // validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let inputVars = {\n                  id: accountId,\n                }\n\n                function updateImage() {\n                  updateAccount({ variables: {\n                    input: inputVars\n                  }, refetchQueries: [\n                      // Refetch list\n                      {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                      // Refresh local cached results for this account\n                      {query: GET_ACCOUNT_QUERY, variables: {id: accountId}}\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      history.push(`/relations/accounts/${accountId}/profile`)\n                      toast.success((t('relations.accounts.toast_edit_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n                }\n\n                let reader = new FileReader()\n                reader.onload = function(reader_event) {\n                  console.log(reader_event.target.result)\n                  let b64_enc_file = reader_event.target.result\n                  console.log(b64_enc_file)\n                  // Add uploaded document b64 encoded blob to input vars\n                  inputVars.image = b64_enc_file\n                  inputVars.imageFileName = fileName\n      \n                  updateImage()\n                }\n                \n                let file = inputFileName.current.files[0]\n                if (file && file.size < 5242880) {\n                  reader.readAsDataURL(file)\n                } else if (file && file.size > 5242880) { \n                  toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                } else {\n                  updateImage()\n                }\n            }}\n            >\n            {({ isSubmitting, values }) => (\n              <RelationsAccountProfileImageForm\n                isSubmitting={isSubmitting}\n                values={values}\n                inputData={data}\n                inputFileName={inputFileName}\n                fileInputLabel={fileInputLabel}\n                handleFileInputChange={handleFileInputChange}\n                returnUrl={returnUrl}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfileImage))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../ui/ButtonBack'\n\nconst RelationsAccountsBack = ({ t }) => (\n    <ButtonBack returnUrl=\"/relations/accounts\" />\n)\n\nexport default withTranslation()(RelationsAccountsBack)","import { withTranslation } from 'react-i18next'\n\nconst DocumentType = ({ t, documentType }) => {\n  switch (documentType) {\n    case \"TERMS_AND_CONDITIONS\":  \n      return t('general.terms_and_conditions')\n    case \"PRIVACY_POLICY\":\n      return t('general.privacy_policy')\n    default:\n      return t('general.unknown_document_type')\n  }\n}\n\nexport default withTranslation()(DocumentType)\n\n\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY = gql`\n  query AccountAcceptedDocuments($after: String, $before: String, $account: ID!) {\n    accountAcceptedDocuments(first: 15, before:$before, after:$after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          document {\n            id\n            documentType\n            version\n            urlDocument\n          }\n          dateAccepted\n          clientIp\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport DocumentType from \"../../../ui/DocumentType\"\nimport FileDownloadTableButton from \"../../../ui/FileDownloadTableButton\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nimport { GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY } from \"./queries\"\n\n\n\n\nfunction AccountAcceptedDocuments({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t('relations.account.accepted_documents.title')\n\n  const accountId = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY, {\n    variables: {\n      account: accountId\n    }\n  })\n\n  // Loading\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  console.log(data)\n  \n  const account = data.account\n  const acceptedDocuments = data.accountAcceptedDocuments\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {\n              // Empty list\n                (!acceptedDocuments.edges.length) ?\n                  <Card title={cardTitle}>\n                    <Card.Body>\n                      <p>{t('relations.account.accepted_documents.empty_list')}</p>\n                    </Card.Body>\n                  </Card>\n                :\n                <ContentCard \n                  cardTitle={cardTitle}\n                  pageInfo={acceptedDocuments.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: data.accountAcceptedDocuments.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accountAcceptedDocuments.edges\n                        const pageInfo = fetchMoreResult.accountAcceptedDocuments.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new acceptedDocuments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              accountAcceptedDocuments: {\n                                __typename: previousResult.accountAcceptedDocuments.__typename,\n                                edges: [ ...previousResult.accountAcceptedDocuments.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n                >\n                  <Table cards>\n                    <Table.Header>\n                      <Table.Row key={v4()}>\n                        <Table.ColHeader>{t('general.document_type')}</Table.ColHeader>\n                        <Table.ColHeader>{t('general.date_accepted')}</Table.ColHeader>\n                        <Table.ColHeader>{t('relations.account.accepted_documents.accepted_from_address')}</Table.ColHeader>\n                        <Table.ColHeader><span className=\"pull-right\">{t('general.document')}</span></Table.ColHeader>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {acceptedDocuments.edges.map(({ node }) => (\n                          <Table.Row key={v4()}>\n                            <Table.Col key={v4()}>\n                              <DocumentType documentType={node.document.documentType} />\n                            </Table.Col>\n                            <Table.Col key={v4()}>\n                              {moment(node.dateAccepted).format(dateFormat)}\n                            </Table.Col>\n                            <Table.Col>\n                              {node.clientIp}\n                            </Table.Col>\n                            <Table.Col key={v4()}>\n                              <FileDownloadTableButton mediaUrl={node.document.urlDocument} className=\"pull-right\" />\n                            </Table.Col>\n                          </Table.Row>\n                        ))}\n                    </Table.Body>\n                  </Table>\n                </ContentCard>\n              }\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='accepted_documents' \n                accountId={match.params.account_id}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n      \n        \nexport default withTranslation()(withRouter(AccountAcceptedDocuments))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_BANK_ACCOUNTS_QUERY = gql`\n  query AccountBankAccounts($after: String, $before: String, $account: ID!) {\n    accountBankAccounts(\n      first: 1, \n      before: $before, \n      after: $after, \n      account: $account\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          number\n          holder\n          bic\n          mandates(first: 100) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                id\n                reference\n                content\n                signatureDate\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n// export const GET_ACCOUNT_QUERY = gql`\n//   query Account($id: ID!) {\n//     account(id:$id) {\n//       id\n//       customer\n//       instructor\n//       employee\n//       firstName\n//       lastName\n//       email\n//       dateOfBirth\n//       gender\n//       address\n//       postcode\n//       city\n//       country\n//       phone\n//       mobile\n//       emergency\n//       isActive\n//     }\n//   }\n// `\n\nexport const UPDATE_ACCOUNT_BANK_ACCOUNT = gql`\n  mutation UpdateAccountBanKAccount($input:UpdateAccountBankAccountInput!) {\n    updateAccountBankAccount(input: $input) {\n      accountBankAccount {\n        id\n        number\n        holder\n        bic\n      }\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY = gql`\n  query AccountBankAccountMandate($id: ID!) {\n    accountBankAccountMandate(id:$id) {\n      id\n      reference\n      content\n      signatureDate\n    }\n  }\n`\n\n\nexport const CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation CreateAccountBankAccountMandate($input:CreateAccountBankAccountMandateInput!) {\n    createAccountBankAccountMandate(input: $input) {\n      accountBankAccountMandate {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation UpdateAccountBankAccountMandate($input:UpdateAccountBankAccountMandateInput!) {\n    updateAccountBankAccountMandate(input: $input) {\n      accountBankAccountMandate {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation DeleteAccountBankAccountMandate($input:DeleteAccountBankAccountMandateInput!) {\n    deleteAccountBankAccountMandate(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport ButtonBack from '../../../ui/ButtonBack';\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nfunction RelationsAccountBankAccountBase({ t, match, history, children, bankAccountId=\"\", pageHeaderButtonList, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ? \n                <ButtonBack returnUrl={`/relations/accounts/${accountId}/bank_accounts/`} /> :\n                <RelationsAccountsBack />  \n              }\n              {pageHeaderButtonList}\n              {((bankAccountId) && !(showEditBack)) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountbankaccountmandate\">\n                  <ButtonAdd \n                    addUrl={`/relations/accounts/${match.params.account_id}/bank_accounts/${bankAccountId}/mandates/add`}\n                    buttonText={t('relations.account.bank_accounts.mandates.add')}\n                    className=\"ml-2\"\n                  />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='bank_account'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountBankAccountForm = ({ t, history, isSubmitting, errors, values, }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.holder')}>\n              <Field type=\"text\" \n                      name=\"holder\" \n                      className={(errors.holder) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.number')}>\n              <Field type=\"text\" \n                      name=\"number\" \n                      className={(errors.number) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"number\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.bic')}>\n              <Field type=\"text\" \n                      name=\"bic\" \n                      className={(errors.bic) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountForm))\n\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card, \n  Grid,\n  Icon\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY, UPDATE_ACCOUNT_BANK_ACCOUNT } from './queries'\nimport { DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './mandates/queries'\nimport confirm_delete from \"../../../../tools/confirm_delete\"\nimport RelationsAccountBankAccountBase from \"./RelationsAccountBankAccountBase\"\nimport RelationsAccountBankAccountForm from \"./RelationsAccountBankAccountForm\"\n\n\n\nfunction RelationsAccountBankAccount({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNTS_QUERY, {\n    variables: { account: accountId }\n  })\n\n  const [ updateAccountBankAccount ] = useMutation(UPDATE_ACCOUNT_BANK_ACCOUNT)\n  const [ deleteAccountBankAccountMandate ] = useMutation(DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE)\n\n  if (loading) return (\n    <RelationsAccountBankAccountBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </RelationsAccountBankAccountBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <RelationsAccountBankAccountBase>\n        <p>{t('general.loading_with_dots')}</p><p>{t('general.error_sad_smiley')}</p>\n      </RelationsAccountBankAccountBase>\n    )\n  }\n\n  const accountBankAccounts = data.accountBankAccounts\n  const accountBankAccount = accountBankAccounts.edges[0].node\n  const mandates = accountBankAccount.mandates\n  console.log(accountBankAccount)\n\n  return (\n    <RelationsAccountBankAccountBase bankAccountId={accountBankAccount.id}>\n      <Card title={t('relations.account.bank_accounts.title')}>\n        <Formik\n          initialValues={{ \n            number: accountBankAccount.number,\n            holder: accountBankAccount.holder,\n            bic: accountBankAccount.bic\n          }}\n          // validationSchema={ACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let input_vars = {\n                id: accountBankAccount.id,\n                number: values.number,\n                holder: values.holder,\n                bic: values.bic              \n              }\n\n              updateAccountBankAccount({ variables: {\n                input: input_vars\n              }, refetchQueries: [\n                  // Refresh local cached results for this account\n                  {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.account.bank_accounts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card>\n      {(mandates.edges.length) ? <h5>{t(\"relations.account.bank_accounts.mandates.title\")}</h5> : \"\"}\n      <Grid.Row>\n      {mandates.edges.map(({ node }) => (\n        <Grid.Col md={6}>\n          <Card title={node.reference}>\n            <Card.Body>\n              {t(\"relations.account.bank_accounts.mandates.signature_date\")} {moment(node.signatureDate).format(dateFormat)}\n              <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }} />\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                className=\"pull-right\"\n                color=\"danger\"\n                type=\"button\"\n                onClick={() => {\n                  confirm_delete({\n                    t: t,\n                    msgConfirm: t(\"relations.account.bank_accounts.mandates.delete_confirm_msg\"),\n                    msgDescription: <p>{node.reference}</p>,\n                    msgSuccess: t('relations.account.bank_accounts.mandates.deleted'),\n                    deleteFunction: deleteAccountBankAccountMandate,\n                    functionVariables: { \n                      variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, \n                      refetchQueries: [\n                        {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId} } \n                      ]\n                    }\n                  })\n                }}\n              >\n                <Icon name=\"trash-2\" />\n              </Button>\n              <Link to={`/relations/accounts/${accountId}/bank_accounts/${accountBankAccount.id}/mandates/edit/${node.id}`}>\n                <Button\n                  type=\"button\" \n                  color=\"secondary\" \n                >\n                    {t('general.edit')}\n                </Button>\n              </Link>\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n      ))}\n      </Grid.Row>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccount))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../plugin_config/tinymce\"\n\n\nconst RelationsAccountBankAccountMandateForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.reference')}>\n            <Field type=\"text\" \n                    name=\"reference\" \n                    className={(errors.reference) ? \"form-control is-invalid\" : \"form-control\"}\n                    placeholder={t('relations.account.bank_accounts.mandates.reference_placeholder')}\n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"reference\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.signature_date')}>\n            <CSDatePicker \n              selected={values.signatureDate}\n              onChange={(date) => setFieldValue(\"signatureDate\", date)}\n              onBlur={() => setFieldTouched(\"signatureDate\", true)}\n            />\n            <ErrorMessage name=\"signatureDate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.content')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"content\"\n              initialValue={values.content}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"content\", e.target.getContent())\n                setFieldTouched(\"content\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateForm))","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './queries'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY } from '../queries'\nimport RelationsAccountBankAccountMandateForm from './RelationsAccountBankAccountMandateForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport RelationsAccountBankAccountBase from '../RelationsAccountBankAccountBase'\n\n\nfunction RelationsAccountBankAccountMandateAdd({ t, match, history }) {\n  const accountId = match.params.account_id\n  const bankAccountId = match.params.bank_account_id\n  const returnUrl = `/relations/accounts/${accountId}/bank_accounts`\n\n  const [createAccountBankAccountMandate] = useMutation(CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE) \n \n  return (\n    <RelationsAccountBankAccountBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.account.bank_accounts.mandates.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{\n            reference: \"\",\n            content: \"\",\n            signatureDate: new Date()\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createAccountBankAccountMandate({ variables: {\n              input: {\n                accountBankAccount: bankAccountId,\n                reference: values.refrence, \n                content: values.content,\n                signatureDate: dateToLocalISO(values.signatureDate)\n              }\n            }, refetchQueries: [\n              {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('relations.account.bank_accounts.mandates.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountMandateForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </RelationsAccountBankAccountMandateForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY, UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './queries'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY } from '../queries'\nimport RelationsAccountBankAccountMandateForm from './RelationsAccountBankAccountMandateForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport RelationsAccountBankAccountBase from '../RelationsAccountBankAccountBase'\n\n\nfunction RelationsAccountBankAccountMandateEdit({ t, match, history }) {\n  const accountId = match.params.account_id\n  const mandateId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/bank_accounts`\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY, {\n    variables: {'id': mandateId},\n  })\n  const [updateAccountBankAccountMandate] = useMutation(UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE) \n\n  if (loading) return (\n    <RelationsAccountBankAccountBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </RelationsAccountBankAccountBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <RelationsAccountBankAccountBase>\n        <p>{t('general.loading_with_dots')}</p><p>{t('general.error_sad_smiley')}</p>\n      </RelationsAccountBankAccountBase>\n    )\n  }\n\n  const mandate = data.accountBankAccountMandate\n \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let signDate = null\n  if (mandate.signatureDate) {\n    signDate = new Date(mandate.signatureDate)\n  }\n\n  return (\n    <RelationsAccountBankAccountBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.account.bank_accounts.mandates.title_edit')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{\n            reference: mandate.reference,\n            content: mandate.content,\n            signatureDate: signDate\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateAccountBankAccountMandate({ variables: {\n              input: {\n                id: mandateId,\n                reference: values.refrence, \n                content: values.content,\n                signatureDate: dateToLocalISO(values.signatureDate)\n              }\n            }, refetchQueries: [\n              {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.bank_accounts.mandates.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push(returnUrl)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountMandateForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </RelationsAccountBankAccountMandateForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateEdit))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeBookingStatus({ t, status }) {\n  switch (status) {\n    case \"ATTENDING\":\n      return <Badge color=\"success\">{t('schedule.classes.class.attendance.booking_status.ATTENDING')}</Badge> \n    case \"BOOKED\":\n      return <Badge color=\"primary\">{t('schedule.classes.class.attendance.booking_status.BOOKED')}</Badge> \n    case \"CANCELLED\":\n      return <Badge color=\"warning\">{t('schedule.classes.class.attendance.booking_status.CANCELLED')}</Badge> \n    default:\n      return t(\"schedule.classes.class.attendance.booking_status.invalid_type\")\n  }\n}\n\nexport default withTranslation()(BadgeBookingStatus)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountClassesBase({ t, match, history, children, account={} }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className=\"page-options d-flex\">\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='classes' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountClassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_CLASSES_QUERY = gql`\n  query ScheduleItemAttendance($account: ID!, $before: String, $after: String) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, accountScheduleEventTicket_Isnull: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          attendanceType\n          date\n          bookingStatus\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_CLASS_ATTENDANCE_QUERY = gql`\n  query ScheduleItemAttendances($after: String, $before: String, $scheduleItem: ID!, $date: Date!) {\n    scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem: $scheduleItem, date: $date) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }     \n          attendanceType\n          bookingStatus\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    scheduleClass(scheduleItemId:$scheduleItem, date:$date) {\n      scheduleItemId\n      frequencyType\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      date\n      timeStart\n      timeEnd\n      displayPublic\n      status\n      description\n      countAttending\n      countBooked\n      spaces\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItem: ID!, $date: Date!) {\n    scheduleClass(scheduleItemId:$scheduleItem, date:$date) {\n      scheduleItemId\n      frequencyType\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      date\n      timeStart\n      timeEnd\n      displayPublic\n      status\n      description\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_ATTENDANCE = gql`\n  mutation DeleteScheduleItemAttendance($input: DeleteScheduleItemAttendanceInput!) {\n    deleteScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation UpdateScheduleItemAttendance($input: UpdateScheduleItemAttendanceInput!) {\n    updateScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`\n\nexport const RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation ResendClassInfoMail($input: ResendInfoMailScheduleItemAttendanceInput!) {\n    resendInfoMailScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\n// export const GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n//   query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n//     scheduleItemAccount(id: $id) {\n//       id\n//       account {\n//         id\n//         fullName\n//       }\n//       role\n//       account2 {\n//         id\n//         fullName\n//       }\n//       role2\n//       dateStart\n//       dateEnd       \n//     }\n//     accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           fullName\n//         }\n//       }\n//     }\n//   }\n// `\n\n\n// export const GET_INPUT_VALUES_QUERY = gql`\n//   query InputValues($after: String, $before: String) {\n//     accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           fullName\n//         }\n//       }\n//     }\n//   }\n// `","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\nimport { DELETE_SCHEDULE_CLASS_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport moment from 'moment'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nfunction AccountClassDelete({t, match, node, account}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const [deleteScheduleItemAttendance] = useMutation(DELETE_SCHEDULE_CLASS_ATTENDANCE)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm pull-right\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.class.attendance.delete_confirm_msg\"),\n          msgDescription: <p>\n            <List>\n              <List.Item>\n                {t(\"general.time\")}: { moment(node.date).format(dateFormat) } { ' ' }\n                {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n              </List.Item>\n              <List.Item>\n                {t(\"general.class\")}: {node.scheduleItem.organizationClasstype.name} \n              </List.Item>\n              <List.Item>\n                {t(\"general.location\")}: {node.scheduleItem.organizationLocationRoom.organizationLocation.name} \n              </List.Item>\n            </List>    \n          </p>,\n          msgSuccess: t('schedule.classes.class.attendance.delete_success'),\n          deleteFunction: deleteScheduleItemAttendance,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_CLASSES_QUERY, \n                variables: { account: account.id } },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBookingStatus from \"../../../ui/BadgeBookingStatus\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountClassesBase from \"./AccountClassesBase\"\nimport AccountClassDelete from \"./AccountClassDelete\"\n\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\n\n\nfunction AccountClasses({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const account_id = match.params.account_id\n  const cardTitle = t('relations.account.classes.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_CLASSES_QUERY, {\n    variables: {'account': account_id},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountClassesBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountClassesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountClassesBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountClassesBase>\n    )\n  }\n\n  const account = data.account\n  const scheduleItemAttendances = data.scheduleItemAttendances\n  \n  // Empty list\n  if (!scheduleItemAttendances.edges.length) {\n    return (\n      <AccountClassesBase account={account}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.classes.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountClassesBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountClassesBase account={account}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={scheduleItemAttendances.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: scheduleItemAttendances.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n              const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {scheduleItemAttendances.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                { console.log(node) }\n                { console.log(account) }\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) } <br />\n                  <span className=\"text-muted\">\n                    {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n                  </span>\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationClasstype.name }\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                  <span className=\"text-muted\">\n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col>\n                <Table.Col>\n                  <BadgeBookingStatus status={node.bookingStatus} />\n                </Table.Col>\n                <Table.Col>\n                  <AccountClassDelete account={account} node={node} />\n                </Table.Col>\n                {/* <Table.Col className=\"text-right\" key={v4()}>\n                  <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col> */}\n                {/* <Mutation mutation={DELETE_ACCOUNT_CLASSPASS} key={v4()}>\n                  {(deleteAccountClasspass, { data }) => (\n                    <Table.Col className=\"text-right\" key={v4()}>\n                      <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n                            msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n                            msgSuccess: t('relations.account.classpasses.deleted'),\n                            deleteFunction: deleteAccountClasspass,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n                            ]}\n                          })\n                      }}>\n                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                      </button>\n                    </Table.Col>\n                  )}\n                </Mutation> */}\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountClassesBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountEnrollmentsBase({ t, match, history, children, account={}, pageHeaderButtonList }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className=\"page-options d-flex\">\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='enrollments' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountEnrollmentsBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY = gql`\n  query ScheduleItemEnrollments($after: String, $before: String, $scheduleItem: ID!, $dateEnd_Isnull:Boolean) {\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n      enrollmentSpaces\n      enrollments(first: 1000, before: $before, after: $after, scheduleItem: $scheduleItem, dateEnd_Isnull: $dateEnd_Isnull, orderBy: \"fullName\") {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id \n            dateStart\n            dateEnd\n            scheduleItem {\n              id\n            }\n            accountSubscription {\n              id\n              dateStart\n              dateEnd\n              organizationSubscription {\n                id\n                name\n              }\n              account {\n                id\n                fullName\n              }            \n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENT_QUERY = gql`\n  query ScheduleItemEnrollment($id: ID!) {\n    scheduleItemEnrollment(id: $id) {\n      id\n      dateStart\n      dateEnd\n      accountSubscription {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        account {\n          id\n          firstName\n          lastName\n          fullName\n          email\n          phone\n          mobile\n          isActive\n          urlImageThumbnailSmall\n        }\n      }\n      scheduleItem {\n        id\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }  \n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY = gql`\n  query ScheduleItemEnrollmentOptions($account: ID!, $scheduleItem: ID!) {\n    scheduleClassEnrollmentOptions(account: $account, scheduleItem: $scheduleItem) {\n      subscriptions {\n        allowed\n        blocked\n        paused\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            name\n          }\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n    }\n  }\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!) {\n    accountSubscription(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation CreateScheduleItemEnrollment($input: CreateScheduleItemEnrollmentInput!) {\n    createScheduleItemEnrollment(input:$input) {\n      scheduleItemEnrollment {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation UpdateScheduleItemEnrollment($input: UpdateScheduleItemEnrollmentInput!) {\n    updateScheduleItemEnrollment(input:$input) {\n      scheduleItemEnrollment {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation DeleteScheduleItemEnrollment($input: DeleteScheduleItemEnrollmentInput!) {\n    deleteScheduleItemEnrollment(input: $input) {\n      ok\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ENROLLMENTS_QUERY = gql`\n  query ScheduleItemEnrollments($account: ID!, $before: String, $after: String) {\n    scheduleItemEnrollments(first: 20, before: $before, after: $after, accountSubscription_Account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          dateStart\n          dateEnd\n          accountSubscription {\n            id\n            dateStart\n            organizationSubscription {\n              id\n              name\n            }\n            account {\n              id\n              fullName\n            }\n          }\n          scheduleItem {\n            id\n            dateStart\n            timeStart\n            timeEnd\n            frequencyInterval\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","export function getAccountsQueryVariables(searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  if (searchName) {\n    queryVars.searchName = searchName\n  }\n\n  return queryVars\n}\n\nexport function getEnrollmentsListQueryVariables(scheduleItemId, showEnded=false) {\n  let queryVars = {\n    scheduleItem: scheduleItemId,\n    dateEnd_Isnull: true\n  }\n\n  if (showEnded) {\n    queryVars.dateEnd_Isnull = false\n  } \n\n  return queryVars\n}\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_ITEM_ENROLLMENT, GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY } from \"./queries\"\nimport { GET_ACCOUNT_ENROLLMENTS_QUERY } from \"../../../../relations/accounts/enrollments/queries\"\nimport ButtonDelete from '../../../../ui/ButtonDelete'\nimport { getEnrollmentsListQueryVariables } from './tools'\n\nfunction ScheduleClassEnrollmentDelete({t, match, node}) {\n  const scheduleItemId = node.scheduleItem.id\n  const [deleteScheduleItemEnrollment] = useMutation(DELETE_SCHEDULE_ITEM_ENROLLMENT)\n\n    return (\n      <ButtonDelete\n        className=\"float-right\"\n        msgConfirm={t(\"schedule.classes.class.enrollments.delete_confirm_msg\")}\n        msgDescription={<p>{node.accountSubscription.account.fullName}</p>}\n        msgSuccess={t('schedule.classes.class.enrollments.delete_success')}\n        deleteFunction={deleteScheduleItemEnrollment}\n        deleteFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, \n                variables: getEnrollmentsListQueryVariables(scheduleItemId) },\n              { query: GET_ACCOUNT_ENROLLMENTS_QUERY, \n                variables: { account: node.accountSubscription.account.id }}  \n            ]\n          }}\n      />\n    )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport { getWeekdayNames } from '../../../../tools/date_tools'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonEdit from '../../../ui/ButtonEdit'\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountEnrollmentsBase from \"./AccountEnrollmentsBase\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport ScheduleClassEnrollmentDelete from '../../../schedule/classes/all/enrollments/ScheduleClassEnrollmentDelete'\n// import AccountClassDelete from \"./AccountClassDelete\"\n\nimport { GET_ACCOUNT_ENROLLMENTS_QUERY } from \"./queries\"\n\n\nfunction AccountEnrollments({ t, match, location }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const weekdayNames = getWeekdayNames(t)\n\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.enrollments.title')\n\n  const pageHeaderButtonList = <React.Fragment>\n    <RelationsAccountsBack />\n    <ButtonAdd addUrl={`/relations/accounts/${accountId}/enrollment_find_class`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ENROLLMENTS_QUERY, {\n    variables: {'account': accountId},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Return here after adding an enrollment\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_RETURN, location.pathname)\n\n  // Loading\n  if (loading) return (\n    <AccountEnrollmentsBase pageHeaderButtonList={pageHeaderButtonList} >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </AccountEnrollmentsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountEnrollmentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountEnrollmentsBase>\n    )\n  }\n\n  const account = data.account\n  const scheduleItemEnrollments = data.scheduleItemEnrollments\n  \n  // Empty list\n  if (!scheduleItemEnrollments.edges.length) {\n    return (\n      <AccountEnrollmentsBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.enrollments.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountEnrollmentsBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountEnrollmentsBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={scheduleItemEnrollments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: scheduleItemEnrollments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.scheduleItemEnrollments.edges\n              const pageInfo = fetchMoreResult.scheduleItemEnrollments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    scheduleItemEnrollments: {\n                      __typename: previousResult.scheduleItemEnrollments.__typename,\n                      edges: [ ...previousResult.scheduleItemEnrollments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('relations.account.enrollments.dateStart')}</Table.ColHeader>\n              <Table.ColHeader>{t('relations.account.enrollments.dateEnd')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.subscription')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {scheduleItemEnrollments.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  { moment(node.dateStart).format(dateFormat) }\n                </Table.Col>\n                <Table.Col>\n                  { (node.dateEnd) && moment(node.dateEnd).format(dateFormat) }\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationClasstype.name } <br />\n                  <span className=\"text-muted\">\n                    <Icon name=\"clock\" /> { \" \" }\n                      { weekdayNames[node.scheduleItem.frequencyInterval - 1] } { \" \" }\n                      { moment(`${node.scheduleItem.dateStart} ${node.scheduleItem.timeStart}`).format(timeFormat) } <br />\n                    <Icon name=\"home\" /> { node.scheduleItem.organizationLocationRoom.organizationLocation.name } {\" - \" } \n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col>\n                <Table.Col>\n                  { node.accountSubscription.organizationSubscription.name } ({ moment(node.accountSubscription.dateStart).format(dateFormat) })\n                </Table.Col>\n                <Table.Col>\n                  <ScheduleClassEnrollmentDelete node={node} />\n                  <ButtonEdit className='float-right' editUrl={`/relations/accounts/${accountId}/enrollments/edit/${node.id}`} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountEnrollmentsBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountEnrollments))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_ENROLLMENT_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\n\n\nconst ScheduleClassEnrollmentForm = ({ t, history, match, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                placeholderText={t('schedule.classes.enrollments.placeholder_date_end')}\n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <ButtonFormCancel returnUrl={returnUrl} />\n          {(isSubmitting) ? \n            <Alert type=\"primary\" hasExtraSpace>\n              <strong>{t('general.please_wait')}</strong> {t('schedule.classes.enrollments.toast_creating_might_take_a_while')}\n            </Alert> : \n          \"\"\n          }\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\nconst AccountEnrollmentBack = ({ t, accountId }) => (\n  <ButtonBack returnUrl={ `/relations/accounts/${accountId}/enrollments` } />\n)\n\nexport default withTranslation()(withRouter(AccountEnrollmentBack))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\nimport { Card, Icon } from 'tabler-react';\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_ENROLLMENTS_QUERY } from \"./queries\"\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, UPDATE_SCHEDULE_ITEM_ENROLLMENT } from '../../../schedule/classes/all/enrollments/queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from '../../../schedule/classes/all/enrollments/yupSchema'\nimport ScheduleClassEnrollmentForm from '../../../schedule/classes/all/enrollments/ScheduleClassEnrollmentForm'\nimport { dateToLocalISO, getWeekdayNames } from '../../../../tools/date_tools'\n\nimport AccountEnrollmentsBase from \"./AccountEnrollmentsBase\"\nimport AccountEnrollmentBack from \"./AccountEnrollmentBack\"\nimport { getEnrollmentsListQueryVariables } from \"../../../schedule/classes/all/enrollments/tools\"\n\n\nfunction AccountEnrollmentEdit({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  // const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const weekdayNames = getWeekdayNames(t)\n\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/enrollments`\n  let cardTitle = t('relations.account.enrollments.title_edit')\n  const menuActiveLink = \"enrollments\"\n  const pageHeaderButtonList = <AccountEnrollmentBack accountId={accountId} />\n\n  const {loading, error, data} = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassEnrollment] = useMutation(UPDATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <AccountEnrollmentsBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </AccountEnrollmentsBase>\n  )\n\n  if (error) return (\n    <AccountEnrollmentsBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </AccountEnrollmentsBase>\n  )\n\n//   { node.scheduleItem.organizationClasstype.name } <br />\n//   <span className=\"text-muted\">\n//     <Icon name=\"clock\" /> { weekdayNames[node.scheduleItem.frequencyInterval] } { moment(node.timeStart).format(timeFormat) } <br />\n//     <Icon name=\"home\" /> { node.scheduleItem.organizationLocationRoom.organizationLocation.name } {\" - \" } \n\n  console.log('query data')\n  console.log(data)\n  const scheduleItemEnrollment = data.scheduleItemEnrollment\n  const account = data.scheduleItemEnrollment.accountSubscription.account\n  const scheduleItem = data.scheduleItemEnrollment.scheduleItem\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (scheduleItemEnrollment.dateStart) {\n    dateStart = new Date(scheduleItemEnrollment.dateStart)\n  }\n  \n  let dateEnd = null\n  if (scheduleItemEnrollment.dateEnd) {\n    dateEnd = new Date(scheduleItemEnrollment.dateEnd)\n  }\n\n  console.log(scheduleItem)\n\n  return (\n    <AccountEnrollmentsBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"enrollments\"\n      pageHeaderButtonList={pageHeaderButtonList}\n      account={account}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n        <Card.Alert color=\"primary\">\n          <b>{scheduleItem.organizationClasstype.name}</b><br />\n          <Icon name=\"clock\" /> {\" \"} \n              { weekdayNames[scheduleItem.frequencyInterval - 1 ] } {\" \"}\n              { moment(`${scheduleItem.dateStart} ${scheduleItem.timeStart}`).format(timeFormat) } <br />\n            <Icon name=\"home\" /> {\" \"}\n            { scheduleItem.organizationLocationRoom.organizationLocation.name } {\" - \" } \n            { scheduleItem.organizationLocationRoom.name }\n        </Card.Alert>\n        </Card.Body>\n          <Formik\n            initialValues={{  \n              dateStart: dateStart,\n              dateEnd: dateEnd,\n            }}\n            validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n\n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                updateScheduleClassEnrollment({ variables: {\n                  input: {\n                    id: match.params.id,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd\n                  }\n                }, refetchQueries: [\n                    { query: GET_ACCOUNT_ENROLLMENTS_QUERY, \n                      variables: { account: accountId }},\n                    // Also update enrollment list under schedule\n                    {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, \n                      variables: getEnrollmentsListQueryVariables(scheduleItem.id)},\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('schedule.classes.enrollments.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <ScheduleClassEnrollmentForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </ScheduleClassEnrollmentForm>\n            )}\n          </Formik>\n      </Card>\n    </AccountEnrollmentsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountEnrollmentEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT = gql`\n  query Account($accountId: ID!){\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nconst BadgePublic = ({ t, className, isPublic }) => (\n    (isPublic) ?\n        <Badge className={className} color=\"success\">{t('general.public')}</Badge> :\n        <Badge className={className} color=\"danger\">{t('general.not_public')}</Badge> \n)\n\nexport default withTranslation()(BadgePublic)","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSES_QUERY = gql`\n  query ScheduleClasses(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $instructor: ID,\n      $organizationClasstype: ID,\n      $organizationLevel: ID,\n      $organizationLocation: ID,\n    ){\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        instructor: $instructor,\n        organizationClasstype: $organizationClasstype,\n        organizationLevel: $organizationLevel,\n        organizationLocation: $organizationLocation,\n        publicOnly: false\n    ){\n      date\n      bookingOpenOn\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        holiday\n        holidayName\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        spaces\n        countAttending\n        countBooked\n        countAttendingAndBooked\n        availableSpacesOnline\n        availableSpacesTotal\n        displayPublic\n        bookingStatus\n      }\n    }\n    instructors(first: 100) {\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationClasstypes(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_CLASS_QUERY = gql`\n  query ScheduleItem($id: ID!, $before: String, $after: String) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      spaces\n      walkInSpaces\n      displayPublic\n      enrollmentSpaces\n      infoMailEnabled\n      infoMailContent\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleClassInputValues($after: String, $before: String) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_CLASS = gql`\n  mutation CreateScheduleClass($input:CreateScheduleClassInput!) {\n    createScheduleClass(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n  }\n`","import React, { useContext, useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from \"moment\"\n\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon, \n} from \"tabler-react\";\n\nimport AppSettingsContext from '../context/AppSettingsContext'\nimport { dateToLocalISO } from \"../../tools/date_tools\"\nimport { capitalize } from '../../tools/string_tools'\nimport { \n  get_class_messages,\n  represent_class_status,\n  represent_instructor \n} from '../schedule/classes/tools'\n\nimport BadgePublic from './BadgePublic'\nimport CSDatePicker from './CSDatePicker'\nimport { GET_CLASSES_QUERY } from \"../schedule/classes/queries\"\n\n// Action buttons\n// import SettingsMailNotificationButtonAddAccount from '../settings/mail/notifications/SettingsMailNotificationButtonAddAccount'\n\nfunction get_classes_query_variables(date) {\n  let queryVars = {}\n\n  if (date) {\n    const searchDate = dateToLocalISO(date)\n\n    queryVars.dateFrom = searchDate\n    queryVars.dateUntil = searchDate\n  }\n\n  return queryVars\n}\n\n\nfunction SearchClassesOnDate({ \n  t, \n  match, \n  localStorateKeySearchValue=\"\", \n  btnDisableClassesIds=[],\n  btnDisabledMessage=\"\",\n  btnAction,\n }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const [selectedDate, setSelectedDate] = useState(new Date())\n  // const [showSearchResults, setShowSearchResults] = useState(false)\n\n  const { loading, error, data, refetch } = useQuery( GET_CLASSES_QUERY, {\n    variables: get_classes_query_variables(selectedDate)\n  } )\n\n  function renderActionButton(scheduleClassId) {\n    switch(btnAction) {\n      case \"accountEnrollmentAdd\":\n        const accountId = match.params.account_id\n        return <Link to={`/schedule/classes/all/enrollments/${scheduleClassId}/options/${accountId}`}>\n          <Button color=\"primary\" outline size=\"sm\">\n            <Icon name=\"plus\" /> {t(\"general.enroll\")}\n          </Button>\n        </Link>\n      default:\n        return \"btnAction type not defined\"\n    }\n  }\n\n  function Search() {\n    return <CSDatePicker \n      // className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n      className={\"form-control\"} \n      selected={selectedDate}\n      onChange={(date) => {\n        if (date) {\n          // setShowSearchResults(true)\n          setSelectedDate(date)\n          refetch(get_classes_query_variables(date))\n        } else {\n          // showSearchResults(false)\n        }\n      }}\n      // onBlur={() => setFieldTouched(\"dateStart\", true)}\n    />\n\n    // return <InputSearch \n    //   className=\"mb-2\"\n    //   initialValueKey={localStorateKeySearchValue}\n    //   placeholder={placeholderSearch}\n    //   onChange={(value) => {\n    //     localStorage.setItem(localStorateKeySearchValue, value)\n    //     if (value && !called) {\n    //       setShowSearchResults(true)\n    //       getAccounts({ variables: get_accounts_query_variables(value)})\n    //     } else if (value) {\n    //       // This is important, as the current relayStylePagination doesn't include args.\n    //       // Don't use getAccounts again, but refetch with different vars.\n    //       setShowSearchResults(true)\n    //       refetch(get_accounts_query_variables(value))\n    //     } else {\n    //       setShowSearchResults(false)\n    //     }\n    //   }}\n    // />\n  }\n\n  // if (!showSearchResults) {\n  //   return <Search />\n  // }\n\n  if (loading) return (\n    <React.Fragment>\n      <Search />\n      <div>\n        <Dimmer active={true} loader={true} />\n      </div>\n    </React.Fragment>\n  )\n\n  if (error) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"danger\">{t(\"general.error_sad_smiley\")}</Alert>\n    </React.Fragment>\n  )\n\n  if (!data.scheduleClasses.length) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"primary\">\n        <strong>{t(\"general.search_no_classes_found\")}</strong>\n      </Alert>\n    </React.Fragment>\n  )\n\n  return (\n    <React.Fragment>\n      <Search />\n      {(data) ?\n      <div className='mt-4'>\n        {data.scheduleClasses.map(({ date, classes }) => (\n          <React.Fragment key={v4()}>\n            <h3>\n              {capitalize(moment(date).format(\"dddd\"))} {' '}\n              <small className=\"text-muted\">\n                    {moment(date).format(\"LL\")} \n              </small>\n            </h3>\n            {!(classes.length) ? <Card>\n                <Card.Body>\n                  <h5>{t('schedule.classes.empty_list')} <i className=\"fa fa-beach\"/></h5>\n                </Card.Body>\n              </Card> \n            :\n            classes.map((\n              { scheduleItemId, \n                frequencyType,\n                date, \n                status,\n                holiday,\n                holidayName,\n                description,\n                account, \n                role,\n                account2,\n                role2,\n                organizationLocationRoom, \n                organizationClasstype, \n                organizationLevel,\n                timeStart, \n                timeEnd,\n                spaces,\n                countAttendingAndBooked,\n                displayPublic }) => (\n                  <Card key={v4()}>\n                    <Card.Body>\n                      <Grid.Row>\n                        <Grid.Col xs={9} sm={9} md={10}>\n                          <Grid.Row>\n                            <Grid.Col xs={12}>\n                              <h5>\n                                {represent_class_status(status)}\n                                <span className='mr-2'>\n                                {/* Class type */}\n                                {organizationClasstype.name} { ' ' }\n                                {/* Start & end time */}\n                                {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                                </span>\n                                {organizationLevel && <small className=\"text-muted\">\n                                  {organizationLevel.name}\n                                </small>}\n                              </h5>\n                            </Grid.Col>\n                          </Grid.Row>\n                          <Grid.Row>\n                            <Grid.Col xs={12}>\n                              {/* Instructor(s) */}\n                              { (account) ? \n                                  represent_instructor(account.fullName, role) : \n                                  <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                              } <br />\n                              <small className=\"text-muted\">\n                                {(account2) ? represent_instructor(account2.fullName, role2) : \"\"}\n                              </small>\n                            </Grid.Col>\n                            <Grid.Col xs={12}>\n                              {/* Location */}\n                              <Icon name=\"home\" /> {organizationLocationRoom.organizationLocation.name} \n                              <small className=\"text-muted\"> | {organizationLocationRoom.name}</small>\n                            </Grid.Col>\n                          </Grid.Row>\n                        </Grid.Col>\n                        <Grid.Col xs={3} sm={3} md={2}>\n                          <span className=\"float-right\">{renderActionButton(scheduleItemId)}</span>\n                        </Grid.Col>\n                      </Grid.Row>\n                      <Grid.Row>\n                        <Grid.Col xs={9} sm={9} md={10}>\n                          <div className=\"mt-1\">\n                            <BadgePublic className=\"mr-2\" isPublic={displayPublic} />\n                            {(frequencyType === 'SPECIFIC') ? \n                              <Badge color=\"primary\" className=\"mr-2\">{t('general.once')}</Badge> : \n                              null } \n                            {(frequencyType === 'LAST_WEEKDAY_OF_MONTH') ? \n                              <Badge color=\"success\" className=\"mr-2\">{t('general.monthly')}</Badge> : \n                              null } \n                            {(status === \"CANCELLED\") ? \n                              <Badge color=\"warning\" className=\"mr-2\">{t('general.cancelled')}</Badge> : \n                              null } \n                              <small className=\"text-muted\"><br />{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                          </div>\n                        </Grid.Col>\n                        <Grid.Col xs={3} sm={3} md={2}>\n                          {/* Attendance */}\n                          <small className='float-right mt-1'><Icon name=\"users\" /> {countAttendingAndBooked}/{spaces}</small>\n                        </Grid.Col>\n                      </Grid.Row>\n                    </Card.Body>\n                  </Card>\n                )\n              )\n            }\n          </React.Fragment>\n        ))}\n      </div>\n      // <ContentCard cardTitle={t('general.search_results')}\n      //             pageInfo={data.accounts.pageInfo}\n      //             hasCardBody={false}\n      //             onLoadMore={() => {\n      //               fetchMore({\n      //                 variables: {\n      //                 after: data.accounts.pageInfo.endCursor\n      //               },\n      //               updateQuery: (previousResult, { fetchMoreResult }) => {\n      //                 const newEdges = fetchMoreResult.accounts.edges\n      //                 const pageInfo = fetchMoreResult.accounts.pageInfo \n\n      //                 return newEdges.length\n      //                   ? {\n      //                       // Put the new accounts at the end of the list and update `pageInfo`\n      //                       // so we have the new `endCursor` and `hasNextPage` values\n      //                       queryAccountsData: {\n      //                         accounts: {\n      //                           __typename: previousResult.accounts.__typename,\n      //                           edges: [ ...previousResult.accounts.edges, ...newEdges ],\n      //                           pageInfo\n      //                         }\n      //                       }\n      //                     }\n      //                   : previousResult\n      //               }\n      //             })\n      //           }} >\n      //   <Table cards>\n      //     <Table.Header>\n      //       <Table.Row key={v4()}>\n      //         <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n      //         <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n      //         <Table.ColHeader></Table.ColHeader>\n      //       </Table.Row>\n      //     </Table.Header>\n      //     <Table.Body>\n      //       {data.accounts.edges.map(({ node }) => (\n      //         <Table.Row key={v4()}>\n      //           <Table.Col key={v4()}>\n      //             {node.fullName}\n      //           </Table.Col>\n      //           <Table.Col key={v4()}>\n      //             {node.email}\n      //           </Table.Col>\n      //           <Table.Col key={v4()}>\n      //             {(btnDisableAccountIds.includes(node.id)) ? \n      //               <span className=\"pull-right\">{btnDisabledMessage}</span> :\n      //               <span className=\"pull-right\">{renderActionButton(node.id)}</span>\n      //             }   \n      //           </Table.Col>\n      //         </Table.Row>\n      //       ))}\n      //     </Table.Body>\n      //   </Table>\n      // </ContentCard>\n      : \"\" }\n    </React.Fragment>\n  )\n}\n\nexport default withTranslation()(withRouter(SearchClassesOnDate))\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Dimmer } from 'tabler-react';\n\nimport { GET_ACCOUNT } from '../../../../queries/accounts/get_account'\n\nimport SearchClassesOnDate from '../../../ui/SearchClassesOnDate'\nimport AccountEnrollmentsBase from \"./AccountEnrollmentsBase\"\nimport AccountEnrollmentBack from './AccountEnrollmentBack'\n\nfunction AccountEnrollmentFindClass({ t, match, location }) {\n  const accountId = match.params.account_id\n  const pageHeaderButtonList = <AccountEnrollmentBack accountId={accountId} />\n  const { loading, error, data } = useQuery(GET_ACCOUNT, { variables: { accountId: accountId }})\n\n  if (loading) { \n    return (\n      <AccountEnrollmentsBase pageHeaderButtonList={pageHeaderButtonList} >\n        <Dimmer active={true} loader={true} />\n      </AccountEnrollmentsBase>\n    )\n  }\n\n  if (error) { \n    return (\n      <AccountEnrollmentsBase pageHeaderButtonList={pageHeaderButtonList} >\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountEnrollmentsBase>\n    )\n  }\n\n  const account = data.account\n\n  return (\n    <AccountEnrollmentsBase account={account} pageHeaderButtonList={pageHeaderButtonList} >\n      <h5>{t('relations.account.enrollments.title_add_search_class')}</h5>\n      <SearchClassesOnDate btnAction=\"accountEnrollmentAdd\" />\n    </AccountEnrollmentsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountEnrollmentFindClass))\n","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_ACCOUNT_PASSWORD = gql`\n  mutation UpdateAccountPassword($input:UpdateAccountPasswordInput!) {\n    updateAccountPassword(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountMollieCustomerForm = ({ t, history, isSubmitting, errors, values, inputData, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.mollie_customer_id')}>\n              <Field type=\"mollieCustomerId\" \n                      name=\"mollieCustomerId\" \n                      className={(errors.mollieCustomerId) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"mollieCustomerId\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n          color=\"primary\"\n          // className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>  \n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountMollieCustomerForm))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountPasswordForm = ({ t, history, isSubmitting, errors, values, inputData, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.set_password')}>\n              <Field type=\"password\" \n                      name=\"passwordNew\" \n                      className={(errors.passwordNew) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"passwordNew\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n          color=\"primary\"\n          // className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>  \n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountPasswordForm))\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from '../queries'\nimport { UPDATE_ACCOUNT_PASSWORD } from './queries'\n// import { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\"\n\nimport RelationsAccountMollieCustomerForm from \"./RelationsAccountMollieCustomerForm\"\nimport RelationsAccountPasswordForm from \"./RelationsAccountPasswordForm\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction RelationsAccountTools({t, match}) {\n  const accountId = match.params.account_id\n  const cardTitle = t(\"relations.account.tools.title\")\n  const activeLink = \"tools\"\n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId},\n    fetchPolicy: \"network-only\"\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n  const [updateAccountPassword] = useMutation(UPDATE_ACCOUNT_PASSWORD)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <Dimmer loader={true} active={true} />\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card title={t(\"relations.accounts.set_password\")}> \n        {/* Update password */}\n        <Formik\n          initialValues={{}}\n          // validationSchema={ACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let input_vars = {\n                id: accountId,\n                passwordNew: values.passwordNew\n              }\n\n              updateAccountPassword({ variables: {\n                input: input_vars\n              }})\n              .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.accounts.toast_edit_password_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              }\n            )\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountPasswordForm\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              inputData={data}\n            />\n          )}\n        </Formik>\n      </Card>\n      <Card title={t(\"relations.accounts.set_mollie_customer_id\")}>\n        {/* Update mollie customer id */}\n        <Formik\n            initialValues={{ mollieCustomerId: data.account.mollieCustomerId }}\n            // validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: accountId,\n                  mollieCustomerId: values.mollieCustomerId\n                }\n\n                updateAccount({ variables: {\n                  input: input_vars\n                }})\n                .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.accounts.toast_edit_mollie_customer_id_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                }\n              )\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <RelationsAccountMollieCustomerForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                inputData={data}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountTools))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_CLASSPASSES_QUERY = gql`\n  query AccountClasspasses($after: String, $before: String, $accountId: ID!) {\n    accountClasspasses(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationClasspass {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_ACCOUNT_CLASSPASS_QUERY = gql`\n  query AccountClasspass($id: ID!, $accountId: ID!, $after: String, $before: String) {\n    accountClasspass(id:$id) {\n      id\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n    }\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ClasspassInputValues($after: String, $before: String, $accountId: ID!) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_CLASSPASS = gql`\n  mutation CreateAccountClasspass($input: CreateAccountClasspassInput!) {\n    createAccountClasspass(input: $input) {\n      accountClasspass {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationClasspass {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_CLASSPASS = gql`\nmutation UpdateAccountClasspass($input: UpdateAccountClasspassInput!) {\n  updateAccountClasspass(input: $input) {\n    accountClasspass {\n      id\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n    }\n  }\n}\n`\n\nexport const DELETE_ACCOUNT_CLASSPASS = gql`\n  mutation DeleteAccountClasspass($input: DeleteAccountClasspassInput!) {\n    deleteAccountClasspass(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, DELETE_ACCOUNT_CLASSPASS } from \"./queries\"\n\n\nfunction AccountClasspasses({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountclasspass\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/classpasses/add`} className=\"ml-2\" />\n  </HasPermissionWrapper>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_CLASSPASSES_QUERY, {\n    variables: { accountId: accountId }\n  })\n  const [deleteAccountClasspass] = useMutation(DELETE_ACCOUNT_CLASSPASS)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountClasspasses = data.accountClasspasses\n\n    // Empty list\n    if (!accountClasspasses.edges.length) {\n      return (\n        <RelationsAccountProfileBase \n          user={account}\n          activeLink={activeLink}\n          pageHeaderButtonList={pageHeaderButtonList}\n        >\n          <Card title={cardTitle}>\n            <Card.Body>\n              <p>{t('relations.account.classpasses.empty_list')}</p>\n            </Card.Body>\n          </Card>\n        </RelationsAccountProfileBase>\n      )\n    }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.classpasses.title')}\n        pageInfo={accountClasspasses.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountClasspasses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountClasspasses.edges\n              const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountClasspasses.__typename,\n                      edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountClasspasses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.organizationClasspass.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <Link to={`/relations/accounts/${accountId}/classpasses/classes/${node.id}`}>\n                      {node.classesRemainingDisplay}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n                          msgSuccess: t('relations.account.classpasses.deleted'),\n                          deleteFunction: deleteAccountClasspass,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasspasses))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_SCHEMA = Yup.object().shape({\n  organizationClasspass: Yup.string()\n    .required(t('yup.field_required')),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  note: Yup.string(),\n})\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountClasspassForm = ({ t, history, create, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.classpass')}>\n            <Field component=\"select\" \n                  name=\"organizationClasspass\" \n                  className={(errors.organizationClasspass) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationClasspasses.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationClasspass\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateStart}\n              onChange={(date) => {\n                setFieldValue(\"dateStart\", date)\n                setFieldTouched(\"dateEnd\", true)\n              }}\n              onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        {(!create) ? \n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                placeholderText={t('schedule.classes.placeholder_enddate')}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        : \"\" }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Button\n          type=\"button\" \n          color=\"link\" \n          onClick={() => history.push(returnUrl)}\n        >\n          {t('general.cancel')}\n        </Button>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountClasspassForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\n\n\nfunction AccountClasspassAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/classpasses`\n  \n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, { \n    variables: { accountId: accountId }\n  })\n  const [createAccountClasspass] = useMutation(CREATE_ACCOUNT_CLASSPASS)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: \"\",\n              dateStart: new Date(),\n              note: \"\",\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n\n                createAccountClasspass({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const classpassId = data.createAccountClasspass.accountClasspass.id\n                    history.push(`/relations/accounts/${accountId}/classpasses/edit/${classpassId}`)\n                    toast.success((t('relations.account.classpasses.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountClasspassAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, GET_ACCOUNT_CLASSPASS_QUERY, UPDATE_ACCOUNT_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\n\nfunction AccountClasspassEdit({t, history, match}) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_edit')\n  const returnUrl = `/relations/accounts/${accountId}/classpasses`\n  \n  const {loading, error, data} = useQuery(GET_ACCOUNT_CLASSPASS_QUERY, {\n    variables: { id: id, accountId: accountId }\n  })\n  const [updateClasspass] = useMutation(UPDATE_ACCOUNT_CLASSPASS)\n\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountClasspass\n\n    // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialdata.dateStart) {\n    dateStart = new Date(initialdata.dateStart)\n  }\n  if (initialdata.dateEnd) {\n    dateEnd = new Date(initialdata.dateEnd)\n  }\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: initialdata.organizationClasspass.id,\n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              note: initialdata.note,\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n                \n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                updateClasspass({ variables: {\n                  input: {\n                    id: id,\n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd,\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('relations.account.classpasses.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountClasspassEdit))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASSPASS_CLASSES_QUERY = gql`\n  query AccountClasspass($id: ID!, $accountId: ID!, $before: String, $after: String) {\n    accountClasspass(id:$id) {\n      id\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n      classes(first:100, before:$before, after:$after) {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            date\n            scheduleItem {\n              timeStart\n              timeEnd\n              organizationLocationRoom {\n                id\n                name\n                organizationLocation {\n                  id\n                  name\n                }\n              }\n              organizationClasstype {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonBack from '../../../ui/ButtonBack'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_CLASSPASS_CLASSES_QUERY } from \"./queries\"\n\n\nfunction AccountClasspassClasses({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_classes')\n  const back = <div className=\"page-options d-flex\">\n    <ButtonBack returnUrl={`/relations/accounts/${accountId}/classpasses`} />\n  </div>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_CLASSPASS_CLASSES_QUERY, {\n    variables: { \n      accountId: accountId,\n      id: id\n    }\n  })\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} back={back}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} back={back}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountClasspass = data.accountClasspass\n  const classes = accountClasspass.classes\n  console.log(classes)\n\n  const cardTitleWithCardInfo = `${cardTitle} ${accountClasspass.organizationClasspass.name} (${moment(accountClasspass.dateStart).format(dateFormat)})`\n\n  if (!classes.edges.length) return (\n    <RelationsAccountProfileBase user={account} activeLink={activeLink} back={back}>\n      {console.log(error)}\n      <Card title={cardTitleWithCardInfo}>\n        <Card.Body>\n          {t(\"relations.account.classpasses.no_classes_taken_yet\")}\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n\n\n  return (\n    <RelationsAccountProfileBase user={account} activeLink={activeLink} back={back}>\n      <ContentCard \n        cardTitle={cardTitleWithCardInfo}\n        pageInfo={classes.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: classes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.classes.edges\n              const pageInfo = fetchMoreResult.classes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    classes: {\n                      __typename: previousResult.classes.__typename,\n                      edges: [ ...previousResult.classes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classes.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {moment(new Date(node.date + \" \" + node.scheduleItem.timeStart)).format(dateTimeFormatMoment)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.scheduleItem.organizationLocationRoom.organizationLocation.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.scheduleItem.organizationClasstype.name}\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasspassClasses))","import { gql } from \"@apollo/client\"\n\nexport const GET_DOCUMENTS_QUERY = gql`\n  query AccountDocuments($account: ID!) {\n    accountDocuments(account:$account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          description\n          urlProtectedDocument\n          createdAt\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_DOCUMENT_QUERY = gql`\n  query AccountDocument($id: ID!, $account: ID!) {\n    accountDocument(id:$id) {\n      id\n      description\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const ADD_DOCUMENT = gql`\n  mutation CreateAccountDocument($input:CreateAccountDocumentInput!) {\n    createAccountDocument(input: $input) {\n      accountDocument{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_DOCUMENT = gql`\n  mutation UpdateAccountDocument($input:UpdateAccountDocumentInput!) {\n    updateAccountDocument(input: $input) {\n      accountDocument{\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_DOCUMENT = gql`\n  mutation DeleteAccountDocument($input:DeleteAccountDocumentInput!) {\n    deleteAccountDocument(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_DOCUMENTS_QUERY, DELETE_DOCUMENT } from \"./queries\"\nimport FileProtectedDownloadTableButton from \"../../../ui/FileProtectedDownloadTableButton\"\n\n\nfunction AccountDocuments({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const activeLink = \"documents\"\n  const cardTitle = t('relations.account.documents.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountdocument\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/documents/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_DOCUMENTS_QUERY, {\n    variables: { account: accountId }\n  })\n  const [deleteAccountDocument] = useMutation(DELETE_DOCUMENT)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountDocuments = data.accountDocuments\n  console.log(accountDocuments)\n\n  // Empty list\n  if (!accountDocuments.edges.length) {\n    return (\n      <RelationsAccountProfileBase activeLink={activeLink} user={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.documents.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n    )\n  }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.documents.title')}\n        pageInfo={accountDocuments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountDocuments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountDocuments.edges\n              const pageInfo = fetchMoreResult.accountDocuments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountDocuments at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountDocuments: {\n                      __typename: previousResult.accountDocuments.__typename,\n                      edges: [ ...previousResult.accountDocuments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.document')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.download')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountDocuments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.description}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <FileProtectedDownloadTableButton protectedMediaUrl={node.urlProtectedDocument} />\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + accountId + \"/documents/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.documents.delete_confirm_msg\"),\n                          msgDescription: <p>{node.description}</p>,\n                          msgSuccess: t('relations.account.documents.deleted'),\n                          deleteFunction: deleteAccountDocument,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_DOCUMENTS_QUERY, variables: { account: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountDocuments))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n  \n\nfunction AccountDocumentForm({ t, history, errors, values, isSubmitting, returnUrl, inputFileName, fileInputLabel, handleFileInputChange=f=>f, }) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Button\n            type=\"button\" \n            color=\"link\" \n            onClick={() => history.push(returnUrl)}\n          >\n            {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentForm))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_DOCUMENTS_QUERY, ADD_DOCUMENT } from './queries'\nimport { GET_ACCOUNT_QUERY } from '../queries'\n// import { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountDocumentForm from './AccountDocumentForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nfunction AccountDocumentAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.documents.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/documents`\n  \n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n  const [addAccountDocument] = useMutation(ADD_DOCUMENT)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: \"\"\n          }}\n          // validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              account: accountId,\n              description: values.description,\n              documentFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n  \n              addAccountDocument({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_DOCUMENTS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.documents.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountDocumentForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountDocumentForm>\n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountDocumentAdd))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DOCUMENT_SCHEMA = Yup.object().shape({\n    description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n  \n\nfunction AccountDocumentFormEdit({ t, history, errors, values, isSubmitting, returnUrl }) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button\n              type=\"button\" \n              color=\"link\"\n            >\n              {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentFormEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_DOCUMENTS_QUERY, GET_DOCUMENT_QUERY, UPDATE_DOCUMENT } from './queries'\nimport { DOCUMENT_SCHEMA } from './yupSchema'\nimport AccountDocumentFormEdit from './AccountDocumentFormEdit'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nfunction AccountDocumentEdit({t, history, match}) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"documents\"\n  const cardTitle = t('relations.account.documents.title_edit')\n  const returnUrl = `/relations/accounts/${accountId}/documents`\n  \n  const {loading, error, data} = useQuery(GET_DOCUMENT_QUERY, {\n    variables: { id: id, account: accountId }\n  })\n  const [updateDocument] = useMutation(UPDATE_DOCUMENT)\n\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountDocument\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: initialdata.description,\n          }}\n          validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateDocument({ variables: {\n                input: {\n                  id: id,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                {query: GET_DOCUMENTS_QUERY, variables: { account: accountId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.documents.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <AccountDocumentFormEdit\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountDocumentFormEdit>\n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentEdit))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\n\nfunction AccountFinancePaymentBatchcAtegoryItemsBase({ t, history, match, children, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"accountfinancepaymentbatchcategoryitem\">\n                  <ButtonBack returnUrl={`/relations/accounts/${accountId}/finance_payment_batch_category_items/`} />\n                </HasPermissionWrapper>\n                : \n                <RelationsAccountsBack />\n              }\n              {!(showEditBack) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountfinancepaymentbatchcategoryitem\">\n                  <ButtonAdd \n                    addUrl={`/relations/accounts/${accountId}/finance_payment_batch_category_items/add`}\n                    className=\"ml-2\"\n                  />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='finance_payment_batch_category_item'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}    \n        \nexport default withTranslation()(withRouter(AccountFinancePaymentBatchcAtegoryItemsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY = gql`\n  query AccountFinancePaymentBatchCategoryItems($after: String, $before: String, $account: ID!) {\n    accountFinancePaymentBatchCategoryItems(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          financePaymentBatchCategory {\n            id\n            name\n          }\n          year\n          month\n          amountDisplay\n          description\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY = gql`\n  query AccountFinancePaymentBatchCategoryItem($id: ID!) {\n    accountFinancePaymentBatchCategoryItem(id: $id) {\n      id\n      financePaymentBatchCategory {\n        id\n        name\n      }\n      year\n      month\n      amount\n      description\n    }\n    financePaymentBatchCategories(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          batchCategoryType\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query AccountPaymentBatchCategoryItemInputValues($after: String, $before: String) {\n    financePaymentBatchCategories(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          batchCategoryType\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation CreateAccountFinancePaymentBatchCategoryItem($input: CreateAccountFinancePaymentBatchCategoryItemInput!) {\n    createAccountFinancePaymentBatchCategoryItem(input: $input) {\n      accountFinancePaymentBatchCategoryItem {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation UpdateAccountFinancePaymentBatchCategoryItem($input: UpdateAccountFinancePaymentBatchCategoryItemInput!) {\n    updateAccountFinancePaymentBatchCategoryItem(input: $input) {\n      accountFinancePaymentBatchCategoryItem {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation DeleteAccountFinancePaymentBatchCategoryItem($input: DeleteAccountFinancePaymentBatchCategoryItemInput!) {\n    deleteAccountFinancePaymentBatchCategoryItem(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY,\n  DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n} from \"./queries\"\n\n\nfunction AccountFinancePaymentBatchCategoryItems({ t, history, match }) {\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.finance_payment_batch_category_items.title')\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, {\n    variables: { account: accountId }\n  })\n  const [deleteAccountFinancePaymentBatchCategoryItem] = useMutation(DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM)\n\n  if (loading) return (\n    <AccountFinancePaymentBatchCategoryItemsBase>\n      <Card title={cardTitle}>\n        <Card.Body><p>{t('general.loading_with_dots')}</p></Card.Body>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase>\n        <Card title={cardTitle}>\n          <Card.Body><p>{t('general.error_sad_smiley')}</p></Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  let batchCategoryItems = data.accountFinancePaymentBatchCategoryItems\n\n    \n  // Empty list\n  if (!batchCategoryItems.edges.length) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.finance_payment_batch_category_items.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        hasCardBody={false}\n        pageInfo={batchCategoryItems.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: batchCategoryItems.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountFinancePaymentBatchCategoryItems.edges\n              const pageInfo = fetchMoreResult.accountFinancePaymentBatchCategoryItems.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    batchCategoryItems: {\n                      __typename: previousResult.accountFinancePaymentBatchCategoryItems.__typename,\n                      edges: [ ...previousResult.accountFinancePaymentBatchCategoryItems.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.year')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.month')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.category')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {batchCategoryItems.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.year}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.month}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.amountDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.financePaymentBatchCategory.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.description.replace(/(.{28})..+/, \"$1...\")}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/relations/accounts/${match.params.account_id}/finance_payment_batch_category_items/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button \n                      className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.finance_payment_batch_category_items.delete_confirm_msg\"),\n                          msgDescription: <p><br />{node.financePaymentBatchCategory.name} {node.amountDisplay} <br/>{node.description}</p>,\n                          msgSuccess: t('relations.account.finance_payment_batch_category_items.deleted'),\n                          deleteFunction: deleteAccountFinancePaymentBatchCategoryItem,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: { \n                              account: accountId\n                            }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItems))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA = Yup.object().shape({\n  financePaymentBatchCategory: Yup.string()\n    .required(t('yup.field_required')),\n  year: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  month: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  amount: Yup.number()\n    .required(t('yup.field_required')),\n  description: Yup.string(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountFinancePaymentBatchCategoryItemsForm = ({ t, history, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.year')} >\n            <Field type=\"text\" \n                  name=\"year\" \n                  className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.month')} >\n            <Field type=\"text\" \n                  name=\"month\" \n                  className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.amount')} >\n            <Field type=\"text\" \n                  name=\"amount\" \n                  className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.category')}>\n            <Field component=\"select\" \n                  name=\"financePaymentBatchCategory\" \n                  className={(errors.financePaymentBatchCategory) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.financePaymentBatchCategories.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentBatchCategory\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.description')} >\n            <Field type=\"text\" \n                  name=\"description\" \n                  className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n            {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, \n  CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM,\n  GET_INPUT_VALUES_QUERY \n} from './queries'\nimport { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountFinancePaymentBatchCategoryItemsForm from './AccountFinancePaymentBatchCategoryItemsForm'\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\n\nfunction AccountFinancePaymentBatchCategoryItemAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/finance_payment_batch_category_items`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addAccountFinancePaymentBatchCategoryItem] = useMutation(\n    CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n  )\n\n  if (loading) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n          <Card.Body>\n            {t(\"general.loading_with_dots\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n          <Card.Body>\n            {t(\"relations.account.finance_payment_batch_category_items.error_loading\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  const inputData = data\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n      <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n        <Formik\n          initialValues={{ \n            financePaymentBatchCategory: \"\",\n            year: new Date().getFullYear(),\n            month: new Date().getMonth() + 1,\n            amount: \"\",\n            description: \"\"\n          }}\n          validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              addAccountFinancePaymentBatchCategoryItem({ variables: {\n                input: {\n                  account: accountId, \n                  amount: values.amount,\n                  year: values.year,\n                  month: values.month,\n                  financePaymentBatchCategory: values.financePaymentBatchCategory,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.finance_payment_batch_category_items.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountFinancePaymentBatchCategoryItemsForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountFinancePaymentBatchCategoryItemsForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY, \n  UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n} from './queries'\nimport { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountFinancePaymentBatchCategoryItemsForm from './AccountFinancePaymentBatchCategoryItemsForm'\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\n\nfunction AccountFinancePaymentBatchCategoryItemEdit({ t, history, match }) {\n  const accountId = match.params.account_id\n  const accountFinancePaymentBatchCategoryItemId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/finance_payment_batch_category_items`\n  const cardTitle = t('relations.account.finance_payment_batch_category_items.title_edit')\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY, { variables: {\n    id: accountFinancePaymentBatchCategoryItemId\n  }})\n  const [updateAccountFinancePaymentBatchCategoryItem] = useMutation(\n    UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n  )\n\n  if (loading) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.loading_with_dots\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"relations.account.finance_payment_batch_category_items.error_loading\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  const inputData = data\n  const initialValues = data.accountFinancePaymentBatchCategoryItem\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            financePaymentBatchCategory: initialValues.financePaymentBatchCategory.id,\n            year: initialValues.year,\n            month: initialValues.month,\n            amount: initialValues.amount,\n            description: initialValues.description\n          }}\n          validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateAccountFinancePaymentBatchCategoryItem({ variables: {\n                input: {\n                  id: accountFinancePaymentBatchCategoryItemId, \n                  amount: values.amount,\n                  year: values.year,\n                  month: values.month,\n                  financePaymentBatchCategory: values.financePaymentBatchCategory,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.finance_payment_batch_category_items.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountFinancePaymentBatchCategoryItemsForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountFinancePaymentBatchCategoryItemsForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemEdit))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: CostasiellaFinanceInvoiceStatusChoices, $accountId: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status, account: $accountId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n// export const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n//   query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n//     accountSubscription(id:$id) {\n//       id\n//       organizationSubscription {\n//         id\n//         name\n//       }\n//       financePaymentMethod {\n//         id\n//         name\n//       }\n//       dateStart\n//       dateEnd\n//       note\n//       registrationFeePaid\n//       createdAt\n//     }\n//     organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//           code\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//     }\n//   }\n// `\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String, $accountId: ID!) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    businesses(first: 100) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n      invoiceToBusiness {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_INVOICE = gql`\n  mutation CreateFinanceInvoice($input: CreateFinanceInvoiceInput!) {\n    createFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nfunction AccountInvoicesBase({ t, match, history, children, account={}, pageHeaderButtonList=\"\" }) {\n  const accountId = match.params.account_id\n  let pageHeader\n  if (account) {\n    pageHeader = account.fullName\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={pageHeader} >\n            <div className='page-options d-flex'>\n              { pageHeaderButtonList }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n\n              <ProfileMenu \n                activeLink='invoices' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoicesBase))\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport { GET_ACCOUNT_INVOICES_QUERY } from \"./queries\"\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport FinanceInvoicesList from '../../../finance/invoices/FinanceInvoicesList'\nimport AccountInvoicesBase from './AccountInvoicesBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\n\nfunction AccountInvoices({ t, location, match, history }) {\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.invoices.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <RelationsAccountsBack />\n    <ButtonAdd addUrl={`/relations/accounts/${accountId}/invoices/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_INVOICES_QUERY, {\n    variables: {accountId: accountId},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountInvoicesBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountInvoicesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountInvoicesBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountInvoicesBase>\n    )\n  }\n\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  let financeInvoices = data.financeInvoices\n  const account = data.account\n\n  // Empty list\n  if (!financeInvoices.edges.length) {\n    return (\n      <AccountInvoicesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.invoices.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountInvoicesBase>\n    )\n  }\n  \n  return (\n    <AccountInvoicesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={financeInvoices.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeInvoices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeInvoices.edges\n              const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeInvoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeInvoices: {\n                      __typename: previousResult.financeInvoices.__typename,\n                      edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceInvoicesList invoices={financeInvoices} />\n      </ContentCard>\n    </AccountInvoicesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoices))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\";\n\n\nconst AccountInvoiceAddForm = ({ t, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group label={t('relations.accounts.invoice_to_business')}>\n        <Field component=\"select\" \n              name=\"business\" \n              className={(errors.business) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t('relations.accounts.invoice_to_account')}</option>\n          {inputData.businesses.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"business\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.finance_invoice_group')}>\n        <Field component=\"select\" \n              name=\"financeInvoiceGroup\" \n              className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          {/* <option value=\"\" key={v4()}>{t('general.please_select')}</option> */}\n          {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.summary')}>\n        <Field type=\"text\" \n                name=\"summary\" \n                className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountInvoiceAddForm))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_INVOICE } from './queries'\nimport AccountInvoiceAddForm from './AccountInvoiceAddForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountInvoiceAdd({ t, match, history }) {\n  const account_id = match.params.account_id\n  const activeLink = \"invoices\"\n  const cardTitle = t('relations.account.invoices.title_add')\n  const returnUrl = `/relations/accounts/${account_id}/invoices`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY, {\n      variables: {\n        accountId: account_id\n      }\n    }\n  )\n  const [createInvoice] = useMutation(CREATE_ACCOUNT_INVOICE, {\n    // onCompleted = () => history.push('/finance/invoices/edit/')\n  }) \n\n  // Query\n  // Loading\n  if (loading) {\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.loading_with_dots')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  \n  const account = data.account\n  const initialBusiness = account.invoiceToBusiness ? account.invoiceToBusiness.id : null\n  const financeInvoiceGroups = data.financeInvoiceGroups\n  const firstInvoiceGroup = financeInvoiceGroups && financeInvoiceGroups.edges && financeInvoiceGroups.edges[0].node.id\n\n\n  return (\n    <RelationsAccountProfileBase activeLink={activeLink} user={account} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {/* { account.invoiceToBusiness && \n          <Card.Alert color=\"primary\">\n           <b><Icon name=\"home\" /> {account.invoiceToBusiness.name}</b> {' '}\n           {t(\"relations.account.invoices.is_the_default_billing_address_for_this_account\")}\n          </Card.Alert>\n        } */}\n        <Formik\n          initialValues={{\n            financeInvoiceGroup: firstInvoiceGroup,\n            business: initialBusiness,\n            summary: \"\"\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createInvoice({ variables: {\n              input: {\n                account: account_id, \n                financeInvoiceGroup: values.financeInvoiceGroup,\n                business: (values.business) ? values.business : null,\n                summary: values.summary\n              }\n            }, refetchQueries: [\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.invoices.toast_title_add')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push('/finance/invoices/edit/' + data.createFinanceInvoice.financeInvoice.id)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <AccountInvoiceAddForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </AccountInvoiceAddForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n\n    // <SiteWrapper>\n    //   <div className=\"my-3 my-md-5\">\n    //     <Container>\n    //       <Page.Header title={account.firstName + \" \" + account.lastName} />\n    //       <Grid.Row>\n    //           <Grid.Col md={9}>\n                \n    //           </Grid.Col>\n    //           <Grid.Col md={3}>\n    //             <ProfileMenu \n    //               activeLink='invoices'\n    //               accountId={match.params.account_id}\n    //             />\n    //           </Grid.Col>\n    //         </Grid.Row>\n    //       </Container>\n    //   </div>\n    // </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoiceAdd))\n","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Card,\n    Grid,\n  } from \"tabler-react\"\n\n\nclass LoadMoreOnBottomScroll extends Component {\n    componentDidMount() {\n      window.addEventListener(\"scroll\", this.handleOnScroll);\n    }\n  \n    componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.handleOnScroll);\n    }\n\n    handleOnScroll = () => {\n      // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n      var scrollTop =\n        (document.documentElement && document.documentElement.scrollTop) ||\n        document.body.scrollTop;\n      var scrollHeight =\n        (document.documentElement && document.documentElement.scrollHeight) ||\n        document.body.scrollHeight;\n      var clientHeight =\n        document.documentElement.clientHeight || window.innerHeight;\n      var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n      if (scrolledToBottom) {\n        const pageInfo = this.props.pageInfo\n        if (pageInfo) {\n          if (pageInfo.hasNextPage) {\n            this.props.onLoadMore()\n          }\n        }\n      }\n    }\n\n    render() {\n      const t = this.props.t\n      const onLoadMore = this.props.onLoadMore \n      const pageInfo = this.props.pageInfo\n      const children = this.props.children\n\n\n      return(\n        <div>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              { (!pageInfo) ? '':\n                (pageInfo.hasNextPage) ? \n                  <Card>\n                    <Card.Body>\n                      <Button \n                        color=\"secondary\"\n                        outline\n                        onClick={onLoadMore} \n                      >\n                        {t('general.load_more')}\n                      </Button>\n                    </Card.Body>\n                  </Card>\n                : <span className=\"text-muted\">{t(\"general.loaded_all\")}</span>\n              }\n            </Grid.Col>\n          </Grid.Row>\n        </div>\n      )\n    }\n}\n\nLoadMoreOnBottomScroll.defaultProps = {\n  onLoadMore: f=>f\n}\n  \nexport default withTranslation()(LoadMoreOnBottomScroll)\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\n\nfunction AccountNotesBase({ t, history, match, children, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ?\n                <ButtonBack returnUrl={`/relations/accounts/${accountId}/notes/`} />\n              :\n                <React.Fragment>\n                  <RelationsAccountsBack />\n                  <ButtonAdd addUrl={`/relations/accounts/${accountId}/notes/add`} className='ml-2' />\n                </React.Fragment>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='notes'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}    \n        \nexport default withTranslation()(withRouter(AccountNotesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_NOTES_QUERY = gql`\n  query AccountNotes($after: String, $before: String, $account: ID!, $noteType: CostasiellaAccountNoteNoteTypeChoices!) {\n    accountNotes(first: 15, before: $before, after: $after, account: $account, noteType: $noteType ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          note\n          injury\n          noteType\n          noteBy {\n            id\n            fullName\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ACCOUNT_NOTE_QUERY = gql`\n  query AccountNote($id: ID!) {\n    accountNote(id: $id) {\n      id\n      note\n      injury\n    }\n  }\n`\n\n\nexport const CREATE_ACCOUNT_NOTE = gql`\n  mutation CreateAccountNote($input: CreateAccountNoteInput!) {\n    createAccountNote(input: $input) {\n      accountNote {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_NOTE = gql`\n  mutation UpdateAccountNote($input: UpdateAccountNoteInput!) {\n    updateAccountNote(input: $input) {\n      accountNote {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_NOTE = gql`\n  mutation DeleteAccountNote($input: DeleteAccountNoteInput!) {\n    deleteAccountNote(input: $input) {\n      ok\n    }\n  }\n`\n","import CSLS from \"../../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables(accountId) {\n  let queryVars = {\n      account: accountId,\n      // noteType: noteType\n  }\n\n  let noteType = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)\n\n  queryVars.noteType = noteType  \n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport {\n  Button,\n  Badge,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { \n  GET_ACCOUNT_NOTES_QUERY,\n  DELETE_ACCOUNT_NOTE\n} from \"./queries\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\n\nfunction AccountNotes({ t, history, match }) {\n  let [noteType, setNoteType] = useState(localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE) || \"BACKOFFICE\")\n  // Set some initial value for noteType, if not found\n  if (!localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)) {\n    localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\")\n  } \n\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const accountId = match.params.account_id\n\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_ACCOUNT_NOTES_QUERY, {\n    variables: get_list_query_variables(accountId)\n  })\n  const [deleteAccountNote] = useMutation(DELETE_ACCOUNT_NOTE)\n\n  if (loading) return (\n    <AccountNotesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountNotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountNotesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountNotesBase>\n    )\n  }\n\n  let notes = data.accountNotes\n\n  return (\n    <AccountNotesBase>\n      <Grid.Row>\n        <Grid.Col>\n          <div className=\"float-right mb-4\">\n            <Button.List>\n              <Button color={(noteType === \"BACKOFFICE\") ? 'primary': 'secondary'}  \n                      size=\"\"\n                      onClick={() => {\n                        setNoteType(\"BACKOFFICE\")\n                        localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\")\n                        refetch(get_list_query_variables(accountId))\n                      }\n              }>\n                {t('relations.account.notes.backoffice')}\n              </Button>\n              <Button color={(noteType === \"INSTRUCTORS\") ? 'primary': 'secondary'} \n                      size=\"\" \n                      className=\"ml-2\" \n                      onClick={() => {\n                        setNoteType(\"INSTRUCTORS\")\n                        localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"INSTRUCTORS\")\n                        refetch(get_list_query_variables(accountId))\n                      }\n              }>\n                {t('relations.account.notes.instructors')}\n              </Button>\n            </Button.List>\n          </div>\n        </Grid.Col>\n      </Grid.Row>\n      <LoadMoreOnBottomScroll \n        pageInfo={notes.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: notes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountNotes.edges\n              const pageInfo = fetchMoreResult.accountNotes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountNotes: {\n                      __typename: previousResult.accountNotes.__typename,\n                      edges: [ ...previousResult.accountNotes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        {notes.edges.map(({ node }) => (\n          <Card>\n            <Card.Body>\n              {(node.injury) ? <Badge color=\"danger\" className=\"float-right\">{t(\"general.injury\")}</Badge> : \"\"}\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.note) }} />\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"danger\"\n                size=\"sm\"\n                className=\"float-right\"\n                outline\n                onClick={() => {\n                  confirm_delete({\n                    t: t,\n                    msgConfirm: t(\"relations.account.notes.delete_confirm_msg\"),\n                    msgDescription: <p><div dangerouslySetInnerHTML={{__html: node.note}} /></p>,\n                    msgSuccess: t('relations.account.notes.deleted'),\n                    deleteFunction: deleteAccountNote,\n                    functionVariables: { \n                      variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, \n                      refetchQueries: [\n                        {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId, noteType) },\n                      ]\n                    }\n                  })\n                }}\n              >\n                <Icon name=\"trash-2\" />\n              </Button>\n              <Link to={`/relations/accounts/${match.params.account_id}/notes/edit/${node.id}`}>\n                <Button\n                  color=\"secondary\"\n                  size=\"sm\"\n                  className=\"float-right mr-4\"\n                  outline\n                >\n                  {t(\"general.edit\")}\n                </Button>\n              </Link>              \n              <small className=\"text-muted float-right mr-4\">{moment(node.createdAt).format(dateTimeFormatMoment)}</small>\n              {node.noteBy.fullName} <br />\n            </Card.Footer>\n          </Card>\n        ))}\n      </LoadMoreOnBottomScroll>\n    </AccountNotesBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountNotes))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountNoteForm = ({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.note')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"note\"\n            initialValue={values.note}\n            init={tinymceBasicConf}\n            onBlur={(e) => { \n              setFieldTouched(\"note\", true)\n              setFieldValue(\"note\", e.target.getContent())\n            }}\n          />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"injury\" \n                checked={values.injury} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('general.injury')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"injury\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n            {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport { \n  GET_ACCOUNT_NOTES_QUERY, \n  CREATE_ACCOUNT_NOTE,\n} from './queries'\n// import { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountNoteForm from './AccountNoteForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport AccountNotesBase from \"./AccountNotesBase\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction AccountNoteAdd({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n  let noteType = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)\n  if (!noteType) {\n    localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\") \n  }\n\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/notes`\n  const cardTitle = t('relations.account.notes.title_add')\n\n  const [addNote] = useMutation(\n    CREATE_ACCOUNT_NOTE\n  )\n\n  return (\n    <AccountNotesBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            injury: false,\n            note: \"\"\n          }}\n          // validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              addNote({ variables: {\n                input: {\n                  account: accountId, \n                  noteType: noteType,\n                  injury: values.injury,\n                  note: values.note\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId)}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.notes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <AccountNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountNoteForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountNotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountNoteAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { \n  GET_ACCOUNT_NOTE_QUERY, \n  GET_ACCOUNT_NOTES_QUERY, \n  UPDATE_ACCOUNT_NOTE,\n} from './queries'\n// import { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountNoteForm from './AccountNoteForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction AccountNoteEdit({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n\n  const accountId = match.params.account_id\n  const noteId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/notes`\n  const cardTitle = t('relations.account.notes.title_edit')\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_NOTE_QUERY, {\n    variables: { id: noteId }\n  })\n  const [updateNote] = useMutation(\n    UPDATE_ACCOUNT_NOTE\n  )\n\n  if (loading) return (\n    <AccountNotesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountNotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountNotesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountNotesBase>\n    )\n  }\n\n  const note = data.accountNote\n\n  return (\n    <AccountNotesBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            injury: note.injury,\n            note: note.note\n          }}\n          // validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateNote({ variables: {\n                input: {\n                  id: noteId,\n                  injury: values.injury,\n                  note: values.note\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId)}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.notes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <AccountNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountNoteForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountNotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountNoteEdit))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountOrdersBase({ t, match, history, children, account={} }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='orders' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountOrdersBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ORDERS_QUERY = gql`\n  query FinanceOrders($after: String, $before: String, $status: CostasiellaFinanceOrderStatusChoices, $account: ID!) {\n    financeOrders(first: 15, before: $before, after: $after, status: $status, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          status\n          createdAt\n          total\n          totalDisplay\n          balanceDisplay\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n} from \"tabler-react\"\n\nimport { GET_ACCOUNT_ORDERS_QUERY } from \"./queries\"\nimport { DELETE_FINANCE_ORDER } from \"../../../finance/orders/queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\n\nfunction AccountClassDelete({t, match, node, account}) {\n  const [deleteOrder] = useMutation(DELETE_FINANCE_ORDER)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm pull-right\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.orders.delete_confirm_msg\"),\n          msgDescription: <p>\n            {t('general.order')}# {node.orderNumber}\n          </p>,\n          msgSuccess: t('relations.account.orders.delete_success'),\n          deleteFunction: deleteOrder,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_ORDERS_QUERY, \n                variables: { account: account.id } },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceOrderStatus from \"../../../finance/orders/FinanceOrderStatus\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountOrdersBase from \"./AccountOrdersBase\"\nimport AccountOrderDelete from \"./AccountOrderDelete\"\n\nimport { GET_ACCOUNT_ORDERS_QUERY } from \"./queries\"\n\n\nfunction AccountOrders({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormat = appSettings.dateTimeFormatMoment\n  const cardTitle = t('relations.account.orders.title')\n  const account_id = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ORDERS_QUERY, {\n    variables: {'account': account_id},\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountOrdersBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountOrdersBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountOrdersBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountOrdersBase>\n    )\n  }\n\n  console.log(\"AccountClasses data:\")\n  console.log(data)\n  const account = data.account\n  const financeOrders = data.financeOrders\n  \n  // Empty list\n  if (!financeOrders.edges.length) {\n    return (\n      <AccountOrdersBase account={account}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.orders.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountOrdersBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountOrdersBase account={account}>\n      <ContentCard \n        cardTitle={t('relations.account.orders.title')}\n        pageInfo={financeOrders.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeOrders.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeOrders.edges\n              const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeOrders at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeOrders: {\n                      __typename: previousResult.financeOrders.__typename,\n                      edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.order_number')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeOrders.edges.map(({ node }) => (        \n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceOrderStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    # {node.orderNumber}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.createdAt).format(dateTimeFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                  <AccountOrderDelete node={node} account={account} />\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      <Button className='btn-sm float-right' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountOrdersBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountOrders))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_PRODUCTS_QUERY = gql`\n  query AccountProducts($after: String, $before: String, $accountId: ID!) {\n    accountProducts(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationProduct {\n            id\n            name\n            description\n            urlImageThumbnailSmall\n          }\n          quantity\n          createdAt\n          invoiceItems {\n            edges {\n              node {\n                financeInvoice {\n                  invoiceNumber\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n// export const GET_ACCOUNT_PRODUCT_QUERY = gql`\n//   query AccountProduct($id: ID!, $accountId: ID!, $after: String, $before: String) {\n//     accountProduct(id:$id) {\n//       id\n//       organizationProduct {\n//         id\n//         name\n//       }\n//       quantity\n//       createdAt\n//     }\n//     organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//       urlImageThumbnailSmall\n//     }\n//   }\n// `\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ProductInputValues($after: String, $before: String, $accountId: ID!) {\n    organizationProducts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          description\n          priceDisplay\n          urlImageThumbnailLarge\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_PRODUCT = gql`\n  mutation CreateAccountProduct($input: CreateAccountProductInput!) {\n    createAccountProduct(input: $input) {\n      accountProduct {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_PRODUCT = gql`\n  mutation DeleteAccountProduct($input: DeleteAccountProductInput!) {\n    deleteAccountProduct(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Avatar,\n  Icon,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_PRODUCTS_QUERY, DELETE_ACCOUNT_PRODUCT } from \"./queries\"\n\n\nfunction AccountProducts({t, match, location}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const accountId = match.params.account_id\n  const activeLink = \"products\"\n  const cardTitle = t('relations.account.products.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountproduct\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/products/add`} className=\"ml-2\" />\n  </HasPermissionWrapper>\n\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_PRODUCTS_QUERY, {\n    variables: { accountId: accountId }\n  })\n  const [deleteAccountProduct] = useMutation(DELETE_ACCOUNT_PRODUCT)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Dimmer loader={true} active={true} />\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountProducts = data.accountProducts\n\n    // Empty list\n    if (!accountProducts.edges.length) {\n      return (\n        <RelationsAccountProfileBase \n          user={account}\n          activeLink={activeLink}\n          pageHeaderButtonList={pageHeaderButtonList}\n        >\n          <Card title={cardTitle}>\n            <Card.Body>\n              <p>{t('relations.account.products.empty_list')}</p>\n            </Card.Body>\n          </Card>\n        </RelationsAccountProfileBase>\n      )\n    }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.products.title')}\n        pageInfo={accountProducts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountProducts.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountProducts.edges\n              const pageInfo = fetchMoreResult.accountProducts.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountProducts.__typename,\n                      edges: [ ...previousResult.accountProducts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader />\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.quantity')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_purchased')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountProducts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Avatar size=\"lg\" imageURL={node.organizationProduct.urlImageThumbnailSmall} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.organizationProduct.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.quantity}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateTimeFormatMoment)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.invoiceItems.edges.length && \n                      <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                        {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber}\n                      </Link>\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.products.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationProduct.name} {moment(node.createdAt).format(dateTimeFormatMoment)}</p>,\n                          msgSuccess: t('relations.account.products.deleted'),\n                          deleteFunction: deleteAccountProduct,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_PRODUCTS_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountProducts))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button,\n  Card,\n  Icon,\n  Text\n} from \"tabler-react\"\n\n\nfunction CSStoreCard({ t, title, subtitle, price, imgUrl, imgAlt, buttonText=\"placeholder\", buttonOnClick=f=>f }) {\n  return (\n      <Card>\n        <Card.Body>\n          <div className='mb-4 text-center'>\n            <img src={imgUrl} alt={imgAlt} />\n          </div>\n          <Card.Title>{title}</Card.Title>\n          <Text className=\"card-subtitle\">{subtitle}</Text>\n\n          <div classname=\"mt-5 d-flex align-items-center\">\n            <div className=\"mt-5 d-flex align-items-center\">\n              <div className=\"product-price\">\n                <strong>{price}</strong>\n              </div>\n              <div className=\"ml-auto\">\n                <Button color=\"primary\" onClick={buttonOnClick}>\n                  <Icon prefix=\"fe\" name=\"plus\" />\n                  {buttonText}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Card.Body>\n    </Card>\n  )\n}\n\nexport default withTranslation()(CSStoreCard)\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_PRODUCTS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_PRODUCT } from './queries'\n// import { CLASSPASS_SCHEMA } from './yupSchema'\n// import AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport CSStoreCard from '../../../ui/CSStoreCard'\nimport LoadMoreOnBottomScroll from '../../../general/LoadMoreOnBottomScroll'\n\n\nfunction AccountProductAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"products\"\n  const cardTitle = t('relations.account.products.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/products`\n\n  const buttonTextAdd = t(\"general.add\")\n\n  \n  const {loading, error, data, fetchMore} = useQuery(GET_INPUT_VALUES_QUERY, { \n    variables: { accountId: accountId }\n  })\n  const [createAccountProduct] = useMutation(CREATE_ACCOUNT_PRODUCT)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Dimmer loader={true} active={true} />\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const organizationProducts = data.organizationProducts\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h4>{t(\"relations.account.products.title_add\")}</h4>\n        </Grid.Col>\n      </Grid.Row>\n\n        <LoadMoreOnBottomScroll \n          pageInfo={organizationProducts.pageInfo}\n          onLoadMore={() => {\n            fetchMore({\n              variables: {\n                after: organizationProducts.pageInfo.endCursor\n              },\n              updateQuery: (previousResult, { fetchMoreResult }) => {\n                const newEdges = fetchMoreResult.organizationProducts.edges\n                const pageInfo = fetchMoreResult.organizationProducts.pageInfo\n\n                return newEdges.length\n                  ? {\n                      // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                      // so we have the new `endCursor` and `hasNextPage` values\n                      organizationProducts: {\n                        __typename: previousResult.organizationProducts.__typename,\n                        edges: [ ...previousResult.organizationProducts.edges, ...newEdges ],\n                        pageInfo\n                      }\n                    }\n                  : previousResult\n              }\n            })\n          }} \n        >\n          <Grid.Row>\n            {organizationProducts.edges.map(({ node }) => (\n              <Grid.Col md={4}>\n                {console.log(node)}\n                <CSStoreCard\n                  title={node.name}\n                  subtitle={node.description}\n                  price={node.priceDisplay}\n                  imgUrl={node.urlImageThumbnailLarge}\n                  imgAlt={node.name}\n                  buttonText={buttonTextAdd}\n                  buttonOnClick={() => {\n                    createAccountProduct({ variables: {\n                      input: {\n                        account: accountId,\n                        organizationProduct: node.id,\n                        quantity: 1,\n                      }\n                    }, refetchQueries: [\n                        {query: GET_ACCOUNT_PRODUCTS_QUERY, variables: { accountId: accountId }}\n                    ]})\n                    .then(({ data }) => {\n                        console.log('got data', data);\n                        history.push(`/relations/accounts/${accountId}/products`)\n                        toast.success((t('relations.account.products.toast_add_success')), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                      })\n                  }}\n                />\n              </Grid.Col>\n            ))}\n          </Grid.Row>\n        </LoadMoreOnBottomScroll>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: \"\",\n              dateStart: new Date(),\n              note: \"\",\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n\n                createAccountClasspass({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const classpassId = data.createAccountClasspass.accountClasspass.id\n                    history.push(`/relations/accounts/${accountId}/classpasses/edit/${classpassId}`)\n                    toast.success((t('relations.account.classpasses.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card> */}\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountProductAdd))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_QUOTES_QUERY = gql`\n  query FinanceQuotes($after: String, $before: String, $status: CostasiellaFinanceQuoteStatusChoices, $accountId: ID!) {\n    financeQuotes(first: 15, before: $before, after: $after, status: $status, account: $accountId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          quoteNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateExpire\n          total\n          totalDisplay\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n// export const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n//   query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n//     accountSubscription(id:$id) {\n//       id\n//       organizationSubscription {\n//         id\n//         name\n//       }\n//       financePaymentMethod {\n//         id\n//         name\n//       }\n//       dateStart\n//       dateEnd\n//       note\n//       registrationFeePaid\n//       createdAt\n//     }\n//     organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//           code\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//     }\n//   }\n// `\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String, $accountId: ID!) {\n    financeQuoteGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    businesses(first: 100) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n      invoiceToBusiness {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_QUOTE = gql`\n  mutation CreateFinanceQuote($input: CreateFinanceQuoteInput!) {\n    createFinanceQuote(input: $input) {\n      financeQuote {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nfunction AccountQuotesBase({ t, match, history, children, account={}, pageHeaderButtonList=\"\" }) {\n  const accountId = match.params.account_id\n  let pageHeader\n  if (account) {\n    pageHeader = account.fullName\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={pageHeader} >\n            <div className='page-options d-flex'>\n              { pageHeaderButtonList }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='quotes' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountQuotesBase))\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport { GET_ACCOUNT_QUOTES_QUERY } from \"./queries\"\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport FinanceQuotesList from '../../../finance/quotes/FinanceQuotesList'\nimport AccountQuotesBase from './AccountQuotesBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\n\nfunction AccountQuotes({ t, location, match, history }) {\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.quotes.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <RelationsAccountsBack />\n    <ButtonAdd addUrl={`/relations/accounts/${accountId}/quotes/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_QUOTES_QUERY, {\n    variables: {accountId: accountId},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountQuotesBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountQuotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountQuotesBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountQuotesBase>\n    )\n  }\n\n  // Set back location for edit quote\n  localStorage.setItem(CSLS.FINANCE_QUOTES_EDIT_RETURN, location.pathname)\n  let financeQuotes = data.financeQuotes\n  const account = data.account\n\n  // Empty list\n  if (!financeQuotes.edges.length) {\n    return (\n      <AccountQuotesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.quotes.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountQuotesBase>\n    )\n  }\n  \n  return (\n    <AccountQuotesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={financeQuotes.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeQuotes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeQuotes.edges\n              const pageInfo = fetchMoreResult.financeQuotes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeQuotes at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeQuotes: {\n                      __typename: previousResult.financeQuotes.__typename,\n                      edges: [ ...previousResult.financeQuotes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceQuotesList quotes={financeQuotes} />\n      </ContentCard>\n    </AccountQuotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountQuotes))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\";\n\n\nconst AccountQuoteAddForm = ({ t, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group label={t('relations.accounts.quote_to_business')}>\n        <Field component=\"select\" \n              name=\"business\" \n              className={(errors.business) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t('relations.accounts.quote_to_account')}</option>\n          {inputData.businesses.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"business\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.finance_quote_group')}>\n        <Field component=\"select\" \n              name=\"financeQuoteGroup\" \n              className={(errors.financeQuoteGroup) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          {/* <option value=\"\" key={v4()}>{t('general.please_select')}</option> */}\n          {inputData.financeQuoteGroups.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financeQuoteGroup\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.summary')}>\n        <Field type=\"text\" \n                name=\"summary\" \n                className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountQuoteAddForm))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_QUOTE } from './queries'\nimport AccountQuoteAddForm from './AccountQuoteAddForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountQuoteAdd({ t, match, history }) {\n  const account_id = match.params.account_id\n  const activeLink = \"quotes\"\n  const cardTitle = t('relations.account.quotes.title_add')\n  const returnUrl = `/relations/accounts/${account_id}/quotes`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY, {\n      variables: {\n        accountId: account_id\n      }\n    }\n  )\n  const [createQuote] = useMutation(CREATE_ACCOUNT_QUOTE, {\n    // onCompleted = () => history.push('/finance/quotes/edit/')\n  }) \n\n  // Query\n  // Loading\n  if (loading) {\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.loading_with_dots')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  \n  const account = data.account\n  const initialBusiness = account.quoteToBusiness ? account.quoteToBusiness.id : null\n  const financeQuoteGroups = data.financeQuoteGroups\n  const firstQuoteGroup = financeQuoteGroups && financeQuoteGroups.edges && financeQuoteGroups.edges[0].node.id\n\n\n  return (\n    <RelationsAccountProfileBase activeLink={activeLink} user={account} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{\n            financeQuoteGroup: firstQuoteGroup,\n            business: initialBusiness,\n            summary: \"\"\n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createQuote({ variables: {\n              input: {\n                account: account_id, \n                financeQuoteGroup: values.financeQuoteGroup,\n                business: (values.business) ? values.business : null,\n                summary: values.summary\n              }\n            }, refetchQueries: [\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.quotes.title_add')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push('/finance/quotes/edit/' + data.createFinanceQuote.financeQuote.id)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <AccountQuoteAddForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </AccountQuoteAddForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n\n    // <SiteWrapper>\n    //   <div className=\"my-3 my-md-5\">\n    //     <Container>\n    //       <Page.Header title={account.firstName + \" \" + account.lastName} />\n    //       <Grid.Row>\n    //           <Grid.Col md={9}>\n                \n    //           </Grid.Col>\n    //           <Grid.Col md={3}>\n    //             <ProfileMenu \n    //               activeLink='quotes'\n    //               accountId={match.params.account_id}\n    //             />\n    //           </Grid.Col>\n    //         </Grid.Row>\n    //       </Container>\n    //   </div>\n    // </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountQuoteAdd))\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport { GET_ACCOUNT } from \"../../../../queries/accounts/get_account\"\n\n\nfunction AccountScheduleEventTicketsBase({t, history, match, children}) {\n  const accountId = match.params.account_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT, { variables: {\n    accountId: accountId\n  }})\n\n  if (loading) return (\n    <p>\n      {t(\"general.loading_with_dots\")}\n    </p>\n  )\n  if (error) return (\n    <p>\n      {t(\"relations.account.error_loading\")}\n    </p>\n  )\n\n  console.log(data)\n  const account = data.account\n  console.log(account)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {/* <HasPermissionWrapper permission=\"add\"\n                                    resource=\"accountclasspass\">\n                <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/add\"}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper> */}\n              <ProfileMenu \n                activeLink='tickets' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountScheduleEventTicketsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY = gql`\nquery AccountScheduleEventTickets($before:String, $after:String, $scheduleEventTicket:ID!) {\n  accountScheduleEventTickets(first: 100, before: $before, after: $after, scheduleEventTicket:$scheduleEventTicket) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        account {\n          id\n          fullName\n        }\n        cancelled\n        paymentConfirmation\n        infoMailSent\n        invoiceItems {\n          edges {\n            node {\n              financeInvoice {\n                id\n                invoiceNumber\n                summary\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query AccountsAndTicketInfo(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $ticketId: ID!\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n    scheduleEventTicket(id: $ticketId) {\n      id\n      displayPublic\n      name\n      description\n      price\n      scheduleEvent {\n        name\n        dateStart\n      }\n    }\n    accountScheduleEventTickets(first: 1000, scheduleEventTicket: $ticketId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          cancelled\n          paymentConfirmation\n          infoMailSent\n        }\n      }\n    }\n  }\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n\nexport const ADD_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\nmutation CreateAccountScheduleEventTicket($input:CreateAccountScheduleEventTicketInput!) {\n  createAccountScheduleEventTicket(input: $input) {\n    accountScheduleEventTicket {\n      id\n    }\n  }\n}\n`\n\n\nexport const UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\n  mutation UpdateAccountScheduleEventTicket($input:UpdateAccountScheduleEventTicketInput!) {\n    updateAccountScheduleEventTicket(input: $input) {\n      accountScheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n// export const DELETE_SCHEDULE_EVENT_TICKET = gql`\n//   mutation DeleteScheduleEventTicket($input: DeleteScheduleEventTicketInput!) {\n//     deleteScheduleEventTicket(input: $input) {\n//       ok\n//     }\n//   }\n// `\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY = gql`\n  query AccountScheduleEventTickets($after: String, $before: String, $account: ID!) {\n    accountScheduleEventTickets(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          cancelled\n          infoMailSent\n          scheduleEventTicket {\n            id\n            name\n            scheduleEvent {\n              id\n              name\n              dateStart\n              organizationLocation {\n                name\n              }\n            }\n          }\n          invoiceItems(first:1) {\n            edges {\n              node {\n                financeInvoice {\n                  id\n                  invoiceNumber\n                  status\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport AccountScheduleEventTicketsBase from \"./AccountScheduleEventTicketsBase\"\n\nimport { UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET } from \"../../../schedule/events/tickets/customers/queries\"\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\n\n\n\nfunction AccountScheduleEventTickets({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t('relations.account.event_tickets.title')\n\n  const accountId = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, { variables: {\n    account: accountId\n  }})\n  const [updateAccountScheduleEventTicket] = useMutation(UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET)\n\n\n  if (loading) return (\n    <AccountScheduleEventTicketsBase>\n      {t(\"general.loading_with_dots\")}\n    </AccountScheduleEventTicketsBase>\n  )\n  if (error) return (\n    <AccountScheduleEventTicketsBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </AccountScheduleEventTicketsBase>\n  )\n\n  const accountScheduleEventTickets = data.accountScheduleEventTickets\n\n  // Empty list\n  if (!accountScheduleEventTickets.edges.length) {\n    return (\n      <AccountScheduleEventTicketsBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.event_tickets.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountScheduleEventTicketsBase>\n    )\n  }\n\n  return (\n    <AccountScheduleEventTicketsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={accountScheduleEventTickets.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountScheduleEventTickets.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountScheduleEventTickets.edges\n              const pageInfo = fetchMoreResult.accountScheduleEventTickets.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountScheduleEventTickets at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountScheduleEventTickets: {\n                      __typename: previousResult.accountScheduleEventTickets.__typename,\n                      edges: [ ...previousResult.accountScheduleEventTickets.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.ticket')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n              <Table.ColHeader>{t('schedule.events.tickets.info_mail_sent')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountScheduleEventTickets.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    {node.scheduleEventTicket.scheduleEvent.name} <br />\n                    <Badge>{node.scheduleEventTicket.name}</Badge> {\" \"}\n                    {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.scheduleEventTicket.scheduleEvent.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.invoiceItems.edges.length) ? \n                      <span>\n                        <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                          {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber}\n                        </Link> <br />\n                        <FinanceInvoicesStatus status={node.invoiceItems.edges[0].node.financeInvoice.status} />\n                        \n                      </span>\n                      : \"\"\n                    }\n                    \n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    {node.dateStart}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dateEnd}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.classesRemainingDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col> */}\n                  <Table.Col>\n                    <BadgeBoolean value={node.infoMailSent} />\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.cancelled) ?\n                      <Button \n                        className=\"pull-right\"\n                        color=\"warning\"\n                        onClick={() =>\n                          updateAccountScheduleEventTicket({ variables: {\n                            input: {\n                              id: node.id,\n                              cancelled: false\n                            }\n                          }, refetchQueries: [\n                            { \n                              query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, \n                              variables: { account: accountId }\n                            },\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.events.tickets.customers.uncancelled')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                            }\n                          )\n                        }\n                      >\n                        {t(\"general.uncancel\")}\n                      </Button>\n                    :\n                      <Button \n                        className=\"pull-right\"\n                        color=\"warning\"\n                        onClick={() =>\n                          updateAccountScheduleEventTicket({ variables: {\n                            input: {\n                              id: node.id,\n                              cancelled: true\n                            }\n                          }, refetchQueries: [\n                              { \n                                query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, \n                                variables: { account: accountId }\n                              },\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.events.tickets.customers.cancelled')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                            })\n                          }\n                        >\n                          {t(\"general.cancel\")}\n                        </Button>\n                    }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountScheduleEventTicketsBase>\n  )\n}\n\n\n\n// const AccountClasspasses = ({ t, history, match, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Query query={GET_ACCOUNT_CLASSPASSES_QUERY} variables={{ archived: archived, accountId: match.params.account_id }} \n//         fetchPolicy=\"network-only\"> \n//         {({ loading, error, data, refetch, fetchMore }) => {\n//           // Loading\n//           if (loading) return <p>{t('general.loading_with_dots')}</p>\n//           // Error\n//           if (error) {\n//             console.log(error)\n//             return <p>{t('general.error_sad_smiley')}</p>\n//           }\n\n//           const account = data.account\n//           const accountClasspasses = data.accountClasspasses\n\n//           return (\n//             <Container>\n//               <Page.Header title={account.firstName + \" \" + account.lastName} >\n//                 <RelationsAccountsBack />\n//               </Page.Header>\n//               <Grid.Row>\n//                 <Grid.Col md={9}>\n//                   <ContentCard \n//                     cardTitle={t('relations.account.classpasses.title')}\n//                     pageInfo={accountClasspasses.pageInfo}\n//                     onLoadMore={() => {\n//                       fetchMore({\n//                         variables: {\n//                           after: accountClasspasses.pageInfo.endCursor\n//                         },\n//                         updateQuery: (previousResult, { fetchMoreResult }) => {\n//                           const newEdges = fetchMoreResult.accountClasspasses.edges\n//                           const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n//                           return newEdges.length\n//                             ? {\n//                                 // Put the new accountClasspasses at the end of the list and update `pageInfo`\n//                                 // so we have the new `endCursor` and `hasNextPage` values\n//                                 accountClasspasses: {\n//                                   __typename: previousResult.accountClasspasses.__typename,\n//                                   edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n//                                   pageInfo\n//                                 }\n//                               }\n//                             : previousResult\n//                         }\n//                       })\n//                     }} \n//                   >\n//                     <Table>\n//                       <Table.Header>\n//                         <Table.Row key={v4()}>\n//                           <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n//                           <Table.ColHeader></Table.ColHeader> \n//                         </Table.Row>\n//                       </Table.Header>\n//                       <Table.Body>\n//                           {accountClasspasses.edges.map(({ node }) => (\n//                             <Table.Row key={v4()}>\n//                               <Table.Col key={v4()}>\n//                                 {node.organizationClasspass.name}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.dateStart}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.dateEnd}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.classesRemainingDisplay}\n//                               </Table.Col>\n//                               <Table.Col className=\"text-right\" key={v4()}>\n//                                 <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n//                                   <Button className='btn-sm' \n//                                           color=\"secondary\">\n//                                     {t('general.edit')}\n//                                   </Button>\n//                                 </Link>\n//                               </Table.Col>\n//                               <Mutation mutation={DELETE_ACCOUNT_CLASSPASS} key={v4()}>\n//                                 {(deleteAccountClasspass, { data }) => (\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     <button className=\"icon btn btn-link btn-sm\" \n//                                       title={t('general.delete')} \n//                                       href=\"\"\n//                                       onClick={() => {\n//                                         confirm_delete({\n//                                           t: t,\n//                                           msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n//                                           msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n//                                           msgSuccess: t('relations.account.classpasses.deleted'),\n//                                           deleteFunction: deleteAccountClasspass,\n//                                           functionVariables: { variables: {\n//                                             input: {\n//                                               id: node.id\n//                                             }\n//                                           }, refetchQueries: [\n//                                             {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n//                                           ]}\n//                                         })\n//                                     }}>\n//                                       <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n//                                     </button>\n//                                   </Table.Col>\n//                                 )}\n//                               </Mutation>\n//                             </Table.Row>\n//                           ))}\n//                       </Table.Body>\n//                     </Table>\n//                   </ContentCard>\n//                 </Grid.Col>\n//                 <Grid.Col md={3}>\n//                   <ProfileCardSmall user={account}/>\n//                   <HasPermissionWrapper permission=\"add\"\n//                                         resource=\"accountclasspass\">\n//                     <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/add\"}>\n//                       <Button color=\"primary btn-block mb-6\">\n//                               {/* //  onClick={() => history.push(\"/organization/classpasses/add\")}> */}\n//                         <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n//                       </Button>\n//                     </Link>\n//                   </HasPermissionWrapper>\n//                   <ProfileMenu \n//                     activeLink='classpasses' \n//                     account_id={match.params.account_id}\n//                   />\n//                 </Grid.Col>\n//               </Grid.Row>\n//             </Container>\n//           )\n//         }}\n//       </Query>\n//     </div>\n//   </SiteWrapper>\n// )\n      \n        \nexport default withTranslation()(withRouter(AccountScheduleEventTickets))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTIONS_QUERY = gql`\n  query AccountSubscriptions($after: String, $before: String, $accountId: ID!) {\n    accountSubscriptions(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n            unlimited\n          }\n          financePaymentMethod {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          creditTotal\n          registrationFeePaid\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n    accountSubscription(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n        unlimited\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query SubscriptionInputValues($after: String, $before: String, $archived: Boolean!, $accountId: ID!) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n\nexport const GET_ACCOUNT_QUERY = gql`\n  query Account($accountId: ID!) {\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation CreateAccountSubscription($input: CreateAccountSubscriptionInput!) {\n    createAccountSubscription(input: $input) {\n      accountSubscription {\n        id    \n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation UpdateAccountSubscription($input: UpdateAccountSubscriptionInput!) {\n    updateAccountSubscription(input: $input) {\n      accountSubscription {\n        id  \n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation DeleteAccountSubscription($input: DeleteAccountSubscriptionInput!) {\n    deleteAccountSubscription(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, DELETE_ACCOUNT_SUBSCRIPTION } from \"./queries\"\n\n\nfunction AccountSubscriptions({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.subscriptions.title')\n  const activeLink = \"subscriptions\"\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTIONS_QUERY, {\n    variables: {accountId: accountId}\n  })\n  const [deleteAccountSubscription] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountSubscriptions = data.accountSubscriptions\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountsubscription\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/subscriptions/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  // Empty list\n  if (!accountSubscriptions.edges.length) {\n    return (\n      <RelationsAccountProfileBase\n        activeLink={activeLink}\n        user={account}\n        pageHeaderButtonList={pageHeaderButtonList}\n      >\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.subscriptions.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n    )\n  }\n\n  console.table(accountSubscriptions.edges)\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.subscriptions.title')}\n        pageInfo={accountSubscriptions.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountSubscriptions.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountSubscriptions.edges\n              const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountSubscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountSubscriptions: {\n                      __typename: previousResult.accountSubscriptions.__typename,\n                      edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.payment_method')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.credits')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountSubscriptions.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.organizationSubscription.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dateEnd && moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.financePaymentMethod) ? node.financePaymentMethod.name : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    { (node.organizationSubscription.unlimited) ? t(\"general.unlimited\") : node.creditTotal }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/subscriptions/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.subscriptions.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationSubscription.name} {node.dateStart}</p>,\n                          msgSuccess: t('relations.account.subscriptions.deleted'),\n                          deleteFunction: deleteAccountSubscription,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountSubscriptions))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  organizationSubscription: Yup.string()\n    .required(t('yup.field_required')),\n  financePaymentMethod: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  registrationFeePaid: Yup.boolean(),\n  note: Yup.string(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nimport ButtonFormCancel from \"../../../ui/ButtonFormCancel\"\n\n\nconst AccountSubscriptionForm = ({ t, history, create, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.subscription')}>\n            <Field component=\"select\" \n                  name=\"organizationSubscription\" \n                  className={(errors.organizationSubscription) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationSubscriptions.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationSubscription\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.payment_method')}>\n            <Field component=\"select\" \n                  name=\"financePaymentMethod\" \n                  className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financePaymentMethods.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"note\"\n            initialValue={values.note}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"note\", e.target.getContent())\n              setFieldTouched(\"note\", true, true)\n            }}\n          />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(create) ? \"\" : \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"registrationFeePaid\" \n                checked={values.registrationFeePaid} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('relations.account.subscriptions.registration_fee_paid')}</span>\n            </Form.Label>\n          <ErrorMessage name=\"registrationFeePaid\" component=\"div\" />   \n        </Form.Group> \n      }\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionForm))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport AccountSubscriptionForm from './AccountSubscriptionForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountSubscriptionAdd({t, history, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"subscriptions\"\n  const cardTitle = t('relations.account.subscriptions.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, {\n    variables: { archived: false, accountId: accountId }\n  })\n  const [createAccountSubscription] = useMutation(CREATE_ACCOUNT_SUBSCRIPTION)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationSubscription: \"\",\n              financePaymentMethod: \"\",\n              dateStart: new Date(),\n              note: \"\",\n              registrationFeePaid: false\n            }}\n            validationSchema={SUBSCRIPTION_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n                \n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                createAccountSubscription({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationSubscription: values.organizationSubscription,\n                    financePaymentMethod: values.financePaymentMethod,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd,\n                    note: values.note\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const subscriptionId = data.createAccountSubscription.accountSubscription.id\n                    history.push(`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}`)\n                    toast.success((t('relations.account.subscriptions.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountSubscriptionForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountSubscriptionForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\n\n// class AccountSubscriptionAdd extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Account subscription add props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const history = this.props.history\n//     const match = this.props.match\n//     const accountId = match.params.accountId\n//     const returnUrl = \"/relations/accounts/\" + accountId + \"/subscriptions\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//         <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false, accountId: accountId}} >\n//           {({ loading, error, data, refetch }) => {\n//             // Loading\n//             if (loading) return <p>{t('general.loading_with_dots')}</p>\n//             // Error\n//             if (error) {\n//               console.log(error)\n//               return <p>{t('general.error_sad_smiley')}</p>\n//             }\n            \n//             console.log('query data')\n//             console.log(data)\n//             const inputData = data\n//             const account = data.account\n\n//             return (\n//               <Container>\n//                <Page.Header title={account.firstName + \" \" + account.lastName} />\n//                <Grid.Row>\n//                   <Grid.Col md={9}>\n//                   <Card>\n//                     <Card.Header>\n//                       <Card.Title>{t('relations.account.subscriptions.title_add')}</Card.Title>\n//                     </Card.Header>\n//                       <Mutation mutation={CREATE_ACCOUNT_SUBSCRIPTION} onCompleted={() => history.push(returnUrl)}> \n//                       {(createSubscription, { data }) => (\n//                           <Formik\n//                               initialValues={{ \n//                                 organizationSubscription: \"\",\n//                                 financePaymentMethod: \"\",\n//                                 dateStart: new Date(),\n//                                 note: \"\",\n//                                 registrationFeePaid: false\n//                               }}\n//                               validationSchema={SUBSCRIPTION_SCHEMA}\n//                               onSubmit={(values, { setSubmitting }, errors) => {\n//                                   console.log('submit values:')\n//                                   console.log(values)\n//                                   console.log(errors)\n\n                                  \n//                                   let dateEnd\n//                                   if (values.dateEnd) {\n//                                     dateEnd = dateToLocalISO(values.dateEnd)\n//                                   } else {\n//                                     dateEnd = values.dateEnd\n//                                   }\n\n//                                   createSubscription({ variables: {\n//                                     input: {\n//                                       account: accountId, \n//                                       organizationSubscription: values.organizationSubscription,\n//                                       financePaymentMethod: values.financePaymentMethod,\n//                                       dateStart: dateToLocalISO(values.dateStart),\n//                                       dateEnd: dateEnd,\n//                                       note: values.note,\n//                                       registrationFeePaid: values.registrationFeePaid\n//                                     }\n//                                   }, refetchQueries: [\n//                                       {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n//                                   ]})\n//                                   .then(({ data }) => {\n//                                       console.log('got data', data)\n//                                       toast.success((t('relations.account.subscriptions.toast_add_success')), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error)\n//                                       setSubmitting(false)\n//                                     })\n//                               }}\n//                               >\n//                               {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n//                                 <AccountSubscriptionForm\n//                                   inputData={inputData}\n//                                   isSubmitting={isSubmitting}\n//                                   setFieldValue={setFieldValue}\n//                                   setFieldTouched={setFieldTouched}\n//                                   errors={errors}\n//                                   values={values}\n//                                   returnUrl={returnUrl}\n//                                 >\n//                                   {console.log(errors)}\n//                                 </AccountSubscriptionForm>\n//                               )}\n//                           </Formik>\n//                       )}\n//                       </Mutation>\n//                     </Card>\n//                   </Grid.Col>\n//                   <Grid.Col md={3}>\n//                     <HasPermissionWrapper permission=\"add\"\n//                                           resource=\"accountsubscription\">\n//                       <Link to={returnUrl}>\n//                         <Button color=\"primary btn-block mb-6\">\n//                           <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                         </Button>\n//                       </Link>\n//                     </HasPermissionWrapper>\n//                     <ProfileMenu \n//                       activeLink='subscriptions'\n//                       accountId={match.params.accountId}\n//                     />\n//                   </Grid.Col>\n//                 </Grid.Row>\n//               </Container>\n//             )}}\n//           </Query>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionAdd))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n// position: top or bottom\n// tabs: [[name, title, link], ...]\n// active: active tab name\n\nfunction CardTabs({ t, position=\"top\", tabs, active}) {\n  let class_tabs_position = \"card-tabs-top\"\n  switch(position) {\n    case \"top\":\n      break\n    case \"bottom\":\n      class_tabs_position = \"card-tabs-top\"\n      break\n    default:\n      break\n  }   \n\n  return (\n    <div className={`card-tabs ${class_tabs_position}`}>\n      {\n        tabs.map(({name, title, link}) => (\n          <Link key={v4()} to={link} className={`card-tabs-item ${(name === active) ? \"active\": \"\"}`}>\n            <h3 className=\"card-title\"> {title} </h3>\n          </Link>\n        ))\n      }\n    </div>\n  )\n}\n\nexport default withTranslation()(CardTabs)\n\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../../ui/CardTabs\"\n\nfunction AccountSubscriptionEditTabs({ t, active, account_id, subscription_id}) {\n\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"relations.account.subscriptions.menu.general\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}`\n          },\n          {\n            name: \"pauses\", \n            title: t(\"relations.account.subscriptions.menu.pauses\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/pauses`\n          },\n          {\n            name: \"blocks\", \n            title: t(\"relations.account.subscriptions.menu.blocks\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/blocks`\n          },\n          {\n            name: \"alt_prices\", \n            title: t(\"relations.account.subscriptions.menu.alt_prices\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/alt_prices`\n          },\n          {\n            name: \"invoices\", \n            title: t(\"relations.account.subscriptions.menu.invoices\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/invoices`\n          },\n          {\n            name: \"credits\", \n            title: t(\"relations.account.subscriptions.menu.credits\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/credits`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(AccountSubscriptionEditTabs)\n\n\n\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\n\nimport ProfileCardSmall from \"../../../../ui/ProfileCardSmall\"\nimport ProfileMenu from \"../../ProfileMenu\"\nimport moment from 'moment'\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\n\nfunction AccountSubscriptionEditBaseBase({t, history, match, children, returnUrl, account=null, subscription=null, activeTab}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n\n  let credits = \"\"\n  if (subscription) {\n    if (subscription.organizationSubscription.unlimited) {\n      credits = t(\"general.unlimited\")\n    } else {\n      credits = subscription.creditTotal\n    }\n  } \n\n  const cardTitle = (subscription) ? \n    <span className=\"text-muted\">\n      - {subscription.organizationSubscription.name + \" \" + moment(subscription.dateStart).format(dateFormat)} - {credits} {t(\"general.credits\")}\n    </span> : \"\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={(account) ? account.firstName + \" \" + account.lastName : \"\"} >\n            <div className='page-options d-flex'>\n              {(returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\"}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('relations.account.subscriptions.title_edit')} {cardTitle}</Card.Title>\n                </Card.Header>\n                <AccountSubscriptionEditTabs \n                  account_id={accountId}\n                  subscription_id={subscriptionId}\n                  active={activeTab}\n                />\n                {children}\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {/* <HasPermissionWrapper permission=\"change\"\n                                    resource=\"accountsubscription\">\n                <Link to={returnUrl}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper> */}\n              <ProfileMenu \n                activeLink='subscriptions'\n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBaseBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from '../queries'\nimport AccountSubscriptionEditBaseBase from \"./AccountSubscriptionEditBaseBase\"\n\n\nfunction AccountSubscriptionEditBase({t, history, match, children, activeTab, returnUrl}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      accountId: accountId,\n      id: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab} returnUrl={returnUrl}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditBaseBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab} returnUrl={returnUrl}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditBaseBase>\n  )\n\n  console.log(data)\n  const account = data.account\n  const subscription = data.accountSubscription\n\n  return (\n    <AccountSubscriptionEditBaseBase \n      activeTab={activeTab} \n      account={account} \n      subscription={subscription}\n      returnUrl={returnUrl}  \n    >\n      {children}\n    </AccountSubscriptionEditBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBase))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_ACCOUNT_SUBSCRIPTION_QUERY, UPDATE_ACCOUNT_SUBSCRIPTION } from '../queries'\nimport { SUBSCRIPTION_SCHEMA } from '../yupSchema'\nimport AccountSubscriptionForm from '../AccountSubscriptionForm'\n\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport AccountSubscriptionEditBase from \"./AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEdit({t, match, history}) {\n  const id = match.params.subscription_id\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"general\"\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      archived: false,\n      accountId: accountId,\n      id: id\n    }\n  })\n\n  const [ updateSubscription ] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION)\n  \n  if (loading) return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditBase>\n  )\n\n  const inputData = data\n  const initialdata = data.accountSubscription\n\n  let initialPaymentMethod = \"\"\n  if (initialdata.financePaymentMethod) {\n    initialPaymentMethod = initialdata.financePaymentMethod.id\n  }\n  \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialdata.dateStart) {\n    dateStart = new Date(initialdata.dateStart)\n  }\n  if (initialdata.dateEnd) {\n    dateEnd = new Date(initialdata.dateEnd)\n  }\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      <Formik\n        initialValues={{ \n          organizationSubscription: initialdata.organizationSubscription.id,\n          financePaymentMethod: initialPaymentMethod,\n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          note: initialdata.note,\n          registrationFeePaid: initialdata.registrationFeePaid\n        }}\n        validationSchema={SUBSCRIPTION_SCHEMA}\n        onSubmit={(values, { setSubmitting }, errors) => {\n            console.log('submit values:')\n            console.log(values)\n            console.log(errors)\n\n            \n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateSubscription({ variables: {\n              input: {\n                id: id,\n                organizationSubscription: values.organizationSubscription,\n                financePaymentMethod: values.financePaymentMethod,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd,\n                note: values.note,\n                registrationFeePaid: values.registrationFeePaid\n              }\n            }, refetchQueries: [\n                {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.subscriptions.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n          <AccountSubscriptionForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldValue={setFieldValue}\n            setFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </AccountSubscriptionForm>\n        )}\n      </Formik>\n    </AccountSubscriptionEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEdit))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY = gql`\nquery AccountSubscriptionAltPrices($before:String, $after:String, $accountSubscription: ID!) {\n  accountSubscriptionAltPrices(before: $before, after: $after, accountSubscription:$accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        subscriptionYear\n        subscriptionMonth\n        amount\n        amountDisplay\n        description\n        note\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY = gql`\nquery AccountSubscriptionAltPrice($id: ID!) {\n  accountSubscriptionAltPrice(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    subscriptionYear\n    subscriptionMonth\n    amount\n    description\n    note\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation DeleteAccountSubscriptionAltPrice($input: DeleteAccountSubscriptionAltPriceInput!) {\n    deleteAccountSubscriptionAltPrice(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\nimport ProfileCardSmall from \"../../../../ui/ProfileCardSmall\"\nimport ProfileMenu from \"../../ProfileMenu\"\nimport moment from 'moment'\n\n\nfunction AccountSubscriptionEditBaseBase({\n  t, \n  history, \n  match, \n  children, \n  account=null, \n  subscription=null, \n  pageInfo, \n  onLoadMore, \n  activeTab,\n  returnUrl,\n  pageHeaderButtonList=\"\"}\n){\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  \n  let credits = \"\"\n  if (subscription) {\n    if (subscription.organizationSubscription.unlimited) {\n      credits = t(\"general.unlimited\")\n    } else {\n      credits = subscription.creditTotal\n    }\n  } \n\n  const cardTitle = (subscription) ? \n    <span className=\"text-muted\">\n      - {subscription.organizationSubscription.name + \" \" + moment(subscription.dateStart).format(dateFormat)} - {credits} {t(\"general.credits\")}\n    </span> : \"\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={(account) ? account.firstName + \" \" + account.lastName : \"\"} >\n            <div className='page-options d-flex'>\n              {(returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\"}\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <ContentCard \n                cardTitle={<span>{t('relations.account.subscriptions.title_edit')} {cardTitle}</span>}\n                pageInfo={pageInfo}\n                onLoadMore={onLoadMore}\n                hasCardBody={false}\n                cardTabs={<AccountSubscriptionEditTabs \n                  account_id={accountId}\n                  subscription_id={subscriptionId}\n                  active={activeTab} /> }\n              >\n                {children}\n              </ContentCard>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='subscriptions'\n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBaseBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from '../queries'\nimport AccountSubscriptionEditListBaseBase from \"./AccountSubscriptionEditListBaseBase\"\n\n\nfunction AccountSubscriptionEditListBase({t, history, match, children, pageInfo, onLoadMore, activeTab, returnUrl, pageHeaderButtonList=\"\"}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      accountId: accountId,\n      id: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBaseBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBaseBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBaseBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBaseBase>\n  )\n\n  console.log(data)\n  const account = data.account\n  const subscription = data.accountSubscription\n\n  return (\n    <AccountSubscriptionEditListBaseBase \n      activeTab={activeTab} \n      account={account} \n      subscription={subscription}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      {children}\n    </AccountSubscriptionEditListBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditListBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE, GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditAltPriceDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionAltPrice] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.alt_prices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.alt_prices.delete_success'),\n          deleteFunction: deleteAccountSubscriptionAltPrice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport ButtonAdd from '../../../../../ui/ButtonAdd'\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditAltPriceDelete from \"./AccountSubscriptionEditAltPriceDelete\"\n\n\nfunction AccountSubscriptionEditAltPrices({t, match, history}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"alt_prices\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/add`} \n    className=\"ml-2\"\n   />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionAltPrices = data.accountSubscriptionAltPrices\n  const pageInfo = data.accountSubscriptionAltPrices.pageInfo\n\n    // Empty list\n    if (!accountSubscriptionAltPrices.edges.length) { return (\n      <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card.Body>{t('relations.account.subscriptions.alt_prices.empty_list')}</Card.Body>\n      </AccountSubscriptionEditListBase>\n    )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionAltPrices.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionAltPrices.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionAltPrices.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionAltPrices: {\n                __typename: previousResult.accountSubscriptionAltPrices.__typename,\n                edges: [ ...previousResult.accountSubscriptionAltPrices.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.subscription_year')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.subscription_month')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionAltPrices.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.subscriptionYear}\n                </Table.Col>\n                <Table.Col>\n                  {node.subscriptionMonth}\n                </Table.Col>\n                <Table.Col>\n                  {node.amountDisplay}\n                </Table.Col>\n                <Table.Col>\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditAltPriceDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPrices))\n","import * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  amount: Yup.number()\n    .required()\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditAltPriceBase({ t, history, match, children}) {\n  const activeTab = \"alt_prices\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\n\n\nfunction AccountSubscriptionEditAltPriceForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.alt_prices.add')\n  } else {\n    title = t('relations.account.subscriptions.alt_prices.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n                <Field type=\"text\" \n                    name=\"amount\" \n                    className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.note')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"note\"\n                initialValue={values.note}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"note\", e.target.getContent())\n                  setFieldTouched(\"note\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditAltPriceBase from \"./AccountSubscriptionEditAltPriceBase\"\nimport AccountSubscriptionEditAltPriceForm from \"./AccountSubscriptionEditAltPriceForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation CreateAccountSubscriptionAltPrice($input:CreateAccountSubscriptionAltPriceInput!) {\n    createAccountSubscriptionAltPrice(input: $input) {\n      accountSubscriptionAltPrice {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditAltPriceAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n\n  const [addSubscriptionAltPrice] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditAltPriceBase>\n      <Formik\n        initialValues={{ \n          subscriptionYear: new Date().getFullYear(),\n          subscriptionMonth: new Date().getMonth() + 1,\n          amount: 0,\n          description: \"\",\n          note: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionAltPrice({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              amount: values.amount,\n              description: values.description,\n              note: values.note,\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.alt_prices.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditAltPriceForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditAltPriceBase from \"./AccountSubscriptionEditAltPriceBase\"\nimport AccountSubscriptionEditAltPriceForm from \"./AccountSubscriptionEditAltPriceForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation UpdateAccountSubscriptionAltPrice($input:UpdateAccountSubscriptionAltPriceInput!) {\n    updateAccountSubscriptionAltPrice(input: $input) {\n      accountSubscriptionAltPrice {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditAltPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionAltPrice] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditAltPriceBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditAltPriceBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditAltPriceBase>\n    )\n  }\n\n  const accountSubscriptionAltPrice = data.accountSubscriptionAltPrice\n\n\n  return (\n    <AccountSubscriptionEditAltPriceBase>\n      <Formik\n        initialValues={{ \n          subscriptionYear: accountSubscriptionAltPrice.subscriptionYear,\n          subscriptionMonth: accountSubscriptionAltPrice.subscriptionMonth,\n          amount: accountSubscriptionAltPrice.amount,\n          description: accountSubscriptionAltPrice.description,\n          note: accountSubscriptionAltPrice.note\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionAltPrice({ variables: {\n            input: {\n              id: id,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              amount: values.amount,\n              description: values.description,\n              note: values.note,\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.alt_prices.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditAltPriceForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY = gql`\nquery AccountSubscriptionBlocks($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionBlocks(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        dateStart\n        dateEnd\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY = gql`\nquery AccountSubscriptionBlock($id: ID!) {\n  accountSubscriptionBlock(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    dateStart\n    dateEnd\n    description\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation DeleteAccountSubscriptionBlock($input: DeleteAccountSubscriptionBlockInput!) {\n    deleteAccountSubscriptionBlock(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_BLOCK, GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditBlockDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionBlock] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_BLOCK)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.blocks.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.blocks.delete_success'),\n          deleteFunction: deleteAccountSubscriptionBlock,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditBlockDelete from \"./AccountSubscriptionEditBlockDelete\"\nimport moment from 'moment';\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\n\n\nfunction AccountSubscriptionEditBlocks({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"blocks\"\n\n  const pageHeaderButtonList = <ButtonAdd \n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionBlocks = data.accountSubscriptionBlocks\n  const pageInfo = data.accountSubscriptionBlocks.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionBlocks.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>{t('relations.account.subscriptions.blocks.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionBlocks.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionBlocks.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionBlocks.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionBlocks: {\n                __typename: previousResult.accountSubscriptionBlocks.__typename,\n                edges: [ ...previousResult.accountSubscriptionBlocks.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionBlocks.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditBlockDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlocks))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  })","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditBlockBase({ t, history, match, children}) {\n  const activeTab = \"blocks\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditBlockForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.blocks.add')\n  } else {\n    title = t('relations.account.subscriptions.blocks.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditBlockBase from \"./AccountSubscriptionEditBlockBase\"\nimport AccountSubscriptionEditBlockForm from \"./AccountSubscriptionEditBlockForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation CreateAccountSubscriptionBlock($input:CreateAccountSubscriptionBlockInput!) {\n    createAccountSubscriptionBlock(input: $input) {\n      accountSubscriptionBlock {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditBlockAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n\n  const [addSubscriptionBlock] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_BLOCK, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditBlockBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionBlock({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.blocks.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditBlockForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditBlockBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditBlockBase from \"./AccountSubscriptionEditBlockBase\"\nimport AccountSubscriptionEditBlockForm from \"./AccountSubscriptionEditBlockForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation UpdateAccountSubscriptionBlock($input:UpdateAccountSubscriptionBlockInput!) {\n    updateAccountSubscriptionBlock(input: $input) {\n      accountSubscriptionBlock {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditBlockEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionBlock] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditBlockBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditBlockBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditBlockBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditBlockBase>\n    )\n  }\n\n  const accountSubscriptionBlock = data.accountSubscriptionBlock\n\n  return (\n    <AccountSubscriptionEditBlockBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date(accountSubscriptionBlock.dateStart),\n          dateEnd: new Date(accountSubscriptionBlock.dateEnd),\n          description: accountSubscriptionBlock.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionBlock({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.blocks.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditBlockForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditBlockBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY = gql`\nquery AccountSubscriptionCredits($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionCredits(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        advance\n        reconciled\n        accountSubscription {\n          id\n        }\n        description\n        expiration\n        expired\n        scheduleItemAttendance {\n          id\n          date\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationClasstype {\n              id\n              name\n            }\n            organizationLocationRoom {\n              id \n              name\n              organizationLocation {\n                id\n                name\n              }\n            }\n\n          }\n        }\n        createdAt\n      }\n    } \n  }\n  accountSubscription(id: $accountSubscription) {\n    id\n    organizationSubscription {\n      id\n      name\n      unlimited\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY = gql`\nquery AccountSubscriptionCredit($id: ID!) {\n  accountSubscriptionCredit(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    expiration\n    description\n    createdAt\n  }\n}\n`\n\nexport const ADD_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation CreateAccountSubscriptionCredit($input:CreateAccountSubscriptionCreditInput!) {\n    createAccountSubscriptionCredit(input: $input) {\n      accountSubscriptionCredit {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation UpdateAccountSubscriptionCredit($input:UpdateAccountSubscriptionCreditInput!) {\n    updateAccountSubscriptionCredit(input: $input) {\n      accountSubscriptionCredit {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation DeleteAccountSubscriptionCredit($input: DeleteAccountSubscriptionCreditInput!) {\n    deleteAccountSubscriptionCredit(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { DELETE_ACCOUNT_SUBSCRIPTION_CREDIT, GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditCreditDelete({t, match, history, id}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionCredit] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_CREDIT)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.credits.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.credits.delete_success'),\n          deleteFunction: deleteAccountSubscriptionCredit,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: query_vars },\n              { query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Badge,\n  Button,\n  Card,\n  Icon,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditCreditDelete from \"./AccountSubscriptionEditCreditDelete\"\n\n\n\nfunction AccountSubscriptionEditCredits({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"credits\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionCredits = data.accountSubscriptionCredits\n  const accountSubscription = data.accountSubscription\n  const pageInfo = data.accountSubscriptionCredits.pageInfo\n\n  // unlimited\n  if (accountSubscription.organizationSubscription.unlimited) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <Card.Alert color=\"primary\">\n          <Icon name=\"check\" /> {t('relations.account.subscriptions.credits.unlimited')}\n        </Card.Alert>\n      </Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  // Empty list\n  if (!accountSubscriptionCredits.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>{t('relations.account.subscriptions.credits.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  console.table(data)\n\n  function onLoadMore() {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionCredits.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionCredits.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionCredits.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionCredits: {\n                __typename: previousResult.accountSubscriptionCredits.__typename,\n                edges: [ ...previousResult.accountSubscriptionCredits.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}  \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.credit')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.expiration')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionCredits.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.createdAt).format(dateFormat)} <br />\n                  <small className=\"text-muted\">\n                    <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                  </small>\n                  {(node.reconciled) && <small className=\"text-muted\">Reconciled at {moment(node.reconciled).format(dateFormat)}</small>}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.expiration).format(dateFormat)} <br />\n                  {(node.expired && !node.scheduleItemAttendance) ? <Badge color=\"danger\">{t(\"general.expired\")}</Badge> : ''}\n                </Table.Col>\n                <Table.Col>\n                  {/* TODO class info here */}\n                  { node.scheduleItemAttendance && <span>\n                    {moment(node.scheduleItemAttendance.date).format(dateFormat)} {\" \"}\n                    {moment(`${node.scheduleItemAttendance.date} ${node.scheduleItemAttendance.scheduleItem.timeStart}`)\n                      .format(timeFormat)} {\" \"}\n                    {\" - \"}\n                    {node.scheduleItemAttendance.scheduleItem.organizationClasstype.name} <br />\n                    <small className='text-muted'>\n                      {node.scheduleItemAttendance.scheduleItem.organizationLocationRoom.organizationLocation.name}\n                    </small>\n                    </span>}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditCreditDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCredits))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_CREDIT_ADD_SCHEMA = Yup.object().shape({\n  amount: Yup.number()\n    .required(t('yup.field_required'))\n    .min(1)\n    .max(200)\n  })\n\nexport const ACCOUNT_SUBSCRIPTION_CREDIT_EDIT_SCHEMA = Yup.object().shape({\n  expiration: Yup.date()\n    .required(t('yup.field_required')),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditCreditBase({ t, history, match, children}) {\n  const activeTab = \"credits\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditCreditAddForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  returnUrl \n})   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{t('relations.account.subscriptions.credits.add')}</h5>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.amount')}>\n              <Field type=\"number\" \n                      name=\"amount\" \n                      className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                  name=\"description\" \n                  className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n            {t('general.cancel')}\n        </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditAddForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, ADD_ACCOUNT_SUBSCRIPTION_CREDIT } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_CREDIT_ADD_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditCreditBase from \"./AccountSubscriptionEditCreditBase\"\nimport AccountSubscriptionEditCreditAddForm from \"./AccountSubscriptionEditCreditAddForm\"\n\n\nfunction AccountSubscriptionEditCreditAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  const [addSubscriptionCredit] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_CREDIT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditCreditBase>\n      <Formik\n        initialValues={{ \n          amount: 1,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_CREDIT_ADD_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionCredit({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              amount: parseInt(values.amount),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.credits.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values }) => (\n          <AccountSubscriptionEditCreditAddForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditCreditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from '../../../../../ui/CSDatePicker';\n\n\nfunction AccountSubscriptionEditCreditForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.credits.add')\n  } else {\n    title = t('relations.account.subscriptions.credits.edit')\n  }\n\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n        {/* TODO: Add expiration date field here */}\n          <Grid.Col>\n            <Form.Group label={t('general.expiration')}>\n              <CSDatePicker \n                className={(errors.expiration) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.expiration}\n                onChange={(date) => {\n                  setFieldValue(\"expiration\", date)\n                  setFieldTouched(\"expiration\", true)\n                }}\n                onBlur={() => setFieldTouched(\"expiration\", true)}\n              />\n              <ErrorMessage name=\"expiration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                  name=\"description\" \n                  className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { \n  GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, \n  GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY,\n  UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_CREDIT_EDIT_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditCreditBase from \"./AccountSubscriptionEditCreditBase\"\nimport AccountSubscriptionEditCreditEditForm from \"./AccountSubscriptionEditCreditEditForm\"\n\n\nfunction AccountSubscriptionEditCreditEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionCredit] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditCreditBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditCreditBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditCreditBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditCreditBase>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const accountSubscriptionCredit = data.accountSubscriptionCredit\n\n\n  return (\n    <AccountSubscriptionEditCreditBase>\n      <Formik\n        initialValues={{ \n          expiration: new Date(accountSubscriptionCredit.expiration),\n          description: accountSubscriptionCredit.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_CREDIT_EDIT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionCredit({ variables: {\n            input: {\n              id: id,\n              expiration: dateToLocalISO(values.expiration),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.credits.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditCreditEditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditCreditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_FINANCE_INVOICE_ITEM_QUERY = gql`\nquery financeInvoiceItem($before: String, $after: String, $accountSubscription: ID!) {\n  financeInvoiceItems(before: $before, after: $after, accountSubscription:$accountSubscription, orderBy: [\"-finance_invoice__date_sent\"]) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        financeInvoice {\n          id\n          invoiceNumber\n          status\n          summary\n          dateSent\n          dateDue\n          total\n          balance\n        }\n        subscriptionYear\n        subscriptionMonth\n      }\n    }\n  }\n}\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n// export const GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY = gql`\n// query AccountSubscriptionCredit($id: ID!) {\n//   accountSubscriptionCredit(id:$id) {\n//     id\n//     accountSubscription {\n//       id\n//     }\n//     mutationType\n//     mutationAmount\n//     description\n//     createdAt\n//   }\n// }\n// `\n\n\n// export const DELETE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n//   mutation DeleteAccountSubscriptionCredit($input: DeleteAccountSubscriptionCreditInput!) {\n//     deleteAccountSubscriptionCredit(input: $input) {\n//       ok\n//     }\n//   }\n// `\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_FINANCE_INVOICE_ITEM_QUERY } from \"./queries\"\nimport { DELETE_FINANCE_INVOICE } from \"../../../../../finance/invoices/queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditInvoiceDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionInvoice] = useMutation(DELETE_FINANCE_INVOICE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('finance.invoices.deleted'),\n          deleteFunction: deleteAccountSubscriptionInvoice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: query_vars },\n              // { query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: {\n              //   accountId: accountId,\n              //   id: subscriptionId\n              // }}\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport FinanceInvoicesStatus from \"../../../../../ui/FinanceInvoiceStatus\"\nimport { GET_FINANCE_INVOICE_ITEM_QUERY } from './queries'\nimport CSLS from \"../../../../../../tools/cs_local_storage\"\nimport AccountSubscriptionEditInvoiceDelete from \"./AccountSubscriptionEditInvoiceDelete\"\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\nimport moment from 'moment';\n\n\nfunction AccountSubscriptionEditInvoices({t, location, match, history}) {  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"invoices\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/add`} \n    className=\"ml-2\"  \n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_FINANCE_INVOICE_ITEM_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  const financeInvoiceItems = data.financeInvoiceItems\n  const pageInfo = data.financeInvoiceItems.pageInfo\n\n\n  // Empty list\n  if (!financeInvoiceItems.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n\n      <Card.Body>{t('relations.account.subscriptions.invoices.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: financeInvoiceItems.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.financeInvoiceItems.edges\n        const pageInfo = fetchMoreResult.financeInvoiceItems.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              financeInvoiceItems: {\n                __typename: previousResult.financeInvoiceItems.__typename,\n                edges: [ ...previousResult.financeInvoiceItems.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}  \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n            {/* <Table.ColHeader>{t('finance.invoices.due')}</Table.ColHeader> */}\n            <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {financeInvoiceItems.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <FinanceInvoicesStatus status={node.financeInvoice.status} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.invoiceNumber} <br />\n                  <Text.Small color=\"gray\">{node.financeInvoice.summary.trunc(30)}</Text.Small>\n                </Table.Col>\n\n                <Table.Col key={v4()}>\n                  {moment(node.financeInvoice.dateSent).format('LL')} <br />\n                  {moment(node.financeInvoice.dateDue).format('LL')}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.totalDisplay}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.balanceDisplay}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <Button className='btn-sm' \n                          onClick={() => history.push(\"/finance/invoices/edit/\" + node.financeInvoice.id)}\n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                  <AccountSubscriptionEditInvoiceDelete id={node.financeInvoice.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoices))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA = Yup.object().shape({\n  financeInvoiceGroup: Yup.string()\n    .required(t('yup.field_required')),\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditInvoiceAddBase({ t, history, match, children}) {\n  const activeTab = \"invoices\"\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAddBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditInvoiceAddForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  const title = t('relations.account.subscriptions.invoices.add')\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Form.Group label={t('general.finance_invoice_group')}>\n          <Field component=\"select\" \n                name=\"financeInvoiceGroup\" \n                className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n            {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.summary')}>\n          <Field type=\"text\" \n                  name=\"summary\" \n                  className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button\n              type=\"button\" \n              color=\"link\" \n            >\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAddForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n// import { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_FINANCE_INVOICE_ITEM_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { CREATE_ACCOUNT_INVOICE } from \"../../../invoices/queries\"\nimport { ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditInvoiceAddBase from \"./AccountSubscriptionEditInvoiceAddBase\"\nimport AccountSubscriptionEditInvoiceAddForm from \"./AccountSubscriptionEditInvoiceAddForm\"\n\n\nfunction AccountSubscriptionEditInvoiceAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/`\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const [ addFinanceInvoice ] = useMutation(CREATE_ACCOUNT_INVOICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n    // Loading\n    if (queryLoading) return (\n      <AccountSubscriptionEditInvoiceAddBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </AccountSubscriptionEditInvoiceAddBase>\n    )\n    // Error\n    if (queryError) {\n      console.log(queryError)\n      return (\n        <AccountSubscriptionEditInvoiceAddBase>\n          <p>{t('general.error_sad_smiley')}</p>\n        </AccountSubscriptionEditInvoiceAddBase>\n      )\n    }\n    \n    console.log(queryData)\n\n  return (\n    <AccountSubscriptionEditInvoiceAddBase>\n      <Formik\n        initialValues={{ \n          financeInvoiceGroup: \"\",\n          summary: \"\",\n          subscriptionYear: new Date().getFullYear(), \n          subscriptionMonth: new Date().getMonth() + 1,\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addFinanceInvoice({ variables: {\n            input: {\n              account: accountId,\n              accountSubscription: subscriptionId,\n              financeInvoiceGroup: values.financeInvoiceGroup,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              summary: values.summary,\n            }\n          }, refetchQueries: [\n              {query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              // {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n              //   accountId: accountId,\n              //   id: subscriptionId\n              // }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              const financeInvoiceId = data.createFinanceInvoice.financeInvoice.id\n              history.push(`/finance/invoices/edit/${financeInvoiceId}`)\n              toast.success((t('relations.account.subscriptions.invoices.toast_add_success')), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              toast.success((t('relations.account.subscriptions.invoices.toast_you_are_now_editing')), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditInvoiceAddForm\n            inputData={queryData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditInvoiceAddBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAdd))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY = gql`\nquery AccountSubscriptionPauses($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionPauses(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        dateStart\n        dateEnd\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY = gql`\nquery AccountSubscriptionPause($id: ID!) {\n  accountSubscriptionPause(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    dateStart\n    dateEnd\n    description\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation DeleteAccountSubscriptionPause($input: DeleteAccountSubscriptionPauseInput!) {\n    deleteAccountSubscriptionPause(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_PAUSE, GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditPauseDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionPause] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_PAUSE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.pauses.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.pauses.delete_success'),\n          deleteFunction: deleteAccountSubscriptionPause,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditPauseDelete from \"./AccountSubscriptionEditPauseDelete\"\nimport moment from 'moment';\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\n\n\nfunction AccountSubscriptionEditPauses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"pauses\"\n\n  const pageHeaderButtonList = <ButtonAdd \n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/add`} \n    className='ml-2'\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionPauses = data.accountSubscriptionPauses\n  const pageInfo = data.accountSubscriptionPauses.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionPauses.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      {/* <div className=\"pull-right\">{buttonAdd}</div> */}\n      {/* <h5>{t('relations.account.subscriptions.pauses.title_list')}</h5> */}\n      <Card.Body>{t('relations.account.subscriptions.pauses.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionPauses.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionPauses.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionPauses.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionPauses: {\n                __typename: previousResult.accountSubscriptionPauses.__typename,\n                edges: [ ...previousResult.accountSubscriptionPauses.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore} \n      returnUrl={returnUrl}\n      pageHeaderButtonList={pageHeaderButtonList} \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>{/* <div className=\"pull-right\">{buttonAdd}</div> */}\n      {/* <h5>{t('relations.account.subscriptions.pauses.title_list')}</h5> */}\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionPauses.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditPauseDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauses))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditPauseBase({ t, history, match, children}) {\n  const activeTab = \"pauses\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditPauseForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.pauses.add')\n  } else {\n    title = t('relations.account.subscriptions.pauses.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditPauseBase from \"./AccountSubscriptionEditPauseBase\"\nimport AccountSubscriptionEditPauseForm from \"./AccountSubscriptionEditPauseForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation CreateAccountSubscriptionPause($input:CreateAccountSubscriptionPauseInput!) {\n    createAccountSubscriptionPause(input: $input) {\n      accountSubscriptionPause {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditPauseAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  const [addSubscriptionPause] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_PAUSE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditPauseBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionPause({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.pauses.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditPauseForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditPauseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditPauseBase from \"./AccountSubscriptionEditPauseBase\"\nimport AccountSubscriptionEditPauseForm from \"./AccountSubscriptionEditPauseForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation UpdateAccountSubscriptionPause($input:UpdateAccountSubscriptionPauseInput!) {\n    updateAccountSubscriptionPause(input: $input) {\n      accountSubscriptionPause {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditPauseEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionPause] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditPauseBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditPauseBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditPauseBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditPauseBase>\n    )\n  }\n\n  const accountSubscriptionPause = data.accountSubscriptionPause\n\n  return (\n    <AccountSubscriptionEditPauseBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date(accountSubscriptionPause.dateStart),\n          dateEnd: new Date(accountSubscriptionPause.dateEnd),\n          description: accountSubscriptionPause.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionPause({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.pauses.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditPauseForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditPauseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY = gql`\n  query AccountInstructorProfileQuery($id: ID!) {\n    accountInstructorProfiles(account:$id) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          account {\n            id\n          }\n          classes\n          appointments\n          events\n          role\n          education\n          bio\n          urlBio\n          urlWebsite   \n        }\n      }\n    }\n    account(id:$id) {\n      id\n      instructor\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_INSTRUCTOR_PROFILE = gql`\n  mutation UpdateAccountInstructorProfile($input:UpdateAccountInstructorProfileInput!) {\n    updateAccountInstructorProfile(input: $input) {\n      accountInstructorProfile {\n        id\n      }\n    }\n  }\n`\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA = Yup.object().shape({\n  classes: Yup.boolean(),  \n  appointments: Yup.boolean(),  \n  events: Yup.boolean(),  \n  role: Yup.string(),\n  education: Yup.string(),\n  bio: Yup.string(),\n  urlBio: Yup.string()\n    .url(t('yup.url')),\n  urlWebsite: Yup.string()\n    .url(t('yup.url')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nconst RelationsAccountInstructorProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"classes\" \n                  checked={values.classes} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.classes')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"classes\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"events\" \n                  checked={values.events} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.events')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"events\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"appointments\" \n                  checked={values.appointments} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.appointments')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"appointments\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.role')}>\n              <Field type=\"text\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.education')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"education\"\n              initialValue={values.education}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldTouched(\"education\", true)\n                setFieldValue(\"education\", e.target.getContent())\n              }}\n            />\n          <ErrorMessage name=\"education\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.bio')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"bio\"\n              initialValue={values.bio}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldTouched(\"bio\", true)\n                setFieldValue(\"bio\", e.target.getContent())\n              }}\n            />\n          <ErrorMessage name=\"bio\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.instructor_profile.url_bio')}>\n              <Field type=\"text\" \n                      name=\"urlBio\" \n                      className={(errors.urlBio) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"urlBio\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.instructor_profile.url_website')}>\n              <Field type=\"text\" \n                      name=\"urlWebsite\" \n                      className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountInstructorProfileForm))\n\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, UPDATE_ACCOUNT_INSTRUCTOR_PROFILE } from './queries'\nimport { ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport RelationsAccountProfileForm from \"./RelationsAccountInstructorProfileForm\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction RelationsAccountInstructorProfile({ t, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"instructor_profile\"\n  const { loading, error, data } = useQuery(GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, {\n    variables: { id: accountId }\n  })\n  const [updateAccountInstructorProfile] = useMutation(UPDATE_ACCOUNT_INSTRUCTOR_PROFILE)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const initialData = data.accountInstructorProfiles.edges[0].node\n\n  return (\n    <RelationsAccountProfileBase\n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            classes: initialData.classes, \n            appointments: initialData.appointments, \n            events: initialData.events, \n            role: initialData.role, \n            education: initialData.education, \n            bio: initialData.bio,\n            urlBio: initialData.urlBio,\n            urlWebsite: initialData.urlWebsite,\n          }}\n          validationSchema={ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateAccountInstructorProfile({ variables: {\n                input: {\n                  account: initialData.account.id,\n                  classes: values.classes, \n                  appointments: values.appointments, \n                  events: values.events, \n                  role: values.role, \n                  education: values.education, \n                  bio: values.bio,\n                  urlBio: values.urlBio,\n                  urlWebsite: values.urlWebsite,\n                }\n              }, refetchQueries: [\n                  // Refresh local cached results for this account instructor profile\n                  {query: GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, variables: {id: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.account.instructor_profile.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountProfileForm\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>    \n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\n\n// class RelationsAccountInstructorProfile extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization profile props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const account_id = match.params.account_id\n//     console.log(account_id)\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Query query={GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY} variables={{ id: account_id }} >\n//               {({ loading, error, data, refetch }) => {\n//                   // Loading\n//                   if (loading) return <p>{t('general.loading_with_dots')}</p>\n//                   // Error\n//                   if (error) {\n//                     console.log(error)\n//                     return <p>{t('general.error_sad_smiley')}</p>\n//                   }\n\n//                   console.log('query data')\n//                   console.log(data)\n                  \n//                   const account = data.account\n//                   const initialData = data.accountInstructorProfiles.edges[0].node\n//                   console.log(initialData)\n\n\n//                   return (\n//                     <div>\n//                       <Page.Header title={account.firstName + \" \" + account.lastName}>\n//                         <RelationsAccountsBack />\n//                       </Page.Header>\n//                       <Grid.Row>\n//                         <Grid.Col md={9}>\n//                         <Card>\n//                           <Card.Header>\n//                             <Card.Title>{t('relations.account.instructor_profile.title')}</Card.Title>\n//                             {console.log(match.params.account_id)}\n//                           </Card.Header>\n//                         <Mutation mutation={UPDATE_ACCOUNT_INSTRUCTOR_PROFILE}> \n//                          {(updateAccountInstructorProfile, { data }) => (\n//                           <Formik\n//                             initialValues={{ \n//                               classes: initialData.classes, \n//                               appointments: initialData.appointments, \n//                               events: initialData.events, \n//                               role: initialData.role, \n//                               education: initialData.education, \n//                               bio: initialData.bio,\n//                               urlBio: initialData.urlBio,\n//                               urlWebsite: initialData.urlWebsite,\n//                             }}\n//                             validationSchema={ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA}\n//                             onSubmit={(values, { setSubmitting }) => {\n//                                 console.log('submit values:')\n//                                 console.log(values)\n\n//                                 updateAccountInstructorProfile({ variables: {\n//                                   input: {\n//                                     account: initialData.account.id,\n//                                     classes: values.classes, \n//                                     appointments: values.appointments, \n//                                     events: values.events, \n//                                     role: values.role, \n//                                     education: values.education, \n//                                     bio: values.bio,\n//                                     urlBio: values.urlBio,\n//                                     urlWebsite: values.urlWebsite,\n//                                   }\n//                                 }, refetchQueries: [\n//                                     // Refresh local cached results for this account instructor profile\n//                                     {query: GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, variables: {id: account_id}}\n//                                 ]})\n//                                 .then(({ data }) => {\n//                                     console.log('got data', data)\n//                                     toast.success((t('relations.account.instructor_profile.toast_edit_success')), {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     setSubmitting(false)\n//                                   }).catch((error) => {\n//                                     toast.error((t('general.toast_server_error')) +  error, {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     console.log('there was an error sending the query', error)\n//                                     setSubmitting(false)\n//                                   })\n//                             }}\n//                             >\n//                             {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n//                               <RelationsAccountProfileForm\n//                                 isSubmitting={isSubmitting}\n//                                 setFieldTouched={setFieldTouched}\n//                                 setFieldValue={setFieldValue}\n//                                 errors={errors}\n//                                 values={values}\n//                               />\n//                             )}\n//                           </Formik>\n//                         )}\n//                       </Mutation>\n//                     </Card>\n//                     </Grid.Col>                                    \n//                     <Grid.Col md={3}>\n//                       <ProfileCardSmall user={account}/>\n//                       <ProfileMenu \n//                         activeLink='instructor_profile'\n//                         account_id={account_id}\n//                       /> \n//                     </Grid.Col>\n//                   </Grid.Row>\n//                 </div>\n//               )}}\n//             </Query>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(RelationsAccountInstructorProfile))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let search = localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SEARCH)\n  let showArchived = localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE)\n  \n  if (search) {\n    queryVars.name = search\n  }\n  if (showArchived === \"true\") {\n    queryVars.archived = true\n  } else {\n    queryVars.archived = false\n  }\n  \n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Page,\n    Grid,\n    Container,\n  } from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InputSearch from \"../../general/InputSearch\"\nimport { get_list_query_variables } from \"./tools\"\nimport ButtonAdd from '../../ui/ButtonAdd';\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nconst RelationsB2BBase = ({t, history, refetch, children }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"relations.title\")}>\n          <div className=\"page-options d-flex\">\n            <InputSearch \n              initialValueKey={CSLS.RELATIONS_BUSINESSES_SEARCH}\n              placeholder=\"Search...\"\n              onChange={(value) => {\n                console.log(value)\n                localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SEARCH, value)\n                refetch(get_list_query_variables())\n              }}\n            />\n            <ButtonAdd addUrl=\"/relations/b2b/add\" className='ml-2 '/>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n)\n\n\n  export default withTranslation()(withRouter(RelationsB2BBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_BUSINESSES_QUERY = gql`\n  query Businesses($before:String, $after:String, $name:String, $archived: Boolean!) {\n    businesses(first:15, before:$before, after:$after, b2b:true, name_Icontains:$name, archived:$archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          b2b\n          supplier\n          vip\n          name\n          address\n          postcode\n          city\n          country\n          phone\n          phone2\n          emailContact\n          emailBilling\n          registration\n          taxRegistration\n          mollieCustomerId\n        }\n      }\n    }\n  }\n`\n\nexport const GET_BUSINESS_QUERY = gql`\n  query Business($id: ID!) {\n    business(id:$id) {\n      id\n      archived\n      supplier\n      vip\n      name\n      address\n      postcode\n      city\n      country\n      phone\n      phone2\n      emailContact\n      emailBilling\n      registration\n      taxRegistration\n      mollieCustomerId\n    }\n  }\n`\n\nexport const UPDATE_BUSINESS = gql`\n  mutation UpdateBusiness($input: UpdateBusinessInput!) {\n    updateBusiness(input: $input) {\n      business {\n        id\n        archived\n      }\n    }\n  }\n`\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ContentCard from \"../../general/ContentCard\"\nimport RelationsB2BBase from \"./RelationsB2BBase\"\nimport { GET_BUSINESSES_QUERY, UPDATE_BUSINESS } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\n\n\nconst DELETE_BUSINESS = gql`\n  mutation DeleteBusiness($input: DeleteBusinessInput!) {\n    deleteBusiness(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction RelationsB2B({ t, history }) {\n  // Set some initial value for archived, if not found\n  if (!localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE)) {\n    localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false) \n  }\n\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_BUSINESSES_QUERY, { \n    variables: get_list_query_variables()\n  })\n  const [updateBusiness] = useMutation(UPDATE_BUSINESS)\n  const [deleteBusiness] = useMutation(DELETE_BUSINESS)\n\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard>\n        {t(\"general.loading_with_dots\")}\n      </ContentCard>\n    </RelationsB2BBase>\n  )\n  if (error) return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}>\n        <p>{t('relations.b2b.error_loading')}</p>\n      </ContentCard>\n    </RelationsB2BBase>\n  )\n\n  let businesses = data.businesses\n\n  // Empty list\n  if (!businesses.edges.length) { return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}\n                   headerContent={headerOptions}>\n        <p>\n          {(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? \n            t('relations.b2b.empty_archive') : \n            t(\"relations.b2b.empty_list\")}\n        </p>\n      </ContentCard>\n    </RelationsB2BBase>\n  )}\n\n  return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={businesses.pageInfo}\n                    onLoadMore={() => {\n                      fetchMore({\n                        variables: {\n                          after: businesses.pageInfo.endCursor\n                        },\n                        updateQuery: (previousResult, { fetchMoreResult }) => {\n                          const newEdges = fetchMoreResult.businesses.edges\n                          const pageInfo = fetchMoreResult.businesses.pageInfo \n\n                          return newEdges.length\n                            ? {\n                                // Put the new businesses at the end of the list and update `pageInfo`\n                                // so we have the new `endCursor` and `hasNextPage` values\n                                businesses: {\n                                  __typename: previousResult.businesses.__typename,\n                                  edges: [ ...previousResult.businesses.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {data.businesses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.vip) ? <span>\n                      <Badge color=\"warning\" className=\"mr-1\"><Icon name=\"star\"/> {t(\"general.vip\")}</Badge>\n                    </span> : null}\n                    {(node.supplier) ? <span>\n                      <Badge color=\"primary\" className=\"mr-1\">{t(\"general.supplier\")}</Badge>\n                    </span> : null}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/relations/b2b/${node.id}/edit`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    {/* Archive / restore buttons */}\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      href=\"\"\n                      onClick={() => {\n                        let id = node.id\n                        let show_archive\n                        if (localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") {\n                          show_archive = true\n                        } else {\n                          show_archive = false\n                        }\n\n                        updateBusiness({ variables: {\n                          input: {\n                            id,\n                            archived: !node.archived // invert, as we need the opposite from the list currently displayed\n                          }}, \n                          refetchQueries: [\n                        {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                        ]}).then(({ data }) => {\n                          toast.success(\n                            (!show_archive) ? t('relations.b2b.archived'): t('relations.b2b.restored'), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                      {\n                        (!node.archived) ?\n                          <Icon prefix=\"fa\" name=\"inbox\" /> :\n                          t(\"general.restore\")\n                      }\n                    </button>\n\n                  {/* Delete button shown when archived */}\n                    {\n                      (!node.archived) ? '' :\n                        <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"relations.b2b.delete_confirm_msg\"),\n                              msgDescription: <span><br /><br /><ul><li>{node.name}</li></ul></span>,\n                              msgSuccess: t('relations.b2b.deleted'),\n                              deleteFunction: deleteBusiness,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                              ]}\n                            })\n                          }}\n                        >\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                    }\n                    </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>  \n    </RelationsB2BBase>  \n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2B))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsB2BAddFrom = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.name')}>\n                <Field type=\"text\" \n                        name=\"name\" \n                        className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsB2BAddFrom))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport { GET_BUSINESSES_QUERY } from './queries'\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack';\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsB2BAddForm from \"./RelationB2BAddForm\"\n\n\nconst ADD_BUSINESS = gql`\n  mutation CreateBusiness($input:CreateBusinessInput!) {\n    createBusiness(input: $input) {\n      business {\n        id\n      }\n    }\n  }\n`\n\nconst returnUrl = \"/relations/b2b\"\n\nfunction RelationsB2BAdd({ t, history }) {\n  const [addBusiness] = useMutation(ADD_BUSINESS)\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('relations.title')} >\n            <div className='page-options d-flex'>\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('relations.b2b.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ name: '' }}\n                    // validationSchema={B2BADD_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        addBusiness({ variables: {\n                          input: {\n                            name: values.name,\n                            b2b: true\n                          }\n                        }, refetchQueries: [\n                            {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data)\n                            const businessId = data.createBusiness.business.id\n                            history.push(`/relations/b2b/${businessId}/edit`)\n                            toast.success((t('relations.b2b.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors }) => (\n                        <RelationsB2BAddForm\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          returnUrl={returnUrl}\n                        />\n                    )}\n                </Formik>\n            </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BAdd))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nfunction RelationsB2BEditMenu({t, businessId, activeLink}) {\n    return (\n      <List.Group transparent={true}>     \n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/relations/b2b/\" + businessId + \"/edit\"}\n            icon=\"home\"\n            active={(activeLink === 'edit')}\n        >\n            {t('general.edit')}\n        </List.GroupItem>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeinvoice\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/b2b/\" + businessId + \"/invoices\"}\n                icon=\"file-text\"\n                active={(activeLink === 'invoices')}\n                >\n            {t('general.invoices')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n  )\n}\n\nexport default withTranslation()(RelationsB2BEditMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport RelationsB2BEditMenu from './RelationsB2BEditMenu'\n\n\nfunction RelationsB2BEditBase({ \n  t, match, history, children, pageTitle=\"\", activeLink=\"\", returnUrl=\"/relations/b2b\", pageHeaderButtonList=\"\" \n}) {\n  const businessId = match.params.business_id\n  const titleB2B = t(\"relations.b2b.title\")\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={`${titleB2B} - ${pageTitle}`}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              { pageHeaderButtonList }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col> \n            <Grid.Col md={3}>\n              <RelationsB2BEditMenu businessId={businessId} activeLink={activeLink} />\n            </Grid.Col>                               \n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2BEditBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nfunction RelationsB2BEditForm({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"vip\" \n                  checked={values.vip} \n                />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.vip')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"vip\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"supplier\" \n                  checked={values.supplier} \n                />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.supplier')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"supplier\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.email_contact')}>\n              <Field type=\"text\" \n                      name=\"emailContact\" \n                      className={(errors.emailContact) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"emailContact\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.email_billing')}>\n              <Field type=\"text\" \n                      name=\"emailBilling\" \n                      className={(errors.emailBilling) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"emailBilling\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n          <Form.Group label={t('general.phone2')}>\n              <Field type=\"text\" \n                      name=\"phone2\" \n                      className={(errors.phone2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                      name=\"postcode\" \n                      className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                    name=\"country\" \n                    className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"country\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('finance.invoices.relation_company_registration')}>\n              <Field type=\"text\" \n                      name=\"registration\" \n                      className={(errors.registration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"registration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n          <Form.Group label={t('finance.invoices.relation_company_tax_registration')}>\n              <Field type=\"text\" \n                      name=\"taxRegistration\" \n                      className={(errors.taxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"taxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2BEditForm))\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_BUSINESSES_QUERY, GET_BUSINESS_QUERY, UPDATE_BUSINESS } from './queries'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsB2BEditBase from './RelationsB2BEditBase'\nimport RelationsB2BEditForm from \"./RelationsB2BEditForm\"\n\n// \n// import ProfileMenu from \"./ProfileMenu\"\n\nfunction RelationsB2BEdit({ t, match, history}) {\n  const businessId = match.params.business_id\n  const activeLink = 'edit'\n  const cardTitle = t('relations.b2b.title_edit')\n  const [updateBusiness] = useMutation(UPDATE_BUSINESS)\n  const { loading, error, data } = useQuery(GET_BUSINESS_QUERY, {\n    variables: {\n      id: businessId\n    }\n  })\n\n  // Loading\n  if (loading) return <RelationsB2BEditBase activeLink={activeLink}>\n      <Card title={cardTitle}>\n        <Card.Body><Dimmer active={true} loader={true} /></Card.Body>\n      </Card>\n    </RelationsB2BEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsB2BEditBase activeLink={activeLink}>\n      <Card title={cardTitle}>\n        <Card.Body>{t('general.error_sad_smiley')}</Card.Body>\n      </Card>\n    </RelationsB2BEditBase>\n  }\n\n  const initialData = data.business\n\n  return (\n    <RelationsB2BEditBase activeLink={activeLink} pageTitle={initialData.name}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            vip: initialData.vip,\n            supplier: initialData.supplier,\n            name: initialData.name,\n            phone: initialData.phone,\n            phone2: initialData.phone2,\n            address: initialData.address,\n            postcode: initialData.postcode,\n            city: initialData.city,\n            country: initialData.country,\n            emailBilling: initialData.emailBilling,\n            emailContact: initialData.emailContact,\n            registration: initialData.registration,\n            taxRegistration: initialData.taxRegistration\n          }}\n          // validationSchema={ACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let input_vars = {\n                id: businessId,\n                vip: values.vip,\n                supplier: values.supplier,\n                name: values.name,\n                phone: values.phone,\n                phone2: values.phone2,\n                address: values.address,\n                postcode: values.postcode,\n                city: values.city,\n                country: values.country,\n                emailBilling: values.emailBilling,\n                emailContact: values.emailContact,\n                registration: values.registration,\n                taxRegistration: values.taxRegistration\n              }\n\n              updateBusiness({ variables: {\n                input: input_vars\n              }, refetchQueries: [\n                  // Refetch list\n                  {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()},\n                  // Refresh local cached results for this account\n                  {query: GET_BUSINESS_QUERY, variables: {\"id\": businessId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.b2b.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsB2BEditForm\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </RelationsB2BEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: CostasiellaFinanceInvoiceStatusChoices, $business: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status, business: $business) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    business(id: $business) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String, $business: ID!) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    business(id: $business) {\n      id\n      name\n    }\n  }\n`\n\nexport const CREATE_B2B_INVOICE = gql`\n  mutation CreateFinanceInvoice($input: CreateFinanceInvoiceInput!) {\n    createFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport ContentCard from '../../../general/ContentCard';\nimport FinanceInvoicesList from '../../../finance/invoices/FinanceInvoicesList'\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\nimport { GET_INVOICES_QUERY } from './queries'\nimport RelationsB2BEditBase from '../RelationsB2BEditBase'\n\nfunction RelationsB2BInvoices({ t, match, location, history}) {\n  const businessId = match.params.business_id\n  const activeLink = 'invoices'\n  const cardTitle = t('finance.invoices.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_INVOICES_QUERY, {\n    variables: {\n      business: businessId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const pageHeaderButtonList = <ButtonAdd \n    className='ml-2'\n    addUrl={`/relations/b2b/${businessId}/invoices/add`} \n  />\n\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n\n  // Loading\n  if (loading) return <RelationsB2BEditBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>{t('general.loading_with_dots')}</Card.Body>\n      </Card>\n    </RelationsB2BEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsB2BEditBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>{t('general.error_sad_smiley')}</Card.Body>\n      </Card>\n    </RelationsB2BEditBase>\n  }\n\n  const business = data.business\n  const invoices = data.financeInvoices\n  \n  // Empty list\n  if (!invoices.edges.length) {\n    return (\n      <RelationsB2BEditBase activeLink={activeLink} pageTitle={business.name} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.b2b.invoices.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsB2BEditBase>\n    )\n  } \n\n  return (\n    <RelationsB2BEditBase activeLink={activeLink} pageTitle={business.name} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        hasCardBody={false}\n        pageInfo={invoices.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: invoices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeInvoices.edges\n              const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeInvoices: {\n                      __typename: previousResult.financeInvoices.__typename,\n                      edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceInvoicesList \n          invoices={invoices} \n          showColRelation={true}\n        />\n      </ContentCard>\n    </RelationsB2BEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BInvoices))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Card,\n  Form,\n} from \"tabler-react\";\n\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../ui/ButtonFormSubmit'\n\n\nconst B2BInvoiceAddForm = ({ t, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group label={t('general.finance_invoice_group')}>\n        <Field component=\"select\" \n              name=\"financeInvoiceGroup\" \n              className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          {/* <option value=\"\" key={v4()}>{t('general.please_select')}</option> */}\n          {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.summary')}>\n        <Field type=\"text\" \n                name=\"summary\" \n                className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit disabled={isSubmitting} />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(B2BInvoiceAddForm))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_B2B_INVOICE, GET_INVOICES_QUERY } from './queries'\nimport B2BInvoiceAddForm from './RelationsB2BInvoiceAddForm'\nimport RelationsB2BEditBase from '../RelationsB2BEditBase'\n\n\nfunction RelationsB2BInvoiceAdd({ t, match, history }) {\n  const businessId = match.params.business_id\n  const activeLink = \"invoices\"\n  const cardTitle = t('relations.b2b.invoices.title_add')\n  const returnUrl = `/relations/b2b/${businessId}/invoices`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY, {\n      variables: {\n        business: businessId\n      }\n    }\n  )\n  const [createInvoice] = useMutation(CREATE_B2B_INVOICE, {\n    // onCompleted = () => history.push('/finance/invoices/edit/')\n  }) \n\n  // Query\n  // Loading\n  if (loading) {\n    return <RelationsB2BEditBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loader={true} active={true} />\n          </Card.Body>\n        </Card>\n      </RelationsB2BEditBase>\n  }\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsB2BEditBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsB2BEditBase>\n  }\n  \n  const business = data.business\n  const financeInvoiceGroups = data.financeInvoiceGroups\n  const firstInvoiceGroup = financeInvoiceGroups && financeInvoiceGroups.edges && financeInvoiceGroups.edges[0].node.id\n\n\n  return (\n    <RelationsB2BEditBase activeLink={activeLink} pageTitle={business.name} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{\n            financeInvoiceGroup: firstInvoiceGroup,\n            summary: \"\"\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createInvoice({ variables: {\n              input: {\n                business: businessId, \n                financeInvoiceGroup: values.financeInvoiceGroup,\n                summary: values.summary\n              }\n            }, refetchQueries: [\n              {query: GET_INVOICES_QUERY, variables: {business: businessId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.b2b.invoices.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push('/finance/invoices/edit/' + data.createFinanceInvoice.financeInvoice.id)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <B2BInvoiceAddForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </B2BInvoiceAddForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsB2BEditBase>\n\n    // <SiteWrapper>\n    //   <div className=\"my-3 my-md-5\">\n    //     <Container>\n    //       <Page.Header title={account.firstName + \" \" + account.lastName} />\n    //       <Grid.Row>\n    //           <Grid.Col md={9}>\n                \n    //           </Grid.Col>\n    //           <Grid.Col md={3}>\n    //             <ProfileMenu \n    //               activeLink='invoices'\n    //               accountId={match.params.account_id}\n    //             />\n    //           </Grid.Col>\n    //         </Grid.Row>\n    //       </Container>\n    //   </div>\n    // </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BInvoiceAdd))\n","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass ScheduleHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule home props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t('general.manage')\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.title\")} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <Grid.Row>\n                  <HasPermissionWrapper\n                    resource=\"scheduleclass\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col xs={12} sm={6} md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.classes.title\")}</h5>\n                          {t(\"schedule.classes.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/classes\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper\n                    resource=\"scheduleevent\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col xs={12} sm={6}  md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.events.title\")}</h5>\n                          {t(\"schedule.events.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/events\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper\n                    resource=\"scheduleshift\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col xs={12} sm={6}  md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.shifts.title\")}</h5>\n                          {t(\"schedule.shifts.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/shifts\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  {/* <HasPermissionWrapper\n                    resource=\"scheduleappointment\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={3} lg={3}>\n                      <Link to='/schedule/appointments')}>\n                        <StampCard header={<small>{t('schedule.appointments.title')}</small>} footer={t('')} color=\"blue\" icon=\"calendar\" />\n                      </div>\n                    </Grid.Col>\n                  </HasPermissionWrapper> */}\n                </Grid.Row>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(ScheduleHome))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n} from \"tabler-react\"\n\nfunction ButtonListWeekChooser({ t, className, onClickPrevious=f=>f, onClickNext=f=>f, onClickCurrent=f=>f, showCurrent=true}) {\n  return (\n    <Button.List className={className}>\n      <Button \n        icon=\"chevron-left\"\n        color=\"secondary\"\n        onClick={ onClickPrevious }\n      />\n      { showCurrent && \n      <Button \n        icon=\"sunset\"\n        color=\"secondary\"\n        onClick={ onClickCurrent }\n      /> }\n      <Button \n        icon=\"chevron-right\"\n        color=\"secondary\"\n        onClick={ onClickNext }\n      />\n    </Button.List> \n  )\n}\n\nexport default withTranslation()(withRouter(ButtonListWeekChooser))","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nfunction ScheduleClassesFilter({ t, history, data, refetch }) {\n  let [location, setLocation] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION))\n  let [classtype, setClasstype] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE))\n  let [instructor, setInstructor] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_INSTRUCTOR))\n  let [level, setLevel] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL))\n\n  return (\n    <div className=\"mb-4\">\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Button\n            className=\"float-right\"\n            color=\"link\"\n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_INSTRUCTOR, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n              setLocation(\"\")\n              setInstructor(\"\")\n              setClasstype(\"\")\n              setLevel(\"\")\n              refetch(get_list_query_variables())\n            }}\n          >\n            {t(\"general.reset_filter\")}\n          </Button>\n          <h6 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h6>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12}>\n          {/* Locations */}\n          <select \n            className={selectClass}\n            value={location}\n            onChange={ (event) => {\n              setLocation(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_LOCATION,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_locations\")}</option>\n            {data.organizationLocations.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col xs={12}>\n          {/* Classtypes */}\n          <select \n            className={selectClass}\n            value={classtype}\n            onChange={ (event) => {\n              setClasstype(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_classtypes\")}</option>\n            {data.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col xs={12}>\n          {/* Instructors */}\n          <select \n            className={selectClass}\n            value={instructor}\n            onChange={ (event) => {\n              setInstructor(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_INSTRUCTOR,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_instructors\")}</option>\n            {data.instructors.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.fullName}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col xs={12}>\n          {/* Levels */}\n          <select \n            className={selectClass}\n            value={level}\n            onChange={ (event) => {\n              setLevel(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_LEVEL,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_levels\")}</option>\n            {data.organizationLevels.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n      </Grid.Row>\n    </div>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassesFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Page,\n  Grid,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport ButtonAdd from '../../ui/ButtonAdd';\nimport ButtonListWeekChooser from '../../ui/ButtonListWeekChooser';\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ScheduleClassesFilter from \"./ScheduleClassesFilter\"\n\nimport { \n  get_list_query_variables, \n} from './tools'\n\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleClassesBase ({ t, history, children, data, refetch }) {\n  function onClickPrevious() {\n    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).subtract(7, 'days')\n    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n    \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n    refetch(get_list_query_variables())\n  }\n\n  function onClickNext() {\n    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).add(7, 'days')\n    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n    \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n    refetch(get_list_query_variables())\n  }\n\n  function onClickCurrent() {\n    let currentWeekFrom = moment()\n    let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n    \n    refetch(get_list_query_variables())\n  }\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.classes.title\")}>\n            <div className=\"page-options d-flex\">\n              <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n                <Button \n                  icon=\"home\"\n                  tooltip=\"text\"\n                  className=\"mr-2\"\n                  color={\n                    ((localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY))) ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"location\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n                <Button \n                  icon=\"clock\"\n                  className=\"mr-2\"\n                  color={\n                    (localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"starttime\") ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"starttime\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <CSDatePicker \n                className=\"form-control schedule-list-csdatepicker mr-2\"\n                selected={new Date(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM))}\n                isClearable={false}\n                onChange={(date) => {\n                  let nextWeekFrom = moment(date)\n                  let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                  console.log(get_list_query_variables())\n\n                  refetch(get_list_query_variables())\n                }}\n                placeholderText={t('schedule.classes.go_to_date')}\n              />\n              <ButtonListWeekChooser \n                className=\"schedule-list-page-options-btn-list\"\n                onClickPrevious={onClickPrevious}\n                onClickNext={onClickNext}\n                onClickCurrent={onClickCurrent}\n              />\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"scheduleclass\">\n                <ButtonAdd addUrl={\"/schedule/classes/add\"} className=\"ml-2\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n          <Grid.Col md={12}>\n            {(data) ? \n              <ScheduleClassesFilter data={data} refetch={refetch} />\n            : \"\"}\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassesBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Badge,\n  Button,\n  Dropdown,\n  Icon,\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport { capitalize } from '../../../tools/string_tools'\nimport BadgePublic from '../../ui/BadgePublic'\nimport ScheduleClassesBase from './ScheduleClassesBase'\n\nimport { GET_CLASSES_QUERY } from \"./queries\"\nimport { \n  get_class_messages,\n  get_list_query_variables, \n  represent_class_status,\n  represent_instructor \n} from './tools'\n\nimport moment from 'moment'\n\n\nconst DELETE_SCHEDULE_CLASS = gql`\n  mutation DeleteScheduleClass($input: DeleteScheduleClassInput!) {\n    deleteScheduleClass(input: $input) {\n      ok\n    }\n  }\n`\n\n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div key={v4()} className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          {msgConfirm}\n          {msgDescription}\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deleteFunction(functionVariables)\n                .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success(\n                    msgSuccess, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error);\n                })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n        </div>\n      )\n    }\n  })\n}\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleClasses ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const {loading, error, data, refetch} = useQuery(GET_CLASSES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteScheduleClass] = useMutation(DELETE_SCHEDULE_CLASS)\n\n  if (loading) {\n    return (\n      <ScheduleClassesBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </ScheduleClassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleClassesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleClassesBase>\n    )\n  }\n\n  const classes = data.scheduleClasses\n       \n  // Empty list\n  if (!classes.length) { return (\n    <ScheduleClassesBase>\n      <p>\n        {t('schedule.classes.empty_list')}\n      </p>\n    </ScheduleClassesBase>\n  )} \n\n  return (\n    <ScheduleClassesBase data={data} refetch={refetch}>\n      { data.scheduleClasses.map(({ date, classes }) => (\n        <React.Fragment key={v4()}>\n          <h3>\n            {capitalize(moment(date).format(\"dddd\"))} {' '}\n            <small className=\"text-muted\">\n                  {moment(date).format(\"LL\")} \n            </small>\n          </h3>\n          {!(classes.length) ? <Card>\n              <Card.Body>\n                <h5>{t('schedule.classes.empty_list')} <i className=\"fa fa-beach\"/></h5>\n              </Card.Body>\n            </Card> \n          :\n            classes.map((\n              { scheduleItemId, \n                frequencyType,\n                date, \n                status,\n                holiday,\n                holidayName,\n                description,\n                account, \n                role,\n                account2,\n                role2,\n                organizationLocationRoom, \n                organizationClasstype, \n                organizationLevel,\n                timeStart, \n                timeEnd,\n                spaces,\n                countAttendingAndBooked,\n                displayPublic }) => (\n                  <Card key={v4()}>\n                    <Card.Body>\n                      <Grid.Row>\n                        <Grid.Col xs={9} sm={9} md={10}>\n                          <Grid.Row>\n                            <Grid.Col xs={12}>\n                              <h5>\n                                {represent_class_status(status)}\n                                <span className='mr-2'>\n                                {/* Class type */}\n                                {organizationClasstype.name} { ' ' }\n                                {/* Start & end time */}\n                                {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                                </span>\n                                {organizationLevel && <small className=\"text-muted\">\n                                  {organizationLevel.name}\n                                </small>}\n                              </h5>\n                            </Grid.Col>\n                          </Grid.Row>\n                          <Grid.Row>\n                            <Grid.Col xs={12}>\n                              {/* Instructor(s) */}\n                              { (account) ? \n                                  represent_instructor(account.fullName, role) : \n                                  <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                              } <br />\n                              <small className=\"text-muted\">\n                                {(account2) ? represent_instructor(account2.fullName, role2) : \"\"}\n                              </small>\n                            </Grid.Col>\n                            <Grid.Col xs={12}>\n                              {/* Location */}\n                              <Icon name=\"home\" /> {organizationLocationRoom.organizationLocation.name} \n                              <small className=\"text-muted\"> | {organizationLocationRoom.name}</small>\n                            </Grid.Col>\n                          </Grid.Row>\n                        </Grid.Col>\n                        <Grid.Col xs={3} sm={3} md={2}>\n                          <Dropdown\n                            key={v4()}\n                            className=\"float-right\"\n                            type=\"link\"\n                            position=\"left\"\n                            toggle={false}\n                            // color=\"secondary\"\n                            // triggerClassName=\"btn btn-pill btn-outline-primary btn-sm \"\n                            triggerContent={                                \n                              <Button \n                                outline\n                                color=\"primary\"\n                                size=\"sm\"\n                              > \n                                <span className=\"d-xs-none\">{t(\"general.manage\")}</span>\n                                <span className=\"d-sm-none d-md-none d-lg-none d-xl-none\"><Icon name=\"more-vertical\" /></span>\n                              </Button>\n                            }\n                            items={[\n                              <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                                <Link to={'/schedule/classes/class/attendance/' + scheduleItemId + '/' + date}>\n                                  <Dropdown.Item\n                                    key={v4()}\n                                    icon=\"check-circle\"\n                                  >\n                                      {t(\"general.attendance\")}\n                                  </Dropdown.Item>\n                                </Link>\n                              </HasPermissionWrapper>,\n                              <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                                <Link to={'/schedule/classes/class/attendance_chart/' + scheduleItemId + '/' + date}>\n                                  <Dropdown.Item\n                                    key={v4()}\n                                    icon=\"bar-chart-2\">\n                                      {t(\"schedule.classes.class.attendance_chart.title\")}\n                                  </Dropdown.Item>\n                                </Link>\n                              </HasPermissionWrapper>,\n                              <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemweeklyotc\">\n                                <Link to={'/schedule/classes/class/edit/' + scheduleItemId + '/' + date}>\n                                  <Dropdown.Item\n                                    key={v4()}\n                                    icon=\"edit-3\"\n                                  >\n                                    {t(\"general.edit\")}\n                                  </Dropdown.Item>\n                                </Link>\n                              </HasPermissionWrapper>,\n                              <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleclass\">\n                                <Dropdown.ItemDivider key={v4()} />\n                                <Link to={'/schedule/classes/all/edit/' + scheduleItemId}>\n                                  <Dropdown.Item\n                                    key={v4()}\n                                    badge={t('schedule.classes.all_classes_in_series')}\n                                    badgeType=\"secondary\"\n                                    icon=\"edit-3\"\n                                  >\n                                      {t(\"general.edit\")}\n                                  </Dropdown.Item>\n                                </Link>\n                              </HasPermissionWrapper>,\n                              <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleclass\">\n                                <Dropdown.ItemDivider key={v4()} />\n                                <span className=\"text-red\">\n                                <Dropdown.Item\n                                  key={v4()}\n                                  badge={t('schedule.classes.all_classes_in_series')}\n                                  badgeType=\"danger\"\n                                  icon=\"trash-2\"\n                                  onClick={() => {\n                                    confirm_delete({\n                                      t: t,\n                                      msgConfirm: t(\"schedule.classes.delete_confirm_msg\"),\n                                      msgDescription: <p key={v4()}>\n                                        {moment(date + ' ' + timeStart).format('LT')} {' - '}\n                                        {moment(date + ' ' + timeEnd).format('LT')} {' '} @ {' '}\n                                        {organizationLocationRoom.organizationLocation.name} {' '}\n                                        {organizationLocationRoom.name}\n                                        {organizationClasstype.Name}\n                                        </p>,\n                                      msgSuccess: t('schedule.classes.deleted'),\n                                      deleteFunction: deleteScheduleClass,\n                                      functionVariables: { variables: {\n                                        input: {\n                                          id: scheduleItemId\n                                        }\n                                      }, refetchQueries: [\n                                        { query: GET_CLASSES_QUERY, variables: get_list_query_variables() }\n                                      ]}\n                                    })\n                                  }}>\n                                {t(\"general.delete\")}\n                                </Dropdown.Item>\n                                </span>\n                              </HasPermissionWrapper>\n                            ]}\n                            />\n                        </Grid.Col>\n                      </Grid.Row>\n                      <Grid.Row>\n                        <Grid.Col xs={9} sm={9} md={10}>\n                          <div className=\"mt-1\">\n                            <BadgePublic className=\"mr-2\" isPublic={displayPublic} />\n                            {(frequencyType === 'SPECIFIC') ? \n                              <Badge color=\"primary\" className=\"mr-2\">{t('general.once')}</Badge> : \n                              null } \n                            {(frequencyType === 'LAST_WEEKDAY_OF_MONTH') ? \n                              <Badge color=\"success\" className=\"mr-2\">{t('general.monthly')}</Badge> : \n                              null } \n                            {(status === \"CANCELLED\") ? \n                              <Badge color=\"warning\" className=\"mr-2\">{t('general.cancelled')}</Badge> : \n                              null } \n                              <small className=\"text-muted\"><br />{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                          </div>\n                        </Grid.Col>\n                        <Grid.Col xs={3} sm={3} md={2}>\n                          {/* Attendance */}\n                          <HasPermissionWrapper permission=\"view\" resource=\"scheduleitemattendance\">\n                            <Link to={'/schedule/classes/class/attendance/' + scheduleItemId + '/' + date}>\n                              <small className='float-right mt-1'><Icon name=\"users\" /> {countAttendingAndBooked}/{spaces}</small>\n                            </Link>\n                          </HasPermissionWrapper>\n                        </Grid.Col>\n                      </Grid.Row>\n                    </Card.Body>\n                  </Card>\n                )\n            )}\n        </React.Fragment >\n      ))}\n    </ScheduleClassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClasses))\n\n//     <SiteWrapper>\n//       <div className=\"my-3 my-md-5\">\n//         <Query query={GET_CLASSES_QUERY} variables={get_list_query_variables()}>\n//           {({ loading, error, data, refetch }) => {\n//             // Loading\n//             if (loading) return (\n//               <Container>\n//                 <p>{t('general.loading_with_dots')}</p>\n//               </Container>\n//             )\n//             // Error\n//             if (error) {\n//               console.log(error)\n//               return (\n//                 <Container>\n//                   <p>{t('general.error_sad_smiley')}</p>\n//                 </Container>\n//               )\n//             }\n//             const headerOptions = <Card.Options>\n//               {/* <Button color={(!archived) ? 'primary': 'secondary'}  \n//                       size=\"sm\"\n//                       onClick={() => {archived=false; refetch({archived});}}>\n//                 {t('general.current')}\n//               </Button>\n//               <Button color={(archived) ? 'primary': 'secondary'} \n//                       size=\"sm\" \n//                       className=\"ml-2\" \n//                       onClick={() => {archived=true; refetch({archived});}}>\n//                 {t('general.archive')}\n//               </Button> */}\n//             </Card.Options>\n            \n//             // Empty list\n//             if (!data.scheduleClasses.length) { return (\n//               <ContentCard cardTitle={t('schedule.classes.title')}\n//                             headerContent={headerOptions}\n//                             hasCardBody={true}>\n//                 <p>\n//                   {t('schedule.classes.empty_list')}\n//                 </p>\n//               </ContentCard>\n//             )} else {   \n\n//             console.log(data)\n//             // Life's good! :)\n//             return (\n//               <Container>\n//                 <Page.Header title={t(\"schedule.title\")}>\n//                   <div className=\"page-options d-flex\">\n//                     <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n//                       <Button \n//                         icon=\"home\"\n//                         tooltip=\"text\"\n//                         className=\"mr-2\"\n//                         color={\n//                           ((localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY))) ?\n//                           \"azure\" : \"secondary\"\n//                         }\n//                         onClick={() => {\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"location\")\n//                           refetch(get_list_query_variables())\n//                         }}\n//                       />\n//                     </span>\n//                     <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n//                       <Button \n//                         icon=\"clock\"\n//                         className=\"mr-2\"\n//                         color={\n//                           (localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"starttime\") ?\n//                           \"azure\" : \"secondary\"\n//                         }\n//                         onClick={() => {\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"starttime\")\n//                           refetch(get_list_query_variables())\n//                         }}\n//                       />\n//                     </span>\n//                     <CSDatePicker \n//                       className=\"form-control schedule-list-csdatepicker mr-2\"\n//                       selected={new Date(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM))}\n//                       isClearable={false}\n//                       onChange={(date) => {\n//                         let nextWeekFrom = moment(date)\n//                         let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                         console.log(get_list_query_variables())\n\n//                         refetch(get_list_query_variables())\n//                       }}\n//                       placeholderText={t('schedule.classes.go_to_date')}\n//                     />\n//                     <Button.List className=\"schedule-list-page-options-btn-list\">\n//                       <Button \n//                         icon=\"chevron-left\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).subtract(7, 'days')\n//                           let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                          \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                           refetch(get_list_query_variables())\n//                       }} />\n//                       <Button \n//                         icon=\"sunset\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let currentWeekFrom = moment()\n//                           let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                          \n//                           refetch(get_list_query_variables())\n//                       }} />\n//                       <Button \n//                         icon=\"chevron-right\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).add(7, 'days')\n//                           let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                          \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                           refetch(get_list_query_variables())\n//                       }} />\n//                     </Button.List> \n//                   </div>\n//                 </Page.Header>\n//                 <Grid.Row>\n//                   <Grid.Col md={9}>\n//                     {\n                      \n//                       ))}\n//                 </Grid.Col>\n//                 <Grid.Col md={3}>\n//                   <HasPermissionWrapper permission=\"add\"\n//                                         resource=\"scheduleclass\">\n//                     <Button color=\"primary btn-block mb-1\"\n//                             onClick={() => history.push(\"/schedule/classes/add\")}>\n//                       <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.add')}\n//                     </Button>\n//                   </HasPermissionWrapper>\n//                   <div>\n//                     <Button\n//                       className=\"pull-right\"\n//                       color=\"link\"\n//                       size=\"sm\"\n//                       onClick={() => {\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n//                         refetch(get_list_query_variables())\n//                       }}\n//                     >\n//                       {t(\"general.clear\")}\n//                     </Button>\n//                   </div>\n//                   <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5>\n//                   <ScheduleClassesFilter data={data} refetch={refetch} />\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         )}}}\n//         </Query>\n//       </div>\n//     </SiteWrapper>\n//   )\n// }\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASS_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    organizationClasstype: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    spaces: Yup.number()\n      .required(t('yup.field_required')),\n    walkInSpaces: Yup.number()\n      .required(t('yup.field_required')),\n    enrollmentSpaces: Yup.number()\n      .required(t('yup.field_required')),\n  })\n","import React, { useContext } from 'react'\nimport DatePicker from \"react-datepicker\"\nimport { withTranslation } from 'react-i18next'\n\nimport AppSettingsContext from '../context/AppSettingsContext'\n\nfunction CSTimePicker({t, selected, onChange=f=>f, onBlur=f=>f, className=\"form-control\", clearable=true, placeholderText=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  return (\n    <DatePicker \n      dateFormat={timeFormat}\n      selected={selected}\n      placeholderText={(placeholderText) ? placeholderText : t('datepicker.placeholder_time')}\n      isClearable={clearable}\n      showTimeSelect\n      showTimeSelectOnly\n      timeIntervals={15}\n      timeCaption={t(\"general.time\")}\n      className={className}\n      dropdownMode=\"select\"\n      onChange={(date) => onChange(date)}\n      onBlur={() => onBlur()}\n    />\n  )\n}\n\nexport default withTranslation()(CSTimePicker)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleClassForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.classes.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />  \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"infoMailEnabled\" \n                    checked={values.infoMailEnabled} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.classes.info_mail_enabled')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"infoMailEnabled\" component=\"div\" />  \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('schedule.classes.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.classes.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.classes.select_weekly')}</option>\n            <option value=\"LAST_WEEKDAY_OF_MONTH\" key={v4()}>{t('schedule.classes.select_last_weekday_of_month')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.classes.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.level')}>\n              <Field component=\"select\" \n                    name=\"organizationLevel\" \n                    className={(errors.organizationLevels) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"\")}</option>\n                {inputData.organizationLevels.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLevels\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.class')}>\n          <Field component=\"select\" \n                name=\"organizationClasstype\" \n                className={(errors.organizationClasstype) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n            {inputData.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationClasstype\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces')}>\n              <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_walk_in')}>\n              <Field type=\"text\" \n                    name=\"walkInSpaces\" \n                    className={(errors.walkInSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"walkInSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_enrollments')}>\n              <Field type=\"text\" \n                    name=\"enrollmentSpaces\" \n                    className={(errors.enrollmentSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"enrollmentSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.info_mail')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"infoMailContent\"\n              initialValue={values.infoMailContent}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"infoMailContent\", e.target.getContent())\n                setFieldTouched(\"infoMailContent\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction ScheduleClassAddBase({t, children}) {\n  const returnUrl = \"/schedule/classes\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"general.classes\")}>\n            <div className='page-options d-flex'>\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAddBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_CLASS } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { CLASS_SCHEMA } from './yupSchema'\nimport ScheduleClassForm from './ScheduleClassForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\nimport ScheduleClassAddBase from './ScheduleClassAddBase'\n\n\nfunction ScheduleClassAdd({t, history}) {\n  const cardTitle = t('schedule.classes.title_add')\n  const returnUrl = \"/schedule/classes\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleClass ] = useMutation(CREATE_CLASS)\n  \n\n  if (loading) return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleClassAddBase>\n  )\n\n  if (error) return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleClassAddBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            frequencyType: \"WEEKLY\",\n            frequencyInterval: 1,\n            organizationLocationRoom: \"\",\n            organizationClasstype: \"\",\n            organizationLevel: \"\",\n            dateStart: new Date(),\n            timeStart: new Date(),\n            timeEnd: new Date(),\n            spaces: \"\",\n            walkInSpaces: \"\",\n            enrollmentSpaces: 0\n          }}\n          validationSchema={CLASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              \n              createScheduleClass({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval && parseInt(frequencyInterval),\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationClasstype: values.organizationClasstype,\n                  organizationLevel: values.organizationLevel,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                  spaces: parseInt(values.spaces),\n                  walkInSpaces: parseInt(values.walkInSpaces),\n                  enrollmentSpaces: parseInt(values.enrollmentSpaces),\n                  infoMailContent: values.infoMailContent,\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  const classId = data.createScheduleClass.scheduleItem.id\n                  history.push(`/schedule/classes/all/edit/${classId}`)\n                  toast.success((t('schedule.classes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                <ScheduleClassForm\n                  inputData={inputData}\n                  isSubmitting={isSubmitting}\n                  setFieldValue={setFieldValue}\n                  setFieldTouched={setFieldTouched}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  returnUrl={returnUrl}\n                >\n                </ScheduleClassForm>\n              )\n           }\n        </Formik>\n      </Card>      \n    </ScheduleClassAddBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAdd))","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_CLASS = gql`\nmutation UpdateScheduleClass($input:UpdateScheduleClassInput!) {\n  updateScheduleClass(input: $input) {\n    scheduleItem {\n      id\n    }\n  }\n}\n`","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nconst ClassEditMenu = ({ t, activeLink, classId }) => (\n    <List.Group transparent={true}>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/schedule/classes/all/edit/\" + classId}\n            icon=\"edit-3\"\n            active={activeLink === 'edit'}\n            >\n            {t('general.edit')}\n        </List.GroupItem>\n        <HasPermissionWrapper \n            resource=\"scheduleitemaccount\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/instructors/\" + classId}\n              icon=\"users\"\n              active={activeLink === 'instructors'}\n              >\n              {t('general.instructors')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemenrollment\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/enrollments/\" + classId}\n              icon=\"check-square\"\n              active={activeLink === 'enrollments'}\n              >\n              {t('general.enrollments')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemprice\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/prices/\" + classId}\n              icon=\"copy\"\n              active={activeLink === 'prices'}\n              >\n              {t('schedule.classes.prices.title')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemorganizationsubscriptiongroup\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/subscriptions/\" + classId}\n              icon=\"edit\"\n              active={activeLink === 'subscriptions'}\n              >\n              {t('general.subscriptions')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemorganizationclasspassgroup\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/classpasses/\" + classId}\n              icon=\"credit-card\"\n              active={activeLink === 'classpasses'}\n              >\n              {t('general.classpasses')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n);\n\nexport default withTranslation()(ClassEditMenu)\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ClassEditMenu from './ClassEditMenu'\n\n\nfunction ClassEditBaseBase({t, match, children, subTitle=\"\", cardTitle=\"\", defaultCard=true, menuActiveLink=\"\", pageHeaderButtonList=\"\"}) {\n  const classId = match.params.class_id\n  \n  return (\n    <SiteWrapper>\n      <Container>\n        <Page.Header \n          title={t(\"schedule.title\")} \n          subTitle={subTitle}\n        >\n          <div className='page-options d-flex'>\n            {pageHeaderButtonList}\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={9}>\n            {(!defaultCard) ? children :\n              <Card title={cardTitle}>\n                {children}\n              </Card>\n            }\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={3}>\n            <ClassEditMenu activeLink={menuActiveLink} classId={classId}/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ClassEditBaseBase))","import moment from 'moment'\n\nimport { getWeekdayNames } from '../../../../tools/date_tools'\n\nexport function class_edit_all_subtitle({t, location, locationRoom, classtype, starttime, dateStart}) {\n  const weekdayNames = getWeekdayNames(t)\n  const isoWeekday = moment(dateStart).isoWeekday()\n  const weekdayName = weekdayNames[isoWeekday-1]\n\n  // return t('general.class') + ': ' + location + ' (' + locationRoom + ') - ' + classtype + ' @ ' +  moment(starttime).format('LT')\n  return t('general.class') + ': ' + weekdayName + ' ' + moment(starttime).format('LT') + ' - ' + classtype + ' - ' + location + ' [' + locationRoom + ']'\n}\n\nexport function represent_instructor_role(t, role) {\n  console.log(role)\n  switch (role) {\n    case \"SUB\":\n      return t('schedule.classes.instructor_roles.sub')\n    case \"ASSISTANT\":\n      return t('schedule.classes.instructor_roles.assistant')\n    case \"KARMA\":\n      return t('schedule.classes.instructor_roles.karma')\n    default:\n      return \"\"\n  }\n}\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_CLASS_QUERY } from \"../queries\"\n\nimport ClassEditBaseBase from './ClassEditBaseBase'\nimport { class_edit_all_subtitle } from \"./tools\"\n\n\nfunction ClassEditBase({t, match, children, menuActiveLink=\"\", defaultCard=true, pageHeaderButtonList=\"\", cardTitle=\"\"}) {\n  const classId = match.params.class_id\n  const { loading, error, data } = useQuery(GET_CLASS_QUERY, { variables: {\n    id: classId\n  }})\n\n  if (!cardTitle) {\n    cardTitle = t('schedule.classes.title_edit')\n  }\n\n  if (loading) return (\n    <ClassEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ClassEditBaseBase>\n  )\n\n  if (error) return (\n    <ClassEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      {console.log(error)}\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBaseBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const subTitle = class_edit_all_subtitle({\n    t: t,\n    location: initialValues.organizationLocationRoom.organizationLocation.name,\n    locationRoom: initialValues.organizationLocationRoom.name,\n    classtype: initialValues.organizationClasstype.name,\n    starttime: initialTimeStart,\n    dateStart: initialValues.dateStart\n  })\n\n  return (\n    <ClassEditBaseBase \n      subTitle={subTitle}\n      cardTitle={cardTitle}\n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={defaultCard}\n      menuActiveLink={menuActiveLink}\n    >\n      {children}\n    </ClassEditBaseBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(ClassEditBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSES_QUERY, GET_CLASS_QUERY } from '../../queries'\nimport { UPDATE_CLASS } from './queries'\n\nimport { get_list_query_variables } from '../../tools'\nimport { CLASS_SCHEMA } from '../../yupSchema'\nimport ScheduleClassForm from '../../ScheduleClassForm'\nimport ButtonBack from '../../../../ui/ButtonBack';\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ClassEditBase from '../ClassEditBase'\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleClassEditAll({t, match}) {\n  const id = match.params.class_id\n  const menuActiveLink = \"edit\"\n  const returnUrl = \"/schedule/classes\"\n  const cardTitle = t('schedule.classes.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASS_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleClass ] = useMutation(UPDATE_CLASS)\n\n  const pageHeaderButtonList = <ButtonBack returnUrl=\"/schedule/classes\" />\n\n  if (loading) return (\n    <ClassEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialValues = data.scheduleItem\n\n  let initialLevelID = \"\"\n  if (initialValues.organizationLevel) {\n    initialLevelID = initialValues.organizationLevel.id\n  }\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialValues.dateStart) {\n    dateStart = new Date(initialValues.dateStart)\n  }\n  if (initialValues.dateEnd) {\n    dateEnd = new Date(initialValues.dateEnd)\n  }\n\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink}\n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialValues.displayPublic,\n            frequencyType: initialValues.frequencyType,\n            frequencyInterval: initialValues.frequencyInterval,\n            organizationLocationRoom: initialValues.organizationLocationRoom.id,\n            organizationClasstype: initialValues.organizationClasstype.id,\n            organizationLevel: initialLevelID,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n            timeStart: initialTimeStart,\n            timeEnd: initialTimeEnd,\n            spaces: initialValues.spaces,\n            walkInSpaces: initialValues.walkInSpaces,\n            enrollmentSpaces: initialValues.enrollmentSpaces,\n            infoMailEnabled: initialValues.infoMailEnabled,\n            infoMailContent: initialValues.infoMailContent\n          }}\n          validationSchema={CLASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }  \n\n              updateScheduleClass({ variables: {\n                input: {\n                  id: id,\n                  displayPublic: values.displayPublic,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationClasstype: values.organizationClasstype,\n                  organizationLevel: values.organizationLevel,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                  spaces: parseInt(values.spaces),\n                  walkInSpaces: parseInt(values.walkInSpaces),\n                  enrollmentSpaces: parseInt(values.enrollmentSpaces),\n                  infoMailEnabled: values.infoMailEnabled,\n                  infoMailContent: values.infoMailContent,\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.classes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n            <ScheduleClassForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              touched={touched}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>      \n      </Card>\n    </ClassEditBase>   \n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEditAll))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\nconst ClassEditBack = ({ t, className }) => (\n  <ButtonBack returnUrl=\"/schedule/classes\" className={className} />\n)\n\nexport default withTranslation()(ClassEditBack)","import React, { useState, useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\nimport CSLS from '../../../../../tools/cs_local_storage'\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ScheduleClassEnrollmentDelete from \"./ScheduleClassEnrollmentDelete\"\nimport ButtonAdd from '../../../../ui/ButtonAdd'\nimport ButtonEdit from '../../../../ui/ButtonEdit'\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassEnrollments({ t, match, location }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const [showCurrent, setShowCurrent] = useState(true)\n  const scheduleItemId = match.params.class_id\n  const cardTitle = t('general.enrollments')\n  const menuActiveLink = \"enrollments\"\n  \n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, {\n      variables: getEnrollmentsListQueryVariables(scheduleItemId)\n    }\n  )\n\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_RETURN, location.pathname)\n\n//   const headerOptions = <Card.Options>\n//   <div className='float-right'>\n//     <Badge color=\"success\">{scheduleClass.countAttending} {t(\"schedule.classes.class.attendance.attending\")}</Badge> {\" \"}\n//     <Badge color=\"primary\">{scheduleClass.countBooked} {t(\"schedule.classes.class.attendance.booked\")}</Badge> {\" \"}\n//     {/* <Badge color=\"info\">{t(\"general.spaces\")}: {scheduleClass.spaces}</Badge>  */}\n//   </div>\n// </Card.Options>\n\n  const ButtonAddEnrollment = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemenrollment\">\n    <ButtonAdd addUrl={`/schedule/classes/all/enrollments/${scheduleItemId}/search`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    {ButtonAddEnrollment}\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.enrollments.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )  \n\n  console.log(data)\n  const scheduleItem = data.scheduleItem\n  const enrollments = scheduleItem.enrollments\n  const countEnrollments = enrollments.edges.length\n\n  const headerOptions = <Card.Options>\n    <div className='mr-2'>\n      <Badge color=\"success\">{countEnrollments} {t(\"schedule.classes.enrollments.enrolled\")}</Badge> {\" \"}\n      <Badge color=\"default\">{scheduleItem.enrollmentSpaces - countEnrollments} {t(\"schedule.classes.enrollments.available_enrollment_spaces\")}</Badge> {\" \"}\n    </div>\n    <Button color={(showCurrent) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              setShowCurrent(true); \n              let queryVars = getEnrollmentsListQueryVariables(scheduleItemId)\n              console.log(queryVars)\n              refetch(queryVars); \n            }}\n    >\n      {t('general.current')}\n    </Button>\n    <Button color={(!showCurrent) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              setShowCurrent(false); \n              let queryVars = getEnrollmentsListQueryVariables(scheduleItemId, true)\n              console.log(queryVars)\n              refetch(queryVars); \n            }}\n    >\n      {t('general.ended')}\n    </Button>\n  </Card.Options>\n\n  // Empty list\n  if (!enrollments.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <p>{t('schedule.classes.enrollments.empty_list')}</p>\n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n  \n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={enrollments.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: enrollments.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.scheduleItem.enrollments.edges\n                        const pageInfo = fetchMoreResult.scheduleItem.enrollments.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryEnrollmentsData: {\n                                scheduleItemEnrollments: {\n                                  __typename: previousResult.scheduleItem.enrollments.__typename,\n                                  edges: [ ...previousResult.scheduleItem.enrollments.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.subscription')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {enrollments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    {node.accountSubscription.account.fullName}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.accountSubscription.organizationSubscription.name}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\">\n                    {/* Edit */}\n                    <ButtonEdit editUrl={`/schedule/classes/all/enrollments/${scheduleItemId}/edit/${node.id}`} />\n                    {/* Delete */}\n                    <ScheduleClassEnrollmentDelete node={node} />\n                    {/* <ScheduleClassEnrollmentsDelete node={node} /> */}                            \n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollments))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query Accounts(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $instructor: Boolean,\n    $employee: Boolean\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true,\n      instructor: $instructor,\n      employee: $employee\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n  }\n`","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport { getAccountsQueryVariables } from \"./tools\"\n\nimport CSLS from \"../../../../../tools/cs_local_storage\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ButtonBack from '../../../../ui/ButtonBack'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY } from \"../../../../../queries/accounts/account_search_queries\"\n\n\nfunction ScheduleClassEnrollmentsSearch({ t, match, history }) {\n  let [searchName, setSearchName] = useState(localStorage.getItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH))\n  \n  const scheduleItemId = match.params.class_id\n  const cardTitle = t('schedule.classes.enrollments.search.title')\n  const menuActiveLink = \"enrollments\"\n  \n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_ACCOUNTS_QUERY, {\n      variables: getAccountsQueryVariables(searchName)\n    }\n  )\n\n  const headerOptions = <Card.Options>\n    <InputSearch \n      initialValueKey={CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH}\n      placeholder=\"Search...\"\n      onChange={(value) => {\n        localStorage.setItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH, value)\n        setSearchName(value)\n        refetch(getAccountsQueryVariables(value))\n      }}\n    />\n  </Card.Options>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ButtonBack returnUrl={`/schedule/classes/all/enrollments/${scheduleItemId}`} />\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Alert type=\"danger\">{t('schedule.classes.enrollments.search.error_loading')}</Alert>\n      </Card.Body>\n    </ClassEditBase>\n  )  \n\n  console.log(data)\n  const accounts = data.accounts\n\n  // No search name entered\n  if (!searchName) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"primary\" icon=\"info\">\n            {t('schedule.classes.enrollments.search.search_to_find_customers_to_enroll')}\n          </Alert> \n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  // Empty list / No search results\n  if (!accounts.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"secondary\">{t('schedule.classes.enrollments.search.empty_list')}</Alert>\n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  \n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={accounts.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryEnrollmentsData: {\n                                scheduleItemEnrollments: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <Link to={`/schedule/classes/all/enrollments/${scheduleItemId}/options/${node.id}`}>\n                    <Button color=\"secondary\">\n                      {t(\"general.enroll\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  </Link>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentsSearch))\n","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Dimmer } from 'tabler-react';\n\nimport CSLS from '../../../../../tools/cs_local_storage';\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY, GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, CREATE_SCHEDULE_ITEM_ENROLLMENT } from './queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from './yupSchema'\nimport ScheduleClassEnrollmentForm from './ScheduleClassEnrollmentForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport ButtonBack from '../../../../ui/ButtonBack';\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\n\nfunction ScheduleClassEnrollmentAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const classId = match.params.class_id\n  const accountSubscriptionId = match.params.account_subscription_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}/options/${accountId}`\n  const nextUrl = localStorage.getItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_RETURN) || `/schedule/classes/all/enrollments/${classId}`\n  let cardTitle = t('schedule.classes.enrollments.title_add')\n  const menuActiveLink = \"enrollments\" \n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: { id: accountSubscriptionId}\n  })\n  const [addScheduleClassEnrollment] = useMutation(CREATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer loader={true} active={true} />\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  const account = data.accountSubscription.account\n  const accountSubscription = data.accountSubscription\n  const using = t(\"general.using\")\n  cardTitle = `${cardTitle} ${account.fullName} ${using} ${accountSubscription.organizationSubscription.name}`\n  \n  // TODO: Add account subscription to sent values\n  \n  return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          price: \"\", \n          dateStart: new Date() ,\n        }}\n        validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassEnrollment({ variables: {\n              input: {\n                scheduleItem: classId,\n                accountSubscription: accountSubscriptionId,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, variables: getEnrollmentsListQueryVariables(classId)},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(nextUrl)\n                toast.success((t('schedule.classes.enrollments.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassEnrollmentForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleClassEnrollmentBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={ \"/schedule/classes/all/enrollments/\" + classId } />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentBack))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, UPDATE_SCHEDULE_ITEM_ENROLLMENT } from './queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from './yupSchema'\nimport ScheduleClassEnrollmentForm from './ScheduleClassEnrollmentForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassEnrollmentBack from \"./ScheduleClassEnrollmentBack\"\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\n\nfunction ScheduleClassEnrollmentEdit({ t, match, history }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}`\n  let cardTitle = t('schedule.classes.enrollments.title_edit')\n  const menuActiveLink = \"enrollments\"\n  const pageHeaderButtonList = <ScheduleClassEnrollmentBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassEnrollment] = useMutation(UPDATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const using = t(\"general.using\")\n  cardTitle = `\n    ${cardTitle}  \n    ${data.scheduleItemEnrollment.accountSubscription.account.fullName} \n    ${using} \n    ${data.scheduleItemEnrollment.accountSubscription.organizationSubscription.name}\n  `\n\n  const scheduleItemEnrollment = data.scheduleItemEnrollment\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (scheduleItemEnrollment.dateStart) {\n    dateStart = new Date(scheduleItemEnrollment.dateStart)\n  }\n  \n  let dateEnd = null\n  if (scheduleItemEnrollment.dateEnd) {\n    dateEnd = new Date(scheduleItemEnrollment.dateEnd)\n  }\n\n  return (\n    <ClassEditBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"enrollments\"\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n        }}\n        validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleClassEnrollment({ variables: {\n              input: {\n                id: match.params.id,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, variables: getEnrollmentsListQueryVariables(classId)},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.enrollments.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassEnrollmentForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleClassEnrollmentForm>\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentEdit))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n// import SubscriptionCheckinButton from \"./ScheduleClassBookSubscriptionBtn\"\n\n\nfunction ScheduleClassEnrollSubscriptions({ \n  t, \n  match, \n  history, \n  subscriptions\n}) {\n  const classId = match.params.class_id\n  const accountId = match.params.account_id\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col md={4}>\n        {console.log(subscription)}\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {moment(subscription.dateStart).format(dateFormat)}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.enroll.subscription_not_allowed') :\n            <Link to={`/schedule/classes/all/enrollments/${classId}/add/${accountId}/${subscription.accountSubscription.id}`}>\n              <Button \n                block \n                outline \n                color=\"success\" \n              >\n                {t(\"general.enroll\")} <Icon name=\"chevron-right\" />\n              </Button>\n            </Link>\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollSubscriptions))\n\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Dimmer, Grid } from 'tabler-react';\n\nimport ScheduleClassEnrollSubscriptions from \"./ScheduleClassEnrollSubscriptions\"\nimport { GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY } from './queries'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction ScheduleClassEnrollmentOptions({ t, history, match }) {\n  const classId = match.params.class_id\n  const accountId = match.params.account_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}/search`\n  const menuActiveLink = \"enrollments\" \n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n  const { loading, error, data } = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY, {\n    variables: {\n      account: accountId,\n      scheduleItem: classId,\n    },\n    fetchPolicy: \"network-only\"\n  })\n  // const [addScheduleClassEnrollment] = useMutation(CREATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n    defaultCard={false}\n    menuActiveLink={menuActiveLink}\n    pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer loader={true} active={true} />\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      defaultCard={false}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n  \n  const account = data.account\n  const subscriptions = data.scheduleClassEnrollmentOptions.subscriptions\n\n  \n  return (\n    <ClassEditBase\n      defaultCard={false}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <h4>{t('schedule.classes.enrollments.enrollment_options_for')} {account.fullName}</h4>\n      <Grid.Row cards deck>\n        <ScheduleClassEnrollSubscriptions subscriptions={subscriptions} />\n      </Grid.Row>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\n\nconst FormHelp = ({ t, message }) => (\n    <span className=\"form-help\" \n          data-toggle=\"popover\" \n          data-placement=\"top\" \n          data-content={message} \n          data-original-title=\"\" \n          title={message} \n          aria-describedby={'popover23432'}>\n        ?\n    </span>\n)\n\nexport default withTranslation()(FormHelp)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Grid,\n  Form,\n  Text\n} from \"tabler-react\"\n\nimport FormHelp from \"../../../../ui/FormHelp\"\n\n\nconst ScheduleClassClasspassForm = ({ t, history, match, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"shopBook\" \n                onChange={() => {\n                  setFieldValue('shopBook', !values.shopBook)\n                  setFieldTouched('shopBook', true)\n                  if (!values.shopBook) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.shopBook} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.classpasses.shop_book')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"shopBook\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"attend\" \n                disabled={(values.shopBook)}\n                onChange={() => {\n                  setFieldValue('attend', !values.attend)\n                  setFieldTouched('attend', true)\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.attend} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.attend')}</span>\n            </Form.Label>\n            {/* Show message to inform user they can't disable attend while enroll or shopBook is enabled*/}\n            { (values.shopBook) ? <div>\n                <Text.Small>{t('schedule.classes.classpasses.attend_disabled')}</Text.Small> { ' ' }\n                <FormHelp message={t('schedule.classes.classpasses.attend_disabled_help')} />\n              </div> : \"\" }\n            <ErrorMessage name=\"attend\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Dimmer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassClasspassForm))","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_CLASSPASS_SCHEMA = Yup.object().shape({\n  shopBook: Yup.boolean(),\n  attend: Yup.boolean(),\n})\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_CLASSPASSES_QUERY = gql`\n  query ScheduleItemOrganizationClasspassGroups($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemOrganizationClasspassGroups(before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleItem {\n            id\n          }\n          organizationClasspassGroup {\n            id\n            name\n          }\n          shopBook\n          attend\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_CLASS_CLASSPASS = gql`\n  mutation UpdateScheduleItemOrganizationClasspassGroup($input: UpdateScheduleItemOrganizationClasspassGroupInput!) {\n    updateScheduleItemOrganizationClasspassGroup(input:$input) {\n      scheduleItemOrganizationClasspassGroup {\n        id\n      } \n    }\n  }\n`","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Dimmer,\n  Table,\n  Card\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from '../ClassEditBack'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassClasspassForm from \"./ScheduleClassClasspassForm\"\n\nimport { SCHEDULE_CLASS_CLASSPASS_SCHEMA } from './yupSchema'\nimport { GET_SCHEDULE_CLASS_CLASSPASSES_QUERY, UPDATE_SCHEDULE_CLASS_CLASSPASS } from \"./queries\"\n\n\nfunction ScheduleClassClasspasses({ t, match }) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"classpasses\"\n  const cardTitle = t('schedule.classes.classpasses.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_CLASSPASSES_QUERY, { \n    variables: { scheduleItem: classId }\n  })\n  const [ updateScheduleClassClasspass ] = useMutation(UPDATE_SCHEDULE_CLASS_CLASSPASS)\n\n  const pageHeaderButtonList = <ClassEditBack />\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.classpasses.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemOrganizationClasspassGroups.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.classpasses.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      defaultCard={false} \n      menuActiveLink={menuActiveLink} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n    <ContentCard \n      cardTitle={cardTitle}\n      // headerContent={headerOptions}\n      pageInfo={data.scheduleItemOrganizationClasspassGroups.pageInfo}\n      hasCardBody={false}\n      onLoadMore={() => {\n      fetchMore({\n        variables: {\n          after: data.scheduleItemOrganizationClasspassGroups.pageInfo.endCursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.scheduleItemOrganizationClasspassGroups.edges\n          const pageInfo = fetchMoreResult.scheduleItemOrganizationClasspassGroups.pageInfo\n\n          return newEdges.length\n            ? {\n                // Put the new locations at the end of the list and update `pageInfo`\n                // so we have the new `endCursor` and `hasNextPage` values\n                data: { \n                  scheduleItemOrganizationClasspassGroups: {\n                    __typename: previousResult.scheduleItemOrganizationClasspassGroups.__typename,\n                    edges: [ ...previousResult.scheduleItemOrganizationClasspassGroups.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              }\n            : previousResult\n          }\n        })\n      }} >\n      <div>\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.classpass_group')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.scheduleItemOrganizationClasspassGroups.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                {console.log(node)}\n                <Table.Col key={v4()}> \n                  {node.organizationClasspassGroup.name}\n                </Table.Col>\n                <Table.Col>\n                <Formik\n                    initialValues={{  \n                      shopBook: node.shopBook,\n                      attend: node.attend\n                    }}\n                    validationSchema={SCHEDULE_CLASS_CLASSPASS_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        console.log(values)\n\n                        updateScheduleClassClasspass({ variables: {\n                            input: {\n                              id: node.id,\n                              shopBook: values.shopBook,\n                              attend: values.attend\n                            }\n                          }, refetchQueries: [\n                            { query: GET_SCHEDULE_CLASS_CLASSPASSES_QUERY,\n                              variables: { scheduleItem: classId }\n                            }],\n                          // Mutation is \"complete\" when refetchQueries finish\n                          awaitRefetchQueries: true\n                        })\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.classes.classpasses.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, setSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                      <ScheduleClassClasspassForm\n                        isSubmitting={isSubmitting}\n                        setSubmitting={setSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                        submitForm={submitForm}\n                      >\n                        {console.log(errors)}\n                        {console.log(values)}\n                        test\n                      </ScheduleClassClasspassForm>\n                    )}\n                </Formik>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        </div>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\n// class ScheduleClassClasspasses extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Schedule classs classpasses props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const classId = match.params.class_id\n\n//     const ButtonAdd = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemclasspass\">\n//       <Link to={\"/schedule/classes/all/classpasses/\" + classId + \"/add\" } >\n//         <Button color=\"primary btn-block mb-6\">\n//         <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.classpasses.add')}\n//         </Button>\n//       </Link>\n//     </HasPermissionWrapper>\n\n//     return (\n//       <SiteWrapper>\n//       <div className=\"my-3 my-md-5\">\n//         {console.log('ID here:')}\n//         {console.log(classId)}\n//         <Query query={GET_SCHEDULE_CLASS_CLASSPASSES_QUERY} variables={{ scheduleItem: classId }}>\n//           {({ loading, error, data, refetch, fetchMore }) => {\n  \n//             // Loading\n//             if (loading) return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <Dimmer active={true} loader={true} />\n//               </ClassEditBase>\n//             )\n//             // Error\n//             if (error) return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <p>{t('schedule.classes.classpasses.error_loading')}</p>\n//               </ClassEditBase>\n//             )\n  \n//             const initialTimeStart = TimeStringToJSDateOBJ(data.scheduleItem.timeStart)\n//             const subtitle = class_edit_all_subtitle({\n//               t: t,\n//               location: data.scheduleItem.organizationLocationRoom.organizationLocation.name,\n//               locationRoom: data.scheduleItem.organizationLocationRoom.name,\n//               classtype: data.scheduleItem.organizationClasstype.name,\n//               starttime: initialTimeStart\n//             })\n  \n//             // Empty list\n//             if (!data.scheduleItemOrganizationClasspassGroups.edges.length) { return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <p>{t('schedule.classes.classpasses.empty_list')}</p>\n//               </ClassEditBase>\n//             )} else {   \n//             // Life's good! :)\n//               return (\n//                 <ClassEditBase \n//                   menu_activeLink=\"classpasses\" \n//                   default_card={false} \n//                   subtitle={subtitle}\n//                   sidebar_button={ButtonAdd}\n//                 >\n//                 <ContentCard \n//                   cardTitle={t('schedule.classes.title_edit')}\n//                   // headerContent={headerOptions}\n//                   pageInfo={data.scheduleItemOrganizationClasspassGroups.pageInfo}\n//                   onLoadMore={() => {\n//                   fetchMore({\n//                     variables: {\n//                       after: data.scheduleItemOrganizationClasspassGroups.pageInfo.endCursor\n//                     },\n//                     updateQuery: (previousResult, { fetchMoreResult }) => {\n//                       const newEdges = fetchMoreResult.scheduleItemOrganizationClasspassGroups.edges\n//                       const pageInfo = fetchMoreResult.scheduleItemOrganizationClasspassGroups.pageInfo\n  \n//                       return newEdges.length\n//                         ? {\n//                             // Put the new locations at the end of the list and update `pageInfo`\n//                             // so we have the new `endCursor` and `hasNextPage` values\n//                             data: { \n//                               scheduleItemOrganizationClasspassGroups: {\n//                                 __typename: previousResult.scheduleItemOrganizationClasspassGroups.__typename,\n//                                 edges: [ ...previousResult.scheduleItemOrganizationClasspassGroups.edges, ...newEdges ],\n//                                 pageInfo\n//                               }\n//                             }\n//                           }\n//                         : previousResult\n//                       }\n//                     })\n//                   }} >\n//                   <div>\n//                     <Table>\n//                       <Table.Header>\n//                         <Table.Row>\n//                           <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n//                           <Table.ColHeader></Table.ColHeader>\n//                         </Table.Row>\n//                       </Table.Header>\n//                       <Table.Body>\n//                         {data.scheduleItemOrganizationClasspassGroups.edges.map(({ node }) => (\n//                           <Table.Row key={v4()}>\n//                             {console.log(node)}\n//                             <Table.Col key={v4()}> \n//                               {node.organizationClasspassGroup.name}\n//                             </Table.Col>\n//                             <Table.Col>\n//                             <Mutation mutation={UPDATE_SCHEDULE_CLASS_CLASSPASS}> \n//                               {(updateScheduleClassClasspass, { data }) => (\n//                                 <Formik\n//                                     initialValues={{  \n//                                       shopBook: node.shopBook,\n//                                       attend: node.attend\n//                                     }}\n//                                     validationSchema={SCHEDULE_CLASS_CLASSPASS_SCHEMA}\n//                                     onSubmit={(values, { setSubmitting }) => {\n//                                         console.log(values)\n\n//                                         updateScheduleClassClasspass({ variables: {\n//                                           input: {\n//                                             id: node.id,\n//                                             shopBook: values.shopBook,\n//                                             attend: values.attend\n//                                           }\n//                                         }, refetchQueries: [\n//                                             // {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n//                                             // {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": false }},\n//                                         ]})\n//                                         .then(({ data }) => {\n//                                             console.log('got data', data);\n//                                             toast.success((t('schedule.classes.classpasses.toast_edit_success')), {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             setSubmitting(false)\n//                                           }).catch((error) => {\n//                                             toast.error((t('general.toast_server_error')) +  error, {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             console.log('there was an error sending the query', error)\n//                                             setSubmitting(false)\n//                                           })\n//                                     }}\n//                                     >\n//                                     {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n//                                       <ScheduleClassClasspassForm\n//                                         isSubmitting={isSubmitting}\n//                                         setFieldTouched={setFieldTouched}\n//                                         setFieldValue={setFieldValue}\n//                                         errors={errors}\n//                                         values={values}\n//                                         submitForm={submitForm}\n//                                       >\n//                                         {console.log(errors)}\n//                                         {console.log(values)}\n//                                         test\n//                                       </ScheduleClassClasspassForm>\n//                                     )}\n//                                 </Formik>\n//                               )}\n//                             </Mutation>\n//                             </Table.Col>\n//                           </Table.Row>\n//                         ))}\n//                       </Table.Body>\n//                     </Table>\n//                     </div>\n//                   </ContentCard>\n//                 </ClassEditBase>\n//             )}}\n//           }\n//         </Query>\n//       </div>\n//     </SiteWrapper>\n//     )\n//   }\n\n// };\n\nexport default withTranslation()(withRouter(ScheduleClassClasspasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Grid,\n  Form,\n  Text\n} from \"tabler-react\"\n\nimport FormHelp from \"../../../../ui/FormHelp\"\n\n\nconst ScheduleClassSubscriptionForm = ({ t, history, match, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"enroll\" \n                onChange={() => {\n                  setFieldValue('enroll', !values.enroll)\n                  setFieldTouched('enroll', true)\n                  if (!values.enroll) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.enroll} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.enroll')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"enroll\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"shopBook\" \n                onChange={() => {\n                  setFieldValue('shopBook', !values.shopBook)\n                  setFieldTouched('shopBook', true)\n                  if (!values.shopBook) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.shopBook} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.subscriptions.shop_book')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"shopBook\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"attend\" \n                disabled={((values.shopBook) || (values.enroll))}\n                onChange={() => {\n                  setFieldValue('attend', !values.attend)\n                  setFieldTouched('attend', true)\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.attend} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.attend')}</span>\n            </Form.Label>\n            {/* Show message to inform user they can't disable attend while enroll or shopBook is enabled*/}\n            { ((values.shopBook) || (values.enroll)) ? <div>\n                <Text.Small>{t('schedule.classes.subscriptions.attend_disabled')}</Text.Small> { ' ' }\n                <FormHelp message={t('schedule.classes.subscriptions.attend_disabled_help')} />\n              </div> : \"\" }\n            <ErrorMessage name=\"attend\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Dimmer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassSubscriptionForm))","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  enroll: Yup.boolean(),\n  shopBook: Yup.boolean(),\n  attend: Yup.boolean(),\n})\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY = gql`\n  query ScheduleItemOrganizationSubscriptionGroups($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemOrganizationSubscriptionGroups(first: 100, before: $before, after: $after, scheduleItem:$scheduleItem) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleItem {\n            id\n          }\n          organizationSubscriptionGroup {\n            id\n            name\n          }\n          enroll\n          shopBook\n          attend\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_CLASS_SUBSCRIPTION = gql`\nmutation UpdateScheduleItemOrganizationSubscriptionGroup($input: UpdateScheduleItemOrganizationSubscriptionGroupInput!) {\n  updateScheduleItemOrganizationSubscriptionGroup(input:$input) {\n    scheduleItemOrganizationSubscriptionGroup {\n      id\n    } \n  }\n}\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Dimmer,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from '../ClassEditBack'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassSubscriptionForm from \"./ScheduleClassSubscriptionForm\"\n\nimport { SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport { GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, UPDATE_SCHEDULE_CLASS_SUBSCRIPTION } from \"./queries\"\n\n\nfunction ScheduleClassSubscriptions({t, match, history}) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"subscriptions\"\n  const cardTitle = t('schedule.classes.subscriptions.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, { \n    variables: { scheduleItem: classId }\n  })\n  const [ updateScheduleClassSubscription ] = useMutation(UPDATE_SCHEDULE_CLASS_SUBSCRIPTION)\n\n  const pageHeaderButtonList = <ClassEditBack />\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.subscriptions.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemOrganizationSubscriptionGroups.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.subscriptions.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        // headerContent={headerOptions}\n        pageInfo={data.scheduleItemOrganizationSubscriptionGroups.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemOrganizationSubscriptionGroups.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemOrganizationSubscriptionGroups.edges\n            const pageInfo = fetchMoreResult.scheduleItemOrganizationSubscriptionGroups.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemOrganizationSubscriptionGroups: {\n                      __typename: previousResult.scheduleItemOrganizationSubscriptionGroups.__typename,\n                      edges: [ ...previousResult.scheduleItemOrganizationSubscriptionGroups.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.subscription_group')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemOrganizationSubscriptionGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {node.organizationSubscriptionGroup.name}\n                  </Table.Col>\n                  <Table.Col>\n                    <Formik\n                      initialValues={{  \n                        enroll: node.enroll,\n                        shopBook: node.shopBook,\n                        attend: node.attend\n                      }}\n                      validationSchema={SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log(values)\n                          updateScheduleClassSubscription({ \n                            variables: {\n                              input: {\n                                id: node.id,\n                                enroll: values.enroll,\n                                shopBook: values.shopBook,\n                                attend: values.attend\n                              }\n                            }, \n                            refetchQueries: [\n                              { query: GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, \n                                variables: { scheduleItem: classId }\n                            }],\n                            // Mutation is \"complete\" when refetchQueries finish\n                            awaitRefetchQueries: true\n                          })\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.classes.subscriptions.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              setSubmitting(false)\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, setSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                        <ScheduleClassSubscriptionForm\n                          isSubmitting={isSubmitting}\n                          setSubmitting={setSubmitting}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          errors={errors}\n                          values={values}\n                          submitForm={submitForm}\n                        >\n                          {console.log(errors)}\n                          {console.log(values)}\n                        </ScheduleClassSubscriptionForm>\n                      )}\n                    </Formik>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        </ContentCard>\n      </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassSubscriptions))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccounts($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemAccounts(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n    scheduleItemAccount(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      role\n      account2 {\n        id\n        fullName\n      }\n      role2\n      dateStart\n      dateEnd       \n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    accounts(first: 1000, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation CreateScheduleItemAccount($input:CreateScheduleItemAccountInput!) {\n  createScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const UPDATE_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation UpdateScheduleItemAccount($input: UpdateScheduleItemAccountInput!) {\n  updateScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation DeleteScheduleClassInstructor($input: DeleteScheduleItemAccountInput!) {\n  deleteScheduleItemAccount(input: $input) {\n    ok\n  }\n}\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table,\n  Card\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { represent_instructor_role } from \"../tools\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport ButtonAdd from '.././../../../ui/ButtonAdd'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, DELETE_SCHEDULE_CLASS_INSTRUCTOR } from \"./queries\"\n\n\nfunction ScheduleClassInstructors({ t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const classId = match.params.class_id\n  const menuActiveLink = \"instructors\"\n  const cardTitle = t('schedule.classes.instructors.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, {\n    variables: {scheduleItem: classId}\n  })\n  const [ deleteScheduleItemAccount ] = useMutation(DELETE_SCHEDULE_CLASS_INSTRUCTOR)\n\n  const ButtonAddInstructor = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemaccount\">\n    <ButtonAdd addUrl={`/schedule/classes/all/instructors/${classId}/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    {ButtonAddInstructor}\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.instructors.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemAccounts.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.instructors.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.scheduleItemAccounts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemAccounts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAccounts.edges\n            const pageInfo = fetchMoreResult.scheduleItemAccounts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemAccounts: {\n                      __typename: previousResult.scheduleItemAccounts.__typename,\n                      edges: [ ...previousResult.scheduleItemAccounts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.instructor_2')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}> \n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account.fullName} <br />\n                    <span className=\"text-muted\">\n                      {represent_instructor_role(t, node.role)}\n                    </span>\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account2 ?\n                      <span>\n                        {node.account2.fullName} <br />\n                        <span className=\"text-muted\">\n                          {represent_instructor_role(t, node.role2)}\n                        </span>\n                      </span> : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/schedule/classes/all/instructors/${classId}/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\"\n                      >\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t('schedule.classes.instructors.delete_confirm_msg'),\n                            msgDescription: <p>{t('schedule.classes.instructors.delete_confirm_description')}</p>,\n                            msgSuccess: t('schedule.classes.instructors.deleted'),\n                            deleteFunction: deleteScheduleItemAccount,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }}\n                            ]}\n                        })}}\n                    >\n                      <span className=\"text-red\">\n                        <Icon prefix=\"fe\" name=\"trash-2\" />\n                      </span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        </ContentCard>      \n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassInstructors))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_INSTRUCTOR_SCHEMA = Yup.object().shape({\n  account: Yup.string()\n    .required(t('yup.field_required')),\n  role: Yup.string(),\n  account2: Yup.string(),\n  role2: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleClassInstructorForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role')}>\n              <Field component=\"select\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role2')}>\n              <Field component=\"select\" \n                      name=\"role2\" \n                      className={(errors.role2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleClassInstructorBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={ \"/schedule/classes/all/instructors/\" + classId } />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorBack))","// @flow\n\nimport React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_CLASS_INSTRUCTOR } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassInstructorForm from './ScheduleClassInstructorForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassInstructorBack from \"./ScheduleClassInstructorBack\"\n\n\nfunction ScheduleClassInstructorAdd({ t, history, match }) {\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/instructors/${classId}`\n  const cardTitle = t('schedule.classes.instructors.title_add')\n  const menuActiveLink = \"instructors\" \n  const pageHeaderButtonList = <ScheduleClassInstructorBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleClassInstructor] = useMutation(ADD_SCHEDULE_CLASS_INSTRUCTOR)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          price: \"\", \n          dateStart: new Date() ,\n          account: \"\",\n          role: \"\",\n          account2: \"\",\n          role2: \"\",\n        }}\n        validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassInstructor({ variables: {\n              input: {\n                scheduleItem: match.params.class_id,\n                account: values.account,\n                role: values.role,\n                account2: values.account2,\n                role2: values.role2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.instructors.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassInstructorForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY, UPDATE_SCHEDULE_CLASS_INSTRUCTOR } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassInstructorForm from './ScheduleClassInstructorForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassInstructorBack from \"./ScheduleClassInstructorBack\"\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleClassInstructorEdit({ t, match, history }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/instructors/${classId}`\n  const cardTitle = t('schedule.classes.instructors.title_edit')\n  const menuActiveLink = \"instructors\"\n  const pageHeaderButtonList = <ScheduleClassInstructorBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassInstructor] = useMutation(UPDATE_SCHEDULE_CLASS_INSTRUCTOR)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialData = data.scheduleItemAccount\n\n  let initialAccount2 = \"\"\n  if (initialData.account2) {\n    initialAccount2 =  initialData.account2.id\n  } \n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  \n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <ClassEditBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"instructors\"\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          account: initialData.account.id,\n          role: initialData.role,\n          account2: initialAccount2,\n          role2: initialData.role2,\n        }}\n        validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleClassInstructor({ variables: {\n              input: {\n                id: match.params.id,\n                account: values.account,\n                role: values.role,\n                account2: values.account2,\n                role2: values.role2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.instructors.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassInstructorForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleClassInstructorForm>\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorEdit))","export function get_accounts_query_variables(searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined,\n  }\n\n  if (searchName) {\n    queryVars.searchName = searchName\n  }\n\n  return queryVars\n}\n\nexport function get_attendance_list_query_variables(schedule_item_id, date) {\n  return {\n    scheduleItem: schedule_item_id,\n    date: date\n  }\n}\n","import React, { useState } from 'react'\nimport { useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Dimmer,\n  Icon,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport { get_accounts_query_variables } from \"./tools\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY } from \"../../../../../queries/accounts/account_search_queries\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nfunction ScheduleClassAttendanceSearch({ t, match, history, checkedInIds, classStatus }) {\n  const [showSearchResults, setShowSearchResults] = useState(false)\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [ getAccounts, { called, loading, error, data, refetch, fetchMore } ] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  function Search() {\n    return <InputSearch \n      className=\"mb-2\"\n      initialValueKey={CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH}\n      placeholder={t(\"schedule.classes.class.attendance.placeholder_search\")}\n      onChange={(value) => {\n        localStorage.setItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH, value)\n        if (value && !called) {\n          setShowSearchResults(true)\n          getAccounts({ variables: get_accounts_query_variables(value)})\n        } else if (value) {\n          // This is important, as the current relayStylePagination doesn't include args.\n          // Don't use getAccounts again, but refetch with different vars.\n          setShowSearchResults(true)\n          refetch(get_accounts_query_variables(value))\n        } else {\n          setShowSearchResults(false)\n        }\n      }}\n    />\n  }\n\n  if (!showSearchResults) {\n    return <Search />\n  }\n\n  if (called && loading) return (\n    <React.Fragment>\n      <Search />\n      <ContentCard cardTitle={t('general.search_results')}>\n        <Dimmer active={true} loader={true} />\n      </ContentCard>\n    </React.Fragment>\n  )\n\n  if (called && error) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"danger\">{t(\"general.error_sad_smiley\")}</Alert>\n    </React.Fragment>\n  )\n\n  if (called && !data.accounts.edges.length) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"primary\">\n        <strong>{t(\"schedule.classes.class.attendance.search_customer_not_found\")}</strong> {\" - \"}\n        {t(\"schedule.classes.class.attendance.search_no_account_results\")}\n      </Alert>\n    </React.Fragment>\n  )\n\n  return (\n    <React.Fragment>\n      <Search />\n      {(called && data) ?\n      <ContentCard cardTitle={t('general.search_results')}\n                  pageInfo={data.accounts.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                      after: data.accounts.pageInfo.endCursor\n                    },\n                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                      const newEdges = fetchMoreResult.accounts.edges\n                      const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                      return newEdges.length\n                        ? {\n                            // Put the new accounts at the end of the list and update `pageInfo`\n                            // so we have the new `endCursor` and `hasNextPage` values\n                            queryAccountsData: {\n                              accounts: {\n                                __typename: previousResult.accounts.__typename,\n                                edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          }\n                        : previousResult\n                    }\n                  })\n                }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {(checkedInIds.includes(node.id)) ? \n                    <span className=\"pull-right\">{t(\"schedule.classes.class.attendance.search_results_already_checked_in\")}</span> :\n                    <Link to={\"/schedule/classes/class/book/\" + schedule_item_id + \"/\" + class_date + \"/\" + node.id}>\n                      <Button color=\"secondary pull-right\">\n                        {t('general.checkin')} <Icon name=\"chevron-right\" />\n                      </Button>\n                    </Link>       \n                  }   \n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n      : \"\" }\n    </React.Fragment>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceSearch))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nconst ScheduleClassBack = ({ t, classId }) => (\n  <ButtonBack className=\"mr-2\" returnUrl=\"/schedule/classes\" />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassBack))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n\nfunction ClassMenu ({ t, scheduleItemId, classDate, activeLink }) {\n  let attendance_active = false\n  let attendancechart_active = false\n  let edit_active = false\n\n  switch (activeLink) {\n    case \"attendance\":\n      attendance_active = true\n      break\n    case \"attendancechart\":\n      attendancechart_active = true\n      break\n    case \"edit\":\n      edit_active = true\n      break\n    default:\n      break\n  }\n\n  return (\n    <div>\n      <List.Group transparent={true}>   \n        <HasPermissionWrapper \n            resource=\"scheduleitemattendance\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/attendance/\" + scheduleItemId + \"/\" + classDate}\n              icon=\"check-circle\"\n              active={attendance_active}\n              >\n              {t(\"general.attendance\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemattendance\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/attendance_chart/\" + scheduleItemId + \"/\" + classDate}\n              icon=\"bar-chart-2\"\n              active={attendancechart_active}\n              >\n              {t(\"schedule.classes.class.attendance_chart.title\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemweeklyotc\"\n            permission=\"change\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/edit/\" + scheduleItemId + \"/\" + classDate}\n              icon=\"edit-3\"\n              active={edit_active}\n              >\n              {t(\"schedule.classes.class.menu.edit_this_class\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n\n      </List.Group>\n    </div>\n  )\n}\n\nexport default withTranslation()(ClassMenu)","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from \"moment\"\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport { TOKEN_REFRESH } from '../../../../../queries/system/auth';\nimport { refreshTokenAndOpenExportLinkInNewTab } from '../../../../../tools/refresh_token_and_open_export_link';\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ButtonListWeekChooser from '../../../../ui/ButtonListWeekChooser';\nimport ScheduleClassBack from \"../ScheduleClassBack\"\nimport ClassMenu from \"../ClassMenu\"\n\nfunction ScheduleClassAttendanceBaseBase({ t, match, history, children, pageSubTitle, refetch=f=>f }) {\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n  const exportUrl = `/d/export/schedule_item_attendance/mailinglist/${scheduleItemId}/${classDate}`\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  function onClickPrevious() {\n    const previousWeek = moment(classDate).subtract(7, \"days\").format('YYYY-MM-DD')\n    history.push(`/schedule/classes/class/attendance/${scheduleItemId}/${previousWeek}`)\n  }\n  function onClickNext () {\n    const previousWeek = moment(classDate).add(7, \"days\").format('YYYY-MM-DD')\n    history.push(`/schedule/classes/class/attendance/${scheduleItemId}/${previousWeek}`)\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={pageSubTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n              {/* Export Mailinglist */}\n              <Button\n                color=\"secondary\"\n                icon=\"download-cloud\"\n                className=\"mr-2\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                {t('general.mailing_list')} \n              </Button>\n              <ButtonListWeekChooser \n                showCurrent={false}\n                onClickPrevious={onClickPrevious}\n                onClickNext={onClickNext}\n              />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n              <Grid.Col xs={12} sm={12} md={9}>\n                {children}\n              </Grid.Col>\n              <Grid.Col xs={12} sm={12} md={3}>\n                <ClassMenu \n                  scheduleItemId={scheduleItemId}\n                  classDate={classDate}\n                  activeLink=\"attendance\"\n                />\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceBaseBase))\n","import moment from 'moment'\n\nexport function class_subtitle({t, location, locationRoom, classtype, timeStart, date}) {\n  return t('general.class') + ': ' + \n         location + ' (' + locationRoom + ') - ' + \n         classtype + ' @ ' + \n         moment(date).format('LL') + ' ' + moment(timeStart).format('LT')\n}\n\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ScheduleClassAttendanceBaseBase from './ScheduleClassAttendanceBaseBase'\nimport { class_subtitle } from \"../tools\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_SCHEDULE_CLASS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassAttendanceBase({ t, match, history, children, refetch }) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const cardTitle=t('general.attendance')\n  const { loading, error, data } = useQuery(\n    GET_SCHEDULE_CLASS_QUERY, {\n      variables: { scheduleItem: schedule_item_id, date: class_date }\n    }\n  )\n\n  if (loading) return (\n    <ScheduleClassAttendanceBaseBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </ScheduleClassAttendanceBaseBase>\n  )\n\n  if (error) return (\n    <ScheduleClassAttendanceBaseBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('schedule.classes.class.attendance.error_loading')}</p>\n      </ContentCard>\n    </ScheduleClassAttendanceBaseBase>\n  )\n\n  const scheduleClass = data.scheduleClass\n\n  const pageSubTitle = class_subtitle({\n    t: t,\n    location: scheduleClass.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleClass.organizationLocationRoom.name,\n    classtype: scheduleClass.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleClass.timeStart), \n    date: class_date\n  })\n  \n  console.log(scheduleClass.status)\n  \n  return (\n    <ScheduleClassAttendanceBaseBase pageSubTitle={pageSubTitle}  refetch={refetch}>\n      {children}\n    </ScheduleClassAttendanceBaseBase>\n\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_attendance_list_query_variables } from \"./tools\"\nimport { DELETE_SCHEDULE_CLASS_ATTENDANCE, GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction ScheduleClassAttendanceDelete({t, match, node}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [deleteScheduleItemAttendance ] = useMutation(DELETE_SCHEDULE_CLASS_ATTENDANCE)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm pull-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"schedule.classes.class.attendance.delete_confirm_msg\"),\n            msgDescription: <p>{node.account.fullName}</p>,\n            msgSuccess: t('schedule.classes.class.attendance.delete_success'),\n            deleteFunction: deleteScheduleItemAttendance,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                { query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n                  variables: get_attendance_list_query_variables(schedule_item_id, class_date) },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceDelete))\n","import React, { useState } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Dimmer,\n  Dropdown,\n  Icon,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\nimport { get_attendance_list_query_variables } from \"./tools\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport BadgeBookingStatus from \"../../../../ui/BadgeBookingStatus\"\nimport ButtonConfirm from '../../../../ui/ButtonConfirm'\nimport ScheduleClassAttendanceSearch from \"./ScheduleClassAttendanceSearch\"\nimport ScheduleClassAttendanceBase from \"./ScheduleClassAttendanceBase\"\nimport ScheduleClassAttendanceDelete from \"./ScheduleClassAttendanceDelete\"\nimport { \n  GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n  UPDATE_SCHEDULE_ITEM_ATTENDANCE,\n  RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE \n} from \"./queries\"\n\n\n// function sleepFor(sleepDuration){\n//   var now = new Date().getTime();\n//   while(new Date().getTime() < now + sleepDuration){ /* Do nothing */ }\n// }\n\nfunction setAttendanceStatus({t, match, updateAttendance, node, status, setAttendanceRefetching=f=>f}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  setAttendanceRefetching(true)\n\n  updateAttendance({\n    variables: { \n      input: {\n        id: node.id, \n        bookingStatus: status\n      }\n    },\n    refetchQueries: [\n      {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n        variables: get_attendance_list_query_variables(schedule_item_id, class_date)}\n    ], \n    // Mutation is \"complete\" when refetchQueries finish\n    awaitRefetchQueries: true\n  }).then(({ data }) => {\n    console.log('got data', data);\n    // sleepFor(1000)\n    setAttendanceRefetching(false)\n    toast.success(\n      t('schedule.classes.class.attendance.status_saved'), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n  }).catch((error) => {\n    setAttendanceRefetching(false)\n    toast.error((t('general.toast_server_error')) +  error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    console.log('there was an error sending the query', error);\n  })\n}\n\n\nfunction ScheduleClassAttendance({ t, match, history }) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [attendanceRefetching, setAttendanceRefetching] = useState(false)\n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, {\n      variables: get_attendance_list_query_variables(schedule_item_id, class_date),\n      fetchPolicy: \"network-only\"\n    }\n  )\n  const [ updateAttendance ] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n  const [ resendInfoMail ] = useMutation(RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE)\n\n  // Loading\n  if (loading) return <ScheduleClassAttendanceBase>\n      <ContentCard cardTitle={t('general.attendance')}>\n        <Dimmer loader={true} active={true} />\n      </ContentCard>\n  </ScheduleClassAttendanceBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <ScheduleClassAttendanceBase>{t('general.error_sad_smiley')}</ScheduleClassAttendanceBase>\n  }\n  \n  const scheduleClass = data.scheduleClass\n  console.log(scheduleClass)\n  let checkedInIds = []\n  data.scheduleItemAttendances.edges.map(({ node }) => (\n    checkedInIds.push(node.account.id)\n  ))\n\n  const headerOptions = <Card.Options>\n    <div className='float-right'>\n      <Badge color=\"success\">{scheduleClass.countAttending} {t(\"schedule.classes.class.attendance.attending\")}</Badge> {\" \"}\n      <Badge color=\"primary\">{scheduleClass.countBooked} {t(\"schedule.classes.class.attendance.booked\")}</Badge> {\" \"}\n      {/* <Badge color=\"info\">{t(\"general.spaces\")}: {scheduleClass.spaces}</Badge>  */}\n    </div>\n  </Card.Options>\n\n\n  return (\n    <ScheduleClassAttendanceBase refetch={refetch}>\n      {(scheduleClass.status === 'CANCELLED') ? \n        <Alert type=\"warning\">\n          <strong>{t(\"schedule.classes.class.attendance.this_class_is_cancelled\")}</strong> - {\" \"}\n          {t(\"schedule.classes.class.attendance.unable_to_add_attendance\")}\n        </Alert>  \n        : \n        <ScheduleClassAttendanceSearch \n          checkedInIds={checkedInIds}\n        />\n      }\n      <ContentCard \n        cardTitle={t('general.attendance')}\n        pageInfo={data.scheduleItemAttendances.pageInfo}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n          variables: {\n            after: data.scheduleItemAttendances.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n            const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo \n\n            return newEdges.length\n              ? {\n                  // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: {\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }}>\n        { !(data.scheduleItemAttendances.edges.length) ? \n          <Card.Body>\n            <p>{t('schedule.classes.class.attendance.empty_list')}</p>\n          </Card.Body>\n          :\n          <Dimmer active={attendanceRefetching} loader={true}>\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {data.scheduleItemAttendances.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {node.account.fullName}\n                      </Table.Col>\n                      <Table.Col>\n                        <BadgeBookingStatus status={node.bookingStatus} />\n                        <ButtonConfirm \n                              title={t(\"schedule.classes.class.attendance.confirm_resending_info_mail_title\")}\n                              msgConfirm={<p>{t(\"schedule.classes.class.attendance.confirm_resending_info_mail_to\")}</p>}\n                              msgDescription={<p><b>{node.account.fullName}</b></p>}\n                              msgSuccess={t(\"schedule.classes.class.attendance.resend_success\")}\n                              actionFunction={resendInfoMail}\n                              actionFunctionVariables={{variables: {input: {id: node.id}}}}\n                              buttonClass=\"btn-link float-right\"\n                              buttonIcon={<Icon name=\"send\" />}\n                              buttonText={t(\"schedule.classes.class.attendance.resend_info_mail\")}\n                              buttonTextColor=\"\"\n                          />\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Delete */}\n                        <ScheduleClassAttendanceDelete node={node} />\n                        {/* Status dropdown */}\n                        <Dropdown\n                          key={v4()}\n                          className=\"float-right\"\n                          type=\"button\"\n                          toggle\n                          color=\"secondary btn-sm\"\n                          triggerContent={t(\"general.status\")}\n                          items={[\n                            // <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            //   <Dropdown.Item\n                            //     key={v4()}\n                            //     icon=\"check\"\n                            //     onClick={() => {\n                            //       setAttendanceStatus({\n                            //         t: t, \n                            //         updateAttendance: updateAttendance,\n                            //         node: node,\n                            //         status: 'ATTENDING'\n                            //       })\n                            //       refetchAttendance()\n                            //     }}>\n                            //       {t('schedule.classes.class.attendance.booking_status.ATTENDING')}\n                            //   </Dropdown.Item>\n                            // </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                              <Dropdown.Item\n                                key={v4()}\n                                icon=\"calendar\"\n                                onClick={() => {\n                                  setAttendanceStatus({\n                                    t: t, \n                                    match: match,\n                                    updateAttendance: updateAttendance,\n                                    node: node,\n                                    status: 'BOOKED',\n                                    setAttendanceRefetching: setAttendanceRefetching\n                                  })\n                                }}>\n                                  {t('schedule.classes.class.attendance.booking_status.BOOKED')}\n                              </Dropdown.Item>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                              <Dropdown.Item\n                                key={v4()}\n                                icon=\"x\"\n                                onClick={() => {\n                                  setAttendanceStatus({\n                                    t: t, \n                                    match: match,\n                                    updateAttendance: updateAttendance,\n                                    node: node,\n                                    status: 'CANCELLED',\n                                    setAttendanceRefetching: setAttendanceRefetching\n                                  })\n                                }}>\n                                  {t('schedule.classes.class.attendance.booking_status.CANCELLED')}\n                              </Dropdown.Item>\n                            </HasPermissionWrapper>,\n                          ]}\n                        />\n                        {(node.bookingStatus === \"BOOKED\") ?\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Button\n                              key={v4()}\n                              className=\"float-right\"\n                              color=\"success\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  match: match,\n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'ATTENDING',\n                                  setAttendanceRefetching: setAttendanceRefetching\n                                })\n                              }}>\n                                {t('general.checkin')}\n                            </Button>\n                          </HasPermissionWrapper>  : \"\" }\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n          </Dimmer>\n        }\n      </ContentCard>\n    </ScheduleClassAttendanceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendance))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ScheduleClassBack from \"./ScheduleClassBack\"\nimport ClassMenu from \"./ClassMenu\"\n\n\nfunction ScheduleClassEditBase({ t, match, history, children, subTitle=\"\", menuActiveLink=\"\" }) {\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={9} md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col xs={12} sm={3} md={3}>\n              <ClassMenu \n                scheduleItemId={scheduleItemId}\n                classDate={classDate}\n                activeLink={menuActiveLink}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEditBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASS_ATTENDANCE_COUNT_YEAR = gql`\n  query InsightClassAttendanceCountYear($scheduleItem:ID!, $year: Int!) {\n    insightClassAttendanceCountYear(scheduleItem: $scheduleItem, year: $year) {\n      year\n      scheduleItem {\n        id\n      }\n      weeks {\n        week\n        attendanceCountCurrentYear\n        attendanceCountPreviousYear\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts'\n\nimport {\n    colors,\n    Card,\n  } from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport { class_subtitle } from \"../tools\"\nimport ScheduleClassEditBase from '../ScheduleClassEditBase'\n\n\nimport { GET_CLASS_ATTENDANCE_COUNT_YEAR } from \"./queries\"\n\n\nfunction ScheduleClassAttendanceChart({t, history, match}) {\n  const classDate = match.params.date\n  const scheduleItemId = match.params.class_id\n  const menuActiveLink = \"attendancechart\"\n  const year = parseInt(classDate.substring(0, 4))\n\n  const { loading, error, data } = useQuery(GET_CLASS_ATTENDANCE_COUNT_YEAR, {\n    variables: {\n      year: year,\n      scheduleItem: scheduleItemId\n    }\n  })\n\n  if (loading) {\n    return (\n      <ScheduleClassEditBase menuActiveLink={menuActiveLink}>\n          {t('general.loading_with_dots')}\n      </ScheduleClassEditBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleClassEditBase menuActiveLink={menuActiveLink}>\n          {t('general.error_sad_smiley')}\n      </ScheduleClassEditBase>\n    )\n  }\n\n  // Add month name to data\n  const chartData = data.insightClassAttendanceCountYear.weeks.map((item, index) => (\n    { ...item, weekName: `${t(\"general.week\")} ${item.week}` }\n  ))\n\n  const scheduleItem = data.scheduleItem\n  const subTitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: classDate\n  })\n\n  return (\n    <ScheduleClassEditBase menuActiveLink={menuActiveLink} subTitle={subTitle}>\n      <Card title={t('schedule.classes.class.attendance_chart.title')}>\n        <ResponsiveContainer width=\"100%\" aspect={2.6}>\n          <BarChart\n            width={500}\n            height={300}\n            data={chartData}\n            margin={{\n              top: 10,\n              right: 20,\n              left: 0,\n              bottom: 10,\n            }}\n          >\n            <XAxis dataKey=\"weekName\" interval={4} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"attendanceCountCurrentYear\" name={year} fill={colors['azure']} />\n            <Bar dataKey=\"attendanceCountPreviousYear\" name={year-1} fill={colors['azure-lighter']} />\n          </BarChart>\n        </ResponsiveContainer>\n      </Card>\n    </ScheduleClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceChart))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ScheduleClassBookBack = ({ t, classId, date }) => (\n  <Link to={\"/schedule/classes/class/attendance/\" + classId + \"/\" + date} >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ScheduleClassBookBack))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($account: ID!, $scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClassBookingOptions(account: $account, scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      account {\n        id\n        fullName\n        hasReachedTrialLimit\n      }\n      alreadyBooked\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        blocked\n        paused\n        creditsOnDate\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n            unlimited\n          }\n          creditTotal\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation CreateScheduleItemAttendance($input: CreateScheduleItemAttendanceInput!) {\n    createScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`","export function getUrlFromReturnTo({returnTo, schedule_item_id, class_date, locationId}) {\n  let returnUrl\n\n  if (returnTo === \"schedule_classes\") {\n    returnUrl = '/schedule/classes/class/attendance/' + schedule_item_id + \"/\" + class_date\n  } else if (returnTo === \"selfcheckin\") {\n    returnUrl = '/selfcheckin/checkin/' + locationId + \"/\" + schedule_item_id + \"/\" + class_date\n  }\n  \n  return returnUrl\n}","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction ClasspassCheckinButton({t, match, history, classpass, returnTo, locationId=null}) {\n  console.log(classpass)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"accountClasspass\": classpass.accountClasspass.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return <Button \n      block \n      outline \n      disabled={true}\n      color=\"success\" \n    >\n      {t(\"schedule.classes.class.processing_checkin\")}\n    </Button>\n  }\n\n  if (error) {\n    console.log(error)\n    return <Alert type=\"danger\">\n      {t(\"schedule.classes.class.unable_to_book_class\")}\n    </Alert>\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ClasspassCheckinButton))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card\n} from \"tabler-react\";\n\nimport ClasspassCheckinButton from \"./ScheduleClassBookClasspassBtn\"\n\n\nfunction ScheduleClassBookClasspasses({ \n  t, \n  match, \n  history, \n  classpasses,  \n  locationId,\n  onClickCheckin=f=>f ,\n  returnTo=\"schedule_classes\"\n}) {\n\n  return (\n    classpasses.map((classpass) =>(\n      <Grid.Col xs={12} sm={6} md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.classpass\")} >\n        <Card.Body>\n          <b>{classpass.accountClasspass.organizationClasspass.name}</b><br />\n          <span className=\"text-muted\">\n            {t('general.classes_remaining')}: {classpass.accountClasspass.classesRemainingDisplay} <br />\n            {t('general.valid_until')}: {moment(classpass.accountClasspass.dateEnd).format('LL')} <br />\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!classpass.allowed) ? t('schedule.classes.class.book.classpass_not_allowed') :\n            <ClasspassCheckinButton classpass={classpass} returnTo={returnTo} locationId={locationId} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookClasspasses))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n  Icon\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\n\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction SubscriptionCheckinButton({t, match, history, subscription, returnTo, locationId=null}) {\n  console.log(subscription)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"accountSubscription\": subscription.accountSubscription.id,\n    \"date\": class_date,\n    \"attendanceType\": \"SUBSCRIPTION\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return <Button \n      block \n      outline \n      disabled={true}\n      color=\"success\" \n    >\n      {t(\"schedule.classes.class.processing_checkin\")}\n    </Button>\n  }\n\n  if (error) {\n    console.log(error)\n    return <Alert type=\"danger\">\n      {t(\"schedule.classes.class.unable_to_book_class\")}\n    </Alert>\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  if (subscription.blocked) {\n    return (\n      <p className=\"text-muted\">\n        <Icon name=\"alert-triangle\" />\n        {t(\"schedule.classes.class.book.subscription_blocked\")}\n      </p>\n    )\n  }\n\n  if (subscription.paused) {\n    return (\n      <p className=\"text-muted\">\n        <Icon name=\"pause\" />\n        {t(\"schedule.classes.class.book.subscription_paused\")}\n      </p>\n    )\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SubscriptionCheckinButton))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport SubscriptionCheckinButton from \"./ScheduleClassBookSubscriptionBtn\"\n\n\nfunction ScheduleClassBookSubscriptions({ \n  t, \n  match, \n  history, \n  subscriptions, \n  locationId,\n  returnTo=\"schedule_classes\"\n}) {\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col xs={12} sm={6} md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {(subscription.accountSubscription.organizationSubscription.unlimited) ? t(\"general.unlimited\") : \n            <span>{t(\"general.credits_valid_for_class\")}: {subscription.creditsOnDate}</span>}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.book.subscription_not_allowed') :\n            <SubscriptionCheckinButton subscription={subscription} returnTo={returnTo} locationId={locationId} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookSubscriptions))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction ScheduleClassBookPriceBtn({t, match, history, price, returnTo, locationId=null}) {\n  console.log(price)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"organizationClasspass\": price.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS_BUY_AND_BOOK\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return <Button \n      block \n      outline \n      disabled={true}\n      color=\"success\" \n    >\n      {t(\"schedule.classes.class.processing_checkin\")}\n    </Button>\n  }\n\n  if (error) {\n    console.log(error)\n    return <Alert type=\"danger\">\n      {t(\"schedule.classes.class.unable_to_book_class\")}\n    </Alert>\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceBtn))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleClassBookPriceBtn from \"./ScheduleClassBookPriceBtn\"\n\nfunction ScheduleClassBookPriceDropin({ \n  t, \n  match, \n  history, \n  priceDropin, \n  locationId,\n  onClickCheckin=f=>f,\n  returnTo=\"schedule_classes\"\n}) {\n  console.log('priceDropin')\n  console.log(priceDropin)\n\n  return (\n    <Grid.Col xs={12} sm={6} md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.dropin\")} >\n      <Card.Body>\n        <b>{priceDropin.priceDisplay}</b><br />\n        {t(\"schedule.classes.class.book.dropin_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ScheduleClassBookPriceBtn price={priceDropin} returnTo={returnTo} locationID={locationId} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceDropin))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleClassBookPriceBtn from \"./ScheduleClassBookPriceBtn\"\n\n\nfunction ScheduleClassBookPriceTrial({ \n  t, \n  match, \n  history, \n  priceTrial, \n  locationId,\n  onClickCheckin=f=>f,\n  returnTo=\"schedule_classes\"\n}) {\n  console.log('priceTrial')\n  console.log(priceTrial)\n\n  return (\n    <Grid.Col xs={12} sm={6} md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.trial\")} >\n      <Card.Body>\n        <b>{priceTrial.priceDisplay}</b><br />\n        {t(\"schedule.classes.class.book.trial_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ScheduleClassBookPriceBtn price={priceTrial} returnTo={returnTo} locationId={locationId} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceTrial))\n\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n\nimport { class_subtitle } from \"../tools\"\n\nimport ScheduleClassBookBack from \"./ScheduleClassBookBack\"\nimport ScheduleClassBookClasspasses from \"./ScheduleClassBookClasspasses\"\nimport ScheduleClassBookSubscriptions from \"./ScheduleClassBookSubscriptions\"\nimport ScheduleClassBookPriceDropin from \"./ScheduleClassBookPriceDropin\"\nimport ScheduleClassBookPriceTrial from \"./ScheduleClassBookPriceTrial\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassBook({ t, match, history }) {\n  // Clear attendance search\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH, \"\")\n  \n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        account: account_id,\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"ATTEND\"\n      },\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  // Query\n  // Loading\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryData)\n  const account = queryData.scheduleClassBookingOptions.account\n  const classpasses = queryData.scheduleClassBookingOptions.classpasses\n  const subscriptions = queryData.scheduleClassBookingOptions.subscriptions\n  const prices = queryData.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = queryData.scheduleClassBookingOptions.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: class_date\n  })\n\n  console.log(prices)\n  \n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">   \n              <ScheduleClassBookBack classId={schedule_item_id} date={class_date} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t('general.booking_options')} {account.fullName}</h4>\n                <div className=\"mt-6\">\n                <Grid.Row cards deck>\n                  <ScheduleClassBookSubscriptions subscriptions={subscriptions} />\n                  <ScheduleClassBookClasspasses classpasses={classpasses} />\n                  {(prices) ?\n                    (prices.organizationClasspassDropin) ? \n                      <ScheduleClassBookPriceDropin priceDropin={prices.organizationClasspassDropin}/> : \"\" \n                    : \"\" }\n                  {(prices) ?\n                    ((prices.organizationClasspassTrial) && (!account.hasReachedTrialLimit)) ? \n                      <ScheduleClassBookPriceTrial priceTrial={prices.organizationClasspassTrial}/> : \"\" \n                    : \"\" }\n                </Grid.Row>\n                </div>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBook))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY = gql`\n  query ScheduleClassWeeklyOTCs($scheduleItem: ID!, $date: Date!) {\n    scheduleItemWeeklyOtcs(first:1, scheduleItem: $scheduleItem, date:$date) {\n      edges {\n        node {\n          id \n          date\n          status\n          description\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          organizationLocationRoom {\n            id\n            name\n          }\n          organizationClasstype {\n            id\n            name\n          }\n          organizationLevel {\n            id\n            name\n          }\n          timeStart\n          timeEnd\n          spaces\n          walkInSpaces\n          infoMailEnabled\n          infoMailContent\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    accounts(first: 100, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_WEEKLY_OTC = gql`\n  mutation DeleteScheduleClassWeeklyOTC($input: DeleteScheduleItemWeeklyOTCInput!) {\n    deleteScheduleItemWeeklyOtc(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_CLASS_WEEKLY_OTC = gql`\n  mutation UpdateScheduleClassWeeklyOTC($input: UpdateScheduleItemWeeklyOTCInput!) {\n    updateScheduleItemWeeklyOtc(input:$input) {\n      scheduleItemWeeklyOtc {\n        id\n      }\n    }\n  }\n`\n","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_EDIT_OTC_SCHEMA = Yup.object().shape({\n  spaces: Yup.number().nullable().notRequired(),\n  walkInSpaces: Yup.number().nullable().notRequired(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../plugin_config/tinymce\"\nimport CSTimePicker from \"../../../../ui/CSTimePicker\"\n\nconst ScheduleClassEditForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"infoMailEnabled\" \n                    checked={values.infoMailEnabled} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.classes.info_mail_enabled')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"infoMailEnabled\" component=\"div\" />  \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                      name=\"status\" \n                      className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('general.cancelled')}</option>\n                <option value=\"OPEN\" key={v4()}>{t('schedule.classes.no_instructor')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role')}>\n              <Field component=\"select\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role2')}>\n              <Field component=\"select\" \n                      name=\"role2\" \n                      className={(errors.role2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.level')}>\n              <Field component=\"select\" \n                    name=\"organizationLevel\" \n                    className={(errors.organizationLevels) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLevels.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLevels\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.class')}>\n          <Field component=\"select\" \n                name=\"organizationClasstype\" \n                className={(errors.organizationClasstype) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n            {inputData.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationClasstype\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> \n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces')}>\n              <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_walk_in')}>\n              <Field type=\"text\" \n                    name=\"walkInSpaces\" \n                    className={(errors.walkInSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"walkInSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.info_mail')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"infoMailContent\"\n            initialValue={values.infoMailContent}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"infoMailContent\", e.target.getContent())\n              setFieldTouched(\"infoMailContent\", true, true)\n            }}\n          />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n            {t('general.cancel')}\n        </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_CLASSES_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { DELETE_SCHEDULE_CLASS_WEEKLY_OTC, GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleClassWeeklyOTCDelete({t, match, history}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [deleteClassOTC] = useMutation(DELETE_SCHEDULE_CLASS_WEEKLY_OTC, {\n    onCompleted: () => { history.push(\"/schedule/classes/\") }\n  })\n  const query_vars = {\n    scheduleItem: schedule_item_id,\n    date: class_date\n  }\n\n  return (\n    <button className=\"icon btn-block btn btn-danger mb-3\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.class.edit.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.classes.class.edit.delete_success'),\n          deleteFunction: deleteClassOTC,\n          functionVariables: { \n            variables: {\n              input: {\n                scheduleItem: schedule_item_id,\n                date: class_date\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, variables: query_vars },\n              { query: GET_CLASSES_QUERY, variables: get_list_query_variables() },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-white\"><Icon prefix=\"fe\" name=\"trash-2\" /> {\" \"} {t(\"schedule.classes.class.edit.delete_all_changes\")}</span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassWeeklyOTCDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, UPDATE_SCHEDULE_CLASS_WEEKLY_OTC } from './queries'\nimport { GET_CLASSES_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { SCHEDULE_CLASS_EDIT_OTC_SCHEMA } from './yupSchema'\nimport ScheduleClassEditForm from './ScheduleClassEditForm'\nimport { TimeStringToJSDateOBJ, dateToLocalISOTime } from '../../../../../tools/date_tools'\n\nimport { class_subtitle } from \"../tools\"\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ButtonListWeekChooser from '../../../../ui/ButtonListWeekChooser'\nimport ScheduleClassWeeklyOTCDelete from './ScheduleClassWeeklyOTCDelete'\nimport ScheduleClassBack from \"../ScheduleClassBack\"\nimport ClassMenu from \"../ClassMenu\"\n\n\nfunction ScheduleClassEdit({ t, match, history }) {\n  let showDelete = false\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n  console.log(scheduleItemId)\n  console.log(classDate)\n\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: classDate\n  }\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, {\n    variables: query_vars,\n  })\n  const [ updateScheduleClassWeeklyOTC ] = useMutation(UPDATE_SCHEDULE_CLASS_WEEKLY_OTC)\n\n  function onClickPrevious() {\n    const previousWeek = moment(classDate).subtract(7, \"days\").format('YYYY-MM-DD')\n    history.push(`/schedule/classes/class/edit/${scheduleItemId}/${previousWeek}`)\n  }\n  function onClickNext () {\n    const previousWeek = moment(classDate).add(7, \"days\").format('YYYY-MM-DD')\n    history.push(`/schedule/classes/class/edit/${scheduleItemId}/${previousWeek}`)\n  }\n\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  console.log('queryData')\n  console.log(queryData)\n\n  const scheduleItem = queryData.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: classDate\n  })\n  \n  let initialData\n  var initialValues = {}\n  if (queryData.scheduleItemWeeklyOtcs.edges.length) {\n    showDelete = true\n\n    initialData = queryData.scheduleItemWeeklyOtcs.edges[0].node\n\n    initialValues.status = initialData.status\n    initialValues.description = initialData.description\n    if (initialData.account) {\n      initialValues.account = initialData.account.id\n    }\n    if (initialData.account2) {\n      initialValues.account2 = initialData.account2.id\n    }\n    initialValues.role = initialData.role || \"\"\n    initialValues.role2 = initialData.role2 || \"\"\n    if (initialData.organizationLocationRoom) {\n      initialValues.organizationLocationRoom = initialData.organizationLocationRoom.id\n    }\n    if (initialData.organizationClasstype) {\n      initialValues.organizationClasstype = initialData.organizationClasstype.id\n    }\n    if (initialData.organizationLevel) {\n      initialValues.organizationLevel = initialData.organizationLevel.id\n    }\n    if (initialData.timeStart) {\n      initialValues.timeStart = TimeStringToJSDateOBJ(initialData.timeStart)\n    }\n    if (initialData.timeEnd) {\n      initialValues.timeEnd = TimeStringToJSDateOBJ(initialData.timeEnd)\n    }\n    if (initialData.spaces) {\n      initialValues.spaces = initialData.spaces\n    }\n    if (initialData.walkInSpaces) {\n      initialValues.walkInSpaces = initialData.walkInSpaces\n    }\n    if (initialData.infoMailEnabled) {\n      initialValues.infoMailEnabled = initialData.infoMailEnabled\n    }\n    if (initialData.infoMailContent) {\n      initialValues.infoMailContent = initialData.infoMailContent\n    }\n    \n  } else {\n    console.log('setting initial values')\n    initialValues.status = \"\"\n    initialValues.description = \"\"\n    initialValues.account = \"\"\n    initialValues.role = \"\"\n    initialValues.account2 = \"\"\n    initialValues.role2 = \"\"\n    initialValues.organizationLocationRoom = \"\"\n    initialValues.organizationClasstype = \"\"\n    initialValues.organizationLevel = \"\"\n    initialValues.timeStart = \"\"\n    initialValues.timeEnd = \"\"\n    initialValues.infoMailEnabled = false\n    initialValues.infoMailContent = \"\"\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n              <ButtonListWeekChooser \n                showCurrent={false}\n                onClickPrevious={onClickPrevious}\n                onClickNext={onClickNext}\n              />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('general.edit')}</Card.Title>\n                </Card.Header>\n                <Card.Body>\n                  <Formik\n                    initialValues={initialValues}\n                    validationSchema={SCHEDULE_CLASS_EDIT_OTC_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n\n                        console.log(\"SUBMIT VALUES\")\n                        console.log(values)\n\n                        let timeStart = undefined\n                        let timeEnd = undefined\n                        if (values.timeStart) {\n                          timeStart = dateToLocalISOTime(values.timeStart)\n                        }\n                        \n                        if (values.timeEnd) {\n                          timeEnd = dateToLocalISOTime(values.timeEnd)  \n                        }\n                        \n\n                        updateScheduleClassWeeklyOTC({ variables: {\n                          input: {\n                            scheduleItem: scheduleItemId,\n                            date: classDate,\n                            status: values.status,\n                            description: values.description,\n                            account: values.account,\n                            role: values.role,\n                            account2: values.account2,\n                            role2: values.role2,\n                            organizationLocationRoom: values.organizationLocationRoom,\n                            organizationClasstype: values.organizationClasstype,\n                            organizationLevel: values.organizationLevel,\n                            timeStart: timeStart,\n                            timeEnd: timeEnd,\n                            spaces: parseInt(values.spaces),\n                            walkInSpaces: parseInt(values.walkInSpaces),\n                            infoMailEnabled: values.infoMailEnabled,\n                            infoMailContent: values.infoMailContent\n                          }\n                        }, refetchQueries: [\n                            {query: GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, variables: query_vars},\n                            {query: GET_CLASSES_QUERY, variables: get_list_query_variables()},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.classes.class.edit.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                          console.log('there was an error sending the query', error.graphQLErrors)\n                          setSubmitting(false)\n                        })\n                      }\n                    }\n                    >\n                    {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                      <ScheduleClassEditForm\n                        inputData={queryData}\n                        isSubmitting={isSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                      >\n                        {console.log(errors)}\n                      </ScheduleClassEditForm>\n                    )}\n                  </Formik>\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col xs={12} sm={12} md={3}>\n              {(showDelete) ? \n                <ScheduleClassWeeklyOTCDelete /> : \"\"\n              }\n              <ClassMenu \n                scheduleItemId={scheduleItemId}\n                classDate={classDate}\n                activeLink=\"edit\"\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_ITEM_PRICES_QUERY = gql`\n  query ScheduleItemPrices($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemPrices(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationClasspassDropin {\n            id\n            name\n          }\n          organizationClasspassTrial {\n            id\n            name\n          }\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY = gql`\nquery ScheduleItemPrice($before: String, $after: String, $id: ID!) {\n  scheduleItemPrice(id: $id) {\n    id\n    organizationClasspassDropin {\n      id\n      name\n    }\n    organizationClasspassTrial {\n      id\n      name\n    }\n    dateStart\n    dateEnd       \n  }\n  organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SCHEDULE_ITEM_PRICE = gql`\n  mutation CreateScheduleItemPrice($input:CreateScheduleItemPriceInput!) {\n    createScheduleItemPrice(input:$input) {\n      scheduleItemPrice {\n        id\n      } \n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_ITEM_PRICE = gql`\nmutation UpdateScheduleItemPrice($input: UpdateScheduleItemPriceInput!) {\n  updateScheduleItemPrice(input:$input) {\n    scheduleItemPrice {\n      id\n    } \n  }\n}\n`\n\nexport const DELETE_SCHEDULE_ITEM_PRICE = gql`\n  mutation DeleteScheduleItemPrice($input: DeleteScheduleItemPriceInput!) {\n    deleteScheduleItemPrice(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_ITEM_PRICE, GET_SCHEDULE_ITEM_PRICES_QUERY } from \"./queries\"\n\nimport ButtonDelete from '../../../../ui/ButtonDelete';\n\n\nfunction ScheduleClassPriceDelete({t, match, history, id}) {\n  const classId = match.params.class_id\n  const [deleteClassPrice] = useMutation(DELETE_SCHEDULE_ITEM_PRICE)\n  const query_vars = {\n    scheduleItem: classId\n  }\n\n  return (\n    <ButtonDelete \n      msgConfirm={t(\"schedule.classes.prices.delete_confirm_msg\")}\n      msgDescription={\"\"}\n      msgSuccess={t('schedule.classes.prices.delete_success')}\n      deleteFunction={deleteClassPrice}\n      deleteFunctionVariables={\n        { \n          variables: {\n            input: {\n              id: id\n            },\n          }, \n          refetchQueries: [\n            { query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: query_vars },\n          ]\n        }\n      }\n    />\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassPriceDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Table,\n  Card\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../../ui/ButtonAdd\"\nimport ButtonEdit from \"../../../../ui/ButtonEdit\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceDelete from './ScheduleClassPriceDelete'\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassPrices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const classId = match.params.class_id\n  const menuActiveLink = \"prices\" \n  const cardTitle = t('schedule.classes.prices.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    <ButtonAdd addUrl={`/schedule/classes/all/prices/${classId}/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_ITEM_PRICES_QUERY, {\n    variables: { scheduleItem: classId }\n  })\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.prices.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemPrices.edges.length) { return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.prices.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )}\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={false}\n    >\n    <ContentCard \n      cardTitle={cardTitle}\n      // headerContent={headerOptions}\n      hasCardBody={false}\n      pageInfo={data.scheduleItemPrices.pageInfo}\n      onLoadMore={() => {\n      fetchMore({\n        variables: {\n          after: data.scheduleItemPrices.pageInfo.endCursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.scheduleItemPrices.edges\n          const pageInfo = fetchMoreResult.scheduleItemPrices.pageInfo\n\n          return newEdges.length\n            ? {\n                // Put the new locations at the end of the list and update `pageInfo`\n                // so we have the new `endCursor` and `hasNextPage` values\n                data: { \n                  scheduleItemPrices: {\n                    __typename: previousResult.scheduleItemPrices.__typename,\n                    edges: [ ...previousResult.scheduleItemPrices.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              }\n            : previousResult\n          }\n        })\n      }} >\n      <div>\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.dropin')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.trial')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.scheduleItemPrices.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                {console.log(node)}\n                <Table.Col key={v4()}> \n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col key={v4()}> \n                  {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {node.organizationClasspassDropin.name}\n                </Table.Col>\n                <Table.Col>\n                  {(node.organizationClasspassTrial) ? node.organizationClasspassTrial.name : \"\"}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <ButtonEdit editUrl={`/schedule/classes/all/prices/${classId}/edit/${node.id}`} />\n                  <ScheduleClassPriceDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        </div>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassPrices))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../../ui/ButtonFormSubmit'\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleClassPriceForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.classpass_dropin')}>\n              <Field component=\"select\" \n                      name=\"organizationClasspassDropin\" \n                      className={(errors.organizationClasspassDropin) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class price form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.organizationClasspasses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationClasspassDropin\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.classpass_trial')}>\n              <Field component=\"select\" \n                      name=\"organizationClasspassTrial\" \n                      className={(errors.organizationClasspassTrial) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                {inputData.organizationClasspasses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationClasspassTrial\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <ButtonFormSubmit disabled={isSubmitting} />\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassPriceForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\n\nconst ScheduleClassPriceBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={`/schedule/classes/all/prices/${classId}`} />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassPriceBack))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_ITEM_PRICE } from './queries'\nimport ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\n\n\nfunction ScheduleClassPriceAdd({ t, history, match }) {\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/prices/${classId}`\n  const cardTitle = t('schedule.classes.prices.title_add')\n  const menuActiveLink = \"prices\"\n  const pageHeaderButtonList = <ScheduleClassPriceBack classId={classId} />\n  const { loading, error, data, } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleClassPrice] = useMutation(ADD_SCHEDULE_ITEM_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          organizationClasspassDropin: \"\",\n          organizationClasspassTrial: \"\",\n        }}\n        // validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassPrice({ variables: {\n              input: {\n                scheduleItem: match.params.class_id,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd,\n                organizationClasspassDropin: values.organizationClasspassDropin,\n                organizationClasspassTrial: values.organizationClasspassTrial\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.classes.prices.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassPriceForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n    </Formik>\n  </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY, GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY, UPDATE_SCHEDULE_ITEM_PRICE } from './queries'\nimport ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\n\nfunction ScheduleClassPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/prices/${classId}`\n  const menuActiveLink = \"prices\"\n  const cardTitle = t('schedule.classes.prices.title_edit')\n  const pageHeaderButtonList = <ScheduleClassPriceBack classId={classId} />\n  const { loading, error, data, } = useQuery(GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [editScheduleClassPrice] = useMutation(UPDATE_SCHEDULE_ITEM_PRICE, {\n    onCompleted: () => history.push(returnUrl)\n  })\n\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  let initialOrganizationClasspassDropin\n  let initialOrganizationClasspassTrial\n\n  if (inputData.scheduleItemPrice.organizationClasspassDropin) {\n    initialOrganizationClasspassDropin = inputData.scheduleItemPrice.organizationClasspassDropin.id\n  }\n\n  if (inputData.scheduleItemPrice.organizationClasspassTrial) {\n    initialOrganizationClasspassTrial = inputData.scheduleItemPrice.organizationClasspassTrial.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (inputData.scheduleItemPrice.dateStart) {\n    dateStart = new Date(inputData.scheduleItemPrice.dateStart)\n  }\n  if (inputData.scheduleItemPrice.dateEnd) {\n    dateEnd = new Date(inputData.scheduleItemPrice.dateEnd)\n  }\n\n\n  return (\n  <ClassEditBase \n    cardTitle={cardTitle}\n    menuActiveLink={menuActiveLink}\n    pageHeaderButtonList={pageHeaderButtonList}\n  >\n    <Formik\n      initialValues={{ \n        dateStart: dateStart,\n        dateEnd: dateEnd,\n        organizationClasspassDropin: initialOrganizationClasspassDropin,\n        organizationClasspassTrial: initialOrganizationClasspassTrial,\n      }}\n      // validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n      onSubmit={(values, { setSubmitting }) => {\n\n          let dateEnd\n          if (values.dateEnd) {\n            dateEnd = dateToLocalISO(values.dateEnd)\n          } else {\n            dateEnd = values.dateEnd\n          }\n\n          editScheduleClassPrice({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateEnd,\n              organizationClasspassDropin: values.organizationClasspassDropin,\n              organizationClasspassTrial: values.organizationClasspassTrial\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: { scheduleItem: match.params.class_id }},\n              // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.classes.prices.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n      >\n      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n        <ScheduleClassPriceForm\n          inputData={inputData}\n          isSubmitting={isSubmitting}\n          setFieldTouched={setFieldTouched}\n          setFieldValue={setFieldValue}\n          errors={errors}\n          values={values}\n          returnUrl={returnUrl}\n        />\n      )}\n  </Formik>\n</ClassEditBase>\n  )\n}\n\n\n// class ScheduleClassInstructorEdit extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Schedule class instructor edit props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n//     const class_id = match.params.class_id\n//     const returnUrl = \"/schedule/classes/all/instructors/\" + class_id\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Query query={GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY} variables={{id: id}}>\n//             {({ loading, error, data, refetch }) => {\n//               // Loading\n//               if (loading) return <p>{t('general.loading_with_dots')}</p>\n//               // Error\n//               if (error) {\n//                 console.log(error)\n//                 return <p>{t('general.error_sad_smiley')}</p>\n//               }\n    \n//               console.log('query data')\n//               console.log(data)\n//               const inputData = data\n//               const initialData = data.scheduleItemAccount\n\n//               let initialAccount2 = \"\"\n//               if (initialData.account2) {\n//                 initialAccount2 =  initialData.account2.id\n//               } \n    \n//               return (\n//                 <ClassEditBase \n//                   card_title={t('schedule.classes.instructors.title_edit')}\n//                   menu_activeLink=\"instructors\"\n//                   sidebar_button={<ScheduleClassInstructorBack classId={class_id} />}\n//                 >\n//                   <Mutation mutation={UPDATE_SCHEDULE_CLASS_INSTRUCTOR} onCompleted={() => history.push(returnUrl)}> \n//                     {(addScheduleClassInstructor, { data }) => (\n//                         <Formik\n//                             initialValues={{  \n//                               dateStart: initialData.dateStart,\n//                               dateEnd: initialData.dateEnd,\n//                               account: initialData.account.id,\n//                               role: initialData.role,\n//                               account2: initialAccount2,\n//                               role2: initialData.role2,\n//                             }}\n//                             validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n//                             onSubmit={(values, { setSubmitting }) => {\n    \n//                                 let dateEnd\n//                                 if (values.dateEnd) {\n//                                   dateEnd = dateToLocalISO(values.dateEnd)\n//                                 } else {\n//                                   dateEnd = values.dateEnd\n//                                 }\n    \n//                                 addScheduleClassInstructor({ variables: {\n//                                   input: {\n//                                     id: match.params.id,\n//                                     account: values.account,\n//                                     role: values.role,\n//                                     account2: values.account2,\n//                                     role2: values.role2,\n//                                     dateStart: dateToLocalISO(values.dateStart),\n//                                     dateEnd: dateEnd\n//                                   }\n//                                 }, refetchQueries: [\n//                                     {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n//                                     // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n//                                 ]})\n//                                 .then(({ data }) => {\n//                                     console.log('got data', data);\n//                                     toast.success((t('schedule.classes.instructors.toast_edit_success')), {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                   }).catch((error) => {\n//                                     toast.error((t('general.toast_server_error')) +  error, {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     console.log('there was an error sending the query', error)\n//                                     setSubmitting(false)\n//                                   })\n//                             }}\n//                             >\n//                             {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n//                               <ScheduleClassInstructorForm\n//                                 inputData={inputData}\n//                                 isSubmitting={isSubmitting}\n//                                 setFieldTouched={setFieldTouched}\n//                                 setFieldValue={setFieldValue}\n//                                 errors={errors}\n//                                 values={values}\n//                                 returnUrl={returnUrl}\n//                               >\n//                                 {console.log(errors)}\n//                               </ScheduleClassInstructorForm>\n//                             )}\n//                         </Formik>\n//                     )}\n//                   </Mutation>\n//                 </ClassEditBase>\n//               )\n//             }}\n//           </Query>\n//         </div>\n//       </SiteWrapper>\n//     )\n//   }\n// }\n\n\nexport default withTranslation()(withRouter(ScheduleClassPriceEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container,\n  Grid\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n// import ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ScheduleEventsBase({ t, match, history, children, pageHeaderButtonList=\"\" }) {\n  return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.events.title\")}>\n              <div className=\"page-options d-flex\">\n                {pageHeaderButtonList}\n              </div>\n            </Page.Header>\n            <Grid.Row>\n            <Grid.Col md={12}>\n              { children }\n            </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n      </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventsBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENTS_QUERY = gql`\n  query ScheduleEvents($before:String, $after:String, $archived:Boolean!) {\n    scheduleEvents(first: 100, before: $before, after:$after, archived:$archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          autoSendInfoMail\n          organizationLocation {\n            id\n            name\n          }\n          name\n          tagline\n          preview\n          description\n          organizationLevel {\n            id\n            name\n          }\n          instructor {\n            id \n            fullName\n          }\n          instructor2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd\n          timeStart\n          timeEnd\n          infoMailContent\n          scheduleItems {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_EVENT_QUERY = gql`\n  query ScheduleEvent($id: ID!, $before: String, $after: String) {\n    scheduleEvent(id: $id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      autoSendInfoMail\n      organizationLocation {\n        id\n        name\n      }\n      name\n      tagline\n      preview\n      description\n      organizationLevel {\n        id\n        name\n      }\n      instructor {\n        id \n        fullName\n      }\n      instructor2 {\n        id\n        fullName\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      infoMailContent\n      scheduleItems {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      createdAt\n      updatedAt\n    }\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventInputValues($after: String, $before: String) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\nexport const ARCHIVE_SCHEDULE_EVENT = gql`\n  mutation ArchiveScheduleEvent($input: ArchiveScheduleEventInput!) {\n    archiveScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n      }\n    }\n  }\n`\n\nexport const DUPLICATE_SCHEDULE_EVENT = gql`\n  mutation DuplicateScheduleEvent($input: DuplicateScheduleEventInput!) {\n    duplicateScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n      }\n    }\n  }\n`\n","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let archived = localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED)\n  if (archived === null) {\n    archived = false\n  }\n\n  let queryVars = {\n    archived: (archived === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { ARCHIVE_SCHEDULE_EVENT, GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\nimport { get_list_query_variables } from './tools'\n\nimport ButtonArchive from '../../ui/ButtonArchive'\nimport ButtonUnArchive from '../../ui/ButtonUnArchive'\n\n\nfunction ScheduleEventArchive({t, match, history, node}) {\n  const [archiveScheduleEvent] = useMutation(ARCHIVE_SCHEDULE_EVENT)\n  const refetchQueries = [\n    { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() },\n  ]\n\n  if (!node.archived) {\n    return (\n      <ButtonArchive\n        msgConfirm={t(\"schedule.events.archive_confirm_msg\")}\n        msgSuccess={t(\"general.archived\")}\n        archiveFunction={archiveScheduleEvent}\n        archiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: true\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n\n  } else {\n    return (\n      <ButtonUnArchive\n        msgConfirm={t(\"schedule.events.unarchive_confirm_msg\")}\n        msgSuccess={t(\"general.unarchived\")}\n        unArchiveFunction={archiveScheduleEvent}\n        unArchiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: false\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n  }\n}\n\nexport default withTranslation()(withRouter(ScheduleEventArchive))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport ScheduleEventsBase from \"./ScheduleEventsBase\"\nimport ScheduleEventArchive from \"./ScheduleEventArchive\"\n\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonConfirm from '../../ui/ButtonConfirm'\nimport ButtonEdit from '../../ui/ButtonEdit'\nimport { GET_SCHEDULE_EVENTS_QUERY, DUPLICATE_SCHEDULE_EVENT } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED)) {\n  localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, false) \n} \n\n\nfunction ScheduleEvents({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_SCHEDULE_EVENTS_QUERY, {\n    variables: get_list_query_variables()\n  })\n  const [duplicateScheduleEvent] = useMutation(DUPLICATE_SCHEDULE_EVENT)\n\n  const pageHeaderButtonList = <HasPermissionWrapper permission=\"add\" resource=\"scheduleevent\">\n    <ButtonAdd addUrl=\"/schedule/events/add\" />\n  </HasPermissionWrapper>\n\n  const cardHeaderContent = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <ContentCard \n          cardTitle={t('schedule.events.title')}\n          headerContent={cardHeaderContent}\n        >\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </ContentCard>\n      </ScheduleEventsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <ContentCard \n          cardTitle={t('schedule.events.title')}\n          headerContent={cardHeaderContent}\n        >\n          {t(\"schedule.events.error_loading_data\")}\n        </ContentCard>\n      </ScheduleEventsBase>\n    )\n  }\n\n  console.log(data)\n\n  const scheduleEvents = data.scheduleEvents\n\n  return (\n    <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={t('schedule.events.title')}\n        headerContent={cardHeaderContent}\n        hasCardBody={false}\n        pageInfo={scheduleEvents.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: scheduleEvents.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.scheduleEvents.edges\n                  const pageInfo = fetchMoreResult.scheduleEvents.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        scheduleEvents: {\n                          __typename: previousResult.scheduleEvents.__typename,\n                          edges: [ ...previousResult.scheduleEvents.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.event')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            { scheduleEvents.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  { moment(node.dateStart).format(dateFormat) } <br /> \n                </Table.Col>\n                <Table.Col>\n                  <span title={ node.name }>{ node.name.trunc(36) }</span> <br />\n                  <small className=\"text-muted\">\n                    { node.organizationLocation.name }\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {\n                    (node.instructor) ? node.instructor.fullName.trunc(30) : \"\"\n                  }\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.displayShop} />\n                </Table.Col>\n                {/* <Table.Col>\n                  { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                  <span className=\"text-muted\">\n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col> */}\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <HasPermissionWrapper key={v4()} permission=\"add\" resource=\"scheduleevent\">\n                    <ButtonConfirm\n                      title={t(\"schedule.events.confirm_duplicate\")}\n                      msgConfirm={<p>{node.name} { moment(node.dateStart).format(dateFormat) }</p>}\n                      msgSuccess={(t(\"schedule.events.toast_duplicate_success\"))}\n                      actionFunction={duplicateScheduleEvent} \n                      actionFunctionVariables={{\n                        variables: {input: {id: node.id}},\n                        refetchQueries: [\n                          { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n                        ]\n                      }}\n                      buttonClass=\"btn-secondary\"\n                      buttonIcon={<Icon name=\"copy\" />}\n                      buttonText={t(\"general.duplicate\")}\n                      buttonTextColor=\"\"\n                    />\n                  </HasPermissionWrapper>\n                  {(node.archived) ? \n                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <ButtonEdit editUrl={`/schedule/events/edit/${node.id}`} />\n                  }\n                  <ScheduleEventArchive node={node} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ScheduleEventsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEvents))\n\n\n// const ScheduleEvents = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_LEVELS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationLevels: levels}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <p>{t('organization.levels.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!levels.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={levels.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: levels.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationLevels.edges\n//                                     const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new levels at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationLevels: {\n//                                             __typename: previousResult.organizationLevels.__typename,\n//                                             edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {levels.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/levels/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_EDIT_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  displayShop: Yup.boolean(),\n  autoSendInfoMail: Yup.boolean(),\n  organizationLocation: Yup.string()\n    .required(t('yup.field_required')),\n  organizationLevel: Yup.string(),\n  instructor: Yup.string(),\n  instructor2: Yup.string(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  tagline: Yup.string(),\n  preview: Yup.string(),\n  description: Yup.string(),\n  infoMailContent: Yup.string()\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nconst ScheduleEventForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, values, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayPublic\" \n                  checked={values.displayPublic} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayShop\" \n                checked={values.displayShop} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.shop')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayShop\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoSendInfoMail\" \n                checked={values.autoSendInfoMail} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.auto_send_info_mail')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoSendInfoMail\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.location')}>\n            <Field component=\"select\" \n                  name=\"organizationLocation\" \n                  className={(errors.organizationLocation) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t(\"schedule.event.location_please_select\")}</option>\n              {inputData.organizationLocations.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationLocation\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.level')}>\n            <Field component=\"select\" \n                  name=\"organizationLevel\" \n                  className={(errors.organizationLevel) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.organizationLevels.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationLevel\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.instructor')}>\n            <Field component=\"select\" \n                  name=\"instructor\" \n                  className={(errors.instructor) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t(\"schedule.event.instructor_please_select\")}</option>\n              {inputData.accounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"instructor\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.instructor2')}>\n            <Field component=\"select\" \n                  name=\"instructor2\" \n                  className={(errors.instructor2) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.accounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"instructor2\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.tagline')}>\n            <Field type=\"text\" \n                    name=\"tagline\" \n                    className={(errors.tagline) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"tagline\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.preview')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"preview\"\n              initialValue={values.preview}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"preview\", e.target.getContent())\n                setFieldTouched(\"preview\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"preview\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.infoMailContent')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"infoMailContent\"\n              initialValue={values.infoMailContent}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"infoMailContent\", e.target.getContent())\n                setFieldTouched(\"infoMailContent\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"infoMailContent\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n      <Link to={returnUrl}>\n        <Button color=\"link\">\n          {t('general.cancel')}\n        </Button>\n      </Link>\n    </Card.Footer>\n  </FoForm>\n)\n  \n  \nexport default withTranslation()(withRouter(ScheduleEventForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"./tools\"\n\nimport { GET_SCHEDULE_EVENTS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { SCHEDULE_EVENT_EDIT_SCHEMA } from './yupSchema'\nimport ScheduleEventForm from './ScheduleEventForm'\nimport ScheduleEventsBase from './ScheduleEventsBase'\nimport ButtonBack from '../../ui/ButtonBack';\n\n\nconst CREATE_SCHEDULE_EVENT = gql`\n  mutation CreateScheduleEvent($input:CreateScheduleEventInput!) {\n    createScheduleEvent(input: $input) {\n      scheduleEvent{\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventAdd({ t, history }) {\n  const returnUrl = \"/schedule/events\"\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleEvent ] = useMutation(CREATE_SCHEDULE_EVENT)\n\n  if (loading) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={t(\"schedule.events.add\")}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={t(\"schedule.events.add\")}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventsBase>\n    )\n  }\n\n  console.log(\"CREATE SCHEDULE EVENT INPUT DATA\")\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={t(\"schedule.events.add\")}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            displayShop: true,\n            name: \"\",\n            description: \"\",\n          }}\n          validationSchema={SCHEDULE_EVENT_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              createScheduleEvent({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  autoSentInfoMail: values.autoSentInfoMail,\n                  organizationLocation: values.organizationLocation,\n                  organizationLevel: values.organizationLevel,\n                  name: values.name,\n                  tagline: values.tagline,\n                  preview: values.preview,\n                  description: values.description,\n                  instructor: values.instructor,\n                  instructor2: values.instructor2,\n                  infoMailContent: values.infoMailContent,\n                }\n              }, refetchQueries: [\n                  { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('schedule.events.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <ScheduleEventForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </ScheduleEventsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventAdd))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport {\n  List\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nconst ScheduleEventMenu = ({ t, eventId, activeLink }) => (\n  <List.Group transparent={true}>\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"change\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}`}\n          icon=\"edit-2\"\n          active={(activeLink === 'general')}\n          >\n          {t('schedule.events.edit.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventticket\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/tickets`}\n          icon=\"clipboard\"\n          active={(activeLink === 'tickets')}\n          >\n          {t('schedule.events.tickets.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/activities`}\n          icon=\"calendar\"\n          active={(activeLink === 'activities')}\n          >\n          {t('schedule.events.activities.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventmedia\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/media`}\n          icon=\"image\"\n          active={(activeLink === 'media')}\n          >\n          {t('schedule.events.media.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventearlybird\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/earlybirds`}\n          icon=\"clock\"\n          active={(activeLink === 'earlybirds')}\n          >\n          {t('schedule.events.earlybirds.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventsubscriptiongroupdiscount\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/subscription_group_discounts`}\n          icon=\"edit\"\n          active={(activeLink === 'subscription_group_discounts')}\n          >\n          {t('schedule.events.subscription_group_discounts.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n  </List.Group>\n);\n\nexport default withTranslation()(ScheduleEventMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container,\n  Grid\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ScheduleEventEditMenu from \"./ScheduleEventEditMenu\"\nimport ButtonBack from '../../../ui/ButtonBack';\n\nfunction ScheduleEventEditBaseBase({ \n  t, \n  match, \n  history, \n  children, \n  returnUrl=\"/schedule/events\", \n  pageHeaderOptions, \n  activeLink,\n  pageSubTitle\n }) {\n  const eventId = match.params.event_id\n\n  return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.events.title\")} subTitle={pageSubTitle}>\n              <div className=\"page-options d-flex\">\n                {/* Page options can go here... */}\n                <ButtonBack returnUrl={returnUrl} />\n                { pageHeaderOptions }\n              </div>\n            </Page.Header>\n            <Grid.Row>\n            <Grid.Col md={9}>\n              { children }\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ScheduleEventEditMenu activeLink={activeLink} eventId={eventId}/>\n            </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n      </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEditBaseBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"./ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventEditBase({\n    t, \n    match, \n    history, \n    activeTab, \n    children, \n    activeLink, \n    cardTitle, \n    pageHeaderOptions,\n    returnUrl=\"/schedule/events\"}) \n  {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const eventId = match.params.event_id\n\n  // Set default card title\n  if (!cardTitle) {\n    cardTitle = t(\"schedule.events.edit.title\")\n  }\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  if (loading) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl} activeLink={activeLink}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl} activeLink={activeLink}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (event) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase \n      cardTitle={cardTitle} \n      pageHeaderOptions={pageHeaderOptions} \n      returnUrl={returnUrl} \n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle}</Card.Title>\n        </Card.Header>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n    )\n  }\n\nexport default withTranslation()(withRouter(ScheduleEventEditBase))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENTS_QUERY, GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport { SCHEDULE_EVENT_EDIT_SCHEMA } from '../yupSchema'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleEventEditBase from \"./ScheduleEventEditBase\"\nimport ScheduleEventForm from \"../ScheduleEventForm\"\nimport { get_list_query_variables } from \"../tools\"\n\n\nconst UPDATE_SCHEDULE_EVENT = gql`\n  mutation UpdateScheduleEvent($input: UpdateScheduleEventInput!) {\n    updateScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n        name\n      }\n    }\n  }\n`\n\nfunction ScheduleEventEdit({t, match, history}) {\n  const id = match.params.event_id\n  const returnUrl = \"/schedule/events\"\n  const activeLink = \"general\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleEvent ] = useMutation(UPDATE_SCHEDULE_EVENT)\n\n\n  if (loading) {\n    return (\n      <ScheduleEventEditBase activeLink={activeLink}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </ScheduleEventEditBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventEditBase activeLink={activeLink}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </ScheduleEventEditBase>\n    )\n  }\n\n  const initialData = data.scheduleEvent\n  const inputData = data\n\n  let initialOrgranizationlevel = \"\"\n  if (initialData.organizationLevel) {\n    initialOrgranizationlevel = initialData.organizationLevel.id\n  }\n\n  let initialInstructor = \"\"\n  if (initialData.instructor) {\n    initialInstructor = initialData.instructor.id\n  }\n\n  let initialInstructor2 = \"\"\n  if (initialData.instructor2) {\n    initialInstructor2 = initialData.instructor2.id\n  }\n\n  return (\n    <ScheduleEventEditBase activeLink={activeLink}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.displayPublic,\n            displayShop: initialData.displayShop,\n            autoSendInfoMail: initialData.autoSendInfoMail,\n            organizationLocation: initialData.organizationLocation.id,\n            organizationLevel: initialOrgranizationlevel,\n            name: initialData.name,\n            tagline: initialData.tagline,\n            preview: initialData.preview,\n            description: initialData.description,\n            instructor: initialInstructor,\n            instructor2: initialInstructor2,\n            infoMailContent: initialData.infoMailContent,\n          }}\n          validationSchema={SCHEDULE_EVENT_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let inputValues = {\n                id: id,\n                displayPublic: values.displayPublic,\n                displayShop: values.displayShop,\n                autoSendInfoMail: values.autoSendInfoMail,\n                organizationLocation: values.organizationLocation,\n                organizationLevel: values.organizationLevel,\n                name: values.name,\n                tagline: values.tagline,\n                preview: values.preview,\n                description: values.description,\n                infoMailContent: values.infoMailContent,\n              }\n\n              if (values.instructor) {\n                inputValues['instructor'] = values.instructor\n              }\n\n              if (values.instructor2) {\n                inputValues['instructor2'] = values.instructor2\n              }\n\n              updateScheduleEvent({ variables: {\n                input: inputValues\n              }, refetchQueries: [\n                  { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.events.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <ScheduleEventForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_ACTIVITIES_QUERY = gql`\nquery ScheduleItem($before:String, $after:String, $scheduleEvent:ID!) {\n  scheduleItems(first:100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        displayPublic\n        scheduleEvent {\n          id\n          name\n        }\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        name\n        spaces\n        countAttendingAndBooked\n        dateStart\n        timeStart\n        timeEnd\n        account {\n          id\n          fullName\n        }\n        account2 {\n          id\n          fullName\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const GET_SCHEDULE_EVENT_ACTIVITY_QUERY = gql`\nquery ScheduleEventActivity($before:String, $after:String, $id:ID!) {\n  scheduleItem(id: $id) {\n    id\n    displayPublic\n    name\n    spaces\n    dateStart\n    timeStart\n    timeEnd\n    organizationLocationRoom {\n      id\n      name\n      organizationLocation {\n        id\n        name\n      }\n    }\n    account {\n      id\n      fullName\n    }\n    account2 {\n      id\n      fullName\n    }\n  }\n  accounts(first: 100, before: $before, after: $after, isActive:true, instructor: true) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        fullName\n      }\n    }\n  }\n  organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n        organizationLocation {\n          id \n          name\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation DeleteScheduleItem($input: DeleteScheduleItemInput!) {\n    deleteScheduleItem(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventActivityInputValues($after: String, $before: String) {\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"./ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventEditListBase({\n  t, \n  match, \n  history, \n  activeTab, \n  pageInfo, \n  onLoadMore, \n  activeLink, \n  children, \n  pageHeaderOptions=\"\",\n  pageSubTitle=\"\",\n  returnUrl=\"/schedule/events\"\n}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.edit.title\")\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n\nif (loading) {\n  return (\n    <ScheduleEventEditBaseBase \n      pageHeaderOptions={pageHeaderOptions} \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nif (error) {\n  return (\n    <ScheduleEventEditBaseBase \n      pageHeaderOptions={pageHeaderOptions} \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nconst event = data.scheduleEvent\nconst dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\nconst cardSubTitle = (event) ? \n<span className=\"text-muted\">\n  - {event.name + \" \" + dateStart}\n</span> : \"\"\n\nreturn (\n  <ScheduleEventEditBaseBase \n    pageHeaderOptions={pageHeaderOptions} \n    activeLink={activeLink} \n    pageSubTitle={pageSubTitle}\n    returnUrl={returnUrl}\n  >\n    <ContentCard \n      cardTitle={<span>{cardTitle} {cardSubTitle}</span>}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n      hasCardBody={false}\n    >\n      {children}\n    </ContentCard>\n  </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEditListBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_ACTIVITY, GET_SCHEDULE_EVENT_ACTIVITIES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventActivityDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventActivity] = useMutation(DELETE_SCHEDULE_EVENT_ACTIVITY)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.activities.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.activities.delete_success'),\n          deleteFunction: deleteScheduleEventActivity,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityDelete))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport { TOKEN_REFRESH } from '../../../../queries/system/auth';\nimport { refreshTokenAndOpenExportLinkInNewTab } from '../../../../tools/refresh_token_and_open_export_link';\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventActivityDelete from \"./ScheduleEventActivityDelete\"\nimport moment from 'moment';\n\n\nfunction ScheduleItems({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"activities\"\n  const exportUrl = `/d/export/schedule_event/activities/attendance/${eventId}`\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  const pageHeaderOptions = <React.Fragment>\n    {/* Export Active Accounts */}\n    <Button\n      color=\"secondary\"\n      icon=\"download-cloud\"\n      className=\"ml-2\"\n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n        t, doTokenRefresh, history, exportUrl\n      )}\n    >\n      {t('general.export')} \n    </Button>\n    <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/activities/add`} className=\"ml-2\" />\n  </React.Fragment>\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  const scheduleItems = data.scheduleItems\n  const pageInfo = data.scheduleItems.pageInfo\n\n  // Empty list\n  if (!scheduleItems.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.activities.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleItems.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleItems.edges\n        const pageInfo = fetchMoreResult.scheduleItems.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleItems: {\n                __typename: previousResult.scheduleItems.__typename,\n                edges: [ ...previousResult.scheduleItems.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.filled')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleItems.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)} <br />\n                  {/* Start & end time */}\n                  <small className=\"text-muted\">\n                    {moment(node.dateStart + ' ' + node.timeStart).format(timeFormat)} {' - '}\n                    {moment(node.dateStart + ' ' + node.timeEnd).format(timeFormat)} { ' ' }\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {node.name} <br />\n                  <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} className=\"text-muted\"/>\n                </Table.Col>\n                <Table.Col>\n                  {node.organizationLocationRoom.organizationLocation.name} <br />\n                  <small className=\"text-muted\">{node.organizationLocationRoom.name}</small>\n                </Table.Col>\n                <Table.Col>\n                  {node.account && node.account.fullName} \n                  {(node.account2) ? <span className=\"text-muted\"><br />{node.account2.fullName}</span> : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {node.countAttendingAndBooked}/{node.spaces}\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.displayPublic} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/activities/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventActivityDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleItems))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_ACTIVITY_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  spaces: Yup.number()\n    .required(t('yup.field_required')),\n  organizationLocationRoom: Yup.string()\n    .required(t('yup.field_required')),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  timeStart: Yup.date()\n    .typeError(t('yup.time_required'))\n    .required(t('yup.field_required')),\n  timeEnd: Yup.date()\n    .typeError(t('yup.time_required'))\n    .required(t('yup.field_required')), \n  account: Yup.string(),\n  account2: Yup.string(),\n})","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventActivityBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../../ui/CSTimePicker\"\n\nfunction ScheduleEventActivityForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.events.activities.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              {/* {errors.timeStart}\n              {errors.timeStart && touched.timeStart ? (\n                <span className=\"invalid-feedback\">{errors.timeStart} - hacky thingy</span>\n              ) : null} */}\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.spaces')}>\n                <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Dimmer\n} from \"tabler-react\"\n\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\n\n\nconst ADD_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation CreateScheduleItem($input:CreateScheduleItemInput!) {\n    createScheduleItem(input: $input) {\n      scheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventActivityAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeLink = 'activities'\n  const cardTitle = t(\"schedule.events.activities.add\")\n\n  const [addScheduleEventTicket] = useMutation(ADD_SCHEDULE_EVENT_ACTIVITY, {\n    onCompleted: () => history.push(returnUrl),\n  })\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Dimmer active={true} loader={true} />\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n  console.log(inputData)\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: true,\n          name: '',\n          spaces: '',\n          organizationLocationRoom: '',\n          dateStart: new Date(),\n          timeStart: '',\n          timeEnd: '',\n          account: '',\n          account2: ''\n        }}\n        validationSchema={SCHEDULE_EVENT_ACTIVITY_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addScheduleEventTicket({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              frequencyType: \"SPECIFIC\",\n              frequencyInterval: 0,\n              scheduleItemType: \"EVENT_ACTIVITY\",\n              displayPublic: values.displayPublic,\n              name: values.name,\n              spaces: parseInt(values.spaces),\n              organizationLocationRoom: values.organizationLocationRoom,\n              account: values.account,\n              account2: values.account2,\n              dateStart: dateToLocalISO(values.dateStart),\n              timeStart: dateToLocalISOTime(values.timeStart),\n              timeEnd: dateToLocalISOTime(values.timeEnd),\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.activities.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventActivityForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../ui/CardTabs\"\n\nfunction ScheduleEventActivityTabs({ t, activeTab, eventId, scheduleItemId}) {\n  console.log(activeTab)\n\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"schedule.events.tickets.edit_menu.general\"), \n            link: `/schedule/events/edit/${eventId}/activities/edit/${scheduleItemId}`\n          },\n          {\n            name: \"attendance\", \n            title: t(\"schedule.events.tickets.edit_menu.attendance\"), \n            link: `/schedule/events/edit/${eventId}/activities/edit/${scheduleItemId}/attendance`\n          },\n      ]}\n      active={activeTab}\n    />\n  )\n}\n\nexport default withTranslation()(ScheduleEventActivityTabs)\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\nimport ScheduleEventActivityTabs from \"./ScheduleEventActivityTabs\"\n\n\nfunction ScheduleEventActivityEditBase({t, match, history, activeTab, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingActivity, error: errorActivity, data: dataActivity } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading || loadingActivity) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorActivity) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleItem = dataActivity.scheduleItem\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleItem) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleItem) ?\n  <span className=\"text-muted\">\n    - {scheduleItem.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityEditBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventActivityEditBase from \"./ScheduleEventActivityEditBase\"\nimport ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation UpdateScheduleItem($input:UpdateScheduleItemInput!) {\n    updateScheduleItem(input: $input) {\n      scheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\n\nfunction ScheduleEventActivityEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.activities.edit\")\n\n  const [updateScheduleEventTicket] = useMutation(UPDATE_SCHEDULE_EVENT_ACTIVITY)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n  }})\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventActivityEditBase>\n  )\n  if (error) return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventActivityEditBase>\n  )\n\n  const inputData = data\n  const scheduleItem = data.scheduleItem\n  console.log(inputData)\n\n// DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDateStart = null\n  if (scheduleItem.dateStart) {\n    initialDateStart = new Date(scheduleItem.dateStart)\n  }\n\n  let initialTimeStart = null\n  if (scheduleItem.timeStart) {\n    initialTimeStart = TimeStringToJSDateOBJ(scheduleItem.timeStart)\n  }\n  let initialTimeEnd = null\n  if (scheduleItem.timeEnd) {\n    initialTimeEnd = TimeStringToJSDateOBJ(scheduleItem.timeEnd)\n  }\n\n\n  return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: scheduleItem.displayPublic,\n          name: scheduleItem.name,\n          spaces: scheduleItem.spaces,\n          organizationLocationRoom: scheduleItem.organizationLocationRoom.id,\n          dateStart: initialDateStart,\n          timeStart: initialTimeStart,\n          timeEnd: initialTimeEnd,\n          account: (scheduleItem.account) ? scheduleItem.account.id : '',\n          account2: (scheduleItem.account2) ? scheduleItem.account2.id : ''\n        }}\n        validationSchema={SCHEDULE_EVENT_ACTIVITY_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateScheduleEventTicket({ variables: {\n            input: {\n              id: scheduleItemId,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              spaces: parseInt(values.spaces),\n              organizationLocationRoom: values.organizationLocationRoom,\n              account: values.account,\n              account2: values.account2,\n              dateStart: dateToLocalISO(values.dateStart),\n              timeStart: dateToLocalISOTime(values.timeStart),\n              timeEnd: dateToLocalISOTime(values.timeEnd),\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.activities.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventActivityForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventActivityEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_ITEM_ATTENDANCES_QUERY = gql`\nquery ScheduleItemAttendances($before:String, $after:String, $schedule_item:ID!) {\n  scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem:$schedule_item) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        bookingStatus\n        account {\n          id\n          fullName\n        }\n        accountScheduleEventTicket {\n          id\n          scheduleEventTicket {\n            name\n          }\n          cancelled\n        }\n      }\n    }\n  }\n}\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport { GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from '../queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../../queries'\n\nimport ScheduleEventActivityBack from \"../ScheduleEventActivityBack\"\nimport ScheduleEventEditBaseBase from \"../../edit/ScheduleEventEditBaseBase\"\nimport ScheduleEventActivityTabs from \"../ScheduleEventActivityTabs\"\n\n\nfunction ScheduleEventActivityAttendanceBase({t, match, history, activeTab, onLoadMore, pageInfo, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  console.log(activeTab)\n\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingActivity, error: errorActivity, data: dataActivity } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading || loadingActivity) {\n    return (\n      <ScheduleEventEditBaseBase  activeLink={activeLink} sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorActivity) {\n    return (\n      <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            {t(\"schedule.event.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleItem = dataActivity.scheduleItem\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleItem) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleItem) ?\n  <span className=\"text-muted\">\n    - {scheduleItem.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <ContentCard \n        cardTitle={<span>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</span>}\n        cardTabs={<ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>}\n        hasCardBody={false}\n        pageInfo={pageInfo}\n        onLoadMore={onLoadMore}\n      >\n        \n        {children}\n      </ContentCard>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventActivityTabs active={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n        {children}\n      </Card> */}\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAttendanceBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\"\n\nimport { GET_SCHEDULE_ITEM_ATTENDANCES_QUERY } from \"./queries\"\nimport ScheduleEventActivityBack from \"../ScheduleEventActivityBack\"\nimport ScheduleEventActivityAttendanceBase from \"./ScheduleEventActivityAttendanceBase\"\nimport BadgeBookingStatus from \"../../../../ui/BadgeBookingStatus\"\n\n\nfunction ScheduleEventActivityAttendance({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeTab = 'attendance'\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_ITEM_ATTENDANCES_QUERY, {\n    variables: {\n      schedule_item: scheduleItemId\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventActivityAttendanceBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventActivityAttendanceBase>\n  )\n  if (error) return (\n    <ScheduleEventActivityAttendanceBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventActivityAttendanceBase>\n  )\n\n  const scheduleItemAttendances = data.scheduleItemAttendances\n  console.log(data)\n  const pageInfo = scheduleItemAttendances.pageInfo\n\n  // Empty list\n  if (!scheduleItemAttendances.edges.length) { return (\n    <ScheduleEventActivityAttendanceBase activeLink={activeLink} activeTab={activeTab} sidebarContent={sidebarContent}>\n      <Card.Body>\n        <p>{t('schedule.events.activities.attendance.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventActivityAttendanceBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleItemAttendances.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n        const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new attendance items at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleItemAttendances: {\n                __typename: previousResult.scheduleItemAttendances.__typename,\n                edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventActivityAttendanceBase \n      // sidebarContent={sidebarContent} \n      // cardTitle={cardTitle} \n      activeTab={activeTab}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleItemAttendances.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.account.fullName}\n              </Table.Col>\n              <Table.Col>\n                <BadgeBookingStatus status={node.bookingStatus} />\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventActivityAttendanceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAttendance))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY = gql`\n  query ScheduleEventEarlybirds($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventEarlybirds(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          discountPercentage\n          dateStart\n          dateEnd\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_EARLYBIRD_QUERY = gql`\n  query ScheduleEventEarlybird($id:ID!) {\n    scheduleEventEarlybird(id: $id) {\n      id\n      discountPercentage\n      dateStart\n      dateEnd\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_EVENT_EARLYBIRD = gql`\n  mutation CreateScheduleEventEarlybird($input:CreateScheduleEventEarlybirdInput!) {\n    createScheduleEventEarlybird(input: $input) {\n      scheduleEventEarlybird {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_EVENT_EARLYBIRD = gql`\n  mutation UpdateScheduleEventEarlybird($input:UpdateScheduleEventEarlybirdInput!) {\n    updateScheduleEventEarlybird(input: $input) {\n      scheduleEventEarlybird {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_EARLYBIRD   = gql`\n  mutation DeleteScheduleEventEarlybird($input: DeleteScheduleEventEarlybirdInput!) {\n    deleteScheduleEventEarlybird(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_EARLYBIRD, GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventEarlybirdDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventEarlybird] = useMutation(DELETE_SCHEDULE_EVENT_EARLYBIRD)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.earlybirds.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.earlybirds.delete_success'),\n          deleteFunction: deleteScheduleEventEarlybird,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment';\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\n// import ScheduleEventTicketListBase from \"./ScheduleEventTicketListBase\"\nimport ScheduleEventEarlybirdDelete from \"./ScheduleEventEarlybirdDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventEarlybirds({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"earlybirds\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/earlybirds/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventEarlybirds = data.scheduleEventEarlybirds\n  const pageInfo = data.scheduleEventEarlybirds.pageInfo\n\n  // Empty list\n  if (!scheduleEventEarlybirds.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.earlybirds.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventEarlybirds.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventEarlybirds.edges\n        const pageInfo = fetchMoreResult.scheduleEventEarlybirds.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventEarlybirds: {\n                __typename: previousResult.scheduleEventEarlybirds.__typename,\n                edges: [ ...previousResult.scheduleEventEarlybirds.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.earlybirds.discountPercentage')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventEarlybirds.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {node.discountPercentage} %\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/earlybirds/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventEarlybirdDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirds))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_EARLYBIRDS_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  discountPercentage: Yup.number()\n  .required(t('yup.field_required')),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nfunction ScheduleEventMediaForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  setFieldTouched,\n  setFieldValue,\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.events.earlybirds.discountPercentage')}>\n              <Field type=\"text\" \n                    name=\"discountPercentage\" \n                    className={(errors.discountPercentage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"discountPercentage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { ADD_SCHEDULE_EVENT_EARLYBIRD, GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_EARLYBIRDS_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventEarlybirdForm\"\n\n\nfunction ScheduleEventEarlybirdAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.earlybirds.add\")\n\n  const [addScheduleEventEarlybird] = useMutation(ADD_SCHEDULE_EVENT_EARLYBIRD)\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date(),\n          dateEnd: \"\",\n          discountPercentage: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_EARLYBIRDS_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          addScheduleEventEarlybird({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.earlybirds.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n      >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { \n  GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, \n  GET_SCHEDULE_EVENT_EARLYBIRD_QUERY,\n  UPDATE_SCHEDULE_EVENT_EARLYBIRD\n } from \"./queries\"\nimport { SCHEDULE_EVENT_EARLYBIRDS_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventEarlybirdForm\"\n\n\nfunction ScheduleEventEarlybirdEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventEarlybirdId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.earlybirds.edit\")\n\n  const [updateScheduleEventEarlybird] = useMutation(UPDATE_SCHEDULE_EVENT_EARLYBIRD)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_EARLYBIRD_QUERY, {\n    variables: {\n      id: scheduleEventEarlybirdId\n  }})\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const scheduleEventEarlybird = data.scheduleEventEarlybird\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDateStart = null\n  if (scheduleEventEarlybird.dateStart) {\n    initialDateStart = new Date(scheduleEventEarlybird.dateStart)\n  }\n\n  let initialDateEnd = null\n  if (scheduleEventEarlybird.dateEnd) {\n    initialDateEnd = new Date(scheduleEventEarlybird.dateEnd)\n  }\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: initialDateStart,\n          dateEnd: initialDateEnd,\n          discountPercentage: scheduleEventEarlybird.discountPercentage\n        }}\n        validationSchema={SCHEDULE_EVENT_EARLYBIRDS_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          updateScheduleEventEarlybird({ variables: {\n            input: {\n              id: scheduleEventEarlybirdId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.earlybirds.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_MEDIAS_QUERY = gql`\n  query ScheduleEventMedias($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventMedias(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          sortOrder\n          description\n          urlImage\n          urlImageThumbnailSmall\n          image\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_MEDIA_QUERY = gql`\n  query ScheduleEventMedia($id:ID!) {\n    scheduleEventMedia(id: $id) {\n      id\n      sortOrder\n      description\n      image\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_MEDIA   = gql`\n  mutation DeleteScheduleEventMedia($input: DeleteScheduleEventMediaInput!) {\n    deleteScheduleEventMedia(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventActivityInputValues($after: String, $before: String) {\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_MEDIA, GET_SCHEDULE_EVENT_MEDIAS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventMediaDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventMedia] = useMutation(DELETE_SCHEDULE_EVENT_MEDIA)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.media.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.media.delete_success'),\n          deleteFunction: deleteScheduleEventMedia,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Avatar,\n  Button,\n  Table,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventMediaDelete from \"./ScheduleEventMediaDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventMedia({t, match, history}) {\n  const eventId = match.params.event_id\n  const activeLink = \"media\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/media/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_MEDIAS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventMedias = data.scheduleEventMedias\n  const pageInfo = data.scheduleEventMedias.pageInfo\n\n  // Empty list\n  if (!scheduleEventMedias.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.media.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventMedias.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventMedias.edges\n        const pageInfo = fetchMoreResult.scheduleEventMedias.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventMedias: {\n                __typename: previousResult.scheduleEventMedias.__typename,\n                edges: [ ...previousResult.scheduleEventMedias.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader></Table.ColHeader> \n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.sort_order')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventMedias.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                </Table.Col>\n                <Table.Col>\n                  {node.description}\n                </Table.Col>\n                <Table.Col>\n                  {node.sortOrder}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/media/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventMediaDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMedia))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_MEDIA_SCHEMA = Yup.object().shape({\n  description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  sortOrder: Yup.number(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventMediaBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/media`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n\nfunction ScheduleEventMediaForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.sort_order')}>\n              <Field type=\"text\" \n                    name=\"sortOrder\" \n                    className={(errors.sortOrder) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"sortOrder\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaForm))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_MEDIA_SCHEMA } from './yupSchema'\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventMediaForm from \"./ScheduleEventMediaForm\"\n\n\nconst ADD_SCHEDULE_EVENT_MEDIA = gql`\n  mutation CreateScheduleEventMedia($input:CreateScheduleEventMediaInput!) {\n    createScheduleEventMedia(input: $input) {\n      scheduleEventMedia {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventMediaAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n  const activeLink = 'media'\n  const cardTitle = t(\"schedule.events.media.add\")\n\n  const [addScheduleEventMedia] = useMutation(ADD_SCHEDULE_EVENT_MEDIA, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          description: \"\",\n          sortOrder: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_MEDIA_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            scheduleEvent: eventId,\n            description: values.description,\n            sortOrder: values.sortOrder,\n            imageFileName: fileName,\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            inputVars.image = b64_enc_file\n\n            addScheduleEventMedia({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: {scheduleEvent: eventId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.events.media.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            toast.error(t(\"general.please_select_a_file\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          }\n        }}\n      >\n        {({ isSubmitting, errors, values }) => (\n          <ScheduleEventMediaForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaAdd))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_MEDIA_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventMediaEditBase({t, match, history, activeTab, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const eventId = match.params.event_id\n  const scheduleEventMediaId = match.params.id\n  const cardTitle = t(\"schedule.events.media.edit\")\n  const activeLink = \"media\"\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingMedia, error: errorMedia, data: dataMedia } = useQuery(GET_SCHEDULE_EVENT_MEDIA_QUERY, {\n    variables: {\n      id: scheduleEventMediaId\n    }\n  })\n\n  if (loading || loadingMedia) {\n    return (\n      <ScheduleEventEditBaseBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorMedia) {\n    return (\n      <ScheduleEventEditBaseBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleEventMedia = dataMedia.scheduleEventMedia\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleEventMedia) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleEventMedia) ?\n  <span className=\"text-muted\">\n    - {scheduleEventMedia.description}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaEditBase))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY, GET_SCHEDULE_EVENT_MEDIA_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_MEDIA_SCHEMA } from './yupSchema'\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventMediaEditBase from \"./ScheduleEventMediaEditBase\"\nimport ScheduleEventMediaForm from \"./ScheduleEventMediaForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_MEDIA = gql`\n  mutation UpdateScheduleEventMedia($input:UpdateScheduleEventMediaInput!) {\n    updateScheduleEventMedia(input: $input) {\n      scheduleEventMedia {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventMediaEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventMediaId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.media.edit\")\n\n  const [updateScheduleEventMedia] = useMutation(UPDATE_SCHEDULE_EVENT_MEDIA)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_MEDIA_QUERY, {\n    variables: {\n      id: scheduleEventMediaId\n  }})\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventMediaEditBase>\n  )\n  if (error) return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventMediaEditBase>\n  )\n\n  const inputData = data\n  const scheduleEventMedia = data.scheduleEventMedia\n  console.log(inputData)\n\n  return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          description: scheduleEventMedia.description,\n          sortOrder: scheduleEventMedia.sortOrder\n        }}\n        validationSchema={SCHEDULE_EVENT_MEDIA_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            id: scheduleEventMediaId,\n            description: values.description,\n            sortOrder: values.sortOrder\n          }\n\n          function updateMedia() {\n            updateScheduleEventMedia({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: {scheduleEvent: eventId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.events.media.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            inputVars.image = b64_enc_file\n            inputVars.imageFileName = fileName\n\n            updateMedia()\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            updateMedia()\n          }\n        }}\n        >\n        {({ isSubmitting, errors, values }) => (\n          <ScheduleEventMediaForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventMediaEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY = gql`\n  query ScheduleEventEarlybirds($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventSubscriptionGroupDiscounts(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          organizationSubscriptionGroup {\n            id\n            name\n          }\n          discountPercentage\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query OrganizationSubscriptionGroups {\n    organizationSubscriptionGroups(first: 1000) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_QUERY = gql`\n  query ScheduleEventSubscriptionGroupDiscount($id:ID!) {\n    scheduleEventSubscriptionGroupDiscount(id: $id) {\n      id\n      discountPercentage\n      organizationSubscriptionGroup {\n        id\n        name\n      }\n    }\n    organizationSubscriptionGroups(first: 1000) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT = gql`\n  mutation CreateScheduleEventSubscriptionGroupDiscount($input:CreateScheduleEventSubscriptionGroupDiscountInput!) {\n    createScheduleEventSubscriptionGroupDiscount(input: $input) {\n      scheduleEventSubscriptionGroupDiscount {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT = gql`\n  mutation UpdateScheduleEventSubscriptionGroupDiscount($input:UpdateScheduleEventSubscriptionGroupDiscountInput!) {\n    updateScheduleEventSubscriptionGroupDiscount(input: $input) {\n      scheduleEventSubscriptionGroupDiscount {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT   = gql`\n  mutation DeleteScheduleEventSubscriptionGroupDiscount($input: DeleteScheduleEventSubscriptionGroupDiscountInput!) {\n    deleteScheduleEventSubscriptionGroupDiscount(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { \n  DELETE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT, \n  GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY \n} from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventSubscriptionGroupDiscountDelete({t, match, history, node}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventSubscriptionGroupDiscount] = useMutation(\n    DELETE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT\n  )\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.subscription_group_discounts.delete_confirm_msg\"),\n          msgDescription: <p>{node.organizationSubscriptionGroup.name} - {node.discountPercentage} %</p>,\n          msgSuccess: t('schedule.events.subscription_group_discounts.delete_success'),\n          deleteFunction: deleteScheduleEventSubscriptionGroupDiscount,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupDiscountDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\n// import ScheduleEventTicketListBase from \"./ScheduleEventTicketListBase\"\nimport ScheduleEventSubscriptionGroupDiscountDelete from \"./ScheduleEventSubscriptionGroupDiscountDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventSubscriptionGroupDiscounts({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  // const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"subscription_group_discounts\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/subscription_group_discounts/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n        <p>{error.message}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventSubscriptionGroupDiscounts = data.scheduleEventSubscriptionGroupDiscounts\n  const pageInfo = data.scheduleEventSubscriptionGroupDiscounts.pageInfo\n\n  // Empty list\n  if (!scheduleEventSubscriptionGroupDiscounts.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.subscription_group_discounts.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventSubscriptionGroupDiscounts.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventSubscriptionGroupDiscounts.edges\n        const pageInfo = fetchMoreResult.scheduleEventSubscriptionGroupDiscounts.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventSubscriptionGroupDiscounts: {\n                __typename: previousResult.scheduleEventSubscriptionGroupDiscounts.__typename,\n                edges: [ ...previousResult.scheduleEventSubscriptionGroupDiscounts.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase \n      activeLink={activeLink} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore} \n      pageHeaderOptions={pageHeaderOptions}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.subscription_group')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.earlybirds.discountPercentage')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventSubscriptionGroupDiscounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {/* {moment(node.dateStart).format(dateFormat)} */}\n                  {node.organizationSubscriptionGroup.name}\n                </Table.Col>\n                <Table.Col>\n                  {node.discountPercentage} %\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/subscription_group_discounts/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventSubscriptionGroupDiscountDelete node={node} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupDiscounts))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA = Yup.object().shape({\n  organizationSubscriptionGroup: Yup.string()\n    .required(t('yup.field_required')),\n  discountPercentage: Yup.number()\n    .required(t('yup.field_required')),\n})","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nfunction ScheduleEventSubscriptionGroupDiscountForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  inputData,\n  setFieldTouched,\n  setFieldValue,\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_group')}>\n              <Field component=\"select\" \n                    name=\"organizationSubscriptionGroup\" \n                    className={(errors.organizationSubscriptionGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationSubscriptionGroups.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationSubscriptionGroup\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.events.earlybirds.discountPercentage')}>\n              <Field type=\"text\" \n                    name=\"discountPercentage\" \n                    className={(errors.discountPercentage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"discountPercentage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupDiscountForm))\n","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { \n  Card,\n  Dimmer\n} from 'tabler-react'\n\nimport { \n  ADD_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT, \n  GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY,\n  GET_INPUT_VALUES_QUERY\n} from \"./queries\"\nimport { SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventSubscriptionGroupDiscountForm\"\n\n\n\nfunction ScheduleEventSubscriptionGroupDiscountAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/subscription_group_discounts/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.subscription_group_discounts.add\")\n\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleEventEarlybird] = useMutation(ADD_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT)\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <Dimmer loader={true} active={true} />\n      </Card.Body>\n    </ScheduleEventEditBase>\n  )\n\n  if (error) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n        <p>{error.message}</p>\n      </Card.Body>\n    </ScheduleEventEditBase>\n  )\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date(),\n          dateEnd: \"\",\n          discountPercentage: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          addScheduleEventEarlybird({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              organizationSubscriptionGroup: values.organizationSubscriptionGroup,\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.subscription_group_discounts.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n      >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputData={data}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupDiscountAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Dimmer } from 'tabler-react'\n\nimport { \n  GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, \n  GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_QUERY,\n  UPDATE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT\n } from \"./queries\"\nimport { SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventSubscriptionGroupDiscountForm from \"./ScheduleEventSubscriptionGroupDiscountForm\"\n\n\nfunction ScheduleEventSubscriptionGroupEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventSubscriptionGroupDiscountId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/subscription_group_discounts/`\n  const activeLink = 'subscription_group_discounts'\n  const cardTitle = t(\"schedule.events.subscription_group_discounts.edit\")\n\n  const [updateScheduleEventSubscriptionGroupDiscount] = useMutation(UPDATE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_QUERY, {\n    variables: {\n      id: scheduleEventSubscriptionGroupDiscountId\n  }})\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Dimmer active={true} loader={true} />\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const scheduleEventSubscriptionGroupDiscount = data.scheduleEventSubscriptionGroupDiscount\n\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          organizationSubscriptionGroup: scheduleEventSubscriptionGroupDiscount.organizationSubscriptionGroup.id,\n          discountPercentage: scheduleEventSubscriptionGroupDiscount.discountPercentage\n        }}\n        validationSchema={SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          updateScheduleEventSubscriptionGroupDiscount({ variables: {\n            input: {\n              id: scheduleEventSubscriptionGroupDiscountId,\n              organizationSubscriptionGroup: values.organizationSubscriptionGroup,\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.subscription_group_discounts.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventSubscriptionGroupDiscountForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputData={data}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_TICKETS_QUERY = gql`\n  query ScheduleEventTickets($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventTickets(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          fullEvent\n          deletable\n          displayPublic\n          name\n          description\n          price\n          priceDisplay\n          isSoldOut\n          financeTaxRate {\n            id\n            name\n          }\n          financeGlaccount {\n            id\n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_EVENT_TICKET_QUERY = gql`\n  query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n    scheduleEventTicket(id: $id) {\n      id\n      displayPublic\n      name\n      description\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      financeGlaccount {\n        id\n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_EVENT_TICKET = gql`\n  mutation DeleteScheduleEventTicket($input: DeleteScheduleEventTicketInput!) {\n    deleteScheduleEventTicket(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventTicketInputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_TICKET, GET_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventTicketDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [ deleteScheduleEventTicket ] = useMutation(DELETE_SCHEDULE_EVENT_TICKET)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.tickets.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.tickets.delete_success'),\n          deleteFunction: deleteScheduleEventTicket,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketDelete))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeSoldOut({ t }) {\n  return <Badge color=\"warning\">{t('general.sold_out')}</Badge> \n}\n\nexport default withTranslation()(BadgeSoldOut)","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventTicketDelete from \"./ScheduleEventTicketDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport BadgeSoldOut from '../../../ui/BadgeSoldOut';\n\n\nfunction ScheduleEventTickets({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"tickets\"\n\n  const pageHeaderOptions = <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/tickets/add`} className=\"ml-2\" />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_TICKETS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  const scheduleEventTickets = data.scheduleEventTickets\n  const pageInfo = data.scheduleEventTickets.pageInfo\n\n  // Empty list\n  if (!scheduleEventTickets.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('schedule.events.tickets.empty_list')}</p>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventTickets.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventTickets.edges\n        const pageInfo = fetchMoreResult.scheduleEventTickets.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventTickets: {\n                __typename: previousResult.scheduleEventTickets.__typename,\n                edges: [ ...previousResult.scheduleEventTickets.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.glaccount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.costcenter')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleEventTickets.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              {/* <Table.Col>\n                {moment(node.dateStart).format(dateFormat)}\n              </Table.Col>\n              <Table.Col>\n                {moment(node.dateEnd).format(dateFormat)}\n              </Table.Col> */}\n              <Table.Col>\n                {node.name} <br />\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} className=\"text-muted\"/>\n              </Table.Col>\n              <Table.Col>\n                {node.priceDisplay} <br />\n                {(node.isSoldOut) ? <BadgeSoldOut /> : \"\"}\n              </Table.Col>\n              <Table.Col>\n                <BadgeBoolean value={node.displayPublic} />\n              </Table.Col>\n              <Table.Col>\n                {(node.financeGlaccount) ? node.financeGlaccount.name : \"\"}\n              </Table.Col>\n              <Table.Col>\n                {(node.financeCostcenter) ? node.financeCostcenter.name : \"\"}\n              </Table.Col>\n              <Table.Col className=\"text-right\">\n                <Link to={`/schedule/events/edit/${eventId}/tickets/edit/${node.id}`}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                {/* Check for fullEvent / deletable before showing delete button */}\n                {(node.deletable) ? <ScheduleEventTicketDelete id={node.id} /> : \"\"}\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTickets))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_TICKET_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  description: Yup.string(),\n  price: Yup.number(),\n  financeTaxRate: Yup.string(),\n  financeGlaccount: Yup.string(),\n  financeCostcenter: Yup.string(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventTicketBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketBack))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n// import CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction ScheduleEventTicketForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.events.tickets.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.price')}>\n                <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.taxrate')}>\n              <Field component=\"select\" \n                      name=\"financeTaxRate\" \n                      className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in subscription price add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.financeTaxRates.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                    name=\"financeGlaccount\" \n                    className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                    name=\"financeCostcenter\" \n                    className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEMA } from './yupSchema'\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventTicketForm from \"./ScheduleEventTicketForm\"\n\n\nconst ADD_SCHEDULE_EVENT_TICKET = gql`\n  mutation CreateScheduleEventTicket($input:CreateScheduleEventTicketInput!) {\n    createScheduleEventTicket(input: $input) {\n      scheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeLink = 'tickets'\n  const cardTitle = t(\"schedule.events.tickets.add\")\n\n  const [addScheduleEventTicket] = useMutation(ADD_SCHEDULE_EVENT_TICKET, {\n    onCompleted: () => history.push(returnUrl),\n  })\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: true,\n          name: '',\n          description: '',\n        }}\n        validationSchema={SCHEDULE_EVENT_TICKET_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addScheduleEventTicket({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.tickets.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventTicketForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../ui/CardTabs\"\n\nfunction ScheduleEventTicketTabs({ t, active, eventId, ticketId}) {\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"schedule.events.tickets.edit_menu.general\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}`\n          },\n          {\n            name: \"activities\", \n            title: t(\"schedule.events.tickets.edit_menu.activities\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/activities`\n          },\n          {\n            name: \"customers\", \n            title: t(\"schedule.events.tickets.edit_menu.customers\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/customers`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(ScheduleEventTicketTabs)\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_TICKET_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventTicketTabs from \"./ScheduleEventTicketTabs\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventTicketEditBase({t, match, history, activeTab, children, pageHeaderOptions=\"\", searchResults=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const eventId = match.params.event_id\n  const ticketId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const cardTitle = t(\"schedule.events.tickets.edit\")\n  const activeLink = \"tickets\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingTicket, error: errorTicket, data: dataTicket } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: {\n      id: ticketId\n    }\n  })\n\n  if (loading || loadingTicket) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventTicketTabs active={activeTab} eventId={eventId}  ticketId={ticketId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorTicket) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventTicketTabs active={activeTab} eventId={eventId} ticketId={ticketId}/>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const ticket = dataTicket.scheduleEventTicket\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (event) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardTicketSubtitle = (ticket) ?\n  <span className=\"text-muted\">\n    - {ticket.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} activeLink={activeLink} returnUrl={returnUrl} >\n      {searchResults}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardTicketSubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventTicketTabs active={activeTab} eventId={eventId} ticketId={ticketId}/>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditBase))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY, GET_SCHEDULE_EVENT_TICKET_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEMA } from './yupSchema'\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"./ScheduleEventTicketEditBase\"\nimport ScheduleEventTicketForm from \"./ScheduleEventTicketForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_TICKET = gql`\n  mutation UpdateScheduleEventTicket($input:UpdateScheduleEventTicketInput!) {\n    updateScheduleEventTicket(input: $input) {\n      scheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketEdit({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"general\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateScheduleEventTicket] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const scheduleEventTicket = data.scheduleEventTicket\n\n\n  let initialFinanceTaxRate = \"\"\n  if (scheduleEventTicket.financeTaxRate) {\n    initialFinanceTaxRate = scheduleEventTicket.financeTaxRate.id\n  }\n\n  let initialFinanceGlaccount = \"\"\n  if (scheduleEventTicket.financeGlaccount) {\n    initialFinanceGlaccount = scheduleEventTicket.financeGlaccount.id\n  }\n\n  let initialFinanceCostcenter = \"\"\n  if (scheduleEventTicket.financeCostcenter) {\n    initialFinanceCostcenter = scheduleEventTicket.financeCostcenter.id\n  }\n\n\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: scheduleEventTicket.displayPublic,\n          name: scheduleEventTicket.name,\n          description: scheduleEventTicket.description,\n          price: scheduleEventTicket.price,\n          financeTaxRate: initialFinanceTaxRate,\n          financeGlaccount: initialFinanceGlaccount,\n          financeCostcenter: initialFinanceCostcenter\n        }}\n        validationSchema={SCHEDULE_EVENT_TICKET_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateScheduleEventTicket({ variables: {\n            input: {\n              id: id,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.tickets.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventTicketForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            inputData={inputData}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY = gql`\nquery ScheduleEventTicketScheduleItem($before:String, $after:String, $scheduleEventTicket:ID!) {\n  scheduleEventTicketScheduleItems(first: 100, before: $before, after: $after, scheduleEventTicket:$scheduleEventTicket) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        scheduleEventTicket {\n          id\n          name\n          fullEvent\n        }\n        scheduleItem {\n          id\n          name\n        }\n        included\n      }\n    }\n  }\n}\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n","import * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA = Yup.object().shape({\n  included: Yup.boolean(),\n})","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst ScheduleEventTicketEditActivityForm = ({ t, history, match, disabled, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Form.Group className='mb-0'>\n        <Form.Label className=\"custom-switch\">\n          <Field \n            className=\"custom-switch-input\"\n            type=\"checkbox\" \n            name=\"included\" \n            onChange={() => {\n              setFieldValue('included', !values.included)\n              setFieldTouched('included', true)\n              setSubmitting(true)\n              setTimeout(() => {submitForm()}, 200)\n            }}\n            checked={values.included} \n            disabled={disabled} \n          />\n          <span className=\"custom-switch-indicator\" ></span>\n          <span className=\"custom-switch-description\">{t('general.included')}</span>\n        </Form.Label>\n        <ErrorMessage name=\"included\" component=\"div\" />   \n      </Form.Group>  \n    </Dimmer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditActivityForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from 'uuid'\n\nimport {\n  Table,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA } from \"./yupSchema\"\n\nimport ScheduleEventTicketBack from \"../ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"../ScheduleEventTicketEditBase\"\nimport ScheduleEventTicketEditActivityForm from \"./ScheduleEventTicketEditActivityForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM = gql`\n  mutation UpdateScheduleEventTicketScheduleItem($input:UpdateScheduleEventTicketScheduleItemInput!) {\n    updateScheduleEventTicketScheduleItem(input: $input) {\n      scheduleEventTicketScheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketEditActivities({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"activities\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY, {\n    variables: {\n      scheduleEventTicket: id\n    }\n  })\n\n  const [updateScheduleEventTicketScheduleItem] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  const scheduleEventTicketActivities = data.scheduleEventTicketScheduleItems\n\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader className=\"text-right\">{t('general.included')}</Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleEventTicketActivities.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.scheduleItem.name}\n              </Table.Col>  \n              <Table.Col className=\"text-right\">\n                <Formik\n                  initialValues={{ \n                    included: node.included,\n                  }}\n                  validationSchema={SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA}\n                  onSubmit={(values, { setSubmitting }) => {\n                    console.log(\"submit values\")\n                    console.log(values)\n\n                    updateScheduleEventTicketScheduleItem({ variables: {\n                      input: {\n                          id: node.id,\n                          included: values.included\n                        }\n                      }, \n                      refetchQueries: [\n                          {query: GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                        ]\n                      })\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.activities.toast_edit_success')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          setSubmitting(false)\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                          setSubmitting(false)\n                        })\n                  }}\n                  >\n                  {({  isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm, setSubmitting }) => (\n                    <ScheduleEventTicketEditActivityForm\n                      isSubmitting={isSubmitting}\n                      setFieldTouched={setFieldTouched}\n                      setFieldValue={setFieldValue}\n                      errors={errors}\n                      values={values}\n                      disabled={node.scheduleEventTicket.fullEvent}\n                      setSubmitting={setSubmitting}\n                      submitForm={submitForm}\n                    >\n                      {/* {console.log(errors)}\n                      {console.log(values)} */}\n                    </ScheduleEventTicketEditActivityForm>\n                  )}\n                </Formik>\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditActivities))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Badge,\n  Button,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET } from \"./queries\"\nimport CSLS from '../../../../../tools/cs_local_storage'\nimport BadgeBoolean from \"../../../../ui/BadgeBoolean\"\nimport ScheduleEventTicketEditBase from \"../ScheduleEventTicketEditBase\"\nimport ButtonAdd from '../../../../ui/ButtonAdd'\n\n\n\nfunction ScheduleEventTicketEditCustomers({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"customers\"\n  const activeLink = 'tickets'\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, {\n    variables: {\n      scheduleEventTicket: id\n    }\n  })\n\n  const [updateAccountScheduleEventTicket] = useMutation(UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET)\n  // const [updateScheduleEventTicketScheduleItem] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM)\n\n  // set returnURL for invoice links\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, \n    `/schedule/events/edit/${eventId}/tickets/edit/${id}/customers`)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log(data)\n\n  const pageHeaderOptions = <React.Fragment>\n    <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/tickets/edit/${id}/customers/search`}\n      className=\"ml-2\" />\n  </React.Fragment>\n\n\n  // Data\n  return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n      pageHeaderOptions={pageHeaderOptions}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.tickets.info_mail_sent')}</Table.ColHeader> \n            <Table.ColHeader></Table.ColHeader> \n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {data.accountScheduleEventTickets.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.account.fullName} <br />\n                {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n              </Table.Col>  \n              <Table.Col>\n                { node.invoiceItems.edges && <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                    {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber } <br />\n                  </Link>\n                }\n                <small className=\"text-muted\">\n                  {node.invoiceItems.edges && node.invoiceItems.edges[0].node.financeInvoice.summary.trunc(40) } <br />\n                </small>\n              </Table.Col>\n              <Table.Col>\n                <BadgeBoolean value={node.infoMailSent} /> <br />\n                {/* TODO: resend link here */}\n              </Table.Col>\n              <Table.Col>\n                {(node.cancelled) ?\n                  <Button \n                    className=\"pull-right\"\n                    color=\"warning\"\n                    onClick={() =>\n                      updateAccountScheduleEventTicket({ variables: {\n                        input: {\n                          id: node.id,\n                          cancelled: false\n                        }\n                      }, refetchQueries: [\n                          {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                      ]})\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.customers.uncancelled')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                        }\n                      )\n                    }\n                  >\n                    {t(\"general.uncancel\")}\n                  </Button>\n                :\n                  <Button \n                    className=\"pull-right\"\n                    color=\"warning\"\n                    onClick={() =>\n                      updateAccountScheduleEventTicket({ variables: {\n                        input: {\n                          id: node.id,\n                          cancelled: true\n                        }\n                      }, refetchQueries: [\n                          {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                      ]})\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.customers.cancelled')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                        })\n                      }\n                    >\n                      {t(\"general.cancel\")}\n                    </Button>\n                }\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditCustomers))","export function getAccountsQueryVariables(ticketId, searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined,\n    ticketId: ticketId\n  }\n\n  queryVars.searchName = searchName\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n// export function get_attendance_list_query_variables(schedule_item_id, date) {\n//   return {\n//     scheduleItem: schedule_item_id,\n//     date: date\n//   }\n// }\n","import React, { useState, useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Badge,\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport { getAccountsQueryVariables } from \"./tools\"\n\nimport CSLS from \"../../../../../tools/cs_local_storage\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ScheduleEventEditBaseBase from '../../edit/ScheduleEventEditBaseBase'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY, ADD_ACCOUNT_SCHEDULE_EVENT_TICKET, GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\n\n\nfunction ScheduleEventTicketEditCustomersSearch({ t, match, history }) {\n  let [searchName, setSearchName] = useState(\"\")\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const ticketId = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/customers`\n  const activeLink = 'tickets'\n  const cardTitle = t('schedule.events.tickets.customers.search.title')\n\n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_ACCOUNTS_QUERY, {\n      variables: getAccountsQueryVariables(ticketId, searchName)\n    }\n  )\n  const [ addAccountScheduleEventTicket ] = useMutation(ADD_ACCOUNT_SCHEDULE_EVENT_TICKET)\n\n  const headerOptions = <Card.Options>\n    <InputSearch \n      initialValueKey={CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH}\n      placeholder=\"Search...\"\n      onChange={(value) => {\n        console.log(value)\n        localStorage.setItem(CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH, value)\n        setSearchName(value)\n        console.log(\"Executing refetch\")\n        refetch({ variables: getAccountsQueryVariables(ticketId, value)})\n      }}\n    />\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ScheduleEventEditBaseBase>\n  )\n  // Error\n  if (error) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <p>{t('schedule.events.tickets.customers.search.error_loading')}</p>\n      </Card.Body>\n    </ScheduleEventEditBaseBase>\n  )  \n\n  console.log(data)\n  const accounts = data.accounts\n  const ticket = data.scheduleEventTicket\n  const event = ticket.scheduleEvent\n  const accountScheduleEventTickets = data.accountScheduleEventTickets\n  const dateStart = moment(event.dateStart).format(dateFormat)\n  // TODO: Add date to page subtitle\n  const pageSubTitle = `${ticket.scheduleEvent.name} ${dateStart} - ${ticket.name}`\n  let accountIdsWithTickets = []\n  accountScheduleEventTickets.edges.map(({ node }) => (\n    accountIdsWithTickets.push(node.account.id)\n  ))\n  console.log(accountIdsWithTickets)\n\n  // No search name entered\n  if (!searchName) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"primary\" icon=\"info\">\n            {t('schedule.events.tickets.customers.search.search_to_find_customers_to_sell_to')}\n          </Alert> \n        </Card.Body>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n\n  // Empty list\n  if (!accounts.edges.length) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"secondary\">{t('schedule.events.tickets.customers.search.empty_list')}</Alert>\n        </Card.Body>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n\n  \n  return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={accounts.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              data: {\n                                accounts: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(accountIdsWithTickets.includes(node.id)) ? \n                    <Badge color=\"success\" className=\"pull-right\">{t(\"schedule.events.tickets.customers.search_results_already_bought\")}</Badge> :\n                    <Button a\n                      color=\"primary\"\n                      outline\n                      onClick={() =>\n                        addAccountScheduleEventTicket({ variables: {\n                          input: {\n                            account: node.id,\n                            scheduleEventTicket: ticketId\n                          }                            \n                        }, refetchQueries: [\n                            {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                              scheduleEventTicket: ticketId\n                            }},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            history.push(returnUrl)\n                            toast.success((`${t('schedule.events.tickets.customers.toast_add_success')} ${node.fullName}`), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                          })\n                      }\n                    >\n                      {t(\"general.sell\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  }\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditCustomersSearch))\n","import React from \"react\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport StatusIcon from \"../../ui/StatusIcon\"\n\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationShift\n  let organizationLocation\n\n  let queryVars = {\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationShift = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT)\n  if (organizationShift) {\n    queryVars.organizationShift = organizationShift\n  } else {\n    queryVars.organizationShift = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function represent_instructor(name, role) {\n  let textColor = false\n\n  switch (role) {\n    case \"SUB\":\n      textColor = \"text-blue\"\n      break\n    case \"ASSISTANT\":\n      textColor = \"text-green\"\n      break\n    case \"KARMA\":\n      textColor = \"text-orange\"\n      break\n    default:\n      break\n  }\n\n  if (textColor) {\n    return <span className={textColor}>{name}</span>\n  } else {\n    return name\n  }\n}\n\n\nexport function represent_shift_status(status) {\n  let color\n\n  switch (status) {\n    case \"SUB\":\n      color = \"primary\"\n      break\n    case \"CANCELLED\":\n      color = \"warning\"\n      break\n    case \"OPEN\":\n      color = \"danger\"\n      break\n    default:\n      color = \"success\"\n  }\n\n  return <StatusIcon color={color} />\n}\n\n\nexport function get_class_messages(t, status, description, holiday, holidayName) {\n  if (holiday) {\n    return <span>{t(\"general.holiday\")} ({holidayName})</span>\n  }\n\n  if (status === 'CANCELED') {\n    return description\n  }\n}","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Button, Grid,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nfunction ScheduleShiftsFilter({ t, history, data, refetch }) {\n  let [location, setLocation] = useState(getDefaultValue(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION))\n  let [shift, setShift] = useState(getDefaultValue(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT))\n\n  return (\n    <React.Fragment>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Button\n            className=\"float-right\"\n            color=\"link\"\n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT, \"\")\n              setLocation(\"\")\n              setShift(\"\")\n              refetch(get_list_query_variables())\n            }}\n          >\n            {t(\"general.clear\")}\n          </Button>\n          <h6 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h6 >\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          {/* Locations */}\n          <select \n            className={selectClass}\n            value={location}\n            onChange={ (event) => {\n              setLocation(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.shifts.filter_all_locations\")}</option>\n            {data.organizationLocations.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col>\n          {/* Shifts */}\n          <select \n            className={selectClass}\n            value={shift}\n            onChange={ (event) => {\n              setShift(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.shifts.filter_all_shifts\")}</option>\n            {data.organizationShifts.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n      </Grid.Row>\n    </React.Fragment>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftsFilter))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ScheduleShiftsFilter from \"./ScheduleShiftsFilter\"\n\nimport { \n  get_list_query_variables, \n} from './tools'\n\nimport moment from 'moment'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleShiftsBase ({ t, history, children, data, refetch }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.shifts.title\")}>\n            <div className=\"page-options d-flex\">\n              <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n                <Button \n                  icon=\"home\"\n                  tooltip=\"text\"\n                  className=\"mr-2\"\n                  color={\n                    ((localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY))) ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY, \"location\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n                <Button \n                  icon=\"clock\"\n                  className=\"mr-2\"\n                  color={\n                    (localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY) === \"starttime\") ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY, \"starttime\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <CSDatePicker \n                className=\"form-control schedule-list-csdatepicker mr-2\"\n                selected={new Date(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM))}\n                isClearable={false}\n                onChange={(date) => {\n                  let nextWeekFrom = moment(date)\n                  let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                  console.log(get_list_query_variables())\n\n                  refetch(get_list_query_variables())\n                }}\n                placeholderText={t('schedule.classes.go_to_date')}\n              />\n              <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)).subtract(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentWeekFrom = moment()\n                    let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                    \n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)).add(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n              </Button.List> \n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"scheduleshift\">\n                <Link to={\"/schedule/shifts/add\"}>\n                  <Button color=\"primary btn-block ml-2\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {(data) ? \n                <ScheduleShiftsFilter data={data} refetch={refetch} />\n              : \"\"}\n              {children}\n            </Grid.Col>\n        </Grid.Row>\n      </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SHIFTS_QUERY = gql`\n  query ScheduleShifts(\n    $dateFrom: Date!, \n    $dateUntil:Date!, \n    $orderBy: String, \n    $organizationShift: ID,\n    $organizationLocation: ID,\n  ){\n    scheduleShifts(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationShift: $organizationShift,\n        organizationLocation: $organizationLocation,\n    ){\n      date\n      shifts {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        description\n        holiday\n        holidayName\n        account {\n          id\n          fullName\n        }\n        account2 {\n          id\n          fullName\n        }\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationShift {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SHIFT_QUERY = gql`\n  query ScheduleItem($id: ID!) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleShiftInputValues($after: String, $before: String) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_SHIFT = gql`\n  mutation CreateScheduleShift($input:CreateScheduleShiftInput!) {\n    createScheduleShift(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationShift {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_SHIFT = gql`\n  mutation DeleteScheduleShift($input: DeleteScheduleShiftInput!) {\n    deleteScheduleShift(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport {\n  Badge,\n  Dropdown,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ScheduleShiftsBase from './ScheduleShiftsBase'\n\nimport { GET_SHIFTS_QUERY, DELETE_SCHEDULE_SHIFT } from \"./queries\"\nimport { \n  get_class_messages,\n  get_list_query_variables, \n  represent_shift_status\n} from './tools'\n\nimport moment from 'moment'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleShifts ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const {loading, error, data, refetch} = useQuery(GET_SHIFTS_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteScheduleShift] = useMutation(DELETE_SCHEDULE_SHIFT)\n\n  if (loading) {\n    return (\n      <ScheduleShiftsBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </ScheduleShiftsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleShiftsBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleShiftsBase>\n    )\n  }\n\n  const shifts = data.scheduleShifts\n  console.log(shifts)\n       \n  // Empty list\n  if (!shifts.length) { return (\n    <ScheduleShiftsBase>\n      <p>\n        {t('schedule.shifts.empty_list')}\n      </p>\n    </ScheduleShiftsBase>\n  )} \n\n  return (\n    <ScheduleShiftsBase data={data} refetch={refetch}>\n      { data.scheduleShifts.map(({ date, shifts }) => (\n        <div key={v4()}>\n          <Card>\n            <Card.Header>\n              <Card.Title>\n                <b>{moment(date).format(\"dddd\")}</b> {' '}\n                <span className=\"text-muted\">\n                  {moment(date).format(\"LL\")} \n                </span>\n              </Card.Title>\n            </Card.Header>\n            {!(shifts.length) ? <Card.Body>{t('schedule.shifts.empty_list')}</Card.Body> :\n              <Table cards>\n                <Table.Header>\n                  <Table.Row key={v4()}>\n                    <Table.ColHeader /> \n                    <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.shift')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.employee')}</Table.ColHeader>\n                    <Table.ColHeader></Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {shifts.map((\n                    { scheduleItemId, \n                      frequencyType,\n                      date, \n                      status,\n                      holiday,\n                      holidayName,\n                      description,\n                      account, \n                      account2,\n                      organizationLocationRoom, \n                      organizationShift, \n                      timeStart, \n                      timeEnd }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {represent_shift_status(status)}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Start & end time */}\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                        {(frequencyType === 'SPECIFIC') ? <Badge color=\"primary\">{t('general.once')}</Badge> : null } <br />\n                        <small className=\"text-muted\">{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Location */}\n                        {organizationLocationRoom.organizationLocation.name} <br />\n                        <small className=\"text-muted\">{organizationLocationRoom.name}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Shift and level */}\n                        {organizationShift.name}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Employee(s) */}\n                        { (account) ? \n                            account.fullName : \n                            <span className=\"text-red\">{t(\"schedule.shifts.no_employee\")}</span>\n                        } <br />\n                        <small className=\"text-muted\">\n                          {(account2) ? account2.fullName : \"\"}\n                        </small>\n                      </Table.Col>\n                      <Table.Col>\n                        <Dropdown\n                          key={v4()}\n                          className=\"pull-right\"\n                          type=\"button\"\n                          toggle\n                          color=\"secondary btn-sm\"\n                          triggerContent={t(\"general.actions\")}\n                          items={[\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemweeklyotc\">\n                              <Link to={'/schedule/shifts/shift/edit/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"edit-3\"\n                                >\n                                  {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleshift\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <Link to={'/schedule/shifts/all/edit/' + scheduleItemId}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  badge={t('schedule.shifts.all_shifts_in_series')}\n                                  badgeType=\"secondary\"\n                                  icon=\"edit-3\"\n                                >\n                                    {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleshift\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <span className=\"text-red\">\n                              <Dropdown.Item\n                                key={v4()}\n                                badge={t('schedule.shifts.all_shifts_in_series')}\n                                badgeType=\"danger\"\n                                icon=\"trash-2\"\n                                onClick={() => {\n                                  confirm_delete({\n                                    t: t,\n                                    msgConfirm: t(\"schedule.shifts.delete_confirm_msg\"),\n                                    msgDescription: <p key={v4()}>\n                                      {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                      {moment(date + ' ' + timeEnd).format(timeFormat)} {' '} \n                                      {organizationShift.name} {' '} @ {' '}\n                                      {organizationLocationRoom.organizationLocation.name} {' '}\n                                      {organizationLocationRoom.name}\n                                      </p>,\n                                    msgSuccess: t('schedule.shifts.deleted'),\n                                    deleteFunction: deleteScheduleShift,\n                                    functionVariables: { variables: {\n                                      input: {\n                                        id: scheduleItemId\n                                      }\n                                    }, refetchQueries: [\n                                      { query: GET_SHIFTS_QUERY, variables: get_list_query_variables() }\n                                    ]}\n                                  })\n                                }}>\n                              {t(\"general.delete\")}\n                              </Dropdown.Item>\n                              </span>\n                            </HasPermissionWrapper>\n                          ]}\n                        />\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            }\n          </Card>\n        </div>\n      ))}\n    </ScheduleShiftsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShifts))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SHIFT_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    organizationShift: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n// import { Editor } from '@tinymce/tinymce-react'\n// import { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleShiftForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group label={t('schedule.classes.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.classes.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.classes.select_weekly')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.classes.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.shift')}>\n              <Field component=\"select\" \n                    name=\"organizationShift\" \n                    className={(errors.organizationShift) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationShifts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationShift\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {/* <Form.Group label={t('general.note')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"note\"\n              initialValue={values.note}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"note\", e.target.getContent())\n                setFieldTouched(\"note\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> */}\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleShiftForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack'\n\nfunction ScheduleShiftAddBase({t, children}) {\n  const returnUrl = \"/schedule/shifts\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.shifts.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl}/>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftAddBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_SHIFT } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport ScheduleShiftForm from './ScheduleShiftForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\nimport ScheduleShiftAddBase from './ScheduleShiftAddBase'\n\n\nfunction ScheduleShiftAdd({t, history}) {\n  const cardTitle = t('schedule.shifts.title_add')\n  const returnUrl = \"/schedule/shifts\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleShift ] = useMutation(CREATE_SHIFT)\n  \n\n  if (loading) return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleShiftAddBase>\n  )\n\n  if (error) return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleShiftAddBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            frequencyType: \"WEEKLY\",\n            frequencyInterval: 1,\n            organizationLocationRoom: \"\",\n            organizationShift: \"\",\n            dateStart: new Date(),\n            timeStart: new Date(),\n            timeEnd: new Date(),\n          }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              \n              createScheduleShift({ variables: {\n                input: {\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd)\n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.shifts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  history.push(returnUrl)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                <ScheduleShiftForm\n                  inputData={inputData}\n                  isSubmitting={isSubmitting}\n                  setFieldValue={setFieldValue}\n                  setFieldTouched={setFieldTouched}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  returnUrl={returnUrl}\n                >\n                </ScheduleShiftForm>\n              )\n           }\n        </Formik>\n      </Card>      \n    </ScheduleShiftAddBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftAdd))","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_SHIFT = gql`\nmutation UpdateScheduleShift($input:UpdateScheduleShiftInput!) {\n  updateScheduleShift(input: $input) {\n    scheduleItem {\n      id\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../../ui/ButtonBack';\n\nconst ShiftEditBack = ({ t }) => (\n    <ButtonBack returnUrl=\"/schedule/shifts\" />\n)\n\nexport default withTranslation()(ShiftEditBack)","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n\nconst ShiftEditMenu = ({ t, activeLink, shiftId }) => (\n  <List.Group transparent={true}>\n    <List.GroupItem\n      key={v4()}\n      className=\"d-flex align-items-center\"\n      to={\"#/schedule/shifts/all/edit/\" + shiftId}\n      icon=\"edit-3\"\n      active={(activeLink===\"edit\")}\n      >\n      {t('general.edit')}\n    </List.GroupItem>\n    <HasPermissionWrapper permission=\"view\"\n                          resource=\"scheduleitemaccount\">\n      <List.GroupItem\n        key={v4()}\n        className=\"d-flex align-items-center\"\n        to={\"#/schedule/shifts/all/employees/\" + shiftId}\n        icon=\"users\"\n        active={activeLink===\"employees\"}\n        >\n        {t('general.employees')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n  </List.Group>\n);\n\nexport default withTranslation()(ShiftEditMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ShiftEditMenu from './ShiftEditMenu'\n\n\nfunction ShiftEditBaseBase({t, match, children, subTitle=\"\", cardTitle=\"\", defaultCard=true, menuActiveLink=\"\", pageHeaderButtonList=\"\"}) {\n  const shiftId = match.params.shift_id\n  \n  return (\n    <SiteWrapper>\n      <Container>\n        <Page.Header \n          title={t(\"schedule.title\")} \n          subTitle={subTitle}\n        >\n          <div className=\"page-options d-flex\">\n            {pageHeaderButtonList}\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            {(!defaultCard) ? children :\n              <Card title={cardTitle}>\n                {children}\n              </Card>\n            }\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <ShiftEditMenu activeLink={menuActiveLink} shiftId={shiftId}/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShiftEditBaseBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_SHIFT_QUERY } from \"../queries\"\n\nimport ShiftEditBaseBase from './ShiftEditBaseBase'\nimport { shift_edit_all_subtitle } from \"./tools\"\n\n\nfunction ShiftEditBase({t, match, children, menuActiveLink=\"\", defaultCard=true, pageHeaderButtonList=\"\", cardTitle=\"\"}) {\n  const shiftId = match.params.shift_id\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, { variables: {\n    id: shiftId\n  }})\n\n  if (!cardTitle) {\n    cardTitle = t('schedule.shifts.title_edit')\n  }\n\n  if (loading) return (\n    <ShiftEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ShiftEditBaseBase>\n  )\n\n  if (error) return (\n    <ShiftEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      {console.log(error)}\n      <p>{t('general.error_sad_smiley')}</p>\n    </ShiftEditBaseBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const subTitle = shift_edit_all_subtitle({\n    t: t,\n    location: initialValues.organizationLocationRoom.organizationLocation.name,\n    locationRoom: initialValues.organizationLocationRoom.name,\n    shift: initialValues.organizationShift.name,\n    starttime: initialTimeStart\n  })\n\n  return (\n    <ShiftEditBaseBase \n      subTitle={subTitle}\n      cardTitle={cardTitle}\n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={defaultCard}\n      menuActiveLink={menuActiveLink}\n    >\n      {children}\n    </ShiftEditBaseBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(ShiftEditBase))","import moment from 'moment'\n\nexport function shift_edit_all_subtitle({t, location, locationRoom, shift, starttime}) {\n  return t('general.shift') + ': ' + location + ' (' + locationRoom + ') - ' + shift + ' @ ' + moment(starttime).format('LT')\n}\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_SHIFT_QUERY } from '../../queries'\nimport { UPDATE_SHIFT } from './queries'\n\nimport { get_list_query_variables } from '../../tools'\nimport { SHIFT_SCHEMA } from '../../yupSchema'\nimport ScheduleShiftForm from '../../ScheduleShiftForm'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ShiftEditBack from \"../ShiftEditBack\"\nimport ShiftEditBase from '../ShiftEditBase'\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleShiftEditAll({t, match}) {\n  const id = match.params.shift_id\n  const menuActiveLink = \"edit\"\n  const returnUrl = \"/schedule/shifts\"\n  const cardTitle = t('schedule.shifts.title_edit')\n  const pageHeaderButtonList = <ShiftEditBack />\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleShift ] = useMutation(UPDATE_SHIFT)\n\n  if (loading) return (\n    <ShiftEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialValues.dateStart) {\n    dateStart = new Date(initialValues.dateStart)\n  }\n  if (initialValues.dateEnd) {\n    dateEnd = new Date(initialValues.dateEnd)\n  }\n\n\n  return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink}\n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            frequencyType: initialValues.frequencyType,\n            frequencyInterval: initialValues.frequencyInterval,\n            organizationLocationRoom: initialValues.organizationLocationRoom.id,\n            organizationShift: initialValues.organizationShift.id,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n            timeStart: initialTimeStart,\n            timeEnd: initialTimeEnd,\n          }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }  \n\n              updateScheduleShift({ variables: {\n                input: {\n                  id: id,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.shifts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n            <ScheduleShiftForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              touched={touched}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>      \n      </Card>\n    </ShiftEditBase>   \n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftEditAll))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY = gql`\n  query ScheduleShiftWeeklyOTCs($scheduleItem: ID!, $date: Date!) {\n    scheduleItemWeeklyOtcs(first:1, scheduleItem: $scheduleItem, date:$date) {\n      edges {\n        node {\n          id \n          date\n          status\n          description\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          organizationLocationRoom {\n            id\n            name\n          }\n          organizationShift {\n            id\n            name\n          }\n          timeStart\n          timeEnd\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n    accounts(first: 100, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_ITEM_WEEKLY_OTC = gql`\n  mutation DeleteScheduleItemWeeklyOTC($input: DeleteScheduleItemWeeklyOTCInput!) {\n    deleteScheduleItemWeeklyOtc(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_WEEKLY_OTC = gql`\n  mutation UpdateScheduleItemWeeklyOTC($input: UpdateScheduleItemWeeklyOTCInput!) {\n    updateScheduleItemWeeklyOtc(input:$input) {\n      scheduleItemWeeklyOtc {\n        id\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSTimePicker from \"../../../../ui/CSTimePicker\"\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\n\nconst ScheduleShiftEditForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                      name=\"status\" \n                      className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('general.cancelled')}</option>\n                <option value=\"OPEN\" key={v4()}>{t('schedule.classes.no_instructor')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.shift')}>\n              <Field component=\"select\" \n                    name=\"organizationShift\" \n                    className={(errors.organizationShift) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationShifts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationShift\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleShiftEditForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nconst ScheduleShiftBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={\"/schedule/shifts\"} />\n)\n\nexport default withTranslation()(withRouter(ScheduleShiftBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ScheduleShiftBack from \"./ScheduleShiftBack\"\n\n\nfunction ScheduleShiftEditBase({ t, match, history, children, pageHeaderButtonList=\"\", subTitle=\"\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleShiftBack />\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_SHIFTS_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { DELETE_SCHEDULE_ITEM_WEEKLY_OTC, GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleItemWeeklyOTCDelete({t, match, history}) {\n  const scheduleItemId = match.params.shift_id\n  const shiftDate = match.params.date\n  const [deleteScheduleShiftOTC] = useMutation(DELETE_SCHEDULE_ITEM_WEEKLY_OTC, {\n    onCompleted: () => { history.push(\"/schedule/shifts/\") }\n  })\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: shiftDate\n  }\n\n  return (\n    <button className=\"icon btn-block btn btn-danger ml-2\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.shifts.shift.edit.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.shifts.shift.edit.delete_success'),\n          deleteFunction: deleteScheduleShiftOTC,\n          functionVariables: { \n            variables: {\n              input: {\n                scheduleItem: scheduleItemId,\n                date: shiftDate\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, variables: query_vars },\n              { query: GET_SHIFTS_QUERY, variables: get_list_query_variables() },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-white\"><Icon prefix=\"fe\" name=\"trash-2\" /> {\" \"} {t(\"schedule.shifts.shift.edit.delete_all_changes\")}</span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleItemWeeklyOTCDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, UPDATE_SCHEDULE_ITEM_WEEKLY_OTC } from './queries'\nimport { GET_SHIFTS_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\n// import { SCHEDULE_CLASS_EDIT_OTC_SCHEMA } from './yupSchema'\nimport ScheduleShiftEditForm from './ScheduleShiftEditForm'\nimport { TimeStringToJSDateOBJ, dateToLocalISOTime } from '../../../../../tools/date_tools'\n\nimport { shiftSubtitle } from \"../tools\"\n\nimport ScheduleShiftEditBase from \"../ScheduleShiftEditBase\"\nimport ScheduleShiftWeeklyOTCDelete from './ScheduleShiftWeeklyOTCDelete'\n\n\nfunction ScheduleShiftEdit({ t, match, history }) {\n  let showDelete = false\n  const scheduleItemId = match.params.shift_id\n  const shiftDate = match.params.date\n  const returnUrl = \"/schedule/shifts\"\n\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: shiftDate\n  }\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, {\n    variables: query_vars,\n  })\n  const [ updateScheduleITEMWeeklyOTC ] = useMutation(UPDATE_SCHEDULE_ITEM_WEEKLY_OTC)\n\n  if (queryLoading) return (\n    <ScheduleShiftEditBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </ScheduleShiftEditBase>\n  )\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return (\n      <ScheduleShiftEditBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleShiftEditBase>\n    )\n  }\n\n  console.log('queryData')\n  console.log(queryData)\n\n  const scheduleItem = queryData.scheduleItem\n  const subtitle = shiftSubtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    shift: scheduleItem.organizationShift.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: shiftDate\n  })\n  \n  let initialData\n  var initialValues = {}\n  if (queryData.scheduleItemWeeklyOtcs.edges.length) {\n    showDelete = true\n\n    initialData = queryData.scheduleItemWeeklyOtcs.edges[0].node\n\n    initialValues.status = initialData.status\n    initialValues.description = initialData.description\n    if (initialData.account) {\n      initialValues.account = initialData.account.id\n    }\n    if (initialData.account2) {\n      initialValues.account2 = initialData.account2.id\n    }\n    if (initialData.organizationLocationRoom) {\n      initialValues.organizationLocationRoom = initialData.organizationLocationRoom.id\n    }\n    if (initialData.organizationShift) {\n      initialValues.organizationShift = initialData.organizationShift.id\n    }\n    if (initialData.timeStart) {\n      initialValues.timeStart = TimeStringToJSDateOBJ(initialData.timeStart)\n    }\n    if (initialData.timeEnd) {\n      initialValues.timeEnd = TimeStringToJSDateOBJ(initialData.timeEnd)\n    }\n    \n  } else {\n    console.log('setting initial values')\n    initialValues.status = \"\"\n    initialValues.description = \"\"\n    initialValues.account = \"\"\n    initialValues.account2 = \"\"\n    initialValues.organizationLocationRoom = \"\"\n    initialValues.organizationShift = \"\"\n    initialValues.timeStart = \"\"\n    initialValues.timeEnd = \"\"\n  }\n\n\n  return (\n    <ScheduleShiftEditBase subTitle={subtitle} pageHeaderButtonList={(showDelete) ? <ScheduleShiftWeeklyOTCDelete/> : \"\"}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('general.edit')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={initialValues}\n          // validationSchema={SCHEDULE_CLASS_EDIT_OTC_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              console.log(\"SUBMIT VALUES\")\n              console.log(values)\n\n              let timeStart = undefined\n              let timeEnd = undefined\n              if (values.timeStart) {\n                timeStart = dateToLocalISOTime(values.timeStart)\n              }\n              \n              if (values.timeEnd) {\n                timeEnd = dateToLocalISOTime(values.timeEnd)  \n              }\n              \n\n              updateScheduleITEMWeeklyOTC({ variables: {\n                input: {\n                  scheduleItem: scheduleItemId,\n                  date: shiftDate,\n                  status: values.status,\n                  description: values.description,\n                  account: values.account,\n                  account2: values.account2,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  timeStart: timeStart,\n                  timeEnd: timeEnd,\n                }\n              }, refetchQueries: [\n                  {query: GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, variables: query_vars},\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()},\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('schedule.shifts.shift.edit.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                console.log('there was an error sending the query', error.graphQLErrors)\n                setSubmitting(false)\n              })\n            }\n          }\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <ScheduleShiftEditForm\n              inputData={queryData}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </ScheduleShiftEditForm>\n          )}\n        </Formik>\n      </Card>\n    </ScheduleShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEdit))","import moment from 'moment'\n\nexport function shiftSubtitle({t, location, locationRoom, shift, timeStart, date}) {\n  return t('general.shift') + ': ' + \n         location + ' (' + locationRoom + ') - ' + \n         shift + ' @ ' + \n         moment(date).format('LL') + ' ' + moment(timeStart).format('LT')\n}\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccounts($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemAccounts(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          account2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n    scheduleItemAccount(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      account2 {\n        id\n        fullName\n      }\n      dateStart\n      dateEnd       \n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, employee: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    accounts(first: 1000, before: $before, after: $after, isActive: true, employee: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation CreateScheduleItemAccount($input:CreateScheduleItemAccountInput!) {\n  createScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const UPDATE_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation UpdateScheduleItemAccount($input: UpdateScheduleItemAccountInput!) {\n  updateScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation DeleteScheduleClassInstructor($input: DeleteScheduleItemAccountInput!) {\n  deleteScheduleItemAccount(input: $input) {\n    ok\n  }\n}\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table,\n  Card,\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ShiftEditBack from \"../ShiftEditBack\"\nimport ShiftEditBase from \"../ShiftEditBase\"\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, DELETE_SCHEDULE_SHIFT_ACCOUNT } from \"./queries\"\n\n\nfunction ScheduleShiftEmployees({ t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const shiftId = match.params.shift_id\n  const menuActiveLink = \"employees\"\n  const cardTitle = t('schedule.shifts.employees.title')\n  const ButtonAdd = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemaccount\">\n    <Link to={`/schedule/shifts/all/employees/${shiftId}/add` } >\n      <Button color=\"primary ml-2\">\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n      </Button>\n    </Link>\n  </HasPermissionWrapper>\n  const pageHeaderButtonList = <Button.List>\n    <ShiftEditBack />\n    {ButtonAdd}\n  </Button.List>\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, {\n    variables: {scheduleItem: shiftId}\n  })\n  const [ deleteScheduleItemAccount ] = useMutation(DELETE_SCHEDULE_SHIFT_ACCOUNT)\n\n\n\n  // Loading\n  if (loading) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ShiftEditBase>\n  )\n  // Error\n  if (error) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.shifts.employees.error_loading')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemAccounts.edges.length) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.shifts.employees.empty_list')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  return (\n    <ShiftEditBase \n    menuActiveLink={menuActiveLink} \n    defaultCard={false}\n    pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.scheduleItemAccounts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemAccounts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAccounts.edges\n            const pageInfo = fetchMoreResult.scheduleItemAccounts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemAccounts: {\n                      __typename: previousResult.scheduleItemAccounts.__typename,\n                      edges: [ ...previousResult.scheduleItemAccounts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.employee')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.employee2')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}> \n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account.fullName}\n                  </Table.Col>\n                  <Table.Col>\n                    { node.account2 ? node.account2.fullName : \"\" }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/schedule/shifts/all/employees/${shiftId}/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\"\n                      >\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t('schedule.shifts.employees.delete_confirm_msg'),\n                            msgDescription: <List>\n                                <List.Item>{t(\"general.start\")}: {moment(node.dateStart).format(dateFormat)}</List.Item>\n                                <List.Item>{node.account.fullName} </List.Item>\n                               {(node.account2) ? <List.Item>{node.account2.fullName}</List.Item> : \"\"}\n                              </List>,\n                            msgSuccess: t('schedule.shifts.employees.deleted'),\n                            deleteFunction: deleteScheduleItemAccount,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }}\n                            ]}\n                        })}}\n                    >\n                      <span className=\"text-red\">\n                        <Icon prefix=\"fe\" name=\"trash-2\" />\n                      </span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </div>\n      </ContentCard>      \n    </ShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployees))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_SHIFT_EMPLOYEE_SCHEMA = Yup.object().shape({\n  account: Yup.string()\n    .required(t('yup.field_required')),\n  account2: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleShiftEmployeeForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.employee')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule shift employee add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.employee2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleShiftEmployeeBack = ({ t, shiftId }) => (\n  <ButtonBack returnUrl={\"/schedule/shifts/all/employees/\" + shiftId} />\n)\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeBack))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_SHIFT_ACCOUNT } from './queries'\nimport { SCHEDULE_SHIFT_EMPLOYEE_SCHEMA } from './yupSchema'\nimport ScheduleShiftEmployeeForm from './ScheduleShiftEmployeeForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ShiftEditBase from \"../ShiftEditBase\"\nimport ScheduleShiftEmployeeBack from \"./ScheduleShiftEmployeeBack\"\n\n\nfunction ScheduleShiftEmployeeAdd({ t, history, match }) {\n  const shiftId = match.params.shift_id\n  const returnUrl = `/schedule/shifts/all/employees/${shiftId}`\n  const cardTitle = t('schedule.shifts.employees.title_add')\n  const menuActiveLink = \"employees\" \n  const pageHeaderButtonList = <ScheduleShiftEmployeeBack shiftId={shiftId} />\n\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleShiftAccount] = useMutation(ADD_SCHEDULE_SHIFT_ACCOUNT)\n\n  if (loading) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          account: \"\",\n          account2: \"\",\n        }}\n        validationSchema={SCHEDULE_SHIFT_EMPLOYEE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleShiftAccount({ variables: {\n              input: {\n                scheduleItem: shiftId,\n                account: values.account,\n                account2: values.account2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.shifts.employees.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleShiftEmployeeForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ShiftEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY, UPDATE_SCHEDULE_SHIFT_ACCOUNT } from './queries'\nimport { SCHEDULE_SHIFT_EMPLOYEE_SCHEMA } from './yupSchema'\nimport ScheduleShiftEmployeeForm from './ScheduleShiftEmployeeForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ShiftEditBase from \"../ShiftEditBase\"\nimport ScheduleShiftEmployeeBack from \"./ScheduleShiftEmployeeBack\"\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleShiftEmployeeEdit({ t, match, history }) {\n  const id = match.params.id\n  const shiftId = match.params.shift_id\n  const returnUrl = `/schedule/shifts/all/employees/${shiftId}`\n  const cardTitle = t('schedule.shifts.employees.title_edit')\n  const menuActiveLink = \"employees\"\n  const pageHeaderButtonList = <ScheduleShiftEmployeeBack shiftId={shiftId} />\n\n  const {loading, error, data} = useQuery(GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleShiftAccount] = useMutation(UPDATE_SCHEDULE_SHIFT_ACCOUNT)\n\n  if (loading) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialData = data.scheduleItemAccount\n\n  let initialAccount2 = \"\"\n  if (initialData.account2) {\n    initialAccount2 =  initialData.account2.id\n  } \n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  \n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <ShiftEditBase \n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          account: initialData.account.id,\n          account2: initialAccount2,\n        }}\n        validationSchema={SCHEDULE_SHIFT_EMPLOYEE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleShiftAccount({ variables: {\n              input: {\n                id: match.params.id,\n                account: values.account,\n                account2: values.account2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.shifts.employees.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleShiftEmployeeForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleShiftEmployeeForm>\n        )}\n      </Formik>\n    </ShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeEdit))","import * as React from \"react\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\n\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\nimport GET_USER from \"../queries/system/get_user\"\n\nimport {\n  Site,\n  Grid,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\n// type subNavItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +LinkComponent?: React.ElementType,\n// |};\n\n// type navItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +active?: boolean,\n//   +LinkComponent?: React.ElementType,\n//   +subItems?: Array<subNavItem>,\n//   +useExact?: boolean,\n// |};\n\nconst now = new Date()\n\nfunction SiteWrapperSelfCheckin({t, match, history, children}) {\n  const { error, loading, data } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader />\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  console.log(data)\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n        href: \"/\",\n        alt: \"Costasiella\",\n        imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n        // navItems: (\n        //   <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n        //     <Link to=\"/settings/general\">\n        //       <Button\n        //         icon=\"settings\"\n        //         outline\n        //         size=\"sm\"\n        //         color=\"primary\"\n        //       >\n        //         {this.props.t('general.settings')}\n        //       </Button>\n        //     </Link>\n        //   </Nav.Item>\n        // ),\n        // notificationsTray: {\n        //   notificationsObjects,\n        //   markAllAsRead: () =>\n        //     this.setState(\n        //       () => ({\n        //         notificationsObjects: this.state.notificationsObjects.map(\n        //           v => ({ ...v, unread: false })\n        //         ),\n        //       }),\n        //       () =>\n        //         setTimeout(\n        //           () =>\n        //             this.setState({\n        //               notificationsObjects: this.state.notificationsObjects.map(\n        //                 v => ({ ...v, unread: true })\n        //               ),\n        //             }),\n        //           5000\n        //         )\n        //     ),\n        //   unread: unreadCount,\n        // },\n        accountDropdown: {\n        avatarURL: \"#\",\n        name: data.user.firstName + ' ' + data.user.lastName,\n        description: \"\",\n        options: [\n          // { icon: \"user\", value: \"Profile\" },\n          { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n          { isDivider: true },\n          { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n        ],\n      },\n      }}\n      // navProps={{ itemsObjects: navBarItems }}\n      // navProps={{ itemsObjects: getNavBarItems(this.props.t, data.user) }}\n      routerContextComponentType={withRouter(RouterContextProvider)}\n      footerProps={{\n        // links: [\n        //   <a href=\"#\">First Link</a>,\n        //   <a href=\"#\">Second Link</a>,\n        //   <a href=\"#\">Third Link</a>,\n        //   <a href=\"#\">Fourth Link</a>,\n        //   <a href=\"#\">Five Link</a>,\n        //   <a href=\"#\">Sixth Link</a>,\n        //   <a href=\"#\">Seventh Link</a>,\n        //   <a href=\"#\">Eigth Link</a>,\n        // ],\n        // note:\n        //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n        copyright: (\n          <React.Fragment>\n            <small>\n              Peacefully powered by\n              <a\n                href=\"https://costasiella.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {\" \"}\n                Costasiella\n              </a>{\". \"}\n              All rights reserved © {now.getFullYear()}.\n            </small>\n          </React.Fragment>\n        ),\n        nav: (\n          <React.Fragment>\n            <Grid.Col auto={true}>\n              {/* <List className=\"list-inline list-inline-dots mb-0\">\n                <List.Item className=\"list-inline-item\">\n                  <a href=\"./docs/index.html\">Documentation</a>\n                </List.Item>\n                <List.Item className=\"list-inline-item\">\n                  <a href=\"./faq.html\">FAQ</a>\n                </List.Item>\n              </List> */}\n            </Grid.Col>\n            <Grid.Col auto={true}>\n              {/* <Button\n                href=\"https://github.com/tabler/tabler-react\"\n                size=\"sm\"\n                outline\n                color=\"primary\"\n                RootComponent=\"a\"\n              >\n                Source code\n              </Button> */}\n            </Grid.Col>\n          </React.Fragment>\n        ),\n      }}\n    >\n      {children}\n      <ToastContainer \n        autoClose={5000} \n        transition={Slide}\n      />\n    </Site.Wrapper> \n  )\n}\n\n\n// class SiteWrapperSelfCheckin extends React.Component<Props, State> {\n//   state = {}  \n\n//   render(): React.Node {\n//     return (\n//       <Query query={GET_USER} >\n//         {({ loading, error, data }) => {\n//           if (loading) return <p>{this.props.t('general.loading_with_dots')}</p>;\n//           if (error) return <p>{this.props.t('system.user.error_loading')}</p>; \n          \n//           console.log('user data in site wrapper')\n//           console.log(data)\n      \n//           return <Site.Wrapper\n//             headerProps={{\n//                 href: \"/\",\n//                 alt: \"Costasiella\",\n//                 imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n//                 // navItems: (\n//                 //   <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n//                 //     <Link to=\"/settings/general\">\n//                 //       <Button\n//                 //         icon=\"settings\"\n//                 //         outline\n//                 //         size=\"sm\"\n//                 //         color=\"primary\"\n//                 //       >\n//                 //         {this.props.t('general.settings')}\n//                 //       </Button>\n//                 //     </Link>\n//                 //   </Nav.Item>\n//                 // ),\n//                 // notificationsTray: {\n//                 //   notificationsObjects,\n//                 //   markAllAsRead: () =>\n//                 //     this.setState(\n//                 //       () => ({\n//                 //         notificationsObjects: this.state.notificationsObjects.map(\n//                 //           v => ({ ...v, unread: false })\n//                 //         ),\n//                 //       }),\n//                 //       () =>\n//                 //         setTimeout(\n//                 //           () =>\n//                 //             this.setState({\n//                 //               notificationsObjects: this.state.notificationsObjects.map(\n//                 //                 v => ({ ...v, unread: true })\n//                 //               ),\n//                 //             }),\n//                 //           5000\n//                 //         )\n//                 //     ),\n//                 //   unread: unreadCount,\n//                 // },\n//                 accountDropdown: {\n//                 avatarURL: \"#\",\n//                 name: data.user.firstName + ' ' + data.user.lastName,\n//                 description: \"\",\n//                 options: [\n//                   // { icon: \"user\", value: \"Profile\" },\n//                   { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n//                   { isDivider: true },\n//                   { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n//                 ],\n//               },\n//               }}\n//               // navProps={{ itemsObjects: navBarItems }}\n//               // navProps={{ itemsObjects: getNavBarItems(this.props.t, data.user) }}\n//               routerContextComponentType={withRouter(RouterContextProvider)}\n//               footerProps={{\n//                 // links: [\n//                 //   <a href=\"#\">First Link</a>,\n//                 //   <a href=\"#\">Second Link</a>,\n//                 //   <a href=\"#\">Third Link</a>,\n//                 //   <a href=\"#\">Fourth Link</a>,\n//                 //   <a href=\"#\">Five Link</a>,\n//                 //   <a href=\"#\">Sixth Link</a>,\n//                 //   <a href=\"#\">Seventh Link</a>,\n//                 //   <a href=\"#\">Eigth Link</a>,\n//                 // ],\n//                 // note:\n//                 //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n//                 copyright: (\n//                   <React.Fragment>\n//                     Copyleft © {now.getFullYear()}.\n//                     <a\n//                       href=\"https://www.costasiella.com\"\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                     >\n//                       {\" \"}\n//                       Edwin van de Ven\n//                     </a>{\". \"}\n//                     All rights reserved.\n//                   </React.Fragment>\n//                 ),\n//                 nav: (\n//                   <React.Fragment>\n//                     <Grid.Col auto={true}>\n//                       {/* <List className=\"list-inline list-inline-dots mb-0\">\n//                         <List.Item className=\"list-inline-item\">\n//                           <a href=\"./docs/index.html\">Documentation</a>\n//                         </List.Item>\n//                         <List.Item className=\"list-inline-item\">\n//                           <a href=\"./faq.html\">FAQ</a>\n//                         </List.Item>\n//                       </List> */}\n//                     </Grid.Col>\n//                     <Grid.Col auto={true}>\n//                       {/* <Button\n//                         href=\"https://github.com/tabler/tabler-react\"\n//                         size=\"sm\"\n//                         outline\n//                         color=\"primary\"\n//                         RootComponent=\"a\"\n//                       >\n//                         Source code\n//                       </Button> */}\n//                     </Grid.Col>\n//                   </React.Fragment>\n//                 ),\n//               }}\n//             >\n//               {this.props.children}\n//               <ToastContainer \n//                 autoClose={5000} \n//                 transition={Slide}\n//               />\n//             </Site.Wrapper>\n//           }}\n//         </Query>\n//     );\n//   }\n// }\n\nexport default withTranslation()(SiteWrapperSelfCheckin)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapperSelfCheckin from \"../SiteWrapperSelfCheckin\"\n\n\nfunction SelfCheckinBase({ t, match, history, children, title, subTitle=\"\" }) {\n\n  return (\n    <SiteWrapperSelfCheckin>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={title} subTitle={subTitle} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                { children }\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapperSelfCheckin>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query Accounts(\n    $after: String, \n    $before: String, \n    $searchName: String\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_CLASS_ATTENDANCE_QUERY = gql`\n  query ScheduleItemAttendances($after: String, $before: String, $scheduleItem: ID!, $date: Date!) {\n    scheduleItemAttendances(first: 1000, before: $before, after: $after, scheduleItem: $scheduleItem, date: $date) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }     \n          accountClasspass {\n            organizationClasspass {\n              name\n              trialPass\n            }\n          }\n          attendanceType\n          bookingStatus\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_ATTENDANCE = gql`\n  mutation DeleteScheduleItemAttendance($input: DeleteScheduleItemAttendanceInput!) {\n    deleteScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation UpdateScheduleItemAttendance($input: UpdateScheduleItemAttendanceInput!) {\n    updateScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`\n","import moment from 'moment'\n\nexport function get_accounts_query_variables(searchName) {\n  let queryVars = {\n    searchName: undefined\n  }\n\n  queryVars.searchName = searchName\n\n  return queryVars\n}\n\nexport function get_attendance_list_query_variables(scheduleItemId, date) {\n  return {\n    scheduleItem: scheduleItemId,\n    date: date\n  }\n}\n\nexport function getSubtitle(classDate, scheduleItem, dateTimeFormat) {\n  return <span>\n    {scheduleItem.organizationLocationRoom.organizationLocation.name} { \" - \" }\n    {moment(classDate + \" \" +  scheduleItem.timeStart).format(dateTimeFormat)} { \" \" } \n    {scheduleItem.organizationClasstype.name} { \" \" }\n  </span> \n}\n","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Dimmer,\n  Dropdown,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { GET_ACCOUNTS_QUERY, GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { get_attendance_list_query_variables, get_accounts_query_variables, getSubtitle } from \"./tools\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport BadgeBookingStatus from \"../../ui/BadgeBookingStatus\"\nimport ContentCard from \"../../general/ContentCard\"\nimport InputSearch from \"../../general/InputSearch\"\n\n\nfunction setAttendanceStatus({t, updateAttendance, node, status, scheduleItemId, classDate, setRefetchingAttendance}) {\n  setRefetchingAttendance(true)\n\n  updateAttendance({\n    variables: { \n      input: {\n        id: node.id, \n        bookingStatus: status\n      }\n    },\n    refetchQueries: [\n      {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n        variables: get_attendance_list_query_variables(scheduleItemId, classDate)}\n    ],\n    awaitRefetchQueries: true,\n  }).then(({ data }) => {\n    console.log('got data', data);\n    setRefetchingAttendance(false)\n    toast.success(\n      t('schedule.classes.class.attendance.status_saved'), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n  }).catch((error) => {\n    setRefetchingAttendance(false)\n    toast.error((t('general.toast_server_error')) +  error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    console.log('there was an error sending the query', error);\n  })\n}\n\n\nfunction SelfCheckinCheckin({ t, match, history }) {\n  const [showSearch, setShowSearch] = useState(false)\n  const [refetchingAttendance, setRefetchingAttendance] = useState(false)\n  const [searchName, setSearchName] = useState(undefined)\n  const locationId = match.params.location_id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + \" \" + timeFormat\n\n  const { \n    // refetch: refetchAttendance, \n    loading: queryAttendanceLoading, \n    error: queryAttendanceError, \n    data: queryAttendanceData \n  } = useQuery(\n    GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, {\n      variables: get_attendance_list_query_variables(scheduleItemId, classDate),\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  const [ updateAttendance ] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  const [ getAccounts, \n    { fetchMore: fetchMoreAccounts,\n      loading: queryAccountsLoading, \n      error: queryAccountsError, \n      data: queryAccountsData \n    }] = useLazyQuery( GET_ACCOUNTS_QUERY, { fetchPolicy: \"network-only\"} )\n\n  console.log('queryAccountsData')\n  console.log(queryAccountsData)\n\n  if (queryAttendanceLoading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (queryAttendanceError) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.checkin.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n  console.log(queryAttendanceData)\n  let checkedInIds = []\n  queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n    checkedInIds.push(node.account.id)\n  ))\n  console.log(checkedInIds)\n  const scheduleItem = queryAttendanceData.scheduleItem\n\n  const subTitle = getSubtitle(\n    classDate,\n    scheduleItem,\n    dateTimeFormat\n  )\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <ContentCard cardTitle={t('general.attendance')}\n                   hasCardBody={false}\n                    pageInfo={queryAttendanceData.scheduleItemAttendances.pageInfo}\n                    onLoadMore={() => {\n                      fetchMoreAccounts({\n                      variables: {\n                        after: queryAttendanceData.scheduleItemAttendances.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n                        const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryAttendanceData: {\n                                scheduleItemAttendances: {\n                                  __typename: previousResult.scheduleItemAttendances.__typename,\n                                  edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n        }} >\n        { (!queryAttendanceData.scheduleItemAttendances.edges.length) ? \n            <Card.Body>{t('schedule.classes.class.attendance.empty_list')}</Card.Body> : \n          <Dimmer active={refetchingAttendance} loader={true} >\n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.account.fullName} <br />\n                      {node.accountClasspass && \n                        <small className='text-muted'>\n                          {node.accountClasspass.organizationClasspass.name} { \" \" }\n                        </small>\n                      }\n                      {node.accountClasspass && \n                       node.accountClasspass.organizationClasspass.trialPass && \n                       <Badge color=\"success\">{t('schedule.classes.class.attendance.trial')}</Badge>\n                      }\n                    </Table.Col>\n                    <Table.Col>\n                      <BadgeBookingStatus status={node.bookingStatus} />\n                    </Table.Col>\n                    <Table.Col>\n                      {/* Delete */}\n                      {/* <ScheduleClassAttendanceDelete node={node} /> */}\n                      {/* Status dropdown */}\n                      <Dropdown\n                        key={v4()}\n                        className=\"pull-right\"\n                        type=\"button\"\n                        toggle\n                        color=\"secondary\"\n                        triggerContent={t(\"general.status\")}\n                        items={[\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"check\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'ATTENDING',\n                                  scheduleItemId: scheduleItemId,\n                                  classDate: classDate,\n                                  setRefetchingAttendance: setRefetchingAttendance\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.ATTENDING')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"calendar\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'BOOKED',\n                                  scheduleItemId: scheduleItemId,\n                                  classDate: classDate,\n                                  setRefetchingAttendance: setRefetchingAttendance\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.BOOKED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"x\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'CANCELLED',\n                                  scheduleItemId: scheduleItemId,\n                                  classDate: classDate,\n                                  setRefetchingAttendance: setRefetchingAttendance\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.CANCELLED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                        ]}\n                      />\n                      {(node.bookingStatus === \"BOOKED\") ?\n                        <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                          <Button\n                            key={v4()}\n                            className=\"pull-right\"\n                            color=\"success\"\n                            size=\"\"\n                            onClick={() => {\n                              setAttendanceStatus({\n                                t: t, \n                                updateAttendance: updateAttendance,\n                                node: node,\n                                status: 'ATTENDING',\n                                scheduleItemId: scheduleItemId,\n                                classDate: classDate,\n                                setRefetchingAttendance: setRefetchingAttendance\n                              })\n                            }}>\n                              {t('general.checkin')}\n                          </Button>\n                        </HasPermissionWrapper>  : \"\" }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n          </Dimmer>\n      }\n      </ContentCard>\n      <h3>{t(\"selfcheckin.checkin.title_not_on_list\")}</h3>\n      <InputSearch \n        initialValueKey={searchName}\n        placeholder={t(\"search\")}\n        onChange={(value) => {\n          console.log(value)\n          localStorage.setItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH, value)\n          if (value) {\n            // {console.log('showSearch')}\n            // {console.log(showSearch)}\n            setShowSearch(true)\n            setSearchName(value)\n            getAccounts({ variables: get_accounts_query_variables(value)})\n          } else {\n            setShowSearch(false)\n            setSearchName(undefined)\n          }\n        }}\n      /> <br />\n      {/* Search results */}\n      {(showSearch && (queryAccountsData) && (!queryAccountsLoading) && (!queryAccountsError)) ?\n        <ContentCard cardTitle={t('general.search_results')}\n                    pageInfo={queryAccountsData.accounts.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                      fetchMoreAccounts({\n                        variables: {\n                        after: queryAccountsData.accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new accounts at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryAccountsData: {\n                                accounts: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n          { (!queryAccountsData.accounts.edges.length) ? \n            <Card.Body>{t('schedule.classes.class.attendance.search_result_empty')}</Card.Body> : \n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {queryAccountsData.accounts.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.fullName}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.email}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {(checkedInIds.includes(node.id)) ? \n                        <span className=\"pull-right\">{t(\"schedule.classes.class.attendance.search_results_already_checked_in\")}</span> :\n                        <Link to={\"/selfcheckin/book/\" + locationId + \"/\" + scheduleItemId + \"/\" + classDate + \"/\" + node.id}>\n                          <Button color=\"secondary pull-right\">\n                            {t('general.checkin')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>       \n                      }   \n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n        : \"\"\n      }\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinCheckin))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($account: ID!, $scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClassBookingOptions(account: $account, scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      account {\n        id\n        fullName\n      }\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation CreateScheduleItemAttendance($input: CreateScheduleItemAttendanceInput!) {\n    createScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { getSubtitle } from \"../Checkin/tools\"\n\nimport ScheduleClassBookClasspasses from \"../../schedule/classes/class/book/ScheduleClassBookClasspasses\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ScheduleClassBookSubscriptions from \"../../schedule/classes/class/book/ScheduleClassBookSubscriptions\"\nimport ScheduleClassBookPriceDropin from \"../../schedule/classes/class/book/ScheduleClassBookPriceDropin\"\nimport ScheduleClassBookPriceTrial from \"../../schedule/classes/class/book/ScheduleClassBookPriceTrial\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction SelfCheckinBookingOptions({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + \" \" + timeFormat\n\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const locationId = match.params.location_id\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        account: account_id,\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"ATTEND\"\n      }\n    }\n  )\n\n  // Remove search in checkin component\n  localStorage.removeItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH)\n\n  // Query\n  // Loading\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryData)\n  const account = queryData.scheduleClassBookingOptions.account\n  const classpasses = queryData.scheduleClassBookingOptions.classpasses\n  const subscriptions = queryData.scheduleClassBookingOptions.subscriptions\n  const prices = queryData.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = queryData.scheduleClassBookingOptions.scheduleItem\n  console.log(prices)\n  \n  const subTitle = getSubtitle(\n    class_date,\n    scheduleItem,\n    dateTimeFormat\n  )\n  \n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <Grid.Row>\n          <Grid.Col md={12}>\n            <h4>{t('general.booking_options')} {account.fullName}</h4>\n            <div className=\"mt-6\">\n            <Grid.Row cards deck>\n              <ScheduleClassBookSubscriptions \n                subscriptions={subscriptions} \n                returnTo=\"selfcheckin\" \n                locationId={locationId}\n              />\n              <ScheduleClassBookClasspasses \n                classpasses={classpasses} \n                returnTo=\"selfcheckin\" \n                locationId={locationId}\n              />\n              {(prices) ?\n                (prices.organizationClasspassDropin) ? \n                  <ScheduleClassBookPriceDropin \n                    priceDropin={prices.organizationClasspassDropin}\n                    returnTo=\"selfcheckin\" \n                    locationId={locationId}\n                  /> : \"\" \n                : \"\" }\n              {(prices) ?\n                (prices.organizationClasspassTrial) ? \n                  <ScheduleClassBookPriceTrial \n                    priceTrial={prices.organizationClasspassTrial}\n                    returnTo=\"selfcheckin\" \n                    locationId={locationId}\n                  /> : \"\" \n                : \"\" }\n            </Grid.Row>\n            </div>\n          </Grid.Col>\n        </Grid.Row>\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinBookingOptions))\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_LOCATIONS_QUERY = gql`\n  query Organizationlocations($after: String, $before: String) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          rooms(first: 100, archived: false) {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport { GET_ORGANIZATION_LOCATIONS_QUERY } from \"./queries\"\n\n\nfunction Locations({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_LOCATIONS_QUERY);\n\n  if (loading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (error) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.locations.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.home.title\")}>\n      <h4>{t(\"selfcheckin.locations.please_select\")}</h4>\n        <List.Group>\n          {\n            data.organizationLocations.edges.map(({node}) =>\n              <List.GroupItem action>\n                <Link to={\"/selfcheckin/location/\" + node.id}>\n                  <div>\n                    <span className=\"pull-right\"><Icon name=\"chevron-right\" /></span>\n                    <Icon name=\"home\" /> {node.name}\n                  </div>\n                </Link>\n              </List.GroupItem>\n          )}\n        </List.Group>\n\n          {/* //  List location rooms\n          // <div>\n          //   <h3>{node.name}</h3>\n          //   <List.Group>\n          //     {\n          //       node.organizationlocationroomSet.edges.map(({node}) =>\n          //         <List.GroupItem action>\n          //           <Link to={\"/selfcheckin/room/\" + node.id}>\n          //             <div>\n          //               <span className=\"pull-right\"><Icon name=\"chevron-right\" /></span>\n          //               {node.name}\n          //             </div>\n          //           </Link>\n          //         </List.GroupItem>\n          //       )\n          //     }\n          //   </List.Group>\n          //   <br />\n          // </div>\n        // ) */}\n      \n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(Locations))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATION_CLASSES_QUERY = gql`\n  query ScheduleClasses(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $organizationClasstype: ID,\n      $organizationLevel: ID,\n      $organizationLocation: ID!,\n    ){\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationClasstype: $organizationClasstype,\n        organizationLevel: $organizationLevel,\n        organizationLocation: $organizationLocation,\n    ){\n      date\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n    organizationLocation(id: $organizationLocation) {\n      id\n      name\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { GET_LOCATION_CLASSES_QUERY } from \"./queries\"\n\n\nfunction LocationClasses({ t, match, history }) {\n  const locationId = match.params.location_id\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n  const today = moment().format('YYYY-MM-DD')\n\n  const { loading, error, data } = useQuery(GET_LOCATION_CLASSES_QUERY, {\n    variables: {\n      dateFrom: today,\n      dateUntil: today,\n      organizationLocation: locationId,\n    }\n  })\n\n  if (loading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (error) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.classes.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n  console.log(data)\n  const subTitle = data.organizationLocation.name\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <Card>\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>\n              { t(\"general.time\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.room\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.class\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.instructor\") }\n            </Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {\n            data.scheduleClasses.map(({ date, classes }) => \n              classes.map((\n                { scheduleItemId, \n                  frequencyType,\n                  date, \n                  status,\n                  description,\n                  account, \n                  role,\n                  account2,\n                  role2,\n                  organizationLocationRoom, \n                  organizationClasstype, \n                  organizationLevel,\n                  timeStart, \n                  timeEnd,\n                  displayPublic }) => (\n                    // console.log(scheduleItemId)\n                    <Table.Row>\n                      <Table.Col>\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)}\n                      </Table.Col>\n                      <Table.Col>\n                        { organizationLocationRoom.name }\n                      </Table.Col>\n                      <Table.Col>\n                        { organizationClasstype.name }\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Instructor(s) */}\n                        { (account) ? account.fullName : \n                          <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        <Link to={\"/selfcheckin/checkin/\" + locationId + \"/\" + scheduleItemId + \"/\" + date}>\n                          <Button color=\"secondary\" className=\"pull-right\">\n                            {t(\"selfcheckin.classes.go_to_checkin\")}\n                            <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                    </Table.Row>\n                  )\n                )\n            )\n          }\n        </Table.Body>\n      </Table>\n      </Card>\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(LocationClasses))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SYSTEM_SETTINGS_QUERY = gql`\n  query SystemSettings($setting: String!) {\n    systemSettings(setting: $setting) {\n      edges {\n        node {\n          id\n          setting\n          value\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SYSTEM_SETTING = gql`\n  mutation UpdateSystemSetting($input: UpdateSystemSettingInput!) {\n    updateSystemSetting(input: $input) {\n      systemSetting {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../ui/ButtonBack\"\n\n\nfunction SettingsBack({ t, returnUrl=\"/settings\" }) { \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(SettingsBack)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../SiteWrapper\"\nimport SettingsBack from \"./SettingsBack\"\n\n\nfunction SettingsBase({ t, children, headerSubTitle=\"\", cardTitle, alertBanner=\"\", returnUrl=\"/settings\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('settings.title')} subTitle={headerSubTitle}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {alertBanner}\n              <Card>\n                <Card.Header>\n                  <Card.Title>{cardTitle}</Card.Title>\n                </Card.Header>\n                {children}\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY } from '../queries'\nimport SettingsBase from \"../SettingsBase\"\n\n\nfunction SettingsAbout({ t, match, history }) {\n  const headerSubTitle = t('settings.about.title')\n  const cardTitle = t(\"settings.about.about.title\")\n\n  const { \n    loading: loadingVersion, \n    error: errorVersion, \n    data: dataVersion \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"system_version\"\n    }\n  })\n  const { \n    loading: loadingPatch, \n    error: errorPatch, \n    data: dataPatch \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"system_version_patch\"\n    }\n  })\n\n  if ((loadingVersion) || (loadingPatch)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle} >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorVersion) || errorPatch) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle} >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let version = 0\n  let patch = 0\n  if (dataVersion.systemSettings.edges.length){\n    version = dataVersion.systemSettings.edges[0].node.value\n  } \n  if (dataPatch.systemSettings.edges.length){\n    patch = dataPatch.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >\n      <Card.Body>\n        <h2>\n          {t(\"settings.about.about.this_is_costasiella\")} {`${version}.${patch}`}\n        </h2>\n        <h3>{t(\"general.license_info\")}</h3>\n        {t(\"settings.about.about.license_version\")} <br /><br />\n        <h3>{t(\"general.license\")}</h3>\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. <br /><br />\nThis program is distributed in the hope that it will be useful, but <b>WITHOUT ANY WARRANTY</b>; without even the implied warranty of <b>MERCHANTABILITY</b> or <b>FITNESS FOR A PARTICULAR PURPOSE</b>. See the GNU General Public License for more details. <br /><br />\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. <br />\n<br />\nGNU GENERAL PUBLIC LICENSE<br />\n<br />\nVersion 2, June 1991<br />\n<br />\nCopyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA<br />\n<br />\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. <br />\n<br />\nPreamble<br />\n<br />\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too.<br />\n<br />\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.<br /><br />\n<br />\nTo protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.<br />\n<br />\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.<br />\n<br />\nWe protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.<br />\n<br />\nAlso, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.<br />\n<br />\nFinally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.<br />\n<br />\nThe precise terms and conditions for copying, distribution and modification follow.<br />\n<br />\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION<br />\n<br />\n0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\".<br />\n<br />\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.<br />\n<br />\n1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.<br />\n<br />\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.<br />\n<br />\n2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:<br />\n<br />\na) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.<br />\n<br />\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.<br />\n<br />\nIn addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.<br />\n<br />\n3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:<br />\n<br />\na) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.<br />\n<br />\nIf distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.<br />\n<br />\n4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.<br />\n<br />\n5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.<br />\n<br />\n6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.<br />\n<br />\n7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.<br />\n<br />\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.<br />\n<br />\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.<br />\n<br />\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.<br />\n<br />\n8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.<br />\n<br />\n9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.<br />\n<br />\nEach version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.<br />\n<br />\n10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.<br />\n<br />\nNO WARRANTY<br />\n<br />\n11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br />\n<br />\n12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.<br />\n<br />\nEND OF TERMS AND CONDITIONS<br />\n<br />\nHow to Apply These Terms to Your New Programs<br />\n<br />\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.<br />\n<br />\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.<br />\n<br />\none line to give the program's name and an idea of what it does. Copyright (C) yyyy name of author<br />\n<br />\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.<br />\n<br />\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.<br />\n<br />\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. Also add information on how to contact you by electronic and paper mail.<br />\n<br />\nIf the program is interactive, make it output a short notice like this when it starts in an interactive mode:<br />\n<br />\nGnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program.<br />\n<br />\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names:<br />\n<br />\nYoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.<br />\n<br />\nsignature of Ty Coon, 1 April 1989 Ty Coon, President of Vice\n      </Card.Body>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsAbout))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsFinanceBankAccountsForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"finance_bank_accounts_iban\" \n                checked={values.finance_bank_accounts_iban}\n              />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('settings.finance.bank_accounts.iban')}</span>\n            </Form.Label>\n          <ErrorMessage name=\"finance_bank_accounts_iban\" component=\"div\" />   \n        </Form.Group>  \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsFinanceBankAccountsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsFinanceBankAccountsForm from \"./SettingsFinanceBankAccountsForm\"\n\n\nfunction SettingsFinanceIBAN({ t, match, history }) {\n  const headerSubTitle = t('settings.finance.title')\n  const cardTitle = t(\"settings.finance.bank_accounts.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_bank_accounts_iban\"\n    },\n    // fetchPolicy: \"network-only\"\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >\n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    iban: false\n  }\n  if (data.systemSettings.edges.length){\n    initialValues['iban'] = (data.systemSettings.edges[0].node.value.toLowerCase() === 'true')\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        finance_bank_accounts_iban: initialValues['iban'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"finance_bank_accounts_iban\", value: values.finance_bank_accounts_iban },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value.toString(),\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsFinanceBankAccountsForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsFinanceBankAccountsForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsFinanceIBAN))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsFinanceCurrencyForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.finance.currency')}>\n            <Field type=\"text\" \n              name=\"finance_currency\" \n              className={(errors.finance_currency) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"finance_currency\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.finance.currency_symbol')}>\n            <Field type=\"text\" \n              name=\"finance_currency_symbol\" \n              className={(errors.finance_currency_symbol) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"finance_currency_symbol\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsFinanceCurrencyForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsFinanceCurrencyForm from \"./SettingsFinanceCurrencyForm\"\n\n\nfunction SettingsFinanceCurrency({ t, match, history }) {\n  const headerSubTitle = t('settings.finance.title')\n  const cardTitle = t(\"settings.finance.currency.title\")\n  const sidebarActive = \"integration\"\n\n  const { \n    loading: loadingCurrency, \n    error: errorCurrency, \n    data: dataCurrency \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_currency\"\n    }\n  })\n  const { \n    loading: loadingSymbol, \n    error: errorSymbol, \n    data: dataSymbol \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_currency_symbol\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingCurrency) || (loadingSymbol)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorCurrency) || errorSymbol) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    currency: \"EUR\",\n    symbol: \"€\"\n  }\n  if (dataCurrency.systemSettings.edges.length){\n    initialValues['currency'] = dataCurrency.systemSettings.edges[0].node.value\n  } \n  if (dataSymbol.systemSettings.edges.length){\n    initialValues['symbol'] = dataSymbol.systemSettings.edges[0].node.value\n  } \n    \n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        finance_currency: initialValues['currency'],\n        finance_currency_symbol: initialValues['symbol']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"finance_currency\", value: values.finance_currency },\n            { setting: \"finance_currency_symbol\", value: values.finance_currency_symbol },\n          ]\n\n          for (let i in settings) {\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsFinanceCurrencyForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsFinanceCurrencyForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsFinanceCurrency))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DATETIME_SCHEMA = Yup.object().shape({\n    dateFormat: Yup.string()\n      .required(t('yup.field_required')),\n    timeFormat: Yup.string()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsGeneralDateTimeForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.general.date_format')}>\n            <Field component=\"select\" \n                    name=\"dateFormat\" \n                    className={(errors.dateFormat) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"YYYY-MM-DD\" key={v4()}>{t('settings.general.date_formats.YYYY-MM-DD')}</option>\n                <option value=\"MM-DD-YYYY\" key={v4()}>{t('settings.general.date_formats.MM-DD-YYYY')}</option>\n                <option value=\"DD-MM-YYYY\" key={v4()}>{t('settings.general.date_formats.DD-MM-YYYY')}</option>\n            </Field>\n            <ErrorMessage name=\"dateFormat\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.general.time_format')}>\n            <Field component=\"select\" \n                    name=\"timeFormat\" \n                    className={(errors.timeFormat) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"24\" key={v4()}>{t('settings.general.time_formats.24hr')}</option>\n                <option value=\"12\" key={v4()}>{t('settings.general.time_formats.12hr')}</option>\n            </Field>\n            <ErrorMessage name=\"timeFormat\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsGeneralDateTimeForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_APP_SETTINGS_QUERY, UPDATE_APP_SETTINGS } from './queries'\nimport { DATETIME_SCHEMA } from './yupSchema'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsGeneralDateTimeForm from \"./SettingsGeneralDateTimeForm\"\n\n\nfunction SettingsGeneralDateTime({ t, match, history }) {\n  const headerSubTitle = t(\"settings.general.datetime\")\n  const cardTitle = t(\"settings.general.datetime\")\n  const sidebarActive = \"general\"\n\n  const { loading, error, data } = useQuery(GET_APP_SETTINGS_QUERY)\n  const [ updateSettings ] = useMutation(UPDATE_APP_SETTINGS)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        dateFormat: data.appSettings.dateFormat,\n        timeFormat: data.appSettings.timeFormat,\n        note: \"\",\n      }}\n      validationSchema={DATETIME_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              dateFormat: values.dateFormat,\n              timeFormat: values.timeFormat,\n            }\n          }, refetchQueries: [\n              {query: GET_APP_SETTINGS_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsGeneralDateTimeForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsGeneralDateTimeForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsGeneralDateTime))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsGeneralSystemForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.general.system.system_hostname')}>\n            <Field type=\"text\" \n              name=\"system_hostname\" \n              className={(errors.system_hostname) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"system_hostname\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsGeneralSystemForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsGeneralSystemForm from \"./SettingsGeneralSystemForm\"\n\n\nfunction SettingsGeneralSystem({ t, match, history }) {\n  const headerSubTitle = t('settings.general.title')\n  const cardTitle = t(\"settings.general.system.title\")\n  const sidebarActive = \"general\"\n  const queryVariables = {\n    setting: \"system_hostname\"\n  }\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: queryVariables\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let hostname = \"\"\n  if (data.systemSettings.edges.length) {\n    hostname = data.systemSettings.edges[0].node.value \n  }\n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        system_hostname: hostname\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              setting: \"system_hostname\",\n              value: values.system_hostname\n            }\n          }, refetchQueries: [\n              { query: GET_SYSTEM_SETTINGS_QUERY, variables: queryVariables }\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsGeneralSystemForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsGeneralSystemForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsGeneralSystem))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\n\nimport {\n  Card,\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HomeItemButton from \"../../ui/HomeItemButton\"\n\nfunction SettingsHome({ t, match, params }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('settings.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.general.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.general.date_time.title\")}</h5>\n                  {t(\"settings.general.date_time.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/general/datetime\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.general.system.title\")}</h5>\n                  {t(\"settings.general.system.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/general/system\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.workflow.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.class_booking.title\")}</h5>\n                  {t(\"settings.workflow.class_booking.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/class_booking\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.subscription_pauses.title\")}</h5>\n                  {t(\"settings.workflow.subscription_pauses.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/subscription_pauses\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.trial.title\")}</h5>\n                  {t(\"settings.workflow.trial.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/trial\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.shop.title\")}</h5>\n                  {t(\"settings.workflow.shop.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/shop\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.finance.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.finance.currency.title\")}</h5>\n                  {t(\"settings.finance.currency.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/finance/currency\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.finance.bank_accounts.title\")}</h5>\n                  {t(\"settings.finance.bank_accounts.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/finance/bank_accounts\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.mail.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.mailchimp_lists.title\")}</h5>\n                  {t(\"settings.mail.mailchimp_lists.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/mailchimp_lists\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.templates.title\")}</h5>\n                  {t(\"settings.mail.templates.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/templates\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.notifications.title\")}</h5>\n                  {t(\"settings.mail.notifications.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/notifications\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.shop.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.shop.features.title\")}</h5>\n                  {t(\"settings.shop.features.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/shop/features/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.shop.account_profiles.title\")}</h5>\n                  {t(\"settings.shop.account_profiles.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/shop/account_profiles/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.integration.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.integration.mailchimp.title\")}</h5>\n                  {t(\"settings.integration.mailchimp.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/integration/mailchimp/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.integration.mollie.title\")}</h5>\n                  {t(\"settings.integration.mollie.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/integration/mollie/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.about.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.about.about.title\")}</h5>\n                  {t(\"settings.about.explanation\")}\n                  <br /><br />\n                  <HomeItemButton \n                    link=\"/settings/about\" \n                    linkTitle={t(\"View info\")}\n                  />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsHome))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsIntegrationMailChimpForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        <Form.Group label={t('settings.integration.mailchimp.api_key')}>\n          <Field type=\"text\" \n            name=\"mailchimp_api_key\" \n            className={(errors.mailchimp_api_key) ? \"form-control is-invalid\" : \"form-control\"} \n            autoComplete=\"off\" />\n          <ErrorMessage name=\"mailchimp_api_key\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('settings.integration.mailchimp.server_prefix')}>\n          <Field type=\"text\" \n            name=\"mailchimp_server_prefix\" \n            className={(errors.mailchimp_server_prefix) ? \"form-control is-invalid\" : \"form-control\"} \n            autoComplete=\"off\" />\n          <ErrorMessage name=\"mailchimp_server_prefix\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsIntegrationMailChimpForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsIntegrationMailChimpForm from \"./SettingsIntegrationMailChimpForm\"\n\n\nfunction SettingsIntegrationMailChimp({ t, match, history }) {\n  const headerSubTitle = t('settings.integration.title')\n  const cardTitle = t(\"settings.integration.mailchimp.title\")\n  const sidebarActive = \"integration\"\n\n  const { \n    loading: loadingUser, \n    error: errorUser, \n    data: dataUser\n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mailchimp_server_prefix\"\n    }\n  })\n  const { \n    loading: loadingKey, \n    error: errorKey, \n    data: dataKey\n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mailchimp_api_key\"\n    }\n  })\n\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  console.log('query data app settings')\n  console.log(dataUser)\n  console.log(dataKey)\n\n  if (loadingUser || loadingKey) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorUser || errorKey) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let mcUser = \"\"\n  if (dataUser.systemSettings.edges.length) {\n    mcUser = dataUser.systemSettings.edges[0].node.value\n  }\n\n  let mcApiKey = \"\"\n  if (dataKey.systemSettings.edges.length) {\n    mcApiKey = dataKey.systemSettings.edges[0].node.value\n  }\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >\n    <Formik\n      initialValues={{ \n        mailchimp_server_prefix: mcUser,\n        mailchimp_api_key: mcApiKey\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"integration_mailchimp_server_prefix\", value: values.mailchimp_server_prefix },\n            { setting: \"integration_mailchimp_api_key\", value: values.mailchimp_api_key },\n          ]\n\n          for (let i in settings) {\n            console.log(i)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsIntegrationMailChimpForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsIntegrationMailChimpForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMailChimp))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsIntegrationMollieForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.integration.mollie.api_key')}>\n            <Field type=\"text\" \n              name=\"mollie_api_key\" \n              className={(errors.mollie_api_key) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"mollie_api_key\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollieForm))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n  Header,\n  Icon\n} from \"tabler-react\";\n\n\nfunction SettingsIntegrationMollieCreateAccount({ t, match, history, mollieApiKey }) {\n  if (mollieApiKey) {\n    return \"\"\n  }\n\n  return (\n    <Alert type=\"primary\">\n      <Header.H4>{t('settings.integration.mollie.create_account_title')}</Header.H4>\n      <p>\n        {t(\"settings.integration.mollie.create_account_message\")}\n      </p>\n      <a href=\"https://www.mollie.com/dashboard/signup/2488481\" target=\"_blank\" rel=\"noreferrer\" >\n        <Button color=\"success\" RootComponent=\"button\">\n          {t(\"settings.integration.mollie.to_mollie\")} <Icon name=\"chevron-right\" />\n        </Button>\n      </a>\n    </Alert>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollieCreateAccount))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsIntegrationMollieForm from \"./SettingsIntegrationMollieForm\"\nimport SettingsIntegrationMollieCreateAccount from \"./SettingsIntegrationMollieCreateAccount\"\n\n\nfunction SettingsIntegrationMollie({ t, match, history }) {\n  const headerSubTitle = t('settings.integration.title')\n  const cardTitle = t(\"settings.integration.mollie.title\")\n  const sidebarActive = \"integration\"\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mollie_api_key\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let mollieApiKey = \"\"\n  if (data.systemSettings.edges.length) {\n    mollieApiKey = data.systemSettings.edges[0].node.value\n  }\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n      alertBanner={<SettingsIntegrationMollieCreateAccount mollieApiKey={mollieApiKey} />}\n    >\n    <Formik\n      initialValues={{ \n        mollie_api_key: mollieApiKey\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              setting: \"integration_mollie_api_key\",\n              value: values.mollie_api_key\n            }\n          }, refetchQueries: [\n              {query: GET_SYSTEM_SETTINGS_QUERY,     variables: {\n                setting: \"integration_mollie_api_key\"\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsIntegrationMollieForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsIntegrationMollieForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollie))","import { gql } from \"@apollo/client\"\n\nexport const GET_MAILCHIMP_LISTS_QUERY = gql`\n  query systemMailchimpLists($after: String, $before: String) {\n    systemMailchimpLists(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          frequency\n          mailchimpListId\n        }\n      }\n    }\n  }\n`\n\nexport const GET_MAILCHIMP_LIST_QUERY = gql`\n  query SystemMailchimpList($id: ID!) {\n    systemMailchimpList(id:$id) {\n      id\n      name\n      description\n      frequency\n      mailchimpListId\n    }\n  }\n`\n\nexport const ADD_MAILCHIMP_LIST = gql`\n  mutation CreateSystemMailChimpList($input:CreateSystemMailChimpListInput!) {\n    createSystemMailchimpList(input: $input) {\n      systemMailchimpList{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_MAILCHIMP_LIST = gql`\n  mutation UpdateSystemMailChimpList($input:UpdateSystemMailChimpListInput!) {\n    updateSystemMailchimpList(input: $input) {\n      systemMailchimpList{\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_MAILCHIMP_LIST = gql`\nmutation DeleteSystemMailChimpList($input: DeleteSystemMailChimpListInput!) {\n  deleteSystemMailchimpList(input: $input) {\n    ok\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ButtonBack from \"../../../ui/ButtonBack\"\n\n\nfunction SettingsMailMailChimpListsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"settings.title\")} subTitle={t(\"settings.mail.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/settings/mail/mailchimp_lists\" />  \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"systemmailchimplist\">\n                  <ButtonAdd addUrl=\"/settings/mail/mailchimp_lists/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListsBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_MAILCHIMP_LIST, GET_MAILCHIMP_LISTS_QUERY } from \"./queries\"\nimport ButtonDelete from '../../../ui/ButtonDelete';\n\n\nfunction SettingsMailMailChimpListDelete({t, match, node}) {\n  const [ deleteMailChimpList ] = useMutation(DELETE_MAILCHIMP_LIST)\n\n  return <ButtonDelete\n    msgConfirm={t(\"settings.mail.mailchimp_lists.delete_confirm_msg\")}\n    msgDescription={<p>{node.name}</p>}\n    msgSuccess={t('settings.mail.mailchimp_lists.delete_success')}\n    deleteFunction={deleteMailChimpList}\n    deleteFunctionVariables={{ \n        variables: {\n          input: {\n            id: node.id\n          }\n        }, \n        refetchQueries: [\n          { query: GET_MAILCHIMP_LISTS_QUERY },\n        ]\n      }}\n  />\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListDelete))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\nimport ButtonEdit from \"../../../ui/ButtonEdit\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_MAILCHIMP_LISTS_QUERY } from \"./queries\"\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase'\nimport SettingsMailMailChimpListDelete from './SettingsMailMailChimpListDelete'\n\n\nfunction SettingsMailMailChimpLists({ t, history }) {\n  const cardTitle = t('settings.mail.mailchimp_lists.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_MAILCHIMP_LISTS_QUERY)\n  // const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  if (loading) return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  if (error) return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('settings.mail.mailchimp_lists.error_loading')}</p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  const mailchimpLists = data.systemMailchimpLists\n\n  // Empty list\n  if (!mailchimpLists.edges.length) { return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle} >\n        <p> \n          {t('settings.mail.mailchimp_lists.empty_list')}\n        </p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )}\n\n  return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}\n                    hasCardBody={false}\n                    pageInfo={mailchimpLists.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: mailchimpLists.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationmailchimpLists.edges\n                        const pageInfo = fetchMoreResult.organizationmailchimpLists.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new mailchimpLists at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationmailchimpLists: {\n                                __typename: previousResult.organizationmailchimpLists.__typename,\n                                edges: [ ...previousResult.organizationmailchimpLists.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('settings.mail.mailchimp_lists.mailchimp_list_id')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {mailchimpLists.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.mailchimpListId}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <ButtonEdit editUrl={`/settings/mail/mailchimp_lists/edit/${node.id}`} />\n                    <SettingsMailMailChimpListDelete node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpLists))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const MAILCHIMP_LIST_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    frequency: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    mailchimpListId: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\nconst SettingsMailChimpListForm = ({ t, history, isSubmitting, errors, values, setFieldValue, setFieldTouched, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.name')}>\n                <Field type=\"text\" \n                        name=\"name\" \n                        className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('settings.mail.mailchimp_lists.mailchimp_list_id')}>\n                <Field type=\"text\" \n                        name=\"mailchimpListId\" \n                        className={(errors.mailchimpListId) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"mailchimpListId\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n            <Form.Group label={t('general.frequency')}>\n              <Field type=\"text\" \n                      name=\"frequency\" \n                      className={(errors.frequency) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"frequency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.description')}>\n              <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(SettingsMailChimpListForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_MAILCHIMP_LISTS_QUERY, ADD_MAILCHIMP_LIST } from './queries'\nimport { MAILCHIMP_LIST_SCHEMA } from './yupSchema'\nimport SettingsMailMailChimpListForm from './SettingsMailMailChimpListForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase';\n\n\nfunction SettingsMailMailChimpListAdd({t, history}) {\n  const returnUrl = \"/settings/mail/mailchimp_lists\"\n  const [ addMailChimpList ] = useMutation(ADD_MAILCHIMP_LIST)\n  \n  return (\n   <SettingsMailMailChimpListsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('settings.mail.mailchimp_lists.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', description: '', frequency: '', mailchimpListId: '' }}\n          validationSchema={MAILCHIMP_LIST_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addMailChimpList({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description, \n                  frequency: values.frequency, \n                  mailchimpListId: values.mailchimpListId, \n                }\n              }, refetchQueries: [\n                  {query: GET_MAILCHIMP_LISTS_QUERY }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('settings.mail.mailchimp_lists.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldTouched, setFieldValue, values, errors }) => (\n            <SettingsMailMailChimpListForm \n              isSubmitting={isSubmitting}\n              values={values}\n              errors={errors}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </SettingsMailMailChimpListsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_MAILCHIMP_LISTS_QUERY, GET_MAILCHIMP_LIST_QUERY, UPDATE_MAILCHIMP_LIST } from './queries'\nimport { MAILCHIMP_LIST_SCHEMA } from './yupSchema'\nimport SettingsMailMailChimpListForm from './SettingsMailMailChimpListForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase';\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction SettingsMailMailChimpListEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/settings/mail/mailchimp_lists\"\n  const cardTitle = t('settings.mail.mailchimp_lists.title_edit')\n  const { loading, error, data } = useQuery(GET_MAILCHIMP_LIST_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateMailchimpList ] = useMutation(UPDATE_MAILCHIMP_LIST)\n\n  if (loading) return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  if (error) return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n                    \n  const initialData = data.systemMailchimpList;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description, \n              frequency: initialData.frequency, \n              mailchimpListId: initialData.mailchimpListId, \n            }}\n            validationSchema={MAILCHIMP_LIST_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateMailchimpList({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name, \n                    description: values.description, \n                    frequency: values.frequency, \n                    mailchimpListId: values.mailchimpListId, \n                  }\n                }, refetchQueries: [\n                    {query: GET_MAILCHIMP_LISTS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('settings.mail.mailchimp_lists.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldTouched, setFieldValue, values, errors }) => (\n              <SettingsMailMailChimpListForm \n                isSubmitting={isSubmitting}\n                values={values}\n                errors={errors}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </SettingsMailMailChimpListsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_NOTIFICATIONS_QUERY = gql`\n  query systemNotifications($after: String, $before: String) {\n    systemNotifications(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          accounts {\n            edges {\n              node {\n                id\n                fullName\n                email\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_NOTIFICATION_ACCOUNT = gql`\n  mutation CreateSystemNotificationAccount($input:CreateSystemNotificationAccountInput!) {\n    createSystemNotificationAccount(input:$input) {\n      systemNotificationAccount {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_NOTIFICATION_ACCOUNT = gql`\n  mutation DeleteSystemNotificationAccount($input:DeleteSystemNotificationAccountInput!) {\n    deleteSystemNotificationAccount(input:$input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ButtonBack from \"../../../ui/ButtonBack\"\n\n\nfunction SettingsMailNotificationsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"settings.title\")} subTitle={t(\"settings.mail.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/settings/mail/notifications\" />  \n              : \"\"\n                // <HasPermissionWrapper permission=\"add\"\n                //                       resource=\"systemnotification\">\n                //   <ButtonAdd addUrl=\"/settings/mail/notifications/add\" />\n                // </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotificationsBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_NOTIFICATION_ACCOUNT, GET_NOTIFICATIONS_QUERY } from \"./queries\"\nimport confirm_delete from '../../../../tools/confirm_delete';\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction SettingsMailNotificationsDeleteAccount({t, match, node, accountId, notificationId}) {\n  const [deleteNotificationAccount ] = useMutation(DELETE_NOTIFICATION_ACCOUNT)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm pull-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"settings.mail.notifications.delete_confirm_msg\"),\n            msgDescription: <p>{node.fullName}</p>,\n            msgSuccess: t('settings.mail.notifications.delete_success'),\n            deleteFunction: deleteNotificationAccount,\n            functionVariables: { \n              variables: {\n                input: {\n                  account: accountId,\n                  systemNotification: notificationId\n                }\n              }, \n              refetchQueries: [\n                { query: GET_NOTIFICATIONS_QUERY },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotificationsDeleteAccount))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport {\n  Button,\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\n// import ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_NOTIFICATIONS_QUERY } from \"./queries\"\nimport SettingsMailNotificationsBase from './SettingsMailNotificationsBase'\nimport SettingsMailNotificationButtonDeleteAccount from './SettingsMailNotificationButtonDeleteAccount'\n\n\nfunction SettingsMailNotifications({ t, history }) {\n  const cardTitle = t('settings.mail.notifications.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_NOTIFICATIONS_QUERY)\n  // const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  if (loading) return (\n    <SettingsMailNotificationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </SettingsMailNotificationsBase>\n  )\n\n  if (error) return (\n    <SettingsMailNotificationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('settings.mail.notifications.error_loading')}</p>\n      </ContentCard>\n    </SettingsMailNotificationsBase>\n  )\n\n  const notifications = data.systemNotifications\n\n  // Empty list\n  if (!notifications.edges.length) { return (\n    <SettingsMailNotificationsBase>\n      <ContentCard cardTitle={cardTitle} >\n        <p> \n          {t('settings.mail.notifications.empty_list')}\n        </p>\n      </ContentCard>\n    </SettingsMailNotificationsBase>\n  )}\n\n  console.log(notifications)\n\n  return (\n    <SettingsMailNotificationsBase>\n      <ContentCard cardTitle={cardTitle}\n                    hasCardBody={false}\n                    pageInfo={notifications.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: notifications.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.systemNotifications.edges\n                        const pageInfo = fetchMoreResult.systemNotifications.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new mailchimpLists at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              systemNotifications: {\n                                __typename: previousResult.systemNotifications.__typename,\n                                edges: [ ...previousResult.systemNotifications.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader className=\"text-right\">{t('settings.mail.notifications.accounts')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {notifications.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col>\n                    <div className='float-right'>\n                      {node.accounts.edges.map(({ node: accountNode }) => (\n                        // TODO: Add a delete button to the right of each account\n                        // console.log(accountNode)\n                        <div>\n                          <div className='float-right'>\n                            <SettingsMailNotificationButtonDeleteAccount\n                              node={accountNode}\n                              notificationId={node.id}\n                              accountId={accountNode.id}\n                            />\n                          </div>\n                          {accountNode.fullName}<br />\n                          <span className='text-muted'>{accountNode.email}</span>\n                        </div>\n                      ))}\n                      <Link to={`/settings/mail/notifications/add_account/${node.id}`}>\n                        <Button\n                          color=\"link\"\n                          icon=\"plus-circle\">\n                            {t(\"settings.mail.notifications.add_account\")}\n                        </Button>\n                      </Link>\n                    </div>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </SettingsMailNotificationsBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotifications))\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\n\nimport { CREATE_NOTIFICATION_ACCOUNT, GET_NOTIFICATIONS_QUERY } from \"./queries\"\n\n\nfunction SettingsMailNotificationButtonAddAccount({ t, match, history, accountId })  {\n  const notificationId = match.params.id\n  const [ createNotificationAccount ] = useMutation(CREATE_NOTIFICATION_ACCOUNT)\n  \n  return (\n    <Button\n      color=\"secondary\"\n      onClick={ () => (\n        createNotificationAccount({ variables: {\n          input: {\n            systemNotification: notificationId,\n            account: accountId\n          }}, \n          refetchQueries: [\n            {query: GET_NOTIFICATIONS_QUERY}\n        ]})\n        .then(({ data }) => {\n          console.log('got data', data)\n          history.push(`/settings/mail/notifications`)\n          toast.success((t('settings.mail.notifications.toast_add_success')), {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        }).catch((error) => {\n          toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n          console.log('there was an error sending the query', error)\n          // setSubmitting(false)\n        })\n      )}\n    >\n      <Icon name=\"plus-circle\" /> {t(\"settings.mail.notifications.btn_add_account\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotificationButtonAddAccount))\n","import React, { useState } from 'react'\nimport { useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../general/ContentCard\"\nimport InputSearch from '../general/InputSearch'\nimport { GET_ACCOUNTS_QUERY } from '../../queries/accounts/account_search_queries'\n\n// Action buttons\nimport SettingsMailNotificationButtonAddAccount from '../settings/mail/notifications/SettingsMailNotificationButtonAddAccount'\n\nfunction get_accounts_query_variables(searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined,\n  }\n\n  if (searchName) {\n    queryVars.searchName = searchName\n  }\n\n  return queryVars\n}\n\n\nfunction SearchAccounts({ \n  t, \n  match, \n  localStorateKeySearchValue=\"\", \n  placeholderSearch=\"\", \n  btnDisableAccountIds=[],\n  btnDisabledMessage=\"\",\n  btnAction,\n }) {\n  const [showSearchResults, setShowSearchResults] = useState(false)\n  const [ getAccounts, { called, loading, error, data, refetch, fetchMore } ] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  function renderActionButton(accountId) {\n    switch(btnAction) {\n      case \"settingsMailNotificationAddAccount\":\n        return <SettingsMailNotificationButtonAddAccount accountId={accountId} />\n      default:\n        return \"btnAction type not defined\"\n    }\n  }\n\n  function Search() {\n    return <InputSearch \n      className=\"mb-2\"\n      initialValueKey={localStorateKeySearchValue}\n      placeholder={placeholderSearch}\n      onChange={(value) => {\n        localStorage.setItem(localStorateKeySearchValue, value)\n        if (value && !called) {\n          setShowSearchResults(true)\n          getAccounts({ variables: get_accounts_query_variables(value)})\n        } else if (value) {\n          // This is important, as the current relayStylePagination doesn't include args.\n          // Don't use getAccounts again, but refetch with different vars.\n          setShowSearchResults(true)\n          refetch(get_accounts_query_variables(value))\n        } else {\n          setShowSearchResults(false)\n        }\n      }}\n    />\n  }\n\n  if (!showSearchResults) {\n    return <Search />\n  }\n\n  if (called && loading) return (\n    <React.Fragment>\n      <Search />\n      <ContentCard cardTitle={t('general.search_results')}>\n        <Dimmer active={true} loader={true} />\n      </ContentCard>\n    </React.Fragment>\n  )\n\n  if (called && error) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"danger\">{t(\"general.error_sad_smiley\")}</Alert>\n    </React.Fragment>\n  )\n\n  if (called && !data.accounts.edges.length) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"primary\">\n        <strong>{t(\"general.search_account_not_found\")}</strong> {\" - \"}\n        {t(\"general.search_no_account_results\")}\n      </Alert>\n    </React.Fragment>\n  )\n\n  return (\n    <React.Fragment>\n      <Search />\n      {(called && data) ?\n      <ContentCard cardTitle={t('general.search_results')}\n                  pageInfo={data.accounts.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                      after: data.accounts.pageInfo.endCursor\n                    },\n                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                      const newEdges = fetchMoreResult.accounts.edges\n                      const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                      return newEdges.length\n                        ? {\n                            // Put the new accounts at the end of the list and update `pageInfo`\n                            // so we have the new `endCursor` and `hasNextPage` values\n                            queryAccountsData: {\n                              accounts: {\n                                __typename: previousResult.accounts.__typename,\n                                edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          }\n                        : previousResult\n                    }\n                  })\n                }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {(btnDisableAccountIds.includes(node.id)) ? \n                    <span className=\"pull-right\">{btnDisabledMessage}</span> :\n                    <span className=\"pull-right\">{renderActionButton(node.id)}</span>\n                  }   \n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n      : \"\" }\n    </React.Fragment>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SearchAccounts))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport SettingsMailNotificationsBase from './SettingsMailNotificationsBase'\nimport SearchAccounts from '../../../ui/SearchAccounts'\n\n\nfunction SettingsMailNotificationsAddAccount({ t, match, history }) {\n\n  return (\n    <SettingsMailNotificationsBase showBack={true}>\n      <SearchAccounts\n        localStorateKeySearchValue=\"\" \n        placeholderSearch={t(\"settings.mail.notifications.placeholder_search_account\")} \n        btnDisableAccountIds={[1]}\n        btnDisabledMessage=\"already notified!\"\n        btnAction=\"settingsMailNotificationAddAccount\"\n      />\n    </SettingsMailNotificationsBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotificationsAddAccount))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport SettingsBack from \"../../SettingsBack\"\n\nfunction SettingsMailTemplatesBase({ t, children, headerSubTitle=\"\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"general.settings\")} subTitle={`${t(\"settings.mail.title\")} ${headerSubTitle}`}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsMailTemplatesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SYSTEM_MAIL_TEMPLATES_QUERY = gql`\n  query SystemMailTemplates {\n    systemMailTemplates(first:100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          subject\n          title\n          description\n          content\n          comments\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SYSTEM_MAIL_TEMPLATE_QUERY = gql`\n  query SystemMailTemplate($id: ID!) {\n    systemMailTemplate(id:$id) {\n      id\n      name\n      subject\n      title\n      description\n      content\n      comments\n    }\n  }\n`\n\nexport const UPDATE_SYSTEM_MAIL_TEMPLATE =  gql`\n  mutation UpdateSystemMailTemplate($input: UpdateSystemMailTemplateInput!) {\n    updateSystemMailTemplate(input: $input) {\n      systemMailTemplate {\n        id\n        name\n        subject\n        title\n        description\n        content\n        comments\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport SettingsMailTemplatesBase from \"./SettingsMailTemplatesBase\"\n\nimport { GET_SYSTEM_MAIL_TEMPLATES_QUERY } from \"./queries\"\n\n\nfunction SystemMailTemplates({ t, match, params }) {\n  const title = t(\"settings.mail.templates.title\")\n  const { loading, error, data, fetchMore } = useQuery(GET_SYSTEM_MAIL_TEMPLATES_QUERY)\n\n  if (loading) return (\n    <SettingsMailTemplatesBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </SettingsMailTemplatesBase>\n  )\n  if (error) return (\n    <SettingsMailTemplatesBase title={title}>\n      {t(\"settings.mail.templates.error_loading\")}\n    </SettingsMailTemplatesBase>\n  )\n\n  const mailTemplates = data.systemMailTemplates\n\n  // TODO: add empty list message and request import\n\n  return (\n    <SettingsMailTemplatesBase title={title} >\n      <ContentCard \n        cardTitle={t('settings.mail.templates.title')}\n        // headerContent={headerOptions}\n        pageInfo={mailTemplates.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: mailTemplates.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.systemMailTemplates.edges\n              const pageInfo = fetchMoreResult.systemMailTemplates.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    systemMailTemplates: {\n                      __typename: previousResult.systemMailTemplates.__typename,\n                      edges: [ ...previousResult.systemMailTemplates.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('settings.mail.templates.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n              <Table.Body>\n                  {mailTemplates.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {node.name}\n                      </Table.Col>\n                      <Table.Col>\n                        <Link to={\"/settings/mail/templates/edit/\" + node.id}>\n                          <Button className='btn-sm pull-right' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </SettingsMailTemplatesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(SystemMailTemplates))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport SettingsBack from \"../../SettingsBack\"\n\nfunction SettingsMailTemplatesBase({ t, children, headerSubTitle, help={} }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"general.settings\")} subTitle={`${t('settings.mail.title')} ${headerSubTitle}`}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack returnUrl=\"/settings/mail/templates\" />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={8}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={4}>\n              <Card title={t('general.subject')}>\n                <Card.Body>\n                  {help.subject}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.title')}>\n                <Card.Body>\n                  {help.title}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.description')}>\n                <Card.Body>\n                  {help.description}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.content')}>\n                <Card.Body>\n                  {help.content}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.comments')}>\n                <Card.Body>\n                  {help.comments}\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsMailTemplatesBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n\n\n\nfunction SettingsMailTemplateEditForm({ t, history, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl, cardTitle }) {\n\n\n  return (\n    <FoForm>\n      <Card title={cardTitle}>\n        <Card.Body>    \n          <Form.Group label={t('general.subject')} >\n            <Field type=\"text\" \n                  name=\"subject\" \n                  className={(errors.subject) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"subject\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.title')} >\n            <Field type=\"text\" \n                  name=\"title\" \n                  className={(errors.title) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"title\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.content')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"content\"\n              initialValue={values.content}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"content\", e.target.getContent())\n                setFieldTouched(\"content\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.comments')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"comments\"\n              initialValue={values.comments}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"comments\", e.target.getContent())\n                setFieldTouched(\"comments\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"comments\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n              className=\"pull-right\"\n              color=\"primary\"\n              disabled={isSubmitting}\n              type=\"submit\"\n            >\n              {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n              <Button\n                type=\"button\" \n                color=\"link\" \n              >\n                {t('general.cancel')}\n              </Button>\n            </Link>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailTemplateEditForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_MAIL_TEMPLATE_QUERY, GET_SYSTEM_MAIL_TEMPLATES_QUERY, UPDATE_SYSTEM_MAIL_TEMPLATE } from './queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport { getTemplateInfo } from './tools'\n\nimport SettingsMailTemplateEditBase from \"./SettingsMailTemplateEditBase\"\nimport SettingsMailTemplateEditForm from \"./SettingsMailTemplateEditForm\"\n\n\nfunction SettingsMailTemplateEdit({ t, match, history }) {\n  const id = match.params.id\n  const returnUrl = \"/settings/mail/templates\"\n  const headerSubTitle = t(\"settings.mail.templates.title\")\n  const cardTitle = t(\"settings.mail.templates.edit.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_MAIL_TEMPLATE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_MAIL_TEMPLATE)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsMailTemplateEditBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsMailTemplateEditBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsMailTemplateEditBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsMailTemplateEditBase>\n    )\n  }\n\n  const templateInfo = getTemplateInfo(t, data.systemMailTemplate.name)\n  console.log(data.systemMailTemplate.name)\n  console.log(templateInfo)\n\n\n  return (\n    <SettingsMailTemplateEditBase \n      headerSubTitle={headerSubTitle}\n      help={templateInfo.helpTexts}\n    >  \n    <Formik\n      initialValues={{ \n        subject: data.systemMailTemplate.subject,\n        title: data.systemMailTemplate.title,\n        description: data.systemMailTemplate.description,\n        content: data.systemMailTemplate.content,\n        comments: data.systemMailTemplate.comments        \n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              id: id,\n              subject: values.subject,\n              title: values.title,\n              description: values.description,\n              content: values.content,\n              comments: values.comments\n            }\n          }, refetchQueries: [\n              {query: GET_SYSTEM_MAIL_TEMPLATES_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.mail.templates.edit.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n        <SettingsMailTemplateEditForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n          setFieldTouched={setFieldTouched}\n          setFieldValue={setFieldValue}\n          cardTitle={templateInfo.cardTitle}\n          returnUrl={returnUrl}\n        >\n          {console.log(errors)}\n        </SettingsMailTemplateEditForm>\n      )}\n      </Formik>\n    </SettingsMailTemplateEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailTemplateEdit))","\nexport function getTemplateInfo(t, template_name) {\n  let cardTitle\n  let helpTexts\n\n\n  switch(template_name) {\n    case \"class_info_mail\":\n      cardTitle = t(\"settings.mail.templates.class_info_mail.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.class_info_mail.help_subject\"),\n        title: t(\"settings.mail.templates.class_info_mail.help_title\"),\n        description: t(\"settings.mail.templates.class_info_mail.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.class_info_mail.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.class_info_mail.help_comments\"), \n      }\n      break\n    case \"event_info_mail\":\n      cardTitle = t(\"settings.mail.templates.event_info_mail.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.event_info_mail.help_subject\"),\n        title: t(\"settings.mail.templates.event_info_mail.help_title\"),\n        description: t(\"settings.mail.templates.event_info_mail.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.event_info_mail.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.event_info_mail.help_comments\"), \n      }\n      break\n    case \"order_received\":\n      cardTitle = t(\"settings.mail.templates.order_received.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.order_received.help_subject\"),\n        title: t(\"settings.mail.templates.order_received.help_title\"),\n        description: t(\"settings.mail.templates.order_received.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.order_received.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.order_received.help_comments\"), \n      }\n      break\n    case \"recurring_payment_failed\":\n      cardTitle = t(\"settings.mail.templates.recurring_payment_failed.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.recurring_payment_failed.help_subject\"),\n        title: t(\"settings.mail.templates.recurring_payment_failed.help_title\"),\n        description: t(\"settings.mail.templates.recurring_payment_failed.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.recurring_payment_failed.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.recurring_payment_failed.help_comments\"), \n      }\n      break\n    case \"system_footer\":\n      cardTitle = t(\"settings.mail.templates.system_footer.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.system_footer.help_subject\"),\n        title: t(\"settings.mail.templates.system_footer.help_title\"),\n        description: t(\"settings.mail.templates.system_footer.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.system_footer.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.system_footer.help_comments\"), \n      }\n      break\n    case \"trialpass_followup\":\n      cardTitle = t(\"settings.mail.templates.trialpass_followup.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.trialpass_followup.help_subject\"),\n        title: t(\"settings.mail.templates.trialpass_followup.help_title\"),\n        description: t(\"settings.mail.templates.trialpass_followup.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.trialpass_followup.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.trialpass_followup.help_comments\"), \n      }\n      break\n    default:\n      cardTitle = t(\"settings.mail.templates.not_found.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.not_found.help_subject\"),\n        title: t(\"settings.mail.templates.not_found.help_title\"),\n        description: t(\"settings.mail.templates.not_found.help_description\"),\n        content: t(\"settings.mail.templates.not_found.help_content\"),\n        comments: t(\"settings.mail.templates.not_found.help_comments\"),\n      }\n  }\n\n\n  return {\n    \"cardTitle\": cardTitle,\n    \"helpTexts\": helpTexts,\n  }\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsShopAccountProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.shop.account_profiles.required_fields')}>\n            <Field component=\"select\" \n              name=\"shop_account_profile_required_fields\" \n              className={(errors.shop_account_profile_required_fields) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n                <option value=\"MINIMAL\">{t(\"settings.shop.account_profiles.options.minimal\")}</option>\n                <option value=\"CONTACT\">{t(\"settings.shop.account_profiles.options.contact\")}</option>\n            </Field>\n            <ErrorMessage name=\"shop_account_profile_required_fields\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsShopAccountProfileForm))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsShopAccountProfileForm from \"./SettingsShopAccountProfileForm\"\n\n\nfunction SettingsShopAccountProfile({ t, match, history }) {\n  const headerSubTitle = t('settings.shop.title')\n  const cardTitle = t(\"settings.shop.account_profiles.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"shop_account_profile_required_fields\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    shop_account_profile_required_fields: \"\",\n  }\n  if (data.systemSettings.edges.length){\n    initialValues['shop_account_profile_required_fields'] = data.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        shop_account_profile_required_fields: initialValues['shop_account_profile_required_fields'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"shop_account_profile_required_fields\", \n              value: values.shop_account_profile_required_fields },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsShopAccountProfileForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsShopAccountProfileForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsShopAccountProfile))","import * as Yup from 'yup'\n\nexport const SHOP_FEATURES_SCHEMA = Yup.object().shape({\n    subscriptions: Yup.boolean(),\n    classpasses: Yup.boolean(),\n    classes: Yup.boolean(),\n    events: Yup.boolean(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsShopFeaturesForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        {/* <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"memberships\" \n              checked={values.memberships} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.memberships')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"memberships\" component=\"div\" />   \n        </Form.Group>   */}\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"subscriptions\" \n              checked={values.subscriptions} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.subscriptions')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"subscriptions\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"classpasses\" \n              checked={values.classpasses} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.classpasses')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"classpasses\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"classes\" \n              checked={values.classes} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.classes')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"classes\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"events\" \n              checked={values.events} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.events')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"events\" component=\"div\" />   \n        </Form.Group>  \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsShopFeaturesForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHOP_FEATURES_QUERY, UPDATE_SHOP_FEATURES } from './queries'\nimport { SHOP_FEATURES_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsShopFeaturesForm from \"./SettingsShopFeaturesForm\"\n\n\nfunction SettingsShopFeatures({ t, match, history }) {\n  const headerSubTitle = t(\"settings.shop.features.title\")\n  const cardTitle = t(\"settings.shop.features.title\")\n  const sidebarActive = \"general\"\n\n  const { loading, error, data } = useQuery(GET_SHOP_FEATURES_QUERY)\n  const [ updateSettings ] = useMutation(UPDATE_SHOP_FEATURES)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  const shopFeatures = data.systemFeatureShop\n  \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        memberships: shopFeatures.memberships,\n        subscriptions: shopFeatures.subscriptions,\n        classpasses: shopFeatures.classpasses,\n        classes: shopFeatures.classes,\n        events: shopFeatures.events,\n      }}\n      validationSchema={SHOP_FEATURES_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          updateSettings({ variables: {\n            input: {\n              memberships: values.memberships,\n              subscriptions: values.subscriptions,\n              classpasses: values.classpasses,\n              classes: values.classes,\n              events: values.events\n            }\n          }, refetchQueries: [\n              {query: GET_SHOP_FEATURES_QUERY}\n          ]})\n          .then(({ data }) => {\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsShopFeaturesForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsShopFeaturesForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsShopFeatures))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowClassBookingForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.class_booking.book_days_advance')}>\n            <Field type=\"text\" \n              name=\"workflow_class_book_days_advance\" \n              className={(errors.workflow_class_book_days_advance) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_class_book_days_advance\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.workflow.class_booking.cancel_until')}>\n            <Field type=\"text\" \n              name=\"workflow_class_cancel_until\" \n              className={(errors.workflow_class_cancel_until) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_class_cancel_until\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBookingForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowClassBookingForm from \"./SettingsWorkflowClassBookingForm\"\n\n\nfunction SettingsWorkflowClassBooking({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.class_booking.title\")\n\n  const { \n    loading: loadingDaysAdvance, \n    error: errorDaysAdvance, \n    data: dataDaysAdvance \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_class_book_days_advance\"\n    }\n  })\n  const { \n    loading: loadingCancelUntil, \n    error: errorCancelUntil, \n    data: dataCancelUntil \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_class_cancel_until\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingDaysAdvance) || (loadingCancelUntil)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorDaysAdvance) || errorCancelUntil) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_class_book_days_advance: \"30\",\n    workflow_class_cancel_until: \"2\"\n  }\n  if (dataDaysAdvance.systemSettings.edges.length){\n    initialValues['workflow_class_book_days_advance'] = dataDaysAdvance.systemSettings.edges[0].node.value\n  } \n  if (dataCancelUntil.systemSettings.edges.length){\n    initialValues['workflow_class_cancel_until'] = dataCancelUntil.systemSettings.edges[0].node.value\n  } \n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_class_book_days_advance: initialValues['workflow_class_book_days_advance'],\n        workflow_class_cancel_until: initialValues['workflow_class_cancel_until']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"workflow_class_book_days_advance\", value: values.workflow_class_book_days_advance },\n            { setting: \"workflow_class_cancel_until\", value: values.workflow_class_cancel_until },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowClassBookingForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowClassBookingForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBooking))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowShopForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.shop.subscription_payment_method')}>\n            <Field component=\"select\" \n              name=\"workflow_shop_subscription_payment_method\" \n              className={(errors.workflow_shop_subscription_payment_method) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n                <option value=\"MOLLIE\">{t(\"finance.payment_methods.mollie\")}</option>\n                <option value=\"DIRECTDEBIT\">{t(\"finance.payment_methods.direct_debit\")}</option>\n            </Field>\n            <ErrorMessage name=\"workflow_shop_subscription_payment_method\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowShopForm))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowShopForm from \"./SettingsWorkflowShopForm\"\n\n\nfunction SettingsWorkflowShop({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.shop.title\")\n\n  const { \n    loading: loadingSubscriptionPayment, \n    error: errorSubscriptionPayment, \n    data: dataSubscriptionPayment \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_shop_subscription_payment_method\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loadingSubscriptionPayment) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorSubscriptionPayment) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_shop_subscription_payment_method: \"\",\n  }\n  if (dataSubscriptionPayment.systemSettings.edges.length){\n    initialValues['workflow_shop_subscription_payment_method'] = dataSubscriptionPayment.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_shop_subscription_payment_method: initialValues['workflow_shop_subscription_payment_method'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"workflow_shop_subscription_payment_method\", \n              value: values.workflow_shop_subscription_payment_method },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowShopForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowShopForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowShop))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowSubscriptionPausesForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.subscription_pauses.min_duration_in_days')}>\n            <Field type=\"text\" \n              name=\"workflow_subscription_pauses_min_duration_in_days\" \n              className={(errors.workflow_subscription_pauses_min_duration_in_days) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_subscription_pauses_min_duration_in_days\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.workflow.subscription_pauses.max_pauses_in_year')}>\n            <Field type=\"text\" \n              name=\"workflow_subscription_pauses_max_pauses_in_year\" \n              className={(errors.workflow_subscription_pauses_max_pauses_in_year) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_subscription_pauses_max_pauses_in_year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowSubscriptionPausesForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowSubscriptionPausesForm from \"./SettingsWorkflowSubscriptionPausesForm\"\n\n\nfunction SettingsWorkflowSubscriptionPauses({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.subscription_pauses.title\")\n\n  const { \n    loading: loadingMinDuration, \n    error: errorMinDuration, \n    data: dataMinDuration \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_subscription_pauses_min_duration_in_days\"\n    }\n  })\n  const { \n    loading: loadingMaxPauses, \n    error: errorMaxPauses, \n    data: dataMaxPauses \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_subscription_pauses_max_pauses_in_year\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingMinDuration) || (loadingMaxPauses)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorMinDuration) || errorMaxPauses) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_subscription_pauses_min_duration_in_days: \"1\",\n    workflow_subscription_pauses_max_pauses_in_year: \"1\"\n  }\n\n  if (dataMinDuration.systemSettings.edges.length){\n    initialValues['workflow_subscription_pauses_min_duration_in_days'] = dataMinDuration.systemSettings.edges[0].node.value\n  } \n  if (dataMaxPauses.systemSettings.edges.length){\n    initialValues['workflow_subscription_pauses_max_pauses_in_year'] = dataMaxPauses.systemSettings.edges[0].node.value\n  } \n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_subscription_pauses_min_duration_in_days: initialValues['workflow_subscription_pauses_min_duration_in_days'],\n        workflow_subscription_pauses_max_pauses_in_year: initialValues['workflow_subscription_pauses_max_pauses_in_year']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_subscription_pauses_min_duration_in_days\", \n              value: values.workflow_subscription_pauses_min_duration_in_days },\n            { setting: \"workflow_subscription_pauses_max_pauses_in_year\", \n              value: values.workflow_subscription_pauses_max_pauses_in_year },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowSubscriptionPausesForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowSubscriptionPausesForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowSubscriptionPauses))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowTrialForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.trial.trial_pass_limit')}>\n            <Field type=\"text\" \n              name=\"workflow_trial_pass_limit\" \n              className={(errors.workflow_trial_pass_limit) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_trial_pass_limit\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowTrialForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowTrialForm from \"./SettingsWorkflowTrialForm\"\n\n\nfunction SettingsWorkflowClassBooking({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.class_booking.title\")\n\n  const { \n    loading: loadingTrialClassLimit, \n    error: errorTrialClassLimit, \n    data: dataTrialClassLimit \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_trial_pass_limit\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loadingTrialClassLimit) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorTrialClassLimit) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_trial_pass_limit: \"1\",\n  }\n  if (dataTrialClassLimit.systemSettings.edges.length){\n    initialValues['workflow_trial_pass_limit'] = dataTrialClassLimit.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_trial_pass_limit: initialValues['workflow_trial_pass_limit'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_trial_pass_limit\", value: values.workflow_trial_pass_limit },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowTrialForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowTrialForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBooking))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountHomeBase({ t, match, history, children, subTitle=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={subTitle}/>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountHomeBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\n\nfunction ShopAccountHomeButton({ t, link, buttonText }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {buttonText} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountHomeButton))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Dimmer,\n  Grid\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage';\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountHomeBase from \"./ShopAccountHomeBase\"\nimport ShopAccountHomeButton from \"./ShopAccountHomeButton\"\n\n\nfunction ShopAccountHome({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n\n  // Unset any next link for bank accounts that might have come from /shop/subscription/:id\n  localStorage.removeItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT)\n  // Unset any next link for profile that might have come from /shop/checkout/payment\n  localStorage.removeItem(CSLS.SHOP_ACCOUNT_PROFILE_NEXT)\n\n\n  if (loading) return (\n    <ShopAccountHomeBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountHomeBase>\n  )\n  if (error) return (\n    <ShopAccountHomeBase>\n      {t(\"shop.account.error_loading_user_data\")}\n    </ShopAccountHomeBase>\n  )\n\n  const user = data.user\n\n  return (\n    <ShopAccountHomeBase subTitle={user.fullName}>\n      {(user.instructor || user.employee) ?\n        <div>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={4} lg={4}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"goto.title\")}</h5>\n                  {t(\"shop.account.goto.explanation\")}\n                  <br /><br />\n                  <ShopAccountHomeButton link=\"/user/welcome\" buttonText={t(\"shop.account.btn_go_to\")} />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row> \n          <hr />\n        </div>\n        : \"\"\n      } \n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.classes.title\")}</h5>\n              {t(\"shop.account.classes.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/classes\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.subscriptions.title\")}</h5>\n              {t(\"shop.account.subscriptions.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/subscriptions\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.classpasses.title\")}</h5>\n              {t(\"shop.account.classpasses.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/classpasses\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.event_tickets.title\")}</h5>\n              {t(\"shop.account.event_tickets.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/event_tickets\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      <hr />\n      {/* Administrative stuff below this point, profile, invoices, orders, etc. */}\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.profile.title\")}</h5>\n              {t(\"shop.account.profile.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/profile\" buttonText={t(\"shop.account.btn_text_profile_edit\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.bank_account.title\")}</h5>\n              {t(\"shop.account.bank_account.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/bank_account\" buttonText={t(\"shop.account.btn_text_bank_account_edit\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.orders.title\")}</h5>\n              {t(\"shop.account.orders.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/orders\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.invoices.title\")}</h5>\n              {t(\"shop.account.invoices.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/invoices\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.mailing_lists.title\")}</h5>\n              {t(\"shop.account.mailing_lists.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton \n                link=\"/shop/account/mailing_lists\" \n                buttonText={t(\"shop.account.btn_text_manage\")} \n              />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.change_password.title\")}</h5>\n              {t(\"shop.account.change_password.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/user/password/change/\" buttonText={t(\"shop.account.btn_text_change_password\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.sign_out.title\")}</h5>\n              {t(\"shop.account.sign_out.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/user/logout/\" buttonText={t(\"shop.account.btn_text_sign_out\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountHomeBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountHome))","import React from 'react'\nimport moment from 'moment'\nimport {\n  Icon,\n} from \"tabler-react\"\n\nexport function DisplayClassInfo({\n  t, \n  classDate, \n  classData,\n  dateFormat,\n  timeFormat,\n  showTimeEnd,\n}) {\n    return (\n      <>\n        <h6>{classData.organizationClasstype.name}</h6>\n        <Icon name=\"clock\" /> { moment(classDate).format(dateFormat) } { \" \" }\n        <span className=\"text-muted\">\n          {moment(classDate + ' ' + classData.timeStart).format(timeFormat)} \n          {(showTimeEnd) && <>{ \" - \" }{moment(classDate + ' ' + classData.timeEnd).format(timeFormat)}</>}\n        </span><br />\n        <Icon name=\"home\" /> { classData.organizationLocationRoom.organizationLocation.name } { \" \" }\n        <span className=\"text-muted\">\n          { classData.organizationLocationRoom.name }\n        </span> \n      </>\n      // <div>\n      //   <b>\n      //     {moment(classDate).format(dateFormat)} {' '}\n      //     {moment(TimeStringToJSDateOBJ(classData.scheduleClass.timeStart)).format(timeFormat)} {' - '}\n      //     {moment(TimeStringToJSDateOBJ(classData.scheduleClass.timeEnd)).format(timeFormat)} <br />  \n      //   </b>\n      //   {classData.scheduleClass.organizationClasstype.name + \" \" + t(\"general.at\") + ' ' + \n      //     classData.scheduleClass.organizationLocationRoom.organizationLocation.name}\n      // </div>\n    )\n}","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASS_QUERY = gql`\n  query ScheduleItemAttendance($scheduleItemId:ID!, $date:Date!, $id: ID!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n    scheduleItemAttendance(id: $id) {\n      id\n      cancellationPossible\n      attendanceType\n      date\n      bookingStatus\n      scheduleItem {\n        id\n        timeStart\n        timeEnd\n        organizationLocationRoom {\n          name\n          organizationLocation {\n            name\n          }\n        }\n        organizationClasstype {\n          name\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassCancelBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassCancelBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid\n} from \"tabler-react\"\n\nimport { DisplayClassInfo } from \"../../tools\"\nimport { UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport { GET_ACCOUNT_CLASS_QUERY } from \"./queries\"\n// import { GET_SCHEDULE_CLASS_QUERY } from \"../../checkout/class_info/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountClassCancelBase from \"./ShopAccountClassCancelBase\"\n\n\n\nfunction ShopAccountClassCancel({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const attendanceId = match.params.attendance_id\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date\n  const { loading: loadingAttendance, error: errorAttendance, data: dataAttendance } = useQuery(GET_ACCOUNT_CLASS_QUERY, {\n    variables: { \n      id: attendanceId,\n      scheduleItemId: scheduleItemId,\n      date: date\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const [updateScheduleItemAttendance] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loadingUser || loadingAttendance) return (\n    <ShopAccountClassCancelBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassCancelBase>\n  )\n  if (errorUser || errorAttendance) return (\n    <ShopAccountClassCancelBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassCancelBase>\n  )\n\n  const user = dataUser.user\n  console.log(dataUser)\n  console.log(dataAttendance)\n  const scheduleItemAttendance = dataAttendance.scheduleItemAttendance\n\n  // Booking already cancelled\n  if (scheduleItemAttendance.bookingStatus === 'CANCELLED') {\n    return (\n      <ShopAccountClassCancelBase accountName={user.fullName}>\n        <Card>\n          <Card.Body>\n            <h6>{t(\"shop.account.class_cancel.already_cancelled\")}</h6>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassCancelBase>\n    )\n  }\n\n  // Cancellation no longer possible\n  if (!scheduleItemAttendance.cancellationPossible) {\n    return (\n      <ShopAccountClassCancelBase accountName={user.fullName}>\n        <Card>\n          <Card.Body>\n            <h6>{t(\"shop.account.class_cancel.cancelation_not_possible\")}</h6>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassCancelBase>\n    )\n  }\n\n  // Show cancel option\n  return (\n    <ShopAccountClassCancelBase accountName={user.fullName}>\n      <Card>\n        <Card.Body>\n          {/* TODO: Check if class already cancelled */}\n          <h6>\n            {t(\"shop.account.class_cancel.confirmation_question\")}\n          </h6>\n          <DisplayClassInfo\n            t={t}\n            classDate={date}\n            classData={dataAttendance.scheduleItemAttendance.scheduleItem}\n            dateFormat={dateFormat}\n            timeFormat={timeFormat}\n          />\n          <br />\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={3} lg={3}>\n              <Button\n                block\n                className=\"mt-3\"\n                color=\"warning\"\n                size=\"sm\"\n                onClick={() =>\n                  updateScheduleItemAttendance({ variables: {\n                    input: {\n                      id: attendanceId,\n                      bookingStatus: \"CANCELLED\"\n                    }\n                  }})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      history.push(\"/shop/account/classes\")\n                      toast.success((t('shop.account.class_cancel.success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                    })\n                  }\n              >\n                {t(\"shop.account.class_cancel.confirm_yes\")}\n              </Button>\n            </Grid.Col>\n          </Grid.Row>\n          {/* <Link to={\"/shop/account/classes\"}>\n            {t(\"shop.account.class_cancel.confirm_no\")}\n          </Link> */}\n        </Card.Body>\n      </Card>\n    </ShopAccountClassCancelBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassCancel))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASS_QUERY = gql`\n  query ScheduleItemAttendance($scheduleItemId:ID!, $date:Date!, $id: ID!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n    scheduleItemAttendance(id: $id) {\n      id\n      uncancellationPossible\n      attendanceType\n      date\n      bookingStatus\n      scheduleItem {\n        id\n        timeStart\n        timeEnd\n        organizationLocationRoom {\n          name\n          organizationLocation {\n            name\n          }\n        }\n        organizationClasstype {\n          name\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassUnCancelBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassUnCancelBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\"\n\nimport { DisplayClassInfo } from \"../../tools\"\nimport { UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport { GET_ACCOUNT_CLASS_QUERY } from \"./queries\"\n// import { GET_SCHEDULE_CLASS_QUERY } from \"../../checkout/class_info/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountClassUnCancelBase from \"./ShopAccountClassUnCancelBase\"\n\n\n\nfunction ShopAccountClassUnCancel({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const attendanceId = match.params.attendance_id\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date\n  const { loading: loadingAttendance, error: errorAttendance, data: dataAttendance } = useQuery(GET_ACCOUNT_CLASS_QUERY, {\n    variables: { \n      id: attendanceId,\n      scheduleItemId: scheduleItemId,\n      date: date\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const [updateScheduleItemAttendance] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loadingUser || loadingAttendance) return (\n    <ShopAccountClassUnCancelBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassUnCancelBase>\n  )\n  if (errorUser || errorAttendance) return (\n    <ShopAccountClassUnCancelBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassUnCancelBase>\n  )\n\n  const user = dataUser.user\n  console.log(dataUser)\n  console.log(dataAttendance)\n  const scheduleItemAttendance = dataAttendance.scheduleItemAttendance\n\n  // Booking already cancelled\n  if (scheduleItemAttendance.bookingStatus !== 'CANCELLED') {\n    return (\n      <ShopAccountClassUnCancelBase accountName={user.fullName}>\n        <Card>\n          <Card.Body>\n            <h6>{t(\"shop.account.class_uncancel.not_cancelled\")}</h6>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassUnCancelBase>\n    )\n  }\n\n  // Cancellation no longer possible\n  if (!scheduleItemAttendance.uncancellationPossible) {\n    return (\n      <ShopAccountClassUnCancelBase accountName={user.fullName}>\n        <Card>\n          <Card.Body>\n            <h6>{t(\"shop.account.class_uncancel.uncancelation_not_possible\")}</h6>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassUnCancelBase>\n    )\n  }\n\n  // Show cancel option\n  return (\n    <ShopAccountClassUnCancelBase accountName={user.fullName}>\n      <Card>\n        <Card.Body>\n          {/* TODO: Check if class already cancelled */}\n          <h6>\n            {t(\"shop.account.class_uncancel.confirmation_question\")}\n          </h6>\n          <DisplayClassInfo\n            t={t}\n            classDate={date}\n            classData={dataAttendance.scheduleItemAttendance.scheduleItem}\n            dateFormat={dateFormat}\n            timeFormat={timeFormat}\n          />\n          <br />\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={3} lg={3}>\n              <Button\n                block\n                className=\"mt-3\"\n                color=\"primary\"\n                size=\"sm\"\n                onClick={() =>\n                  updateScheduleItemAttendance({ variables: {\n                    input: {\n                      id: attendanceId,\n                      bookingStatus: \"BOOKED\"\n                    }\n                  }})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      history.push(\"/shop/account/classes\")\n                      toast.success((t('shop.account.class_uncancel.success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                    })\n                  }\n              >\n                {t(\"shop.account.class_uncancel.confirm_yes\")} <Icon name=\"chevron-right\" />\n              </Button>\n            </Grid.Col>\n          </Grid.Row>\n          {/* <Link to={\"/shop/account/classes\"}>\n            {t(\"shop.account.class_cancel.confirm_no\")}\n          </Link> */}\n        </Card.Body>\n      </Card>\n    </ShopAccountClassUnCancelBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassUnCancel))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItemId:ID!, $date:Date!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n  }\n`\n\n\n\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Dimmer,\n  Icon,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { DisplayClassInfo } from \"../../tools\"\nimport { GET_SCHEDULE_CLASS_QUERY } from \"./queries\"\n\n\nfunction ShopCheckoutClassInfo({ t, scheduleItemId, date, complete=true}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_CLASS_QUERY, {\n    variables: { \n      scheduleItemId: scheduleItemId,\n      date: date\n    }\n  })\n\n  if (loading) return (\n    <Dimmer active={true} loader={true} />\n  )\n  if (error) return (\n      t(\"shop.checkout.class_info.error_loading\")\n  )\n\n  console.log(data)\n\n  return (\n    (!loading && !error) ?\n      <div className=\"text-muted\">\n        <h5><Icon name=\"book\" /> {\n          (complete) ? t(\"shop.checkout.class_info.have_been_checked_in\")\n                     : t(\"shop.checkout.class_info.will_be_checked_in\") \n        }</h5>\n        {/* Class display info $ mail content */}\n        <DisplayClassInfo \n          t={t} \n          classDate={date}\n          classData={data.scheduleClass} \n          dateFormat={dateFormat} \n          timeFormat={timeFormat}\n        />\n        <br />\n        {(data.scheduleClass.infoMailContent) ? \n          <div>\n            <h5><Icon name=\"info\" /> {t(\"shop.checkout.class_info.info_mail\")}</h5>\n            <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(data.scheduleClass.infoMailContent) }} /> \n          </div>\n          : \"\"\n        }\n      </div> \n      : \"\"\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutClassInfo))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassInfoBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassInfoBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\"\n\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopCheckoutClassInfo from \"../../checkout/class_info/ShopCheckoutClassInfo\"\nimport ShopAccountClassInfoBase from \"./ShopAccountClassInfoBase\"\n\n\n\nfunction ShopAccountClassInfo({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date \n\n  if (loading) return (\n    <ShopAccountClassInfoBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassInfoBase>\n  )\n  if (error) return (\n    <ShopAccountClassInfoBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassInfoBase>\n  )\n\n  const user = data.user\n\n  // Populated list\n  return (\n    <ShopAccountClassInfoBase accountName={user.fullName}>\n      <Card title={t(\"shop.account.class_info.title\")}>\n        <Card.Body>\n          <ShopCheckoutClassInfo\n            scheduleItemId={scheduleItemId}\n            date={date}\n            complete={true}\n          />\n        </Card.Body>\n      </Card>\n    </ShopAccountClassInfoBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClassInfo))\n","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_CLASSPASSES = gql`\n  query AccountClasspass($before: String, $after: String, $account: ID!) {\n    accountClasspasses(first: 100, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          organizationClasspass {\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction ShopAccountBack({ t, returnUrl=\"/shop/account\" }) {\n  \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(ShopAccountBack)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","import React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { QUERY_ACCOUNT_CLASSPASSES } from \"./queries\"\n\nimport ShopAccountClasspassesBase from \"./ShopAccountClasspassesBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountClasspasses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_CLASSPASSES, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountClasspassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClasspassesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountClasspassesBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountClasspassesBase>\n  )\n\n  const user = data.user\n  const classpasses = data.accountClasspasses\n\n  // Empty list\n  if (!classpasses.edges.length) {\n    return (\n      <ShopAccountClasspassesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.classpasses.title')} >\n              <Card.Body>\n                {t('shop.account.classpasses.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountClasspassesBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountClasspassesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.classpasses.title')}\n            hasCardBody={false}\n            pageInfo={classpasses.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: classpasses.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountClasspasses.edges\n                  const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountClasspasses: {\n                          __typename: previousResult.accountClasspasses.__typename,\n                          edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {classpasses.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.organizationClasspass.name}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateEnd).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.classesRemainingDisplay}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClasspasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../SiteWrapperShop\"\nimport ShopAccountBack from \"./ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport {\n  Badge,\n  Card,\n  Dimmer,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"../../../relations/accounts/schedule_event_tickets/queries\"\n\nimport ShopAccountProfileBase from \"../ShopAccountProfileBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountEventTickets({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.event_tickets.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  const user = dataUser.user\n  const eventTickets = data.accountScheduleEventTickets\n\n  // Empty list\n  if (!eventTickets.edges.length) {\n    return (\n      <ShopAccountProfileBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.event_tickets.title')} >\n              <Card.Body>\n                {t('shop.account.event_tickets.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountProfileBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.event_tickets.title')}\n            hasCardBody={false}\n            pageInfo={eventTickets.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: eventTickets.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountScheduleEventTickets.edges\n                  const pageInfo = fetchMoreResult.accountScheduleEventTickets.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new tickets at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        eventTickets: {\n                          __typename: previousResult.accountScheduleEventTickets.__typename,\n                          edges: [ ...previousResult.accountScheduleEventTickets.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.ticket')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {eventTickets.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.scheduleEventTicket.scheduleEvent.name} <br />\n                      <Badge>{node.scheduleEventTicket.name}</Badge> {\" \"}\n                      {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.scheduleEventTicket.scheduleEvent.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.scheduleEventTicket.scheduleEvent.organizationLocation.name}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountEventTickets))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INVOICE_QUERY = gql`\n  query FinanceInvoice($id: ID!) {\n    financeInvoice(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      invoiceNumber\n      dateSent\n      dateDue\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      paidDisplay\n      balance\n      balanceDisplay\n      creditInvoiceNumber\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_PAYMENT_LINK = gql`\nmutation CreateFinanceInvoicePaymentLink($id: ID!) {\n  createFinanceInvoicePaymentLink(id: $id) {\n    financeInvoicePaymentLink {\n      paymentLink\n    }\n  }\n}\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicePaymentBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack returnUrl=\"/shop/account/invoices\"/>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentBase))","import React, { useRef, useState } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\"\nimport { GET_INVOICE_QUERY, CREATE_PAYMENT_LINK } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountInvoicePaymentBase from \"./ShopAccountInvoicePaymentBase\"\n\n\nfunction ShopAccountInvoicePayment({t, match, history}) {\n  const id = match.params.id\n  const cardTitleLoadingError = t(\"shop.account.invoice_payment.title\")\n\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      id: id\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [createPaymentLink] = useMutation(CREATE_PAYMENT_LINK)\n\n  function onClickPay() {\n    btnPayNow.current.setAttribute(\"disabled\", \"disabled\")\n    setBtnText(t(\"shop.checkout.payment.redirecting\"))\n    // btnPayNow.current.setValue(\"redirecting...\")\n    // btnPayNow\n    // btnPayNow.current.removeAttribute(\"disabled\")\n    createPaymentLink({ variables: { id: id } }).then(({ data }) => {\n      console.log('got data', data);\n      const paymentLink = data.createFinanceInvoicePaymentLink.financeInvoicePaymentLink.paymentLink\n      window.location.href = paymentLink\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n    })\n  }\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicePaymentBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicePaymentBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"shop.account.invoice_payment.error_loading_data\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoice = data.financeInvoice\n\n  \n  return (\n    <ShopAccountInvoicePaymentBase accountName={user.fullName}>\n      <Card title={<span>{t(\"general.invoice\")} #{invoice.invoiceNumber}</span>}>\n        <Card.Body>\n          { invoice.items.edges.map(({ node }) => (\n            <Grid.Row>\n              <Grid.Col md={9}>\n                {node.productName} <br />\n                <small className=\"text-muted\">\n                  {node.description}\n                </small>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <span className=\"float-right\">\n                  {node.totalDisplay}\n                </span>\n              </Grid.Col>\n            </Grid.Row>\n          ))}\n          {/* Total */}\n          <Grid.Row>\n            <Grid.Col md={9} className=\"bold\">\n              <br />\n              {t(\"general.total\")}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <span className=\"bold float-right\">\n                <br />\n                {invoice.totalDisplay}\n              </span>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <button\n            className=\"btn float-right btn-success\"\n            ref={btnPayNow}\n            onClick={ onClickPay }\n          >\n            {btn_text}\n          </button>\n        </Card.Footer>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePayment))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountInvoicePaymentStatusBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName } />\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentStatusBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\"\nimport { GET_INVOICE_QUERY } from \"../invoice_payment/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountInvoicePaymentStatusBase from \"./ShopAccountInvoicePaymentStatusBase\"\n\n\nfunction ShopAccountInvoicePaymentStatus({t, match, history}) {\n  const id = match.params.id\n  const cardTitleLoadingError = t(\"shop.account.invoice_payment.title\")\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      id: id\n    }\n  })\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicePaymentStatusBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicePaymentStatusBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"shop.account.invoice_payment_status.error_loading_data\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n\n  const user = dataUser.user\n  const invoice = data.financeInvoice\n\n  let alert\n  if (invoice.status === \"PAID\") {\n    alert = <Alert type=\"success\" icon=\"check\">\n      {t(\"shop.account.invoice_payment_status.payment_received\")}\n    </Alert>\n  } else {\n    alert = <Alert type=\"primary\" icon=\"help-circle\">\n      {t(\"shop.account.invoice_payment_status.payment_not_confirmed\")}\n    </Alert>\n  }\n\n  \n  return (\n    <ShopAccountInvoicePaymentStatusBase accountName={user.fullName}>\n      {alert}\n      <Card title={<span>{t(\"general.invoice\")} #{invoice.invoiceNumber}</span>}>\n        <Card.Body>\n          { invoice.items.edges.map(({ node }) => (\n            <Grid.Row>\n              <Grid.Col md={9}>\n                {node.productName} <br />\n                <small className=\"text-muted\">\n                  {node.description}\n                </small>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <span className=\"float-right\">\n                  {node.totalDisplay}\n                </span>\n              </Grid.Col>\n            </Grid.Row>\n          ))}\n          {/* Total */}\n          <Grid.Row>\n            <Grid.Col md={9} className=\"bold\">\n              <br />\n              {t(\"general.total\")}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <span className=\"bold float-right\">\n                <br />\n                {invoice.totalDisplay}\n              </span>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <Link to=\"/shop/account/invoices\">\n            <Button \n              color=\"primary\"\n              className=\"float-right\"\n            >\n              {t(\"shop.account.invoice_payment_status.to_profile\")} <Icon name=\"chevron-right\" />\n            </Button>\n          </Link>\n        </Card.Footer>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentStatus))\n","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_INVOICES = gql`\n  query FinanceInvoices($after: String, $before: String, $account: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          business {\n            id\n            name\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicesBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicesBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  Table,\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_INVOICES } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\n\nimport ShopAccountInvoicesBase from \"./ShopAccountInvoicesBase\"\n\n\nfunction ShopAccountInvoices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_INVOICES, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountInvoicesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicesBase>\n      {t(\"shop.account.invoices.error_loading_data\")}\n    </ShopAccountInvoicesBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoices = data.financeInvoices\n\n  // Empty list\n  if (!invoices.edges.length) {\n    return (\n      <ShopAccountInvoicesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.invoices.title')} >\n              <Card.Body>\n                {t('shop.account.invoices.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountInvoicesBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountInvoicesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={invoices.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: invoices.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.financeInvoices.edges\n                  const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        financeInvoices: {\n                          __typename: previousResult.financeInvoices.__typename,\n                          edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} \n          >\n            <h4>{t(\"shop.account.invoices.title\")}</h4>\n            <Grid.Row>\n              {invoices.edges.map(({ node }) => (\n                <Grid.Col xs={12} sm={12} md={4} lg={4}>\n                  <Card>\n                    <Card.Header>\n                      <Link to={`/shop/account/invoice/${node.id}`}>\n                        <Card.Title>{node.invoiceNumber}</Card.Title>\n                      </Link>\n                      <Card.Options>\n                        <FinanceInvoicesStatus status={node.status}/>\n                      </Card.Options>\n                    </Card.Header>\n                    { node.business && \n                      <Card.Alert color=\"primary\">\n                        {t(\"shop.account.invoice.billed_to_b2b\")}: <b>{node.business.name}</b>\n                      </Card.Alert> \n                    }\n                    <Card.Body>\n                      <span className=\"text-bold\">\n                        {node.summary}\n                      </span>\n                    </Card.Body>\n                      <Table cards>\n                        <Table.Body>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n                            <Table.Col>{moment(node.dateSent).format(dateFormat)}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"finance.invoices.due\")}</Table.ColHeader>\n                            <Table.Col>{moment(node.dateDue).format(dateFormat)}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                            <Table.Col>{node.totalDisplay}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader><b>{t(\"shop.account.invoices.to_be_paid\")}</b></Table.ColHeader>\n                            <Table.Col><b>{node.balanceDisplay}</b></Table.Col>\n                          </Table.Row>\n                        </Table.Body>\n                      </Table>\n                    <Card.Footer>\n                      {((node.status === \"SENT\" || node.status === \"OVERDUE\") && onlinePaymentsAvailable) ?\n                        <Link to={\"/shop/account/invoice_payment/\" + node.id}>\n                          <Button\n                            className=\"float-right\"\n                            color=\"success\"\n                          >\n                            {t('shop.account.invoices.to_payment')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                        : \"\"\n                      }  \n                      <Button \n                        outline\n                        color=\"primary\"\n                        icon=\"printer\"\n                        className=\"mr-2\"\n                        onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                          t, doTokenRefresh, history, `/d/export/invoice/pdf/${node.id}`\n                        )}\n                      >\n                        {t('general.pdf')}\n                      </Button>    \n                      <Link to={`/shop/account/invoice/${node.id}`}>\n                        <Button \n                          outline\n                          color=\"primary\"\n                          icon=\"file-text\"\n                          className=\"mr-2\"\n                        >\n                          {t('general.details')}\n                        </Button>\n                      </Link>                  \n                    </Card.Footer>\n                  </Card>\n                </Grid.Col>\n              ))}\n            </Grid.Row>\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountInvoicesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoices))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_INVOICE = gql`\n  query FinanceInvoice($id: ID!) {\n    financeInvoice(id: $id) {\n      id\n      business {\n        id\n        name\n      }\n      invoiceNumber\n      status\n      summary\n      relationCompany\n      relationContactName\n      dateSent\n      dateDue\n      total\n      totalDisplay\n      balance\n      balanceDisplay\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            priceDisplay\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n            onlinePaymentId\n          }\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoiceBase({ t, match, history, children, pageHeaderButtonList, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack returnUrl=\"/shop/account/invoices\" />\n                {pageHeaderButtonList}\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoiceBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  Table,\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_INVOICE } from \"./queries\"\n\nimport ShopAccountInvoiceBase from \"./ShopAccountInvoiceBase\"\n\n\nfunction ShopAccountInvoice({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  const invoiceId = match.params.id\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading, error, data } = useQuery(QUERY_ACCOUNT_INVOICE, {\n    variables: {\n      id: invoiceId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  // const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  if (loading) return (\n    <ShopAccountInvoiceBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountInvoiceBase>\n  )\n  if (error) return (\n    <ShopAccountInvoiceBase>\n      {t(\"shop.account.invoice.error_loading_data\")}\n    </ShopAccountInvoiceBase>\n  )\n\n  const user = data.user\n  const invoice = data.financeInvoice\n\n  const pageHeaderButtonList = ((invoice.status === \"SENT\" || invoice.status === \"OVERDUE\") && onlinePaymentsAvailable) ?\n    <Link to={\"/shop/account/invoice_payment/\" + invoice.id}>\n      <Button\n        className=\"float-right ml-2\"\n        color=\"success\"\n      >\n        {t('shop.account.invoices.to_payment')} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n    : \"\"\n    \n\n  return (\n    <ShopAccountInvoiceBase accountName={user.fullName} pageHeaderButtonList={pageHeaderButtonList}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <div className='float-right'>\n            <FinanceInvoicesStatus status={invoice.status}/>\n          </div>\n          <h4>{t(\"shop.account.invoice.title\")} {invoice.invoiceNumber}</h4>\n          { invoice.business && \n              <Alert type=\"primary\">\n                {t(\"shop.account.invoice.billed_to_b2b\")}: <b>{invoice.business.name}</b>\n              </Alert> \n          }\n          <Card>\n            <Card.Body>\n              {invoice.summary}\n            </Card.Body>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n                  <Table.Col>{moment(invoice.dateSent).format(dateFormat)}</Table.Col>\n                  <Table.ColHeader>{t(\"finance.invoices.due\")}</Table.ColHeader>\n                  <Table.Col>{moment(invoice.dateDue).format(dateFormat)}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                  <Table.Col>{invoice.totalDisplay}</Table.Col>\n                  <Table.ColHeader><b>{t(\"shop.account.invoices.to_be_paid\")}</b></Table.ColHeader>\n                  <Table.Col><b>{invoice.balanceDisplay}</b></Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n          <h4>{t('general.items')}</h4>\n          {invoice.items.edges.map(({ node }) => (\n            <Card>\n              <Card.Body>\n                <Grid.Row>\n                  <Grid.Col xs={12} sm={12} md={6}>\n                    <h6>{node.productName}</h6>\n                    {node.description}\n                  </Grid.Col>\n                  <Grid.Col xs={12} sm={12} md={4}>\n                    {(parseFloat(node.quantity) > 1.00) ? <div>\n                      <b>{node.quantity} {t(\"shop.account.invoice.pieces\")} </b><br />\n                      {node.priceDisplay} {t(\"general.each\")}\n                    </div> : \"\"}\n                  </Grid.Col>\n                  <Grid.Col xs={12} sm={12} md={2}>\n                    <div className=\"float-right\">\n                      <b>{node.totalDisplay}</b><br />\n                    </div>\n                  </Grid.Col>\n                </Grid.Row>\n              </Card.Body>\n            </Card>\n          ))}\n          {(invoice.payments.edges.length) ?\n            <React.Fragment>\n              <h4>{t(\"general.payments\")}</h4>\n              {invoice.payments.edges.map(({ node }) => (\n              <Card>\n                <Card.Body>\n                  <Grid.Row>\n                    <Grid.Col xs={12} sm={12} md={8}>\n                      <h6>{moment(node.date).format(dateFormat)}</h6>\n                      {node.financePaymentMethod.name}\n                    </Grid.Col>\n                    <Grid.Col xs={12} sm={12} md={4}>\n                      <div className=\"float-right\">\n                        <b>{node.amountDisplay}</b><br />\n                      </div>\n                    </Grid.Col>\n                  </Grid.Row>\n                </Card.Body>\n              </Card>\n            ))}\n            </React.Fragment>\n          : \"\"}\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountInvoiceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoice))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_SYSTEM_MAILCHIMP_LISTS = gql`\n  query SystemMailchimpLists($before: String, $after: String) {\n    systemMailchimpLists(first: 100, before: $before, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          frequency\n          subscribed\n          mailchimpListId\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\nexport const UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS = gql`\n  mutation updateSystemMailchimpListSubscriptionStatus($input: UpdateSystemMailChimpListSubscriptionStatusInput!) {\n    updateSystemMailchimpListSubscriptionStatus(input: $input) {\n      subscriptionStatus\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountMailingListsBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountMailingListsBase))","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  GalleryCard,\n  Button,\n  Badge,\n} from \"tabler-react\";\n\nimport { QUERY_SYSTEM_MAILCHIMP_LISTS, UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS } from './queries'\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopAccountMailingListCard({ t, mailingList, btnLink, active=false }) {\n  let [isSubmitting, setSubmitting] = useState(false)\n  const [ updateSubscriptionStatus ] = useMutation(UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS)\n\n  function doUpdateSubscriptionStatus(mailchimpListId) {\n    setSubmitting(true)\n\n    updateSubscriptionStatus({ variables: {\n      input: {\n        mailchimpListId: mailchimpListId\n      }\n    }, refetchQueries: [\n      {query: QUERY_SYSTEM_MAILCHIMP_LISTS}\n    ]})\n    .then(({ data }) => {\n        console.log('got data', data)\n        toast.success((t('shop.account.mailing_lists.toast_update_subscription_status_success')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n        setSubmitting(false)\n      }).catch((error) => {\n        toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        console.log('there was an error sending the query', error)\n        setSubmitting(false)\n      })\n    }  \n\n  return (\n    <GalleryCard>\n      <GalleryCard.Details>\n        <div>\n        <span className='float-right'>\n        {(mailingList.subscribed) ? <Badge color=\"success\">Subscribed</Badge> : \"\"}\n        </span>\n        <h4>{mailingList.name}</h4>\n        </div>\n        \n        <h6>{mailingList.frequency}</h6>\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(mailingList.description) }} />\n\n        {(mailingList.subscribed) ? \n              <Button\n                color=\"secondary\" \n                block\n                outline\n                disabled={isSubmitting}\n                onClick={() => doUpdateSubscriptionStatus(mailingList.mailchimpListId)}\n              >\n                { (isSubmitting) ? \n                  t(\"shop.account.mailing_lists.unsubscribing\") : \n                  t(\"shop.account.mailing_lists.unsubscribe\") \n                }\n              </Button> :\n              <Button\n                color=\"success\" \n                block\n                outline\n                disabled={isSubmitting}\n                onClick={() => doUpdateSubscriptionStatus(mailingList.mailchimpListId)}\n              >\n                { (isSubmitting) ? \n                  t(\"shop.account.mailing_lists.subscribing\") : \n                  t(\"shop.account.mailing_lists.subscribe\") \n                }\n              </Button>\n        }\n      </GalleryCard.Details>\n    </GalleryCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountMailingListCard))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Dimmer,\n  Grid\n} from \"tabler-react\";\n\nimport { QUERY_SYSTEM_MAILCHIMP_LISTS } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountMailingListsBase from \"./ShopAccountMailingListsBase\"\nimport ShopAccountMailingListCard from \"./ShopAccountMailingListCard\"\n\n\nfunction ShopAccountMailingLists({t, match, history}) {\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(QUERY_SYSTEM_MAILCHIMP_LISTS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountMailingListsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountMailingListsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountMailingListsBase>\n      {t(\"shop.account.mailing_lists.error_loading_data\")}\n    </ShopAccountMailingListsBase>\n  )\n\n  const user = data.user\n  const mailingLists = data.systemMailchimpLists\n\n  // Empty list\n  if (!mailingLists.edges.length) {\n    return (\n      <ShopAccountMailingListsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.mailing_lists.title')} >\n              <Card.Body>\n                {t('shop.account.mailing_lists.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountMailingListsBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountMailingListsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h4>{t('shop.account.mailing_lists.title')}</h4>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        {mailingLists.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={4}>\n            <ShopAccountMailingListCard\n              mailingList={node}\n              // btnLink={\"/shop/classpass/\" + node.id}\n            />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopAccountMailingListsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountMailingLists))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_ORDERS = gql`\n  query FinanceOrders($after: String, $before: String, $account: ID!) {\n    financeOrders(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          message\n          status\n          total\n          totalDisplay\n          createdAt\n          items(first: 100) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                id\n                productName\n                description\n                quantity\n                priceDisplay\n                subtotalDisplay\n                taxDisplay\n                totalDisplay                \n              }\n            }\n          }\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n\nexport const UPDATE_ORDER = gql`\n  mutation UpdateOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n        status\n      }\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountOrdersBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountOrdersBase))","export function get_order_card_status_color(status) {\n    switch(status) {\n        case (\"RECEIVED\"): \n          return \"blue\"\n        case (\"AWAITING_PAYMENT\"): \n          return \"blue\"\n        case (\"PAID\"):\n          return \"green\"\n        case (\"DELIVERED\"):\n          return \"green\"\n        case \"CANCELLED\":\n          return \"orange\"\n        default:\n          return \"\"\n      }\n}","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceOrderStatus from \"../../../finance/orders/FinanceOrderStatus\"\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  Table\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_ORDERS, UPDATE_ORDER } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountOrdersBase from \"./ShopAccountOrdersBase\"\nimport { cancelOrder } from \"./ShopAccountOrderCancel\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\n\nimport { get_order_card_status_color } from \"./tools\"\n\nfunction ShopAccountOrders({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  // Chain queries. First query user data and then query orders for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_ORDERS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateOrder ] = useMutation(UPDATE_ORDER)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountOrdersBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountOrdersBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountOrdersBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountOrdersBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const orders = data.financeOrders\n\n  // Empty list\n  if (!orders.edges.length) {\n    return (\n      <ShopAccountOrdersBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.orders.title')} >\n              <Card.Body>\n                {t('shop.account.orders.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountOrdersBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountOrdersBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={orders.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: orders.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.financeOrders.edges\n                  const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        financeOrders: {\n                          __typename: previousResult.financeOrders.__typename,\n                          edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <h4>{t(\"shop.account.orders.title\")}</h4>\n            {orders.edges.map(({ node }) => (\n              <div>\n                <span className=\"pull-right\">\n                  <FinanceOrderStatus status={node.status} />\n                </span>\n                <small className=\"text-muted\">\n                  {moment(node.createdAt).format(dateTimeFormat)}\n                </small>\n                <Card statusColor={get_order_card_status_color(node.status)}>\n                  <Card.Header>\n                    <Card.Title>{t(\"general.order\") + \" #\" + node.orderNumber}</Card.Title>\n                    <Card.Options>\n                      {(node.status === \"RECEIVED\" || node.status === \"AWAITING_PAYMENT\") ?\n                        <Button\n                          outline\n                          color=\"warning\"\n                          size=\"sm\"\n                          onClick={() => cancelOrder({\n                            t: t,\n                            msgConfirm: t('shop.account.orders.msg_cancel_confirm'),\n                            msgDescription: <p>{t('general.order') + \" #\" + node.orderNumber}</p>, \n                            msgSuccess: t('shop.account.orders.order.cancelled'), \n                            cancelFunction: updateOrder, \n                            functionVariables: {\n                              variables: {\n                                input: {\n                                  id: node.id,\n                                  status: 'CANCELLED'\n                                }\n                              }\n                            }\n                          })}\n                        >\n                          {t('general.cancel')}\n                        </Button>\n                      : \"\"}\n                      {(node.status === \"AWAITING_PAYMENT\" && onlinePaymentsAvailable) ?\n                        <Link to={\"/shop/checkout/payment/\" + node.id}>\n                          <Button\n                            className=\"ml-4\"\n                            color=\"success\"\n                            size=\"sm\"\n                          >\n                            {t('shop.account.orders.to_payment')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                      : \"\"}\n                    </Card.Options>\n                  </Card.Header>\n                  <Table cards>\n                    <Table.Header>\n                      <Table.Row>\n                        <Table.ColHeader>{t(\"general.product\")}</Table.ColHeader>\n                        <Table.ColHeader>{t(\"general.description\")}</Table.ColHeader>\n                        <Table.ColHeader><span className=\"float-right\">{t(\"general.total\")}</span></Table.ColHeader>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                      {node.items.edges.map(({ node }) => (\n                        <Table.Row>\n                          <Table.Col>{node.productName}</Table.Col>\n                          <Table.Col>{node.description}</Table.Col>\n                          <Table.Col><span className=\"float-right\">{node.totalDisplay}</span></Table.Col>\n                        </Table.Row>    \n                      ))}\n                      <Table.Row>\n                        <Table.Col></Table.Col>\n                        <Table.Col></Table.Col>\n                        <Table.Col><span className=\"bold float-right\">{node.totalDisplay}</span></Table.Col>\n                      </Table.Row>\n                    </Table.Body>\n                  </Table>\n                </Card>\n              </div>\n            ))}\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountOrdersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountOrders))","import React from 'react'\nimport { toast } from 'react-toastify'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { v4 } from 'uuid'\n\n\nexport function cancelOrder({t, msgConfirm, msgDescription, msgSuccess, cancelFunction, functionVariables}) {\n  return (\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div key={v4()} className='custom-ui'>\n            <h1>{t('shop.account.orders.confirm_cancel')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('shop.account.orders.confirm_cancel_no')}</button>\n            <button\n              className=\"btn btn-warning btn-sm outline\"\n              onClick={() => {\n                cancelFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              {t('shop.account.orders.confirm_cancel_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  )\n}\n","import { gql } from \"@apollo/client\"\n\n\nexport const UPDATE_PROFILE = gql`\n  mutation UpdateAccount($input:UpdateAccountInput!) {\n    updateAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\n\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Button,\n} from \"tabler-react\";\n\n\nfunction ShopAccountProfileBtnDownloadData({ t, history }) {\n  const export_url = \"/d/export/account_data\"\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  //TODO Check if account data download feature is enabled\n\n  return (\n    <Button\n      color=\"secondary\"\n      icon=\"download\"\n      className=\"ml-2\"\n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n        t, doTokenRefresh, history, export_url\n      )}\n    >\n      {t('shop.account.profile.download_my_data')} \n    </Button>\n  )\n}\n\nexport default withTranslation()(ShopAccountProfileBtnDownloadData)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\nimport ShopAccountProfileBtnDownloadData from './ShopAccountProfileBtnDownloadData'\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  // Fetch back location from localStorage, if no value set, default back to /finance/invoices\n  let returnUrl = localStorage.getItem(CSLS.SHOP_ACCOUNT_PROFILE_NEXT)\n  if (!returnUrl) {\n    returnUrl = \"/shop/account\"\n  }\n\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n            <div className=\"page-options d-flex\">\n              <ShopAccountBack returnUrl={returnUrl} />\n              <ShopAccountProfileBtnDownloadData />\n            </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../../tools/iso_country_codes\"\n\n\nconst ShopAccountProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Card title={t(\"shop.accounts.profile.edit\")} >\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.first_name')}>\n              <Field type=\"text\" \n                      name=\"firstName\" \n                      className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.last_name')}>\n              <Field type=\"text\" \n                      name=\"lastName\" \n                      className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n         <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.date_of_birth')}>\n              <CSDatePicker \n                selected={values.dateOfBirth}\n                onChange={(date) => setFieldValue(\"dateOfBirth\", date)}\n                onBlur={() => setFieldTouched(\"dateOfBirth\", true)}\n              />\n              <ErrorMessage name=\"dateOfBirth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.gender')}>\n              <Field component=\"select\" \n                    name=\"gender\" \n                    className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                <option value=\"F\">{t(\"genders.female\")}</option>\n                <option value=\"M\">{t(\"genders.male\")}</option>\n                <option value=\"X\">{t(\"genders.other\")}</option>\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('relations.accounts.emergency')}>\n              <Field type=\"text\" \n                     name=\"emergency\" \n                     className={(errors.emergency) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"emergency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.mobile')}>\n              <Field type=\"text\" \n                     name=\"mobile\" \n                     className={(errors.mobile) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"mobile\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                     name=\"postcode\" \n                     className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                     name=\"country\" \n                     className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopAccountProfileForm))\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SCHEMA_MINIMAL = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n  })\n\nexport const ACCOUNT_SCHEMA_CONTACT = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n    address: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    postcode: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    city: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    country: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    phone: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport { UPDATE_PROFILE } from \"./queries\"\nimport ShopAccountProfileBase from \"./ShopAccountProfileBase\"\nimport ShopAccountProfileForm from \"./ShopAccountProfileForm\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { ACCOUNT_SCHEMA_MINIMAL, ACCOUNT_SCHEMA_CONTACT } from \"./yupSchema\"\n\n\nfunction ShopAccountProfile({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n  const [ updateProfile ] = useMutation(UPDATE_PROFILE)\n\n  if (loading) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.profile.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n// TODO: Fetch required level or profile completeness and set correct YupSchema for it.\n\n  const user = data.user\n\n  let validationSchema = ACCOUNT_SCHEMA_MINIMAL\n  if (user.profilePolicy === \"CONTACT\") {\n    validationSchema = ACCOUNT_SCHEMA_CONTACT\n  }\n\n  let dateOfBirth = null\n  if (user.dateOfBirth) {\n    dateOfBirth = new Date(user.dateOfBirth)\n  }\n\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Formik\n            initialValues={{ \n              firstName: user.firstName, \n              lastName: user.lastName, \n              email: user.email,\n              dateOfBirth: dateOfBirth,\n              gender: user.gender,\n              emergency: user.emergency,\n              phone: user.phone,\n              mobile: user.mobile,\n              address: user.address,\n              postcode: user.postcode,\n              city: user.city,\n              country: user.country\n            }}\n            validationSchema={validationSchema}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: user.accountId,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  gender: values.gender,\n                  emergency: values.emergency,\n                  phone: values.phone,\n                  mobile: values.mobile,\n                  address: values.address,\n                  postcode: values.postcode,\n                  city: values.city,\n                  country: values.country\n                }\n\n                if (values.dateOfBirth) {\n                  input_vars['dateOfBirth'] = dateToLocalISO(values.dateOfBirth)\n                } \n\n                updateProfile({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // // Refetch list\n                    // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // // Refresh local cached results for this account\n                    // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('shop.account.profile.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <ShopAccountProfileForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                returnUrl={\"/shop/account\"}\n              />\n            )}\n          </Formik>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountProfile))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_SUBSCRIPTIONS = gql`\n  query AccountSubscriptions($before: String, $after: String, $account: ID!) {\n    accountSubscriptions(first: 100, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          organizationSubscription {\n            name\n            unlimited\n          }\n          creditTotal\n          dateStart\n          dateEnd\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","import React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\nimport { QUERY_ACCOUNT_SUBSCRIPTIONS } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport LoadMoreOnBottomScroll from '../../../general/LoadMoreOnBottomScroll'\n\nimport ShopAccountSubscriptionsBase from \"./ShopAccountSubscriptionsBase\"\n\n\nfunction ShopAccountSubscriptions({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_SUBSCRIPTIONS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountSubscriptionsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountSubscriptionsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountSubscriptionsBase>\n      {t(\"shop.account.subscriptions.error_loading_data\")}\n    </ShopAccountSubscriptionsBase>\n  )\n\n  const user = data.user\n  const subscriptions = data.accountSubscriptions\n\n  // Empty list\n  if (!subscriptions.edges.length) {\n    return (\n      <ShopAccountSubscriptionsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.subscriptions.title')} >\n              <Card.Body>\n                {t('shop.account.subscriptions.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountSubscriptionsBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountSubscriptionsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h4>{t('shop.account.subscriptions.title')}</h4>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={subscriptions.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: subscriptions.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountSubscriptions.edges\n                  const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountSubscriptions: {\n                          __typename: previousResult.accountSubscriptions.__typename,\n                          edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }}\n          >\n            {/* <Grid.Row> */}\n            { subscriptions.edges.map(({ node }) => (\n              <Card key={v4()}>\n                <Card.Body>\n                  <Grid.Row>\n                    <Grid.Col xs={12} md={10}>\n                      <div className='mb-xs-3'>\n                        <h6>\n                          { node.organizationSubscription.name }\n                          {/* Perhaps a badge here to indicate active /inactive in the future? */}\n                        </h6>\n                        <Icon name=\"calendar\" /> { moment(node.dateStart).format(dateFormat) } \n                        { (node.dateEnd) && <span> - {moment(node.dateEnd).format(dateFormat)}</span> }\n                      </div>\n                    </Grid.Col>\n                    <Grid.Col xs={12} md={2}>\n                      <Link to={`/shop/account/subscriptions/${node.id}/credits`}>\n                        <Button\n                          block\n                          outline\n                          color=\"info\"\n                          size=\"sm\"\n                        >\n                          {(node.organizationSubscription.unlimited) ? \n                            t(\"general.unlimited\") : node.creditTotal } {\" \"}\n                          {t(\"general.credits\")}\n                        </Button>\n                      </Link>\n                    </Grid.Col>\n                  </Grid.Row>\n                </Card.Body>\n              </Card>\n            ))}\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountSubscriptions))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_SUBSCRIPTION_CREDITS = gql`\n  query AccountSubscriptionCredits($before: String, $after: String, $accountSubscription: ID!) {\n    accountSubscriptionCredits(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          advance\n          reconciled\n          createdAt\n          description\n          expiration\n          scheduleItemAttendance {\n            id\n            date\n            scheduleItem {\n              id\n              timeStart\n              timeEnd\n              organizationClasstype {\n                id\n                name\n              }\n              organizationLocationRoom {\n                id\n                name\n                organizationLocation {\n                  id \n                  name\n                }\n              }\n            }\n          }\n          accountSubscription {\n            id\n            organizationSubscription {\n              name\n              unlimited\n            }\n            creditTotal\n            dateStart\n            dateEnd\n          }\n        }\n      }\n    }\n    accountSubscription(id: $accountSubscription) {\n      id\n      organizationSubscription {\n        id\n        name\n        unlimited\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../../SiteWrapperShop\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction ShopAccountSubscriptionCreditsBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ButtonBack returnUrl={`/shop/account/subscriptions`} />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountSubscriptionCreditsBase))","import React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\nimport {\n  Badge,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../../queries/system/get_user_profile\"\nimport LoadMoreOnBottomScroll from '../../../../general/LoadMoreOnBottomScroll'\n\nimport { QUERY_ACCOUNT_SUBSCRIPTION_CREDITS } from \"./queries\"\nimport ShopAccountSubscriptionCreditsBase from \"./ShopAccountSubscriptionCreditsBase\"\n\n\nfunction ShopAccountSubscriptionCredits({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const subscriptionId = match.params.subscription_id\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_SUBSCRIPTION_CREDITS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      accountSubscription: subscriptionId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n  if (loading || loadingUser || !data) return (\n    <ShopAccountSubscriptionCreditsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountSubscriptionCreditsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountSubscriptionCreditsBase>\n      {t(\"shop.account.subscriptions.error_loading_data\")}\n    </ShopAccountSubscriptionCreditsBase>\n  )\n\n  const user = dataUser.user\n  const subscriptionCredits = data.accountSubscriptionCredits\n  const organizationSubscription = data.accountSubscription.organizationSubscription\n\n  // Unlimited credits, no need to go into details.\n  if (organizationSubscription.unlimited) {\n    return (\n      <ShopAccountSubscriptionCreditsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.subscriptions.credits.title')} >\n              <Card.Body>\n                <Card.Alert color=\"primary\"><Icon name=\"check\" /> {t('shop.account.subscriptions.credits.unlimited')}</Card.Alert>\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountSubscriptionCreditsBase>\n    )  \n  }\n\n  // Empty list\n  if (!subscriptionCredits.edges.length) {\n    return (\n      <ShopAccountSubscriptionCreditsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.subscriptions.credits.title')} >\n              <Card.Body>\n                {t('shop.account.subscriptions.credits.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountSubscriptionCreditsBase>\n    )  \n  }\n\n\n\n  // Populated list\n  return (\n    <ShopAccountSubscriptionCreditsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h4>{t('shop.account.subscriptions.credits.title')}</h4>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={subscriptionCredits.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: subscriptionCredits.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountSubscriptionCredits.edges\n                  const pageInfo = fetchMoreResult.accountSubscriptionCredits.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscription credits at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountSubscriptionCredits: {\n                          __typename: previousResult.accountSubscriptionCredits.__typename,\n                          edges: [ ...previousResult.accountSubscriptionCredits.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }}\n          >\n            {/* <Grid.Row> */}\n            { subscriptionCredits.edges.map(({ node }) => (\n              <Card key={v4()} statusColor={(!node.scheduleItemAttendance) ? \"success\" : \"default\"}>\n                <Card.Body>\n                  <Grid.Row>\n                    <Grid.Col xs={12} md={4}>\n                      <div className='mb-xs-3'>\n                        <small className='text-muted'>\n                          {t(\"shop.account.subscriptions.credits.added_on\")}\n                        </small>\n                        <h6>\n                          { moment(node.createdAt).format(dateFormat) }\n                          <div><small className='text-muted'> {node.description}</small></div>\n                          {/* Perhaps a badge here to indicate active /inactive in the future? */}\n                          { (node.reconciled) && <div>\n                            <small className='text-muted'>\n                              {t(\"shop.account.subscriptions.credits.reconciled_on\")} { moment(node.reconciled).format(dateFormat) }\n                            </small>\n                          </div>}\n                        </h6>\n                      </div>\n                    </Grid.Col>\n                    <Grid.Col xs={12} md={4}>\n                      <div className='mb-xs-3'>\n                        <small className='text-muted'>\n                          {t(\"shop.account.subscriptions.credits.expiration\")}\n                        </small>\n                        <h6>\n                          { moment(node.expiration).format(dateFormat) }\n                        </h6>\n                      </div>\n                    </Grid.Col>\n                    <Grid.Col xs={12} md={4}>\n                      <div className='mb-xs-3'>\n                        <small className='text-muted'>\n                          {t(\"shop.account.subscriptions.credits.status\")}\n                        </small>\n                        {(!node.scheduleItemAttendance) ?\n                          // No attendance recorded yet, show available or expired\n                          ( moment() > moment(node.expiration) ) ? \n                          <h6><Badge color=\"danger\">{t(\"shop.account.subscriptions.credits.expired\")}</Badge></h6> :\n                          <h6><Badge color=\"success\">{t(\"shop.account.subscriptions.credits.available\")}</Badge></h6>\n                          : \n                          <h6><Badge color=\"default\">{t(\"shop.account.subscriptions.credits.used\")}</Badge></h6>\n                        }\n                        \n                        {(node.scheduleItemAttendance) && <small className='text-muted'>\n                          <div>\n                            {`${moment(node.scheduleItemAttendance.date).format(dateFormat)} \n                            ${moment(node.scheduleItemAttendance.date + \" \" + node.scheduleItemAttendance.scheduleItem.timeStart).format(timeFormat)}\n                            - ${node.scheduleItemAttendance.scheduleItem.organizationClasstype.name}`}\n                          </div> \n                          {node.scheduleItemAttendance.scheduleItem.organizationLocationRoom.organizationLocation.name}\n                        </small>}\n                      </div>\n                    </Grid.Col>\n                  </Grid.Row>\n                </Card.Body>\n              </Card>\n            ))}\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountSubscriptionCreditsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(ShopAccountSubscriptionCredits))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ShopClassBookBack = ({ t }) => (\n  <Link to={\"/shop/classes\"} >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ShopClassBookBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassBookBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.classes.book.title\")} pageHeaderOptions={pageHeaderOptions}>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookBase))","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/book/queries\"\n\n\nfunction ShopClassBookClasspassBtn({t, match, history, classpass}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"scheduleItem\": schedule_item_id,\n    \"accountClasspass\": classpass.accountClasspass.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS\",\n    \"onlineBooking\": true,\n    \"bookingStatus\": \"BOOKED\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return t(\"general.please_wait\")\n  }\n\n  if (error) {\n    return t(\"general.error_sad_smiley\")\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"primary\" \n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          // {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect to class booked page\n            console.log(\"Checkin success!\")\n            history.push(`/shop/classes/booked/${schedule_item_id}/${class_date}`)\n\n            // show message to user\n            // toast.success((t('schedule.classes.class.book.toast_success')), {\n            //   position: toast.POSITION.BOTTOM_RIGHT\n            // })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.book\")} <Icon name=\"chevron-right\" />\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookClasspassBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ShopClassBookClasspassBtn from \"./ShopClassBookClasspassBtn\"\n\n\nfunction ShopClassBookClasspasses({ t, match, history, classpasses }) {\n  console.log(\"CLASSPASSES\")\n  console.log(classpasses)\n\n  return (\n    classpasses.map((classpass) =>(\n      <Grid.Col xs={12} sm={6} md={4} xl={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.classpass\")} >\n        <Card.Body>\n          <b>{classpass.accountClasspass.organizationClasspass.name}</b><br />\n          <span className=\"text-muted\">\n            {t('general.classes_remaining')}: {classpass.accountClasspass.classesRemainingDisplay} <br />\n            {t('general.valid_until')}: {moment(classpass.accountClasspass.dateEnd).format('LL')} <br />\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!classpass.allowed) ? t('schedule.classes.class.book.classpass_not_allowed') :\n            <ShopClassBookClasspassBtn classpass={classpass} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookClasspasses))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/book/queries\"\n\n\nfunction ShopClassBookSubscriptionBtn({t, match, history, subscription}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"scheduleItem\": schedule_item_id,\n    \"accountSubscription\": subscription.accountSubscription.id,\n    \"date\": class_date,\n    \"attendanceType\": \"SUBSCRIPTION\",\n    \"onlineBooking\": true,\n    \"bookingStatus\": \"BOOKED\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return t(\"general.please_wait\")\n  }\n\n  if (error) {\n    return t(\"general.error_sad_smiley\")\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"primary\" \n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          // {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect to class booked page\n            console.log(\"Checkin success!\")\n            history.push(`/shop/classes/booked/${schedule_item_id}/${class_date}`)\n\n            // show message to user\n            // toast.success((t('schedule.classes.class.book.toast_success')), {\n            //   position: toast.POSITION.BOTTOM_RIGHT\n            // })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.book\")} <Icon name=\"chevron-right\" />\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookSubscriptionBtn))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ShopClassBookSubscriptionBtn from \"./ShopClassBookSubscriptionBtn\"\n\n\nfunction ShopClassBookSubscriptions({ t, match, history, subscriptions }) {\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col xs={12} sm={6} md={4} xl={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {(subscription.accountSubscription.organizationSubscription.unlimited) ? t(\"general.unlimited\") : \n            <span>{t(\"general.credits_valid_for_class\")}: {subscription.creditsOnDate}</span>}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.book.subscription_not_allowed') :\n            <ShopClassBookSubscriptionBtn subscription={subscription} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookSubscriptions))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\n\n\nfunction ShopClassBookPriceBtn({t, match, history, price}) {\n  console.log(price)\n  const classpassId = price.id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <Link to={`/shop/classpass/${classpassId}/${scheduleItemId}/${classDate}`}>\n    <Button \n      block \n      outline \n      color=\"primary\" \n    >\n      {t(\"shop.classes.book.pay_and_book\")} <Icon name=\"chevron-right\" />\n    </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClassBookPriceBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport ShopClassBookPriceBtn from './ShopClassBookPriceBtn'\n\nfunction ShopClassBookPriceDropin({ \n  t, \n  match, \n  history, \n  priceDropin\n}) {\n\n  return (\n    <Grid.Col xs={12} sm={6} md={4} xl={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.dropin\")} >\n      <Card.Body>\n        <b>{priceDropin.priceDisplay}</b><br />\n        {t(\"shop.classes.book.dropin_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ShopClassBookPriceBtn price={priceDropin} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookPriceDropin))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport ShopClassBookPriceBtn from './ShopClassBookPriceBtn'\n\nfunction ShopClassBookPriceTrial({ \n  t, \n  match, \n  history, \n  priceTrial\n}) {\n\n  return (\n    <Grid.Col xs={12} sm={6} md={4} xl={3}>\n      <Card \n        statusColor=\"green\"\n        title={t(\"general.trial\")} >\n      <Card.Body>\n        <b>{priceTrial.priceDisplay}</b><br />\n        {t(\"shop.classes.book.trial_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ShopClassBookPriceBtn price={priceTrial} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookPriceTrial))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClass(scheduleItemId: $scheduleItem, date:$date) {\n      bookingStatus\n    }\n    scheduleClassBookingOptions(scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      alreadyBooked\n      account {\n        id\n        fullName\n        hasReachedTrialLimit\n      }\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        creditsOnDate\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n            unlimited\n          }\n          creditTotal\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Button,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport ShopClassBookBack from \"./ShopClassBookBack\"\nimport ShopClassBookBase from \"./ShopClassBookBase\"\nimport ShopClassBookClasspasses from './ShopClassBookClasspasses'\nimport ShopClassBookSubscriptions from \"./ShopClassBookSubscriptions\"\nimport ShopClassBookPriceDropin from \"./ShopClassBookPriceDropin\"\nimport ShopClassBookPriceTrial from \"./ShopClassBookPriceTrial\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction ShopClassBook({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"SHOP_BOOK\"\n      },\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  // Loading\n  if (loading) return (\n    <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n      <Dimmer active={true} loader={true} />\n    </ShopClassBookBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    console.log(error.graphQLErrors)\n    if (error.graphQLErrors && error.graphQLErrors[0].extensions) {\n      if (error.graphQLErrors[0].extensions.code === \"CLASS_DOESNT_TAKE_PLACE_ON_DATE\") {\n        return (\n          <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n            <p>\n              <Alert type=\"warning\">\n                <strong>{(t(\"shop.classes.book.class_doesnt_take_place_on_this_date\"))}</strong>\n              </Alert>\n            </p>\n          </ShopClassBookBase>\n        )\n      }\n    } \n      \n    return (\n      <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ShopClassBookBase>\n    )\n  }\n  \n  console.log(data)\n  const scheduleClass = data.scheduleClass\n\n  const alreadyBooked = data.scheduleClassBookingOptions.alreadyBooked\n  const account = data.scheduleClassBookingOptions.account\n  const classpasses = data.scheduleClassBookingOptions.classpasses\n  const subscriptions = data.scheduleClassBookingOptions.subscriptions\n  const prices = data.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = data.scheduleClassBookingOptions.scheduleItem\n\n  const location = scheduleItem.organizationLocationRoom.organizationLocation.name\n  const classType = scheduleItem.organizationClasstype.name\n  const timeStart = moment(TimeStringToJSDateOBJ(scheduleItem.timeStart)).format(timeFormat) \n  const timeEnd = moment(TimeStringToJSDateOBJ(scheduleItem.timeEnd)).format(timeFormat) \n  const date_display = moment(class_date).format(dateFormat)\n  // const subtitle = class_subtitle({\n  //   t: t,\n  //   location: , \n  //   locationRoom: scheduleItem.organizationLocationRoom.name,\n  //   classtype: , \n  //   timeStart: , \n  //   date: class_date\n  // })\n  const class_info = date_display + ' ' + timeStart + ' - ' + timeEnd + ' ' + classType + ' ' + t(\"general.at\") + ' ' + location\n\n  console.log(prices)\n  console.log(\"ALREADY BOOKED\")\n  console.log(alreadyBooked)\n  console.log(scheduleClass.bookingStatus)\n\n  let content\n\n  switch(scheduleClass.bookingStatus) {\n    case \"NOT_YET_OPEN\":\n      const bookingOpenOn = scheduleClass.bookingOpenOn\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.open_on\") + \" \" + moment(bookingOpenOn).format(dateFormat)}\n        </Alert>\n      break\n    case \"CANCELLED\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.cancelled\")}\n        </Alert>\n      break\n    case \"HOLIDAY\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.cancelled_holiday\")}\n        </Alert>\n      break\n    case \"FINISHED\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.finished\")}\n        </Alert>\n      break\n    case \"ONGOING\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.ongoing\")}\n        </Alert>\n      break\n    case \"FULL\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.full\")}\n        </Alert>\n      break\n    case \"OK\":\n      content = <Grid.Row cards deck>\n        <ShopClassBookSubscriptions subscriptions={subscriptions} />\n        <ShopClassBookClasspasses classpasses={classpasses} />\n        {(prices) ?\n          (prices.organizationClasspassDropin) ? \n            <ShopClassBookPriceDropin priceDropin={prices.organizationClasspassDropin}/> : \"\" \n        : \"\" }\n        {(prices) ?\n          ((prices.organizationClasspassTrial) && (!account.hasReachedTrialLimit)) ? \n            <ShopClassBookPriceTrial priceTrial={prices.organizationClasspassTrial}/> : \"\" \n          : \"\" } \n      </Grid.Row>\n      break\n    default:\n      content = \"\"\n  }\n\n  return (\n    <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h5>{ class_info }</h5>\n          <div className=\"mt-6\">\n            {(alreadyBooked) ?\n              <Alert type=\"primary\" hasExtraSpace>\n                <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n                {t(\"shop.classes.book.already_booked\")} <br /><br />\n                <Link to='/shop/account/classes'>\n                  <Button\n                    color=\"primary\"\n                    outline\n                  >\n                    {t('shop.account.classes.title')} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Alert>\n              : content\n            }\n          </div>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClassBookBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBook))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassBookedBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.classes.booked.title\")} pageHeaderOptions={pageHeaderOptions}>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookedBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItemId: ID!, $date: Date!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId \n      date\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n      organizationClasstype {\n        name\n      }\n      timeStart\n      timeEnd\n    }\n  }\n`\n\n\nexport const CREATE_ORDER = gql`\n  mutation CreateFinanceOrder($input: CreateFinanceOrderInput!) {\n    createFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ShopClassBookedBase from \"./ShopClassBookedBase\"\nimport { GET_CLASS_QUERY } from \"../../queries\"\nimport { DisplayClassInfo } from \"../../tools\"\n\n\nfunction ShopClassBook({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data } = useQuery(\n    GET_CLASS_QUERY, {\n      variables: {\n        scheduleItemId: schedule_item_id,\n        date: class_date,\n      }\n    }\n  )\n\n  // Loading\n  if (loading) return (\n    <ShopClassBookedBase>\n      <Dimmer active={true} loader={true} />\n    </ShopClassBookedBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <ShopClassBookedBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ShopClassBookedBase>\n    )\n  }\n  \n  console.log(data)\n  // TODO: display class info in a card\n\n  \n  return (\n    <ShopClassBookedBase>\n      <Grid.Row cards deck>\n        <Grid.Col xs={12} sm={12} md={6} lg={6}>\n          <Card title={t(\"shop.classes.booked.class\")}>\n            <Card.Body>\n              {t(\"shop.classes.booked.class_explanation\")} <br /><br />\n              <DisplayClassInfo \n                t={t} \n                classDate={class_date}\n                classData={data.scheduleClass} \n                dateFormat={dateFormat} \n                timeFormat={timeFormat}\n              />\n            </Card.Body>\n            <Card.Footer>\n              <Link to={\"/shop/account\"}>\n                <Button\n                  outline\n                  block\n                  color=\"success\"\n                >\n                  {t(\"shop.classes.booked.to_profile\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClassBookedBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBook))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassesScheduleBase({ t, match, history, children, pageHeaderOptions=\"\" }) {  \n  return (\n    <ShopBase title={t(\"shop.classes.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClassesScheduleBase))\n","import CSLS from \"../../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n    // let orderBy\n    let organizationClasstype\n    let instructor\n    let organizationLevel\n    let organizationLocation\n  \n    let queryVars = {\n      dateFrom: localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM), \n      dateUntil: localStorage.getItem(CSLS.SHOP_CLASSES_DATE_UNTIL),\n    }\n  \n    // orderBy = localStorage.getItem(CSLS.SHOP_CLASSES_ORDER_BY)\n    // if (orderBy) {\n    //   queryVars.orderBy = orderBy\n    // }\n  \n    organizationClasstype = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_CLASSTYPE)\n    if (organizationClasstype) {\n      queryVars.organizationClasstype = organizationClasstype\n    } else {\n      queryVars.organizationClasstype = \"\"\n    }\n  \n    instructor = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_INSTRUCTOR)\n    if (instructor) {\n      queryVars.instructor = instructor\n    } else {\n      queryVars.instructor = \"\"\n    }\n  \n    organizationLevel = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_LEVEL)\n    if (organizationLevel) {\n      queryVars.organizationLevel = organizationLevel\n    } else {\n      queryVars.organizationLevel = \"\"\n    }\n  \n    organizationLocation = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_LOCATION)\n    if (organizationLocation) {\n      queryVars.organizationLocation = organizationLocation\n    } else {\n      queryVars.organizationLocation = \"\"\n    }\n  \n    console.log(queryVars)\n  \n    return queryVars\n  }\n  ","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\nimport { \n  Grid,\n} from \"tabler-react\";\n\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\nconst ShopClassesScheduleFilter = ({ t, history, data, refetch }) => (\n  <Grid.Row>\n    <Grid.Col xs={12} sm={12} md={3}>\n      {/* Locations */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_LOCATION)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_LOCATION,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_locations\")}</option>\n        {data.organizationLocations.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n    <Grid.Col xs={12} sm={12} md={3}>\n      {/* Classtypes */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_CLASSTYPE)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_CLASSTYPE,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_classtypes\")}</option>\n        {data.organizationClasstypes.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n    <Grid.Col xs={12} sm={12} md={3}>\n          {/* Instructors */}\n          <select \n            className={selectClass}\n            defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_INSTRUCTOR)}\n            onChange={ (event) => {\n              updateLocalStorageAndRefetch(\n                CSLS.SHOP_CLASSES_FILTER_INSTRUCTOR,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_instructors\")}</option>\n            {data.instructors.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.fullName}</option>\n            )}\n          </select>\n        </Grid.Col>\n    <Grid.Col xs={12} sm={12} md={3}>\n      {/* Levels */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_LEVEL)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_LEVEL,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_levels\")}</option>\n        {data.organizationLevels.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n  </Grid.Row>\n);\n\nexport default withTranslation()(withRouter(ShopClassesScheduleFilter))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\n\nfunction ShopClassesScheduleButtonBook({ t, match, history, scheduleItemId, classDate, bookingOpenOn, bookingStatus }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  let buttonBook\n  // Uncomment the line below when testing the book component statuses. (Development only)\n  // bookingStatus = \"OK\"\n\n  switch(bookingStatus) {\n    case \"NOT_YET_OPEN\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.open_on\") + \" \" + moment(bookingOpenOn).format(dateFormat)}\n        </span>\n      break\n    case \"CANCELLED\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.cancelled\")}\n        </span>\n      break\n    case \"HOLIDAY\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.cancelled_holiday\")}\n        </span>\n      break\n    case \"FINISHED\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.finished\")}\n        </span>\n      break\n    case \"ONGOING\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.ongoing\")}\n        </span>\n      break\n    case \"FULL\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.full\")}\n        </span>\n      break\n    case \"OK\":\n      buttonBook = <Link to={`/shop/classes/book/${scheduleItemId}/${classDate}`}>\n          <Button className=\"pull-right\" color=\"primary\" outline>\n            {t(\"general.book\")} <Icon name=\"chevron-right\" />\n          </Button>\n        </Link>\n      break\n    \n    default:\n      buttonBook = \"\"\n  }\n  \n  return buttonBook\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesScheduleButtonBook))\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card, \n  Dimmer,\n  Grid,\n  Icon,\n  Progress,\n  Table,\n} from \"tabler-react\";\n\nimport { capitalize } from '../../../../tools/string_tools'\nimport ShopClassesScheduleBase from \"./ShopClassesScheduleBase\"\nimport ShopClassesScheduleFilter from \"./ShopClassesScheduleFilter\"\nimport ShopClassesScheduleButtonBook from \"./ShopClassesScheduleButtonBook\"\n\nimport { GET_CLASSES_QUERY } from \"../../../schedule/classes/queries\"\nimport { get_list_query_variables } from './tools'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} else {\n  const date_from  = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM))\n  if (date_from.isBefore(moment(), \"day\")) {\n    localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n  }\n}\n\n\nfunction ShopClassesSchedule({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const { loading, error, data, refetch } = useQuery(GET_CLASSES_QUERY, {\n    variables: get_list_query_variables(),\n    // https://github.com/apollographql/react-apollo/issues/321\n    // Set loading to true when refetching\n    notifyOnNetworkStatusChange: true\n  })\n\n  console.log(loading)\n\n  const pageHeaderOptions = <Button.List className=\"schedule-list-page-options-btn-list\">\n    <Button \n      icon=\"chevron-left\"\n      color=\"secondary\"\n      disabled={ (moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).subtract(7, 'days').isBefore(moment(), \"day\")) }\n      onClick={ () => {\n        let prevWeekFrom = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).subtract(7, 'days')\n        let prevWeekUntil = moment(prevWeekFrom).add(6, 'days')\n        \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, prevWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, prevWeekUntil.format('YYYY-MM-DD')) \n\n        refetch(get_list_query_variables())\n    }} />\n    <Button \n      color=\"secondary\"\n      onClick={ () => {\n        let currentWeekFrom = moment()\n        let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n        \n        refetch(get_list_query_variables())\n    }} > \n      {t(\"general.today\")}\n    </Button>\n    <Button \n      icon=\"chevron-right\"\n      color=\"secondary\"\n      onClick={ () => {\n        let nextWeekFrom = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).add(7, 'days')\n        let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n        \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n        refetch(get_list_query_variables())\n    }} />\n  </Button.List>\n\n  if (loading) return (\n    <ShopClassesScheduleBase title={title} pageHeaderOptions={pageHeaderOptions} >\n      <br /><br /><br /><br />    \n      <Dimmer active={true} loader={true} />\n    </ShopClassesScheduleBase>\n  )\n  if (error) return (\n    <ShopClassesScheduleBase title={title} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"shop.classes.error_loading\")}\n    </ShopClassesScheduleBase>\n  )\n\n  console.log(data)\n  console.log(data.scheduleClasses)\n  \n\n  return (\n    <ShopClassesScheduleBase \n      title={title}\n      pageHeaderOptions={pageHeaderOptions}\n    >\n      <ShopClassesScheduleFilter data={data} refetch={refetch} />\n      {data.scheduleClasses.map(({ date, bookingOpenOn, classes }) =>\n        <Grid.Row key={v4()}>\n          <Grid.Col md={12}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>\n                    <b>{capitalize(moment(date).format(\"dddd\"))}</b> {' '}\n                    <span className=\"text-muted\">\n                      {moment(date).format(\"LL\")} \n                    </span>\n                  </Card.Title>\n                </Card.Header>                \n                {!(classes.length) ? \n                  <Card.Body>\n                    <p>{t('schedule.classes.empty_list')}</p>\n                  </Card.Body> :\n                  <Table cards>\n                    <Table.Body>\n                      {classes.map(({ \n                        scheduleItemId, \n                        frequencyType,\n                        date, \n                        status,\n                        holiday,\n                        holidayName,\n                        description,\n                        account, \n                        role,\n                        account2,\n                        role2,\n                        organizationLocationRoom, \n                        organizationClasstype, \n                        organizationLevel,\n                        timeStart, \n                        timeEnd,\n                        spaces,\n                        availableSpacesOnline,\n                        displayPublic,\n                        bookingStatus }) => (\n                          <Table.Row>\n                            <Table.Col>\n                            <h5>\n                              { organizationClasstype.name } { ' ' }\n                              {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                              {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n\n                            </h5> \n                             <span className=\"mr-2\">{ (account) ? account.fullName : \"\" }</span>\n                             <span className=\"text-muted\">{organizationLevel && organizationLevel.name}</span>\n                             <br />\n                            <span className=\"text-muted\">{ organizationLocationRoom.organizationLocation.name }</span>\n                            </Table.Col>\n                            <Table.Col>\n                              <ShopClassesScheduleButtonBook\n                                scheduleItemId={scheduleItemId}\n                                classDate={date}\n                                bookingOpenOn={bookingOpenOn}\n                                bookingStatus={bookingStatus}\n                              />\n                              {(bookingStatus !== \"FINISHED\" && status !== \"CANCELLED\") ? \n                                <React.Fragment>\n                                  <div style={{clear: \"both\"}} />\n                                    <div className=\"cs-shop-classes-schedule-business-indicator mt-2\">\n                                      <div className=\"float-right\"><small><Icon name=\"users\" className=\"text-muted\" /></small></div>\n                                      <Progress size=\"xs\" className=\"cs-shop-classes-schedule-business-indicator\">\n                                        {/* This strange calculation shows online spaces in the progress bar, not all spaces. */}\n                                        <Progress.Bar color=\"primary\" width={((spaces-availableSpacesOnline)/spaces) * 100} /> \n                                      </Progress>\n                                  </div>\n                                </React.Fragment>\n                                : \"\"\n                              }\n                            </Table.Col>\n                          </Table.Row>\n                        )\n                      )}\n                    </Table.Body>\n                  </Table>\n                }\n              </Card>\n          </Grid.Col>\n        </Grid.Row>\n      )}\n    </ShopClassesScheduleBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesSchedule))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopContactBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.contact.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopContactBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Card, Grid, \n} from \"tabler-react\";\nimport ShopContactBase from \"./ShopContactBase\"\n\nimport { GET_ORGANIZATION_QUERY } from \"../../organization/organization/queries\"\n\n\nfunction ShopContact({ t, match, history }) {\n  // The ID is fixed, as there's only one organization supported at the moment... easy peasy.\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: { id: \"T3JnYW5pemF0aW9uTm9kZToxMDA=\"}\n  })\n\n  if (loading) return (\n    <ShopContactBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopContactBase>\n  )\n  if (error) return (\n    <ShopContactBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopContactBase>\n  )\n\n  const organization = data.organization\n\n  return (\n    <ShopContactBase>\n      <Card title={organization.name}>\n        <Card.Body>\n          <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organization.address) }} />\n          <p>{organization.email} <br /> {organization.phone}</p>\n          <p>{organization.registration} <br /> {organization.taxRegistration}</p>\n        </Card.Body>\n        <Card.Footer>\n          <Grid.Row>\n            <Grid.Col xs={12}>\n              <a href=\"/d/export/terms-and-conditions\" target=\"_blank\">\n                {t(\"general.terms_and_conditions\")}\n              </a>\n            </Grid.Col>\n            <Grid.Col xs={12}>\n              <a className=\"float-sm-right float-md-right float-lg-right float-xl-right\" \n                href=\"/d/export/privacy-policy\" target=\"_blank\">\n                {t(\"general.privacy_policy\")}\n              </a>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Footer>\n      </Card>\n    </ShopContactBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopContact))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventsBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.events.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENTS_QUERY = gql`\n  query ScheduleEvents($before:String, $after:String) {\n    scheduleEvents(first: 100, before: $before, after:$after, archived:false, displayShop:true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          autoSendInfoMail\n          organizationLocation {\n            id\n            name\n          }\n          name\n          tagline\n          preview\n          description\n          organizationLevel {\n            id\n            name\n          }\n          instructor {\n            id \n            fullName\n          }\n          instructor2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd\n          timeStart\n          timeEnd\n          infoMailContent\n          scheduleItems {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          media(first: 1) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                urlImageThumbnailSmall\n                urlImageThumbnailLarge\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Dimmer,\n  Grid,\n  Icon,\n  GalleryCard\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport ShopEventsBase from \"./ShopEventsBase\"\nimport { GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopEvents({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const title = t(\"shop.home.title\")\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENTS_QUERY)\n\n  if (loading) return (\n    <ShopEventsBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventsBase>\n  )\n  if (error) return (\n    <ShopEventsBase title={title}>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopEventsBase>\n  )\n\n  console.log(data)\n  const scheduleEvents = data.scheduleEvents\n  console.log(scheduleEvents)\n\n  return (\n    <ShopEventsBase title={title}>\n        <Grid.Row>\n          {scheduleEvents.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={6} lg={4} key={v4()}>\n              <GalleryCard>\n                {(node.media.edges.length) ?\n                  <GalleryCard.Image \n                    src={(node.media.edges.length) ? node.media.edges[0].node.urlImageThumbnailLarge: \"\"} \n                    href={`#/shop/events/${node.id}`}\n                  /> : \"\" }\n                <GalleryCard.Footer>\n                  <h4>{node.name}</h4>\n                </GalleryCard.Footer>\n                <GalleryCard.Footer>                  \n                  <GalleryCard.Details\n                    fullName={<span className=\"\">{(node.instructor) ? node.instructor.fullName: \"\"}</span>}\n                    dateString={node.organizationLocation.name}\n                  />\n                  <GalleryCard.IconGroup>\n                  <GalleryCard.IconItem \n                    name=\"calendar\"\n                    label={moment(node.dateStart).format(dateFormat)}\n                    right={false}\n                    RootComponent=\"span\"\n                  />\n                  </GalleryCard.IconGroup>\n                </GalleryCard.Footer>\n                <Link to={`/shop/events/${node.id}`}>\n                  <GalleryCard.Footer pt={10}>\n                    <Button\n                      block\n                      color=\"link\"\n                    >\n                      {t(\"shop.events.tell_me_more\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  </GalleryCard.Footer>\n                </Link>\n              </GalleryCard>\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n    </ShopEventsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEvents))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventBase({ t, match, history, children, title=\"\" }) {\n  \n  return (\n    <ShopBase \n      title={title}\n      returnUrl=\"/shop/events\"\n      // checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventBase))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopEventTicketPricingCard({ t, match, eventTicket, showButton=true, active=false }) {\n  // eventTicket should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, \n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(eventTicket)\n  const ticketScheduleItems = eventTicket.ticketScheduleItems\n\n  const eventId = match.params.event_id\n\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {eventTicket.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        { (eventTicket.price === 0) ? \n          t(\"shop.event.ticket.free\") :\n          eventTicket.totalPriceDisplay \n        }\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          {(eventTicket.isEarlybirdPrice) ? <span>\n            <Badge className=\"mr-2\" color=\"primary\">{t(\"shop.event.ticket.earlybird_price\")}</Badge>\n          </span> : \"\"}\n          {(eventTicket.isSubscriptionDiscountPrice) ? <span>\n            <Badge color=\"success\">{t(\"shop.event.ticket.subscription_discount\")}</Badge>\n          </span> : \"\"}\n        </PricingCard.AttributeItem>\n        {(eventTicket.isEarlybirdPrice || eventTicket.isSubscriptionDiscountPrice) ? \n          <PricingCard.AttributeItem>\n            {t(\"shop.event.ticket.regular_price\")} {eventTicket.priceDisplay}\n          </PricingCard.AttributeItem>\n          : \"\" \n        }\n        {ticketScheduleItems.edges.map(({ node }) => (\n          <PricingCard.AttributeItem>\n              <Icon name=\"calendar\" /> { \" \" }\n              {moment(node.scheduleItem.dateStart).format(dateFormat)} {\" \"}\n              {/* Start & end time */}\n              {moment(node.scheduleItem.dateStart + ' ' + node.scheduleItem.timeStart).format(timeFormat)} {' - '}\n              {moment(node.scheduleItem.dateStart + ' ' + node.scheduleItem.timeEnd).format(timeFormat)} { ' ' }\n            <br />\n            <small className=\"text-muted\">\n              {node.scheduleItem.name} <Icon name=\"map-pin\" /> {node.scheduleItem.organizationLocationRoom.organizationLocation.name}\n            </small>\n          </PricingCard.AttributeItem>\n        ))}\n      </PricingCard.AttributeList>\n      {(showButton && !eventTicket.isSoldOut) ?\n        <Link to={`/shop/events/${eventId}/ticket/${eventTicket.id}`}>\n          <PricingCard.Button>\n            {t(\"shop.event.ticket.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\" \n      }\n      {(showButton && eventTicket.isSoldOut) ? \n        <PricingCard.Button \n          className=\"disabled\"\n        >\n          {t('general.sold_out')}\n        </PricingCard.Button> : \"\"}\n    </PricingCard>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventTicketPricingCard))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_QUERY = gql`\nquery ScheduleEvent($id: ID!) {\n  scheduleEvent(id: $id) {\n    id\n    archived\n    displayPublic\n    displayShop\n    autoSendInfoMail\n    organizationLocation {\n      id\n      name\n    }\n    name\n    tagline\n    preview\n    description\n    organizationLevel {\n      id\n      name\n    }\n    instructor {\n      id \n      fullName\n    }\n    instructor2 {\n      id\n      fullName\n    }\n    dateStart\n    dateEnd\n    timeStart\n    timeEnd\n    infoMailContent\n    media(first: 1) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          urlImageThumbnailSmall\n          urlImageThumbnailLarge\n        }\n      }\n    }\n    tickets(first: 100, displayPublic: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          price\n          priceDisplay\n          totalPrice\n          totalPriceDisplay\n          description\n          isSoldOut\n          isEarlybirdPrice\n          isSubscriptionDiscountPrice\n          ticketScheduleItems(included: true, orderBy: \"date_start\") {\n           pageInfo{\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n            }\n            edges {\n              node {\n                id\n                included\n                scheduleItem {\n                  name\n                  dateStart\n                  timeStart\n                  timeEnd\n                  organizationLocationRoom {\n                    organizationLocation {\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    createdAt\n    updatedAt\n  }\n}\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Alert,\n  Card,\n  Dimmer,\n  GalleryCard,\n  Grid,\n} from \"tabler-react\"\n\nimport CSLS from '../../../tools/cs_local_storage'\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ShopEventBase from \"./ShopEventBase\"\nimport ShopEventTicketPricingCard from \"./ShopEventTicketPricingCard\"\nimport { GET_SCHEDULE_EVENT_QUERY } from \"./queries\"\n\n\nfunction ShopEvent({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  let tempTitle = t(\"shop.home.title\")\n  const eventId = match.params.event_id\n\n  // Check if refresh token is present and if so, hasn't expired\n  // To see whether a user is signed in now\n  const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n  let userIsAuthenticated = true\n  if (new Date() / 1000 >= refreshTokenExp || refreshTokenExp == null ) {\n    userIsAuthenticated = false\n  }\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopEventBase title={tempTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventBase>\n  )\n  if (error) return (\n    <ShopEventBase title={tempTitle}>\n      {t(\"shop.event.error_loading\")}\n    </ShopEventBase>\n  )\n\n  const event = data.scheduleEvent\n  const tickets = event.tickets\n\n\n  return (\n    <ShopEventBase title={event.name}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <h5>{event.tagline}</h5>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={6} lg={4}>\n          {((event.media.edges.length) ? \n            <GalleryCard>\n              <GalleryCard.Image src={(event.media.edges.length) ? event.media.edges[0].node.urlImageThumbnailLarge : \"\"} />\n              <GalleryCard.Details>\n                {(event.media.edges.length) ? event.media.edges[0].node.description : \"\"}\n              </GalleryCard.Details>\n            </GalleryCard>\n          : \"\" )}\n          <Card title={t(\"general.info\")}>\n            <Card.Body>\n              <h6>{t('general.instructor')}: {(event.instructor) ? event.instructor.fullName: \"\"}</h6>\n              <h6>{t('general.start')}: {(event.dateStart) ? moment(event.dateStart).format(dateFormat): \"\"}</h6>\n              <h6>{t('general.end')}: {(event.dateEnd) ? moment(event.dateEnd).format(dateFormat): \"\"}</h6>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={6} lg={8}>\n          <Card title={t(\"general.description\")}>\n            <Card.Body>\n              <h5>{t('general.description')}</h5>\n              <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(event.description) }} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <h3>{t(\"shop.event.tickets\")}</h3>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          {(!userIsAuthenticated) ? <Alert type=\"primary\">\n              <Link to=\"/user/login\">\n                <b>{t(\"general.sign_in\")}</b>\n              </Link> {t(\"shop.events.sign_in_to_see_discounts\")}\n            </Alert>\n            : \"\"}\n        </Grid.Col>\n        {tickets.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={6} lg={4}>\n            <ShopEventTicketPricingCard eventID={eventId} eventTicket={node} />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopEventBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEvent))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventTicketBase({ t, match, history, children, subTitle }) {\n  const eventId = match.params.event_id\n  \n  return (\n    <ShopBase \n      title={t(\"shop.events.ticket.title\")}\n      subTitle={subTitle}\n      returnUrl={`/shop/events/${eventId}`}\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopEventTicketBase))","const cs_django_links = {\n    EXPORT_TERMS_AND_CONDITIONS: \"/d/export/terms-and-conditions\",\n    EXPORT_PRIVACY_POLICY: \"/d/export/privacy-policy\",\n}\n\nexport default cs_django_links\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Icon\n} from \"tabler-react\"\n\nimport cs_django_links from \"../../tools/cs_django_links\"\n\n\nconst ShopCheckoutForm = ({ t, isSubmitting, errors }) => (\n    <FoForm>\n      <Form.Group label={t('shop.order.message')}>\n        <Field type=\"text\" \n               component=\"textarea\"\n               name=\"message\" \n               className={(errors.message) ? \"form-control is-invalid\" : \"form-control\"} \n               autoComplete=\"off\" />\n        <ErrorMessage name=\"message\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <small className=\"text-muted\">\n        {t(\"shop.order.by_placing_this_order\")} <br />\n        <ul>\n          <li>{t(\"shop.order.agree_terms\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\"\n              href={cs_django_links.EXPORT_TERMS_AND_CONDITIONS}>{t(\"general.terms_and_conditions\")}</a>\n          </li>\n          <li>{t(\"shop.order.agree_privacy\")} {\" \"}\n            <a target=\"_blank\" rel=\"noreferrer\" href={cs_django_links.EXPORT_PRIVACY_POLICY}>{t(\"general.privacy_policy\")}</a>\n          </li>\n        </ul>\n      </small>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('shop.place_order')} <Icon name=\"chevron-right\" />\n      </Button>\n    </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopCheckoutForm))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_TICKET_QUERY = gql`\n  query ScheduleEventTicket($id: ID!) {\n    scheduleEventTicket(id:$id) {\n      id\n      name\n      price\n      priceDisplay\n      totalPrice\n      totalPriceDisplay\n      description\n      isSoldOut\n      isEarlybirdPrice\n      isSubscriptionDiscountPrice\n      ticketScheduleItems(included: true, orderBy: \"date_start\") {\n        pageInfo{\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n        }\n        edges {\n          node {\n            id\n            included\n            scheduleItem {\n              name\n              dateStart\n              timeStart\n              timeEnd\n              organizationLocationRoom {\n                organizationLocation {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      scheduleEvent {\n        id\n        name\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport ShopEventTicketBase from \"./ShopEventTicketBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopEventTicketPricingCard from \"../event/ShopEventTicketPricingCard\"\n\nimport { GET_SCHEDULE_EVENT_TICKET_QUERY } from \"./queries\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction ShopEventTicket({ t, match, history }) {\n  let title = t(\"shop.home.title\")\n  const scheduleEventTicketId = match.params.id\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: { id: scheduleEventTicketId },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n\n  if (loading) return (\n    <ShopEventTicketBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventTicketBase>\n  )\n  if (error) return (\n    <ShopEventTicketBase title={title}>\n      {t(\"shop.events.ticket.error_loading\")}\n    </ShopEventTicketBase>\n  )\n\n  const eventTicket = data.scheduleEventTicket\n  const subTitle = eventTicket.scheduleEvent.name\n\n  // Chceck sold out\n  if (eventTicket.isSoldOut) {\n    return (\n      <ShopEventTicketBase title={title} subTitle={subTitle}>\n        <Card title={t(\"shop.events.ticket.sold_out_title\")}>\n          <Card.Body>{t(\"shop.events.ticket.sold_out\")}</Card.Body>\n        </Card>\n      </ShopEventTicketBase>\n    )\n  }\n\n  return (\n    <ShopEventTicketBase title={title} subTitle={subTitle}>\n      <Grid.Row>\n        <Grid.Col md={4}>\n          <ShopEventTicketPricingCard eventId={eventId} eventTicket={eventTicket} showButton={false} active={true} />\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"shop.events.ticket.additional_info\")}>\n            <Card.Body>\n              {(eventTicket.description) ?\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(eventTicket.description) }} />\n              : t(\"shop.events.ticket.no_additional_info\")}\n            </Card.Body>\n          </Card> \n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"shop.checkout.title\")}>\n            <Card.Body>\n              <Formik\n                initialValues={{ message: \"\" }}\n                // validationSchema={CLASSTYPE_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n\n                    let createOrderInput = {\n                      message: values.message,\n                      scheduleEventTicket: match.params.id,\n                    }\n\n                    createOrder({ variables: {\n                      input: createOrderInput,\n                      // file: values.image\n                    }, refetchQueries: [\n                        // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                    ]})\n                    .then(({ data }) => {\n                        const orderId = data.createFinanceOrder.financeOrder.id\n                        history.push('/shop/checkout/payment/' + orderId)\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                        setSubmitting(false)\n                      })\n                }}\n                >\n                {({ isSubmitting, errors, values }) => (\n                  <ShopCheckoutForm \n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    values={values}\n                  />\n                )}\n              </Formik>\n\n              {/* When a user is not logged in, show a login button to redirect to the login page */}\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopEventTicketBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopEventTicket))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SHOP_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 100, before: $before, after: $after, displayPublic: true, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayShop\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\n\nfunction ShopHomeBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.home.title\")}>\n        {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopHomeBase))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport { GET_SHOP_ANNOUNCEMENTS_QUERY } from \"./queries\"\nimport ShopHomeBase from \"./ShopHomeBase\"\n\n\nfunction ShopHome({ t, match, history }) {\n  \n  const { loading, error, data } = useQuery(GET_SHOP_ANNOUNCEMENTS_QUERY);\n\n  if (loading) return (\n    <ShopHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopHomeBase>\n  )\n  if (error) return (\n    <ShopHomeBase>\n      {t(\"shop.home.announcements.error_loading\")}\n    </ShopHomeBase>\n  )\n\n  const announcements = data.organizationAnnouncements\n\n  return (\n    <ShopHomeBase title={t(\"shop.home.title\")}>\n      <Grid.Row cards deck>\n        {(announcements.edges.length) ? announcements.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={6} key={v4()}>\n            <Card title={node.title}>\n              <Card.Body>\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }}></div>\n              </Card.Body>\n            </Card> \n          </Grid.Col>\n        )) : \"\"\n        }\n      </Grid.Row>\n    </ShopHomeBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopCheckoutPaymentBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      // title={t(\"shop.order.payment\")}\n      checkoutProgress=\"payment\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutPaymentBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      orderNumber\n      account {\n        id\n        fullName\n        hasCompleteEnoughProfile\n      }\n      message\n      status\n      total\n      totalDisplay\n      createdAt\n      items {\n        edges {\n          node {\n            id\n            productName\n            description\n            quantity\n            totalDisplay\n            scheduleItem {\n              id\n            }\n            attendanceDate\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Dimmer,\n  Icon,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_ORDER_QUERY } from \"../queries\"\nimport ShopCheckoutClassInfo from \"../class_info/ShopCheckoutClassInfo\"\n\n\nfunction ShopCheckoutOrderSummary({ t, id, complete=false }) {\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  if (loading) return (\n    <Dimmer active={true} loader={true} />\n  )\n  if (error) return (\n      t(\"shop.checkout.order_summary.error_loading\")\n  )\n\n  const order = data.financeOrder\n  const orderItems = order.items.edges\n\n  let classDate \n  let scheduleItemId\n  let item\n  for (item of orderItems) {\n    let node = item.node\n    if (node.scheduleItem) {\n      classDate = node.attendanceDate\n      scheduleItemId = node.scheduleItem.id\n    }\n  }\n\n\n  return (\n    <Card title={t(\"shop.checkout.payment.order_summary\")}>\n      <div className=\"table-responsive\">\n        <Table cards={true}>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.item')}</Table.ColHeader>\n              <Table.ColHeader className=\"text-right\">{t('general.price')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {orderItems.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.productName} <br /> \n                  <span className=\"text-muted\">\n                    {node.description}\n                  </span>\n                </Table.Col>\n                <Table.Col className=\"text-right\">{node.totalDisplay}</Table.Col>\n              </Table.Row>      \n            ))}\n            <Table.Row className=\"bold\">\n              <Table.Col>\n                {t(\"general.total\")}\n              </Table.Col>\n              <Table.Col className=\"text-right\">\n                  {order.totalDisplay}\n              </Table.Col>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      </div>\n      {(order.message) || (scheduleItemId && classDate) ? \n        <Card.Body>\n          {(order.message) ?\n            <span className=\"text-muted\">\n              <h5><Icon name=\"message-square\" /> {t(\"shop.checkout.order_summary.message\")}</h5> \n              {/* Order message */}\n              {order.message}\n              <br /><br />\n            </span> \n            : \"\"\n          }\n          {(scheduleItemId && classDate) ?\n            <ShopCheckoutClassInfo \n              scheduleItemId={scheduleItemId}\n              date={classDate}\n              complete={complete}\n            />\n            : \"\"\n          }\n        </Card.Body>\n        : \"\"\n      }\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutOrderSummary))\n","import { gql } from \"@apollo/client\"\n\n\nexport const CREATE_PAYMENT_LINK = gql`\nmutation CreateFinanceOrderPaymentLink($id: ID!) {\n  createFinanceOrderPaymentLink(id: $id) {\n    financeOrderPaymentLink {\n      paymentLink\n    }\n  }\n}\n`","import React, { useContext, useRef, useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ShopCheckoutPaymentBase from \"./ShopCheckoutPaymentBase\"\nimport ShopCheckoutOrderSummary from \"../order_summary/ShopCheckoutOrderSummary\"\n\nimport { GET_ORDER_QUERY } from \"../queries\"\nimport { CREATE_PAYMENT_LINK } from \"./queries\"\n\n\nfunction ShopCheckoutPayment({ t, match, history, location }) {\n  const appSettings = useContext(AppSettingsContext)\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  const [createPaymentLink] = useMutation(CREATE_PAYMENT_LINK)\n\n  localStorage.setItem(CSLS.SHOP_ACCOUNT_PROFILE_NEXT, location.pathname)\n\n  if (loading) return (\n    <ShopCheckoutPaymentBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopCheckoutPaymentBase>\n  )\n  if (error) return (\n    <ShopCheckoutPaymentBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopCheckoutPaymentBase>\n  )\n\n  console.log(data)\n  const order = data.financeOrder\n  const account = data.financeOrder.account\n  console.log(order)\n  const orderItems = order.items.edges\n  console.log(orderItems) \n\n  function onClickPay() {\n    btnPayNow.current.setAttribute(\"disabled\", \"disabled\")\n    setBtnText(t(\"shop.checkout.payment.redirecting\"))\n    // btnPayNow.current.setValue(\"redirecting...\")\n    // btnPayNow\n    // btnPayNow.current.removeAttribute(\"disabled\")\n    createPaymentLink({ variables: { id: id } }).then(({ data }) => {\n      console.log('got data', data);\n      const paymentLink = data.createFinanceOrderPaymentLink.financeOrderPaymentLink.paymentLink\n      window.location.href = paymentLink\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n    })\n  }\n\n  let msgNextStep\n  let buttonNext\n  \n  // The order has been added to the users' account as it's free.\n  // No need for a payment.\n  if (order.total === \"0.00\") {\n    history.push(`/shop/checkout/complete/${id}`)\n  }\n\n  // Continue processing and see if online payments are available\n  // Check profile complete enough\n  if (!account.hasCompleteEnoughProfile) {\n    // If not, show message that a more complete profile is required\n    msgNextStep = t(\"shop.checkout.payment.profile_not_complete_enough\")\n    buttonNext = <Link to=\"/shop/account/profile\">\n      <Button\n        block\n        color=\"primary\"\n      >\n        {t(\"shop.checkout.payment.update_profile\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  } else if (onlinePaymentsAvailable) {\n    msgNextStep = t(\"shop.checkout.payment.order_received_to_payment_text\")\n    buttonNext = <button\n      className=\"btn btn-block btn-success\"\n      ref={btnPayNow}\n      onClick={ onClickPay }\n    >\n      {btn_text}\n    </button>\n  } else {\n    msgNextStep = t(\"shop.checkout.payment.order_received_to_profile_text\")\n    buttonNext = <Link to=\"/\">\n      <Button\n        block\n        color=\"success\"\n      >\n        {t(\"shop.checkout.payment.to_profile\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  }\n\n\n  return (\n    <ShopCheckoutPaymentBase title={title}>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Card title={t(\"shop.checkout.payment.order_received\")}>\n              <Card.Body>\n                <h5 className={\"mb-4\"}>{t(\"shop.checkout.payment.order_received_subheader\")}</h5>\n                {t(\"shop.checkout.payment.order_received_to_payment_explanation\")} <br />< br />\n                {msgNextStep}\n              </Card.Body>\n              <Card.Footer>\n                {buttonNext}\n              </Card.Footer>\n            </Card>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <ShopCheckoutOrderSummary id={id} />\n          </Grid.Col>\n        </Grid.Row>\n    </ShopCheckoutPaymentBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopCheckoutPayment))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopCheckoutCompleteBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={\"\"}\n      checkoutProgress=\"complete\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutCompleteBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\nimport ShopCheckoutCompleteBase from \"./ShopCheckoutCompleteBase\"\nimport ShopCheckoutOrderSummary from \"../order_summary/ShopCheckoutOrderSummary\"\n\nimport { GET_ORDER_QUERY } from \"../queries\"\n\n\nfunction ShopCheckoutComplete({ t, match, history }) {\n  // const btnPayNow = useRef(null);\n  // const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  // const [btn_text, setBtnText] = useState(initialBtnText)\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  if (loading) return (\n    <ShopCheckoutCompleteBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopCheckoutCompleteBase>\n  )\n  if (error) return (\n    <ShopCheckoutCompleteBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopCheckoutCompleteBase>\n  )\n\n  console.log(data)\n  const order = data.financeOrder\n  console.log(order)\n  const orderItems = order.items.edges\n  console.log(orderItems)\n\n  // Order not found\n  if (!order) {\n    return (\n      <ShopCheckoutCompleteBase title={title}>\n        {t(\"shop.checkout.complete.order_not_found\")}\n      </ShopCheckoutCompleteBase>\n    )\n  }\n\n  let subHeader = \"\"\n  let contentText = \"\"\n  let paymentText = \"\"\n  let complete = false\n\n  // Success!\n  if (order.status === \"DELIVERED\") {\n    // subHeader: thank you message\n    // contentText: Something to explain the user what's next\n    if (order.total === \"0.00\") {\n      subHeader = t(\"shop.checkout.complete.success_subheader_free_order\") \n      contentText = t(\"shop.checkout.complete.success_content_text_free_order\")\n    } else {\n      subHeader = t(\"shop.checkout.complete.success_subheader\") \n      contentText = t(\"shop.checkout.complete.success_content_text\")\n    }\n    \n    complete = true\n\n    // Confirm receiving payment to user\n    if (order.total !== \"0.00\") {\n      paymentText = t(\"shop.checkout.complete.success_payment_text\")\n    }\n  } else {\n    // Fail...\n    // Looks like something went wrong message\n    subHeader = t(\"shop.checkout.complete.fail_subheader\") \n    // Notify user of ways to contact\n    contentText = t(\"shop.checkout.complete.fail_content_text\")\n\n    // Notify user that payment hasn't been received\n    if (order.total !== \"0.00\") {\n      paymentText = t(\"shop.checkout.complete.fail_payment_text\")\n    }\n  }\n\n\n  return (\n    <ShopCheckoutCompleteBase title={title}>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Card title={t(\"shop.checkout.complete.title\")}>\n              <Card.Body>\n                <h5 className={\"mb-4\"}>{subHeader}</h5>\n                {paymentText} <br />\n                {contentText}\n              </Card.Body>\n              <Card.Footer>\n                <Link to=\"/shop/account/\">\n                  <Button \n                    block\n                    color=\"success\"\n                  >\n                    {t(\"shop.complete.to_account\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Card.Footer>\n            </Card>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <ShopCheckoutOrderSummary id={id} complete={complete} />\n          </Grid.Col>\n        </Grid.Row>\n    </ShopCheckoutCompleteBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopCheckoutComplete))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASSES_QUERY = gql`\n  query ScheduleItemAttendance($before: String, $after: String, $account: ID!) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, accountScheduleEventTicket_Isnull: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          cancellationPossible\n          uncancellationPossible\n          attendanceType\n          date\n          bookingStatus\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountClassesBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassesBase))","import React, { useContext } from 'react'\nimport { useQuery, } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBookingStatus from '../../../ui/BadgeBookingStatus'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\"\n\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountClassesBase from \"./ShopAccountClassesBase\"\n\n\nfunction ShopAccountClasses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_CLASSES_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  // TODO: add cancel class button & query\n  // const [ updateOrder ] = useMutation(UPDATE_ORDER)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountClassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountClassesBase>\n      {t(\"shop.account.classes.error_loading_data\")}\n    </ShopAccountClassesBase>\n  )\n\n  const user = dataUser.user\n  const scheduleItemAttendances = data.scheduleItemAttendances\n\n  // Empty list\n  if (!scheduleItemAttendances.edges.length) {\n    return (\n      <ShopAccountClassesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.classes.title')} >\n              <Card.Body>\n                {t('shop.account.classes.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountClassesBase>\n    )  \n  }\n\n\n  // Populated list\n  return (\n    <ShopAccountClassesBase accountName={user.fullName}>\n      <h4>{t(\"shop.account.classes.title\")}</h4>\n      <LoadMoreOnBottomScroll\n        // headerContent={headerOptions}\n        pageInfo={scheduleItemAttendances.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: scheduleItemAttendances.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n              const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n          {/* <Grid.Row> */}\n          { scheduleItemAttendances.edges.map(({ node }) => (\n            <Card key={v4()}>\n              <Card.Body>\n                <Grid.Row>\n                  <Grid.Col xs={12} md={10}>\n                    <div className='mb-xs-3'>\n                      <h6>\n                        { node.scheduleItem.organizationClasstype.name }\n                        <span className='float-xs-right'> <BadgeBookingStatus status={node.bookingStatus} /></span>\n                      </h6>\n                      <Icon name=\"clock\" /> { moment(node.date).format(dateFormat) } { \" \" }\n                      <span className=\"text-muted\">\n                        {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n                      </span><br />\n                      <Icon name=\"home\" /> { node.scheduleItem.organizationLocationRoom.organizationLocation.name } { \" \" }\n                      <span className=\"text-muted\">\n                        { node.scheduleItem.organizationLocationRoom.name }\n                      </span> \n                    </div>\n                  </Grid.Col>\n                  <Grid.Col xs={12} md={2}>\n                    {(node.bookingStatus !== \"CANCELLED\") ?\n                      <Link to={`/shop/account/class_info/${node.scheduleItem.id}/${node.date}`}>\n                        <Button \n                          block\n                          outline\n                          color=\"info\"\n                          size=\"sm\"\n                          className=\"\"\n                          >\n                          {t(\"general.info\")}\n                        </Button>\n                      </Link>\n                      : \"\"\n                    }\n                    {((node.bookingStatus !== \"CANCELLED\") && node.cancellationPossible) ?  \n                      <Link to={`/shop/account/class_cancel/${node.scheduleItem.id}/${node.date}/${node.id}`}>\n                        <Button \n                          block\n                          outline\n                          color=\"warning\"\n                          size=\"sm\"\n                          className=\"mt-3\"\n                          >\n                          {t(\"general.cancel\")}\n                        </Button>\n                      </Link>\n                      : (node.uncancellationPossible) ? \n                        <Link to={`/shop/account/class_uncancel/${node.scheduleItem.id}/${node.date}/${node.id}`}>\n                          <Button \n                            block\n                            outline\n                            color=\"primary\"\n                            size=\"sm\"\n                            className=\"mt-3\"\n                            >\n                            {t(\"general.book\")}\n                          </Button>\n                        </Link>\n                      : \"\"\n                    }\n                  </Grid.Col>\n                </Grid.Row>\n              </Card.Body>\n            </Card>\n          ))}\n      </LoadMoreOnBottomScroll>\n    </ShopAccountClassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopClasspassesBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.classpasses.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassesBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspassPricingCard({ t, classpass, btnLink, active=false }) {\n  // classpass should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, unlimited, classes, validity, link\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {classpass.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        {classpass.priceDisplay}\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          <b>{(classpass.unlimited) ? t('general.unlimited') : classpass.classes }</b> { \" \" }\n          {((classpass.classes !== 1) || (classpass.unlimited))? t('general.classes'): t('general.class')}\n        </PricingCard.AttributeItem>\n        <PricingCard.AttributeItem>\n          {t('general.valid_for')} { \" \" }\n          <b>{classpass.validity} {' '} {classpass.validityUnitDisplay}</b>\n        </PricingCard.AttributeItem>\n      </PricingCard.AttributeList>\n      {(btnLink) ?\n        <Link to={btnLink}>\n          <PricingCard.Button >\n            {t(\"shop.classpasses.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\"\n      }\n    </PricingCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspassPricingCard))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_CLASSPASSES_QUERY = gql`\n  query OrganizationClasspasses($after: String, $before: String) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          trialPass\n          name\n          description\n          price\n          priceDisplay\n          validity\n          validityUnit\n          validityUnitDisplay\n          classes\n          unlimited\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\nimport ShopClasspassesBase from \"./ShopClasspassesBase\"\nimport ShopClasspassPricingCard from \"../classpass/ShopClasspassPricingCard\"\n\nimport { GET_ORGANIZATION_CLASSPASSES_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspasses({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_CLASSPASSES_QUERY)\n\n  if (loading) return (\n    <ShopClasspassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopClasspassesBase>\n  )\n  if (error) return (\n    <ShopClasspassesBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopClasspassesBase>\n  )\n\n  const classpasses = data.organizationClasspasses\n  \n  return (\n    <ShopClasspassesBase>\n      <Grid.Row>\n        {classpasses.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={3}>\n            <ShopClasspassPricingCard\n              classpass={node}\n              btnLink={\"/shop/classpass/\" + node.id}\n            />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspasses))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopClasspassBase({ t, match, history, pageTitle, pageSubTitle, children }) {\n  \n  return (\n    <ShopBase \n      title={pageTitle}\n      subTitle={pageSubTitle}\n      returnUrl=\"/shop/classpasses\"\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASSPASS_QUERY = gql`\n  query OrganizationClasspass($id: ID!) {\n    organizationClasspass(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      trialPass\n      name\n      description\n      price\n      priceDisplay\n      validity\n      validityUnit\n      validityUnitDisplay\n      classes\n      unlimited\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    user {\n      hasReachedTrialLimit\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport { TimeStringToJSDateOBJ } from '../../../tools/date_tools'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport ShopClasspassBase from \"./ShopClasspassBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopClasspassesPricingCard from \"./ShopClasspassPricingCard\"\n\nimport { GET_CLASSPASS_QUERY } from \"./queries\"\nimport { GET_CLASS_QUERY } from \"../queries\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction ShopClasspass({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const pageTitle = t(\"general.classpass\")\n  const id = match.params.id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  const { loading, error, data } = useQuery(GET_CLASSPASS_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  const { loading: loadingClass, error: errorClass, data: dataClass } = useQuery(GET_CLASS_QUERY, {\n    variables: { scheduleItemId: scheduleItemId, date: classDate },\n    skip: (!scheduleItemId || !classDate)\n  })\n\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n\n  if (loading) return (\n    <ShopClasspassBase pageTitle={pageTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopClasspassBase>\n  )\n  if (error) return (\n    <ShopClasspassBase pageTitle={pageTitle}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopClasspassBase>\n  )\n\n  const classpass = data.organizationClasspass\n  const user = data.user\n  const pageSubTitle = classpass.name\n\n  if (user.hasReachedTrialLimit && classpass.trialPass) {\n    return (\n      <ShopClasspassBase pageTitle={pageTitle}>\n        <Card pageTitle={t(\"shop.classpass.trial_limit_reached\")}>\n          <Card.Body>\n            {t(\"shop.classpass.trial_limit_reached_explanation\")}\n          </Card.Body>\n        </Card>\n      </ShopClasspassBase>\n    )\n  }\n\n  return (\n    <ShopClasspassBase pageTitle={pageTitle} pageSubTitle={pageSubTitle}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <ShopClasspassesPricingCard classpass={classpass} active={true} />\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          {(dataClass && !loadingClass && !errorClass) ?\n            <Card pageTitle={t(\"shop.classpass.class_book_information\")}>\n              <Card.Body>\n                {t(\"shop.classpass.class_book_explanation\")} <br /><br />\n                <b>\n                  {moment(classDate).format(dateFormat)} {' '}\n                  {moment(TimeStringToJSDateOBJ(dataClass.scheduleClass.timeStart)).format(timeFormat)} {' - '}\n                  {moment(TimeStringToJSDateOBJ(dataClass.scheduleClass.timeEnd)).format(timeFormat)} <br />  \n                </b>\n                {dataClass.scheduleClass.organizationClasstype.name + \" \" + t(\"general.at\") + ' ' + \n                  dataClass.scheduleClass.organizationLocationRoom.organizationLocation.name}\n\n              </Card.Body>\n            </Card>\n            : \"\" \n          }\n          <Card pageTitle={t(\"shop.classpass.additional_information\")}>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(classpass.description) }}></div>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <Card pageTitle={t(\"shop.checkout.pageTitle\")}>\n            <Card.Body>\n              <Formik\n                initialValues={{ message: \"\" }}\n                // validationSchema={CLASSTYPE_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n\n                    let createOrderInput = {\n                      message: values.message,\n                      organizationClasspass: match.params.id,\n                    }\n\n                    if (scheduleItemId && classDate) {\n                      createOrderInput.attendanceDate = classDate\n                      createOrderInput.scheduleItem = scheduleItemId\n                    }\n\n                    createOrder({ variables: {\n                      input: createOrderInput,\n                      // file: values.image\n                    }, refetchQueries: [\n                        // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                    ]})\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        console.log('good...  now redirect to the payment page')\n                        const orderId = data.createFinanceOrder.financeOrder.id\n                        history.push('/shop/checkout/payment/' + orderId)\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                        setSubmitting(false)\n                      })\n                }}\n                >\n                {({ isSubmitting, errors, values }) => (\n                  <ShopCheckoutForm \n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    values={values}\n                  />\n                )}\n              </Formik>\n\n              {/* When a user is not logged in, show a login button to redirect to the login page */}\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClasspassBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspass))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\n\nfunction ShopSubscriptionsBase({ t, match, history, children }) {\n  return (\n    <ShopBase title={t(\"shop.subscriptions.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionsBase))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopSubscriptionPricingCard({ t, subscription, btnLink, active=false, displayCheckoutInfo=false }) {\n  // subscription should be an object with at least the following values from an organizationSubscription object:\n  // id, name, priceTodayDisplay, subscriptionUnit, unlimited, minDuration, priceFirstMonthDisplay, \n  // accountRegistrationfee\n\n  let unit = t(\"general.month\")\n  if (!subscription.unlimited && subscription.subscriptionUnit === 'WEEK') {\n    unit = t(\"general.week\")\n  }\n\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {subscription.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        {subscription.priceTodayDisplay}\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          <b>{(subscription.unlimited) ? t('general.unlimited') : subscription.classes }</b> { \" \" }\n          {t('general.classes')} / {unit}\n        </PricingCard.AttributeItem>\n        <PricingCard.AttributeItem>\n          {t('general.min_duration')} { \" \" }\n          <b>{subscription.minDuration} {(subscription.minDuration === 1) ? t(\"general.month\") : t(\"general.months\")}</b> \n        </PricingCard.AttributeItem>\n        {(displayCheckoutInfo) ? \n          <PricingCard.AttributeItem>\n            {t(\"general.first_month\")}: <b>{subscription.priceFirstMonthDisplay}</b>\n          </PricingCard.AttributeItem>\n        : \"\"}\n        {(displayCheckoutInfo && subscription.accountRegistrationFee > 0) ? \n          <PricingCard.AttributeItem>\n            {t(\"general.registration_fee\")}: <b>{subscription.accountRegistrationFeeDisplay}</b>\n          </PricingCard.AttributeItem>\n        : \"\"}\n      </PricingCard.AttributeList>\n      {(btnLink) ?\n        <Link to={btnLink}>\n          <PricingCard.Button >\n            {t(\"shop.subscriptions.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\"\n      }\n    </PricingCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionPricingCard))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_SUBSCRIPTIONS_QUERY = gql`\n  query OrganizationSubscriptions($after: String, $before: String) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          priceTodayDisplay\n          displayPublic\n          displayShop\n          name\n          description\n          sortOrder\n          minDuration\n          classes\n          subscriptionUnit\n          subscriptionUnitDisplay\n          reconciliationClasses\n          unlimited\n          termsAndConditions\n          registrationFee\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\nimport ShopSubscriptionsBase from \"./ShopSubscriptionsBase\"\nimport ShopSubscriptionPricingCard from \"../subscription/ShopSubscriptionPricingCard\"\n\nimport { GET_ORGANIZATION_SUBSCRIPTIONS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopSubscriptions({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_SUBSCRIPTIONS_QUERY)\n\n  if (loading) return (\n    <ShopSubscriptionsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionsBase>\n  )\n  if (error) return (\n    <ShopSubscriptionsBase>\n      {t(\"shop.subscriptions.error_loading\")}\n    </ShopSubscriptionsBase>\n  )\n\n  const subscriptions = data.organizationSubscriptions\n\n  return (\n    <ShopSubscriptionsBase>\n        <Grid.Row>\n          {subscriptions.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={3}>\n              <ShopSubscriptionPricingCard\n                subscription={node}\n                btnLink={\"/shop/subscription/\" + node.id}\n              />\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n\n        \n    </ShopSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptions))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction CheckoutCardMollie({ t, match, history, organizationSubscriptionId }) {\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n  return (\n    <Card title={t(\"shop.checkout.title\")}>\n      <Card.Body>\n        <Formik\n          initialValues={{ message: \"\" }}\n          // validationSchema={CLASSTYPE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              let createOrderInput = {\n                message: values.message,\n                organizationSubscription: organizationSubscriptionId,\n              }\n\n              createOrder({ variables: {\n                input: createOrderInput,\n                // file: values.image\n              }, refetchQueries: [\n                  // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  console.log('good...  now redirect to the payment page')\n                  const orderId = data.createFinanceOrder.financeOrder.id\n                  history.push('/shop/checkout/payment/' + orderId)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <ShopCheckoutForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardMollie))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Icon,\n} from \"tabler-react\"\n\n\nfunction CheckoutCardBankAccountRequired({ t, match, history }) {\n\n  return (\n    <Card title={t(\"shop.subscription.bank_account_required\")}>\n      <Card.Body>\n        {t(\"shop.subscription.bank_account_required_explanation\")}\n      </Card.Body>\n      <Card.Footer>\n      <Link to=\"/shop/account/bank_account\">\n        <Button \n          block\n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n        >\n          {t('shop.subscription.to_bank_account')} <Icon name=\"chevron-right\" />\n        </Button>\n      </Link>\n      </Card.Footer>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardBankAccountRequired))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Icon\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport cs_django_links from \"../../../tools/cs_django_links\"\n\n\nconst ShopClasspassForm = ({ t, isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n    <FoForm>\n      <Form.Group label={t('shop.subscription.start_on')}>\n        <CSDatePicker\n          selected={values.dateStart}\n          onChange={(date) => setFieldValue(\"dateStart\", date)}\n          onBlur={() => setFieldTouched(\"dateStart\", true)}\n        />\n        <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <small className=\"text-muted\">\n        {t(\"shop.order.by_placing_this_order\")} <br />\n        <ul>\n          <li>{t(\"shop.order.agree_terms\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\" \n              href={cs_django_links.EXPORT_TERMS_AND_CONDITIONS}\n            >\n              {t(\"general.terms_and_conditions\")}\n            </a>\n          </li>\n          <li>{t(\"shop.order.agree_privacy\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\" \n              href={cs_django_links.EXPORT_PRIVACY_POLICY}\n            >\n              {t(\"general.privacy_policy\")}\n            </a>\n          </li>\n        </ul>\n      </small>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting || !values.dateStart}\n      >\n        {(!values.dateStart) ? t(\"shop.subscription.please_select_date\") : t(\"general.i_agree\")}\n        {\" \"} <Icon name=\"chevron-right\" />\n      </Button>\n    </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopClasspassForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_SCHEMA = Yup.object().shape({\n    dateStart: Yup.string()\n      .nullable()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n} from \"tabler-react\"\nimport CheckoutCardDirectDebitForm from \"./CheckoutCardDirectDebitForm\"\nimport { ACCOUNT_SUBSCRIPTION_SCHEMA } from \"./yupSchemaDirectDebit\"\n\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport { CREATE_ACCOUNT_SUBSCRIPTION } from \"../../relations/accounts/subscriptions/queries\"\n\n\nfunction CheckoutDirectDebit({ t, match, history, accountId, organizationSubscription }) {\n  const [createSubscription] = useMutation(CREATE_ACCOUNT_SUBSCRIPTION)\n\n  return (\n    <Card title={t(\"shop.checkout.title\")}>\n      <Card.Body>\n        {/* <p>{t(\"shop.subscription.bank_account_required_explanation\")}</p> */}\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organizationSubscription.termsAndConditions) }} />\n        <Formik\n          initialValues={{ message: \"\" }}\n          validationSchema={ACCOUNT_SUBSCRIPTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              createSubscription({ variables: {\n                input: {\n                  organizationSubscription: organizationSubscription.id,\n                  account: accountId,\n                  dateStart: dateToLocalISO(values.dateStart),\n                },\n                // file: values.image\n              }, refetchQueries: [\n                  // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  console.log('good...  now redirect to the subscription activated page')\n                  const accountSubscriptionId = data.createAccountSubscription.accountSubscription.id\n                  history.push(`/shop/subscription/direct_debit_activated/${accountSubscriptionId}`)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <CheckoutCardDirectDebitForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutDirectDebit))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionBase({ t, match, history, pageTitle, pageSubTitle, children }) {\n  \n  return (\n    <ShopBase \n      title={pageTitle}\n      subTitle={pageSubTitle}\n      returnUrl=\"/shop/subscriptions\"\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SUBSCRIPTION_QUERY = gql`\n  query OrganizationSubscription($id: ID!) {\n    organizationSubscription(id:$id) {\n      id\n      archived\n      priceTodayDisplay\n      displayPublic\n      displayShop\n      name\n      description\n      sortOrder\n      minDuration\n      classes\n      subscriptionUnit\n      subscriptionUnitDisplay\n      reconciliationClasses\n      unlimited\n      termsAndConditions\n      registrationFee\n      shopPaymentMethod\n      accountRegistrationFee\n      accountRegistrationFeeDisplay\n      priceFirstMonthDisplay\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      instructor\n      employee\n      hasBankAccountInfo\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport CheckoutCardMollie from './CheckoutCardMollie'\nimport CheckoutCardBankAccountRequired from './CheckoutCardBankAccountRequired'\nimport CheckoutCardDirectDebit from './CheckoutCardDirectDebit'\nimport ShopSubscriptionBase from \"./ShopSubscriptionBase\"\nimport ShopSubscriptionPricingCard from \"./ShopSubscriptionPricingCard\"\n\nimport { GET_SUBSCRIPTION_QUERY } from \"./queries\"\n\nfunction ShopSubscription({ t, match, history }) {\n  const pageTitle = t(\"general.subscription\")\n  const id = match.params.id\n\n  // fetchPolicy network-only prevents caching. Need fresh results when coming back after setting bank account.\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopSubscriptionBase pageTitle={pageTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionBase>\n  )\n  if (error) return (\n    <ShopSubscriptionBase pageTitle={pageTitle}>\n      {t(\"shop.subscription.error_loading\")}\n    </ShopSubscriptionBase>\n  )\n\n  const subscription = data.organizationSubscription\n  const account = data.user\n  const pageSubTitle = subscription.name\n\n  let CheckoutCard\n\n  // Check for shop subscription payment method\n  if (subscription.shopPaymentMethod === \"DIRECTDEBIT\") {\n    // Check for bank account details, if not set, \n    if (!account.hasBankAccountInfo) {\n      // Create local storage back url for account bank account component    \n      localStorage.setItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT, `/shop/subscription/${id}`)\n      // Show bank account requird \n      CheckoutCard = <CheckoutCardBankAccountRequired />\n    } else {\n      // Allow customer to create a subscription\n      CheckoutCard = <CheckoutCardDirectDebit accountId={account.accountId} organizationSubscription={subscription} />\n    }\n  } else {\n    CheckoutCard = <CheckoutCardMollie organizationSubscriptionId={id} />\n  }\n\n\n  return (\n    <ShopSubscriptionBase pageTitle={pageTitle} pageSubTitle={pageSubTitle}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <ShopSubscriptionPricingCard subscription={subscription} active={true} displayCheckoutInfo={true} />\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <Card pageTitle={t(\"shop.subscription.additional_information\")}>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(subscription.description) }}></div>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          {CheckoutCard}\n        </Grid.Col>\n      </Grid.Row>\n    </ShopSubscriptionBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscription))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionDirectDebitActivatedBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      checkoutProgress=\"complete\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionDirectDebitActivatedBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!) {\n    accountSubscription(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  List\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ShopSubscriptionDirectDebitActivatedBase from \"./ShopSubscriptionDirectDebitActivatedBase\"\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"./queries\"\n\n\nfunction ShopSubscriptionDirectDebitActivated({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n\n  // fetchPolicy network-only prevents caching. Need fresh results when coming back after setting bank account.\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n  if (error) return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title}>\n      {t(\"shop.subscription.error_loading\")}\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n\n  console.log(data)\n  const subscription = data.accountSubscription\n  const account = data.user\n  console.log(subscription)\n  console.log(account)\n\n  return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <Card title={t(\"shop.subscription_directdebit_activated.thank_you\")}>\n            <Card.Body>\n              {t(\"shop.subscription_directdebit_activated.message_activated\")} <br/>\n\n              <b>{subscription.organizationSubscription.name}</b> {t(\"shop.subscription_directdebit_activated.starting_on\")} {' '}\n              <b>{moment(subscription.dateStart).format(dateFormat)}</b>.\n              <br /><br />\n              <b>{t(\"shop.subscription_directdebit_activated.what_next_question\")}</b>\n              <List.Group>\n                <Link to=\"/shop/classes\" className=\"mb-1\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_book_class')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n                <Link to=\"/shop/account\" className=\"mb-1\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_account')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n                <Link to=\"/\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_continue_shopping')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n              </List.Group>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionDirectDebitActivated))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PASSWORD_CHANGE_SCHEMA = Yup.object().shape({\n    passwordCurrent: Yup.string()\n      .required(t('yup.field_required')),\n    passwordNew: Yup.string()\n      .required(t('yup.field_required'))\n      .min(2, t('yup.min_len_9')),\n    passwordNew2: Yup.string()\n      .oneOf([Yup.ref('passwordNew'), null], t('yup.passwords_must_match')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst UserPasswordChangeForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm className=\"card\" autoComplete=\"off\">\n    <Card.Body className=\"p-6\">\n      <Card.Title>\n        {t('user.change_password.title')}\n      </Card.Title>\n      <Form.Group label={t('user.change_password.password_current')}>\n        <Field type=\"password\" \n                name=\"passwordCurrent\" \n                className={(errors.passwordCurrent) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordCurrent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('user.change_password.password_new')}>\n        <Field type=\"password\" \n                name=\"passwordNew\" \n                className={(errors.passwordNew) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordNew\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('user.change_password.password_new_repeat')}>\n        <Field type=\"password\" \n                name=\"passwordNew2\" \n                className={(errors.passwordNew2) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordNew2\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Footer>\n        <Button \n          block\n          loading={isSubmitting}\n          color=\"primary\"\n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('user.change_password.title')}\n        </Button>\n      </Form.Footer>\n    </Card.Body>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(UserPasswordChangeForm))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { ToastContainer, Slide } from 'react-toastify'\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\"\n\n\nfunction CSStandalonePage({ t, urlLogo=\"\", children}) {\n\n  return (\n    <Page>\n      <div className=\"page-single\">\n        <Container>\n          <Grid.Row>\n            <div className=\"col col-login mx-auto\">            \n              <div className=\"text-center mb-5\">\n                { (urlLogo) ? <img src={urlLogo} className=\"h-9\" alt=\"logo\" /> : \"\" }\n              </div>\n              {children}\n              <ToastContainer \n                autoClose={5000} \n                transition={Slide}\n              />\n            </div>\n          </Grid.Row>\n        </Container>\n      </div>\n    </Page>\n  )\n}\n\nexport default withTranslation()(CSStandalonePage)\n\n\n\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { PASSWORD_CHANGE_SCHEMA } from './yupSchema'\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Button,\n  List,\n} from \"tabler-react\"\n\nimport { UPDATE_ACCOUNT_PASSWORD } from \"../../../queries/system/auth\"\nimport UserPasswordChangeForm from './UserPasswordChangeForm';\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserChangePassword({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const [updatePassword] = useMutation(UPDATE_ACCOUNT_PASSWORD)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin} >\n      {/* TODO: point imageURL to logo */}\n      <Formik\n        initialValues={{ \n          passwordCurrent: \"\",\n          passwordNew: \"\",\n          passwordNew2: \"\"\n        }}\n        validationSchema={PASSWORD_CHANGE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            let vars = {\n              input: {\n                passwordCurrent: values.passwordCurrent,\n                passwordNew: values.passwordNew\n              }\n            }\n\n            updatePassword({ variables: vars })\n              .then(({ data }) => {\n                console.log('got data', data)\n                setTimeout(() => toast.success((t('user.change_password.success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                }), 300)\n                window.history.back()\n              }).catch((error) => {\n                console.log('#############')\n                console.log(error.messages)\n                console.log(error.graphQLErrors)\n                console.log(Object.keys(error))\n\n                if (error.graphQLErrors) {\n                  let i\n                  for (i = 0; i < error.graphQLErrors.length; i++) {\n                    toast.error(error.graphQLErrors[0].message\n                        .replace(/'/g, \"\")\n                        .replace(/,/g, \"\")\n                        .replace(/\\[/g, \"\")\n                        .replace(/\\]/g, \"\"), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  }\n                } else {\n                  // Show general error message\n                  toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                }\n                \n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <UserPasswordChangeForm\n            isSubmitting={isSubmitting}\n            etFieldValue={setFieldValue}\n            esetFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n          />\n        )}\n      </Formik>    \n      <h5>{t('user.change_password.requirements')}</h5>\n      <List>\n        <List.Item>{t('user.change_password.requirement_not_a_digit')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_not_common')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_min_length')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_not_similar_account')}</List.Item>\n      </List>\n      {/* Cancel button below form */}\n      <Button \n        block\n        color=\"link\"\n        onClick={(event) => {\n          event.preventDefault()  \n          window.history.back()\n        }}\n      >\n        {t('general.cancel')}\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\n\nexport default withTranslation()(withRouter(UserChangePassword))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\n// import CSDatePicker from \"../../ui/CSDatePicker\"\n// import ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nconst UserLoginForm = ({ t, history, isSubmitting, errors }) => (\n  <FoForm className=\"card\" autoComplete=\"off\">\n    <Card.Body className=\"p-6\">\n      <Card.Title>\n        {t('user.login.title')}\n      </Card.Title>\n      <Form.Group label={t('user.login.email')}>\n        <Field type=\"text\" \n                name=\"email\" \n                placeholder={t('user.login.email_placeholder')}\n                className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.password')}>\n        <Field type=\"password\" \n                name=\"password\" \n                placeholder={t('user.login.password_placeholder')}\n                className={(errors.password) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"password\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Footer>\n        <Grid.Row>\n          <Grid.Col md={6}>\n            <Button \n              block\n              loading={isSubmitting}\n              color=\"primary\"\n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.login')}\n            </Button>\n          </Grid.Col>\n          <Grid.Col md={6}>\n            <Button \n              color=\"link\"\n              RootComponent=\"a\"\n              href={(window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") ? \n                \"http://localhost:8000/d/accounts/password/reset/\" :\n                \"/d/accounts/password/reset/\"\n              } \n            >\n              {t('user.register.reset_password')}\n            </Button>\n          </Grid.Col>\n        </Grid.Row>\n      </Form.Footer>\n    </Card.Body>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(UserLoginForm))\n\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport { TOKEN_AUTH } from \"../../../queries/system/auth\"\nimport { CSAuth } from \"../../../tools/authentication\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport UserLoginForm from \"./UserLoginForm\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLogin({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const appSettings = useContext(AppSettingsContext)\n  const accountSignupEnabled = appSettings.accountSignupEnabled\n\n  const [ doTokenAuth ] = useMutation(TOKEN_AUTH)\n\n  // Do an auth cleanup, so we start clean when signing in\n  CSAuth.cleanup()\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin} >\n      <div className=\"text-center text-muted mb-1\">\n        {organization ? organization.name : \"\"}\n      </div>\n      <Formik\n        initialValues={{ \n          email: \"\",\n          password: \"\"\n        }}\n        // validationSchema={ACCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            let vars = {\n              username: values.email,\n              password: values.password,\n            }\n\n            doTokenAuth({ variables: vars,\n              refetchQueries: [\n                // // Refetch list\n                // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                // // Refresh local cached results for this account\n                // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                // TODO: Add link to \"feature switcher\" here\n                const next = localStorage.getItem(CSLS.AUTH_LOGIN_NEXT) || \"/user/welcome\"\n                CSAuth.login(data.tokenAuth)\n                setTimeout(() => history.push(next), 500)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log(error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors }) => (\n          <UserLoginForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n          />\n        )}\n      </Formik>\n      {\n        (accountSignupEnabled) && <React.Fragment>\n          <div className=\"text-center\">\n            <h5>{t('user.register.create_account')}</h5>\n            {t('user.register.create_account_msg')} <br />\n            {t('user.register.create_account_msg_click_below')} <br />\n          </div>\n          <Button \n            block\n            color=\"link\"\n            RootComponent=\"a\"\n            href={(window.location.hostname === \"localhost\" || window.location.hostname === \"dev.costasiella.com\") ? \n              \"http://localhost:8000/d/accounts/signup/\" :\n              \"/d/accounts/signup/\"\n            } \n          >\n            {t('user.register.create_account')} <Icon name=\"chevron-right\" />\n          </Button>\n        </React.Fragment>\n      }\n    </CSStandaloneFormPage>\n  )\n}\n\n\nexport default withTranslation()(withRouter(UserLogin))","import React, { useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { ToastContainer, Slide} from 'react-toastify'\nimport {\n  Card,\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLoginRequired({t, match, history}) {\n  const [active, setActive] = useState(false);\n\n  return (\n    <CSStandaloneFormPage>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.login_required.title')}\n          </Card.Title>\n          {t('user.login_required.message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              setTimeout(() => history.push('/user/login'), 250)\n            }}\n          >\n            {t('user.login_required.go_to_login')} <Icon name=\"chevron-right\" />\n          </Button>\n        </Card.Body>\n      </Card>\n      <ToastContainer \n          autoClose={5000} \n          transition={Slide}\n      />\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserLoginRequired))","import React, { useContext, useState } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Button,\n} from \"tabler-react\"\n\nimport OrganizationContext from '../../context/OrganizationContext'\nimport { CSAuth } from \"../../../tools/authentication\"\nimport { TOKEN_COOKIE_DELETE, TOKEN_REFRESH_COOKIE_DELETE } from \"../../../queries/system/auth\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLogout({t, match, history}) {\n  const [ deleteCookie ] = useMutation(TOKEN_COOKIE_DELETE)\n  const [ deleteRefreshCookie ] = useMutation(TOKEN_REFRESH_COOKIE_DELETE)\n  const [active, setActive] = useState(false)\n\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin}>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.logout.title')}\n          </Card.Title>\n          {t('user.logout.confirmation_message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              CSAuth.logout()\n              deleteCookie().then(({ data }) => {\n                console.log('got data', data)\n                })\n              .catch((error) => {\n                console.log(error)\n              })\n              deleteRefreshCookie().then(({ data }) => {\n                console.log('got data', data)\n                })\n              .catch((error) => {\n                console.log(error)\n              })\n              setTimeout(() => toast.info(t('user.logout.success'), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              }), 350)\n              setTimeout(() => history.push('/'), 250)\n            }}\n          >\n            {t('general.logout')}\n          </Button>\n        </Card.Body>\n      </Card>\n      <Button \n        block\n        color=\"link\"\n        onClick={(event) => {\n          event.preventDefault()  \n          window.history.back()\n        }}\n      >\n        {t('general.cancel')}\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserLogout))","import React, { useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { ToastContainer } from 'react-toastify'\n\nimport {\n  Card,\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\nfunction UserSessionExpired({t, match, history}) {\n  // const organization = useContext(OrganizationContext)\n  // console.log(organization)\n\n  const [active, setActive] = useState(false);\n\n  return (\n    <CSStandaloneFormPage>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.session_expired.title')}\n          </Card.Title>\n          {t('user.session_expired.message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              setTimeout(() => history.push('/user/login'), 250)\n            }}\n          >\n            {t('user.session_expired.go_to_login')} <Icon name=\"chevron-right\" />\n          </Button>\n        </Card.Body>\n      </Card>\n      <ToastContainer autoClose={5000}/>\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserSessionExpired))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport GET_USER_PROFILE from \"../../../queries/system/get_user_profile\"\n\n\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport CSStandalonePageWide from \"../../ui/CSStandalonePageWide\"\n\n\nfunction Welcome({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const { loading, error, data } = useQuery(GET_USER_PROFILE, {\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      <Dimmer active={true} loader={true} />\n    </CSStandalonePageWide>\n  )\n  if (error) return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </CSStandalonePageWide>\n  )\n\n  const user = data.user\n\n  // Push the user to the shop in case they're not an employee or instructor\n  if (!user.employee && !user.instructor) {\n    history.push(\"/shop/account\")\n  } \n\n\n  return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      <div className=\"text-center mb-5\">\n        <h2>{t(\"general.welcome\")} {user.firstName}</h2>\n        <h5>{t(\"user.welcome.where_next_question\")}</h5>\n      </div>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={3} offsetMd={3}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.title\")}</h5>\n              {t(\"user.welcome.shop_explanation\")} <br /><br />\n              <Link to=\"/\">\n                <Button \n                  block\n                  outline\n                  color=\"primary\"\n                >\n                  {t(\"user.welcome.shop_to\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={3}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"general.backend\")}</h5>\n              {t(\"user.welcome.backend_explantion\")} <br /><br />\n              <Link to=\"/backend\">\n                <Button \n                  block\n                  outline\n                  color=\"primary\"\n                >\n                  {t(\"user.welcome.backend_to\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <HasPermissionWrapper resource=\"selfcheckin\" permission=\"view\" hideLoading={true}>\n          <Grid.Col xs={12} sm={12} md={3} offsetMd={3}>\n            <Card>\n              <Card.Body>\n                <h5>{t(\"selfcheckin.home.title\")}</h5>\n                {t(\"user.welcome.selfcheckin_explantion\")} <br /><br />\n                <Link to=\"/selfcheckin\">\n                  <Button \n                    block\n                    outline\n                    color=\"primary\"\n                  >\n                    {t(\"user.welcome.selfcheckin_to\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </HasPermissionWrapper>\n      </Grid.Row>\n    </CSStandalonePageWide>\n  )\n}\n\nexport default withTranslation()(withRouter(Welcome))","import * as React from \"react\";\n\nimport { Error404Page } from \"tabler-react\";\n\n// type Props = {||}\n\n// function Error404(props: Props): React.Node {\n//   return <Error404Page />\n// }\n\nfunction Error404() {\n  return <Error404Page />\n}\n\nexport default Error404\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_BANK_ACCOUNTS = gql`\n  query AccountBankAccounts($before: String, $after: String, $account: ID!) {\n    accountBankAccounts(first: 1, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          number\n          holder\n          bic\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n\nexport const UPDATE_BANK_ACCOUNT = gql`\n  mutation UpdateBankAccount($input:UpdateAccountBankAccountInput!) {\n    updateAccountBankAccount(input: $input) {\n      accountBankAccount {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst ShopAccountBankAccountForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card title={t(\"shop.account.bank_account.title\")} >\n    <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.holder')}>\n              <Field type=\"text\" \n                      name=\"holder\" \n                      className={(errors.holder) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.number')}>\n              <Field type=\"text\" \n                      name=\"number\" \n                      className={(errors.number) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"number\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.bic')}>\n              <Field type=\"text\" \n                      name=\"bic\" \n                      className={(errors.bic) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopAccountBankAccountForm))\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_BANK_ACCOUNT_SCHEMA = Yup.object().shape({\n    holder: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    number: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport { GET_ACCOUNT_BANK_ACCOUNTS, UPDATE_BANK_ACCOUNT } from \"./queries\"\n\nimport ShopAccountProfileBase from \"../ShopAccountProfileBase\"\nimport ShopAccountBankAccountForm from \"./ShopAccountBankAccountForm\"\nimport { ACCOUNT_BANK_ACCOUNT_SCHEMA } from \"./yupSchema\"\n\n\nfunction ShopAccountBankAccount({t, match, history}) {\n  // TODO fetch returnUrl from local storage to see if the user comes from a shop subscription component\n  const nextUrl = localStorage.getItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT)\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNTS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateBankAccount ] = useMutation(UPDATE_BANK_ACCOUNT)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.bank_account.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  const user = dataUser.user\n  const bankAccount = data.accountBankAccounts.edges[0].node\n\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Formik\n            initialValues={{ \n              number: bankAccount.number,\n              holder: bankAccount.holder,\n              bic: bankAccount.bic\n            }}\n            validationSchema={ACCOUNT_BANK_ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: bankAccount.id,\n                  number: values.number,\n                  holder: values.holder,\n                  bic: values.bic\n                }\n\n                updateBankAccount({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // // Refetch list\n                    // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // // Refresh local cached results for this account\n                    // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    if (nextUrl) {\n                      history.push(nextUrl)\n                    }\n\n                    toast.success((t('shop.account.bank_account.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n              <ShopAccountBankAccountForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                returnUrl={\"/shop/account\"}\n              />\n            )}\n          </Formik>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountBankAccount))","// import React, { Component } from 'react';\n// import logo from './logo.svg';\n\nimport React, { useState } from 'react'\nimport {\n  Route, \n  Switch, \n  HashRouter,\n  Redirect\n} from 'react-router-dom'\nimport { withTranslation } from 'react-i18next'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { toast } from 'react-toastify'\nimport { Dimmer } from 'tabler-react'\n\n\nimport { GET_APP_SETTINGS_QUERY } from \"./components/settings/general/date_time/queries\"\nimport { GET_ORGANIZATION_QUERY } from \"./components/organization/organization/queries\"\nimport { TOKEN_REFRESH } from \"./queries/system/auth\"\n\n// Import moment locale\n// import moment from 'moment'\nimport 'moment/locale/nl'\n\nimport CSStandalonePageLoader from './components/ui/CSStandalonePageLoader'\n\nimport { AppSettingsProvider } from \"./components/context/AppSettingsContext\"\nimport { OrganizationProvider } from \"./components/context/OrganizationContext\"\n\nimport CookiePolicy from './components/shop/cookie_policy/CookiePolicy'\nimport HomeHome from './components/home/home/HomeHome'\n\nimport AutomationHome from './components/automation/home/AutomationHome'\nimport AutomationAccountSubscriptionCredits from './components/automation/account/subscription/credits/AutomationAccountSubscriptionCredits'\nimport AutomationAccountSubscriptionCreditAdd from './components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditAdd'\nimport AutomationAccountSubscriptionInvoices from './components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoices'\nimport AutomationAccountSubscriptionInvoicesAdd from './components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesAdd'\nimport AutomationAccountSubscriptionMollieCollections \n  from './components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollections'\nimport AutomationAccountSubscriptionMollieCollectionAdd\n  from './components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionAdd'\n\nimport FinanceHome from './components/finance/home/FinanceHome'\nimport FinanceCostCenters from './components/finance/costcenters/FinanceCostCenters'\nimport FinanceCostCenterAdd from './components/finance/costcenters/FinanceCostCenterAdd'\nimport FinanceCostCenterEdit from './components/finance/costcenters/FinanceCostCenterEdit'\nimport FinanceExpenses from './components/finance/expenses/FinanceExpenses'\nimport FinanceExpenseAdd from './components/finance/expenses/FinanceExpenseAdd'\nimport FinanceExpenseEdit from './components/finance/expenses/FinanceExpenseEdit'\nimport FinanceExpensesExport from './components/finance/expenses/export/FinanceExpensesExport'\nimport FinanceGLAccounts from './components/finance/glaccounts/FinanceGLAccounts'\nimport FinanceGLAccountAdd from './components/finance/glaccounts/FinanceGLAccountAdd'\nimport FinanceGLAccountEdit from './components/finance/glaccounts/FinanceGLAccountEdit'\nimport FinanceInvoices from './components/finance/invoices/FinanceInvoices'\nimport FinanceInvoicesExport from './components/finance/invoices/export/FinanceInvoicesExport'\nimport FinanceInvoiceEdit from './components/finance/invoices/edit/FinanceInvoiceEdit'\nimport FinanceInvoiceEditTo from './components/finance/invoices/edit_to/FinanceInvoiceEditTo'\nimport FinanceInvoiceGroups from './components/finance/invoices/groups/FinanceInvoiceGroups'\nimport FinanceInvoiceGroupAdd from './components/finance/invoices/groups/FinanceInvoiceGroupAdd'\nimport FinanceInvoiceGroupEdit from './components/finance/invoices/groups/FinanceInvoiceGroupEdit'\nimport FinanceInvoiceGroupDefaults from './components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaults'\nimport FinanceInvoicePaymentAdd from './components/finance/invoices/payments/FinanceInvoicePaymentAdd'\nimport FinanceInvoicePaymentEdit from './components/finance/invoices/payments/FinanceInvoicePaymentEdit'\nimport FinanceOrders from './components/finance/orders/FinanceOrders'\nimport FinancePaymentBatches from './components/finance/payment_batches/FinancePaymentBatches'\nimport FinancePaymentBatchAddWhat from './components/finance/payment_batches/FinancePaymentBatchAddWhat'\nimport FinancePaymentBatchView from './components/finance/payment_batches/FinancePaymentBatchView'\nimport FinancePaymentCollectionBatchAdd from './components/finance/payment_batches/FinancePaymentCollectionBatchAdd'\nimport FinancePaymentCollectionBatchEdit from './components/finance/payment_batches/FinancePaymentCollectionBatchEdit'\nimport FinancePaymentBatchCategories from './components/finance/payment_batch_categories/FinancePaymentBatchCategories'\nimport FinancePaymentBatchCategoryAdd from './components/finance/payment_batch_categories/FinancePaymentBatchCategoryAdd'\nimport FinancePaymentBatchCategoryEdit from './components/finance/payment_batch_categories/FinancePaymentBatchCategoryEdit'\nimport FinanceOrderEdit from './components/finance/orders/edit/FinanceOrderEdit'\nimport FinancePaymentMethods from './components/finance/payment_methods/FinancePaymentMethods'\nimport FinancePaymentMethodAdd from './components/finance/payment_methods/FinancePaymentMethodAdd'\nimport FinancePaymentMethodEdit from './components/finance/payment_methods/FinancePaymentMethodEdit'\nimport FinanceQuotes from './components/finance/quotes/FinanceQuotes'\nimport FinanceQuotesExport from './components/finance/quotes/export/FinanceQuotesExport'\nimport FinanceQuoteEdit from './components/finance/quotes/edit/FinanceQuoteEdit'\nimport FinanceQuoteEditTo from './components/finance/quotes/edit_to/FinanceQuoteEditTo'\nimport FinanceQuoteGroups from './components/finance/quotes/groups/FinanceQuoteGroups'\nimport FinanceQuoteGroupAdd from './components/finance/quotes/groups/FinanceQuoteGroupAdd'\nimport FinanceQuoteGroupEdit from './components/finance/quotes/groups/FinanceQuoteGroupEdit'\nimport FinanceTaxRates from './components/finance/taxrates/FinanceTaxRates'\nimport FinanceTaxRatesAdd from './components/finance/taxrates/FinanceTaxRateAdd'\nimport FinanceTaxRatesEdit from './components/finance/taxrates/FinanceTaxRateEdit'\nimport FinanceTaxRatesSummary from './components/finance/taxrates_summary/FinanceTaxRatesSummary'\n\nimport InsightHome from './components/insight/home/InsightHome'\nimport InsightInactiveAccounts from './components/insight/inactive_accounts/InsightInactiveAccounts'\nimport InsightInactiveAccountsAdd from './components/insight/inactive_accounts/InsightInactiveAccountsAdd'\nimport InsightInactiveAccountsView from './components/insight/inactive_accounts/InsightInactiveAccountsView'\nimport InsightClasspasses from './components/insight/classpasses/InsightClasspasses'\nimport InsightRevenue from './components/insight/revenue/InsightRevenue'\nimport InsightInstructorClassesMonth from './components/insight/instructor_classes/InsightInstructorClassesMonth'\nimport InsightSubscriptions from './components/insight/subscriptions/InsightSubscriptions'\nimport InsightTrialpasses from './components/insight/trialpasses/InsightTrialpasses'\n\nimport OrganizationHome from './components/organization/home/OrganizationHome'\nimport OrganizationEdit from './components/organization/organization/OrganizationEdit'\nimport OrganizationBranding from './components/organization/organization/branding/OrganizationBranding'\nimport OrganizationBrandingEdit from './components/organization/organization/branding/OrganizationBrandingEdit'\nimport OrganizationAnnouncements from './components/organization/announcements/OrganizationAnnouncements'\nimport OrganizationAnnouncementAdd from './components/organization/announcements/OrganizationAnnouncementAdd'\nimport OrganizationAnnouncementEdit from './components/organization/announcements/OrganizationAnnouncementEdit'\nimport OrganizationAppointments from './components/organization/appointment_categories/appointments/OrganizationAppointments'\nimport OrganizationAppointmentAdd from './components/organization/appointment_categories/appointments/OrganizationAppointmentAdd'\nimport OrganizationAppointmentEdit from './components/organization/appointment_categories/appointments/OrganizationAppointmentEdit'\nimport OrganizationAppointmentCategories from './components/organization/appointment_categories/OrganizationAppointmentCategories'\nimport OrganizationAppointmentCategoryAdd from './components/organization/appointment_categories/OrganizationAppointmentCategoryAdd'\nimport OrganizationAppointmentCategoryEdit from './components/organization/appointment_categories/OrganizationAppointmentCategoryEdit'\nimport OrganizationAppointmentPrices from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPrices'\nimport OrganizationAppointmentPriceAdd from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceAdd'\nimport OrganizationAppointmentPriceEdit from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceEdit'\nimport OrganizationClasspasses from './components/organization/classpasses/OrganizationClasspasses'\nimport OrganizationClasspassAdd from './components/organization/classpasses/OrganizationClasspassAdd'\nimport OrganizationClasspassEdit from './components/organization/classpasses/OrganizationClasspassEdit'\nimport OrganizationClasspassesGroups from './components/organization/classpasses_groups/OrganizationClasspassesGroups'\nimport OrganizationClasspassesGroupAdd from './components/organization/classpasses_groups/OrganizationClasspassesGroupAdd'\nimport OrganizationClasspassesGroupEdit from './components/organization/classpasses_groups/OrganizationClasspassesGroupEdit'\nimport OrganizationClasspassesGroupEditPasses from './components/organization/classpasses_groups/OrganizationClasspassesGroupEditPasses'\nimport OrganizationClasstypes from './components/organization/classtypes/OrganizationClasstypes'\nimport OrganizationClasstypeAdd from './components/organization/classtypes/OrganizationClasstypeAdd'\nimport OrganizationClasstypeEdit from './components/organization/classtypes/OrganizationClasstypeEdit'\nimport OrganizationClasstypeEditImage from './components/organization/classtypes/OrganizationClasstypeEditImage'\nimport OrganizationDiscoveries from './components/organization/discovery/OrganizationDiscoveries'\nimport OrganizationDiscoveryAdd from './components/organization/discovery/OrganizationDiscoveryAdd'\nimport OrganizationDiscoveryEdit from './components/organization/discovery/OrganizationDiscoveryEdit'\nimport OrganizationDocuments from './components/organization/documents/OrganizationDocuments'\nimport OrganizationListDocuments from './components/organization/documents/OrganizationListDocuments'\nimport OrganizationDocumentAdd from './components/organization/documents/OrganizationDocumentAdd'\nimport OrganizationDocumentEdit from './components/organization/documents/OrganizationDocumentEdit'\nimport OrganizationHolidays from './components/organization/holidays/OrganizationHolidays'\nimport OrganizationHolidayAdd from './components/organization/holidays/OrganizationHolidayAdd'\nimport OrganizationHolidayEdit from './components/organization/holidays/OrganizationHolidayEdit'\nimport OrganizationHolidayEditLocations from './components/organization/holidays/OrganizationHolidayEditLocations'\nimport OrganizationLanguages from './components/organization/languages/OrganizationLanguages'\nimport OrganizationLanguageAdd from './components/organization/languages/OrganizationLanguageAdd'\nimport OrganizationLanguageEdit from './components/organization/languages/OrganizationLanguageEdit'\nimport OrganizationLocations from './components/organization/locations/OrganizationLocations'\nimport OrganizationLocationAdd from './components/organization/locations/OrganizationLocationAdd'\nimport OrganizationLocationEdit from './components/organization/locations/OrganizationLocationEdit'\nimport OrganizationLocationRooms from './components/organization/locations/rooms/OrganizationLocationRooms'\nimport OrganizationLocationRoomAdd from './components/organization/locations/rooms/OrganizationLocationRoomAdd'\nimport OrganizationLocationRoomEdit from './components/organization/locations/rooms/OrganizationLocationRoomEdit'\nimport OrganizationLevels from './components/organization/levels/OrganizationLevels'\nimport OrganizationLevelAdd from './components/organization/levels/OrganizationLevelAdd'\nimport OrganizationLevelEdit from './components/organization/levels/OrganizationLevelEdit'\nimport OrganizationProducts from './components/organization/products/OrganizationProducts'\nimport OrganizationProductAdd from './components/organization/products/OrganizationProductAdd'\nimport OrganizationProductEdit from './components/organization/products/OrganizationProductEdit'\nimport OrganizationShifts from './components/organization/shifts/OrganizationShifts'\nimport OrganizationShiftAdd from './components/organization/shifts/OrganizationShiftAdd'\nimport OrganizationShiftEdit from './components/organization/shifts/OrganizationShiftEdit'\nimport OrganizationSubscriptions from './components/organization/subscriptions/OrganizationSubscriptions'\nimport OrganizationSubscriptionAdd from './components/organization/subscriptions/OrganizationSubscriptionAdd'\nimport OrganizationSubscriptionEdit from './components/organization/subscriptions/OrganizationSubscriptionEdit'\nimport OrganizationSubscriptionsGroups from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroups'\nimport OrganizationSubscriptionsGroupAdd from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupAdd'\nimport OrganizationSubscriptionsGroupEdit from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEdit'\nimport OrganizationSubscriptionsGroupEditSubscriptions from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEditSubscriptions'\nimport OrganizationSubscriptionsPrices from './components/organization/subscriptions/prices/OrganizationSubscriptionsPrices'\nimport OrganizationSubscriptionPriceAdd from './components/organization/subscriptions/prices/OrganizationSubscriptionPriceAdd'\nimport OrganizationSubscriptionPriceEdit from './components/organization/subscriptions/prices/OrganizationSubscriptionPriceEdit'\n\nimport RelationsHome from './components/relations/home/RelationsHome'\nimport RelationsAccounts from './components/relations/accounts/RelationsAccounts'\nimport RelationsAccountAdd from './components/relations/accounts/RelationsAccountAdd'\nimport RelationsAccountProfile from './components/relations/accounts/RelationsAccountProfile'\nimport RelationsAccountProfileImage from './components/relations/accounts/RelationsAccountProfileImage'\nimport AccountAcceptedDocuments from './components/relations/accounts/accepted_documents/AcceptedDocuments.jsx'\nimport RelationsAccountBankAccount from './components/relations/accounts/bank_accounts/RelationsAccountBankAccount'\nimport RelationsAccountBankAccountMandateAdd from './components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateAdd'\nimport RelationsAccountBankAccountMandateEdit from './components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateEdit'\nimport RelationsAccountClasses from './components/relations/accounts/classes/AccountClasses'\nimport RelationsAccountEnrollments from './components/relations/accounts/enrollments/AccountEnrollments'\nimport RelationsAccountEnrollmentEdit from './components/relations/accounts/enrollments/AccountEnrollmentEdit'\nimport RelationsAccountEnrollmentFindClass from './components/relations/accounts/enrollments/AccountEnrollmentFindClass'\nimport RelationsAccountTools from './components/relations/accounts/tools/RelationsAccountTools'\nimport AccountClasspasses from './components/relations/accounts/classpasses/AccountClasspasses'\nimport AccountClasspassAdd from './components/relations/accounts/classpasses/AccountClasspassAdd'\nimport AccountClasspassEdit from './components/relations/accounts/classpasses/AccountClasspassEdit'\nimport AccountClasspassClasses from './components/relations/accounts/classpass_classes/AccountClasspassClasses'\nimport AccountDocuments from './components/relations/accounts/documents/AccountDocuments'\nimport AccountDocumentAdd from './components/relations/accounts/documents/AccountDocumentAdd'\nimport AccountDocumentEdit from './components/relations/accounts/documents/AccountDocumentEdit'\nimport AccountFinancePaymentBatchCategoryItems from \n  './components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItems'\nimport AccountFinancePaymentBatchCategoryItemAdd from \n'./components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemAdd'\nimport AccountFinancePaymentBatchCategoryItemEdit from \n'./components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemEdit'\nimport AccountInvoices from './components/relations/accounts/invoices/AccountInvoices'\nimport AccountInvoiceAdd from './components/relations/accounts/invoices/AccountInvoiceAdd'\nimport AccountMemberships from './components/relations/accounts/memberships/AccountMemberships'\nimport AccountMembershipAdd from './components/relations/accounts/memberships/AccountMembershipAdd'\nimport AccountMembershipEdit from './components/relations/accounts/memberships/AccountMembershipEdit'\nimport AccountNotes from './components/relations/accounts/notes/AccountNotes.jsx'\nimport AccountNoteAdd from './components/relations/accounts/notes/AccountNoteAdd.jsx'\nimport AccountNoteEdit from './components/relations/accounts/notes/AccountNoteEdit.jsx'\nimport AccountOrders from './components/relations/accounts/orders/AccountOrders'\nimport AccountProducts from './components/relations/accounts/products/AccountProducts'\nimport AccountProductAdd from './components/relations/accounts/products/AccountProductAdd'\nimport AccountQuotes from './components/relations/accounts/quotes/AccountQuotes'\nimport AccountQuoteAdd from './components/relations/accounts/quotes/AccountQuoteAdd'\nimport AccountScheduleEventTickets from './components/relations/accounts/schedule_event_tickets/AccountScheduleEventTickets'\nimport AccountSubscriptions from './components/relations/accounts/subscriptions/AccountSubscriptions'\nimport AccountSubscriptionAdd from './components/relations/accounts/subscriptions/AccountSubscriptionAdd'\nimport AccountSubscriptionEdit from './components/relations/accounts/subscriptions/edit/AccountSubscriptionEdit'\nimport AccountSubscriptionEditAltPrices from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPrices'\nimport AccountSubscriptionEditAltPriceAdd from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceAdd'\nimport AccountSubscriptionEditAltPriceEdit from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceEdit'\nimport AccountSubscriptionEditBlocks from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlocks'\nimport AccountSubscriptionEditBlockAdd from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockAdd'\nimport AccountSubscriptionEditBlockEdit from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockEdit'\nimport AccountSubscriptionEditCredits from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCredits'\nimport AccountSubscriptionEditCreditAdd from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAdd'\nimport AccountSubscriptionEditCreditEdit from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEdit'\nimport AccountSubscriptionEditInvoices from './components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoices'\nimport AccountSubscriptionEditInvoiceAdd from './components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAdd'\nimport AccountSubscriptionEditPauses from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauses'\nimport AccountSubscriptionEditPauseAdd from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseAdd'\nimport AccountSubscriptionEditPauseEdit from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseEdit'\nimport RelationsAccountInstructorProfile from './components/relations/accounts/instructor_profile/RelationsAccountInstructorProfile'\nimport RelationsB2B from './components/relations/b2b/RelationsB2B'\nimport RelationsB2BAdd from './components/relations/b2b/RelationsB2BAdd.jsx'\nimport RelationsB2BEdit from './components/relations/b2b/RelationsB2BEdit.jsx'\nimport RelationsB2BInvoices from './components/relations/b2b/invoices/RelationsB2BInvoices'\nimport RelationsB2BInvoiceAdd from './components/relations/b2b/invoices/RelationsB2BInvoiceAdd'\n\nimport ScheduleHome from './components/schedule/home/ScheduleHome'\nimport ScheduleAppointments from './components/schedule/appointments/ScheduleAppointments'\nimport ScheduleAppointmentAdd from './components/schedule/appointments/ScheduleAppointmentAdd'\nimport ScheduleAppointmentEditAll from './components/schedule/appointments/all/edit/ScheduleAppointmentEditAll'\nimport ScheduleClasses from './components/schedule/classes/ScheduleClasses'\nimport ScheduleClassAdd from './components/schedule/classes/ScheduleClassAdd'\nimport ScheduleClassEditAll from './components/schedule/classes/all/edit/ScheduleClassEditAll'\nimport ScheduleClassEnrollments from './components/schedule/classes/all/enrollments/ScheduleClassEnrollments'\nimport ScheduleClassEnrollmentsSearch from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentsSearch'\nimport ScheduleClassEnrollmentAdd from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentAdd'\nimport ScheduleClassEnrollmentEdit from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentEdit'\nimport ScheduleClassEnrollmentOptions from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentOptions'\nimport ScheduleClassClasspasses from './components/schedule/classes/all/classpasses/ScheduleClassClasspasses'\nimport ScheduleClassSubscriptions from './components/schedule/classes/all/subscriptions/ScheduleClassSubscriptions'\nimport ScheduleClassInstructors from './components/schedule/classes/all/instructors/ScheduleClassInstructors'\nimport ScheduleClassInstructorAdd from './components/schedule/classes/all/instructors/ScheduleClassInstructorAdd'\nimport ScheduleClassInstructorEdit from './components/schedule/classes/all/instructors/ScheduleClassInstructorEdit'\nimport ScheduleClassAttendance from './components/schedule/classes/class/attendance/ScheduleClassAttendance'\nimport ScheduleClassAttendanceChart from './components/schedule/classes/class/attendance_chart/ScheduleClassAttendanceChart'\nimport ScheduleClassBook from './components/schedule/classes/class/book/ScheduleClassBook'\nimport ScheduleClassEdit from './components/schedule/classes/class/edit/ScheduleClassEdit'\nimport ScheduleClassPrices from './components/schedule/classes/all/prices/ScheduleClassPrices'\nimport ScheduleClassPriceAdd from './components/schedule/classes/all/prices/ScheduleClassPriceAdd'\nimport ScheduleClassPriceEdit from './components/schedule/classes/all/prices/ScheduleClassPriceEdit'\nimport ScheduleEvents from './components/schedule/events/ScheduleEvents'\nimport ScheduleEventAdd from './components/schedule/events/ScheduleEventAdd'\nimport ScheduleEventEdit from './components/schedule/events/edit/ScheduleEventEdit'\nimport ScheduleEventActivities from './components/schedule/events/activities/ScheduleEventActivities'\nimport ScheduleEventActivityAdd from './components/schedule/events/activities/ScheduleEventActivityAdd'\nimport ScheduleEventActivityEdit from './components/schedule/events/activities/ScheduleEventActivityEdit'\nimport ScheduleEventActivityAttendance from './components/schedule/events/activities/attendance/ScheduleEventActivityAttendance'\nimport ScheduleEventEarlybirds from './components/schedule/events/earlybirds/ScheduleEventEarlybirds'\nimport ScheduleEventEarlybirdAdd from './components/schedule/events/earlybirds/ScheduleEventEarlybirdAdd'\nimport ScheduleEventEarlybirdEdit from './components/schedule/events/earlybirds/ScheduleEventEarlybirdEdit'\nimport ScheduleEventMedia from './components/schedule/events/media/ScheduleEventMedia'\nimport ScheduleEventMediaAdd from './components/schedule/events/media/ScheduleEventMediaAdd'\nimport ScheduleEventMediaEdit from './components/schedule/events/media/ScheduleEventMediaEdit'\nimport ScheduleEventSubscriptionGroupDiscounts from './components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscounts'\nimport ScheduleEventSubscriptionGroupDiscountAdd from './components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountAdd'\nimport ScheduleEventSubscriptionGroupDiscountEdit from './components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountEdit'\nimport ScheduleEventTickets from './components/schedule/events/tickets/ScheduleEventTickets'\nimport ScheduleEventTicketAdd from './components/schedule/events/tickets/ScheduleEventTicketAdd'\nimport ScheduleEventTicketEdit from './components/schedule/events/tickets/ScheduleEventTicketEdit'\nimport ScheduleEventTicketEditActivities from './components/schedule/events/tickets/activities/ScheduleEventTicketEditActivities'\nimport ScheduleEventTicketEditCustomers from './components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomers'\nimport ScheduleEventTicketEditCustomersSearch from './components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomersSearch'\nimport ScheduleShifts from './components/schedule/shifts/ScheduleShifts'\nimport ScheduleShiftAdd from './components/schedule/shifts/ScheduleShiftAdd'\nimport ScheduleShiftEditAll from './components/schedule/shifts/all/edit/ScheduleShiftEditAll'\nimport ScheduleShiftEdit from './components/schedule/shifts/shift/edit/ScheduleShiftEdit'\nimport ScheduleShiftEmployees from './components/schedule/shifts/all/employees/ScheduleShiftEmployees'\nimport ScheduleShiftEmployeeAdd from './components/schedule/shifts/all/employees/ScheduleShiftEmployeeAdd'\nimport ScheduleShiftEmployeeEdit from './components/schedule/shifts/all/employees/ScheduleShiftEmployeeEdit'\n\nimport SelfCheckinCheckin from './components/selfcheckin/Checkin/Checkin'\nimport SelfCheckinBookingOptions from './components/selfcheckin/BookingOptions/BookingOptions'\nimport SelfCheckinLocations from './components/selfcheckin/Locations/Locations'\nimport SelfCheckinLocationClasses from './components/selfcheckin/LocationClasses/LocationClasses'\n\nimport SettingsAbout from './components/settings/about/SettingsAbout'\nimport SettingsFinanceBankAccounts from './components/settings/finance/bank_accounts/SettingsFinanceBankAccounts'\nimport SettingsFinanceCurrency from './components/settings/finance/currency/SettingsFinanceCurrency'\nimport SettingsGeneralDateTime from './components/settings/general/date_time/SettingsGeneralDateTime'\nimport SettingsGeneralSystem from './components/settings/general/system/SettingsGeneralSystem'\nimport SettingsHome from './components/settings/home/SettingsHome'\nimport SettingsIntegrationMailChimp from './components/settings/integration/mailchimp/SettingsIntegrationMailChimp'\nimport SettingsIntegrationMollie from './components/settings/integration/mollie/SettingsIntegrationMollie'\nimport SettingsMailMailChimpLists from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpLists'\nimport SettingsMailMailChimpListAdd from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpListAdd'\nimport SettingsMailMailChimpListEdit from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpListEdit'\nimport SettingsMailNotifications from './components/settings/mail/notifications/SettingsMailNotifications'\nimport SettingsMailNotificationsAddAccount from './components/settings/mail/notifications/SettingsMailNotificationsAddAccount'\nimport SettingsMailTemplates from './components/settings/mail/templates/SettingsMailTemplates'\nimport SettingsMailTemplateEdit from './components/settings/mail/templates/SettingsMailTemplateEdit'\nimport SettingsShopAccountProfile from './components/settings/shop/account_profiles/SettingsShopAccountProfile'\nimport SettingsShopFeatures from './components/settings/shop/features/SettingsShopFeatures'\nimport SettingsWorkflowClassBooking from './components/settings/workflow/class_booking/SettingsWorkflowClassBooking'\nimport SettingsWorkflowShop from './components/settings/workflow/shop/SettingsWorkflowShop'\nimport SettingsWorkflowSubscriptionPauses from './components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPauses'\nimport SettingsWorkflowTrial from './components/settings/workflow/trial/SettingsWorkflowTrial'\n\nimport ShopAccountHome from './components/shop/account/home/ShopAccountHome'\nimport ShopAccountClassCancel from './components/shop/account/class_cancel/ShopAccountClassCancel'\nimport ShopAccountClassUnCancel from './components/shop/account/class_uncancel/ShopAccountClassUnCancel'\nimport ShopAccountClassInfo from './components/shop/account/class_info/ShopAccountClassInfo'\nimport ShopAccountClasspasses from './components/shop/account/classpasses/ShopAccountClasspasses'\nimport ShopAccountEventTickets from './components/shop/account/event_tickets/ShopAccountEventTickets'\nimport ShopAccountInvoicePayment from './components/shop/account/invoice_payment/ShopAccountInvoicePayment'\nimport ShopAccountInvoicePaymentStatus from './components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatus'\nimport ShopAccountInvoices from './components/shop/account/invoices/ShopAccountInvoices'\nimport ShopAccountInvoice from './components/shop/account/invoice/ShopAccountInvoice'\nimport ShopAccountMailingLists from './components/shop/account/mailing_lists/ShopAccountMailingLists'\nimport ShopAccountOrders from './components/shop/account/orders/ShopAccountOrders'\nimport ShopAccountProfile from './components/shop/account/profile/ShopAccountProfile'\nimport ShopAccountSubscriptions from './components/shop/account/subscriptions/ShopAccountSubscriptions'\nimport ShopAccountSubscriptionCredits from './components/shop/account/subscriptions/credits/ShopAccountSubscriptionCredits'\nimport ShopClassBook from './components/shop/classes/book/ShopClassBook'\nimport ShopClassBooked from './components/shop/classes/booked/ShopClassBooked'\nimport ShopClassesSchedule from './components/shop/classes/schedule/ShopClassesSchedule'\nimport ShopContact from './components/shop/contact/ShopContact'\nimport ShopEvents from './components/shop/events/ShopEvents'\nimport ShopEvent from './components/shop/event/ShopEvent'\nimport ShopEventTicket from './components/shop/event_ticket/ShopEventTicket'\nimport ShopHome from './components/shop/home/ShopHome'\nimport ShopCheckoutPayment from './components/shop/checkout/payment/ShopCheckoutPayment'\nimport ShopCheckoutComplete from './components/shop/checkout/complete/ShopCheckoutComplete'\nimport ShopClasses from './components/shop/account/classes/ShopAccountClasses'\nimport ShopClasspasses from './components/shop/classpasses/ShopClasspasses'\nimport ShopClasspass from './components/shop/classpass/ShopClasspass'\nimport ShopSubscriptions from './components/shop/subscriptions/ShopSubscriptions'\nimport ShopSubscription from './components/shop/subscription/ShopSubscription'\nimport ShopSubscriptionDirectDebitActivated from './components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivated'\n\nimport UserChangePassword from './components/user/password/UserPasswordChange'\nimport UserLogin from './components/user/login/UserLogin'\nimport UserLoginRequired from './components/user/login/UserLoginRequired'\nimport UserLogout from './components/user/login/UserLogout'\nimport UserSessionExpired from './components/user/session/UserSessionExpired'\nimport UserWelcome from './components/user/welcome/UserWelcome'\n\n\nimport Error404 from \"./components/Error404\"\n\nimport CSLS from \"./tools/cs_local_storage\"\nimport { CSAuth } from './tools/authentication'\nimport ShopAccountBankAccount from './components/shop/account/bank_account/ShopAccountBankAccount'\n\n\nfunction SetCurrentUrlAsNext() {\n  console.log(\"Storing current location as next in local storage\")\n  const currentUrl = window.location.href\n  const next = currentUrl.split(\"#\")[1]\n  console.log(next)\n  localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, next)\n}\n\n// Private routes catches expires tokens\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const [ refreshingToken, setRefreshingToken ] = useState(false)\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  let authTokenExpired = false\n  console.log(rest.path)\n\n  const ContinueAsYouAre = <Route {...rest} render={(props) => ( <Component {...props} /> )} />\n  const WaitAsYouAre = <Route {...rest} render={(props) => ( \n    <Dimmer active={true} loader={true}><Component {...props} /> </Dimmer>)} />\n  const LoginRequired = <Route {...rest} render={(props) => ( <Redirect to='/user/login/required' /> )} />\n  // const SessionExpired = <Route {...rest} render={(props) => ( <Redirect to='/user/session/expired' /> )} />\n  \n  // Check expiration\n  const tokenExp = localStorage.getItem(CSLS.AUTH_TOKEN_EXP)\n  if ((new Date() / 1000) >= tokenExp) {\n    authTokenExpired = true\n  }\n\n  if (refreshingToken) {\n    console.log(\"Refreshing token... please wait\")\n    return WaitAsYouAre\n  }\n\n  if (authTokenExpired)  {\n    const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n    // if (refreshTokenExp == null) {\n    //   console.log(\"refresh token not found\")\n    //   SetCurrentUrlAsNext()\n    //   CSAuth.cleanup()\n      \n    //   return LoginRequired\n    // } else if ((new Date() / 1000) >= refreshTokenExp) {\n    //   console.log(\"refresh token expired\")\n    //   console.log(new Date() / 1000)\n    //   console.log(refreshTokenExp)\n    //   SetCurrentUrlAsNext()\n    //   CSAuth.cleanup()\n\n    //   return SessionExpired\n    // } else {\n      // Refresh token\n    console.log(\"auth token expired, trying to refresh\")\n    console.log(new Date() / 1000)\n    console.log(refreshTokenExp)\n\n    // Catch loading state\n    setRefreshingToken(true)\n    doTokenRefresh().then(({ data }) => {\n      console.log('got refresh data', data)\n      CSAuth.updateTokenInfo(data.refreshToken)\n      setTimeout(function() {\n        setRefreshingToken(false)\n      }, 100)\n      return ContinueAsYouAre  \n    }).catch((error) => {\n      toast.error(error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n      console.log('there was an error refreshing the token', error) \n      SetCurrentUrlAsNext()\n      // As there was an issue detected with the refresh token, clear all.\n      CSAuth.cleanup()\n      return LoginRequired\n    })\n    // }\n  } else {\n    return ContinueAsYouAre\n  }\n  // return null\n}\n\n\nfunction AppRoot({ t }) {\n  const { loading: loadingAppSettings, error: errorAppSettings, data: dataAppSettings } = useQuery(GET_APP_SETTINGS_QUERY)\n  const { loading: loadingOrganization, error: errorOrganization, data: dataOrganization } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {id: \"T3JnYW5pemF0aW9uTm9kZToxMDA=\"}\n  })\n\n\n\n  if (loadingAppSettings || loadingOrganization) {\n    return (\n      <CSStandalonePageLoader />\n    )\n  }\n  if (errorAppSettings || errorOrganization) {\n    if (errorAppSettings.message === \"Signature has expired\")  {\n      return \"\"\n    } else {\n      return (\n        <div>\n          { t('settings.error_loading') } <br />\n          { errorAppSettings.message } <br />\n          { errorOrganization.message}\n        </div>\n      )\n    }\n  }\n\n  // Register \"US\" locale for moment\n  // moment.locale('en-US')\n  let appSettings = dataAppSettings.appSettings\n  let organization = dataOrganization.organization\n\n  return (\n    <AppSettingsProvider value={appSettings}>\n      <OrganizationProvider value={organization}>\n        <HashRouter>\n          <Switch>\n            {/* COOKIE POLICY */}\n            <Route exact path=\"/cookie_policy\" component={CookiePolicy} />\n            {/* BACKEND HOME */}\n            <PrivateRoute exact path=\"/backend\" component={HomeHome} />\n\n            {/* AUTOMATION */}\n            <PrivateRoute exact path=\"/automation\" component={AutomationHome} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits\" \n                                component={AutomationAccountSubscriptionCredits} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits/add\" \n                                component={AutomationAccountSubscriptionCreditAdd} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/invoices\" \n                                component={AutomationAccountSubscriptionInvoices} />    \n            <PrivateRoute exact path=\"/automation/account/subscriptions/invoices/add\" \n                                component={AutomationAccountSubscriptionInvoicesAdd} />    \n            <PrivateRoute exact path=\"/automation/account/subscriptions/mollie_collections\" \n                                component={AutomationAccountSubscriptionMollieCollections} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/mollie_collections/add\" \n                                component={AutomationAccountSubscriptionMollieCollectionAdd} />\n\n            \n            {/* FINANCE */}\n            <PrivateRoute exact path=\"/finance\" component={FinanceHome} />\n            <PrivateRoute exact path=\"/finance/costcenters\" component={FinanceCostCenters} />\n            <PrivateRoute exact path=\"/finance/costcenters/add\" component={FinanceCostCenterAdd} />\n            <PrivateRoute exact path=\"/finance/costcenters/edit/:id\" component={FinanceCostCenterEdit} />\n            <PrivateRoute exact path=\"/finance/expenses\" component={FinanceExpenses} />\n            <PrivateRoute exact path=\"/finance/expenses/add\" component={FinanceExpenseAdd} />\n            <PrivateRoute exact path=\"/finance/expenses/edit/:id\" component={FinanceExpenseEdit} />\n            <PrivateRoute exact path=\"/finance/expenses/export\" component={FinanceExpensesExport} />\n            <PrivateRoute exact path=\"/finance/invoices\" component={FinanceInvoices} />\n            <PrivateRoute exact path=\"/finance/invoices/export\" component={FinanceInvoicesExport} />\n            <PrivateRoute exact path=\"/finance/invoices/edit/:id\" component={FinanceInvoiceEdit} />\n            <PrivateRoute exact path=\"/finance/invoices/edit/:id/to\" component={FinanceInvoiceEditTo} />\n            <PrivateRoute exact path=\"/finance/invoices/groups\" component={FinanceInvoiceGroups} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/add\" component={FinanceInvoiceGroupAdd} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/edit/:id\" component={FinanceInvoiceGroupEdit} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/defaults\" component={FinanceInvoiceGroupDefaults} />\n            <PrivateRoute exact path=\"/finance/invoices/:invoice_id/payment/add\" component={FinanceInvoicePaymentAdd} />\n            <PrivateRoute exact path=\"/finance/invoices/:invoice_id/payment/edit/:id\" component={FinanceInvoicePaymentEdit} />\n            <PrivateRoute exact path=\"/finance/glaccounts\" component={FinanceGLAccounts} />\n            <PrivateRoute exact path=\"/finance/glaccounts/add\" component={FinanceGLAccountAdd} />\n            <PrivateRoute exact path=\"/finance/glaccounts/edit/:id\" component={FinanceGLAccountEdit} />\n            <PrivateRoute exact path=\"/finance/orders\" component={FinanceOrders} />\n            <PrivateRoute exact path=\"/finance/orders/edit/:id\" component={FinanceOrderEdit} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type\" component={FinancePaymentBatches} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/add_what\" component={FinancePaymentBatchAddWhat} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/view/:id\" component={FinancePaymentBatchView} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/add/:category_type\" component={FinancePaymentCollectionBatchAdd} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/edit/:id\" component={FinancePaymentCollectionBatchEdit} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories\" component={FinancePaymentBatchCategories} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories/add\" component={FinancePaymentBatchCategoryAdd} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories/edit/:id\" component={FinancePaymentBatchCategoryEdit} />\n            <PrivateRoute exact path=\"/finance/paymentmethods\" component={FinancePaymentMethods} />\n            <PrivateRoute exact path=\"/finance/paymentmethods/add\" component={FinancePaymentMethodAdd} />\n            <PrivateRoute exact path=\"/finance/paymentmethods/edit/:id\" component={FinancePaymentMethodEdit} />\n            <PrivateRoute exact path=\"/finance/quotes\" component={FinanceQuotes} />\n            <PrivateRoute exact path=\"/finance/quotes/export\" component={FinanceQuotesExport} />\n            <PrivateRoute exact path=\"/finance/quotes/edit/:id\" component={FinanceQuoteEdit} />\n            <PrivateRoute exact path=\"/finance/quotes/edit/:id/to\" component={FinanceQuoteEditTo} />\n            <PrivateRoute exact path=\"/finance/quotes/groups\" component={FinanceQuoteGroups} />\n            <PrivateRoute exact path=\"/finance/quotes/groups/add\" component={FinanceQuoteGroupAdd} />\n            <PrivateRoute exact path=\"/finance/quotes/groups/edit/:id\" component={FinanceQuoteGroupEdit} />\n            <PrivateRoute exact path=\"/finance/taxrates\" component={FinanceTaxRates} />\n            <PrivateRoute exact path=\"/finance/taxrates/add\" component={FinanceTaxRatesAdd} />\n            <PrivateRoute exact path=\"/finance/taxrates/edit/:id\" component={FinanceTaxRatesEdit} />\n            <PrivateRoute exact path=\"/finance/taxrates_summary\" component={FinanceTaxRatesSummary} />\n            \n            {/* ORGANIZATION */}\n            <PrivateRoute exact path=\"/organization\" component={OrganizationHome} />\n            <PrivateRoute exact path=\"/organization/edit/:id\" component={OrganizationEdit} />\n            <PrivateRoute exact path=\"/organization/edit/:id/branding\" component={OrganizationBranding} />\n            <PrivateRoute exact path=\"/organization/edit/:id/branding/:update_field\" component={OrganizationBrandingEdit} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id\" component={OrganizationDocuments} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type\" component={OrganizationListDocuments} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type/add\" component={OrganizationDocumentAdd} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type/edit/:id\" component={OrganizationDocumentEdit} />\n            <PrivateRoute exact path=\"/organization/announcements\" component={OrganizationAnnouncements} />\n            <PrivateRoute exact path=\"/organization/announcements/add\" component={OrganizationAnnouncementAdd} />\n            <PrivateRoute exact path=\"/organization/announcements/edit/:id\" component={OrganizationAnnouncementEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories\" component={OrganizationAppointmentCategories} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/add\" component={OrganizationAppointmentCategoryAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/edit/:id\" component={OrganizationAppointmentCategoryEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments\" component={OrganizationAppointments} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/add/\" component={OrganizationAppointmentAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/edit/:id\" component={OrganizationAppointmentEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id\" \n                  component={OrganizationAppointmentPrices} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id/add\" \n                  component={OrganizationAppointmentPriceAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id/edit/:id\" \n                  component={OrganizationAppointmentPriceEdit} />\n            <PrivateRoute exact path=\"/organization/classpasses\" component={OrganizationClasspasses} />\n            <PrivateRoute exact path=\"/organization/classpasses/add\" component={OrganizationClasspassAdd} />\n            <PrivateRoute exact path=\"/organization/classpasses/edit/:id\" component={OrganizationClasspassEdit} />    \n            <PrivateRoute exact path=\"/organization/classpasses/groups\" component={OrganizationClasspassesGroups} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/add\" component={OrganizationClasspassesGroupAdd} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/edit/:id\" component={OrganizationClasspassesGroupEdit} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/edit/passes/:id\" component={OrganizationClasspassesGroupEditPasses} />\n            <PrivateRoute exact path=\"/organization/classtypes\" component={OrganizationClasstypes} />\n            <PrivateRoute exact path=\"/organization/classtypes/add\" component={OrganizationClasstypeAdd} />\n            <PrivateRoute exact path=\"/organization/classtypes/edit/:id\" component={OrganizationClasstypeEdit} />\n            <PrivateRoute exact path=\"/organization/classtypes/edit_image/:id\" component={OrganizationClasstypeEditImage} />\n            <PrivateRoute exact path=\"/organization/discoveries\" component={OrganizationDiscoveries} />\n            <PrivateRoute exact path=\"/organization/discoveries/add\" component={OrganizationDiscoveryAdd} /> \n            <PrivateRoute exact path=\"/organization/discoveries/edit/:id\" component={OrganizationDiscoveryEdit} /> \n            <PrivateRoute exact path=\"/organization/holidays\" component={OrganizationHolidays} />\n            <PrivateRoute exact path=\"/organization/holidays/add\" component={OrganizationHolidayAdd} />\n            <PrivateRoute exact path=\"/organization/holidays/edit/:id\" component={OrganizationHolidayEdit} />\n            <PrivateRoute exact path=\"/organization/holidays/edit/:id/locations\" component={OrganizationHolidayEditLocations} />\n            <PrivateRoute exact path=\"/organization/languages\" component={OrganizationLanguages} />\n            <PrivateRoute exact path=\"/organization/languages/add\" component={OrganizationLanguageAdd} />\n            <PrivateRoute exact path=\"/organization/languages/edit/:id\" component={OrganizationLanguageEdit} />\n            <PrivateRoute exact path=\"/organization/levels\" component={OrganizationLevels} />\n            <PrivateRoute exact path=\"/organization/levels/add\" component={OrganizationLevelAdd} />\n            <PrivateRoute exact path=\"/organization/levels/edit/:id\" component={OrganizationLevelEdit} />\n            <PrivateRoute exact path=\"/organization/locations\" component={OrganizationLocations} />\n            <PrivateRoute exact path=\"/organization/locations/add\" component={OrganizationLocationAdd} />\n            <PrivateRoute exact path=\"/organization/locations/edit/:id\" component={OrganizationLocationEdit} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/:location_id\" component={OrganizationLocationRooms} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/add/:location_id\" component={OrganizationLocationRoomAdd} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/edit/:location_id/:id\" component={OrganizationLocationRoomEdit} />\n            <PrivateRoute exact path=\"/organization/products\" component={OrganizationProducts} />\n            <PrivateRoute exact path=\"/organization/products/add\" component={OrganizationProductAdd} />\n            <PrivateRoute exact path=\"/organization/products/edit/:id\" component={OrganizationProductEdit} />\n            <PrivateRoute exact path=\"/organization/shifts\" component={OrganizationShifts} />\n            <PrivateRoute exact path=\"/organization/shifts/add\" component={OrganizationShiftAdd} />\n            <PrivateRoute exact path=\"/organization/shifts/edit/:id\" component={OrganizationShiftEdit} /> \n            {/* <PrivateRoute exact path=\"/organization/memberships\" component={OrganizationMemberships} />\n            <PrivateRoute exact path=\"/organization/memberships/add\" component={OrganizationMembershipAdd} />\n            <PrivateRoute exact path=\"/organization/memberships/edit/:id\" component={OrganizationMembershipEdit} />  */}\n            <PrivateRoute exact path=\"/organization/subscriptions\" component={OrganizationSubscriptions} />\n            <PrivateRoute exact path=\"/organization/subscriptions/add\" component={OrganizationSubscriptionAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/edit/:id\" component={OrganizationSubscriptionEdit} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups\" component={OrganizationSubscriptionsGroups} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/add\" component={OrganizationSubscriptionsGroupAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/edit/:id\" component={OrganizationSubscriptionsGroupEdit} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/edit/subscriptions/:id\" component={OrganizationSubscriptionsGroupEditSubscriptions} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/:subscription_id\" component={OrganizationSubscriptionsPrices} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/add/:subscription_id\" component={OrganizationSubscriptionPriceAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/edit/:subscription_id/:id\" component={OrganizationSubscriptionPriceEdit} />\n\n            {/* RELATIONS */}\n            <PrivateRoute exact path=\"/relations\" component={RelationsHome} />\n            <PrivateRoute exact path=\"/relations/accounts\" component={RelationsAccounts} />\n            <PrivateRoute exact path=\"/relations/accounts/add\" component={RelationsAccountAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/profile\" component={RelationsAccountProfile} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/profile/image\" component={RelationsAccountProfileImage} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/accepted_documents\" component={AccountAcceptedDocuments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts\" component={RelationsAccountBankAccount} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts/:bank_account_id/mandates/add\" \n                          component={RelationsAccountBankAccountMandateAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts/:bank_account_id/mandates/edit/:id\" \n                          component={RelationsAccountBankAccountMandateEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classes\" component={RelationsAccountClasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses\" component={AccountClasspasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/add\" component={AccountClasspassAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/edit/:id\" component={AccountClasspassEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/classes/:id\" component={AccountClasspassClasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents\" component={AccountDocuments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents/add\" component={AccountDocumentAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents/edit/:id\" component={AccountDocumentEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/enrollments\" component={RelationsAccountEnrollments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/enrollments/edit/:id\" component={RelationsAccountEnrollmentEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/enrollment_find_class\" component={RelationsAccountEnrollmentFindClass} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items\" \n                          component={AccountFinancePaymentBatchCategoryItems} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items/add\" \n                          component={AccountFinancePaymentBatchCategoryItemAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items/edit/:id\" \n                          component={AccountFinancePaymentBatchCategoryItemEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/invoices\" component={AccountInvoices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/invoices/add\" component={AccountInvoiceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships\" component={AccountMemberships} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships/add\" component={AccountMembershipAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships/edit/:id\" component={AccountMembershipEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes\" component={AccountNotes} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes/add\" component={AccountNoteAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes/edit/:id\" component={AccountNoteEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/orders\" component={AccountOrders} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/products\" component={AccountProducts} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/products/add\" component={AccountProductAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/quotes\" component={AccountQuotes} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/quotes/add\" component={AccountQuoteAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/event_tickets\" component={AccountScheduleEventTickets} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions\" component={AccountSubscriptions} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/add\" component={AccountSubscriptionAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id\" \n                          component={AccountSubscriptionEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices\" \n                          component={AccountSubscriptionEditAltPrices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices/add\" \n                          component={AccountSubscriptionEditAltPriceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices/edit/:id\" \n                          component={AccountSubscriptionEditAltPriceEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks\" component={AccountSubscriptionEditBlocks} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks/add\" component={AccountSubscriptionEditBlockAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks/edit/:id\" \n                          component={AccountSubscriptionEditBlockEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits\" component={AccountSubscriptionEditCredits} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits/add\" component={AccountSubscriptionEditCreditAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits/edit/:id\" \n                          component={AccountSubscriptionEditCreditEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/invoices\" \n              component={AccountSubscriptionEditInvoices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/invoices/add\" \n              component={AccountSubscriptionEditInvoiceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses\" component={AccountSubscriptionEditPauses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses/add\" component={AccountSubscriptionEditPauseAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses/edit/:id\" \n                          component={AccountSubscriptionEditPauseEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/tools\" component={RelationsAccountTools} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/instructor_profile\" component={RelationsAccountInstructorProfile} />\n            <PrivateRoute exact path=\"/relations/b2b\" component={RelationsB2B} />\n            <PrivateRoute exact path=\"/relations/b2b/add\" component={RelationsB2BAdd} />\n            <PrivateRoute exact path=\"/relations/b2b/:business_id/edit\" component={RelationsB2BEdit} />\n            <PrivateRoute exact path=\"/relations/b2b/:business_id/invoices\" component={RelationsB2BInvoices} />\n            <PrivateRoute exact path=\"/relations/b2b/:business_id/invoices/add\" component={RelationsB2BInvoiceAdd} />\n\n            {/* SCHEDULE */}\n            <PrivateRoute exact path=\"/schedule\" component={ScheduleHome} />\n            <PrivateRoute exact path=\"/schedule/appointments\" component={ScheduleAppointments} />\n            <PrivateRoute exact path=\"/schedule/appointments/add\" component={ScheduleAppointmentAdd} />\n            <PrivateRoute exact path=\"/schedule/appointments/all/edit/:appointment_id\" component={ScheduleAppointmentEditAll} />\n            <PrivateRoute exact path=\"/schedule/classes\" component={ScheduleClasses} />\n            <PrivateRoute exact path=\"/schedule/classes/add/\" component={ScheduleClassAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/edit/:class_id/\" component={ScheduleClassEditAll} />\n            <PrivateRoute exact path=\"/schedule/classes/all/classpasses/:class_id/\" component={ScheduleClassClasspasses} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/\" component={ScheduleClassEnrollments} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/search\" component={ScheduleClassEnrollmentsSearch} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/add/:account_id/:account_subscription_id\" \n                          component={ScheduleClassEnrollmentAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/edit/:id\" \n                          component={ScheduleClassEnrollmentEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/options/:account_id\" component={ScheduleClassEnrollmentOptions} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/\" component={ScheduleClassPrices} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/add\" component={ScheduleClassPriceAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/edit/:id\" component={ScheduleClassPriceEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/all/subscriptions/:class_id/\" component={ScheduleClassSubscriptions} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/\" component={ScheduleClassInstructors} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/add\" component={ScheduleClassInstructorAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/edit/:id\" component={ScheduleClassInstructorEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/class/attendance/:class_id/:date\" component={ScheduleClassAttendance} />\n            <PrivateRoute exact path=\"/schedule/classes/class/attendance_chart/:class_id/:date\" \n                          component={ScheduleClassAttendanceChart} />\n            <PrivateRoute exact path=\"/schedule/classes/class/book/:class_id/:date/:account_id\" component={ScheduleClassBook} />\n            <PrivateRoute exact path=\"/schedule/classes/class/edit/:class_id/:date\" component={ScheduleClassEdit} />\n            <PrivateRoute exact path=\"/schedule/events\" component={ScheduleEvents} />\n            <PrivateRoute exact path=\"/schedule/events/add\" component={ScheduleEventAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id\" component={ScheduleEventEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities\" component={ScheduleEventActivities} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/add\" component={ScheduleEventActivityAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/edit/:id\" component={ScheduleEventActivityEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/edit/:id/attendance\" \n                          component={ScheduleEventActivityAttendance} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds\" component={ScheduleEventEarlybirds} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds/add\" component={ScheduleEventEarlybirdAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds/edit/:id\" component={ScheduleEventEarlybirdEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media\" component={ScheduleEventMedia} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media/add\" component={ScheduleEventMediaAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media/edit/:id\" component={ScheduleEventMediaEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/subscription_group_discounts\" \n                          component={ScheduleEventSubscriptionGroupDiscounts} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/subscription_group_discounts/add\" \n                          component={ScheduleEventSubscriptionGroupDiscountAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/subscription_group_discounts/edit/:id\" \n                          component={ScheduleEventSubscriptionGroupDiscountEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets\" component={ScheduleEventTickets} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/add\" component={ScheduleEventTicketAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id\" component={ScheduleEventTicketEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/activities\" component={ScheduleEventTicketEditActivities} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/customers\" component={ScheduleEventTicketEditCustomers} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/customers/search\" \n                          component={ScheduleEventTicketEditCustomersSearch} />\n            <PrivateRoute exact path=\"/schedule/shifts\" component={ScheduleShifts} />\n            <PrivateRoute exact path=\"/schedule/shifts/add\" component={ScheduleShiftAdd} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/edit/:shift_id/\" component={ScheduleShiftEditAll} />\n            <PrivateRoute exact path=\"/schedule/shifts/shift/edit/:shift_id/:date\" component={ScheduleShiftEdit} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/\" component={ScheduleShiftEmployees} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/add\" component={ScheduleShiftEmployeeAdd} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/edit/:id\" component={ScheduleShiftEmployeeEdit} />\n\n\n            {/* Insight */}\n            <PrivateRoute exact path=\"/insight\" component={InsightHome} />\n            <PrivateRoute exact path=\"/insight/inactive_accounts\" component={InsightInactiveAccounts} />\n            <PrivateRoute exact path=\"/insight/inactive_accounts/add\" component={InsightInactiveAccountsAdd} />\n            <PrivateRoute exact path=\"/insight/inactive_accounts/view/:id\" component={InsightInactiveAccountsView} />\n            <PrivateRoute exact path=\"/insight/classpasses\" component={InsightClasspasses} />\n            <PrivateRoute exact path=\"/insight/instructor_classes_month\" component={InsightInstructorClassesMonth} />\n            <PrivateRoute exact path=\"/insight/revenue\" component={InsightRevenue} />\n            <PrivateRoute exact path=\"/insight/subscriptions\" component={InsightSubscriptions} />\n            <PrivateRoute exact path=\"/insight/trialpasses\" component={InsightTrialpasses} />\n\n            {/* Self Check-in */}\n            <PrivateRoute exact path=\"/selfcheckin/checkin/:location_id/:class_id/:date\" component={SelfCheckinCheckin} />\n            <PrivateRoute exact path=\"/selfcheckin/book/:location_id/:class_id/:date/:account_id\" \n                                component={SelfCheckinBookingOptions} />\n            <PrivateRoute exact path=\"/selfcheckin\" component={SelfCheckinLocations} />\n            <PrivateRoute exact path=\"/selfcheckin/location/:location_id\" component={SelfCheckinLocationClasses} />\n\n            {/* Shop */}\n            <Route exact path = \"/\" component={ShopHome} />\n            <PrivateRoute exact path = \"/shop/account\" component={ShopAccountHome} />\n            <PrivateRoute exact path = \"/shop/account/bank_account\" component={ShopAccountBankAccount} />\n            <PrivateRoute exact path = \"/shop/account/class_cancel/:class_id/:date/:attendance_id\" \n                                component={ShopAccountClassCancel} />\n            <PrivateRoute exact path = \"/shop/account/class_uncancel/:class_id/:date/:attendance_id\" \n                                component={ShopAccountClassUnCancel} />\n            <PrivateRoute exact path = \"/shop/account/class_info/:class_id/:date\" component={ShopAccountClassInfo} />\n            <PrivateRoute exact path = \"/shop/account/classes\" component={ShopClasses} />\n            <PrivateRoute exact path = \"/shop/account/classpasses\" component={ShopAccountClasspasses} />\n            <PrivateRoute exact path = \"/shop/account/event_tickets\" component={ShopAccountEventTickets} />\n            <PrivateRoute exact path = \"/shop/account/invoice_payment/:id\" component={ShopAccountInvoicePayment} />\n            <PrivateRoute exact path = \"/shop/account/invoice_payment_status/:id\" component={ShopAccountInvoicePaymentStatus} />\n            <PrivateRoute exact path = \"/shop/account/invoices\" component={ShopAccountInvoices} />\n            <PrivateRoute exact path = \"/shop/account/invoice/:id\" component={ShopAccountInvoice} />\n            <PrivateRoute exact path = \"/shop/account/mailing_lists\" component={ShopAccountMailingLists} />\n            <PrivateRoute exact path = \"/shop/account/orders\" component={ShopAccountOrders} />\n            <PrivateRoute exact path = \"/shop/account/profile\" component={ShopAccountProfile} />\n            <PrivateRoute exact path = \"/shop/account/subscriptions\" component={ShopAccountSubscriptions} />\n            <PrivateRoute exact path = \"/shop/account/subscriptions/:subscription_id/credits\" component={ShopAccountSubscriptionCredits} />\n            <PrivateRoute exact path = \"/shop/checkout/payment/:id\" component={ShopCheckoutPayment} />\n            <PrivateRoute exact path = \"/shop/checkout/complete/:id\" component={ShopCheckoutComplete} />\n            <Route exact path = \"/shop/classes\" component={ShopClassesSchedule} />\n            <PrivateRoute exact path = \"/shop/classes/book/:class_id/:date\" component={ShopClassBook} />\n            <PrivateRoute exact path = \"/shop/classes/booked/:class_id/:date\" component={ShopClassBooked} />\n            <Route exact path = \"/shop/classpasses\" component={ShopClasspasses} />\n            <PrivateRoute exact path = \"/shop/classpass/:id\" component={ShopClasspass} />\n            <PrivateRoute exact path = \"/shop/classpass/:id/:class_id/:date\" component={ShopClasspass} />\n            <Route exact path = \"/shop/contact\" component={ShopContact} />\n            <Route exact path = \"/shop/events\" component={ShopEvents} />\n            <Route exact path = \"/shop/events/:event_id\" component={ShopEvent} />\n            <PrivateRoute exact path = \"/shop/events/:event_id/ticket/:id\" component={ShopEventTicket} />\n            <Route exact path = \"/shop/subscriptions\" component={ShopSubscriptions} />\n            <PrivateRoute exact path = \"/shop/subscription/:id\" component={ShopSubscription} />\n            <PrivateRoute exact path = \"/shop/subscription/direct_debit_activated/:id\" component={ShopSubscriptionDirectDebitActivated} />\n\n            {/* Settings */}\n            <PrivateRoute exact path=\"/settings\" component={SettingsHome} />\n            <PrivateRoute exact path=\"/settings/about\" component={SettingsAbout} />\n            <PrivateRoute exact path=\"/settings/finance/bank_accounts\" component={SettingsFinanceBankAccounts} />\n            <PrivateRoute exact path=\"/settings/finance/currency\" component={SettingsFinanceCurrency} />\n            <PrivateRoute exact path=\"/settings/general/datetime\" component={SettingsGeneralDateTime} />\n            <PrivateRoute exact path=\"/settings/general/system\" component={SettingsGeneralSystem} />\n            <PrivateRoute exact path=\"/settings/integration/mailchimp\" component={SettingsIntegrationMailChimp} />\n            <PrivateRoute exact path=\"/settings/integration/mollie\" component={SettingsIntegrationMollie} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists\" component={SettingsMailMailChimpLists} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists/add\" component={SettingsMailMailChimpListAdd} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists/edit/:id\" component={SettingsMailMailChimpListEdit} />\n            <PrivateRoute exact path=\"/settings/mail/notifications\" component={SettingsMailNotifications} />\n            <PrivateRoute exact path=\"/settings/mail/notifications/add_account/:id\" component={SettingsMailNotificationsAddAccount} />\n            <PrivateRoute exact path=\"/settings/mail/templates\" component={SettingsMailTemplates} />\n            <PrivateRoute exact path=\"/settings/mail/templates/edit/:id\" component={SettingsMailTemplateEdit} />\n            <PrivateRoute exact path=\"/settings/shop/account_profiles\" component={SettingsShopAccountProfile} />\n            <PrivateRoute exact path=\"/settings/shop/features\" component={SettingsShopFeatures} />\n            <PrivateRoute exact path=\"/settings/workflow/class_booking\" component={SettingsWorkflowClassBooking} />\n            <PrivateRoute exact path=\"/settings/workflow/shop\" component={SettingsWorkflowShop} />\n            <PrivateRoute exact path=\"/settings/workflow/subscription_pauses\" component={SettingsWorkflowSubscriptionPauses} />\n            <PrivateRoute exact path=\"/settings/workflow/trial\" component={SettingsWorkflowTrial} />\n\n            {/* User */}\n            <PrivateRoute exact path=\"/user/password/change\" component={UserChangePassword} />\n            <Route exact path=\"/user/login\" component={UserLogin} />\n            <Route exact path=\"/user/login/required\" component={UserLoginRequired} />\n            <Route exact path=\"/user/logout\" component={UserLogout} />\n            <Route exact path=\"/user/session/expired\" component={UserSessionExpired} />\n            <Route exact path=\"/user/welcome\" component={UserWelcome} />\n            \n            <Route component={Error404} />\n          </Switch>\n        </HashRouter>\n      </OrganizationProvider>\n    </AppSettingsProvider>\n  )\n}\n\nexport default withTranslation()(AppRoot)\n\n","import React from 'react'\nimport {\n  ApolloClient,\n  ApolloLink,\n  from,\n  createHttpLink,\n  InMemoryCache,\n  ApolloProvider,\n  Observable,\n} from \"@apollo/client\";\n\nimport { relayStylePagination } from \"@apollo/client/utilities\";\nimport { onError } from \"@apollo/client/link/error\";\n// import { setContext } from '@apollo/client/link/context';\nimport Cookies from 'js-cookie';\n\nimport { TOKEN_REFRESH } from \"./queries/system/auth\"\n\nimport CSEC from \"./tools/cs_error_codes\"\nimport CSLS from \"./tools/cs_local_storage\"\nimport { CSAuth } from './tools/authentication'\n\n// Main app\nimport AppRoot from \"./AppRoot\"\n\n// Tabler css \nimport \"tabler-react/dist/Tabler.css\"\n// React-datepicker css\nimport \"react-datepicker/dist/react-datepicker.css\"\n// App css\nimport './App.css'\n\n\n// Register \"nl\" locale for react-datepicker\n// https://reactdatepicker.com/#example-17\n// import { registerLocale } from \"react-datepicker\"\n// import nl from 'date-fns/locale/nl';\n// registerLocale('nl', nl);\n\n// This allows <string>.trunc(x)\n// eslint-disable-next-line no-extend-native\nString.prototype.trunc = \n  function(n){\n      return this.substr(0, n-1) + (this.length > n ? '...' : '')\n  }\n\nfunction SetCurrentUrlAsNext() {\n  console.log(\"Storing current location as next in local storage\")\n  const currentUrl = window.location.href\n  const next = currentUrl.split(\"#\")[1]\n  console.log(next)\n  if ((next !== \"/user/login\") && (next !== \"/user/session/expired\") && (next !== \"/user/login/required\") && (next)) {\n    // This is a dirty hack to work around the following, a user refreshes the page but has an expired refreshtoken.\n    // This will produce an error on the orinal component, setting the correct next URL in localStorage. However, \n    // the code below will move the user to /user/login, which will also error at first, thus /user/login always\n    // gets set... we don't want that. This flow can be refactored at some point, but it works for now. \n    localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, next)\n  } \n}\n\n\nlet refreshingToken = false\n\nconst errorLink = onError(({ graphQLErrors, networkError, operation, forward, response }) => {\n  console.log(operation)\n  console.log(response)\n\n  let user_not_logged_in_within_graphql_errors = false\n  let user_not_logged_in_within_response_errors = false\n  \n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      )\n      // Catch broken promises (Check needed since django-graphene 3.0.0b8)\n      // Instead of adding a graphql error, there's a broken promise on an exception raised.\n      // if (message.includes(CSEC.USER_NOT_LOGGED_IN)) {\n      //   user_not_logged_in_within_graphql_errors = true\n      // }\n    });\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n\n  // request size check\n  if (graphQLErrors && graphQLErrors[0].message === \"Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.\") {\n    console.error('CHOSEN FILE EXCEEDS SIZE LIMIT')\n  }\n\n  // Catch errors in response\n  if (response) {\n    let i\n    for (i = 0; i < response.errors.length; i++) {\n      if (response.errors[i].extensions && response.errors[i].extensions.code === CSEC.USER_NOT_LOGGED_IN) {\n        user_not_logged_in_within_response_errors = true\n      }\n    }\n  }\n\n  // Catch expired tokens on refresh\n  if (user_not_logged_in_within_response_errors || user_not_logged_in_within_graphql_errors) {\n    console.log('Time to refresh the token')\n\n    // let authTokenExpired = false\n    // let refreshTokenExpired = false\n    // const tokenExp = localStorage.getItem(CSLS.AUTH_TOKEN_EXP)\n    // const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n\n    // if ((new Date() / 1000) >= tokenExp) {\n    //   authTokenExpired = true\n      \n    //   if ((new Date() / 1000) >= refreshTokenExp) {\n    //     refreshTokenExpired = true\n    //     // Remove any remaining token data\n    //     CSAuth.cleanup()\n    //     // Store current location, user has to login again\n    //     SetCurrentUrlAsNext()\n    //   }\n    // }\n    \n    // if (authTokenExpired && !refreshTokenExpired && !refreshingToken) {\n    if (!refreshingToken) {\n      console.log(\"refresh token... somehow...\")\n\n      return new Observable(observer => {\n        refreshingToken = true\n        client.mutate({\n          mutation: TOKEN_REFRESH,\n        })\n          .then(({ data }) => { \n            console.log(data)\n            CSAuth.updateTokenInfo(data.refreshToken)\n            setTimeout(function() {\n              refreshingToken = false\n            }, 100)\n          })\n          .then(() => {\n            const subscriber = {\n              next: observer.next.bind(observer),\n              error: observer.error.bind(observer),\n              complete: observer.complete.bind(observer)\n            };\n\n            // Retry last failed request\n            forward(operation).subscribe(subscriber);\n          })\n          .catch(error => {\n            // No refresh or client token available, we force user to login, after a cleanup\n            // console.log(\"Failed to refresh the token, onwards to the login page\")\n            console.error(\"Error refreshing token!\")\n            console.error(error);\n            observer.error(error);\n            refreshingToken = false\n            CSAuth.cleanup()\n            // Give this time time to save to the local storage\n            \n            SetCurrentUrlAsNext()\n            window.location.href = \"/#/user/login\"\n            setTimeout(function() {\n              window.location.reload()\n            }, 100)\n          });\n      })\n    // } else if (refreshTokenExpired) {\n    //   console.log(\"Refresh token expired\")\n    //   window.location.href = \"#/user/session/expired\"\n    //   window.location.reload()\n    } else if (refreshingToken) {\n      console.log(\"Token refreshing...\")\n    }\n  }\n})\n\n\n   \n// // Fetch CSRF Token\n// let csrftoken\n// async function getCsrfToken() {\n//   if (csrftoken) return csrftoken\n\n//   csrftoken = await fetch('/d/csrf/')\n//     .then(response => response.json())\n//     .then(data => data.csrfToken)\n\n//   return await csrftoken\n// }\n\n// Fetch CSRF Token from Cookie\nlet csrftoken\nasync function getCsrfToken() {\n  if (csrftoken) return csrftoken\n\n  await fetch('/d/csrf/')\n    .then(response => response.json())\n\n  // For troubleshooting\n  // const result =  await fetch('/d/csrf/')\n  //   .then(response => response.json())\n  // console.log(reuslt)\n\n  csrftoken = Cookies.get('csrftoken');\n  \n  return await csrftoken\n}\n\nconst httpLink = createHttpLink({\n  uri: '/d/graphql/',\n  credentials: 'same-origin',\n  // request: async (operation) => {\n  //   const csrftoken = await getCsrfToken();\n  //   Cookies.set('csrftoken', csrftoken);\n  //   // set the cookie 'csrftoken'\n  //   operation.setContext({\n  //       // set the 'X-CSRFToken' header to the csrftoken\n  //       headers: {\n  //           'X-CSRFToken': csrftoken,\n  //       },\n  //   })}\n});\n\nconst csrfMiddleware = new ApolloLink(async (operation, forward) => {\n  const csrftoken = await getCsrfToken();\n  Cookies.set('csrftoken', csrftoken);\n\n  operation.setContext({\n    // set the 'X-CSRFToken' header to the csrftoken\n    headers: {\n        'X-CSRFToken': csrftoken,\n    },\n  })\n\n  return forward(operation)\n})\n\n// const authLink = setContext(async (request, { headers }) => {\n//   // get the authentication token from local storage if it exists\n//   // const token = localStorage.getItem(CSLS.AUTH_TOKEN)\n//   // return the headers to the context so httpLink can read them\n//   return {\n//     headers: {\n//       ...headers,\n//       // Authorization: token ? `JWT ${token}`: ''\n//     }\n//   }\n// });\n\n// set up ApolloClient\nconst client = new ApolloClient({\n  link: from([csrfMiddleware, errorLink, httpLink]),\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          accounts: relayStylePagination(),\n        },\n      },\n    },\n  }),\n})\n\n\nfunction App() {\n  // Register \"NL\" locale for moment\n  // moment.locale('en-US')\n\n  return (\n    <ApolloProvider client={client}>\n      <AppRoot />\n    </ApolloProvider>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './i18n'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}