{"version":3,"sources":["i18n.js","queries/system/auth.js","tools/cs_error_codes.js","tools/cs_local_storage.js","tools/authentication.js","components/settings/general/date_time/queries.js","components/organization/organization/queries.js","components/ui/CSStandalonePageWide.jsx","components/ui/CSStandalonePageLoader.jsx","components/context/AppSettingsContext.js","components/context/OrganizationContext.js","components/settings/shop/features/queries.js","components/SiteWrapperShop.js","components/shop/ShopCheckoutProgress.jsx","components/ui/ButtonBack.jsx","components/shop/ShopBase.jsx","components/shop/cookie_policy/CookiePolicyBase.jsx","components/shop/cookie_policy/CookiePolicy.jsx","components/home/home/queries.js","queries/system/get_user.js","tools/user_tools.js","components/SiteWrapper.js","components/home/home/HomeHomeBase.jsx","components/home/home/HomeHome.jsx","components/automation/home/AutomationHomeItemButton.jsx","components/automation/home/AutomationHome.jsx","components/general/ContentCard.jsx","components/automation/queries.js","components/automation/AutomationBack.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditsBase.jsx","components/automation/AutomationTaskResultStatus.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCredits.jsx","components/automation/account/subscription/credits/yupSchema.js","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditForm.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditAdd.jsx","components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpirationBase.jsx","components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpiration.jsx","components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpirationAdd.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesBase.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoices.jsx","components/automation/account/subscription/invoices/yupSchema.js","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesForm.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesAdd.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionBase.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollections.jsx","components/automation/account/subscription/mollie_collection/yupSchema.js","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionForm.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionAdd.jsx","components/ui/HomeItemButton.jsx","components/HasPermissionWrapper.js","components/finance/home/FinanceHome.jsx","components/finance/costcenters/queries.js","components/ui/ButtonAdd.jsx","components/finance/costcenters/FinanceCostCentersBase.jsx","components/finance/costcenters/FinanceCostCenters.jsx","components/finance/costcenters/yupSchema.js","components/finance/costcenters/FinanceCostCenterAdd.jsx","components/finance/costcenters/FinanceCostCenterEdit.jsx","components/finance/glaccounts/queries.js","components/finance/glaccounts/FinanceGLAccountsBase.jsx","components/finance/glaccounts/FinanceGLAccounts.jsx","components/finance/glaccounts/yupSchema.js","components/finance/glaccounts/FinanceGLAccountAdd.jsx","components/finance/glaccounts/FinanceGLAccountEdit.jsx","components/finance/invoices/tools.js","components/ui/ButtonExport.jsx","components/finance/invoices/FinanceInvoicesFilter.jsx","components/finance/invoices/FinanceInvoicesBase.jsx","components/ui/FinanceInvoiceStatus.jsx","components/finance/invoices/queries.js","tools/confirm_delete.js","components/finance/invoices/FinanceInvoices.jsx","tools/refresh_token_and_open_export_link.js","tools/date_tools.js","components/finance/invoices/export/yupSchema.js","components/ui/CSDatePicker.jsx","components/ui/ButtonFormCancel.jsx","components/finance/invoices/export/FinanceInvoicesExportForm.jsx","components/finance/invoices/export/FinanceInvoicesExport.jsx","components/finance/invoices/edit/FinanceInvoiceEditBase.jsx","components/finance/invoices/edit/FinanceInvoiceItemAdd.jsx","components/finance/invoices/edit/FinanceInvoiceItemDelete.jsx","components/finance/invoices/edit/FinanceInvoiceItemEditForm.jsx","components/finance/invoices/edit/FinanceInvoiceItemEdit.jsx","components/finance/invoices/edit/FinanceInvoiceEditItems.jsx","plugin_config/tinymce.js","components/finance/invoices/edit/FinanceInvoiceEditTermsForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditFooterForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditNoteForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditAdditional.jsx","components/finance/invoices/edit/FinanceInvoiceEditBalance.jsx","components/finance/invoices/edit/FinanceInvoiceEditOptionsForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditOptions.jsx","components/finance/invoices/edit/FinanceInvoiceEditOrganization.jsx","components/finance/invoices/edit/FinanceInvoiceEditSummaryForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditSummary.jsx","components/finance/invoices/edit/FinanceInvoiceEditToForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditTo.jsx","components/finance/invoices/edit/FinanceInvoiceEditPaymentDelete.jsx","components/finance/invoices/edit/FinanceInvoiceEditPayments.jsx","components/finance/invoices/edit/FinanceInvoiceEdit.jsx","components/ui/BadgeBoolean.jsx","components/finance/invoices/groups/queries.js","components/finance/invoices/groups/FinanceInvoiceGroupsBase.jsx","components/finance/invoices/groups/FinanceInvoiceGroups.jsx","components/finance/invoices/groups/yupSchema.js","components/finance/invoices/groups/FinanceInvoiceGroupForm.jsx","components/finance/invoices/groups/FinanceInvoiceGroupAdd.jsx","components/finance/invoices/groups/FinanceInvoiceGroupEdit.jsx","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaultsBase.jsx","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaultForm.jsx","components/finance/invoices/groups/defaults/yupSchema.js","components/finance/invoices/groups/defaults/queries.js","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaults.jsx","components/finance/invoices/payments/FinanceInvoicePaymentBase.jsx","components/finance/invoices/payments/FinanceInvoicePaymentForm.jsx","components/finance/invoices/payments/FinanceInvoicePaymentAdd.jsx","components/finance/invoices/payments/queries.js","components/finance/invoices/payments/FinanceInvoicePaymentEdit.jsx","components/finance/orders/tools.js","components/finance/orders/FinanceOrdersFilter.jsx","components/finance/orders/FinanceOrdersBase.jsx","components/finance/orders/FinanceOrderStatus.jsx","components/finance/orders/queries.js","components/finance/orders/FinanceOrderDelete.jsx","components/finance/orders/FinanceOrders.jsx","components/finance/payment_batches/tools.js","components/ui/BadgeFinancePaymentBatchStatus.jsx","components/finance/payment_batches/FinancePaymentBatchesBase.jsx","components/finance/payment_batches/queries.js","components/finance/payment_batches/FinancePaymentBatches.jsx","components/finance/payment_batches/FinancePaymentBatchAddWhat.jsx","components/ui/FinancePaymentBatchCategory.jsx","components/finance/payment_batches/FinancePaymentBatchViewBase.jsx","components/finance/payment_batches/FinancePaymentBatchView.jsx","components/finance/payment_batches/yupSchema.js","components/finance/payment_batches/FinancePaymentCollectionBatchForm.jsx","components/finance/payment_batches/FinancePaymentCollectionBatchAdd.jsx","components/finance/payment_batches/FinancePaymentCollectionBatchEdit.jsx","components/finance/payment_batch_categories/tools.js","components/finance/payment_batch_categories/FinancePaymentBatchCategoriesBase.jsx","components/finance/payment_batch_categories/queries.js","components/finance/payment_batch_categories/FinancePaymentBatchCategories.jsx","components/finance/payment_batch_categories/FinancePaymentBatchCategoryForm.jsx","components/finance/payment_batch_categories/yupSchema.js","components/finance/payment_batch_categories/FinancePaymentBatchCategoryAdd.jsx","components/finance/payment_batch_categories/FinancePaymentBatchCategoryEdit.jsx","components/finance/orders/edit/queries.js","components/finance/orders/edit/FinanceOrderEditForm.jsx","components/finance/orders/edit/FinanceOrderEditBase.jsx","components/finance/orders/edit/FinanceOrderEdit.jsx","components/finance/payment_methods/FinancePaymentMethodsBase.jsx","components/finance/payment_methods/queries.js","components/finance/payment_methods/FinancePaymentMethods.jsx","components/finance/payment_methods/yupSchema.js","components/finance/payment_methods/FinancePaymentMethodForm.jsx","components/finance/payment_methods/FinancePaymentMethodAdd.jsx","components/finance/payment_methods/FinancePaymentMethodEdit.jsx","components/finance/taxrates/FinanceTaxRatesBase.jsx","components/finance/taxrates/queries.js","components/finance/taxrates/FinanceTaxRates.jsx","components/finance/taxrates/yupSchema.js","components/finance/taxrates/FinanceTaxRateAdd.jsx","components/finance/taxrates/FinanceTaxRateEdit.jsx","components/finance/taxrates_summary/yupSchema.js","components/finance/taxrates_summary/FinanceTaxRatesSummaryFilter.jsx","components/finance/taxrates_summary/FinanceTaxRatesSummaryBase.jsx","components/finance/taxrates_summary/queries.js","components/finance/taxrates_summary/FinanceTaxRatesSummary.jsx","components/insight/home/InsightHome.jsx","components/insight/classpasses/queries.js","components/insight/InsightBackHome.jsx","components/insight/classpasses/InsightClasspassesBase.jsx","components/insight/classpasses/InsightClasspasses.jsx","components/insight/revenue/queries.js","components/insight/revenue/InsightRevenueBase.jsx","components/insight/revenue/InsightRevenueDisplay.jsx","components/insight/revenue/InsightRevenue.jsx","components/insight/subscriptions/queries.js","components/insight/subscriptions/InsightSubscriptionsBase.jsx","components/insight/subscriptions/InsightSubscriptions.jsx","components/insight/trialpasses/queries.js","components/insight/trialpasses/InsightTrialpassesFilter.jsx","components/insight/trialpasses/tools.js","components/insight/trialpasses/InsightTrialpassesBase.jsx","components/insight/trialpasses/InsightTrialpasses.jsx","components/organization/home/OrganizationHome.jsx","components/organization/organization/yupSchema.js","components/organization/organization/OrganizationForm.jsx","components/organization/organization/OrganizationEditBase.jsx","components/organization/organization/OrganizationEdit.jsx","components/organization/organization/branding/OrganizationBrandingBase.jsx","components/organization/organization/branding/OrganizationBranding.jsx","tools/custom_file_input_label_style.js","components/organization/organization/branding/OrganizationBrandingEditForm.jsx","components/organization/organization/branding/OrganizationBrandingEdit.jsx","components/organization/announcements/OrganizationAnnouncementsBase.jsx","components/organization/announcements/queries.js","components/organization/announcements/OrganizationAnnouncements.jsx","components/organization/announcements/yupSchema.js","components/organization/announcements/OrganizationAnnouncementForm.jsx","components/organization/announcements/OrganizationAnnouncementAdd.jsx","components/organization/announcements/OrganizationAnnouncementEdit.jsx","components/organization/appointment_categories/appointments/queries.js","components/organization/appointment_categories/appointments/OrganizationAppointments.jsx","components/organization/appointment_categories/appointments/yupSchema.js","components/organization/appointment_categories/appointments/OrganizationAppointmentForm.jsx","components/organization/appointment_categories/appointments/OrganizationAppointmentAdd.jsx","components/organization/appointment_categories/appointments/OrganizationAppointmentEdit.jsx","components/organization/appointment_categories/queries.js","components/organization/appointment_categories/OrganizationAppointmentCategories.jsx","components/organization/appointment_categories/OrganizationAppointmentCategoryForm.jsx","components/organization/appointment_categories/yupSchema.js","components/organization/appointment_categories/OrganizationAppointmentCategoryAdd.jsx","components/organization/appointment_categories/OrganizationAppointmentCategoryEdit.jsx","components/organization/appointment_categories/appointments/prices/queries.js","components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPrices.jsx","components/organization/appointment_categories/appointments/prices/yupSchema.js","components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceForm.jsx","components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceAdd.jsx","components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceEdit.jsx","components/organization/classpasses/OrganizationClasspassesBase.jsx","components/organization/classpasses/queries.js","components/organization/classpasses/OrganizationClasspasses.jsx","components/organization/classpasses/yupSchema.js","components/organization/classpasses/OrganizationClasspassForm.jsx","components/organization/classpasses/OrganizationClasspassAdd.jsx","components/organization/classpasses/OrganizationClasspassEdit.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupsBase.jsx","components/organization/classpasses_groups/queries.js","components/organization/classpasses_groups/OrganizationClasspassesGroups.jsx","components/organization/classpasses_groups/yupSchema.js","components/organization/classpasses_groups/OrganizationClasspassesGroupAdd.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupEdit.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupEditPasses.jsx","components/organization/classtypes/tools.js","components/organization/classtypes/queries.js","components/organization/classtypes/OrganizationClasstypesBase.jsx","components/organization/classtypes/OrganizationClasstypes.jsx","components/organization/classtypes/yupSchema.js","components/organization/classtypes/OrganizationClasstypeAdd.jsx","components/organization/classtypes/OrganizationClasstypeEdit.jsx","components/organization/classtypes/OrganizationClasstypeEditImage.jsx","components/organization/discovery/queries.js","components/organization/discovery/OrganizationDiscoveriesBase.jsx","components/organization/discovery/OrganizationDiscoveries.jsx","components/organization/discovery/yupSchema.js","components/organization/discovery/OrganizationDiscoveryAdd.jsx","components/organization/discovery/OrganizationDiscoveryEdit.jsx","components/organization/documents/OrganizationDocuments.jsx","components/ui/ISODateString.jsx","components/ui/FileDownloadTableButton.jsx","components/organization/documents/OrganizationDocumentsBase.jsx","components/organization/documents/queries.js","components/organization/documents/OrganizationDocumentDelete.jsx","components/organization/documents/tools.js","components/organization/documents/OrganizationListDocuments.jsx","components/organization/documents/OrganizationDocumentAdd.jsx","components/organization/documents/OrganizationDocumentEdit.jsx","components/organization/holidays/OrganizationHolidaysBase.jsx","components/organization/holidays/queries.js","components/organization/holidays/OrganizationHolidays.jsx","components/organization/holidays/yupSchema.js","components/organization/holidays/OrganizationHolidayForm.jsx","components/organization/holidays/OrganizationHolidayAdd.jsx","components/organization/holidays/OrganizationHolidayEdit.jsx","components/organization/holidays/OrganizationHolidayEditLocations.jsx","components/organization/languages/OrganizationLanguagesBase.jsx","components/organization/languages/queries.js","components/organization/languages/OrganizationLanguages.jsx","components/organization/languages/yupSchema.js","components/organization/languages/OrganizationLanguageForm.jsx","components/organization/languages/OrganizationLanguageAdd.jsx","components/organization/languages/OrganizationLanguageEdit.jsx","components/organization/locations/queries.js","components/organization/locations/OrganizationLocationsBase.jsx","components/organization/locations/OrganizationLocations.jsx","components/organization/locations/yupSchema.js","components/organization/locations/OrganizationLocationAdd.jsx","components/organization/locations/OrganizationLocationEdit.jsx","components/organization/locations/rooms/queries.js","components/organization/locations/rooms/OrganizationLocationRoomsBase.jsx","components/organization/locations/rooms/OrganizationLocationRooms.jsx","components/organization/locations/rooms/yupSchema.js","components/organization/locations/rooms/OrganizationLocationRoomForm.jsx","components/organization/locations/rooms/OrganizationLocationRoomAdd.jsx","components/organization/locations/rooms/OrganizationLocationRoomEdit.jsx","components/organization/levels/OrganizationLevelsBase.jsx","components/organization/levels/queries.js","components/organization/levels/OrganizationLevels.jsx","components/organization/levels/yupSchema.js","components/organization/levels/OrganizationLevelForm.jsx","components/organization/levels/OrganizationLevelAdd.jsx","components/organization/levels/OrganizationLevelEdit.jsx","components/organization/shifts/OrganizationShiftsBase.jsx","components/organization/shifts/queries.js","components/organization/shifts/OrganizationShifts.jsx","components/organization/shifts/yupSchema.js","components/organization/shifts/OrganizationShiftForm.jsx","components/organization/shifts/OrganizationShiftAdd.jsx","components/organization/shifts/OrganizationShiftEdit.jsx","components/organization/subscriptions/OrganizationSubscriptionsBase.jsx","components/organization/subscriptions/queries.js","components/organization/subscriptions/OrganizationSubscriptions.jsx","components/organization/subscriptions/yupSchema.js","components/organization/subscriptions/OrganizationSubscriptionForm.jsx","components/organization/subscriptions/OrganizationSubscriptionAdd.jsx","components/organization/subscriptions/OrganizationSubscriptionEdit.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupsBase.jsx","components/organization/subscriptions_groups/queries.js","components/organization/subscriptions_groups/OrganizationSubscriptionsGroups.jsx","components/organization/subscriptions_groups/yupSchema.js","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupForm.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupAdd.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEdit.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEditSubscriptions.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionsPricesBase.jsx","components/organization/subscriptions/prices/queries.js","components/ui/ButtonDelete.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionsPrices.jsx","components/organization/subscriptions/prices/yupSchema.js","components/ui/ButtonFormSubmit.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceForm.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceAdd.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceEdit.jsx","components/relations/home/RelationsHome.jsx","components/general/InputSearch.jsx","components/relations/accounts/tools.js","components/relations/accounts/RelationsAccountsBase.jsx","components/relations/accounts/queries.js","components/relations/accounts/RelationsAccounts.jsx","components/relations/accounts/yupSchema.js","components/relations/accounts/RelationsAccountForm.jsx","components/relations/accounts/RelationsAccountAdd.jsx","tools/iso_country_codes.js","components/relations/accounts/RelationsAccountProfileForm.jsx","components/ui/ProfileCardSmall.jsx","components/relations/accounts/ProfileMenu.jsx","components/relations/accounts/RelationsAccountProfileBase.jsx","components/relations/accounts/RelationsAccountProfile.jsx","components/relations/accounts/RelationsAccountProfileImageForm.jsx","components/relations/accounts/RelationsAccountProfileImage.jsx","components/relations/accounts/RelationsAccountsBack.jsx","components/ui/DocumentType.jsx","components/relations/accounts/accepted_documents/queries.js","components/relations/accounts/accepted_documents/AcceptedDocuments.jsx","components/relations/accounts/bank_accounts/queries.js","components/relations/accounts/bank_accounts/mandates/queries.js","components/relations/accounts/bank_accounts/RelationsAccountBankAccountBase.jsx","components/relations/accounts/bank_accounts/RelationsAccountBankAccountForm.jsx","components/relations/accounts/bank_accounts/RelationsAccountBankAccount.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateForm.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateAdd.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateEdit.jsx","components/ui/BadgeBookingStatus.jsx","components/relations/accounts/classes/AccountClassesBase.jsx","components/relations/accounts/classes/queries.js","components/schedule/classes/class/attendance/queries.js","components/relations/accounts/classes/AccountClassDelete.jsx","components/relations/accounts/classes/AccountClasses.jsx","components/relations/accounts/classpasses/queries.js","components/relations/accounts/classpasses/AccountClasspasses.jsx","components/relations/accounts/classpasses/yupSchema.js","components/relations/accounts/classpasses/AccountClasspassForm.jsx","components/relations/accounts/classpasses/AccountClasspassAdd.jsx","components/relations/accounts/classpasses/AccountClasspassEdit.jsx","components/relations/accounts/classpass_classes/queries.js","components/relations/accounts/classpass_classes/AccountClasspassClasses.jsx","components/relations/accounts/documents/queries.js","components/ui/FileProtectedDownloadTableButton.jsx","components/relations/accounts/documents/AccountDocuments.jsx","components/relations/accounts/documents/AccountDocumentForm.jsx","components/relations/accounts/documents/AccountDocumentAdd.jsx","components/relations/accounts/documents/yupSchema.js","components/relations/accounts/documents/AccountDocumentFormEdit.jsx","components/relations/accounts/documents/AccountDocumentEdit.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemsBase.jsx","components/relations/accounts/finance_payment_batch_category_items/queries.js","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItems.jsx","components/relations/accounts/finance_payment_batch_category_items/yupSchema.js","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemsForm.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemAdd.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemEdit.jsx","components/relations/accounts/invoices/queries.js","components/relations/accounts/invoices/AccountInvoicesBase.jsx","components/relations/accounts/invoices/AccountInvoices.jsx","components/relations/accounts/invoices/AccountInvoiceAddForm.jsx","components/relations/accounts/invoices/AccountInvoiceAdd.jsx","components/relations/accounts/memberships/queries.js","components/relations/accounts/memberships/AccountMemberships.jsx","components/relations/accounts/memberships/yupSchema.js","components/relations/accounts/memberships/AccountMembershipForm.jsx","components/relations/accounts/memberships/AccountMembershipAdd.jsx","components/relations/accounts/memberships/AccountMembershipEdit.jsx","components/general/LoadMoreOnBottomScroll.jsx","components/relations/accounts/notes/AccountNotesBase.jsx","components/relations/accounts/notes/queries.js","components/relations/accounts/notes/tools.js","components/relations/accounts/notes/AccountNotes.jsx","components/relations/accounts/notes/AccountNoteForm.jsx","components/relations/accounts/notes/AccountNoteAdd.jsx","components/relations/accounts/notes/AccountNoteEdit.jsx","components/relations/accounts/orders/AccountOrdersBase.jsx","components/relations/accounts/orders/queries.js","components/relations/accounts/orders/AccountOrderDelete.jsx","components/relations/accounts/orders/AccountOrders.jsx","queries/accounts/get_account.js","components/relations/accounts/schedule_event_tickets/AccountScheduleEventTicketsBase.jsx","components/schedule/events/tickets/customers/queries.js","components/relations/accounts/schedule_event_tickets/queries.js","components/relations/accounts/schedule_event_tickets/AccountScheduleEventTickets.jsx","components/relations/accounts/subscriptions/queries.js","components/relations/accounts/subscriptions/AccountSubscriptions.jsx","components/relations/accounts/subscriptions/yupSchema.js","components/relations/accounts/subscriptions/AccountSubscriptionForm.jsx","components/relations/accounts/subscriptions/AccountSubscriptionAdd.jsx","components/ui/CardTabs.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditTabs.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditBaseBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEdit.jsx","components/relations/accounts/subscriptions/edit/alt_prices/queries.js","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditListBaseBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditListBase.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceDelete.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPrices.jsx","components/relations/accounts/subscriptions/edit/alt_prices/yupSchema.js","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceBase.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceForm.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceAdd.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceEdit.jsx","components/relations/accounts/subscriptions/edit/blocks/queries.js","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockDelete.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlocks.jsx","components/relations/accounts/subscriptions/edit/blocks/yupSchema.js","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockBase.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockForm.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockAdd.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockEdit.jsx","components/ui/SubscriptionCreditsMutationType.jsx","components/relations/accounts/subscriptions/edit/credits/queries.js","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditDelete.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCredits.jsx","components/relations/accounts/subscriptions/edit/credits/yupSchema.js","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditBase.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditForm.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAdd.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEdit.jsx","components/relations/accounts/subscriptions/edit/invoices/queries.js","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceDelete.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoices.jsx","components/relations/accounts/subscriptions/edit/invoices/yupSchema.js","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAddBase.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAddForm.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAdd.jsx","components/relations/accounts/subscriptions/edit/pauses/queries.js","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseDelete.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauses.jsx","components/relations/accounts/subscriptions/edit/pauses/yupSchema.js","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseBase.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseForm.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseAdd.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseEdit.jsx","components/relations/accounts/instructor_profile/queries.js","components/relations/accounts/instructor_profile/yupSchema.js","components/relations/accounts/instructor_profile/RelationsAccountInstructorProfileForm.jsx","components/relations/accounts/instructor_profile/RelationsAccountInstructorProfile.jsx","components/relations/b2b/tools.js","components/relations/b2b/RelationsB2BBase.jsx","components/relations/b2b/queries.js","components/relations/b2b/RelationsB2B.jsx","components/relations/b2b/RelationB2BAddForm.jsx","components/relations/b2b/RelationsB2BAdd.jsx","components/relations/b2b/RelationsB2BEditBase.jsx","components/relations/b2b/RelationsB2BEditForm.jsx","components/relations/b2b/RelationsB2BEdit.jsx","components/schedule/home/ScheduleHome.jsx","components/schedule/appointments/tools.js","components/schedule/appointments/ScheduleAppointmentsFilter.jsx","components/schedule/appointments/queries.js","components/schedule/appointments/ScheduleAppointments.jsx","components/schedule/appointments/yupSchema.js","components/ui/CSTimePicker.jsx","components/schedule/appointments/all/AppointmentEditMenu.jsx","components/schedule/appointments/ScheduleAppointmentForm.jsx","components/schedule/appointments/ScheduleAppointmentAdd.jsx","components/schedule/appointments/all/AppointmentEditBack.jsx","components/schedule/appointments/all/AppointmentEditBase.jsx","components/schedule/appointments/all/tools.js","components/schedule/appointments/all/edit/ScheduleAppointmentEditAll.jsx","components/ui/StatusIcon.jsx","components/schedule/classes/tools.js","components/schedule/classes/ScheduleClassesFilter.jsx","components/schedule/classes/ScheduleClassesBase.jsx","components/schedule/classes/queries.js","components/schedule/classes/ScheduleClasses.jsx","components/schedule/classes/yupSchema.js","components/schedule/classes/ScheduleClassForm.jsx","components/schedule/classes/ScheduleClassAddBase.jsx","components/schedule/classes/ScheduleClassAdd.jsx","components/schedule/classes/all/edit/queries.js","components/schedule/classes/all/ClassEditMenu.jsx","components/schedule/classes/all/ClassEditBaseBase.jsx","components/schedule/classes/all/tools.js","components/schedule/classes/all/ClassEditBase.jsx","components/schedule/classes/all/edit/ScheduleClassEditAll.jsx","components/schedule/classes/all/enrollments/tools.js","components/schedule/classes/all/ClassEditBack.jsx","components/schedule/classes/all/enrollments/queries.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentDelete.jsx","components/ui/ButtonEdit.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollments.jsx","queries/accounts/account_search_queries.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentsSearch.jsx","components/schedule/classes/all/enrollments/yupSchema.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentForm.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentAdd.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentBack.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentEdit.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollSubscriptions.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentOptions.jsx","components/ui/FormHelp.jsx","components/schedule/classes/all/classpasses/ScheduleClassClasspassForm.jsx","components/schedule/classes/all/classpasses/yupSchema.js","components/schedule/classes/all/classpasses/queries.js","components/schedule/classes/all/classpasses/ScheduleClassClasspasses.jsx","components/schedule/classes/all/subscriptions/ScheduleClassSubscriptionForm.jsx","components/schedule/classes/all/subscriptions/yupSchema.js","components/schedule/classes/all/subscriptions/queries.js","components/schedule/classes/all/subscriptions/ScheduleClassSubscriptions.jsx","components/schedule/classes/all/instructors/queries.js","components/schedule/classes/all/instructors/ScheduleClassInstructors.jsx","components/schedule/classes/all/instructors/yupSchema.js","components/schedule/classes/all/instructors/ScheduleClassInstructorForm.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorBack.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorAdd.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorEdit.jsx","components/schedule/classes/class/attendance/tools.js","components/schedule/classes/class/attendance/ScheduleClassAttendanceSearch.jsx","components/schedule/classes/class/ScheduleClassBack.jsx","components/schedule/classes/class/ClassMenu.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceBaseBase.jsx","components/schedule/classes/class/tools.js","components/schedule/classes/class/attendance/ScheduleClassAttendanceBase.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceDelete.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendance.jsx","components/schedule/classes/class/ScheduleClassEditBase.jsx","components/schedule/classes/class/attendance_chart/queries.js","components/schedule/classes/class/attendance_chart/ScheduleClassAttendanceChart.jsx","components/schedule/classes/class/book/ScheduleClassBookBack.jsx","components/schedule/classes/class/book/queries.js","components/schedule/classes/class/book/tools.js","components/schedule/classes/class/book/ScheduleClassBookClasspassBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookClasspasses.jsx","components/schedule/classes/class/book/ScheduleClassBookSubscriptionBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookSubscriptions.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceDropin.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceTrial.jsx","components/schedule/classes/class/book/ScheduleClassBook.jsx","components/schedule/classes/class/edit/queries.js","components/schedule/classes/class/edit/yupSchema.js","components/schedule/classes/class/edit/ScheduleClassEditForm.jsx","components/schedule/classes/class/edit/ScheduleClassWeeklyOTCDelete.jsx","components/schedule/classes/class/edit/ScheduleClassEdit.jsx","components/schedule/classes/all/prices/queries.js","components/schedule/classes/all/prices/ScheduleClassPriceDelete.jsx","components/schedule/classes/all/prices/ScheduleClassPrices.jsx","components/schedule/classes/all/prices/ScheduleClassPriceForm.jsx","components/schedule/classes/all/prices/ScheduleClassPriceBack.jsx","components/schedule/classes/all/prices/ScheduleClassPriceAdd.jsx","components/schedule/classes/all/prices/ScheduleClassPriceEdit.jsx","components/schedule/events/ScheduleEventsBase.jsx","components/schedule/events/queries.js","components/schedule/events/tools.js","tools/confirm_archive.js","components/ui/ButtonArchive.jsx","tools/confirm_unarchive.js","components/ui/ButtonUnArchive.jsx","components/schedule/events/ScheduleEventArchive.jsx","components/schedule/events/ScheduleEvents.jsx","components/schedule/events/yupSchema.js","components/schedule/events/ScheduleEventForm.jsx","components/schedule/events/ScheduleEventAdd.jsx","components/schedule/events/edit/ScheduleEventEditMenu.jsx","components/schedule/events/edit/ScheduleEventEditBaseBase.jsx","components/schedule/events/edit/ScheduleEventEditBase.jsx","components/schedule/events/edit/ScheduleEventEdit.jsx","components/schedule/events/activities/queries.js","components/schedule/events/edit/ScheduleEventEditListBase.jsx","components/schedule/events/activities/ScheduleEventActivityDelete.jsx","components/schedule/events/activities/ScheduleEventActivities.jsx","components/schedule/events/activities/yupSchema.js","components/schedule/events/activities/ScheduleEventActivityBack.jsx","components/schedule/events/activities/ScheduleEventActivityForm.jsx","components/schedule/events/activities/ScheduleEventActivityAdd.jsx","components/schedule/events/activities/ScheduleEventActivityTabs.jsx","components/schedule/events/activities/ScheduleEventActivityEditBase.jsx","components/schedule/events/activities/ScheduleEventActivityEdit.jsx","components/schedule/events/activities/attendance/queries.js","components/schedule/events/activities/attendance/ScheduleEventActivityAttendanceBase.jsx","components/schedule/events/activities/attendance/ScheduleEventActivityAttendance.jsx","components/schedule/events/earlybirds/queries.js","components/schedule/events/earlybirds/ScheduleEventEarlybirdDelete.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirds.jsx","components/schedule/events/earlybirds/yupSchema.js","components/schedule/events/earlybirds/ScheduleEventEarlybirdForm.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdAdd.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdEdit.jsx","components/schedule/events/media/queries.js","components/schedule/events/media/ScheduleEventMediaDelete.jsx","components/schedule/events/media/ScheduleEventMedia.jsx","components/schedule/events/media/yupSchema.js","components/schedule/events/media/ScheduleEventMediaBack.jsx","components/schedule/events/media/ScheduleEventMediaForm.jsx","components/schedule/events/media/ScheduleEventMediaAdd.jsx","components/schedule/events/media/ScheduleEventMediaEditBase.jsx","components/schedule/events/media/ScheduleEventMediaEdit.jsx","components/schedule/events/tickets/queries.js","components/schedule/events/tickets/ScheduleEventTicketDelete.jsx","components/ui/BadgeSoldOut.jsx","components/schedule/events/tickets/ScheduleEventTickets.jsx","components/schedule/events/tickets/yupSchema.js","components/schedule/events/tickets/ScheduleEventTicketBack.jsx","components/schedule/events/tickets/ScheduleEventTicketForm.jsx","components/schedule/events/tickets/ScheduleEventTicketAdd.jsx","components/schedule/events/tickets/ScheduleEventTicketTabs.jsx","components/schedule/events/tickets/ScheduleEventTicketEditBase.jsx","components/schedule/events/tickets/ScheduleEventTicketEdit.jsx","components/schedule/events/tickets/activities/queries.js","components/schedule/events/tickets/activities/yupSchema.js","components/schedule/events/tickets/activities/ScheduleEventTicketEditActivityForm.jsx","components/schedule/events/tickets/activities/ScheduleEventTicketEditActivities.jsx","components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomers.jsx","components/schedule/events/tickets/customers/tools.js","components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomersSearch.jsx","components/schedule/shifts/tools.js","components/schedule/shifts/ScheduleShiftsFilter.jsx","components/schedule/shifts/ScheduleShiftsBase.jsx","components/schedule/shifts/queries.js","components/schedule/shifts/ScheduleShifts.jsx","components/schedule/shifts/yupSchema.js","components/schedule/shifts/ScheduleShiftForm.jsx","components/schedule/shifts/ScheduleShiftAddBase.jsx","components/schedule/shifts/ScheduleShiftAdd.jsx","components/schedule/shifts/all/edit/queries.js","components/schedule/shifts/all/ShiftEditBack.jsx","components/schedule/shifts/all/ShiftEditMenu.jsx","components/schedule/shifts/all/ShiftEditBaseBase.jsx","components/schedule/shifts/all/ShiftEditBase.jsx","components/schedule/shifts/all/tools.js","components/schedule/shifts/all/edit/ScheduleShiftEditAll.jsx","components/schedule/shifts/shift/edit/queries.js","components/schedule/shifts/shift/edit/ScheduleShiftEditForm.jsx","components/schedule/shifts/shift/ScheduleShiftBack.jsx","components/schedule/shifts/shift/ScheduleShiftEditBase.jsx","components/schedule/shifts/shift/edit/ScheduleShiftWeeklyOTCDelete.jsx","components/schedule/shifts/shift/edit/ScheduleShiftEdit.jsx","components/schedule/shifts/shift/tools.js","components/schedule/shifts/all/employees/queries.js","components/schedule/shifts/all/employees/ScheduleShiftEmployees.jsx","components/schedule/shifts/all/employees/yupSchema.js","components/schedule/shifts/all/employees/ScheduleShiftEmployeeForm.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeBack.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeAdd.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeEdit.jsx","components/SiteWrapperSelfCheckin.js","components/selfcheckin/SelfCheckinBase.jsx","components/selfcheckin/Checkin/queries.js","components/selfcheckin/Checkin/tools.js","components/selfcheckin/Checkin/Checkin.jsx","components/selfcheckin/BookingOptions/queries.js","components/selfcheckin/BookingOptions/BookingOptions.jsx","components/selfcheckin/Locations/queries.js","components/selfcheckin/Locations/Locations.jsx","components/selfcheckin/LocationClasses/queries.js","components/selfcheckin/LocationClasses/LocationClasses.jsx","components/settings/queries.js","components/settings/SettingsBack.jsx","components/settings/SettingsBase.jsx","components/settings/about/SettingsAbout.jsx","components/settings/finance/bank_accounts/SettingsFinanceBankAccountsForm.jsx","components/settings/finance/bank_accounts/SettingsFinanceBankAccounts.jsx","components/settings/finance/currency/SettingsFinanceCurrencyForm.jsx","components/settings/finance/currency/SettingsFinanceCurrency.jsx","components/settings/general/date_time/yupSchema.js","components/settings/general/date_time/SettingsGeneralDateTimeForm.jsx","components/settings/general/date_time/SettingsGeneralDateTime.jsx","components/settings/general/system/SettingsGeneralSystemForm.jsx","components/settings/general/system/SettingsGeneralSystem.jsx","components/settings/home/SettingsHome.jsx","components/settings/integration/mailchimp/SettingsIntegrationMailChimpForm.jsx","components/settings/integration/mailchimp/SettingsIntegrationMailChimp.jsx","components/settings/integration/mollie/SettingsIntegrationMollieForm.jsx","components/settings/integration/mollie/SettingsIntegrationMollieCreateAccount.jsx","components/settings/integration/mollie/SettingsIntegrationMollie.jsx","components/settings/mail/mailchimp_lists/queries.js","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListsBase.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListDelete.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpLists.jsx","components/settings/mail/mailchimp_lists/yupSchema.js","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListForm.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListAdd.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListEdit.jsx","components/settings/mail/templates/SettingsMailTemplatesBase.jsx","components/settings/mail/templates/queries.js","components/settings/mail/templates/SettingsMailTemplates.jsx","components/settings/mail/templates/SettingsMailTemplateEditBase.jsx","components/settings/mail/templates/SettingsMailTemplateEditForm.jsx","components/settings/mail/templates/SettingsMailTemplateEdit.jsx","components/settings/mail/templates/tools.js","components/settings/shop/features/yupSchema.js","components/settings/shop/features/SettingsShopFeaturesForm.jsx","components/settings/shop/features/SettingsShopFeatures.jsx","components/settings/workflow/class_booking/SettingsWorkflowClassBookingForm.jsx","components/settings/workflow/class_booking/SettingsWorkflowClassBooking.jsx","components/settings/workflow/shop/SettingsWorkflowShopForm.jsx","components/settings/workflow/shop/SettingsWorkflowShop.jsx","components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPausesForm.jsx","components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPauses.jsx","components/settings/workflow/trial/SettingsWorkflowTrialForm.jsx","components/settings/workflow/trial/SettingsWorkflowTrial.jsx","queries/system/get_user_profile.js","components/shop/account/home/ShopAccountHomeBase.jsx","components/shop/account/home/ShopAccountHomeButton.jsx","components/shop/account/home/ShopAccountHome.jsx","components/shop/tools.js","components/shop/account/class_cancel/queries.js","components/shop/account/class_cancel/ShopAccountClassCancelBase.jsx","components/shop/account/class_cancel/ShopAccountClassCancel.jsx","components/shop/checkout/class_info/queries.js","components/shop/checkout/class_info/ShopCheckoutClassInfo.jsx","components/shop/account/class_info/ShopAccountClassInfoBase.jsx","components/shop/account/class_info/ShopAccountClassInfo.jsx","components/shop/account/classpasses/queries.js","components/shop/account/ShopAccountBack.jsx","components/shop/account/classpasses/ShopAccountClasspassesBase.jsx","components/shop/account/classpasses/ShopAccountClasspasses.jsx","components/shop/account/ShopAccountProfileBase.jsx","components/shop/account/event_tickets/ShopAccountEventTickets.jsx","components/shop/account/invoice_payment/queries.js","components/shop/account/invoice_payment/ShopAccountInvoicePaymentBase.jsx","components/shop/account/invoice_payment/ShopAccountInvoicePayment.jsx","components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatusBase.jsx","components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatus.jsx","components/shop/account/invoices/queries.js","components/shop/account/invoices/ShopAccountInvoicesBase.jsx","components/shop/account/invoices/ShopAccountInvoices.jsx","components/shop/account/mailing_lists/queries.js","components/shop/account/mailing_lists/ShopAccountMailingListsBase.jsx","components/shop/account/mailing_lists/ShopAccountMailingListCard.jsx","components/shop/account/mailing_lists/ShopAccountMailingLists.jsx","components/shop/account/orders/queries.js","components/shop/account/orders/ShopAccountOrdersBase.jsx","components/shop/account/orders/tools.js","components/shop/account/orders/ShopAccountOrders.jsx","components/shop/account/orders/ShopAccountOrderCancel.jsx","components/shop/account/profile/queries.js","components/shop/account/profile/ShopAccountProfileBtnDownloadData.jsx","components/shop/account/profile/ShopAccountProfileBase.jsx","components/shop/account/profile/ShopAccountProfileForm.jsx","components/shop/account/profile/yupSchema.js","components/shop/account/profile/ShopAccountProfile.jsx","components/shop/account/subscriptions/queries.js","components/shop/account/subscriptions/ShopAccountSubscriptionsBase.jsx","components/shop/account/subscriptions/ShopAccountSubscriptions.jsx","components/shop/classes/book/ShopClassBookBack.jsx","components/shop/classes/book/ShopClassBookBase.jsx","components/shop/classes/book/ShopClassBookClasspassBtn.jsx","components/shop/classes/book/ShopClassBookClasspasses.jsx","components/shop/classes/book/ShopClassBookSubscriptionBtn.jsx","components/shop/classes/book/ShopClassBookSubscriptions.jsx","components/shop/classes/book/ShopClassBookPriceBtn.jsx","components/shop/classes/book/ShopClassBookPriceDropin.jsx","components/shop/classes/book/ShopClassBookPriceTrial.jsx","components/shop/classes/book/queries.js","components/shop/classes/book/ShopClassBook.jsx","components/shop/classes/booked/ShopClassBookedBase.jsx","components/shop/queries.js","components/shop/classes/booked/ShopClassBooked.jsx","components/shop/classes/schedule/ShopClassesScheduleBase.jsx","components/shop/classes/schedule/tools.js","components/shop/classes/schedule/ShopClassesScheduleFilter.jsx","components/shop/classes/schedule/ShopClassesScheduleButtonBook.jsx","components/shop/classes/schedule/ShopClassesSchedule.jsx","components/shop/contact/ShopContactBase.jsx","components/shop/contact/ShopContact.jsx","components/shop/events/ShopEventsBase.jsx","components/shop/events/queries.js","components/shop/events/ShopEvents.jsx","components/shop/event/ShopEventBase.jsx","components/shop/event/ShopEventTicketPricingCard.jsx","components/shop/event/queries.js","components/shop/event/ShopEvent.jsx","components/shop/event_ticket/ShopEventTicketBase.jsx","tools/cs_django_links.js","components/shop/ShopCheckoutForm.jsx","components/shop/event_ticket/queries.js","components/shop/event_ticket/ShopEventTicket.jsx","components/shop/home/queries.js","components/shop/home/ShopHomeBase.jsx","components/shop/home/ShopHome.jsx","components/shop/checkout/payment/ShopCheckoutPaymentBase.jsx","components/shop/checkout/queries.js","components/shop/checkout/order_summary/ShopCheckoutOrderSummary.jsx","components/shop/checkout/payment/queries.js","components/shop/checkout/payment/ShopCheckoutPayment.jsx","components/shop/checkout/complete/ShopCheckoutCompleteBase.jsx","components/shop/checkout/complete/ShopCheckoutComplete.jsx","components/shop/account/classes/queries.js","components/shop/account/classes/ShopAccountClassesBase.jsx","components/shop/account/classes/ShopAccountClasses.jsx","components/shop/classpasses/ShopClasspassesBase.jsx","components/shop/classpass/ShopClasspassPricingCard.jsx","components/shop/classpasses/queries.js","components/shop/classpasses/ShopClasspasses.jsx","components/shop/classpass/ShopClasspassBase.jsx","components/shop/classpass/queries.js","components/shop/classpass/ShopClasspass.jsx","components/shop/subscriptions/ShopSubscriptionsBase.jsx","components/shop/subscription/ShopSubscriptionPricingCard.jsx","components/shop/subscriptions/queries.js","components/shop/subscriptions/ShopSubscriptions.jsx","components/shop/subscription/CheckoutCardMollie.jsx","components/shop/subscription/CheckoutCardBankAccountRequired.jsx","components/shop/subscription/CheckoutCardDirectDebitForm.jsx","components/shop/subscription/yupSchemaDirectDebit.js","components/shop/subscription/CheckoutCardDirectDebit.jsx","components/shop/subscription/ShopSubscriptionBase.jsx","components/shop/subscription/queries.js","components/shop/subscription/ShopSubscription.jsx","components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivatedBase.jsx","components/shop/subscription_directdebit_activated/queries.js","components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivated.jsx","components/user/password/yupSchema.js","components/user/password/UserPasswordChangeForm.jsx","components/ui/CSStandaloneFormPage.jsx","components/user/password/UserPasswordChange.jsx","components/user/login/UserLoginForm.jsx","components/user/login/UserLogin.jsx","components/user/login/UserLoginRequired.jsx","components/user/login/UserLogout.jsx","components/user/session/UserSessionExpired.jsx","components/user/welcome/UserWelcome.jsx","components/Error404.js","components/shop/account/bank_account/queries.js","components/shop/account/bank_account/ShopAccountBankAccountForm.jsx","components/shop/account/bank_account/yupSchema.js","components/shop/account/bank_account/ShopAccountBankAccount.jsx","AppRoot.js","App.js","serviceWorker.js","index.js"],"names":["resources","en_US","common","console","log","i18n","use","LanguageDetector","initReactI18next","init","lng","fallbackLng","ns","defaultNS","debug","keySeparator","interpolation","escapeValue","TOKEN_AUTH","gql","TOKEN_REFRESH","TOKEN_COOKIE_DELETE","TOKEN_REFRESH_COOKIE_DELETE","UPDATE_ACCOUNT_PASSWORD","cs_error_codes","USER_NOT_LOGGED_IN","cs_local_storage_keys","AUTH_TOKEN","AUTH_TOKEN_EXP","AUTH_TOKEN_ORIGIAT","AUTH_REFRESH_TOKEN","AUTH_REFRESH_TOKEN_EXP","AUTH_LOGIN_NEXT","FINANCE_INVOICES_FILTER_STATUS","FINANCE_INVOICES_EDIT_RETURN","FINANCE_ORDERS_FILTER_STATUS","FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE","INSIGHT_CLASSPASSES_YEAR","INSIGHT_REVENUE_YEAR","INSIGHT_SUBSCRIPTIONS_YEAR","INSIGHT_TRIALPASSES_YEAR","INSIGHT_TRIALPASSES_MONTH","ORGANIZATION_CLASSTYPES_ARCHIVED","RELATIONS_ACCOUNTS_FILTER_TYPE","RELATIONS_ACCOUNTS_SEARCH","RELATIONS_ACCOUNTS_IS_ACTIVE","RELATIONS_ACCOUNT_NOTES_NOTE_TYPE","RELATIONS_BUSINESSES_SHOW_ARCHIVE","RELATIONS_BUSINESSES_SEARCH","SCHEDULE_APPOINTMENTS_DATE_FROM","SCHEDULE_APPOINTMENTS_DATE_UNTIL","SCHEDULE_APPOINTMENTS_ORDER_BY","SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE","SCHEDULE_APPOINTMENTS_FILTER_LOCATION","SCHEDULE_CLASSES_DATE_FROM","SCHEDULE_CLASSES_DATE_UNTIL","SCHEDULE_CLASSES_ORDER_BY","SCHEDULE_CLASSES_FILTER_CLASSTYPE","SCHEDULE_CLASSES_FILTER_LEVEL","SCHEDULE_CLASSES_FILTER_LOCATION","SCHEDULE_CLASSES_ENROLLMENT_SEARCH","SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH","SCHEDULE_EVENTS_ARCHIVED","SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH","SCHEDULE_SHIFTS_DATE_FROM","SCHEDULE_SHIFTS_DATE_UNTIL","SCHEDULE_SHIFTS_ORDER_BY","SCHEDULE_SHIFTS_FILTER_SHIFT","SCHEDULE_SHIFTS_FILTER_LOCATION","SELFCHECKIN_CHECKIN_SEARCH","SHOP_ACCOUNT_BANK_ACCOUNT_NEXT","SHOP_CLASSES_DATE_FROM","SHOP_CLASSES_DATE_UNTIL","SHOP_CLASSES_ORDER_BY","SHOP_CLASSES_FILTER_CLASSTYPE","SHOP_CLASSES_FILTER_LEVEL","SHOP_CLASSES_FILTER_LOCATION","CSAuth","login","tokenData","localStorage","setItem","CSLS","payload","exp","origIat","refreshExpiresIn","removeItem","updateTokenInfo","refreshTokenData","cleanup","logout","expired","this","GET_APP_SETTINGS_QUERY","UPDATE_APP_SETTINGS","GET_ORGANIZATION_QUERY","withTranslation","t","urlLogo","children","className","Row","src","alt","autoClose","transition","Slide","active","loader","AppSettingsContext","React","createContext","AppSettingsProvider","Provider","Consumer","OrganizationContext","OrganizationProvider","GET_SHOP_FEATURES_QUERY","UPDATE_SHOP_FEATURES","getNavBarItems","loading","error","data","shopFeatures","systemFeatureShop","items","push","value","to","icon","LinkComponent","withRouter","NavLink","useExact","subscriptions","classpasses","classes","events","refreshTokenExp","getItem","accountTitle","accountLink","Date","now","match","history","useQuery","organization","useContext","headerImageUrl","imageURL","urlLogoShopHeader","getHeaderImageUrl","Wrapper","headerProps","href","navItems","Item","type","user","instructor","employee","outline","size","color","navProps","itemsObjects","routerContextComponentType","RouterContextProvider","footerProps","copyright","target","rel","getFullYear","nav","Col","auto","checkoutProgress","color_order","color_payment","color_complete","List","addOn","name","returnUrl","title","subTitle","pageHeaderOptions","Header","md","Body","GET_BACKEND_ANNOUNCEMENTS_QUERY","GET_USER","get_all_permissions","permissions","groups","edges","edge_index","group_edge","node","group_node","permission_index","permission_edge","codename_split","codename","split","Set","add","has_permission","permission","resource","you_shall_not_pass","has","avatarURL","urlImageThumbnailSmall","accountDropdown","firstName","lastName","description","options","isDivider","announcements","organizationAnnouncements","length","cards","deck","map","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","content","link","linkTitle","block","params","AutomationHomeItemButton","ContentCard","handleOnScroll","scrollTop","document","documentElement","body","scrollHeight","clientHeight","window","innerHeight","Math","ceil","pageInfo","props","hasNextPage","onLoadMore","addEventListener","removeEventListener","cardTitle","headerContent","isLoadingMore","cardTabs","hasCardBody","Title","Footer","onClick","Component","defaultProps","f","GET_TASK_RESULT_QUERY","showNewTask","status","dateTimeFormatMoment","variables","taskName","fetchMore","taskResults","djangoCeleryResultTaskResults","after","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","__typename","ColHeader","v4","moment","dateDone","format","taskKwargs","result","AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA","Yup","shape","subscriptionYear","required","positive","min","max","subscriptionMonth","isSubmitting","errors","Group","label","autoComplete","component","disabled","ADD_TASK","useMutation","addTask","initialValues","getMonth","validationSchema","onSubmit","values","setSubmitting","input","month","year","refetchQueries","query","then","toast","success","position","POSITION","BOTTOM_RIGHT","catch","useState","AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA","invoiceDate","AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA","hideLoading","check_permission","FinanceHome","linkTitleView","lg","GET_COSTCENTERS_QUERY","GET_COSTCENTER_QUERY","ADD_COSTCENTER","UPDATE_COSTCENTER","ARCHIVE_COSTCENTER","addUrl","buttonText","showBack","archived","setArchived","refetch","archiveCostcenter","headerOptions","Options","costcenters","financeCostcenters","code","id","prefix","COSTCENTER_SCHEMA","addCostcenter","updateCostcenter","initialData","financeCostcenter","GET_GLACCOUNTS_QUERY","GET_GLACCOUNT_QUERY","ADD_GLACCOUNT","UPDATE_GLACCOUNT","ARCHIVE_GLACCOUNT","archiveGlaccount","glaccounts","financeGlaccounts","GLACCOUNT_SCHEMA","addGlaccount","updateGlaccount","financeGlaccount","get_list_query_variables","queryVars","undefined","url","getDefaultValue","defaultValue","onChange","event","key","updateLocalStorageAndRefetch","FinanceInvoicesStatus","GET_INVOICES_QUERY","GET_INVOICE_QUERY","UPDATE_INVOICE","CANCEL_AND_CREATE_CREDIT_INVOICE","DELETE_FINANCE_INVOICE","CREATE_INVOICE_ITEM","UPDATE_INVOICE_ITEM","DELETE_INVOICE_ITEM","DELETE_INVOICE_PAYMENT","confirm_delete","msgConfirm","msgDescription","msgSuccess","deleteFunction","functionVariables","confirmAlert","customUI","onClose","location","dateFormat","pathname","fetchPolicy","deleteFinanceInvoice","invoices","financeInvoices","invoiceNumber","account","relationCompany","relationContactName","Small","summary","trunc","dateSent","dateDue","totalDisplay","balanceDisplay","refreshTokenAndOpenExportLinkInNewTab","doTokenRefresh","exportUrl","refreshToken","dataurl","createElement","appendChild","click","removeChild","download","dateToLocalISO","date","dateToLocalISOTime","getHours","getMinutes","slice","TimeStringToJSDateOBJ","time_string","date_obj","time_split","setHours","setMinutes","INVOICES_EXPORT_SCHEMA","dateStart","dateEnd","selected","onBlur","isClearable","placeholderText","todayButton","showMonthDropdown","showYearDropdown","dropdownMode","role","setFieldValue","setFieldTouched","frequencyType","startOf","setDateStart","endOf","setDateEnd","setStatus","prepared","setPrepared","setExportUrl","isoDateStart","isoDateEnd","touched","FinanceInvoicesExportForm","addInvoiceItem","financeInvoice","deleteInvoiceItem","productName","handleChange","inputData","e","quantity","price","financeTaxRate","financeTaxRates","percentage","rateType","Object","keys","updateInvoiceItem","setTouched","refetchInvoice","updateItem","updating","setUpdating","onDragEnd","draggableId","destination","source","reason","droppableId","index","node_id","line_number","lineNumber","setTimeout","updateLineNumber","statusColor","provided","snapshot","ref","innerRef","droppableProps","idx","draggableProps","dragHandleProps","placeholder","tinymceBasicConf","resize","menubar","plugins","statusbar","toolbar","tinymceScriptSrc","textareaName","initialValue","terms","getContent","footer","submitForm","note","updateInvoice","initialTab","subtotalDisplay","taxDisplay","paidDisplay","financePaymentMethod","financePaymentMethods","initialPaymentMethod","address","phone","email","registration","taxRegistration","creditInvoiceId","Link","creditInvoiceNumber","relationCompanyRegistration","relationCompanyTaxRegistration","relationAddress","relationPostcode","relationCity","relationCountry","deleteInvoicePayment","amountDisplay","paymentAddUrl","payments","onlinePaymentId","cancelAndCreateCreditInvoice","export_url","payment_add_url","toggle","triggerContent","cancelAndCreateCreditFinanceInvoice","ml","GET_INVOICE_GROUPS_QUERY","GET_INVOICE_GROUP_QUERY","UPDATE_INVOICE_GROUP","ADD_INVOICE_GROUP","ARCHIVE_INVOICE_GROUP","showEditBack","archiveInvoiceGroup","invoiceGroups","financeInvoiceGroups","nextId","dueAfterDays","prefixYear","autoResetPrefixYear","displayPublic","INVOICE_GROUP_SCHEMA","moreThan","edit","Label","checked","addInvoiceGroup","updateInvoiceGroup","financeInvoiceGroup","INVOICE_GROUP_DEFAULT_SCHEMA","GET_INVOICE_GROUPS_DEFAULTS_QUERY","UPDATE_INVOICE_GROUP_DEFAULT","fetch_default_type_name","itemType","updateDefaultGroup","FinanceInvoiceGroupDefaultsBase","financeInvoiceGroupDefaults","form_type","invoiceId","invoice_id","queryLoading","queryError","invoice_number","padding","fullName","amount","ADD_FINANCE_INVOICE_PAYMENT","onCompleted","addInvoicePayment","balance","GET_INVOICE_PAYMENT_QUERY","UPDATE_FINANCE_INVOICE_PAYMENT","invoiceQueryLoading","invoiceQueryError","invoiceData","paymentQueryLoading","paymentQueryError","paymentData","updateInvoicePayment","financeInvoicePayment","initialDate","FinanceOrderStatus","GET_ORDERS_QUERY","DELETE_FINANCE_ORDER","deleteOrder","orderNumber","dateTimeFormat","orders","financeOrders","createdAt","batchType","toUpperCase","showAdd","batch_type","GET_PAYMENT_BATCHES_QUERY","GET_PAYMENT_BATCH_QUERY","GET_INPUT_VALUES","ADD_PAYMENT_BATCH","UPDATE_PAYMENT_BATCH","DELETE_PAYMENT_BATCH","msgEmptyList","deletePaymentBatch","financePaymentBatches","executionDate","financePaymentBatchCategory","unstyled","get_add_options_collection","get_add_options_payment","FinancePaymentBatchCategory","categoryType","batchId","setDisabled","updateFinancePaymentBatch","sentToBankColor","approvedColor","awaitingApprovalColor","rejectedColor","onClickStatusButton","newStatus","RootComponent","appSettings","timeFormatMoment","financePaymentBatch","includeZeroAmounts","countItems","exports","accountHolder","accountNumber","accountBic","currency","PAYMENT_BATCH_INVOICES_SCHEMA","PAYMENT_BATCH_CATEGORY_SCHEMA","PAYMENT_BATCH_EDIT_SCHEMA","create","category","financePaymentBatchCategories","batchCategoryType","category_type","addFinancePaymentBatch","yupSchema","createFinancePaymentBatch","inputValues","showArchive","GET_PAYMENT_BATCH_CATEGORIES_QUERY","GET_PAYMENT_BATCH_CATEGORY_QUERY","ARCHIVE_PAYMENT_BATCH_CATEGORY","archivePaymentBatchCategory","payment_batch_categories","ADD_PAYMENT_BATCH_CATEGORY","addFinancePaymentBatchCategory","UPDATE_PAYMENT_BATCH_CATEGORY","paymentBatchCategoryId","updateFinancePaymentBatchCategory","GET_FINANCE_ORDER_QUERY","UPDATE_ORDER","updateOrder","order","financeOrder","priceDisplay","message","GET_PAYMENT_METHODS_QUERY","GET_PAYMENT_METHOD_QUERY","ADD_PAYMENT_METHOD","UPDATE_PAYMENT_METHOD","ARCHIVE_PAYMENT_METHOD","archivePaymentMethod","paymentMethods","systemMethod","PAYMENT_METHOD_SCHEMA","addPaymentMethod","updatePaymentMethod","GET_TAXRATES_QUERY","GET_TAXRATE_QUERY","ADD_TAXRATE","UPDATE_TAXRATE","ARCHIVE_TAXRATE","archiveTaxrate","taxrates","TAX_RATE_SCHEMA","typeError","addFinanceTaxrate","updateTaxrate","TAX_SUMMARY_SCHEMA","GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY","taxRatesSummary","insightFinanceTaxRateSummary","InsightHome","GET_CLASSPASSES_SOLD_QUERY","GET_CLASSPASSES_ACTIVE_QUERY","refetchData","previousYear","parseInt","currentYear","nextYear","export_url_active","export_url_sold","loadingSold","errorSold","dataSold","refetchSold","loadingActive","errorActive","dataActive","refetchActive","data_sold_label","chart_data_sold","insightAccountClasspassesSold","data_active_label","chart_data_active","insightAccountClasspassesActive","style","height","x","columns","colors","sold","names","axis","y","bottom","show","left","right","tooltip","point","GET_REVENUE_QUERY","labelDataTotal","labelDataSubtotal","labelDataTax","dataTotal","total","dataTotalDisplay","dataSubtotal","subtotal","dataTax","tax","months","insightRevenueTotal","insightRevenueSubscriptions","insightRevenueClasspasses","insightRevenueEventTickets","insightRevenueOther","GET_SUBSCRIPTIONS_SOLD_QUERY","GET_SUBSCRIPTIONS_ACTIVE_QUERY","insightAccountSubscriptionsSold","insightAccountSubscriptionsActive","GET_TRIALPASSES_QUERY","getListQueryVariables","dateStartFrom","firstDayMonth","getFirstDayMonth","dateStartUntil","getLastDayMonth","listVariables","accountClasspasses","organizationClasspass","organizationSubscription","OrganizationHome","ORGANIZATION_SCHEMA","UPDATE_ORGANIZATION","updateOrganization","Image","urlLogoLogin","Details","urlLogoInvoice","urlLogoEmail","urlLogoSelfCheckin","customFileInputLabelStyle","whiteSpace","display","overflow","formTitle","inputFileName","fileInputLabel","handleFileInputChange","updateField","update_field","fileName","setFileName","useRef","files","inputVars","reader","FileReader","onload","reader_event","b64_enc_file","logoLoginFileName","logoLogin","logoInvoiceFileName","logoInvoice","logoEmailFileName","logoEmail","logoShopHeaderFileName","logoShopHeader","logoSelfCheckinFileName","logoSelfCheckin","file","current","readAsDataURL","GET_ANNOUNCEMENTS_QUERY","GET_ANNOUNCEMENT_QUERY","ADD_ANNOUNCEMENT","UPDATE_ANNOUNCEMENT","DELETE_ANNOUNCEMENT","deleteAnnouncement","displayShop","displayBackend","priority","ANNOUNCEMENT_SCHEMA","addAnnouncement","announcementId","updateAnnouncement","organizationAnnouncement","GET_APPOINTMENTS_QUERY","GET_APPOINTMENT_QUERY","GET_INPUT_VALUES_QUERY","ARCHIVE_APPOINTMENT","organizationAppointmentCategory","category_id","appointments","organizationAppointments","organizationAppointmentPrices","mutation","archiveAppointmentCategorysRoom","APPOINTMENT_SCHEMA","ADD_APPOINTMENT","addAppointment","UPDATE_APPOINTMENT","OrganizationAppointmentEdit","organizationAppointment","initialGlaccount","initialCostcenter","updateLocation","GET_APPOINTMENT_CATEGORIES_QUERY","GET_APPOINTMENT_CATEGORY_QUERY","ARCHIVE_APPOINTMENT_CATEGORY","appointment_categories","organizationAppointmentCategories","archiveLocation","APPOINTMENT_CATEGORY_SCHEMA","ADD_ORGANIZATION_APPOINTMENT_CATEGORY","addAppointmentCategory","UPDATE_APPOINTMENT_CATEGORY","OrganizationAppointmentCategoryEdit","updateAppointmentCategory","GET_APPOINTMENT_PRICES_QUERY","GET_APPOINTMENT_PRICE_QUERY","DELETE_APPOINTMENT_PRICE","appointment_id","prices","deleteAppointmentPrice","APPOINTMENT_PRICE_SCHEMA","accountInstructorProfiles","ADD_APPOINTMENT_PRICE","OrganizationAppointmentPriceForm","UPDATE_APPOINTMENT_PRICE","OrganizationAppointmentPriceEdit","organizationAppointmentPrice","initialAccount","initialFinanceTaxRate","Fragment","GET_CLASSPASSES_QUERY","GET_CLASSPASS_QUERY","CREATE_CLASSPASS","UPDATE_CLASSPASS","ARCHIVE_CLASSPASS","archiveClasspass","organizationClasspasses","trialPass","unlimited","validity","validityUnitDisplay","CLASSPASS_SCHEMA","validityUnit","quickStatsAmount","OrganizationClasspassForm","unlimied","createClasspass","updateClasspass","initialTaxRate","GET_CLASSPASS_GROUPS_QUERY","GET_CLASSPASS_GROUP_QUERY","GET_CLASSPASS_GROUP_PASSES_QUERY","ADD_CLASSPASS_GROUP","UPDATE_CLASSPASS_GROUP","DELETE_CLASSPASS_GROUP","ADD_CARD_TO_GROUP","DELETE_CARD_FROM_GROUP","deleteClasspassGroup","classpass_groups","organizationClasspassGroups","substring","CLASSPASS_GROUP_SCHEMA","addClasspassGroup","hasExtraSpace","updateClasspassGroup","organizationClasspassGroup","groupId","addCardToGroup","deleteCardFromGroup","passes","group","group_passes","pass_id","GET_CLASSTYPES_QUERY","GET_CLASSTYPE_QUERY","ADD_CLASSTYPE","UPDATE_CLASSTYPE","UPDATE_CLASSTYPE_IMAGE","ARCHIVE_CLASSTYPE","archiveClasstype","classtypes","organizationClasstypes","CLASSTYPE_SCHEMA","urlWebsite","addClasstype","image","updateClasstype","organizationClasstype","classtypeId","uploadImage","imageFileName","GET_DISCOVERIES_QUERY","GET_DISCOVERY_QUERY","ADD_DISCOVERY","UPDATE_DISCOVERY","ARCHIVE_DISCOVERY","archiveDiscovery","discoveries","organizationDiscoveries","DISCOVERY_SCHEMA","addDiscovery","updateDiscovery","organizationDiscovery","organizationId","organization_id","docTypes","docType","FormatISODateStr","ISODateStr","mediaUrl","pageHeaderButtonList","GET_DOCUMENTS_QUERY","GET_DOCUMENT_QUERY","ADD_DOCUMENT","UPDATE_DOCUMENT","DELETE_DOCUMENT","deleteOrganizationDocument","confirmDelete","version","documentType","getSubtitle","document_type","organizationDocuments","ISODateString","urlDocument","addDocument","documentFileName","updateDocument","organizationDocument","GET_HOLIDAYS_QUERY","GET_HOLIDAY_QUERY","ADD_HOLIDAY","UPDATE_HOLIDAY","DELETE_HOLIDAY","GET_HOLIDAY_LOCATIONS_QUERY","ADD_LOCATION_TO_HOLIDAY","DELETE_LOCATION_FROM_HOLIDAY","deleteHoliday","holidays","organizationHolidays","organizationLocations","HOLIDAY_SCHEMA","addHoliday","updateHoliday","organizationHoliday","holidayId","addLocationToHoliday","deleteLocationFromHoliday","locations","holiday","holiday_locations","locationId","organizationLocation","GET_LANGUAGES_QUERY","GET_LANGUAGE_QUERY","ADD_LANGUAGE","UPDATE_LANGUAGE","ARCHIVE_LANGUAGE","archiveLanguage","languages","organizationLanguages","LANGUAGE_SCHEMA","addLanguage","updateLanguage","organizationLanguage","GET_LOCATIONS_QUERY","GET_LOCATION_QUERY","ADD_LOCATION","UPDATE_LOCATION","ARCHIVE_LOCATION","LOCATION_SCHEMA","addLocation","GET_LOCATION_ROOMS_QUERY","GET_LOCATION_ROOM_QUERY","ADD_LOCATION_ROOM","UPDATE_LOCATION_ROOM","ARCHIVE_LOCATION_ROOM","location_id","organizationLocationId","archiveLocationRoom","locationRooms","organizationLocationRooms","organizationLocationsRooms","LOCATION_ROOM_SCHEMA","addLocationRoom","updateLocationRoom","organizationLocationRoom","GET_LEVELS_QUERY","GET_LEVEL_QUERY","ADD_LEVEL","UPDATE_LEVEL","ARCHIVE_LEVEL","archiveLevel","levels","organizationLevels","LEVEL_SCHEMA","addLevel","updateLevel","organizationLevel","GET_SHIFTS_QUERY","GET_SHIFT_QUERY","ADD_SHIFT","UPDATE_SHIFT","ARCHIVE_SHIFT","archiveShift","shifts","organizationShifts","SHIFT_SCHEMA","addShift","updateShift","organizationShift","GET_SUBSCRIPTIONS_QUERY","GET_SUBSCRIPTION_QUERY","CREATE_SUBSCRIPTION","UPDATE_SUBSCRIPTION","ARCHIVE_SUBSCRIPTION","archiveSubscription","organizationSubscriptions","subscriptionUnitDisplay","priceTodayDisplay","SUBSCRIPTION_SCHEMA","sortOrder","minDuration","subscriptionUnit","creditValidity","reconciliationClasses","termsAndConditions","creditAccumulationDays","createSubscription","organizationMembership","updateSubscription","initialMembership","GET_SUBSCRIPTION_GROUPS_QUERY","GET_SUBSCRIPTION_GROUP_QUERY","GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY","ADD_SUBSCRIPTION_GROUP","UPDATE_SUBSCRIPTION_GROUP","DELETE_SUBSCRIPTION_GROUP","deleteSubscriptionGroup","subscription_groups","organizationSubscriptionGroups","SUBSCRIPTION_GROUP_SCHEMA","addSubscriptionGroup","updateSubscriptionGroup","organizationSubscriptionGroup","group_subscriptions","subscriptionId","subscription_id","GET_SUBSCRIPTION_PRICES_QUERY","GET_SUBSCRIPTION_PRICE_QUERY","ADD_SUBSCRIPTION_PRICE","UPDATE_SUBSCRIPTION_PRICE","DELETE_SUBSCRIPTION_PRICE","deleteFunctionVariables","deleteSubscriptionPrice","subscriptionPrices","organizationSubscriptionPrices","organizationSubscriptionsPrices","SUBSCRIPTION_PRICE_SCHEMA","addSubscriptionPrice","updateSubscriptionPrice","organizationSubscriptionPrice","RelationsHome","InputSearch","inputValue","createRef","initialValueKey","state","submitValue","doneTypingInterval","typingTimer","focus","clearTimeout","setState","onKeyUp","onInputKeyUp","bind","onInputChange","onClear","isActive","customer","search","searchName","Select","GET_ACCOUNTS_QUERY","GET_ACCOUNT_QUERY","ADD_ACCOUNT","UPDATE_ACCOUNT","UPDATE_ACCOUNT_ACTIVE","DELETE_ACCOUNT","setIsLoadingMore","updateAccountActive","deleteAccount","accounts","a","subscriptionsLatest","subscription","classpassesLatest","classpass","classesRemainingDisplay","inline","placement","mobile","first_name","last_name","ACCOUNT_SCHEMA","addAccount","accountId","createAccount","ISO_COUNTRY_CODES","dateOfBirth","emergency","postcode","city","country","Code","Name","keyNumber","profile_active","subscriptions_active","classpasses_active","classes_active","documents_active","tickets_active","instructor_profile_active","orders_active","invoices_active","bank_account_active","notes_active","finance_payment_batch_category_item_active","accepted_documents_active","avatarSize","activeLink","transparent","GroupItem","back","account_id","headerTitle","updateAccount","gender","input_vars","updateImage","GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY","acceptedDocuments","accountAcceptedDocuments","dateAccepted","clientIp","GET_ACCOUNT_BANK_ACCOUNTS_QUERY","UPDATE_ACCOUNT_BANK_ACCOUNT","GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY","CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE","UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE","DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE","bankAccountId","holder","number","bic","updateAccountBankAccount","deleteAccountBankAccountMandate","accountBankAccount","accountBankAccounts","mandates","reference","signatureDate","bank_account_id","createAccountBankAccountMandate","refrence","mandateId","updateAccountBankAccountMandate","mandate","accountBankAccountMandate","signDate","GET_ACCOUNT_CLASSES_QUERY","GET_SCHEDULE_CLASS_ATTENDANCE_QUERY","GET_SCHEDULE_CLASS_QUERY","DELETE_SCHEDULE_CLASS_ATTENDANCE","UPDATE_SCHEDULE_ITEM_ATTENDANCE","timeFormat","deleteScheduleItemAttendance","scheduleItem","timeStart","scheduleItemAttendances","bookingStatus","GET_ACCOUNT_CLASSPASSES_QUERY","GET_ACCOUNT_CLASSPASS_QUERY","CREATE_ACCOUNT_CLASSPASS","UPDATE_ACCOUNT_CLASSPASS","DELETE_ACCOUNT_CLASSPASS","deleteAccountClasspass","nullable","createAccountClasspass","classpassId","accountClasspass","initialdata","GET_ACCOUNT_CLASSPASS_CLASSES_QUERY","cardTitleWithCardInfo","protectedMediaUrl","deleteAccountDocument","accountDocuments","urlProtectedDocument","addAccountDocument","DOCUMENT_SCHEMA","accountDocument","GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY","GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY","CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","deleteAccountFinancePaymentBatchCategoryItem","AccountFinancePaymentBatchCategoryItemsBase","batchCategoryItems","accountFinancePaymentBatchCategoryItems","replace","ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA","addAccountFinancePaymentBatchCategoryItem","accountFinancePaymentBatchCategoryItemId","updateAccountFinancePaymentBatchCategoryItem","accountFinancePaymentBatchCategoryItem","GET_ACCOUNT_INVOICES_QUERY","CREATE_ACCOUNT_INVOICE","pageHeader","FinanceInvoiceStatus","createInvoice","createFinanceInvoice","GET_ACCOUNT_MEMBERSHIPS_QUERY","GET_ACCOUNT_MEMBERSHIP_QUERY","DELETE_ACCOUNT_MEMBERSHIP","accountMemberships","deleteAccountMembership","MEMBERSHIP_SCHEMA","organizationMemberships","CREATE_ACCOUNT_MEMBERSHIP","AccountMembershipAdd","createMembership","UPDATE_ACCOUNT_MEMBERSHIP","AccountMembershipEdit","accountMembership","updateMembership","registrationFeePaid","LoadMoreOnBottomScroll","GET_ACCOUNT_NOTES_QUERY","GET_ACCOUNT_NOTE_QUERY","CREATE_ACCOUNT_NOTE","UPDATE_ACCOUNT_NOTE","DELETE_ACCOUNT_NOTE","noteType","setNoteType","deleteAccountNote","notes","accountNotes","injury","noteBy","addNote","noteId","updateNote","accountNote","GET_ACCOUNT_ORDERS_QUERY","AccountOrderDelete","GET_ACCOUNT","GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY","ADD_ACCOUNT_SCHEDULE_EVENT_TICKET","UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET","updateAccountScheduleEventTicket","accountScheduleEventTickets","scheduleEventTicket","scheduleEvent","cancelled","invoiceItems","infoMailSent","GET_ACCOUNT_SUBSCRIPTIONS_QUERY","GET_ACCOUNT_SUBSCRIPTION_QUERY","CREATE_ACCOUNT_SUBSCRIPTION","UPDATE_ACCOUNT_SUBSCRIPTION","DELETE_ACCOUNT_SUBSCRIPTION","deleteAccountSubscription","accountSubscriptions","Enddate","creditTotal","createAccountSubscription","accountSubscription","tabs","class_tabs_position","activeTab","GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY","GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE","AccountSubscriptionEditListBaseBase","onLoaMore","deleteAccountSubscriptionAltPrice","query_vars","accountSubscriptionAltPrices","ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE","addSubscriptionAltPrice","UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE","updateSubscriptionAltPrice","accountSubscriptionAltPrice","GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY","GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_BLOCK","deleteAccountSubscriptionBlock","accountSubscriptionBlocks","ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_BLOCK","addSubscriptionBlock","UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK","updateSubscriptionBlock","accountSubscriptionBlock","mutationType","GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY","GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_CREDIT","deleteAccountSubscriptionCredit","accountSubscriptionCredits","mutationAmount","ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_CREDIT","addSubscriptionCredit","UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT","updateSubscriptionCredit","accountSubscriptionCredit","GET_FINANCE_INVOICE_ITEM_QUERY","deleteAccountSubscriptionInvoice","financeInvoiceItems","ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA","queryData","addFinanceInvoice","financeInvoiceId","GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY","GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_PAUSE","deleteAccountSubscriptionPause","accountSubscriptionPauses","ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_PAUSE","addSubscriptionPause","UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE","updateSubscriptionPause","accountSubscriptionPause","GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY","UPDATE_ACCOUNT_INSTRUCTOR_PROFILE","ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA","education","bio","urlBio","updateAccountInstructorProfile","showArchived","GET_BUSINESSES_QUERY","GET_BUSINESS_QUERY","UPDATE_BUSINESS","DELETE_BUSINESS","updateBusiness","deleteBusiness","businesses","show_archive","ADD_BUSINESS","addBusiness","b2b","businessId","createBusiness","business","emailContact","emailBilling","phone2","business_id","ScheduleHome","orderBy","dateFrom","dateUntil","DELETE_SCHEDULE_APPOINTMENT","scheduleAppointments","nextWeekFrom","nextWeekUntil","subtract","currentWeekFrom","currentWeekUntil","scheduleItemId","timeEnd","ItemDivider","badge","badgeType","deleteScheduleAppointment","SCHEDULE_APPOINTMENTS_FILTER_LEVEL","edit_active","instructors_available_active","clearable","showTimeSelect","showTimeSelectOnly","timeIntervals","timeCaption","frequencyInterval","CREATE_APPOINTMENT","ScheduleAppointmentAdd","appointmentId","AppointmentEditBase","menu_activeLink","default_card","sidebar_button","initialTimeStart","subtitle","locationRoom","starttime","appointment_edit_all_subtitle","card_title","ScheduleAppointmentEditAll","initialTimeEnd","updateScheduleAppointment","attendanceCountType","represent_instructor","textColor","represent_class_status","get_class_messages","holidayName","selectClass","setLocation","classtype","setClasstype","level","setLevel","GET_CLASSES_QUERY","GET_CLASS_QUERY","CREATE_CLASS","DELETE_SCHEDULE_CLASS","deleteScheduleClass","scheduleClasses","account2","role2","CLASS_SCHEMA","spaces","walkInSpaces","infoMailContent","createScheduleClass","classId","UPDATE_CLASS","defaultCard","menuActiveLink","class_id","represent_instructor_role","class_edit_all_subtitle","updateScheduleClass","initialLevelID","getAccountsQueryVariables","getEnrollmentsListQueryVariables","showEnded","dateEnd_Isnull","GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY","GET_SCHEDULE_ITEM_ENROLLMENT_QUERY","GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY","CREATE_SCHEDULE_ITEM_ENROLLMENT","UPDATE_SCHEDULE_ITEM_ENROLLMENT","DELETE_SCHEDULE_ITEM_ENROLLMENT","deleteScheduleItemEnrollment","editUrl","showCurrent","setShowCurrent","ButtonAddEnrollment","enrollments","queryEnrollmentsData","scheduleItemEnrollments","setSearchName","SCHEDULE_CLASS_ENROLLMENT_SCHEMA","accountSubscriptionId","account_subscription_id","nextUrl","addScheduleClassEnrollment","using","updateScheduleClassEnrollment","scheduleItemEnrollment","allowed","scheduleClassEnrollmentOptions","shopBook","attend","SCHEDULE_CLASS_CLASSPASS_SCHEMA","GET_SCHEDULE_CLASS_CLASSPASSES_QUERY","UPDATE_SCHEDULE_CLASS_CLASSPASS","updateScheduleClassClasspass","scheduleItemOrganizationClasspassGroups","enroll","SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA","GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY","UPDATE_SCHEDULE_CLASS_SUBSCRIPTION","updateScheduleClassSubscription","scheduleItemOrganizationSubscriptionGroups","GET_SCHEDULE_CLASS_ACCOUNTS_QUERY","GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY","ADD_SCHEDULE_CLASS_INSTRUCTOR","UPDATE_SCHEDULE_CLASS_INSTRUCTOR","DELETE_SCHEDULE_CLASS_INSTRUCTOR","deleteScheduleItemAccount","ButtonAddInstructor","scheduleItemAccounts","SCHEDULE_CLASS_INSTRUCTOR_SCHEMA","addScheduleClassInstructor","updateScheduleClassInstructor","scheduleItemAccount","initialAccount2","get_accounts_query_variables","get_attendance_list_query_variables","schedule_item_id","checkedInIds","classStatus","showSearchResults","setShowSearchResults","class_date","useLazyQuery","getAccounts","called","Search","queryAccountsData","includes","attendance_active","attendancechart_active","pageSubTitle","classDate","class_subtitle","scheduleClass","setAttendanceStatus","updateAttendance","GET_CLASS_ATTENDANCE_COUNT_YEAR","dataLabelCurrentYear","chartDataCurrentYear","insightClassAttendanceCountYear","dataCurrent","dataLabelPreviousYear","chartDataPreviousYear","dataPrevious","startAt","Array","i","range","previous","tick","d","GET_BOOKING_OPTIONS_QUERY","CREATE_SCHEDULE_ITEM_ATTENDANCE","getUrlFromReturnTo","returnTo","createInput","classCheckin","onClickCheckin","blocked","paused","priceDropin","locationID","priceTrial","listType","scheduleClassBookingOptions","scheduleItemPrices","organizationClasspassDropin","organizationClasspassTrial","hasReachedTrialLimit","GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY","DELETE_SCHEDULE_CLASS_WEEKLY_OTC","UPDATE_SCHEDULE_CLASS_WEEKLY_OTC","SCHEDULE_CLASS_EDIT_OTC_SCHEMA","notRequired","deleteClassOTC","showDelete","updateScheduleClassWeeklyOTC","scheduleItemWeeklyOtcs","graphQLErrors","GET_SCHEDULE_ITEM_PRICES_QUERY","GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY","ADD_SCHEDULE_ITEM_PRICE","UPDATE_SCHEDULE_ITEM_PRICE","DELETE_SCHEDULE_ITEM_PRICE","deleteClassPrice","addScheduleClassPrice","editScheduleClassPrice","initialOrganizationClasspassDropin","initialOrganizationClasspassTrial","scheduleItemPrice","GET_SCHEDULE_EVENTS_QUERY","GET_SCHEDULE_EVENT_QUERY","ARCHIVE_SCHEDULE_EVENT","confirm_archive","archiveFunction","archiveFunctionVariables","confirm_unarchive","unArchiveFunction","unArchiveFunctionVariables","archiveScheduleEvent","cardHeaderContent","scheduleEvents","SCHEDULE_EVENT_EDIT_SCHEMA","autoSendInfoMail","instructor2","tagline","preview","CREATE_SCHEDULE_EVENT","createScheduleEvent","autoSentInfoMail","eventId","event_id","ScheduleEventEditMenu","cardSubTitle","UPDATE_SCHEDULE_EVENT","updateScheduleEvent","initialOrgranizationlevel","initialInstructor","initialInstructor2","GET_SCHEDULE_EVENT_ACTIVITIES_QUERY","GET_SCHEDULE_EVENT_ACTIVITY_QUERY","DELETE_SCHEDULE_EVENT_ACTIVITY","deleteScheduleEventActivity","scheduleItems","countAttendance","SCHEDULE_EVENT_ACTIVITY_SCHEMA","ADD_SCHEDULE_EVENT_ACTIVITY","addScheduleEventTicket","sidebarContent","scheduleItemType","loadingActivity","errorActivity","dataActivity","cardActivitySubtitle","UPDATE_SCHEDULE_EVENT_ACTIVITY","updateScheduleEventTicket","initialDateStart","GET_SCHEDULE_ITEM_ATTENDANCES_QUERY","schedule_item","GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY","GET_SCHEDULE_EVENT_EARLYBIRD_QUERY","ADD_SCHEDULE_EVENT_EARLYBIRD","UPDATE_SCHEDULE_EVENT_EARLYBIRD","DELETE_SCHEDULE_EVENT_EARLYBIRD","deleteScheduleEventEarlybird","scheduleEventEarlybirds","discountPercentage","SCHEDULE_EVENT_EARLYBIRDS_SCHEMA","addScheduleEventEarlybird","ScheduleEventEarlybirdForm","scheduleEventEarlybirdId","updateScheduleEventEarlybird","scheduleEventEarlybird","initialDateEnd","GET_SCHEDULE_EVENT_MEDIAS_QUERY","GET_SCHEDULE_EVENT_MEDIA_QUERY","DELETE_SCHEDULE_EVENT_MEDIA","deleteScheduleEventMedia","scheduleEventMedias","SCHEDULE_EVENT_MEDIA_SCHEMA","ADD_SCHEDULE_EVENT_MEDIA","addScheduleEventMedia","scheduleEventMediaId","loadingMedia","errorMedia","dataMedia","scheduleEventMedia","UPDATE_SCHEDULE_EVENT_MEDIA","updateScheduleEventMedia","updateMedia","GET_SCHEDULE_EVENT_TICKETS_QUERY","GET_SCHEDULE_EVENT_TICKET_QUERY","DELETE_SCHEDULE_EVENT_TICKET","deleteScheduleEventTicket","scheduleEventTickets","isSoldOut","deletable","SCHEDULE_EVENT_TICKET_SCHEMA","ADD_SCHEDULE_EVENT_TICKET","ticketId","searchResults","loadingTicket","errorTicket","dataTicket","ticket","cardTicketSubtitle","UPDATE_SCHEDULE_EVENT_TICKET","initialFinanceGlaccount","initialFinanceCostcenter","GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY","SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA","included","UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM","updateScheduleEventTicketScheduleItem","scheduleEventTicketActivities","scheduleEventTicketScheduleItems","fullEvent","addAccountScheduleEventTicket","accountIdsWithTickets","represent_shift_status","shift","setShift","CREATE_SHIFT","DELETE_SCHEDULE_SHIFT","deleteScheduleShift","scheduleShifts","createScheduleShift","shiftId","shift_id","shift_edit_all_subtitle","updateScheduleShift","GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY","DELETE_SCHEDULE_ITEM_WEEKLY_OTC","UPDATE_SCHEDULE_ITEM_WEEKLY_OTC","shiftDate","deleteScheduleShiftOTC","updateScheduleITEMWeeklyOTC","shiftSubtitle","ScheduleShiftWeeklyOTCDelete","GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY","GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY","ADD_SCHEDULE_SHIFT_ACCOUNT","UPDATE_SCHEDULE_SHIFT_ACCOUNT","DELETE_SCHEDULE_SHIFT_ACCOUNT","ButtonAdd","SCHEDULE_SHIFT_EMPLOYEE_SCHEMA","addScheduleShiftAccount","updateScheduleShiftAccount","showSearch","setShowSearch","refetchAttendance","queryAttendanceLoading","queryAttendanceError","queryAttendanceData","fetchMoreAccounts","queryAccountsLoading","queryAccountsError","GET_ORGANIZATION_LOCATIONS_QUERY","action","GET_LOCATION_CLASSES_QUERY","today","GET_SYSTEM_SETTINGS_QUERY","UPDATE_SYSTEM_SETTING","headerSubTitle","alertBanner","setting","loadingVersion","errorVersion","dataVersion","loadingPatch","errorPatch","dataPatch","patch","systemSettings","finance_bank_accounts_iban","updateSettings","iban","toLowerCase","settings","toString","finance_currency","finance_currency_symbol","sidebarActive","loadingCurrency","errorCurrency","dataCurrency","loadingSymbol","errorSymbol","dataSymbol","symbol","DATETIME_SCHEMA","system_hostname","queryVariables","hostname","mailchimp_api_key","mailchimp_server_prefix","loadingUser","errorUser","dataUser","loadingKey","errorKey","dataKey","mcUser","mcApiKey","mollie_api_key","mollieApiKey","H4","GET_MAILCHIMP_LISTS_QUERY","GET_MAILCHIMP_LIST_QUERY","ADD_MAILCHIMP_LIST","UPDATE_MAILCHIMP_LIST","DELETE_MAILCHIMP_LIST","deleteMailChimpList","mailchimpLists","systemMailchimpLists","organizationmailchimpLists","mailchimpListId","MAILCHIMP_LIST_SCHEMA","frequency","addMailChimpList","SettingsMailMailChimpListForm","updateMailchimpList","systemMailchimpList","GET_SYSTEM_MAIL_TEMPLATES_QUERY","GET_SYSTEM_MAIL_TEMPLATE_QUERY","UPDATE_SYSTEM_MAIL_TEMPLATE","mailTemplates","systemMailTemplates","help","subject","comments","SettingsMailTemplateEditBase","templateInfo","template_name","helpTexts","suffix","getTemplateInfo","systemMailTemplate","SHOP_FEATURES_SCHEMA","memberships","workflow_class_book_days_advance","workflow_class_cancel_until","loadingDaysAdvance","errorDaysAdvance","dataDaysAdvance","loadingCancelUntil","errorCancelUntil","dataCancelUntil","workflow_shop_subscription_payment_method","loadingSubscriptionPayment","errorSubscriptionPayment","dataSubscriptionPayment","workflow_subscription_pauses_min_duration_in_days","workflow_subscription_pauses_max_pauses_in_year","loadingMinDuration","errorMinDuration","dataMinDuration","loadingMaxPauses","errorMaxPauses","dataMaxPauses","workflow_trial_pass_limit","loadingTrialClassLimit","errorTrialClassLimit","dataTrialClassLimit","GET_USER_PROFILE","xs","sm","DisplayClassInfo","classData","GET_ACCOUNT_CLASS_QUERY","accountName","attendanceId","attendance_id","loadingAttendance","errorAttendance","dataAttendance","updateScheduleItemAttendance","scheduleItemAttendance","cancellationPossible","complete","QUERY_ACCOUNT_CLASSPASSES","skip","ShopAccountClasspassesBase","eventTickets","CREATE_PAYMENT_LINK","cardTitleLoadingError","btnPayNow","initialBtnText","btn_text","setBtnText","createPaymentLink","invoice","setAttribute","paymentLink","createFinanceInvoicePaymentLink","financeInvoicePaymentLink","alert","QUERY_ACCOUNT_INVOICES","onlinePaymentsAvailable","QUERY_SYSTEM_MAILCHIMP_LISTS","UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS","mailingList","btnLink","updateSubscriptionStatus","doUpdateSubscriptionStatus","subscribed","mailingLists","QUERY_ACCOUNT_ORDERS","get_order_card_status_color","cancelFunction","cancelOrder","UPDATE_PROFILE","updateProfile","QUERY_ACCOUNT_SUBSCRIPTIONS","ShopAccountSubscriptionsBase","alreadyBooked","classType","class_info","bookingOpenOn","CREATE_ORDER","buttonBook","capitalize","word","lower","charAt","isBefore","notifyOnNetworkStatusChange","prevWeekFrom","prevWeekUntil","media","urlImageThumbnailLarge","dateString","IconGroup","IconItem","pt","eventTicket","showButton","ticketScheduleItems","Category","isEarlybirdPrice","Price","totalPriceDisplay","AttributeList","AttributeItem","Button","tempTitle","tickets","eventID","cs_django_links","EXPORT_TERMS_AND_CONDITIONS","EXPORT_PRIVACY_POLICY","scheduleEventTicketId","createOrder","createOrderInput","orderId","createFinanceOrder","ShopCheckoutForm","GET_SHOP_ANNOUNCEMENTS_QUERY","GET_ORDER_QUERY","orderItems","attendanceDate","msgNextStep","buttonNext","createFinanceOrderPaymentLink","financeOrderPaymentLink","subHeader","contentText","paymentText","schduleItemAttendances","GET_ORGANIZATION_CLASSPASSES_QUERY","pageTitle","loadingClass","errorClass","dataClass","displayCheckoutInfo","unit","priceFirstMonthDisplay","accountRegistrationFee","accountRegistrationFeeDisplay","GET_ORGANIZATION_SUBSCRIPTIONS_QUERY","organizationSubscriptionId","ACCOUNT_SUBSCRIPTION_SCHEMA","CheckoutCardDirectDebitForm","CheckoutCard","shopPaymentMethod","hasBankAccountInfo","CheckoutCardDirectDebit","PASSWORD_CHANGE_SCHEMA","passwordCurrent","passwordNew","passwordNew2","oneOf","updatePassword","CSStandaloneFormPage","vars","messages","etFieldValue","esetFieldTouched","preventDefault","password","doTokenAuth","username","next","tokenAuth","setActive","deleteCookie","deleteRefreshCookie","info","offsetMd","Error404","GET_ACCOUNT_BANK_ACCOUNTS","UPDATE_BANK_ACCOUNT","ACCOUNT_BANK_ACCOUNT_SCHEMA","updateBankAccount","bankAccount","SetCurrentUrlAsNext","PrivateRoute","rest","authTokenExpired","path","ContinueAsYouAre","render","LoginRequired","SessionExpired","tokenExp","reload","loadingAppSettings","errorAppSettings","dataAppSettings","loadingOrganization","errorOrganization","dataOrganization","exact","CookiePolicy","HomeHome","AutomationHome","AutomationAccountSubscriptionCredits","AutomationAccountSubscriptionCreditAdd","AutomationAccountSubscriptionCreditExpiration","AutomationAccountSubscriptionCreditExpirationAdd","AutomationAccountSubscriptionInvoices","AutomationAccountSubscriptionInvoicesAdd","AutomationAccountSubscriptionMollieCollections","AutomationAccountSubscriptionMollieCollectionAdd","FinanceCostCenters","FinanceCostCenterAdd","FinanceCostCenterEdit","FinanceInvoices","FinanceInvoicesExport","FinanceInvoiceEdit","FinanceInvoiceGroups","FinanceInvoiceGroupAdd","FinanceInvoiceGroupEdit","FinanceInvoiceGroupDefaults","FinanceInvoicePaymentAdd","FinanceInvoicePaymentEdit","FinanceGLAccounts","FinanceGLAccountAdd","FinanceGLAccountEdit","FinanceOrders","FinanceOrderEdit","FinancePaymentBatches","FinancePaymentBatchAddWhat","FinancePaymentBatchView","FinancePaymentCollectionBatchAdd","FinancePaymentCollectionBatchEdit","FinancePaymentBatchCategories","FinancePaymentBatchCategoryAdd","FinancePaymentBatchCategoryEdit","FinancePaymentMethods","FinancePaymentMethodAdd","FinancePaymentMethodEdit","FinanceTaxRates","FinanceTaxRatesAdd","FinanceTaxRatesEdit","FinanceTaxRatesSummary","OrganizationEdit","OrganizationBranding","OrganizationBrandingEdit","OrganizationDocuments","OrganizationListDocuments","OrganizationDocumentAdd","OrganizationDocumentEdit","OrganizationAnnouncements","OrganizationAnnouncementAdd","OrganizationAnnouncementEdit","OrganizationAppointmentCategories","OrganizationAppointmentCategoryAdd","OrganizationAppointments","OrganizationAppointmentAdd","OrganizationAppointmentPrices","OrganizationAppointmentPriceAdd","OrganizationClasspasses","OrganizationClasspassAdd","OrganizationClasspassEdit","OrganizationClasspassesGroups","OrganizationClasspassesGroupAdd","OrganizationClasspassesGroupEdit","OrganizationClasspassesGroupEditPasses","OrganizationClasstypes","OrganizationClasstypeAdd","OrganizationClasstypeEdit","OrganizationClasstypeEditImage","OrganizationDiscoveries","OrganizationDiscoveryAdd","OrganizationDiscoveryEdit","OrganizationHolidays","OrganizationHolidayAdd","OrganizationHolidayEdit","OrganizationHolidayEditLocations","OrganizationLanguages","OrganizationLanguageAdd","OrganizationLanguageEdit","OrganizationLevels","OrganizationLevelAdd","OrganizationLevelEdit","OrganizationLocations","OrganizationLocationAdd","OrganizationLocationEdit","OrganizationLocationRooms","OrganizationLocationRoomAdd","OrganizationLocationRoomEdit","OrganizationShifts","OrganizationShiftAdd","OrganizationShiftEdit","OrganizationSubscriptions","OrganizationSubscriptionAdd","OrganizationSubscriptionEdit","OrganizationSubscriptionsGroups","OrganizationSubscriptionsGroupAdd","OrganizationSubscriptionsGroupEdit","OrganizationSubscriptionsGroupEditSubscriptions","OrganizationSubscriptionsPrices","OrganizationSubscriptionPriceAdd","OrganizationSubscriptionPriceEdit","RelationsAccounts","RelationsAccountAdd","RelationsAccountProfile","RelationsAccountProfileImage","AccountAcceptedDocuments","RelationsAccountBankAccount","RelationsAccountBankAccountMandateAdd","RelationsAccountBankAccountMandateEdit","RelationsAccountClasses","AccountClasspasses","AccountClasspassAdd","AccountClasspassEdit","AccountClasspassClasses","AccountDocuments","AccountDocumentAdd","AccountDocumentEdit","AccountFinancePaymentBatchCategoryItems","AccountFinancePaymentBatchCategoryItemAdd","AccountFinancePaymentBatchCategoryItemEdit","AccountInvoices","AccountInvoiceAdd","AccountMemberships","AccountNotes","AccountNoteAdd","AccountNoteEdit","AccountOrders","AccountScheduleEventTickets","AccountSubscriptions","AccountSubscriptionAdd","AccountSubscriptionEdit","AccountSubscriptionEditAltPrices","AccountSubscriptionEditAltPriceAdd","AccountSubscriptionEditAltPriceEdit","AccountSubscriptionEditBlocks","AccountSubscriptionEditBlockAdd","AccountSubscriptionEditBlockEdit","AccountSubscriptionEditCredits","AccountSubscriptionEditCreditAdd","AccountSubscriptionEditCreditEdit","AccountSubscriptionEditInvoices","AccountSubscriptionEditInvoiceAdd","AccountSubscriptionEditPauses","AccountSubscriptionEditPauseAdd","AccountSubscriptionEditPauseEdit","RelationsAccountInstructorProfile","RelationsB2B","RelationsB2BAdd","RelationsB2BEdit","ScheduleAppointments","ScheduleClasses","ScheduleClassAdd","ScheduleClassEditAll","ScheduleClassClasspasses","ScheduleClassEnrollments","ScheduleClassEnrollmentsSearch","ScheduleClassEnrollmentAdd","ScheduleClassEnrollmentEdit","ScheduleClassEnrollmentOptions","ScheduleClassPrices","ScheduleClassPriceAdd","ScheduleClassPriceEdit","ScheduleClassSubscriptions","ScheduleClassInstructors","ScheduleClassInstructorAdd","ScheduleClassInstructorEdit","ScheduleClassAttendance","ScheduleClassAttendanceChart","ScheduleClassBook","ScheduleClassEdit","ScheduleEvents","ScheduleEventAdd","ScheduleEventEdit","ScheduleEventActivities","ScheduleEventActivityAdd","ScheduleEventActivityEdit","ScheduleEventActivityAttendance","ScheduleEventEarlybirds","ScheduleEventEarlybirdAdd","ScheduleEventEarlybirdEdit","ScheduleEventMedia","ScheduleEventMediaAdd","ScheduleEventMediaEdit","ScheduleEventTickets","ScheduleEventTicketAdd","ScheduleEventTicketEdit","ScheduleEventTicketEditActivities","ScheduleEventTicketEditCustomers","ScheduleEventTicketEditCustomersSearch","ScheduleShifts","ScheduleShiftAdd","ScheduleShiftEditAll","ScheduleShiftEdit","ScheduleShiftEmployees","ScheduleShiftEmployeeAdd","ScheduleShiftEmployeeEdit","InsightClasspasses","InsightRevenue","InsightSubscriptions","InsightTrialpasses","SelfCheckinCheckin","SelfCheckinBookingOptions","SelfCheckinLocations","SelfCheckinLocationClasses","ShopHome","ShopAccountHome","ShopAccountBankAccount","ShopAccountClassCancel","ShopAccountClassInfo","ShopClasses","ShopAccountClasspasses","ShopAccountEventTickets","ShopAccountInvoicePayment","ShopAccountInvoicePaymentStatus","ShopAccountInvoices","ShopAccountMailingLists","ShopAccountOrders","ShopAccountProfile","ShopAccountSubscriptions","ShopCheckoutPayment","ShopCheckoutComplete","ShopClassesSchedule","ShopClassBook","ShopClassBooked","ShopClasspasses","ShopClasspass","ShopContact","ShopEvents","ShopEvent","ShopEventTicket","ShopSubscriptions","ShopSubscription","ShopSubscriptionDirectDebitActivated","SettingsHome","SettingsAbout","SettingsFinanceBankAccounts","SettingsFinanceCurrency","SettingsGeneralDateTime","SettingsGeneralSystem","SettingsIntegrationMailChimp","SettingsIntegrationMollie","SettingsMailMailChimpLists","SettingsMailMailChimpListAdd","SettingsMailMailChimpListEdit","SettingsMailTemplates","SettingsMailTemplateEdit","SettingsShopFeatures","SettingsWorkflowClassBooking","SettingsWorkflowShop","SettingsWorkflowSubscriptionPauses","SettingsWorkflowTrial","UserChangePassword","UserLogin","UserLoginRequired","UserLogout","UserSessionExpired","UserWelcome","String","prototype","n","substr","csrftoken","errorLink","onError","networkError","operation","forward","response","forEach","extensions","CSEC","refreshTokenExpired","Observable","observer","client","mutate","subscriber","subscribe","getCsrfToken","fetch","json","Cookies","get","httpLink","createHttpLink","uri","credentials","csrfMiddleware","ApolloLink","set","setContext","headers","ApolloClient","from","cache","InMemoryCache","App","ApolloProvider","Boolean","ReactDOM","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.cd28ffa9.chunk.js","sourcesContent":["import i18n from \"i18next\"\nimport { initReactI18next } from \"react-i18next\"\n// import Backend from 'i18next-xhr-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\n// the translations\n// (tip move them in a JSON file and import them)\n// const resources = {\n//   en: {\n//     translations: {\n//         school: \"School\"\n//     }\n//   }\n// }\n\nimport en_US_common from \"./i18n/en_US/common\"\nconst resources = {\n    en_US: {\n        common: en_US_common\n    },\n}\n\nconsole.log(resources)\n\n\ni18n\n  // load translation using xhr -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  //   .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    resources,\n    lng: \"en_US\",\n    fallbackLng: \"en_US\",\n    ns: [\"common\"],\n    defaultNS: \"common\",\n    debug: true,\n\n    // keySeparator: false, // we do not use keys in form messages.welcome\n    keySeparator: '.', // we use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    }\n  })\n\n  export default i18n","import { gql } from \"@apollo/client\"\n\n\nexport const TOKEN_AUTH = gql`\n  mutation TokenAuth($username: String!, $password: String!) {\n    tokenAuth(username: $username, password: $password) {\n      payload\n      refreshToken\n      refreshExpiresIn\n    }\n  } \n`\n\n\nexport const TOKEN_VERIFY = gql`\n  mutation VerifyToken($token: String!) {\n    verifyToken(token: $token) {\n      payload\n    }\n  }\n`\n\n\nexport const TOKEN_REFRESH = gql`\n  mutation RefreshToken {\n    refreshToken {\n      token\n      payload\n      refreshExpiresIn\n      refreshToken\n    }\n  }\n`\n\n\nexport const TOKEN_REVOKE = gql`\n  mutation RevokeToken($refreshToken: String!) {\n    revokeToken(refreshToken: $refreshToken) {\n      revoked\n    }\n  }\n`\n\n\nexport const TOKEN_COOKIE_DELETE = gql`\n  mutation {\n    deleteTokenCookie {\n      deleted\n    }\n  }\n`\n\n\nexport const TOKEN_REFRESH_COOKIE_DELETE = gql`\n  mutation {\n    deleteRefreshTokenCookie {\n      deleted\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_PASSWORD = gql`\n  mutation UpdateAccountPassword($input: UpdateAccountPasswordInput!) {\n    updateAccountPassword(input: $input) {\n      ok\n    }\n  }\n`","const cs_error_codes = {\n    USER_NOT_LOGGED_IN: \"USER_NOT_LOGGED_IN\"\n}\n\nexport default cs_error_codes\n","const cs_local_storage_keys = {\n    AUTH_TOKEN: 'costasiella:authToken',\n    AUTH_TOKEN_EXP: 'costasiella:authTokenExp',\n    AUTH_TOKEN_ORIGIAT: 'costasiella:authTokenorigIat',\n    AUTH_REFRESH_TOKEN: 'costasiella:authRefreshToken', \n    AUTH_REFRESH_TOKEN_EXP: 'costasiella:refreshTokenExp',\n    AUTH_LOGIN_NEXT: 'costasiella:authLoginNext',\n    FINANCE_INVOICES_FILTER_STATUS: 'costasiella:financeInvoicesFilterStatus',\n    FINANCE_INVOICES_EDIT_RETURN: 'costasiella:financeInvoiceEditReturn',\n    FINANCE_ORDERS_FILTER_STATUS: 'costasiella:financeOrdersFilterStatus',\n    FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE: 'costasiella:financePaymentBatchCategoriesShowArchive',\n    INSIGHT_CLASSPASSES_YEAR: 'costasiella:insightClasspassesYear',\n    INSIGHT_REVENUE_YEAR: 'costasiella:insightRevenueYear',\n    INSIGHT_SUBSCRIPTIONS_YEAR: 'costasiella:insightSubscriptionsYear',\n    INSIGHT_TRIALPASSES_YEAR: 'costasiella:insightTrialpassesYear',\n    INSIGHT_TRIALPASSES_MONTH: 'costasiella:insightTrialpassesMonth',\n    ORGANIZATION_CLASSTYPES_ARCHIVED: 'costasiella:organizationClasstypesArchived',\n    RELATIONS_ACCOUNTS_FILTER_TYPE: 'costasiella:relationsAccountsFilterType',\n    RELATIONS_ACCOUNTS_SEARCH: 'costasiella:relationsAccountsSearch',\n    RELATIONS_ACCOUNTS_IS_ACTIVE: 'costasiella:relationsAccountsIsActive',\n    RELATIONS_ACCOUNT_NOTES_NOTE_TYPE: 'costasiella:relationsAccountNotesNoteType',\n    RELATIONS_BUSINESSES_SHOW_ARCHIVE: 'costasiella:relationsBusinessesShowArchive',\n    RELATIONS_BUSINESSES_SEARCH: 'costasiella:relationsBusinessesSeach',\n    SCHEDULE_APPOINTMENTS_DATE_FROM: 'costasiella:scheduleAppointmentsDateFrom',\n    SCHEDULE_APPOINTMENTS_DATE_UNTIL: 'costasiella:scheduleAppointmentsDateUntil',\n    SCHEDULE_APPOINTMENTS_ORDER_BY: 'costasiella:scheduleAppointmentsOrderBy',\n    SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE: 'costasiella:scheduleAppointmentsFilterClasstype',\n    SCHEDULE_APPOINTMENTS_FILTER_LOCATION: 'costasiella:scheduleAppointmentsFilterLocation',\n    SCHEDULE_CLASSES_DATE_FROM: 'costasiella:scheduleClassesDateFrom',\n    SCHEDULE_CLASSES_DATE_UNTIL: 'costasiella:scheduleClassesDateUntil',\n    SCHEDULE_CLASSES_ORDER_BY: 'costasiella:scheduleClassesOrderBy',\n    SCHEDULE_CLASSES_FILTER_CLASSTYPE: 'costasiella:scheduleClassesFilterClasstype',\n    SCHEDULE_CLASSES_FILTER_LEVEL: 'costasiella:scheduleClassesFilterLevel',\n    SCHEDULE_CLASSES_FILTER_LOCATION: 'costasiella:scheduleClassesFilterLocation',\n    SCHEDULE_CLASSES_ENROLLMENT_SEARCH: 'costasiella:scheduleClassesEnrollmentSearch',\n    SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH: 'costasiella:scheduleClassesClassAttendanceSearch',\n    SCHEDULE_EVENTS_ARCHIVED: 'costasiella:scheduleEventsArchived',\n    SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH: 'costasiella:scheduleEventsTicketsCustomersSearch',\n    SCHEDULE_SHIFTS_DATE_FROM: 'costasiella:scheduleShiftsDateFrom',\n    SCHEDULE_SHIFTS_DATE_UNTIL: 'costasiella:scheduleShiftsDateUntil',\n    SCHEDULE_SHIFTS_ORDER_BY: 'costasiella:scheduleShiftsOrderBy',\n    SCHEDULE_SHIFTS_FILTER_SHIFT: 'costasiella:scheduleShitsFilterShift',\n    SCHEDULE_SHIFTS_FILTER_LOCATION: 'costasiella:scheduleShiftsFilterLocation',\n    SELFCHECKIN_CHECKIN_SEARCH: 'costasiella:SelfcheckinCheckinSearch',\n    SHOP_ACCOUNT_BANK_ACCOUNT_NEXT: 'costasiella:ShopAccountBankAccountNext',\n    SHOP_CLASSES_DATE_FROM: 'costasiella:shopClassesDateFrom',\n    SHOP_CLASSES_DATE_UNTIL: 'costasiella:shopClassesDateUntil',\n    SHOP_CLASSES_ORDER_BY: 'costasiella:shopClassesOrderBy',\n    SHOP_CLASSES_FILTER_CLASSTYPE: 'costasiella:shopClassesFilterClasstype',\n    SHOP_CLASSES_FILTER_LEVEL: 'costasiella:shopClassesFilterLevel',\n    SHOP_CLASSES_FILTER_LOCATION: 'costasiella:shopClassesFilterLocation',\n}\n\nexport default cs_local_storage_keys\n","import CSLS from \"./cs_local_storage\"\n\n\nexport const CSAuth = {\n    login(tokenData) {\n        // localStorage.setItem(CSLS.AUTH_TOKEN, tokenData.token)\n        localStorage.setItem(CSLS.AUTH_TOKEN_EXP, tokenData.payload.exp)\n        localStorage.setItem(CSLS.AUTH_TOKEN_ORIGIAT, tokenData.payload.origIat)\n        // localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN, tokenData.refreshToken)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN_EXP, tokenData.refreshExpiresIn)\n        localStorage.removeItem(CSLS.AUTH_LOGIN_NEXT)\n    },\n    updateTokenInfo(refreshTokenData) {\n        console.log(\"Token payload:\")\n        console.log(refreshTokenData)\n        // localStorage.setItem(CSLS.AUTH_TOKEN, refreshTokenData.token)\n        localStorage.setItem(CSLS.AUTH_TOKEN_EXP, refreshTokenData.payload.exp)\n        localStorage.setItem(CSLS.AUTH_TOKEN_ORIGIAT, refreshTokenData.payload.origIat)\n        // localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN, refreshTokenData.refreshToken)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN_EXP, refreshTokenData.refreshExpiresIn)\n    },\n    cleanup() {\n        // Like logging out, but don't unset next url. \n        // This function is used when a refreshToken has expired\n        // localStorage.removeItem(CSLS.AUTH_TOKEN)\n        localStorage.removeItem(CSLS.AUTH_TOKEN_EXP)\n        localStorage.removeItem(CSLS.AUTH_TOKEN_ORIGIAT)\n        // localStorage.removeItem(CSLS.AUTH_REFRESH_TOKEN)\n        localStorage.removeItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n    },\n    logout(expired=false) {\n        if (!expired) {\n            // Manual logout, remove everything\n            this.cleanup()\n            localStorage.removeItem(CSLS.AUTH_LOGIN_NEXT)\n        }        \n    }\n}\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_APP_SETTINGS_QUERY = gql`\n  query AppSettings {\n    appSettings(id: \"QXBwU2V0dGluZ3NOb2RlOjE=\") {\n      dateFormat\n      timeFormat\n      timeFormatMoment\n      dateTimeFormatMoment\n      onlinePaymentsAvailable\n    }\n  }\n`\n\n\nexport const UPDATE_APP_SETTINGS = gql`\n  mutation UpdateAppSettings($input: UpdateAppSettingsInput!) {\n    updateAppSettings(input: $input) {\n      appSettings {\n        id\n      }\n    }\n  }\n`","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORGANIZATION_QUERY = gql`\n  query Organization($id: ID!) {\n    organization(id:$id) {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n      urlLogoLogin\n      urlLogoInvoice\n      urlLogoEmail\n      urlLogoShopHeader\n      urlLogoSelfCheckin\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { ToastContainer, Slide } from 'react-toastify'\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\"\n\n\nfunction CSStandalonePageWide({ t, urlLogo=\"\", children}) {\n\n  return (\n    <Page>\n      <div className=\"page-single\">\n        <Container>\n          <Grid.Row>\n            <div className=\"col mx-auto\">            \n              <div className=\"text-center mb-5\">\n                { (urlLogo) ? <img src={urlLogo} className=\"h-9\" alt=\"logo\" /> : \"\" }\n              </div>\n              {children}\n              <ToastContainer \n                autoClose={5000} \n                transition={Slide}\n              />\n            </div>\n          </Grid.Row>\n        </Container>\n      </div>\n    </Page>\n  )\n}\n\nexport default withTranslation()(CSStandalonePageWide)\n\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport {\n  Dimmer\n} from \"tabler-react\"\n\nimport CSStandalonePageWide from './CSStandalonePageWide'\n\n\nfunction CSStandalonePageLoader() {\n  return (\n    <CSStandalonePageWide>\n      <div className='text-center'>\n        <Dimmer active={true} loader={true} />\n      </div>\n    </CSStandalonePageWide>\n  )\n}\n\nexport default withTranslation()(CSStandalonePageLoader)\n\n\n\n","import React from 'react'\n\nconst AppSettingsContext = React.createContext({})\n\nexport const AppSettingsProvider = AppSettingsContext.Provider\nexport const AppSettingsConsumer = AppSettingsContext.Consumer\n\nexport default AppSettingsContext","import React from 'react'\n\nconst OrganizationContext = React.createContext({})\n\nexport const OrganizationProvider = OrganizationContext.Provider\nexport const OrganizationConsumer = OrganizationContext.Consumer\n\nexport default OrganizationContext","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SHOP_FEATURES_QUERY = gql`\n  query SystemFeatureShop {\n    systemFeatureShop(id: \"U3lzdGVtRmVhdHVyZVNob3BOb2RlOjE=\") {\n      memberships\n      subscriptions\n      classpasses\n      classes\n      events\n    }\n  }\n`\n\n\nexport const UPDATE_SHOP_FEATURES = gql`\n  mutation UpdateSystemFeatureShop($input: UpdateSystemFeatureShopInput!) {\n    updateSystemFeatureShop(input: $input) {\n      systemFeatureShop {\n        id\n      }\n    }\n  }\n`","import * as React from \"react\"\nimport { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport { GET_SHOP_FEATURES_QUERY } from \"../components/settings/shop/features/queries\"\nimport OrganizationContext from './context/OrganizationContext'\nimport CSLS from \"../tools/cs_local_storage\"\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\ntype subNavItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +LinkComponent?: React.ElementType,\n|};\n\ntype navItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +active?: boolean,\n  +LinkComponent?: React.ElementType,\n  +subItems?: Array<subNavItem>,\n  +useExact?: boolean,\n|};\n\n\nconst getNavBarItems = (t, loading, error, data) => {\n  const shopFeatures = data.systemFeatureShop\n\n  let items: Array<navItem> = []\n  // let permissions = get_all_permissions(user)\n\n  if (loading) {\n    items.push({\n      value: t(\"general.loading_with_dots\"),\n      to: \"/\",\n      icon: \"\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true, \n    })\n\n    return items\n  }\n\n  if (error) {\n    items.push({\n      value: t(\"general.error_sad_smiley\"),\n      to: \"/\",\n      icon: \"\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true, \n    })\n\n    return items\n  }\n\n  items.push({\n    value: t(\"shop.home.title\"),\n    to: \"/\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n\n  if (shopFeatures.subscriptions) {\n    items.push({\n      value: t(\"shop.subscriptions.title\"),\n      to: \"/shop/subscriptions\",\n      icon: \"edit\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.classpasses) {\n    items.push({\n      value: t(\"shop.classpasses.title\"),\n      to: \"/shop/classpasses\",\n      icon: \"credit-card\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.classes) {\n    items.push({\n      value: t(\"shop.classes.title\"),\n      to: \"/shop/classes\",\n      icon: \"book\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.events) {\n    items.push({\n      value: t(\"shop.events.title\"),\n      to: \"/shop/events\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  items.push({\n    value: t(\"shop.contact.title\"),\n    to: \"/shop/contact\",\n    icon: \"message-square\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Check if refresh token is present and if so, hasn't expired\n  const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n  let accountTitle = t(\"shop.account.title\")\n  let accountLink = \"/shop/account\"\n  if (new Date() / 1000 >= refreshTokenExp || refreshTokenExp == null ) {\n    accountTitle = t(\"general.sign_in\")\n    accountLink = \"/user/login\"\n  }\n\n  items.push({\n    value: accountTitle,\n    to: accountLink,\n    icon: \"user\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  return items\n}\n\nfunction getHeaderImageUrl(organization) {\n  let imageURL = \"/d/static/logos/stock/logo_stock_backend.png\"\n\n  if (organization) {\n    if (organization.urlLogoShopHeader) {\n      imageURL = organization.urlLogoShopHeader\n    }\n  }\n\n  return imageURL\n}\n\nconst now = new Date()\n\nfunction SiteWrapperShop({t, match, history, children}) {\n  const { loading, error, data } = useQuery(GET_SHOP_FEATURES_QUERY)\n  const organization = useContext(OrganizationContext)\n\n  if (loading) return <CSStandalonePageLoader/>;\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  const headerImageUrl = getHeaderImageUrl(organization)\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n          href: \"/\",\n          alt: \"Costasiella\",\n          imageURL: headerImageUrl, // Set logo url here\n          navItems: (\n            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n              {(data.user) ? (data.user.instructor || data.user.employee) ? <Link to=\"/user/welcome\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"link\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('goto.title')}\n                </Button>\n              </Link> : \"\" : \"\"}\n            </Nav.Item>\n          ),\n          \n          // notificationsTray: {\n          //   notificationsObjects,\n          //   markAllAsRead: () =>\n          //     this.setState(\n          //       () => ({\n          //         notificationsObjects: this.state.notificationsObjects.map(\n          //           v => ({ ...v, unread: false })\n          //         ),\n          //       }),\n          //       () =>\n          //         setTimeout(\n          //           () =>\n          //             this.setState({\n          //               notificationsObjects: this.state.notificationsObjects.map(\n          //                 v => ({ ...v, unread: true })\n          //               ),\n          //             }),\n          //           5000\n          //         )\n          //     ),\n          //   unread: unreadCount,\n          // },\n        //   accountDropdown: {\n        //   avatarURL: \"#\",\n        //   name: data.user.firstName + ' ' + data.user.lastName,\n        //   description: \"\",\n        //   options: [\n        //     // { icon: \"user\", value: \"Profile\" },\n        //     { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n        //     { isDivider: true },\n        //     { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n        //   ],\n        // },\n        }}\n        // navProps={{ itemsObjects: navBarItems }}\n        navProps={{ itemsObjects: getNavBarItems(t, loading, error, data) }}\n        routerContextComponentType={withRouter(RouterContextProvider)}\n        footerProps={{\n          // links: [\n          //   <a href=\"#\">First Link</a>,\n          //   <a href=\"#\">Second Link</a>,\n          //   <a href=\"#\">Third Link</a>,\n          //   <a href=\"#\">Fourth Link</a>,\n          //   <a href=\"#\">Five Link</a>,\n          //   <a href=\"#\">Sixth Link</a>,\n          //   <a href=\"#\">Seventh Link</a>,\n          //   <a href=\"#\">Eigth Link</a>,\n          // ],\n          // note:\n          //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n          copyright: (\n            <React.Fragment>\n              <small>\n                Peacefully powered by\n                <a\n                  href=\"https://www.costasiella.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Costasiella\n                </a>{\". \"}\n                All rights reserved © {now.getFullYear()}.\n              </small>\n            </React.Fragment>\n          ),\n          nav: (\n            <React.Fragment>\n              <Grid.Col auto={true}>\n                <Link to=\"/cookie_policy\">\n                  {t(\"cookie_policy.title\")}\n                </Link>\n                {/* <List className=\"list-inline list-inline-dots mb-0\">\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./docs/index.html\">Documentation</a>\n                  </List.Item>\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./faq.html\">FAQ</a>\n                  </List.Item>\n                </List> */}\n              </Grid.Col>\n              <Grid.Col auto={true}>\n                {/* <Button\n                  href=\"https://github.com/tabler/tabler-react\"\n                  size=\"sm\"\n                  outline\n                  color=\"primary\"\n                  RootComponent=\"a\"\n                >\n                  Source code\n                </Button> */}\n              </Grid.Col>\n            </React.Fragment>\n          ),\n        }}\n      >\n      {children}\n      <ToastContainer \n        autoClose={5000} \n        transition={Slide}\n      />\n    </Site.Wrapper>    \n  )\n}\n\n\nexport default withTranslation()(SiteWrapperShop)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Tag,\n} from \"tabler-react\";\n\n\nfunction ShopCheckoutProgress({ t, match, history, checkoutProgress=\"\" }) {\n  let color_order = \"\" \n  let color_payment = \"\"\n  let color_complete = \"\"\n\n  switch(checkoutProgress) {\n    case \"order\":\n      color_order = \"info\"\n      break\n    case \"payment\":\n      color_order = \"success\"\n      color_payment = \"info\"\n      break      \n    case \"complete\":\n      color_order = \"success\"\n      color_payment = \"success\"\n      color_complete = \"success\"\n      break\n    default:\n      break\n  }\n\n  return (\n    <div className=\"d-flex justify-content-center mb-4\">\n    <Tag.List>\n      <Tag color={color_order} addOn={<Icon name=\"shopping-cart\"/>}>\n        {t(\"shop.checkout_progress.order\")} \n      </Tag>\n      <Tag color={color_payment} addOn={<Icon name=\"credit-card\" />}>\n        {t(\"shop.checkout_progress.payment\")} \n      </Tag>\n      <Tag color={color_complete} addOn={<Icon name=\"check\" />}>\n        {t(\"shop.checkout_progress.complete\")}\n      </Tag>\n    </Tag.List>\n    </div>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutProgress))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonBack = ({ t, returnUrl, className=\"\" }) => (\n  <Link to={returnUrl}>\n    <Button\n      className={className}\n      color=\"secondary\"\n      icon=\"arrow-left\">\n        {t(\"general.back\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonBack)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../SiteWrapperShop\"\nimport ShopCheckoutProgress from \"./ShopCheckoutProgress\"\nimport ButtonBack from '../ui/ButtonBack';\n\nfunction ShopBase({ t, match, history, children, title, subTitle, returnUrl, pageHeaderOptions=\"\", checkoutProgress=false }) {\n\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={title} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">\n              {/* Back */}\n              { (returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\" }\n              { pageHeaderOptions }\n            </div>\n          </Page.Header>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                {(checkoutProgress) ?\n                  <ShopCheckoutProgress checkoutProgress={checkoutProgress} />\n                  : \"\" }\n                { children }\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapperShop>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction CookiePolicyBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"cookie_policy.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CookiePolicyBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card, \n} from \"tabler-react\";\nimport CookiePolicyBase from \"./CookiePolicyBase\"\n\n\nfunction CookiePolicy({ t, match, history }) {\n  return (\n    <CookiePolicyBase>\n      <Card>\n        <Card.Body>\n          {t(\"cookie_policy.policy_text\")}\n        </Card.Body>\n      </Card>\n    </CookiePolicyBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CookiePolicy))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_BACKEND_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 100, before: $before, after: $after, displayPublic: true, displayBackend: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayBackend\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`","import { gql } from \"@apollo/client\"\n\nconst GET_USER = gql`\n  query User($before: String, $after: String)  {\n    user {\n      id\n      isActive\n      email\n      firstName\n      lastName\n      employee\n      instructor\n      urlImageThumbnailSmall\n      groups {\n        edges {\n          node {\n            id\n            name\n            permissions(first: 1000, before: $before, after: $after) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n                startCursor\n                endCursor                \n              }\n              edges {\n                node {\n                  id\n                  name\n                  codename\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default GET_USER","export function get_all_permissions(user) {\n    const permissions = {}\n    const groups = user.groups\n    if (groups.edges) {\n      for (let edge_index in groups.edges) {\n        let group_edge = groups.edges[edge_index]\n        if (group_edge.node) {\n          let group_node = group_edge.node \n          if (group_node.permissions.edges) {\n            for (let permission_index in group_node.permissions.edges) {\n              let permission_edge = group_node.permissions.edges[permission_index] \n              if (permission_edge.node) {\n                  let permission_node = permission_edge.node\n                  let codename = permission_node.codename\n                  let codename_split = codename.split('_')\n                  // If code name is not in permissions, create a new set\n                  if (!(codename_split[1] in permissions)) {\n                  permissions[codename_split[1]] = new Set()\n                  }\n                  // Add permission name to set\n                  permissions[codename_split[1]].add(codename_split[0])\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    return permissions\n}\n\n\nexport const has_permission = (permissions, permission, resource) => {\n  let you_shall_not_pass = true\n\n  if (resource in permissions) {\n    if (permissions[resource].has(permission)) {\n      you_shall_not_pass = false\n    }\n  }\n  \n  return !you_shall_not_pass\n}\n","import * as React from \"react\"\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\nimport GET_USER from \"../queries/system/get_user\"\nimport { get_all_permissions, has_permission } from \"../tools/user_tools\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\ntype subNavItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +LinkComponent?: React.ElementType,\n|};\n\ntype navItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +active?: boolean,\n  +LinkComponent?: React.ElementType,\n  +subItems?: Array<subNavItem>,\n  +useExact?: boolean,\n|};\n\n\nconst getNavBarItems = (t, user) => {\n  let items: Array<navItem> = []\n  let permissions = get_all_permissions(user)\n\n  items.push({\n    value: t(\"home.title\"),\n    to: \"/backend\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Relations\n  if (\n    (has_permission(permissions, 'view', 'account'))\n  ){\n    items.push({\n      value: t(\"relations.title\"),\n      to: \"/relations\",\n      icon: \"users\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Schedule\n  if (\n    (has_permission(permissions, 'view', 'scheduleclass')) ||\n    (has_permission(permissions, 'view', 'scheduleevent'))\n  ){\n    items.push({\n      value: t(\"schedule.title\"),\n      to: \"/schedule\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Finance\n  if (\n    (has_permission(permissions, 'view', 'financecostcenter')) ||\n    (has_permission(permissions, 'view', 'financeglaccount')) ||\n    (has_permission(permissions, 'view', 'financetaxrate')) \n  ){\n    items.push({\n      value: t(\"finance.title\"),\n      to: \"/finance\",\n      icon: \"dollar-sign\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Organization\n  if (\n    (has_permission(permissions, 'view', 'organizationclasspass')) || \n    (has_permission(permissions, 'view', 'organizationclasstype')) ||\n    (has_permission(permissions, 'view', 'organizationdiscovery')) ||\n    (has_permission(permissions, 'view', 'organizationlocation')) ||\n    (has_permission(permissions, 'view', 'organizationmembership')) ||  \n    (has_permission(permissions, 'view', 'organization')) \n   ){\n   items.push({\n      value: t(\"organization.title\"),\n      to: \"/organization\",\n      icon: \"feather\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Insight\n  if (\n    (has_permission(permissions, 'view', 'insight'))\n   ){\n    items.push({\n      value: t(\"insight.title\"),\n      to: \"/insight\",\n      icon: \"bar-chart-2\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Automation\n  if (\n    (has_permission(permissions, 'view', 'automation'))\n   ){\n    items.push({\n      value: t(\"automation.title\"),\n      to: \"/automation\",\n      icon: \"loader\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // let goToSubItems = []\n  // if (has_permission(permissions, 'view', 'selfcheckin')) {\n  //   goToSubItems.push(\n  //     { value: t(\"selfcheckin.home.title\"), to: \"/selfcheckin\", LinkComponent: withRouter(NavLink) }\n  //   )\n  // }\n  // goToSubItems.push(\n  //   { value: t(\"shop.title\"), to: \"/shop\", LinkComponent: withRouter(NavLink) }\n  // )\n\n  // // Go to\n  // if (\n  //   (has_permission(permissions, 'view', 'selfcheckin'))\n  //  ){\n  //   items.push({\n  //     value: t(\"goto.title\"),\n  //     icon: \"link\",\n  //     subItems: goToSubItems,\n  //   })\n  // }\n\n\n  return items\n\n}\n\nconst now = new Date()\n\nfunction SiteWrapper({t, match, history, children}) {\n  const { error, loading, data } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader/>;\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  let avatarURL = \"#\"\n  if (data.user.urlImageThumbnailSmall) {\n    avatarURL = data.user.urlImageThumbnailSmall\n  }\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n          href: \"/\",\n          alt: \"Costasiella\",\n          imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n          navItems: (\n            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n              <Link to=\"/settings\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"settings\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('general.settings')}\n                </Button>\n              </Link>\n              <Link to=\"/user/welcome\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"link\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('goto.title')}\n                </Button>\n              </Link>\n            </Nav.Item>\n          ),\n          // notificationsTray: {\n          //   notificationsObjects,\n          //   markAllAsRead: () =>\n          //     this.setState(\n          //       () => ({\n          //         notificationsObjects: this.state.notificationsObjects.map(\n          //           v => ({ ...v, unread: false })\n          //         ),\n          //       }),\n          //       () =>\n          //         setTimeout(\n          //           () =>\n          //             this.setState({\n          //               notificationsObjects: this.state.notificationsObjects.map(\n          //                 v => ({ ...v, unread: true })\n          //               ),\n          //             }),\n          //           5000\n          //         )\n          //     ),\n          //   unread: unreadCount,\n          // },\n          accountDropdown: {\n          avatarURL: avatarURL,\n          name: data.user.firstName + ' ' + data.user.lastName,\n          description: \"\",\n          options: [\n            // { icon: \"user\", value: \"Profile\" },\n            { icon: \"lock\", value: t(\"user.change_password.title\"), to: \"/#/user/password/change/\" },\n            { isDivider: true },\n            { icon: \"user\", value: t(\"shop.account.title\"), to: \"/#/shop/account/\" },\n            { isDivider: true },\n            { icon: \"log-out\", value: t(\"user.logout.title\"), to: \"/#/user/logout/\" },\n          ],\n        },\n        }}\n        // navProps={{ itemsObjects: navBarItems }}\n        navProps={{ itemsObjects: getNavBarItems(t, data.user) }}\n        routerContextComponentType={withRouter(RouterContextProvider)}\n        footerProps={{\n          // links: [\n          //   <a href=\"#\">First Link</a>,\n          //   <a href=\"#\">Second Link</a>,\n          //   <a href=\"#\">Third Link</a>,\n          //   <a href=\"#\">Fourth Link</a>,\n          //   <a href=\"#\">Five Link</a>,\n          //   <a href=\"#\">Sixth Link</a>,\n          //   <a href=\"#\">Seventh Link</a>,\n          //   <a href=\"#\">Eigth Link</a>,\n          // ],\n          // note:\n          //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n          copyright: (\n            <React.Fragment>\n              <small>\n                Copyleft © {now.getFullYear()}.\n                <a\n                  href=\"https://www.costasiella.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Edwin van de Ven\n                </a>{\". \"}\n                All rights reserved.\n              </small>\n            </React.Fragment>\n          ),\n          nav: (\n            <React.Fragment>\n              <Grid.Col auto={true}>\n                {/* <List className=\"list-inline list-inline-dots mb-0\">\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./docs/index.html\">Documentation</a>\n                  </List.Item>\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./faq.html\">FAQ</a>\n                  </List.Item>\n                </List> */}\n              </Grid.Col>\n              <Grid.Col auto={true}>\n                {/* <Button\n                  href=\"https://github.com/tabler/tabler-react\"\n                  size=\"sm\"\n                  outline\n                  color=\"primary\"\n                  RootComponent=\"a\"\n                >\n                  Source code\n                </Button> */}\n              </Grid.Col>\n            </React.Fragment>\n          ),\n        }}\n      >\n        {children}\n        <ToastContainer \n          autoClose={5000} \n          transition={Slide}\n        />\n      </Site.Wrapper>\n  )\n}\n\nexport default withTranslation()(SiteWrapper)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nfunction HomeHomeBase({ t, match, history, children }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.announcements.title\")} />\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(HomeHomeBase))","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport DOMPurify from 'dompurify'\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_BACKEND_ANNOUNCEMENTS_QUERY } from \"./queries\"\nimport HomeHomeBase from './HomeHomeBase';\n\n\nfunction HomeHome({ t, match }) {\n  const { loading, error, data } = useQuery(GET_BACKEND_ANNOUNCEMENTS_QUERY);\n\n  if (loading) return (\n    <HomeHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </HomeHomeBase>\n  )\n  if (error) return (\n    <HomeHomeBase>\n      {t(\"home.home.announcements.error_loading\")}\n    </HomeHomeBase>\n  )\n\n  const announcements = data.organizationAnnouncements\n\n  // Empty list\n  if (!announcements.edges.length) return (\n    <HomeHomeBase>\n      {t(\"home.home.announcements_empty_list\")}\n    </HomeHomeBase>\n  )\n\n  // Data\n  return (\n    <HomeHomeBase>\n      <Grid.Row cards deck>\n        {(announcements.edges.length) ? announcements.edges.map(({ node }) => (\n          <Grid.Col md={6}>\n            <Card title={node.title}>\n              <Card.Body>\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }}></div>\n              </Card.Body>\n            </Card> \n          </Grid.Col>\n        )) : \"\"\n        }\n      </Grid.Row>\n    </HomeHomeBase>\n  )\n}\n\n\n// class HomeHome extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Home home props:\")\n//     console.log(props)\n//   }\n\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title={t(\"home.title\")} />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n//               <Card>\n//                 <Card.Header>\n//                   <Card.Title>{t('home.title')}</Card.Title>\n//                 </Card.Header>\n//                 <Card.Body>\n//                     Hello world!\n//                 </Card.Body>\n//               </Card>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(HomeHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\nfunction SettingsHomeItemButton({ t, link, linkTitle=null }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {linkTitle ? linkTitle: t(\"automation.home.link_edit\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsHomeItemButton))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\n\nimport {\n  Card,\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport AutomationHomeItemButton from \"./AutomationHomeItemButton\"\n\n\nfunction AutomationHome({ t, match, params }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"automation.account.subscriptions.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.invoices.title\")}</h5>\n                  {t(\"automation.account.subscriptions.invoices.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/invoices\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.credits.title\")}</h5>\n                  {t(\"automation.account.subscriptions.credits.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/credits\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.credits_expiration.title\")}</h5>\n                  {t(\"automation.account.subscriptions.credits_expiration.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/credits_expiration\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.mollie_collection.title\")}</h5>\n                  {t(\"automation.account.subscriptions.mollie_collection.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/mollie_collections\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationHome))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Card,\n    Dimmer,\n  } from \"tabler-react\"\n\n\nclass ContentCard extends Component {\n    componentDidMount() {\n      window.addEventListener(\"scroll\", this.handleOnScroll);\n    }\n  \n    componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.handleOnScroll);\n    }\n\n    handleOnScroll = () => {\n      // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n      var scrollTop =\n        (document.documentElement && document.documentElement.scrollTop) ||\n        document.body.scrollTop;\n      var scrollHeight =\n        (document.documentElement && document.documentElement.scrollHeight) ||\n        document.body.scrollHeight;\n      var clientHeight =\n        document.documentElement.clientHeight || window.innerHeight;\n      var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n      if (scrolledToBottom) {\n        const pageInfo = this.props.pageInfo\n        if (pageInfo) {\n          if (pageInfo.hasNextPage) {\n            this.props.onLoadMore()\n          }\n        }\n      }\n    }\n\n    render() {\n      const t = this.props.t\n      const cardTitle = this.props.cardTitle\n      const headerContent = this.props.headerContent\n      const onLoadMore = this.props.onLoadMore \n      const isLoadingMore = this.props.isLoadingMore\n      const pageInfo = this.props.pageInfo\n      const children = this.props.children\n      const cardTabs = this.props.cardTabs\n      const hasCardBody = this.props.hasCardBody \n\n\n      return(\n        <Card>\n          <Card.Header>\n            <Card.Title>{cardTitle}</Card.Title>\n            {headerContent}\n          </Card.Header>\n          {cardTabs}\n          {(hasCardBody) ? \n            <Card.Body>{children}</Card.Body> :\n            children\n          }\n          <Card.Footer>\n            {(isLoadingMore) ? <Dimmer active={true} loader={true}>loading</Dimmer> :\n              (!pageInfo) ? '':\n                (pageInfo.hasNextPage) ? \n                  <Button \n                    link\n                    onClick={onLoadMore} \n                    >\n                    {t('general.load_more')}\n                  </Button>\n                : t('general.loaded_all')\n            }\n          </Card.Footer>\n        </Card>\n      )\n    }\n}\n\nContentCard.defaultProps = {\n  onLoadMore: f=>f,\n  hasCardBody: true,\n  isLoadingMore: false\n}\n  \nexport default withTranslation()(ContentCard)\n","import { gql } from \"@apollo/client\"\n\nexport const GET_TASK_RESULT_QUERY = gql`\nquery TaskResults($before: String, $after: String, $taskName:String) {\n  djangoCeleryResultTaskResults(first: 100, before: $before, after: $after, taskName: $taskName) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        taskId\n        taskName\n        taskArgs\n        taskKwargs\n        status\n        contentType\n        contentEncoding\n        result\n        dateDone\n        traceback\n        meta\n      }\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../ui/ButtonBack\"\n\n\nfunction AutomationBack({ t, returnUrl=\"/automation\" }) { \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(AutomationBack)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionCreditsBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/credits/add\"}>\n                  <Button color=\"primary\" className=\"ml-2\" >\n                    {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditsBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge,\n} from \"tabler-react\";\n\n// Status reference\n// https://docs.celeryproject.org/en/stable/userguide/tasks.html\n\nfunction AutomationTaskResultStatus({t, history, match, status}) {\n  switch(status) {\n    case \"PENDING\":\n      return <Badge color=\"secondary\">{t(\"automation.tasks.result_statuses.pending\")}</Badge>\n    case \"STARTED\":\n      return <Badge color=\"primary\">{t(\"automation.tasks.result_statuses.started\")}</Badge>\n    case \"SUCCESS\":\n      return <Badge color=\"success\">{t(\"automation.tasks.result_statuses.success\")}</Badge>\n    case \"FAILURE\":\n      return <Badge color=\"danger\">{t(\"automation.tasks.result_statuses.failure\")}</Badge>\n    case \"RETRY\":\n      return <Badge color=\"warning\">{t(\"automation.tasks.result_statuses.retry\")}</Badge>\n    case \"REVOKED\":\n      return <Badge color=\"warning\">{t(\"automation.tasks.result_statuses.revoked\")}</Badge>\n    default:\n      return \"status unknown\"\n  }\n}\n\nexport default withTranslation()(withRouter(AutomationTaskResultStatus))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionCreditsBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionCredits({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_add_for_month\"\n    }\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionCreditsBase>\n    )\n  }\n\n  const taskResults = data.djangoCeleryResultTaskResults\n  \n\n  return (\n    <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.credits.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.credits.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCredits))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionCreditForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionCreditForm from './AutomationAccountSubscriptionCreditForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionCreditsBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionCreditForMonth($input:CreateAccountSubscriptionCreditForMonthInput!) {\n    createAccountSubscriptionCreditForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/credits\"\n\n  return (\n    <AutomationAccountSubscriptionCreditsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.credits.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.credits.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionCreditForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\n\nfunction AutomationAccountSubscriptionCreditExpirationBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/credits_expiration/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditExpirationBase))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionCreditExpirationBase from './AutomationAccountSubscriptionCreditExpirationBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\nfunction AutomationAccountSubscriptionCreditExpiration({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_expire\"\n    }\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionCreditExpirationBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionCreditExpirationBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionCreditExpirationBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionCreditExpirationBase>\n    )\n  }\n\n  console.log(\"Automation credits data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  \n\n  return (\n    <AutomationAccountSubscriptionCreditExpirationBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.credits_expiration.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.credits.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionCreditExpirationBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditExpiration))","import React, {useState} from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon\n} from \"tabler-react\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionCreditExpirationBase from './AutomationAccountSubscriptionCreditExpirationBase'\n\n\nconst ADD_TASK = gql`\n  mutation ExpireAccountSubscriptionCredit($input: ExpireAccountSubscriptionCreditInput!) {\n    expireAccountSubscriptionCredit(input:$input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditExpirationAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  let [isSubmitting, setSubmitting] = useState(false)\n  const returnUrl = \"/automation/account/subscriptions/credits_expiration\"\n\n  return (\n    <AutomationAccountSubscriptionCreditExpirationBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.credits_expiration.title_add')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              {t(\"automation.account.subscriptions.credits_expiration.explanation_new_expiration\")}\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <Button \n          color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            onClick={() => {\n              setSubmitting(true)\n              addTask({ variables: {\n                input: {}\n              }, refetchQueries: [\n                {query: GET_TASK_RESULT_QUERY, \n                  variables: {\n                    taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_expire\"\n                }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.credits_expiration.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n          >\n            {t('general.run_task')} <Icon name=\"chevron-right\" />\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n              {t('general.cancel')}\n            </Button>\n          </Link>\n        </Card.Footer>\n      </Card>\n    </AutomationAccountSubscriptionCreditExpirationBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditExpirationAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionInvoicesBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/invoices/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoicesBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionInvoicesBase from './AutomationAccountSubscriptionInvoicesBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionInvoices({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month\"\n    }\n  })\n\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionInvoicesBase>\n    )\n  }\n\n  console.log(\"Automation invoices data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n\n  return (\n    <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.invoices.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.invoices.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoices))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  invoiceDate: Yup.string()\n    .required(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionInvoicesForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('automation.account.subscriptions.invoices.invoice_date')}>\n              <Field component=\"select\" \n                    name=\"invoiceDate\" \n                    className={(errors.invoiceDate) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"today\" key={v4()}>{t('automation.account.subscriptions.invoices.today')}</option>\n                <option value=\"first_of_month\" key={v4()}>{t('automation.account.subscriptions.invoices.invoice_date_first_day_month')}</option>                \n              </Field>\n              <ErrorMessage name=\"invoiceDate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoicesForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionInvoicesForm from './AutomationAccountSubscriptionInvoicesForm'\nimport AutomationAccountSubscriptionInvoicesBase from './AutomationAccountSubscriptionInvoicesBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionInvoicesForMonth($input:CreateAccountSubscriptionInvoicesForMonthInput!) {\n    createAccountSubscriptionInvoicesForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/invoices\"\n\n  return (\n    <AutomationAccountSubscriptionInvoicesBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.invoices.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 ,\n            description: '',\n            invoiceDate: 'today'\n          }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear,\n                  description: values.description,\n                  invoiceDate: values.invoiceDate\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.invoices.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionInvoicesForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionMollieCollectionBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/mollie_collections/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionMollieCollectionBase from './AutomationAccountSubscriptionMollieCollectionBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionMollieCollections({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month_mollie_collection\"\n    }\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionMollieCollectionBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionMollieCollectionBase>\n    )\n  }\n\n  console.log(\"Automation mollie collection data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n  return (\n    <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.mollie_collection.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          {(!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.mollie_collection.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionMollieCollectionBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollections))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionMollieCollectionForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionMollieCollectionForm from './AutomationAccountSubscriptionMollieCollectionForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionMollieCollectionBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionInvoicesMollieCollectionForMonth(\n    $input:CreateAccountSubscriptionInvoicesMollieCollectionForMonthInput!\n  ) {\n    createAccountSubscriptionInvoicesMollieCollectionForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionMollieCollectionAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/mollie_collections\"\n\n  return (\n    <AutomationAccountSubscriptionCreditsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.mollie_collection.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.mollie_collection.tasks.account_subscription_credits_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.mollie_collection.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionMollieCollectionForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\nfunction HomeItemButton({ t, link, linkTitle=null }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {linkTitle ? linkTitle: t(\"settings.home.link_edit\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(HomeItemButton))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\n\nimport GET_USER from '../queries/system/get_user'\nimport { get_all_permissions } from \"../tools/user_tools\"\n\n\nfunction check_permission(permissions, permission, resource) {\n  let you_shall_not_pass = true\n\n  if (resource in permissions) {\n    if (permissions[resource].has(permission)) {\n      you_shall_not_pass = false\n    }\n  }\n  \n  return !you_shall_not_pass\n}\n\nfunction HasPermissionWrapper({t, permission, resource, children, hideLoading=false}) {\n  const {loading, error, data} = useQuery(GET_USER)\n\n  if (loading) {\n    if (!hideLoading) {\n      return <p>{t(\"general.loading_with_dots\")}</p>\n    } else {\n      return \"\"\n    }\n  } \n  if (error) return <p>Error loading user... :(</p>\n\n  const permissions = get_all_permissions(data.user)\n\n  if (check_permission(permissions, permission, resource)) {\n    return children\n  } else {\n    return ''\n  }\n}\n  \nexport default withTranslation()(HasPermissionWrapper)","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass FinanceHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Finance home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n    const linkTitleView = t(\"general.view\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"finance.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.invoices.title\")}</h5>\n                    {t(\"finance.invoices.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/invoices\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.orders.title\")}</h5>\n                    {t(\"finance.orders.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/orders\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.glaccounts.title\")}</h5>\n                    {t(\"finance.glaccounts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/glaccounts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.costcenters.title\")}</h5>\n                    {t(\"finance.costcenters.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/costcenters\"/>\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.taxrates.title\")}</h5>\n                    {t(\"finance.taxrates.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/taxrates\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"insightfinancetaxratesummary\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.taxrates_summary.title\")}</h5>\n                      {t(\"finance.taxrates_summary.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitleView} link=\"/finance/taxrates_summary\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.payment_methods.title\")}</h5>\n                    {t(\"finance.payment_methods.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentmethods\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatch\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_collections.title\")}</h5>\n                      {t(\"finance.payment_batch_collections.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatches/collection\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatch\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_payments.title\")}</h5>\n                      {t(\"finance.payment_batch_payments.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatches/payment\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatchcategory\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_categories.title\")}</h5>\n                      {t(\"finance.payment_batch_categories.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatchcategories\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(FinanceHome))","import { gql } from \"@apollo/client\"\n\nexport const GET_COSTCENTERS_QUERY = gql`\n  query FinanceCostCenters($after: String, $before: String, $archived: Boolean) {\n    financeCostcenters(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          name,\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_COSTCENTER_QUERY = gql`\n  query FinanceCostcenter($id: ID!) {\n    financeCostcenter(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_COSTCENTER = gql`\nmutation CreateFinanceCostCenter($input:CreateFinanceCostCenterInput!) {\n  createFinanceCostcenter(input: $input) {\n    financeCostcenter{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_COSTCENTER = gql`\nmutation UpdateFinanceCostCenter($input: UpdateFinanceCostCenterInput!) {\n  updateFinanceCostcenter(input: $input) {\n    financeCostcenter {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_COSTCENTER = gql`\nmutation ArchiveFinanceCostCenter($input: ArchiveFinanceCostCenterInput!) {\n  archiveFinanceCostcenter(input: $input) {\n    financeCostcenter {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nfunction ButtonAdd({ t, addUrl, className=\"\", buttonText=\"\" }) {\n  if (!buttonText) {\n    buttonText = t(\"general.add\")\n  }\n\n  return (\n    <Link to={addUrl}>\n      <Button\n        className={className}\n        color=\"primary\"\n        icon=\"plus-circle\">\n          {buttonText}\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(ButtonAdd)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceCostCentersBase({t, history, children, showBack=false, returnUrl=\"/finance/costcenters\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeglaccount\">\n                  <ButtonAdd addUrl={\"/finance/costcenters/add\"} />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCentersBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_COSTCENTERS_QUERY, ARCHIVE_COSTCENTER } from \"./queries\"\nimport FinanceCostCentersBase from './FinanceCostCentersBase'\n\n\nfunction FinanceCostCenters({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.costcenters.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_COSTCENTERS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveCostcenter ] = useMutation(ARCHIVE_COSTCENTER)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  if (error) return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.costcenters.error_loading')}</p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  const costcenters = data.financeCostcenters\n\n  // Empty list\n  if (!costcenters.edges.length) { return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.costcenters.empty_list') : t(\"finance.costcenters.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )}\n\n  return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={costcenters.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: costcenters.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeCostcenters.edges\n                        const pageInfo = fetchMoreResult.financeCostcenters.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new costcenters at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeCostcenters: {\n                                __typename: previousResult.financeCostcenters.__typename,\n                                edges: [ ...previousResult.financeCostcenters.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {costcenters.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/costcenters/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveCostcenter({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenters))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const COSTCENTER_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceCostCentersBase from './FinanceCostCentersBase';\nimport { GET_COSTCENTERS_QUERY, ADD_COSTCENTER } from './queries'\nimport { COSTCENTER_SCHEMA } from './yupSchema'\n\n\nfunction FinanceCostCenterAdd({ t, history }) {\n  const returnUrl = \"/finance/costcenters\"\n  const [ addCostcenter ] = useMutation(ADD_COSTCENTER)\n\n  return (\n    <FinanceCostCentersBase showBack={true}>\n      <Card title={t('finance.costcenters.title_add')}>\n        <Formik\n            initialValues={{ name: '', code: '' }}\n            validationSchema={COSTCENTER_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addCostcenter({ variables: {\n                  input: {\n                    name: values.name, \n                    code: values.code\n                  }\n                }, refetchQueries: [\n                    {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('finance.costcenters.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n                <FoForm>\n                    <Card.Body>\n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('finance.code')}>\n                          <Field type=\"text\" \n                                  name=\"code\" \n                                  className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button color=\"link\">\n                            {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenterAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_COSTCENTERS_QUERY, GET_COSTCENTER_QUERY, UPDATE_COSTCENTER } from './queries'\nimport { COSTCENTER_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceCostCentersBase from './FinanceCostCentersBase';\n\n\nfunction FinanceCostCenterEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('finance.costcenters.title_edit')\n  const returnUrl = \"/finance/costcenters\"\n  const { loading, error, data } = useQuery(GET_COSTCENTER_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateCostcenter ] = useMutation(UPDATE_COSTCENTER)\n\n  if (loading) return (\n    <FinanceCostCentersBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  if (error) return (\n    <FinanceCostCentersBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  const initialData = data.financeCostcenter;\n\n  return (\n    <FinanceCostCentersBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              code: initialData.code\n            }}\n            validationSchema={COSTCENTER_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateCostcenter({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    code: values.code\n                  }\n                }, refetchQueries: [\n                    {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('finance.costcenters.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenterEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_GLACCOUNTS_QUERY = gql`\n  query FinanceGLAccounts($after: String, $before: String, $archived: Boolean) {\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          name,\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_GLACCOUNT_QUERY = gql`\n  query FinanceGLAccount($id: ID!) {\n    financeGlaccount(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_GLACCOUNT = gql`\nmutation CreateFinanceGLAccount($input:CreateFinanceGLAccountInput!) {\n  createFinanceGlaccount(input: $input) {\n    financeGlaccount{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_GLACCOUNT = gql`\nmutation UpdateFinanceGLAccount($input: UpdateFinanceGLAccountInput!) {\n  updateFinanceGlaccount(input: $input) {\n    financeGlaccount {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_GLACCOUNT = gql`\nmutation ArchiveFinanceGLAccount($input: ArchiveFinanceGLAccountInput!) {\n  archiveFinanceGlaccount(input: $input) {\n    financeGlaccount {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceGLAccountsBase({ t, history, children, showBack=false, returnUrl=\"/finance/glaccounts\" }) {\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeglaccount\">\n                  <ButtonAdd addUrl=\"/finance/glaccounts/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceGLAccountsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_GLACCOUNTS_QUERY, ARCHIVE_GLACCOUNT } from \"./queries\"\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccounts({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t(\"finance.glaccounts.title\")\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_GLACCOUNTS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveGlaccount ] = useMutation(ARCHIVE_GLACCOUNT)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  if (error) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.glaccounts.error_loading')}</p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  const glaccounts = data.financeGlaccounts\n   \n  // Empty list\n  if (!glaccounts.edges.length) { return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}\n                   headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.glaccounts.empty_list') : t(\"finance.glaccounts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )} \n\n  return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}\n                headerContent={headerOptions}\n                pageInfo={glaccounts.pageInfo}\n                hasCardBody={false}\n                onLoadMore={() => {\n                fetchMore({\n                  variables: {\n                    after: glaccounts.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.financeGlaccounts.edges\n                    const pageInfo = fetchMoreResult.financeGlaccounts.pageInfo\n\n                    return newEdges.length\n                      ? {\n                          // Put the new glaccounts at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          financeGlaccounts: {\n                            __typename: previousResult.financeGlaccounts.__typename,\n                            edges: [ ...previousResult.financeGlaccounts.edges, ...newEdges ],\n                            pageInfo\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {glaccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/glaccounts/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveGlaccount({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceGLAccounts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const GLACCOUNT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { GET_GLACCOUNTS_QUERY, ADD_GLACCOUNT } from './queries'\nimport { GLACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccountAdd({t, history}) {\n  const returnUrl = \"/finance/glaccounts\"\n  const [ addGlaccount ] = useMutation(ADD_GLACCOUNT)\n\n  return (\n    <FinanceGLAccountsBase showBack={true}>\n      <Card title={t('finance.glaccounts.title_add')}>\n        <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={GLACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addGlaccount({ variables: {\n                input: {\n                  name: values.name, \n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.glaccounts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <FoForm>\n                <Card.Body>\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    <Form.Group label={t('finance.code')}>\n                      <Field type=\"text\" \n                              name=\"code\" \n                              className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      color=\"primary\"\n                      className=\"pull-right\" \n                      type=\"submit\" \n                      disabled={isSubmitting}\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button color=\"link\">\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceGLAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceGLAccountAdd))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_GLACCOUNTS_QUERY, GET_GLACCOUNT_QUERY, UPDATE_GLACCOUNT } from './queries'\nimport { GLACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccountEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/glaccounts\"\n  const cardTitle = t('finance.glaccounts.title_edit')\n  const { loading, error, data } = useQuery(GET_GLACCOUNT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateGlaccount ] = useMutation(UPDATE_GLACCOUNT)\n\n  if (loading) return (\n    <FinanceGLAccountsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  if (error) return (\n    <FinanceGLAccountsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  const initialData = data.financeGlaccount;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceGLAccountsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            code: initialData.code\n          }}\n          validationSchema={GLACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateGlaccount({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.glaccounts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n                <Card.Body>\n                  <Form.Group label={t('general.name')}>\n                    <Field type=\"text\" \n                            name=\"name\" \n                            className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                  <Form.Group label={t('finance.code')}>\n                    <Field type=\"text\" \n                            name=\"code\" \n                            className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      className=\"pull-right\"\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      type=\"submit\"\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button\n                        type=\"button\" \n                        color=\"link\" \n                      >\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceGLAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceGLAccountEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_INVOICES_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nfunction ButtonExport({ t, url, className=\"\", buttonText=\"\" }) {\n  if (!buttonText) {\n    buttonText = t(\"general.export\")\n  }\n\n  return (\n    <Link to={url}>\n      <Button\n        className={className}\n        color=\"secondary\"\n        icon=\"download-cloud\">\n          {buttonText}\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(ButtonExport)\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceInvoicesFilter = ({ t, history, data, refetch }) => (\n  <div className=\"mr-2\">\n    {/* Status */}\n    <select \n      className={`${selectClass}`}\n      value={getDefaultValue(CSLS.FINANCE_INVOICES_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_INVOICES_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"finance.invoices.statuses.all\")}</option>\n      <option value=\"DRAFT\" key={v4()}>{t('finance.invoices.statuses.draft')}</option>\n      <option value=\"SENT\" key={v4()}>{t('finance.invoices.statuses.sent')}</option>\n      <option value=\"PAID\" key={v4()}>{t('finance.invoices.statuses.paid')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.invoices.statuses.cancelled')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceInvoicesFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from '../../SiteWrapper'\nimport ButtonExport from '../../ui/ButtonExport';\nimport FinanceInvoicesFilter from \"./FinanceInvoicesFilter\"\n\n\nfunction FinanceInvoicesBase ({ t, history, children, refetch }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <FinanceInvoicesFilter refetch={refetch}/>\n              <ButtonExport url=\"/finance/invoices/export\" className='mr-2' />\n              <Link to=\"/finance/invoices/groups\">\n                <Button\n                  color=\"secondary\"\n                  icon=\"folder\"\n                >\n                  {t('general.groups')}\n                </Button>\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceInvoicesStatus extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance costcenter edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"ALL\":\n        return <Badge color=\"secondary\">{t('finance.invoices.status.ALL')}</Badge>\n      case \"DRAFT\":\n        return <Badge color=\"secondary\">{t('finance.invoices.status.DRAFT')}</Badge>\n      case \"SENT\":\n        return <Badge color=\"primary\">{t('finance.invoices.status.SENT')}</Badge>\n      case \"PAID\":\n        return <Badge color=\"success\">{t('finance.invoices.status.PAID')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.invoices.status.CANCELLED')}</Badge>\n      default:\n        return t('finance.invoices.status.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicesStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: String) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INVOICE_QUERY = gql`\n  query FinanceInvoice($id: ID!, $before: String, $after: String) {\n    financeInvoice(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      invoiceNumber\n      dateSent\n      dateDue\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      paidDisplay\n      balance\n      balanceDisplay\n      creditInvoiceNumber\n      creditInvoiceId\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n            onlinePaymentId\n          }\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    organization(id:\"T3JnYW5pemF0aW9uTm9kZToxMDA=\") {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n    }\n  }\n`\n\n\nexport const UPDATE_INVOICE = gql`\n  mutation UpdateFinanceInvoice($input: UpdateFinanceInvoiceInput!) {\n    updateFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n        summary\n      }\n    }\n  }\n`\n\n\nexport const CANCEL_AND_CREATE_CREDIT_INVOICE = gql`\n  mutation CancelAndCreateCreditFinanceInvoice($input: CancelAndCreateCreditFinanceInvoiceInput!) {\n    cancelAndCreateCreditFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_INVOICE = gql`\n  mutation DeleteFinanceInvoice($input: DeleteFinanceInvoiceInput!) {\n    deleteFinanceInvoice(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const CREATE_INVOICE_ITEM = gql`\n  mutation CreateFinanceInvoiceItem($input: CreateFinanceInvoiceItemInput!) {\n    createFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_INVOICE_ITEM = gql`\n  mutation UpdateFinanceInvoiceItem($input: UpdateFinanceInvoiceItemInput!) {\n    updateFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_INVOICE_ITEM = gql`\n  mutation DeleteFinanceInvoiceItem($input: DeleteFinanceInvoiceItemInput!) {\n    deleteFinanceInvoiceItem(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const DELETE_INVOICE_PAYMENT = gql`\n  mutation DeleteFinanceInvoicePayment($input: DeleteFinanceInvoicePaymentInput!) {\n    deleteFinanceInvoicePayment(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_delete')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n            <button\n              className=\"btn btn-danger\"\n              onClick={() => {\n                deleteFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_delete\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table, \n  Text\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceInvoicesBase from \"./FinanceInvoicesBase\"\nimport FinanceInvoicesStatus from \"../../ui/FinanceInvoiceStatus\"\n\nimport { GET_INVOICES_QUERY, DELETE_FINANCE_INVOICE } from \"./queries\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport moment from 'moment'\n\n\nfunction FinanceInvoices({ t, location, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_INVOICES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [ deleteFinanceInvoice ] = useMutation(DELETE_FINANCE_INVOICE)\n\n  if (loading) return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <p>{t('finance.invoices.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n\n  const invoices = data.financeInvoices\n\n  // Empty list\n  if (!invoices.edges.length) { return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <p>\n          {t('finance.invoices.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )}\n\n  return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}\n                  hasCardBody={false}\n                  pageInfo={invoices.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: invoices.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoices.edges\n                        const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoices at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoices: {\n                                __typename: previousResult.financeInvoices.__typename,\n                                edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.invoice_number')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.relation')} & {t('finance.invoices.summary')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n              {/* <Table.ColHeader>{t('finance.invoices.due')}</Table.ColHeader> */}\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {invoices.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceInvoicesStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <Link to={\"/finance/invoices/edit/\" + node.id}>\n                      {node.invoiceNumber}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.account) ? \n                      <Link to={\"/relations/accounts/\" + node.account.id + \"/profile\"}>\n                        {(node.relationCompany) ? node.relationCompany: node.relationContactName}\n                      </Link> :\n                      (node.relationCompany) ? node.relationCompany: node.relationContactName\n                    }\n                    <br />\n                    <Text.Small color=\"gray\">{node.summary.trunc(20)}</Text.Small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateSent).format(dateFormat)} <br />\n                    {moment(node.dateDue).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.balanceDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/finance/invoices/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n                          msgDescription: <p>{node.invoiceNumber}</p>,\n                          msgSuccess: t('finance.invoices.deleted'),\n                          deleteFunction: deleteFinanceInvoice,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_INVOICES_QUERY, variables: get_list_query_variables() } \n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceInvoices))","import { CSAuth } from './authentication';\nimport { toast } from 'react-toastify'\n\n// Create a link element and simulate a click. This prevents having to redirect creating a pop up that might be blocked.\nfunction download(dataurl) {\n  let link = document.createElement(\"a\");\n  link.href = dataurl\n  // Put the link in the DOM and click it\n  document.body.appendChild(link);\n  link.click();\n  // Cleanup the DOM\n  document.body.removeChild(link);\n}\n\nexport function refreshTokenAndOpenExportLinkInNewTab(t, doTokenRefresh, history, exportUrl) {  \n  doTokenRefresh()\n    .then(({data}) => {\n      console.log(data)\n      CSAuth.updateTokenInfo(data.refreshToken)\n\n      // window.open(url, \"_blank\")\n      download(exportUrl);\n    }).catch((error) => {\n      console.log(error)\n      // history.push(\"/user/login\")\n      // Because safari doesn't deal with double clicks well, let the user refresh.\n      // If there is no valid session, the user will be redirected to the sign-in.\n      toast.error(t(\"general.error_try_refreshing\"), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    })\n}\n","import moment from 'moment'\n\nexport function dateToLocalISO(date) {\n    return moment(date).format(\"YYYY-MM-DD\")\n    // if (date instanceof Date) {\n    //     return date.getFullYear() + '-' + \n    //            (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' +\n    //            (\"0\" + date.getDate()).slice(-2)\n    // } else {\n    //     return date\n    // }\n}\n\nexport function dateToLocalISOTime(date) {\n    if (date instanceof Date) {\n        return date.getHours() + ':' + \n               ('0' + date.getMinutes()).slice(-2)\n    } else {\n        return date\n    }\n}\n\n\nexport function TimeStringToJSDateOBJ(time_string) {\n    // time_string is Expected to be \"HH:MM:SS\"\n    let date_obj = new Date()\n    let time_split = time_string.split(':')\n    date_obj.setHours(time_split[0])\n    date_obj.setMinutes(time_split[1])\n\n    return date_obj\n}\n\n\nexport function getFirstDayMonth(year, month) {\n    const firstDayMonth = moment(`${year}-${month}-01`).startOf('month')\n    return new Date(firstDayMonth)\n}\n\n\nexport function getLastDayMonth(year, month) {\n    const firstDayMonth = moment(`${year}-${month}-01`).endOf('month')\n    return new Date(firstDayMonth)\n}\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INVOICES_EXPORT_SCHEMA = Yup.object().shape({\n    status: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n  })\n","import React, { useContext } from 'react'\nimport DatePicker from \"react-datepicker\"\nimport { withTranslation } from 'react-i18next'\n\nimport AppSettingsContext from \"../context/AppSettingsContext\"\n\n\nfunction CSDatePicker ({t, selected, onChange=f=>f, onBlur=f=>f, className=\"form-control\", isClearable=true, placeholderText=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const sysDateFormat = appSettings.dateFormat\n  let dateFormat\n\n  switch (sysDateFormat) {\n    case \"MM-DD-YYYY\":\n      dateFormat = \"MM-dd-yyyy\"\n      break\n    case \"DD-MM-YYYY\":\n      dateFormat = \"dd-MM-yyyy\"\n      break\n    default:\n      dateFormat = \"yyyy-MM-dd\"\n  }\n\n\n  return (\n    <DatePicker \n        todayButton={t('general.today')}\n        dateFormat={dateFormat}\n        selected={selected}\n        placeholderText={(placeholderText) ? placeholderText : t('datepicker.placeholder')}\n        isClearable={isClearable}\n        className={className}\n        showMonthDropdown\n        showYearDropdown\n        dropdownMode=\"select\"\n        onChange={(date) => onChange(date)}\n        onBlur={() => onBlur()}\n    />\n  )\n}\n\nexport default withTranslation()(CSDatePicker)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonFormCancel = ({ t, returnUrl, className=\"\" }) => (\n  <Link to={returnUrl}>\n    <Button\n      role=\"button\"\n      className={className}\n      color=\"link\"\n    >\n        {t(\"general.cancel\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonFormCancel)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\n\n\nconst ScheduleClassForm = ({ t, history, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                    name=\"status\" \n                    className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"ALL\" key={v4()}>{t('general.all')}</option>\n                <option value=\"DRAFT\" key={v4()}>{t('finance.invoices.status.DRAFT')}</option>\n                <option value=\"SENT\" key={v4()}>{t('finance.invoices.status.SENT')}</option>\n                <option value=\"PAID\" key={v4()}>{t('finance.invoices.status.PAID')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('finance.invoices.status.CANCELLED')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer> \n        <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n        >\n          {t('finance.invoices.export.btn_prepare_export')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassForm))","import React, { useContext, useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Container,\n  Icon,\n  List,\n  Page\n} from \"tabler-react\"\n\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from '../../../SiteWrapper'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport ButtonBack from '../../../ui/ButtonBack';\n\nimport { INVOICES_EXPORT_SCHEMA } from './yupSchema'\nimport FinanceInvoicesExportForm from './FinanceInvoicesExportForm';\nimport moment from 'moment'\n\n\nfunction FinanceInvoicesExport({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [dateStart, setDateStart] = useState(new Date(moment().startOf('month')))\n  const [dateEnd, setDateEnd] = useState(new Date(moment().endOf('month')))\n  const [status, setStatus] = useState(\"ALL\")\n  const [prepared, setPrepared] = useState(false)\n  const [exportUrl, setExportUrl] = useState(\"\")\n\n  const cardTitle = t(\"finance.invoices.export.title\")\n  const returnUrl = \"/finance/invoices\" \n\n  const [ doTokenRefresh ] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Card title={cardTitle}>\n            <Formik\n            initialValues={{ \n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              status: status\n            }}\n            validationSchema={INVOICES_EXPORT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                setDateStart(values.dateStart)\n                setDateEnd(values.dateEnd)\n                setStatus(values.status)\n\n                const isoDateStart = dateToLocalISO(values.dateStart)\n                const isoDateEnd = dateToLocalISO(values.dateEnd)\n                setExportUrl(\n                  `/d/export/invoices/${isoDateStart}/${isoDateEnd}/${status}/`\n                )\n                \n                setSubmitting(false)\n                setPrepared(true)  \n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n              <FinanceInvoicesExportForm\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n              )\n            }\n          </Formik>\n        </Card>\n        {(prepared) ? \n          <Card title={t(\"finance.invoices.export.ready.title\")}>\n            <Card.Body>\n              {t(\"finance.invoices.export.ready.explanation\")}\n              <List>\n                <List.Item>\n                  {t(\"general.period\")}{ \": \" } \n                  {moment(dateStart).format(dateFormat)} { \" - \" }\n                  {moment(dateEnd).format(dateFormat)}\n                </List.Item>\n                <List.Item>\n                  {t(\"general.status\")}: {t(`finance.invoices.status.${status}`)}\n                </List.Item>\n              </List>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                <Icon name=\"download-cloud\" /> {t(\"general.download\")}\n              </Button>\n            </Card.Footer>\n          </Card>\n          : \"\"}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesExport))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceInvoiceEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            {children}\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { CREATE_INVOICE_ITEM, GET_INVOICE_QUERY } from \"../queries\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceItemAdd({t, match}) {\n  const [ addInvoiceItem ] = useMutation(CREATE_INVOICE_ITEM)\n\n    return (\n      <button className=\"btn btn-primary btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          addInvoiceItem({ variables: {\n            input: {\n              financeInvoice: match.params.id              \n            }\n          }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: match.params.id}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.invoice.toast_add_item_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              // setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              // setSubmitting(false)\n            })\n      }}>\n        <Icon prefix=\"fe\" name=\"plus\" /> { ' ' }\n        {t('finance.invoice.item_add')}\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemAdd))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { DELETE_INVOICE_ITEM, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction FinanceInvoiceItemDelete({t, match, node}) {\n  const [deleteInvoiceItem] = useMutation(DELETE_INVOICE_ITEM)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.invoices.item_delete_confirm_msg\"),\n            msgDescription: <p>{node.productName} <br /> {node.description}</p>,\n            msgSuccess: t('finance.invoices.item_deleted'),\n            deleteFunction: deleteInvoiceItem,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemDelete))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport FinanceInvoiceItemDelete from './FinanceInvoiceItemDelete'\n\n\nconst FinanceInvoiceItemEditForm = ({ t, isSubmitting, errors, node, touched, handleChange, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Grid.Row>\n      {/* <Icon name=\"more-vertical\" /> */}\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"productName\" \n                    className={(errors.productName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"productName\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"productName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    component=\"textarea\"\n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"description\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                   name=\"quantity\" \n                   className={(errors.quantity) ? \"form-control is-invalid\" : \"form-control\"} \n                   autoComplete=\"off\" \n                   onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"quantity\", true, true)\n                  }}\n            />\n            <ErrorMessage name=\"quantity\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"price\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field component=\"select\" \n                  name=\"financeTaxRate\" \n                  className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\"\n                  onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"financeTaxRate\", true, true)\n                  }}\n            >\n              {console.log(\"query data in form finance tax rate:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\">{node.totalDisplay}</span> <br /><br />\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\"><FinanceInvoiceItemDelete node={node}/></span><br /><br /> <br />\n          {(Object.keys(touched).length === 0) ? \"\" :\n            <Button \n              color=\"primary\"\n              className=\"pull-right\" \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.submit')}\n            </Button>\n          }\n        </Grid.Col>\n      </Grid.Row>\n      {/* {(Object.keys(touched).length === 0) ? \"\" :\n        <Grid.Row>\n          <Grid.Col md={12} className=\"cs-grid-table-cell\">\n            <Alert type=\"primary\">\n              <p>A change was detected to the item above. Click the save button to save it. </p>\n              <Button \n                color=\"primary\"\n                // className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n            </Alert>\n          </Grid.Col>\n        </Grid.Row>\n      } */}\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_INVOICE_ITEM, GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceItemEditForm from './FinanceInvoiceItemEditForm'\n\n\nfunction FinanceInvoiceItemEdit({t, match, initialValues, node, inputData}) {\n  const [updateInvoiceItem] = useMutation(UPDATE_INVOICE_ITEM)\n\n    return (\n      <Formik\n        initialValues={{\n          productName: initialValues.productName,\n          description: initialValues.description,\n          price: initialValues.price,\n          quantity: initialValues.quantity,\n          financeTaxRate: (initialValues.financeTaxRate) ? initialValues.financeTaxRate.id : null\n        }}\n        // validationSchema={INVOICE_GROUP_SCHEMA}\n        onSubmit={(values, { setSubmitting, setTouched }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateInvoiceItem({ variables: {\n            input: {\n              id: initialValues.id,\n              productName: values.productName, \n              description: values.description,\n              price: values.price,\n              quantity: values.quantity,\n              financeTaxRate: values.financeTaxRate\n            }\n          }, refetchQueries: [\n            {query: GET_INVOICE_QUERY, variables: {id: match.params.id}}\n              // {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.invoice.item.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n              setTouched({})\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n      >\n        {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n          <FinanceInvoiceItemEditForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            touched={touched}\n            handleChange={handleChange}\n            setFieldTouched={setFieldTouched}\n            node={node}\n            inputData={inputData}\n          >\n          </FinanceInvoiceItemEditForm>   \n        )}\n      </Formik>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemEdit))","import React, { useState } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer, \n  Grid, \n} from \"tabler-react\"\n\nimport FinanceInvoiceItemAdd from \"./FinanceInvoiceItemAdd\"\nimport { GET_INVOICE_QUERY } from '../queries'\n\nimport FinanceInvoiceItemEdit from './FinanceInvoiceItemEdit'\n\n\nexport const UPDATE_INVOICE_ITEM = gql`\n  mutation UpdateFinanceInvoiceItem($input: UpdateFinanceInvoiceItemInput!) {\n    updateFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n      }\n    }\n  }\n`\n\nfunction FinanceInvoiceEditItems ({ t, history, match, refetchInvoice, inputData }) {\n  const [ updateItem ] = useMutation(UPDATE_INVOICE_ITEM)\n  const [ updating, setUpdating ] = useState(false)\n\n  const updateLineNumber = ({ node_id, line_number }) => {\n    setUpdating(true)\n    updateItem({ \n      variables: { \n        input: {\n          id: node_id,\n          lineNumber: line_number\n        } \n      },\n      refetchQueries: [\n        { query: GET_INVOICE_QUERY, variables: { id: inputData.financeInvoice.id }}\n      ]\n    }).then(({ data }) => {\n      console.log('got data', data)\n      toast.success((t('finance.invoice.saved_item_sorting')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      setTimeout(() => setUpdating(false), 125)\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      console.log('there was an error sending the query', error)\n      setTimeout(() => setUpdating(false), 125)\n    })\n  }\n\n  const onDragEnd = (result) => {\n    // the only one that is required\n    console.log('onDragEnd triggered...')\n    console.log(result)\n    const { draggableId, destination, source, reason } = result\n    console.log(source)\n    console.log(destination)\n    console.log(reason)\n\n    // Nothing to do, nowhere to go...\n    console.log(\"drop cancelled...\")\n    if (!destination || reason === 'CANCEL') {\n      return\n    }\n\n    // Moved back to the same spot\n    console.log(\"dropped to the same spot\")\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    updateLineNumber({\n      node_id: draggableId,\n      line_number: destination.index\n    })\n  }\n  // const onDragEnd = useCallback((result) => {\n  //   // the only one that is required\n  //   console.log('onDragEnd triggered...')\n  //   console.log(result)\n  //   const { draggableId, destination, source, reason } = result\n  //   console.log(source)\n  //   console.log(destination)\n  //   console.log(reason)\n\n  //   // Nothing to do, nowhere to go...\n  //   console.log(\"drop cancelled...\")\n  //   if (!destination || reason === 'CANCEL') {\n  //     return\n  //   }\n\n  //   // Moved back to the same spot\n  //   console.log(\"dropped to the same spot\")\n  //   if (\n  //     destination.droppableId === source.droppableId &&\n  //     destination.index === source.index\n  //   ) {\n  //     return\n  //   }\n\n  //   updateLineNumber({\n  //     node_id: draggableId,\n  //     line_number: destination.index\n  //   })\n  // }, []);\n\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} >\n      <Card statusColor=\"blue\">\n        <Card.Header>\n          <Card.Title>{t('general.items')}</Card.Title>\n          <Card.Options>\n            <FinanceInvoiceItemAdd />\n          </Card.Options>\n        </Card.Header>\n        <Card.Body>\n          <Dimmer active={updating} loader={updating}>\n              <Grid.Row className=\"cs-grid-table-header\">\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.product\")}</Grid.Col>\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.description\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.quantity_short_and_price\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.tax\")}</Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"><span className=\"float-right\">{t(\"general.total\")}</span></Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"></Grid.Col>\n              </Grid.Row>\n              <Droppable droppableId=\"invoice_items\">\n                {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef} \n                      {...provided.droppableProps} \n                    >\n                      {inputData.financeInvoice.items.edges.map(({ node }, idx) => (\n                        <Draggable \n                          draggableId={node.id}\n                          index={idx}\n                          key={node.id}\n                        >\n                          {(provided, snapshot) => (\n                              <div \n                                ref={provided.innerRef}\n                                index={node.lineNumber}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                >\n                                <FinanceInvoiceItemEdit initialValues={node} inputData={inputData} node={node} />\n                              </div>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                )}\n              </Droppable>\n          </Dimmer>\n        </Card.Body>\n      </Card>\n    </DragDropContext>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditItems))","export const tinymceBasicConf = {\n    resize: true,\n    menubar: false,\n    plugins: 'link image code lists paste fullscreen',\n    statusbar: false,\n    toolbar: ' undo redo | formatselect | bold italic strikethrough | bullist numlist | alignleft aligncenter alignright | link image | pastetext code | fullscreen',    \n}\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditTermsForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"terms\", e.target.getContent())\n            setFieldTouched(\"terms\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTermsForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditFooterForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"footer\", e.target.getContent())\n            setFieldTouched(\"footer\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditFooterForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm,  ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditNoteForm = ({ t, isSubmitting, values, errors, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Tab,\n  TabbedCard\n} from \"tabler-react\"\n\n\nimport { UPDATE_INVOICE, GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceEditTermsForm from \"./FinanceInvoiceEditTermsForm\"\nimport FinanceInvoiceEditFooterForm from \"./FinanceInvoiceEditFooterForm\"\nimport FinanceInvoiceEditNoteForm from \"./FinanceInvoiceEditNoteForm\"\n\n\nfunction FinanceInvoiceEditAdditional({t, history, match, initialData}) {\n  const id = match.params.id\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <TabbedCard initialTab={t('general.terms_and_conditions')}>\n      <Tab title={t('general.terms_and_conditions')}>\n        <Formik\n          initialValues={{ \n            terms: initialData.financeInvoice.terms, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                terms: values.terms, \n              }\n            }, refetchQueries: [\n                {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_terms_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditTermsForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditTermsForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.footer')}>\n        <Formik\n          initialValues={{ \n            footer: initialData.financeInvoice.footer, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                footer: values.footer, \n              }\n            }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_footer_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditFooterForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              handleChange={handleChange}\n              touched={touched}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditFooterForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.note')}>\n        <Formik\n          initialValues={{ \n            note: initialData.financeInvoice.note, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                note: values.note, \n              }\n            }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_note_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditNoteForm>\n          )}\n        </Formik>\n      </Tab>\n    </TabbedCard>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditAdditional))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceInvoiceEditBalance = ({ t, history, financeInvoice }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.balance')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.subtotal')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.subtotalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.tax')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.taxDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.total')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.totalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.paid')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.paidDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.balance')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.balanceDisplay}\n        </span>\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditBalance))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nconst FinanceInvoiceEditOptionsForm = ({ t, isSubmitting, values, errors, handleChange, touched, setFieldValue, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('finance.invoices.invoice_number')}>\n        <Field type=\"text\" \n                name=\"invoiceNumber\" \n                className={(errors.invoiceNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"invoiceNumber\", true, true)\n                }}           \n        />\n        <ErrorMessage name=\"invoiceNumber\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.invoices.date')}>\n        <CSDatePicker \n          className={(errors.dateSent) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateSent}\n          onChange={(date) => {\n            setFieldValue(\"dateSent\", date)\n            setFieldTouched(\"dateSent\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateSent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.invoices.due')}>\n        <CSDatePicker \n          className={(errors.dateDue) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateDue}\n          onChange={(date) => {\n            setFieldValue(\"dateDue\", date)\n            setFieldTouched(\"dateDue\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateDue\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.status')}>\n        <Field component=\"select\" \n              name=\"status\" \n              className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\"\n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"status\", true, true)\n              }}\n        >\n          <option value=\"DRAFT\">{t('finance.invoices.status.DRAFT')}</option>\n          <option value=\"SENT\">{t('finance.invoices.status.SENT')}</option>\n          <option value=\"PAID\">{t('finance.invoices.status.PAID')}</option>\n          <option value=\"CANCELLED\">{t('finance.invoices.status.CANCELLED')}</option>\n        </Field>\n        <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.payment_method')}>\n        <Field component=\"select\" \n              name=\"financePaymentMethod\" \n              className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"financePaymentMethod\", true, true)\n              }}\n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}></option>\n          {inputData.financePaymentMethods.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>  \n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOptionsForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditOptionsForm from \"./FinanceInvoiceEditOptionsForm\"\n\n\nfunction FinanceInvoiceEditOptions({t, match, initialData}) {\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n  \n  let initialPaymentMethod = \"\"\n  if (initialData.financeInvoice.financePaymentMethod) {\n    initialPaymentMethod = initialData.financeInvoice.financePaymentMethod.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateSent = null\n  if (initialData.financeInvoice.dateSent) {\n    dateSent = new Date(initialData.financeInvoice.dateSent)\n  }\n  let dateDue = null\n  if (initialData.financeInvoice.dateDue) {\n    dateDue = new Date(initialData.financeInvoice.dateDue)\n  }\n\n  \n  console.log(\"########\")\n  console.log(initialData)\n  console.log(dateSent)\n  console.log(dateDue)\n\n\n  return (\n    <Card title={t('general.options')} statusColor=\"blue\">\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            invoiceNumber: initialData.financeInvoice.invoiceNumber, \n            dateSent: dateSent,\n            dateDue: dateDue,\n            status: initialData.financeInvoice.status,\n            financePaymentMethod: initialPaymentMethod\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                invoiceNumber: values.invoiceNumber, \n                dateSent: dateToLocalISO(values.dateSent),\n                dateDue: dateToLocalISO(values.dateDue),\n                status: values.status,\n                financePaymentMethod: values.financePaymentMethod,\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_options_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditOptionsForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditOptionsForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport DOMPurify from 'dompurify'\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceInvoiceEditOrganization = ({ t, history, organization }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.from')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div className=\"bold\">\n        {organization.name}\n      </div>\n      {(organization.address) ?\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organization.address)}} />\n        : \"\"\n      }      \n      <div>\n        {organization.phone}\n      </div>\n      <div>\n        {organization.email}\n      </div>\n      <div>\n        {organization.registration}\n      </div>\n      <div>\n        {organization.taxRegistration}\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOrganization))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinanceInvoiceEditSummaryForm = ({ t, isSubmitting, errors, touched, setFieldTouched, handleChange }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group>\n        <Field \n          type=\"text\" \n          name=\"summary\" \n          className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n          autoComplete=\"off\" \n          onChange={(e) => {\n            handleChange(e)\n            setFieldTouched(\"summary\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditSummaryForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Card\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditSummaryForm from \"./FinanceInvoiceEditSummaryForm\"\n\n\nfunction FinanceInvoiceEditSummary({t, history, match, initialData}) {\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.summary')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            summary: initialData.financeInvoice.summary, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                summary: values.summary, \n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_summary_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, setFieldTouched, handleChange }) => (\n            <FinanceInvoiceEditSummaryForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditSummaryForm>\n          )}\n        </Formik>\n        {console.log(initialData)}\n        {(initialData.financeInvoice.creditInvoiceId) ?\n          <Alert type=\"primary\">\n            {t(\"finance.invoice.credit_invoice_for\")} { \" \" }\n            <Link to={`/finance/invoices/edit/${initialData.financeInvoice.creditInvoiceId}`}>\n              <Alert.Link>{initialData.financeInvoice.creditInvoiceNumber}</Alert.Link>\n            </Link>\n          </Alert>\n        : \"\"}\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditSummary))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst FinanceInvoiceEditToForm = ({ t, isSubmitting, errors, touched, handleChange, setFieldTouched }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t(\"finance.invoices.relation_company\")}>\n        <Field type=\"text\" \n                name=\"relationCompany\" \n                className={(errors.relationCompany) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"relationCompany\", true, true)\n                }}           \n        />\n        <ErrorMessage name=\"relationCompany\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_company_registration\")}>\n            <Field type=\"text\" \n                    name=\"relationCompanyRegistration\" \n                    className={(errors.relationCompanyRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCompanyRegistartion\", true, true)\n                    }} \n            />\n            <ErrorMessage name=\"relationCompanyRegistration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_company_tax_registration\")}>\n            <Field type=\"text\" \n                    name=\"relationCompanyTaxRegistration\" \n                    className={(errors.relationCompanyTaxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCompanyTaxRegistration\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationCompanyTaxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t(\"finance.invoices.relation_contact_name\")}>\n        <Field type=\"text\" \n                name=\"relationContactName\" \n                className={(errors.relationContactName) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"relationContactName\", true, true)\n                }}\n        />\n        <ErrorMessage name=\"relationContactName\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_address\")}>\n            <Field type=\"text\" \n                    name=\"relationAddress\" \n                    className={(errors.relationAddress) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationAddress\", true, true)\n                    }} \n            />\n            <ErrorMessage name=\"relationAddress\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_postcode\")}>\n            <Field type=\"text\" \n                    name=\"relationPostcode\" \n                    className={(errors.relationPostcode) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationPostcode\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationPostcode\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_city\")}>\n            <Field type=\"text\" \n                    name=\"relationCity\" \n                    className={(errors.relationCity) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCity\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationCity\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_country\")}>\n            <Field type=\"text\" \n                    name=\"relationCountry\" \n                    className={(errors.relationCountry) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCountry\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationCountry\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          {(Object.keys(touched).length === 0) ? \"\" :\n            <Button \n              color=\"primary\"\n              className=\"pull-right\" \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.submit')}\n            </Button>\n          }\n        </Grid.Col>\n      </Grid.Row>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditToForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport {\n  Card\n} from \"tabler-react\"\n\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditToForm from \"./FinanceInvoiceEditToForm\"\n\n\nfunction FinanceInvoiceEditTo({ t, history, match, initialData }) {\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <Card title={t('general.to')} statusColor=\"blue\">\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            relationCompany: initialData.financeInvoice.relationCompany, \n            relationCompanyRegistration: initialData.financeInvoice.relationCompanyRegistration, \n            relationCompanyTaxRegistration: initialData.financeInvoice.relationCompanyTaxRegistration, \n            relationContactName: initialData.financeInvoice.relationContactName, \n            relationAddress: initialData.financeInvoice.relationAddress, \n            relationPostcode: initialData.financeInvoice.relationPostcode, \n            relationCity: initialData.financeInvoice.relationCity, \n            relationCountry: initialData.financeInvoice.relationCountry, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                relationCompany: values.relationCompany,\n                relationCompanyRegistration: values.relationCompanyRegistration,\n                relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n                relationContactName: values.relationContactName,\n                relationAddress: values.relationAddress,\n                relationPostcode: values.relationPostcode,\n                relationCity: values.relationCity,\n                relationCountry: values.relationCountry\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_to_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n            <FinanceInvoiceEditToForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditToForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTo))","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n// import { get_list_query_variables } from \"../tools\"\nimport { DELETE_INVOICE_PAYMENT, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\nimport moment from 'moment'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { get_list_query_variables } from \"../tools\"\n\n\nfunction FinanceInvoiceEditPaymentDelete({t, match, node}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [deleteInvoicePayment] = useMutation(DELETE_INVOICE_PAYMENT)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.invoices.payment_delete_confirm_msg\"),\n            msgDescription: <p>{ moment(node.date).format(dateFormat) } - {node.amountDisplay}</p>,\n            msgSuccess: t('finance.invoices.payment_deleted'),\n            deleteFunction: deleteInvoicePayment,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditPaymentDelete))\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Icon, \n  Table\n} from \"tabler-react\"\n\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoiceEditPaymentDelete from \"./FinanceInvoiceEditPaymentDelete\"\n\n\nfunction FinanceInvoiceEditPayments ({ t, history, match, refetchInvoice, inputData }) {\n  const id = match.params.id\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const paymentAddUrl = `/finance/invoices/${id}/payment/add`\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.payments')}</Card.Title>\n        <Card.Options>\n          {/* <FinanceInvoiceItemAdd /> */}\n          <Link to={paymentAddUrl}>\n            <Button className=\"btn-sm\" color=\"primary\">\n              <Icon prefix=\"fe\" name=\"plus\" /> {t('finance.invoice.payments.add')} \n            </Button>\n          </Link>\n        </Card.Options>\n      </Card.Header>\n      {(!inputData.financeInvoice.payments.edges.length) ?\n        <Card.Body>\n          <p>{t('finance.invoice.payments.empty_list')}</p>\n        </Card.Body> :\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.amount\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.payment_method\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.note\")}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {inputData.financeInvoice.payments.edges.map(({ node }) => (\n              <Table.Row key={\"payment_\" + node.id}>\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) }\n                </Table.Col>\n                <Table.Col>\n                  { node.amountDisplay }\n                </Table.Col>\n                <Table.Col>\n                  { (node.financePaymentMethod) ? node.financePaymentMethod.name : \"\" }\n                  { (node.onlinePaymentId) ? <div><small className=\"text-muted\">{node.onlinePaymentId}</small></div> : \"\" }\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.note) }}></div>\n                </Table.Col>\n                <Table.Col>\n                  <span className=\"pull-right\">\n                    <Link to={ \"/finance/invoices/\" + inputData.financeInvoice.id + \"/payment/edit/\" + node.id } \n                          className='btn btn-secondary btn-sm mr-2'\n                    >\n                      {t('general.edit')}\n                    </Link>\n                    <FinanceInvoiceEditPaymentDelete node={node} />\n                  </span>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      }\n    </Card>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditPayments))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport { toast } from 'react-toastify'\nimport {\n  Dropdown,\n  Page,\n  Grid,\n  Icon,\n  Button,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport { GET_INVOICE_QUERY, CANCEL_AND_CREATE_CREDIT_INVOICE } from '../queries'\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport FinanceInvoiceEditBase from \"./FinanceInvoiceEditBase\"\nimport FinanceInvoiceEditItems from \"./FinanceInvoiceEditItems\"\nimport FinanceInvoiceEditAdditional from \"./FinanceInvoiceEditAdditional\"\nimport FinanceInvoiceEditBalance from \"./FinanceInvoiceEditBalance\"\nimport FinanceInvoiceEditOptions from \"./FinanceInvoiceEditOptions\"\nimport FinanceInvoiceEditOrganization from \"./FinanceInvoiceEditOrganization\"\nimport FinanceInvoiceEditSummary from \"./FinanceInvoiceEditSummary\"\nimport FinanceInvoiceEditTo from \"./FinanceInvoiceEditTo\"\nimport FinanceInvoiceEditPayments from \"./FinanceInvoiceEditPayments\"\n\nfunction FinanceInvoiceEdit({t, match, history}) {\n  const id = match.params.id\n  const { loading, error, data, refetch } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [cancelAndCreateCreditInvoice] = useMutation(CANCEL_AND_CREATE_CREDIT_INVOICE)\n  \n  // Loading\n  if (loading) return <FinanceInvoiceEditBase>{t('general.loading_with_dots')}</FinanceInvoiceEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceInvoiceEditBase>{t('general.error_sad_smiley')}</FinanceInvoiceEditBase>\n  }\n\n  console.log(data)\n  // Fetch back location from localStorage, if no value set, default back to /finance/invoices\n  let returnUrl = localStorage.getItem(CSLS.FINANCE_INVOICES_EDIT_RETURN)\n  if (!returnUrl) {\n    returnUrl = \"/finance/invoices\"\n  }\n  const export_url = \"/d/export/invoice/pdf/\" + id\n  const payment_add_url = `/finance/invoices/${id}/payment/add`\n\n  return (\n    <FinanceInvoiceEditBase>\n      <Page.Header title={t('finance.invoice.title') + ' #' + data.financeInvoice.invoiceNumber}>\n        <div className=\"page-options d-flex\">\n          {/* Back */}\n          <Link to={returnUrl} \n                className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n          </Link>\n          {/* Add payment */}\n          <Link to={payment_add_url} \n              className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"dollar-sign\" /> {t('finance.invoice.payments.add')} \n          </Link>\n          {/* Export as PDF */}\n          <Button\n            color=\"secondary\"\n            icon=\"printer\"\n            className=\"mr-2\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url\n            )}\n          >\n            {t('general.pdf')} \n          </Button>\n          {/* Tools */}\n          <Dropdown\n            className=\"\"\n            type=\"button\"\n            toggle\n            icon=\"tool\"\n            color=\"secondary\"\n            triggerContent={t(\"general.tools\")}\n            items={[\n              <HasPermissionWrapper permission=\"change\" resource=\"financeinvoice\">\n                <Dropdown.Item\n                  key={v4()}\n                  icon=\"slash\"\n                  onClick={() => {\n                    cancelAndCreateCreditInvoice({ variables: {\n                      input: {\n                        id: id,\n                      }\n                    }, refetchQueries: []\n                    })\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        const creditInvoiceId = data.cancelAndCreateCreditFinanceInvoice.financeInvoice.id\n                        history.push(`/finance/invoices/edit/${creditInvoiceId}`)\n                        toast.success((t('finance.invoice.now_editing_credit_invoice')), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                      })\n                  }}>\n                    {t('finance.invoice.cancel_and_create_credit_invoice')}\n                </Dropdown.Item>\n              </HasPermissionWrapper>\n            ]}>\n          </Dropdown>\n        </div>\n      </Page.Header>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <FinanceInvoiceEditSummary \n            initialData={data}\n          />\n          <Grid.Row>\n            <Grid.Col md={6} ml={0}>\n              <FinanceInvoiceEditOrganization organization={data.organization} />\n            </Grid.Col>\n            <Grid.Col md={6} ml={0}>\n              <FinanceInvoiceEditTo initialData={data} />\n            </Grid.Col>\n          </Grid.Row>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          <FinanceInvoiceEditBalance financeInvoice={data.financeInvoice} />\n          <FinanceInvoiceEditOptions\n            initialData={data}\n          />\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <FinanceInvoiceEditItems inputData={data} refetchInvoice={refetch} />\n          <FinanceInvoiceEditAdditional initialData={data} />\n          <FinanceInvoiceEditPayments inputData={data} />\n        </Grid.Col>\n      </Grid.Row>\n    </FinanceInvoiceEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEdit))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nconst BadgeBoolean = ({ t, value }) => (\n    (value) ?\n        <Badge color=\"success\">{t('general.yes')}</Badge> :\n        <Badge color=\"danger\">{t('general.no')}</Badge> \n)\n\nexport default withTranslation()(BadgeBoolean)","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICE_GROUPS_QUERY = gql`\n  query FinanceInvoiceGroupsQuery($archived: Boolean!) {\n    financeInvoiceGroups(archived: $archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          name\n          nextId\n          dueAfterDays\n          prefix\n          prefixYear\n          autoResetPrefixYear\n          terms\n          footer\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INVOICE_GROUP_QUERY = gql`\n  query FinanceInvoiceGroup($id: ID!) {\n    financeInvoiceGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_INVOICE_GROUP = gql`\nmutation UpdateFinanceInvoiceGroup($input: UpdateFinanceInvoiceGroupInput!) {\n  updateFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ADD_INVOICE_GROUP = gql`\nmutation CreateFinanceInvoiceGroup($input:CreateFinanceInvoiceGroupInput!) {\n  createFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup{\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_INVOICE_GROUP = gql`\nmutation ArchiveFinanceInvoiceGroup($input: ArchiveFinanceInvoiceGroupInput!) {\n  archiveFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction FinanceInvoiceGroupsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showEditBack) ? \n                // Back for add or edit component\n                <ButtonBack returnUrl=\"/finance/invoices/groups\" className=\"mr-2\" />\n              :\n                // Back for list\n                <ButtonBack returnUrl=\"/finance/invoices\" className=\"mr-2\" />\n              }\n              <Link to=\"/finance/invoices/groups/defaults\" \n                    className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"settings\" /> {t('finance.invoice_groups_defaults.title')}\n              </Link> \n              <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeinvoicegroup\">\n                <ButtonAdd addUrl=\"/finance/invoices/groups/add\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_INVOICE_GROUPS_QUERY, ARCHIVE_INVOICE_GROUP } from \"./queries\"\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase'\n\n\nfunction FinanceInvoiceGroups({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.invoice_groups.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_INVOICE_GROUPS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveInvoiceGroup ] = useMutation(ARCHIVE_INVOICE_GROUP)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.invoice_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  const invoiceGroups = data.financeInvoiceGroups\n\n  return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups.title')}\n                   headerContent={headerOptions}\n                   pageInfo={invoiceGroups.pageInfo}\n                   onLoadMore={() => {\n                   fetchMore({\n                     variables: {\n                       after: invoiceGroups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                        const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoiceGroups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoiceGroups: {\n                                __typename: previousResult.financeInvoiceGroups.__typename,\n                                edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups.next_id')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups.due_after_days')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.prefix')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {invoiceGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.nextId}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dueAfterDays}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.prefix} \n                    {(node.prefixYear) ? <span>[{t('general.year')}]<br /></span>: ''}\n                    {(node.autoResetPrefixYear) ? <Text.Small color=\"gray\">\n                      {t('finance.invoice_groups.auto_reset_prefix_year')}\n                    </Text.Small>: ''}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/invoices/groups/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveInvoiceGroup({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INVOICE_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    dueAfterDays: Yup.number()\n      .moreThan(0, t('yup.field_above_0'))\n      .required(t('yup.field_required')),\n    nextId: Yup.number(),\n    prefix: Yup.string(),\n    prefixYear: Yup.boolean(),\n    autoResetPrefixYear: Yup.boolean(),\n    terms: Yup.string(),\n    footer: Yup.string(),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n\nconst FinanceInvoiceGroupForm = ({ t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, returnUrl, edit=false }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.name')}>\n        <Field type=\"text\" \n                name=\"name\" \n                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        {(edit) ?\n        <Grid.Col>\n          <Form.Group label={t('finance.invoice_groups.next_id')}>\n            <Field type=\"text\" \n                    name=\"nextId\" \n                    className={(errors.nextId) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"nextId\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col> : \"\"}\n        <Grid.Col>\n          <Form.Group label={t('finance.invoice_groups.due_after_days')}>\n            <Field type=\"text\" \n                    name=\"dueAfterDays\" \n                    className={(errors.dueAfterDays) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"dueAfterDays\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.prefix')}>\n        <Field type=\"text\" \n                name=\"prefix\" \n                className={(errors.prefix) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"prefix\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"prefixYear\" \n                checked={values.prefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"prefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoResetPrefixYear\" \n                checked={values.autoResetPrefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.auto_reset_prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoResetPrefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.terms')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"terms\", true, true)\n            setFieldValue(\"terms\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"footer\", true, true)\n            setFieldValue(\"footer\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.code')}>\n        <Field type=\"text\" \n                name=\"code\" \n                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button \n            type=\"button\" \n            color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICE_GROUPS_QUERY, ADD_INVOICE_GROUP } from './queries'\nimport { INVOICE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase';\nimport FinanceInvoiceGroupForm from './FinanceInvoiceGroupForm'\n\n\nfunction FinanceInvoiceGroupAdd({ t, history }) {\n  const returnUrl = \"/finance/invoices/groups\"\n  const [addInvoiceGroup] = useMutation(ADD_INVOICE_GROUP)\n\n  return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <Card title={t('finance.invoice_groups.title_add')}>\n        <Formik\n          initialValues={{ \n            name: '', \n            displayPublic: true,\n            dueAfterDays: 30,\n            prefix: 'INV',\n            prefixYear: true,\n            autoResetPrefixYear: true,\n            terms: '',\n            footer: '',\n            code: '' \n          }}\n          validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addInvoiceGroup({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  dueAfterDays: values.dueAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.invoice_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldValue, setFieldTouched }) => (\n            <FinanceInvoiceGroupForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICE_GROUPS_QUERY, GET_INVOICE_GROUP_QUERY, UPDATE_INVOICE_GROUP } from './queries'\nimport { INVOICE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceInvoiceGroupForm from './FinanceInvoiceGroupForm'\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase';\n\n\nfunction FinanceInvoiceGroupEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/invoices/groups\"\n  const cardTitle = t('finance.invoice_groups.title_edit')\n  const { loading, error, data } = useQuery(GET_INVOICE_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateInvoiceGroup ] = useMutation(UPDATE_INVOICE_GROUP)\n\n  if (loading) return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.invoice_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n                    \n  const initialData = data.financeInvoiceGroup;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic,\n            dueAfterDays: initialData.dueAfterDays,\n            nextId: initialData.nextId,\n            prefix: initialData.prefix,\n            prefixYear: initialData.prefixYear,\n            autoResetPrefixYear: initialData.autoResetPrefixYear,\n            terms: initialData.terms,\n            footer: initialData.footer,\n            code: initialData.code\n          }}\n          validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateInvoiceGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  nextId: values.nextId,\n                  dueAfterDays: values.dueAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.invoice_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              edit={true}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction FinanceInvoiceGroupsDefaultsBase({ t, history, children }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl=\"/finance/invoices/groups\" />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsDefaultsBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceGroupDefaultForm({ t, history, inputData, isSubmitting, setFieldTouched, setFieldValue, errors, values, submitForm }) {\n  return (\n    <FoForm>\n      <Dimmer active={isSubmitting} loader={isSubmitting} >\n        <Form.Group>\n          <Field component=\"select\" \n                name=\"financeInvoiceGroup\" \n                className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                onChange={(e) => {\n                  setFieldValue('financeInvoiceGroup', e.target.value)\n                  setFieldTouched('financeInvoiceGroup', true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                autoComplete=\"off\">\n            {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>  \n      </Dimmer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupDefaultForm))","import * as Yup from 'yup'\n\nexport const INVOICE_GROUP_DEFAULT_SCHEMA = Yup.object().shape({\n    financeInvoiceGroup: Yup.string(),\n  })\n","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICE_GROUPS_DEFAULTS_QUERY = gql`\nquery FinanceInvoiceGroupDefaults($archived: Boolean!) {\n  financeInvoiceGroupDefaults(first: 100) {\n    edges {\n      node {\n        id\n        itemType\n        financeInvoiceGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n  financeInvoiceGroups(archived: $archived) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        archived\n        displayPublic\n        name\n        nextId\n        dueAfterDays\n        prefix\n        prefixYear\n        autoResetPrefixYear\n        terms\n        footer\n        code\n      }\n    }\n  }\n}\n`\n\nexport const GET_INVOICE_GROUP_QUERY = gql`\n  query FinanceInvoiceGroup($id: ID!) {\n    financeInvoiceGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_INVOICE_GROUP_DEFAULT = gql`\n  mutation UpdateFinanceInvoiceGroupDefault($input: UpdateFinanceInvoiceGroupDefaultInput!) {\n    updateFinanceInvoiceGroupDefault(input: $input) {\n      financeInvoiceGroupDefault {\n        id\n        itemType\n        financeInvoiceGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { Formik } from 'formik'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport FinanceInvoiceGroupDefaultsBase from './FinanceInvoiceGroupDefaultsBase'\nimport FinanceInvoiceGroupDefaultForm from './FinanceInvoiceGroupDefaultForm'\n\nimport { INVOICE_GROUP_DEFAULT_SCHEMA } from \"./yupSchema\"\nimport { GET_INVOICE_GROUPS_DEFAULTS_QUERY, UPDATE_INVOICE_GROUP_DEFAULT } from \"./queries\"\n\n\nconst fetch_default_type_name = (t, itemType) => {\n  switch(itemType) {\n    case \"MEMBERSHIPS\":\n      return t('finance.invoice_groups_defaults.MEMBERSHIPS')\n    case \"SUBSCRIPTIONS\":\n      return t('finance.invoice_groups_defaults.SUBSCRIPTIONS')\n    case \"CLASSPASSES\":\n      return t('finance.invoice_groups_defaults.CLASSPASSES')\n    case \"DROPINCLASSES\":\n      return t('finance.invoice_groups_defaults.DROPINCLASSES')\n    case \"TRIALCLASSES\":\n      return t('finance.invoice_groups_defaults.TRIALCLASSES')\n    case \"EVENT_TICKETS\":\n      return t('finance.invoice_groups_defaults.EVENT_TICKETS')\n    case \"SHOP_SALES\":\n      return t('finance.invoice_groups_defaults.SHOP_SALES')\n    case \"INSTRUCTOR_PAYMENTS\":\n      return t('finance.invoice_groups_defaults.INSTRUCTOR_PAYMENTS')\n    case \"EMPLOYEE_EXPENSES\":\n      return t('finance.invoice_groups_defaults.EMPLOYEE_EXPENSES')\n    default:\n      return t('finance.invoice_groups_defaults.TYPE_NOT_FOUND')\n  }\n}\n\n\nfunction FinanceInvoiceGroupsDefaults({ t, history }) {\n  const { loading, error, data, fetchMore } = useQuery(GET_INVOICE_GROUPS_DEFAULTS_QUERY, {\n    variables: { archived: false }\n  })\n\n  const [updateDefaultGroup] = useMutation(UPDATE_INVOICE_GROUP_DEFAULT)\n\n  // Loading\n  if (loading) return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <p>{t('finance.invoice_groups_defaults.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n\n  const financeInvoiceGroupDefaults = data.financeInvoiceGroupDefaults\n  \n  // Empty list\n  if (!financeInvoiceGroupDefaults.edges.length) { return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <p>\n          {t('finance.invoice_groups_defaults.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )} \n\n  return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}\n                  pageInfo={financeInvoiceGroupDefaults.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: financeInvoiceGroupDefaults.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                        const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoice_groups_defaults at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoiceGroups: {\n                                __typename: previousResult.financeInvoiceGroups.__typename,\n                                edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('finance.invoice_groups_defaults.item_type')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups_defaults.invoice_group')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeInvoiceGroupDefaults.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    { fetch_default_type_name(t, node.itemType) }\n                  </Table.Col>\n                  <Table.Col>\n                    <Formik\n                      initialValues={{ \n                        financeInvoiceGroup:node.financeInvoiceGroup.id\n                      }}\n                      validationSchema={INVOICE_GROUP_DEFAULT_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log('submit values:')\n                          console.log(values)\n\n                          updateDefaultGroup({ variables: {\n                            input: {\n                              id: node.id,\n                              financeInvoiceGroup: values.financeInvoiceGroup\n                            }\n                          }, refetchQueries: [\n                              // {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data)\n                              toast.success((t('finance.invoice_groups.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                        <FinanceInvoiceGroupDefaultForm\n                          inputData={data}\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          values={values}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          submitForm={submitForm}\n                        />\n                      )}\n                    </Formik>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsDefaults))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport {\n  Page,\n  Grid,\n  Icon,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport { GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceEditBalance from \"../edit/FinanceInvoiceEditBalance\"\n\n\nfunction FinanceInvoicePaymentBase({ t, history, match, children, form_type=\"create\" }) {\n  const invoiceId = match.params.invoice_id\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: queryLoading, error: queryError, data, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n\n  if (queryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (queryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(queryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const invoice_number = inputData.financeInvoice.invoiceNumber\n\n  let title\n  if ( form_type === \"create\" ) {\n    title = t('finance.invoice.payments.add')\n  } else {\n    title = t('finance.invoice.payments.edit')\n  }\n\n  title = title + \" #\" + invoice_number\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={ title }>\n            <div className=\"page-options d-flex\">\n              {/* Back */}\n              <Link to={returnUrl} \n                    className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={8}>\n              {/* Form can go here */}\n              {children} \n            </Grid.Col>\n            <Grid.Col md={4}>\n            <Card statusColor=\"blue\">\n              <Card.Header>\n                <Card.Title>{t('general.info')}</Card.Title>\n              </Card.Header>\n              <Card.Body padding={0}>\n                <h4> #{ invoice_number } </h4>\n                { inputData.financeInvoice.account.fullName } <br />\n                { inputData.financeInvoice.summary }\n              </Card.Body>\n            </Card>\n            <FinanceInvoiceEditBalance financeInvoice={inputData.financeInvoice} />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nconst FinanceInvoicePaymentForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.details')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                selected={values.date}\n                onChange={(date) => setFieldValue(\"date\", date)}\n                onBlur={() => setFieldTouched(\"date\", true)}\n              />\n              <ErrorMessage name=\"date\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n              <Field type=\"text\" \n                      name=\"amount\" \n                      className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.payment_method')}>\n              <Field component=\"select\" \n                      name=\"financePaymentMethod\" \n                      className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in finance payment form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('')}</option>\n                {inputData.financePaymentMethods.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.note')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"note\"\n                initialValue={values.note}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"note\", e.target.getContent())\n                  setFieldTouched(\"note\", true)\n                }}\n              />\n            <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"../tools\"\n\nimport { GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport FinanceInvoicePaymentBase from \"./FinanceInvoicePaymentBase\"\nimport FinanceInvoicePaymentForm from \"./FinanceInvoicePaymentForm\"\n\n\nconst ADD_FINANCE_INVOICE_PAYMENT = gql`\n  mutation CreateFinanceInvoicePayment($input:CreateFinanceInvoicePaymentInput!) {\n    createFinanceInvoicePayment(input:$input) {\n      financeInvoicePayment {\n        id\n      } \n    }\n  }\n`\n\n\nfunction FinanceInvoicePaymentAdd({ t, history, match }) {\n  const invoiceId = match.params.invoice_id\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: queryLoading, error: queryError, data, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n  const [addInvoicePayment] = useMutation(ADD_FINANCE_INVOICE_PAYMENT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (queryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (queryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(queryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n\n  return (\n    <FinanceInvoicePaymentBase form_type={\"create\"}>\n      <Formik\n        initialValues={{ \n          date: new Date() ,\n          amount: inputData.financeInvoice.balance,\n          financePaymentMethod: \"\",\n          note: \"\"\n        }}\n        // validationSchema={FINANCE_INVOICE_PAYMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            addInvoicePayment({ variables: {\n              input: {\n                financeInvoice: invoiceId,\n                date: dateToLocalISO(values.date),\n                amount: values.amount,\n                financePaymentMethod: values.financePaymentMethod,\n                note: values.note\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: { id: invoiceId }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.invoice.payments.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <FinanceInvoicePaymentForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </FinanceInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentAdd))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INVOICE_PAYMENT_QUERY = gql`\n  query FinanceInvoicePayment($id: ID!) {\n    financeInvoicePayment(id:$id) {\n      id\n      date\n      amount\n      financePaymentMethod {\n        id\n        name\n      }\n      note\n      onlinePaymentId\n    }\n  }\n`\n\nexport const UPDATE_FINANCE_INVOICE_PAYMENT = gql`\n  mutation UpdateFinanceInvoicePayment($input:UpdateFinanceInvoicePaymentInput!) {\n    updateFinanceInvoicePayment(input:$input) {\n      financeInvoicePayment {\n        id\n      } \n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"../tools\"\n\nimport { GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport { GET_INVOICE_PAYMENT_QUERY, UPDATE_FINANCE_INVOICE_PAYMENT } from './queries'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport FinanceInvoicePaymentBase from \"./FinanceInvoicePaymentBase\"\nimport FinanceInvoicePaymentForm from \"./FinanceInvoicePaymentForm\"\n\n\n\nfunction FinanceInvoicePaymentEdit({ t, history, match }) {\n  const invoiceId = match.params.invoice_id\n  const id = match.params.id\n  console.log(invoiceId)\n  console.log(id)\n\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: invoiceQueryLoading, error: invoiceQueryError, data: invoiceData, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n  const { loading: paymentQueryLoading, error: paymentQueryError, data: paymentData, } = useQuery(GET_INVOICE_PAYMENT_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [updateInvoicePayment] = useMutation(UPDATE_FINANCE_INVOICE_PAYMENT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (invoiceQueryLoading || paymentQueryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (invoiceQueryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(invoiceQueryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n  // Error\n  if (paymentQueryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(paymentQueryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(invoiceData)\n  console.log(paymentData)\n  const inputData = invoiceData\n  const initialValues = paymentData.financeInvoicePayment\n\n  let initialPaymentMethod\n  if (initialValues.financePaymentMethod) {\n    initialPaymentMethod = initialValues.financePaymentMethod.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDate = null\n  if (initialValues.date) {\n    initialDate = new Date(initialValues.date)\n  }\n\n  return (\n    <FinanceInvoicePaymentBase form_type={\"update\"}>\n      <Formik\n        initialValues={{ \n          date: initialDate,\n          amount: initialValues.amount,\n          financePaymentMethod: initialPaymentMethod,\n          note: initialValues.note\n        }}\n        // validationSchema={FINANCE_INVOICE_PAYMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            updateInvoicePayment({ variables: {\n              input: {\n                id: id,\n                date: dateToLocalISO(values.date),\n                amount: values.amount,\n                financePaymentMethod: values.financePaymentMethod,\n                note: values.note\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: { id: invoiceId }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.invoice.payments.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n        }\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <FinanceInvoicePaymentForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </FinanceInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_ORDERS_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceOrdersFilter = ({ t, history, data, refetch }) => (\n  <div>\n    {/* Status */}\n    <select \n      className={selectClass}\n      value={getDefaultValue(CSLS.FINANCE_ORDERS_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_ORDERS_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t('finance.orders.statuses.all')}</option>\n      <option value=\"RECEIVED\" key={v4()}>{t('finance.orders.statuses.RECEIVED')}</option>\n      <option value=\"AWAITING_PAYMENT\" key={v4()}>{t('finance.orders.statuses.AWAITING_PAYMENT')}</option>\n      <option value=\"PAID\" key={v4()}>{t('finance.orders.statuses.PAID')}</option>\n      <option value=\"DELIVERED\" key={v4()}>{t('finance.orders.statuses.DELIVERED')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.orders.statuses.CANCELLED')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceOrdersFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport FinanceOrdersFilter from \"./FinanceOrdersFilter\"\n\n\nconst FinanceOrdersBase = ({ t, history, children, refetch }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"finance.title\")}>\n          <div className=\"page-options d-flex\">\n            <FinanceOrdersFilter refetch={refetch}/>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n)\n\nexport default withTranslation()(withRouter(FinanceOrdersBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceOrderStatus extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance order status props:\")\n    console.log(props)\n  }\n\n  // ('RECEIVED', _(\"Received\")),\n  // ('AWAITING_PAYMENT', _(\"Awaiting payment\")),\n  // ('PAID', _(\"Paid\")),\n  // ('DELIVERED', _(\"Delivered\")),\n  // ('CANCELLED', _(\"Cancelled\")),\n\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"RECEIVED\":\n        return <Badge color=\"secondary\">{t('finance.orders.statuses.RECEIVED')}</Badge>\n      case \"AWAITING_PAYMENT\":\n        return <Badge color=\"primary\">{t('finance.orders.statuses.AWAITING_PAYMENT')}</Badge>\n      case \"PAID\":\n        return <Badge color=\"success\">{t('finance.orders.statuses.PAID')}</Badge>\n      case \"DELIVERED\":\n        return <Badge color=\"success\">{t('finance.orders.statuses.DELIVERED')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.orders.statuses.CANCELLED')}</Badge>\n      default:\n        return t('finance.orders.statuses.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_ORDERS_QUERY = gql`\n  query FinanceOrders($after: String, $before: String, $status: String) {\n    financeOrders(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          message\n          status\n          total\n          totalDisplay\n          createdAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      orderNumber\n      account {\n        id\n        fullName\n      }\n      message\n      status\n      total\n      totalDisplay\n      createdAt\n      items {\n        edges {\n          node {\n            id\n            productName\n          }\n        }\n      }\n      \n    }\n  }\n`\n\n\nexport const UPDATE_FINANCE_ORDER = gql`\n  mutation UpdateFinanceOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_ORDER = gql`\n  mutation DeleteFinanceOrder($input: DeleteFinanceOrderInput!) {\n    deleteFinanceOrder(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\nimport { DELETE_FINANCE_ORDER, GET_ORDERS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction FinanceOrderDelete({t, match, node}) {\n  const [deleteOrder] = useMutation(DELETE_FINANCE_ORDER)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.orders.delete_confirm_msg\"),\n            msgDescription: <p>{t(\"general.order\")} # { node.orderNumber }</p>,\n            msgSuccess: t('finance.orders.deleted'),\n            deleteFunction: deleteOrder,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_ORDERS_QUERY, variables: get_list_query_variables() },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Table, \n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport { get_list_query_variables } from \"./tools\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceOrdersBase from './FinanceOrdersBase'\nimport FinanceOrderStatus from \"./FinanceOrderStatus\"\nimport FinanceOrderDelete from \"./FinanceOrderDelete\"\n\nimport { GET_ORDERS_QUERY } from \"./queries\"\nimport moment from 'moment'\n\n\n\nfunction FinanceOrders({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormat = appSettings.dateTimeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_ORDERS_QUERY, {\n    variables: {get_list_query_variables},\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <FinanceOrdersBase title={title}>\n      {t(\"general.loading_with_dots\")}\n    </FinanceOrdersBase>\n  )\n\n  if (error) return (\n    <FinanceOrdersBase title={title}>\n      {t(\"finance.orders.error_loading\")}\n    </FinanceOrdersBase>\n  )\n\n  console.log(data)\n  const orders = data.financeOrders\n  console.log(orders)\n\n  // Empty list\n  if (!orders.edges.length) { return (\n    <FinanceOrdersBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.orders.title')}>\n        <p>\n          {t('finance.orders.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceOrdersBase>\n  )}\n\n  return (\n    <FinanceOrdersBase title={title} refetch={refetch}>\n      <ContentCard \n        cardTitle={t('finance.orders.title')} \n        pageInfo={orders.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: orders.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeOrders.edges\n              const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeOrders: {\n                      __typename: previousResult.financeOrders.__typename,\n                      edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              {/* <Table.ColHeader>{t('general.status')}</Table.ColHeader> */}\n              <Table.ColHeader>{t('general.order')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.relation')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {orders.edges.map(({ node }) => (        \n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    # {node.orderNumber} <br />\n                    <FinanceOrderStatus status={node.status} />\n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    \n                  </Table.Col> */}\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateTimeFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.account && node.account.fullName}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <FinanceOrderDelete node={node}/>\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      <Button className='btn-sm float-right' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceOrdersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrders))","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nexport function get_list_query_variables(batchType) {\n  let queryVars = {\n    batchType: batchType.toUpperCase()\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function get_add_options_collection(t, batchType) {\n  return (\n    <List unstyled>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/invoices`}>\n          <b>{t(\"finance.payment_batch_collections.invoices_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_collections.invoices_batch_description\")}</p>\n      </List.Item>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/category`}>\n          <b>{t(\"finance.payment_batch_collections.category_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_collections.category_batch_description\")}</p>\n      </List.Item>\n    </List>\n  )\n}\n\n\nexport function get_add_options_payment(t, batchType) {\n  return (\n    <List unstyled>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/category`}>\n          <b>{t(\"finance.payment_batch_payments.category_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_payments.category_batch_description\")}</p>\n      </List.Item>\n    </List>\n  )\n}","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeFinancePaymentBatchStatus({ t, status }) {\n  switch (status) {\n    case \"SENT_TO_BANK\":\n      return <Badge color=\"success\">{t('finance.payment_batches.status.SENT_TO_BANK')}</Badge> \n    case \"APPROVED\":\n      return <Badge color=\"success\">{t('finance.payment_batches.status.APPROVED')}</Badge> \n    case \"AWAITING_APPROVAL\":\n      return <Badge color=\"primary\">{t('finance.payment_batches.status.AWAITING_APPROVAL')}</Badge> \n    case \"REJECTED\":\n      return <Badge color=\"danger\">{t('finance.payment_batches.status.REJECTED')}</Badge> \n    default:\n      return t(\"finance.payment_batches.status.invalid_type\")\n  }\n}\n\nexport default withTranslation()(BadgeFinancePaymentBatchStatus)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinancePaymentBatchesBase({t, history, match, children, showAdd=false, showBack=false, returnUrl=\"\"}) {\n  const batchType = match.params.batch_type\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentbatch\">\n                  <ButtonAdd addUrl={`/finance/paymentbatches/${batchType}/add_what`} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"financepaymentbatch\">\n                  <ButtonBack returnUrl={returnUrl} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_BATCHES_QUERY = gql`\n  query FinancePaymentBatches($after: String, $before: String, $batchType: String!) {\n    financePaymentBatches(first: 15, before: $before, after: $after, batchType: $batchType) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          status\n          financePaymentBatchCategory {\n            id\n            name\n          }\n          description\n          batchType\n          year\n          month\n          includeZeroAmounts\n          note\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_BATCH_QUERY = gql`\n  query FinancePaymentBatch($id: ID!) {\n    financePaymentBatch(id:$id) {\n      id\n      name\n      status\n      financePaymentBatchCategory {\n        id\n        name\n      }\n      description\n      batchType\n      year\n      month\n      includeZeroAmounts\n      note\n      totalDisplay\n      countItems\n      items {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            account {\n              id\n              fullName\n            }\n            financeInvoice {\n              id\n              invoiceNumber\n            }\n            accountHolder\n            accountNumber\n            accountBic\n            mandateReference\n            mandateSignatureDate\n            amount\n            amountDisplay\n            currency\n            description\n          }\n        }\n      }\n      exports {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            account {\n              id\n              fullName\n            }\n            createdAt\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES = gql`\n  query InputValues($after: String, $before: String, $batchCategoryType: String!) {\n    financePaymentBatchCategories(first: 1000, before:$before, after:$after, archived:false, batchCategoryType: $batchCategoryType) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_PAYMENT_BATCH = gql`\n  mutation CreateFinancePaymentBatch($input:CreateFinancePaymentBatchInput!) {\n    createFinancePaymentBatch(input: $input) {\n      financePaymentBatch {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_PAYMENT_BATCH = gql`\n  mutation UpdateFinancePaymentBatch($input:UpdateFinancePaymentBatchInput!) {\n    updateFinancePaymentBatch(input: $input) {\n      financePaymentBatch {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_PAYMENT_BATCH = gql`\n  mutation DeleteFinancePaymentBatch($input: DeleteFinancePaymentBatchInput!) {\n    deleteFinancePaymentBatch(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport BadgeFinancePaymentBatchStatus from \"../../ui/BadgeFinancePaymentBatchStatus\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentBatchesBase from \"./FinancePaymentBatchesBase\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { GET_PAYMENT_BATCHES_QUERY, DELETE_PAYMENT_BATCH } from \"./queries\"\n\n\nfunction FinancePaymentBatches({t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const batchType = match.params.batch_type\n\n  const { loading, error, data, fetchMore } = useQuery(GET_PAYMENT_BATCHES_QUERY, {\n    variables: get_list_query_variables(batchType),\n  })\n  const [deletePaymentBatch] = useMutation(DELETE_PAYMENT_BATCH)\n\n  let cardTitle\n  let msgEmptyList\n  if (batchType === \"collection\") {\n    cardTitle = t('finance.payment_batch_collections.title')\n    msgEmptyList = t('finance.payment_batch_collections.empty_list')\n  } else {\n    cardTitle = t('finance.payment_batch_payments.title')\n    msgEmptyList = t('finance.payment_batch_payments.empty_list')\n  }\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading')}</p>\n      </ContentCard>\n      </FinancePaymentBatchesBase>\n  )\n\n  let financePaymentBatches = data.financePaymentBatches\n  // Empty list\n  if (!financePaymentBatches.edges.length) { return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle} >\n        <p>{msgEmptyList}</p>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )}\n\n  return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={financePaymentBatches.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: financePaymentBatches.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.financePaymentBatches.edges\n            const pageInfo = fetchMoreResult.financePaymentBatches.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  financePaymentBatches: {\n                    __typename: previousResult.financePaymentBatches.__typename,\n                    edges: [ ...previousResult.financePaymentBatches.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batches.execution_date')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batches.batch_category')}</Table.ColHeader>             \n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {financePaymentBatches.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <BadgeFinancePaymentBatchStatus status={node.status} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.executionDate).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {(node.financePaymentBatchCategory) ? node.financePaymentBatchCategory.name : t(\"general.invoices\")}\n                  {(node.year) ? <div><small className=\"text-muted\">{node.year} - {node.month}</small></div> : \"\"}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/finance/paymentbatches/${batchType}/view/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.view')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"finance.payment_batches.delete_confirm_msg\"),\n                        msgDescription: <p>{node.name}</p>,\n                        msgSuccess: t('finance.payment_batches.deleted'),\n                        deleteFunction: deletePaymentBatch,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType) } \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatches))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card\n} from \"tabler-react\";\n\nimport FinancePaymentBatchesBase from \"./FinancePaymentBatchesBase\"\nimport { get_add_options_collection, get_add_options_payment } from './tools'\n\n\nfunction FinancePaymentBatchAddWhat({t, history, match }) {\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n\n  let cardTitle\n  let options\n  if (batchType === \"collection\") {\n    cardTitle = t('finance.payment_batch_collections.title_add_what')\n    options = get_add_options_collection(t, batchType)\n  } else {\n    cardTitle = t('finance.payment_batch_payments.title_add_what')\n    options = get_add_options_payment(t, batchType)\n  }\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          {options}\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchAddWhat))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinancePaymentBatchCategory extends Component {\n  render() {\n    const t = this.props.t\n    const categoryType = this.props.categoryType\n\n    switch (categoryType) {\n      case \"COLLECTION\":\n        return <Badge color=\"success\">{t('finance.payment_batch_categories.payment_batch_category_type.COLLECTION')}</Badge>\n      case \"PAYMENT\":\n        return <Badge color=\"warning\">{t('finance.payment_batch_categories.payment_batch_category_type.PAYMENT')}</Badge>\n      default:\n        return t('finance.payment_batch_categories.payment_batch_category_type.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategory))","import React, {useState} from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { useMutation } from \"@apollo/client\"\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport { UPDATE_PAYMENT_BATCH, GET_PAYMENT_BATCHES_QUERY } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction FinancePaymentBatchViewBase({t, history, match, children, status}) {\n  const batchId = match.params.id\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n  const exportUrl = `/d/export/finance_payment_batch/csv/${batchId}`\n  const [disabled, setDisabled] = useState(false)\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  let sentToBankColor = \"secondary\"\n  let approvedColor = \"secondary\"\n  let awaitingApprovalColor = \"secondary\"\n  let rejectedColor = \"secondary\"\n\n  switch (status) {\n    case \"SENT_TO_BANK\":\n      sentToBankColor = \"success\"\n      break\n    case \"APPROVED\":\n      approvedColor = \"success\"\n      break\n    case \"AWAITING_APPROVAL\":\n      awaitingApprovalColor = \"primary\"\n      break\n    case \"REJECTED\":\n      rejectedColor = \"danger\"\n      break\n    default:\n      break\n  }\n\n  function onClickStatusButton(newStatus) {\n    setDisabled(true)\n\n    updateFinancePaymentBatch({ \n      variables: { input: {id: batchId, status: newStatus} }, \n      refetchQueries: [\n        {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n    ]})\n    .then(({ data }) => {\n        console.log('got data', data);\n        toast.success((t('finance.payment_batches.toast_edit_status_success')), {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        if (status !== \"SENT_TO_BANK\") {\n          console.log(status)\n          setDisabled(false)\n        }\n      }).catch((error) => {\n        toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        console.log('there was an error sending the query', error)\n        if (status !== \"SENT_TO_BANK\") {\n          console.log(status)\n          setDisabled(false)\n        }\n      })\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} subTitle={t('finance.payment_batch.title_view')}>\n            <div className=\"page-options d-flex\">\n                <Link to={returnUrl} \n                      className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')}\n                </Link>\n                {/* Export as sold as excel sheet */}\n                <Button\n                  className='mr-2'\n                  color=\"secondary\"\n                  RootComponent=\"a\"\n                  icon=\"download-cloud\"\n                  onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                    t, doTokenRefresh, history, exportUrl\n                  )}\n                >\n                  {t(\"general.export\")}\n                </Button>\n                <Link to={`/finance/paymentbatches/${batchType}/edit/${batchId}`} \n                      className='btn btn-secondary'>\n                  <Icon name=\"edit-2\" /> {t('general.edit')}\n                </Link>\n            </div>\n          </Page.Header>\n            {(status) ? \n              (status === \"SENT_TO_BANK\") ?\n                <Button.List>\n                  <Button \n                    icon=\"mail\"\n                    disabled={true}\n                    color={sentToBankColor}\n                    onClick={() => onClickStatusButton(\"SENT_TO_BANK\")}\n                  >\n                    {t('finance.payment_batch.status.SENT_TO_BANK')}\n                  </Button>\n                </Button.List>\n              :\n                <Grid.Row>\n                  <Grid.Col md={12} className=\"mb-2 \">\n                    \n\n                    <Button.List className=\"float-right\">\n                      <Button \n                        icon=\"mail\"\n                        disabled={disabled}\n                        color={sentToBankColor}\n                        onClick={() => onClickStatusButton(\"SENT_TO_BANK\")}\n                      >\n                        {t('finance.payment_batch.status.SENT_TO_BANK')}\n                      </Button>\n                      <Button \n                        icon=\"check\"\n                        disabled={disabled}\n                        color={approvedColor}\n                        onClick={() => onClickStatusButton(\"APPROVED\")}\n                      >\n                        {t('finance.payment_batch.status.APPROVED')}\n                      </Button>\n                      <Button \n                        icon=\"clock\"\n                        disabled={disabled}\n                        color={awaitingApprovalColor}\n                        onClick={() => onClickStatusButton(\"AWAITING_APPROVAL\")}\n                      >\n                        {t('finance.payment_batch.status.AWAITING_APPROVAL')}\n                      </Button>\n                      <Button \n                        icon=\"x\"\n                        disabled={disabled}\n                        color={rejectedColor}\n                        onClick={() => onClickStatusButton(\"REJECTED\")}\n                      >\n                        {t('finance.payment_batch.status.REJECTED')}\n                      </Button>\n                    </Button.List>\n                    <h6 className=\"float-right mr-2\">{t(\"general.status\")}</h6>\n                  </Grid.Col>\n                </Grid.Row>\n              : \"\"\n            }\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchViewBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card,\n  Table,\n  List,\n} from \"tabler-react\"\n\nimport { GET_PAYMENT_BATCH_QUERY } from './queries'\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport FinancePaymentBatchViewBase from './FinancePaymentBatchViewBase'\nimport BadgeBoolean from '../../ui/BadgeBoolean';\n\n\nfunction FinancePaymentBatchView({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const batchId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_QUERY, {\n    variables: { id: batchId }\n  })\n  // const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchViewBase>\n      <p>{t(\"general.loading_with_dots\")}</p>\n    </FinancePaymentBatchViewBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchViewBase>\n      <p>{t('finance.payment_batch.error_loading')}</p>\n    </FinancePaymentBatchViewBase>\n  )\n\n  const financePaymentBatch = data.financePaymentBatch\n  console.log(financePaymentBatch)\n\n  return (\n    <FinancePaymentBatchViewBase status={financePaymentBatch.status}>\n      <Grid.Row>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_info\")}>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.Col>\n                    {t(\"general.name\")}\n                  </Table.Col>\n                  <Table.Col>\n                    {financePaymentBatch.name}\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batch_categories.batch_category_type')}\n                  </Table.Col>\n                  <Table.Col>\n                    <FinancePaymentBatchCategory categoryType={financePaymentBatch.batchType} />\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.batch_category')}\n                  </Table.Col>\n                  <Table.Col>\n                    {\n                      (financePaymentBatch.financePaymentBatchCategory) ? \n                        <div>\n                          {financePaymentBatch.financePaymentBatchCategory.name}\n                          <div><small className=\"text-muted\">{financePaymentBatch.year} - {financePaymentBatch.month}</small></div>\n                        </div> : \n                        t(\"general.invoices\")\n                    }\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.execution_date')}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(financePaymentBatch.executionDate).format(dateFormat)}\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.include_zero_amounts')}\n                  </Table.Col>\n                  <Table.Col>\n                    <BadgeBoolean value={financePaymentBatch.includeZeroAmounts} />\n                  </Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_totals\")}>\n            <Table cards>\n              <Table.Row>\n                <Table.Col>\n                  {t('general.total')}\n                </Table.Col>\n                <Table.Col>\n                  {financePaymentBatch.totalDisplay}\n                </Table.Col>\n              </Table.Row>\n              <Table.Row>\n                <Table.Col>\n                  {t('general.items')}\n                </Table.Col>\n                <Table.Col>\n                  {financePaymentBatch.countItems}\n                </Table.Col>\n              </Table.Row>\n            </Table>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_exports\")}>\n            <Card.Body>\n              <List unstyled>\n              {financePaymentBatch.exports.edges.map(({ node }) => (\n                <List.Item>\n                  {moment(node.createdAt).format(dateTimeFormat)} <br /> \n                  <small>{node.account && node.account.fullName}</small>\n                </List.Item>\n              ))}\n              </List>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {(financePaymentBatch.note) ?\n        <Grid.Row>\n          <Grid.Col md={12}>\n              <Card title={t(\"finance.payment_batch.title_batch_note\")}>\n                <Card.Body>\n                  {financePaymentBatch.note}\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n      : \"\" }\n      <Grid.Row>\n        <Grid.Col>\n          <Card title={t(\"finance.payment_batch.title_batch_items\")}>\n            <small>\n              <Table cards >\n                <Table.Header>\n                  <Table.Row>\n                    <Table.ColHeader>\n                      {t(\"general.line\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.account\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"relations.account.bank_accounts.holder\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"relations.account.bank_accounts.number\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.description\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"settings.finance.currency.title\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.amount\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"finance.invoices.invoice_number\")}\n                    </Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {financePaymentBatch.items.edges.map(({ node }, index) => (\n                    <Table.Row>\n                      <Table.Col>{index + 1}</Table.Col>\n                      <Table.Col>\n                        {node.account && \n                          <Link to={`/relations/accounts/${node.account.id}/profile`}>\n                            {node.account.fullName}\n                          </Link>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        {node.accountHolder}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.accountNumber} {(node.accountBic) ? <div>{node.accountBic}</div> : \"\"}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.description}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.currency}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.amountDisplay}\n                      </Table.Col>\n                      <Table.Col>\n                        {(node.financeInvoice) ?\n                          <Link to={`/finance/invoices/edit/${node.financeInvoice.id}`}>\n                            {node.financeInvoice.invoiceNumber}\n                          </Link> : \"\" }\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </small>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '', executionDate: new Date() }}\n          // validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType == \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputValues={inputValues}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card> */}\n    </FinancePaymentBatchViewBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchView))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_BATCH_INVOICES_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    executionDate: Yup.date()\n      .required(t('yup.field_required')),\n    note: Yup.string(),\n    includeZeroAmounts: Yup.boolean()\n  })\n\nexport const PAYMENT_BATCH_CATEGORY_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n  executionDate: Yup.date()\n    .required(t('yup.field_required')),\n  financePaymentBatchCategory: Yup.string()\n  .required(t('yup.field_required')),\n  year: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  month: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  note: Yup.string(),\n  includeZeroAmounts: Yup.boolean()\n  })\n\nexport const PAYMENT_BATCH_EDIT_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nconst FinancePaymentCollectionBatchForm = (\n  { t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, inputData, returnUrl, create=false, category=false }\n  ) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          {(create) ? \n            <Grid.Col>\n              <Form.Group label={t('finance.payment_batches.execution_date')}>\n                <CSDatePicker \n                  selected={values.executionDate}\n                  onChange={(executionDate) => {\n                    setFieldValue(\"executionDate\", executionDate)\n                    setFieldTouched(\"executionDate\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"executionDate\", true)}\n                  placeholderText={t('')}\n                />\n                <ErrorMessage name=\"executionDate\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            : \"\" \n          }\n        </Grid.Row>\n        {(create && category) ?\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.category')}>\n                <Field component=\"select\" \n                        name=\"financePaymentBatchCategory\" \n                        className={(errors.financePaymentBatchCategory) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                  <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                  {inputData.financePaymentBatchCategories.edges.map(({ node }) =>\n                    <option value={node.id} key={v4()}>{node.name}</option>\n                  )}\n                </Field>\n                <ErrorMessage name=\"financePaymentBatchCategory\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.year')} >\n                <Field type=\"text\" \n                      name=\"year\" \n                      className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.month')} >\n                <Field type=\"text\" \n                      name=\"month\" \n                      className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row> \n          : \"\"\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.note')}>\n              <Field type=\"textarea\"\n                     component=\"textarea\" \n                     name=\"note\" \n                     className={(errors.note) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {(create) ? \n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"includeZeroAmounts\" \n                  checked={values.includeZeroAmounts} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('finance.payment_batches.include_zero_amounts')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"includeZeroAmounts\" component=\"div\" />   \n              </Form.Group>  \n            </Grid.Col>\n          </Grid.Row>\n          : \"\" \n        }\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { ADD_PAYMENT_BATCH, GET_PAYMENT_BATCHES_QUERY, GET_INPUT_VALUES } from './queries'\nimport { PAYMENT_BATCH_INVOICES_SCHEMA, PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport FinancePaymentBatchesBase from './FinancePaymentBatchesBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\n\n\nfunction FinancePaymentCollectionBatchAdd({ t, history, match }) {\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}/add_what`\n  const categoryType = match.params.category_type\n  const cardTitle = t('finance.payment_batch.title_add')\n\n\n  let invoices = false\n  let category = false\n  switch (categoryType) {\n    case \"invoices\":\n      invoices = true\n      break\n    case \"category\":\n      category = true\n      break\n    default:\n      break\n  }\n\n  let batchCategoryType\n  switch (batchType) {\n    case \"collection\":\n      batchCategoryType = \"COLLECTION\"\n      break\n    case \"payment\":\n      batchCategoryType = \"PAYMENT\"\n      break\n    default:\n      break\n  }\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES, { variables: {\n    batchCategoryType: batchCategoryType\n  }})\n  const [addFinancePaymentBatch] = useMutation(ADD_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card cardTitle={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading_input_values')}</p>\n      </Card>\n      </FinancePaymentBatchesBase>\n  )\n\n  const inputData = data\n\n  let initialValues = { name: '', description: '', executionDate: new Date() }\n  let yupSchema\n  if (categoryType === \"category\") {\n    initialValues.year = new Date().getFullYear()\n    initialValues.month = new Date().getMonth() + 1\n    yupSchema = PAYMENT_BATCH_CATEGORY_SCHEMA\n  } else {\n    yupSchema = PAYMENT_BATCH_INVOICES_SCHEMA\n  }\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={yupSchema}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType === \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                const id = data.createFinancePaymentBatch.financePaymentBatch.id\n                history.push(`/finance/paymentbatches/${batchType}/view/${id}`)\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputData={inputData}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { UPDATE_PAYMENT_BATCH, GET_PAYMENT_BATCH_QUERY, GET_PAYMENT_BATCHES_QUERY } from './queries'\nimport { PAYMENT_BATCH_EDIT_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\nimport FinancePaymentBatchesBase from './FinancePaymentBatchesBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\n\n\nfunction FinancePaymentCollectionBatchEdit({ t, history, match }) {\n  const batchType = match.params.batch_type\n  const batchId = match.params.id\n  const returnUrl = `/finance/paymentbatches/${batchType}/view/${batchId}`\n  const cardTitle = t('finance.payment_batch.title_edit')\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_QUERY, {\n    variables: { id: batchId }\n  })\n  const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={false} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading_input_values')}</p>\n      </Card>\n      </FinancePaymentBatchesBase>\n  )\n\n  const inputValues = data.financePaymentBatch\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: inputValues.name , note: inputValues.note }}\n          validationSchema={PAYMENT_BATCH_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                id: batchId,\n                name: values.name, \n                note: values.note,\n            }\n\n            updateFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                create={false}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let showArchive = localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE)\n  if (showArchive === null) {\n    showArchive = \"false\"\n  }\n\n  let queryVars = {\n    archived: (showArchive === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinancePaymentBatchCategoriesBase({t, history, children, showAdd=false, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className={'page-options d-flex'}>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentbatchcategory\">\n                  <ButtonAdd addUrl={'/finance/paymentbatchcategories/add'} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"financepaymentbatchcategory\">\n                  <ButtonBack returnUrl=\"/finance/paymentbatchcategories\" />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoriesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_BATCH_CATEGORIES_QUERY = gql`\n  query FinancePaymentBatchCategories($after: String, $before: String, $archived: Boolean) {\n    financePaymentBatchCategories(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          description\n          batchCategoryType\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_BATCH_CATEGORY_QUERY = gql`\n  query FinancePaymentBatchCategory($id: ID!) {\n    financePaymentBatchCategory(id:$id) {\n      id\n      name\n      description\n      archived\n    }\n  }\n`\n\n\nexport const ARCHIVE_PAYMENT_BATCH_CATEGORY = gql`\n  mutation ArchiveFinancePaymentBatchCategory($input: ArchiveFinancePaymentBatchCategoryInput!) {\n    archiveFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n        archived\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"./tools\"\n\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentBatchCategoriesBase from \"./FinancePaymentBatchCategoriesBase\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY, ARCHIVE_PAYMENT_BATCH_CATEGORY } from \"./queries\"\n\nfunction FinancePaymentBatchCategories({t, history}) {\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_PAYMENT_BATCH_CATEGORIES_QUERY, {\n    variables: get_list_query_variables(),\n  })\n  const [archivePaymentBatchCategory] = useMutation(ARCHIVE_PAYMENT_BATCH_CATEGORY)\n\n  // TODO: use local storage for archive buttons\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE) !== \"true\") ? \n      'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}>\n        <p>{t('finance.payment_batch_categories.error_loading')}</p>\n      </ContentCard>\n      </FinancePaymentBatchCategoriesBase>\n  )\n\n  let payment_batch_categories = data.financePaymentBatchCategories\n  // Empty list\n  if (!payment_batch_categories.edges.length) { return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}\n                    headerContent={headerOptions}>\n        <p>\n          { (localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE === \"true\")) ? \n              t(\"finance.payment_batch_categories.empty_archive\") :\n              t('finance.payment_batch_categories.empty_list')\n          }\n        </p>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )}\n\n  return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}\n        headerContent={headerOptions}\n        pageInfo={payment_batch_categories.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: payment_batch_categories.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.financePaymentBatchCategories.edges\n            const pageInfo = fetchMoreResult.financePaymentBatchCategories.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  financePaymentBatchCategories: {\n                    __typename: previousResult.financePaymentBatchCategories.__typename,\n                    edges: [ ...previousResult.financePaymentBatchCategories.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batch_categories.batch_category_type')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {payment_batch_categories.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <FinancePaymentBatchCategory categoryType={node.batchCategoryType} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/finance/paymentbatchcategories/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      onClick={() => {\n                        console.log(\"clicked archived\")\n                        let id = node.id\n                        archivePaymentBatchCategory({ variables: {\n                          input: {\n                          id,\n                          archived: !node.archived\n                        }\n                      }, refetchQueries: [\n                          {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (node.archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                        })\n                      }}>\n                    <Icon prefix=\"fa\" name=\"inbox\" />\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\n\n\n// const FinancePaymentMethods = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"finance.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_PAYMENT_METHODS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {financePaymentMethods: payment_methods}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}>\n//                     <p>{t('finance.payment_methods.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!payment_methods.edges.length) { return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('finance.payment_methods.empty_list') : t(\"finance.payment_methods.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={payment_methods.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: payment_methods.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.financePaymentMethods.edges\n//                                     const pageInfo = fetchMoreResult.financePaymentMethods.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new payment_methods at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           financePaymentMethods: {\n//                                             __typename: previousResult.financePaymentMethods.__typename,\n//                                             edges: [ ...previousResult.financePaymentMethods.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {payment_methods.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     {node.code}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/finance/paymentmethods/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   {(node.systemMethod) ? \n//                                     <Table.Col></Table.Col> :\n//                                     <Mutation mutation={ARCHIVE_PAYMENT_METHOD} key={v4()}>\n//                                       {(archivePaymentMethod, { data }) => (\n//                                         <Table.Col className=\"text-right\" key={v4()}>\n//                                           <button className=\"icon btn btn-link btn-sm\" \n//                                             title={t('general.archive')} \n//                                             href=\"\"\n//                                             onClick={() => {\n//                                               console.log(\"clicked archived\")\n//                                               let id = node.id\n//                                               archivePaymentMethod({ variables: {\n//                                                 input: {\n//                                                   id,\n//                                                   archived: !archived\n//                                                 }\n//                                           }, refetchQueries: [\n//                                               {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": archived }}\n//                                           ]}).then(({ data }) => {\n//                                             console.log('got data', data);\n//                                             toast.success(\n//                                               (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                           }).catch((error) => {\n//                                             toast.error((t('general.toast_server_error')) +  error, {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             console.log('there was an error sending the query', error);\n//                                           })\n//                                           }}>\n//                                             <Icon prefix=\"fa\" name=\"inbox\" />\n//                                           </button>\n//                                         </Table.Col>\n//                                       )}\n//                                     </Mutation>\n//                                   }\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"financepaymentmethod\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/finance/paymentmethods/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('finance.payment_methods.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategories))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst FinancePaymentBatchCategoryForm = ({ t, history, isSubmitting, errors, values, returnUrl, create=false }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {(create) ?\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('finance.payment_batch_categories.batch_category_type')}>\n                <Field component=\"select\" \n                        name=\"batchCategoryType\" \n                        className={(errors.batchCategoryType) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                  <option value=\"COLLECTION\" key={v4()}>{t('general.collection')}</option>\n                  <option value=\"PAYMENT\" key={v4()}>{t('general.payment')}</option>\n                </Field>\n                <ErrorMessage name=\"batchCategoryType\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row> \n          : \"\"\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_BATCH_CATEGORY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string()\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinancePaymentBatchCategoriesBase from './FinancePaymentBatchCategoriesBase'\nimport FinancePaymentBatchCategoryForm from './FinancePaymentBatchCategoryForm'\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY } from './queries'\nimport { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\n\n\nconst ADD_PAYMENT_BATCH_CATEGORY = gql`\n  mutation CreateFinancePaymentBatchCategory($input:CreateFinancePaymentBatchCategoryInput!) {\n    createFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n      }\n    }\n  }\n`\n\nfunction FinancePaymentBatchCategoryAdd({ t, history }) {\n  const returnUrl = \"/finance/paymentbatchcategories\"\n  const [addFinancePaymentBatchCategory] = useMutation(ADD_PAYMENT_BATCH_CATEGORY, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('finance.payment_batch_categories.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', batchCategoryType: \"COLLECTION\", description: '' }}\n          validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            addFinancePaymentBatchCategory({ variables: {\n              input: {\n                name: values.name, \n                batchCategoryType: values.batchCategoryType,\n                description: values.description\n              }\n            }, refetchQueries: [\n                {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batch_categories.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FinancePaymentBatchCategoryForm\n                create={true}\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryAdd))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY, GET_PAYMENT_BATCH_CATEGORY_QUERY } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport FinancePaymentBatchCategoriesBase from './FinancePaymentBatchCategoriesBase'\nimport FinancePaymentBatchCategoryForm from './FinancePaymentBatchCategoryForm'\n\n\nconst UPDATE_PAYMENT_BATCH_CATEGORY = gql`\n  mutation UpdateFinancePaymentBatchCategory($input: UpdateFinancePaymentBatchCategoryInput!) {\n    updateFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n      }\n    }\n  }\n`\n\nfunction FinancePaymentBatchCategoryEdit({ t, history, match }) {\n  const returnUrl = \"/finance/paymentbatchcategories\"\n  const paymentBatchCategoryId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_CATEGORY_QUERY, {\n    variables: {'id': paymentBatchCategoryId},\n  })\n  const [updateFinancePaymentBatchCategory] = useMutation(UPDATE_PAYMENT_BATCH_CATEGORY)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card cardTitle={t('finance.payment_batch_categories.title')}>\n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true} />\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card cardTitle={t('finance.payment_batch_categories.title')}>\n        <Card.Body>\n          <p>{t('finance.payment_batch_categories.error_loading')}</p>\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n\n  const initialData = data.financePaymentBatchCategory\n\n  return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('finance.payment_batch_categories.title_edit')}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              name: initialData.name, \n              batchCategoryType: initialData.batchCategoryType,\n              description: initialData.description,\n            }}\n            validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateFinancePaymentBatchCategory({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  batchCategoryType: values.batchCategoryType,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('finance.payment_batch_categories.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n              }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FinancePaymentBatchCategoryForm\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  returnUrl={returnUrl}\n                />\n               \n            )}\n          </Formik>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_FINANCE_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      orderNumber\n      status\n      message\n      createdAt\n      total\n      totalDisplay\n      balanceDisplay\n      items(first: 100) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            organizationClasspass {\n              id\n              name\n            }\n            productName \n            description\n            quantity\n            price\n            priceDisplay\n            financeTaxRate {\n              name\n            }\n            subtotalDisplay\n            taxDisplay\n            totalDisplay\n            financeGlaccount {\n              name\n            }\n          \tfinanceCostcenter {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ORDER = gql`\n  mutation UpdateFinanceOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\n\nconst FinanceOrderEditForm = ({ t, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card title={t('general.status')}>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col md={10}>\n            <Form.Group>\n              <Field component=\"select\" \n                     name=\"status\" \n                     className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value={\"RECEIVED\"} key={v4()}>{t(\"finance.orders.statuses.RECEIVED\")}</option>\n                <option value={\"AWAITING_PAYMENT\"} key={v4()}>{t(\"finance.orders.statuses.AWAITING_PAYMENT\")}</option>\n                <option value={\"PAID\"} key={v4()}>{t(\"finance.orders.statuses.PAID\")}</option>\n                <option value={\"DELIVERED\"} key={v4()}>{t(\"finance.orders.statuses.DELIVERED\")}</option>\n                <option value={\"CANCELLED\"} key={v4()}>{t(\"finance.orders.statuses.CANCELLED\")}</option>\n                <option value={\"NOT_FOUND\"} key={v4()}>{t(\"finance.orders.statuses.NOT_FOUND\")}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <span className=\"text-muted\">\n              <Icon name=\"info\" /> {' '}\n              {t(\"finance.orders.set_status_to_delivered_to_deliver_manually\")}\n            </span>\n          </Grid.Col>\n          <Grid.Col md={2}>\n          <Button \n                className=\"pull-right\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n              >\n                {t('general.submit')}\n              </Button>\n          </Grid.Col>\n        </Grid.Row> \n      </Card.Body>\n    </Card>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(FinanceOrderEditForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ButtonBack from '../../../ui/ButtonBack';\n\n\nfunction FinanceOrderEditBase ({ t, match, history, children, refetch }) {\n  const returnUrl = \"/finance/orders\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceOrderEditBase))","import React, { useContext } from 'react'\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport { GET_ORDERS_QUERY } from '../queries'\nimport { GET_FINANCE_ORDER_QUERY, UPDATE_ORDER } from './queries'\nimport FinanceOrderEditForm from \"./FinanceOrderEditForm\"\nimport FinanceOrderEditBase from './FinanceOrderEditBase'\n\nimport {\n  Grid,\n  Icon,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\n\nfunction FinanceOrderEdit({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n\n  const id = match.params.id\n  const returnUrl = \"/finance/orders\"\n  \n  const { loading, error, data } = useQuery(GET_FINANCE_ORDER_QUERY, {\n    variables: { id: id },\n  })\n  const [updateOrder] = useMutation(UPDATE_ORDER)\n\n\n  // Loading\n  if (loading) return (\n    <FinanceOrderEditBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </FinanceOrderEditBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <FinanceOrderEditBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </FinanceOrderEditBase>\n    )\n  }\n\n  const order = data.financeOrder\n  \n\n  return(\n    <FinanceOrderEditBase>\n      {/* Start info row */}\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Card title={t(\"finance.orders.edit_details\")}>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.order\")} #</Table.ColHeader>\n                  <Table.Col>{order.orderNumber}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.account\")}</Table.ColHeader>\n                  <Table.Col>{order.account && order.account.fullName}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"finance.orders.placed_at\")}</Table.ColHeader>\n                  <Table.Col>{moment(order.createdAt).format(dateTimeFormat)}</Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n\n        </Grid.Col>\n        <Grid.Col md={6}>\n          {(order.status !== \"DELIVERED\") ? \n            <Formik\n              initialValues={{ \n                status: order.status, \n              }}\n              // validationSchema={GLACCOUNT_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                  console.log('submit values:')\n                  console.log(values)\n\n                  updateOrder({ variables: {\n                    input: {\n                      id: match.params.id,\n                      status: values.status\n                    }\n                  }, refetchQueries: [\n                      {query: GET_ORDERS_QUERY }\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      toast.success((t('finance.orders.toast_edit_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      setSubmitting(false)\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                      setSubmitting(false)\n                    })\n              }}\n              >\n              {({ isSubmitting, errors, values }) => (\n                <FinanceOrderEditForm\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  returnUrl={returnUrl}\n                />\n              )}\n            </Formik>\n            :     \n            <Card title={t('general.status')}>\n              <Card.Body> \n                <span className=\"text-green\"><Icon name=\"check\" /></span> {t(\"finance.orders.statuses.DELIVERED\")}\n              </Card.Body>\n            </Card>\n          }\n        </Grid.Col>\n      </Grid.Row> \n      {/* End information row */}\n      {/* Start items row */}\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Card title={t(\"general.items\")}>\n            <Table cards>\n              <Table.Header>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.product\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.description\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.quantity_short_and_price\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.tax\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                { order.items.edges.map(({ node }) => (        \n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.productName}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.description}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.quantity} <br />\n                      {node.priceDisplay}\n                    </Table.Col>\n                    <Table.Col>\n                      {(node.financeTaxRate) ? node.financeTaxRate.name : \"\"}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.totalDisplay}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>                \n            </Table>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* End items row */}\n      {/* Start note row */}\n      { (order.message) ?\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card title={t('finance.orders.customer_message')}>\n              <Card.Body>\n                {order.message}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row> : \"\"\n      }\n      {/* End note row */}\n    </FinanceOrderEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderEdit))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\nfunction FinancePaymentMethodsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"finance.title\")} >\n          <div className='page-options d-flex'>\n            {(showBack) ?\n              <ButtonBack returnUrl={\"/finance/paymentmethods\"} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentmethod\">\n                  <ButtonAdd addUrl={\"/finance/paymentmethods/add\"} />\n                </HasPermissionWrapper>\n              }\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_METHODS_QUERY = gql`\n  query FinancePaymentMethods($after: String, $before: String, $archived: Boolean) {\n    financePaymentMethods(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          systemMethod\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_METHOD_QUERY = gql`\n  query FinancePaymentMethod($id: ID!) {\n    financePaymentMethod(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_PAYMENT_METHOD = gql`\nmutation CreateFinancePaymentMethod($input:CreateFinancePaymentMethodInput!) {\n  createFinancePaymentMethod(input: $input) {\n    financePaymentMethod{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_PAYMENT_METHOD = gql`\nmutation UpdateFinancePaymentMethod($input: UpdateFinancePaymentMethodInput!) {\n  updateFinancePaymentMethod(input: $input) {\n    financePaymentMethod {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_PAYMENT_METHOD = gql`\nmutation ArchiveFinancePaymentMethod($input: ArchiveFinancePaymentMethodInput!) {\n  archiveFinancePaymentMethod(input: $input) {\n    financePaymentMethod {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase'\n\nimport { GET_PAYMENT_METHODS_QUERY, ARCHIVE_PAYMENT_METHOD } from \"./queries\"\n\n\nfunction FinancePaymentMethods({ t, history }) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.payment_methods.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_PAYMENT_METHODS_QUERY, {\n    variables: { archived: archived }\n  })\n\n  const [ archivePaymentMethod ] = useMutation(ARCHIVE_PAYMENT_METHOD)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  if (error) return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.payment_methods.error_loading')}</p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  const paymentMethods = data.financePaymentMethods\n\n  // Empty list\n  if (!paymentMethods.edges.length) { return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.payment_methods.empty_list') : t(\"finance.payment_methods.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )}\n\n  return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={paymentMethods.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: paymentMethods.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financePaymentMethods.edges\n                        const pageInfo = fetchMoreResult.financePaymentMethods.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new paymentMethods at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financePaymentMethods: {\n                                __typename: previousResult.financePaymentMethods.__typename,\n                                edges: [ ...previousResult.financePaymentMethods.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {paymentMethods.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/finance/paymentmethods/edit/${node.id}`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    {(node.systemMethod) ? \"\" :\n                      <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archivePaymentMethod({ variables: {\n                            input: {\n                              id,\n                              archived: !archived\n                            }\n                      }, refetchQueries: [\n                          {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": archived }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fa\" name=\"inbox\" />\n                      </button>\n                    }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>      \n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethods))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_METHOD_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinancePaymentMethodForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('finance.code')}>\n            <Field type=\"text\" \n                    name=\"code\" \n                    className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentMethodForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_PAYMENT_METHODS_QUERY, ADD_PAYMENT_METHOD } from './queries'\nimport { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase';\nimport FinancePaymentMethodForm from './FinancePaymentMethodForm'\n\n\nfunction FinancePaymentMethodAdd({ t, history }) {\n  const returnUrl = \"/finance/paymentmethods\"\n  const [ addPaymentMethod ] = useMutation(ADD_PAYMENT_METHOD)\n\n  return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <Card title={t('finance.payment_methods.title_add')}>\n        <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addPaymentMethod({ variables: {\n                input: {\n                  name: values.name, \n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.payment_methods.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FinancePaymentMethodForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_PAYMENT_METHODS_QUERY, GET_PAYMENT_METHOD_QUERY, UPDATE_PAYMENT_METHOD } from './queries'\nimport { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase';\nimport FinancePaymentMethodForm from './FinancePaymentMethodForm'\n\n\nfunction FinancePaymentMethodEdit({ t, history, match }) {\n  const id = match.params.id\n  const cardTitle = t('finance.payment_methods.title_edit')\n  const returnUrl = \"/finance/paymentmethods\"\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_METHOD_QUERY, {\n    variables: { id: id }\n  })\n  const [ updatePaymentMethod ] = useMutation(UPDATE_PAYMENT_METHOD)\n\n  if (loading) return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  if (error) return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  const initialData = data.financePaymentMethod;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            code: initialData.code\n          }}\n          validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updatePaymentMethod({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.payment_methods.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n              <FinancePaymentMethodForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceTaxRatesBase({ t, history, children, showBack=false, returnUrl=\"/finance/taxrates\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n               {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financetaxrate\">\n                  <ButtonAdd addUrl={\"/finance/taxrates/add\"} />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRatesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_TAXRATES_QUERY = gql`\n  query FinanceTaxRates($after: String, $before: String, $archived: Boolean) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_TAXRATE_QUERY = gql`\n  query FinanceTaxRate($id: ID!) {\n    financeTaxRate(id:$id) {\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n`\n\nexport const ADD_TAXRATE = gql`\nmutation CreateFinanceTaxRate($input:CreateFinanceTaxRateInput!) {\n  createFinanceTaxRate(input: $input) {\n    financeTaxRate{\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_TAXRATE = gql`\nmutation UpdateFinanceTaxRate($input: UpdateFinanceTaxRateInput!) {\n  updateFinanceTaxRate(input: $input) {\n    financeTaxRate {\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_TAXRATE = gql`\nmutation ArchiveFinanceTaxRate($input: ArchiveFinanceTaxRateInput!) {\n  archiveFinanceTaxRate(input: $input) {\n    financeTaxRate {\n      id\n      archived\n    }\n  }\n}\n`\n","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase'\n\nimport { GET_TAXRATES_QUERY, ARCHIVE_TAXRATE } from \"./queries\"\n\nfunction FinanceTaxRates({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.taxrates.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_TAXRATES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveTaxrate ] = useMutation(ARCHIVE_TAXRATE)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  if (error) return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.glaccounts.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  const taxrates = data.financeTaxRates\n\n  // Empty list\n  if (!taxrates.edges.length) { return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.taxrates.empty_list') : t(\"finance.taxrates.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )}\n\n  return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={taxrates.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: taxrates.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeTaxRates.edges\n                        const pageInfo = fetchMoreResult.financeTaxRates.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new taxrates at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeTaxRates: {\n                                __typename: previousResult.financeTaxRates.__typename,\n                                edges: [ ...previousResult.financeTaxRates.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.percentage')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.rateType')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {taxrates.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.percentage} %\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.rateType}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/taxrates/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveTaxrate({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_TAXRATES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRates))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const TAX_RATE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    percentage: Yup.number()\n      .max(100)\n      .typeError(t('yup.field_has_to_be_number'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TAXRATES_QUERY, ADD_TAXRATE } from './queries'\nimport { TAX_RATE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase';\n\n\nfunction FinanceTaxRateAdd({t, history}) {\n  const returnUrl = \"/finance/taxrates\"\n  const [ addFinanceTaxrate ] = useMutation(ADD_TAXRATE)\n\n  return (\n    <FinanceTaxRatesBase showBack={true}>\n      <Card title={t('finance.taxrates.title_add')}>\n        <Formik\n            initialValues={{ name: \"\", percentage: \"\", rateType: \"IN\", code: \"\" }}\n            validationSchema={TAX_RATE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addFinanceTaxrate({ variables: {\n                  input: {\n                    name: values.name,\n                    percentage: values.percentage,\n                    rateType: values.rateType, \n                    code: values.code,\n                  }\n                }, refetchQueries: [\n                    {query: GET_TAXRATES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('finance.taxrates.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <FoForm>\n                  <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.percentage')}>\n                        <Field type=\"text\" \n                                name=\"percentage\" \n                                className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.rateType')}>\n                        <Field component=\"select\" \n                                name=\"rateType\" \n                                className={(errors.rateType) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\">\n                          <option value=\"IN\">{t('finance.taxrates.including')}</option>\n                          <option value=\"EX\">{t('finance.taxrates.excluding')}</option>\n                        </Field>\n                        <ErrorMessage name=\"rateType\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        color=\"primary\"\n                        className=\"pull-right\" \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button color=\"link\">\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                  </Card.Footer>\n              </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceTaxRatesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRateAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TAXRATES_QUERY, GET_TAXRATE_QUERY, UPDATE_TAXRATE } from './queries'\nimport { TAX_RATE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase';\n\n\nfunction FinanceTaxRateEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/taxrates\"\n  const cardTitle = t('finance.taxrates.title_edit')\n  const { loading, error, data } = useQuery(GET_TAXRATE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateTaxrate ] = useMutation(UPDATE_TAXRATE)\n\n  if (loading) return (\n    <FinanceTaxRatesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  if (error) return (\n    <FinanceTaxRatesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.taxrates.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  const initialData = data.financeTaxRate;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceTaxRatesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              percentage: initialData.percentage,\n              rateType: initialData.rateType,\n              code: initialData.code,\n            }}\n            validationSchema={TAX_RATE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateTaxrate({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    percentage: values.percentage,\n                    rateType: values.rateType,\n                    code: values.code,\n                  }\n                }, refetchQueries: [\n                    {query: GET_TAXRATES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('finance.taxrates.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.percentage')}>\n                        <Field type=\"text\" \n                              name=\"percentage\" \n                              className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.rateType')}>\n                        <Field component=\"select\" \n                              name=\"rateType\" \n                              className={(errors.rateType) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\">\n                          <option value=\"IN\">{t('finance.taxrates.including')}</option>\n                          <option value=\"EX\">{t('finance.taxrates.excluding')}</option>\n                        </Field>\n                        <ErrorMessage name=\"rateType\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceTaxRatesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRateEdit))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const TAX_SUMMARY_SCHEMA = Yup.object().shape({\n    dateStart: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Grid\n} from \"tabler-react\";\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nfunction FinanceTaxRatesSummaryFilter({ t, history, values, errors, data, isSubmitting, setFieldTouched=f=>f, setFieldValue=f=>f,  refetch }) {\n  console.log(errors)\n  return (\n    <FoForm>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateStart}\n              onChange={(date) => {\n                setFieldValue(\"dateStart\", date)\n                setFieldTouched(\"dateStart\", true)\n              }}\n              // onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.date_end')}>\n            <CSDatePicker \n              className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateEnd}\n              onChange={(date) => {\n                setFieldValue(\"dateEnd\", date)\n                setFieldTouched(\"dateEnd\", true)\n              }}\n            />\n            <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <br />\n          <Button \n            block\n            color=\"primary\"\n            className=\"pull-right mt-1\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('finance.taxrates_summary.set_dates')}\n          </Button>\n        </Grid.Col>\n      </Grid.Row>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummaryFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport moment from 'moment'\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport { TAX_SUMMARY_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport SiteWrapper from '../../SiteWrapper'\nimport FinanceTaxRatesSummaryFilter from \"./FinanceTaxRatesSummaryFilter\"\n\n\nfunction FinanceTaxRatesSummaryBase ({ t, history, children, refetch }) {\n  const dateStart = moment().startOf('month')\n  const dateEnd   = moment().endOf('month')\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} subTitle={t('finance.taxrates_summary.title')}>\n            <div className=\"page-options d-flex\">\n              {/* <Link to=\"/finance/invoices/groups\" \n                    className='btn btn-outline-secondary btn-sm'>\n                <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n              </Link> */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Formik \n                initialValues={{\n                  dateStart: new Date(dateStart),\n                  dateEnd: new Date(dateEnd)\n                }}\n                validationSchema={TAX_SUMMARY_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n                  refetch({\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateToLocalISO(values.dateEnd),\n                  })\n                  setSubmitting(false)                  \n                }}\n              >\n                {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n                <FinanceTaxRatesSummaryFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  handleChange={handleChange}\n                  setFieldTouched={setFieldTouched}\n                  setFieldValue={setFieldValue}\n                />\n                )}\n              </Formik>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummaryBase))\n\n\n\n// <Formik\n// initialValues={{ \n//   relationCompany: initialData.financeInvoice.relationCompany, \n//   relationCompanyRegistration: initialData.financeInvoice.relationCompanyRegistration, \n//   relationCompanyTaxRegistration: initialData.financeInvoice.relationCompanyTaxRegistration, \n//   relationContactName: initialData.financeInvoice.relationContactName, \n//   relationAddress: initialData.financeInvoice.relationAddress, \n//   relationPostcode: initialData.financeInvoice.relationPostcode, \n//   relationCity: initialData.financeInvoice.relationCity, \n//   relationCountry: initialData.financeInvoice.relationCountry, \n// }}\n// // validationSchema={INVOICE_GROUP_SCHEMA}\n// onSubmit={(values, { setSubmitting, setTouched }) => {\n//   console.log('submit values:')\n//   console.log(values)\n\n//   updateInvoice({ variables: {\n//     input: {\n//       id: match.params.id,\n//       relationCompany: values.relationCompany,\n//       relationCompanyRegistration: values.relationCompanyRegistration,\n//       relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n//       relationContactName: values.relationContactName,\n//       relationAddress: values.relationAddress,\n//       relationPostcode: values.relationPostcode,\n//       relationCity: values.relationCity,\n//       relationCountry: values.relationCountry\n//     }\n//   }, refetchQueries: [\n//       {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n//   ]})\n//   .then(({ data }) => {\n//       console.log('got data', data)\n//       toast.success((t('finance.invoice.toast_edit_to_success')), {\n//           position: toast.POSITION.BOTTOM_RIGHT\n//         })\n//       setSubmitting(false)\n//       setTouched({})\n//     }).catch((error) => {\n//       toast.error((t('general.toast_server_error')) +  error, {\n//           position: toast.POSITION.BOTTOM_RIGHT\n//         })\n//       console.log('there was an error sending the query', error)\n//       setSubmitting(false)\n//     })\n//   }}\n// >\n// {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n//   <FinanceInvoiceEditToForm\n//     isSubmitting={isSubmitting}\n//     errors={errors}\n//     values={values}\n//     touched={touched}\n//     handleChange={handleChange}\n//     setFieldTouched={setFieldTouched}\n//   >\n//   </FinanceInvoiceEditToForm>\n// )}\n// </Formik>","import { gql } from \"@apollo/client\"\n\nexport const GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY = gql`\n  query InsightFinanceTaxSummary($dateStart: Date!, $dateEnd: Date!) {\n    insightFinanceTaxRateSummary(dateStart:$dateStart, dateEnd: $dateEnd) {\n      dateStart\n      dateEnd\n      data {\n        financeTaxRate {\n          id\n          name\n          percentage\n          rateType        \n        }\n        subtotal\n        subtotalDisplay\n        tax\n        taxDisplay\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Dimmer,\n  Table, \n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesSummaryBase from \"./FinanceTaxRatesSummaryBase\"\nimport { GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY } from \"./queries\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\n\n\nfunction FinanceTaxRatesSummary({ t, location, history }) {\n  const cardTitle = t('finance.taxrates_summary.title')\n  const dateStart = moment().startOf('month')\n  const dateEnd   = moment().endOf('month')\n\n  // Set back location for edit invoice\n  // localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY, {\n    variables: {\n      dateStart: dateToLocalISO(dateStart),\n      dateEnd: dateToLocalISO(dateEnd)\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.taxrates_summary.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n\n  const taxRatesSummary = data.insightFinanceTaxRateSummary\n\n  // Empty list\n  if (!taxRatesSummary.data.length) { return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>\n          {t('finance.taxrates_summary.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )}\n\n  return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.taxrates_summary.title')}\n                  pageInfo={taxRatesSummary.pageInfo}\n                  hasCardBody={false}\n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.percentage')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates_summary.taxable_amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.tax')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {taxRatesSummary.data.map(({financeTaxRate, taxDisplay, subtotalDisplay }) => (\n              <Table.Row>\n                <Table.Col>{financeTaxRate.name}</Table.Col>\n                <Table.Col>{financeTaxRate.percentage} %</Table.Col>\n                <Table.Col>{subtotalDisplay}</Table.Col>\n                <Table.Col>{taxDisplay}</Table.Col>\n              </Table.Row>  \n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummary))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass InsightHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Insight home props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"insight.home.link_view\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"insight.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"insight.classpasses.title\")}</h5>\n                    {t(\"insight.classpasses.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/insight/classpasses\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"insight.subscriptions.title\")}</h5>\n                    {t(\"insight.subscriptions.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/insight/subscriptions\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insighttrialcards\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.trialpasses.title\")}</h5>\n                      {t(\"insight.trialpasses.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/trialpasses\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"insight.revenue.title\")}</h5>\n                    {t(\"insight.revenue.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/insight/revenue\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(InsightHome))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASSPASSES_SOLD_QUERY = gql`\n  query InsightAccountClasspassesSold($year: Int!) {\n    insightAccountClasspassesSold(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`\n\n\nexport const GET_CLASSPASSES_ACTIVE_QUERY = gql`\n  query InsightAccountClasspassesActive($year: Int!) {\n    insightAccountClasspassesActive(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`","\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nconst InsightBackHome = ({ t }) => (\n  <div className=\"page-options d-flex\">\n    <Link to=\"/insight\" \n          className='btn btn-secondary'>\n        <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('insight.title')}\n    </Link>\n  </div>\n)\n\nexport default withTranslation()(InsightBackHome)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightClasspassesBase ({ t, history, children, year, refetchData=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.classpasses\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = moment().format('YYYY')\n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, currentYear) \n                    \n                    refetchData(parseInt(currentYear))\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            {children}\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightClasspassesBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport C3Chart from \"react-c3js\"\nimport {\n  colors,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { GET_CLASSPASSES_SOLD_QUERY, GET_CLASSPASSES_ACTIVE_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightClasspassesBase from './InsightClasspassesBase'\n\nfunction InsightClasspasses ({ t, history }) {\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR))\n  const export_url_active = \"/d/export/insight/classpasses/active/\" + year\n  const export_url_sold = \"/d/export/insight/classpasses/sold/\" + year\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  const { \n    loading: loadingSold, \n    error: errorSold, \n    data: dataSold,\n    refetch: refetchSold\n   } = useQuery(GET_CLASSPASSES_SOLD_QUERY, {\n    variables: { year: year }\n  })\n\n  const { \n    loading: loadingActive, \n    error: errorActive, \n    data: dataActive,\n    refetch: refetchActive\n   } = useQuery(GET_CLASSPASSES_ACTIVE_QUERY, {\n    variables: { year: year }\n  })\n\n\n  if (loadingSold || loadingActive) {\n    return (\n      <InsightClasspassesBase year={year}>\n        {t(\"general.loading_with_dots\")}\n      </InsightClasspassesBase>\n    )\n  }\n\n  if (errorSold || errorActive) {\n    return (\n      <InsightClasspassesBase year={year}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightClasspassesBase>\n    )\n  }\n\n  function refetchData(year) {\n    refetchActive({year: year})\n    refetchSold({year: year})\n  }\n\n  console.log(dataSold)\n  console.log(dataActive)\n\n  const data_sold_label = t(\"insight.classpasses.sold.title\")\n  const chart_data_sold = dataSold.insightAccountClasspassesSold.data\n  console.log(\"chart_data sold\")\n  console.log(data_sold_label, ...chart_data_sold)\n\n  const data_active_label = t(\"insight.classpasses.active.title\")\n  const chart_data_active = dataActive.insightAccountClasspassesActive.data\n  console.log(\"chart_data active\")\n  console.log(data_sold_label, ...chart_data_active)\n\n\n  return (\n    <InsightClasspassesBase year={year} refetchData={refetchData}>\n      {/* <Grid.Row> */}\n        <Grid.Col md={9}>\n          <Card title={t('general.chart')}>\n            <Card.Body>\n              <C3Chart\n                style={{ height: \"16rem\" }}\n                data={{\n                  x: 'x',\n                  columns: [\n                    // each columns data as array, starting with \"name\" and then containing data\n                    [ 'x',\n                      t(\"datetime.months.short_january\"),\n                      t(\"datetime.months.short_february\"),\n                      t(\"datetime.months.short_march\"),\n                      t(\"datetime.months.short_april\"),\n                      t(\"datetime.months.short_may\"),\n                      t(\"datetime.months.short_june\"),\n                      t(\"datetime.months.short_july\"),\n                      t(\"datetime.months.short_august\"),\n                      t(\"datetime.months.short_september\"),\n                      t(\"datetime.months.short_october\"),\n                      t(\"datetime.months.short_november\"),\n                      t(\"datetime.months.short_decemer\"),\n                    ],\n                    [ 'sold', ...chart_data_sold],\n                    [ 'active', ...chart_data_active],\n                  ],\n                  type: \"area\", // default type of chart\n                  groups: [['sold'], ['active']],\n                  colors: {\n                    sold: colors[\"blue\"],\n                    active: colors[\"green\"],\n                  },\n                  names: {\n                    // name of each serie\n                    sold: data_sold_label,\n                    active: data_active_label,\n                  },\n                  \n                }}\n                axis={{\n                  y: {\n                    padding: {\n                      bottom: 0,\n                    },\n                    show: true,\n                  },\n                  x: {\n                    padding: {\n                      left: 0,\n                      right: 0,\n                    },\n                    type: 'category',\n                    show: true,\n                  },\n                }}\n                tooltip={{\n                  format: {\n                    title: function(x) {\n                      return \"\";\n                    },\n                  },\n                }}\n                padding={{\n                  bottom: 0,\n                  // left: -1,\n                  right: -1,\n                }}\n                point={{\n                  show: false,\n                }}\n              />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.classpasses.sold.export_excel\")}\n          </Button>\n          {/* Export as active as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.classpasses.active.export_excel\")}\n          </Button>\n        </Grid.Col>\n      {/* </Grid.Row> */}\n    </InsightClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightClasspasses))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_REVENUE_QUERY = gql`\n  query InsightRevenueTotal($year: Int!) {\n    insightRevenueTotal(year: $year) {\n      description\n      year\n      total\n      totalDisplay\n      subtotal\n      tax\n    }\n    insightRevenueClasspasses(year: $year) {\n      description\n      year\n      total\n      totalDisplay\n      subtotal\n      tax\n    }\n    insightRevenueSubscriptions(year: $year) {\n      description\n      year\n      total\n      totalDisplay\n      subtotal\n      tax\n    }\n    insightRevenueEventTickets(year: $year) {\n      description\n      year\n      total\n      totalDisplay\n      subtotal\n      tax\n    }\n    insightRevenueOther(year: $year) {\n      description\n      year\n      total\n      totalDisplay\n      subtotal\n      tax\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Button,\n  Container,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightRevenueBase ({ t, history, children, year, refetchData=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.revenue\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = parseInt(moment().format('YYYY'))\n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n            {children}\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenueBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport C3Chart from \"react-c3js\"\nimport {\n  colors,\n  Dimmer,\n  Grid,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nfunction InsightRevenueDisplay({ \n  t, \n  history, \n  error, \n  loading, \n  cardTitle,\n  data\n }) {\n\n  const labelDataTotal = t(\"insight.revenue.total.title\")\n  const labelDataSubtotal = t(\"insight.revenue.subtotal.title\")\n  const labelDataTax = t(\"insight.revenue.tax.title\")\n\n  if (loading) {\n    return (\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <Card title={cardTitle}>\n            <Card.Body>\n              <Dimmer loader={true} active={true} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n        </Grid.Col>\n      </Grid.Row>\n    )\n  }\n\n  if (error) {\n    <Grid.Row>\n      <Grid.Col md={9}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.error_sad_smiley\")}\n          </Card.Body>\n        </Card>\n      </Grid.Col>\n    </Grid.Row>\n  }\n\n  const dataTotal = data.total\n  const dataTotalDisplay = data.totalDisplay\n  console.log(dataTotalDisplay)\n  const dataSubtotal = data.subtotal\n  const dataTax = data.tax\n\n  const months = [\n    t(\"datetime.months.short_january\"),\n    t(\"datetime.months.short_february\"),\n    t(\"datetime.months.short_march\"),\n    t(\"datetime.months.short_april\"),\n    t(\"datetime.months.short_may\"),\n    t(\"datetime.months.short_june\"),\n    t(\"datetime.months.short_july\"),\n    t(\"datetime.months.short_august\"),\n    t(\"datetime.months.short_september\"),\n    t(\"datetime.months.short_october\"),\n    t(\"datetime.months.short_november\"),\n    t(\"datetime.months.short_decemer\"),\n  ]\n\n  return (\n    <Grid.Row>\n      <Grid.Col md={9}>\n        <Card title={cardTitle}>\n          {/* <Card.Body> */}\n            <C3Chart\n              style={{ height: \"336px\" }}\n              data={{\n                x: 'x',\n                columns: [\n                  // each columns data as array, starting with \"name\" and then containing data\n                  [ 'x',\n                    t(\"datetime.months.short_january\"),\n                    t(\"datetime.months.short_february\"),\n                    t(\"datetime.months.short_march\"),\n                    t(\"datetime.months.short_april\"),\n                    t(\"datetime.months.short_may\"),\n                    t(\"datetime.months.short_june\"),\n                    t(\"datetime.months.short_july\"),\n                    t(\"datetime.months.short_august\"),\n                    t(\"datetime.months.short_september\"),\n                    t(\"datetime.months.short_october\"),\n                    t(\"datetime.months.short_november\"),\n                    t(\"datetime.months.short_decemer\"),\n                  ],\n                  [ 'total', ...dataTotal],\n                  [ 'subtotal', ...dataSubtotal],\n                  [ 'tax', ...dataTax],\n                ],\n                type: \"bar\", // default type of chart\n                // types: {\n                //   total: \"bar\"\n                // },\n                groups: [['subtotal', 'tax']],\n                colors: {\n                  total: colors[\"blue\"],\n                  subtotal: colors[\"green\"],\n                  tax: colors[\"orange\"],\n                },\n                names: {\n                  // name of each serie\n                  total: labelDataTotal,\n                  subtotal: labelDataSubtotal,\n                  tax: labelDataTax,\n                },\n                \n              }}\n              axis={{\n                y: {\n                  padding: {\n                    bottom: 0,\n                  },\n                  show: true,\n                },\n                x: {\n                  padding: {\n                    left: 0,\n                    right: 0,\n                  },\n                  type: 'category',\n                  show: true,\n                },\n              }}\n              tooltip={{\n                format: {\n                  title: function(x) {\n                    return \"\";\n                  },\n                },\n              }}\n              padding={{\n                bottom: 0,\n                // left: -1,\n                right: -1,\n              }}\n              point={{\n                show: false,\n              }}\n            />\n          {/* </Card.Body> */}\n          <Card.Footer>\n            {t(\"insight.revenue.total.explanation\")}\n          </Card.Footer>\n        </Card>\n      </Grid.Col>\n      <Grid.Col md={3}>\n        <Card title={t(\"general.data\")}>\n          <small>\n          <Table cards>\n            <Table.Body>\n              {dataTotalDisplay.map((amount, index) => (\n                <Table.Row>\n                  <Table.Col className=\"cs-insight-data-table-cell\">\n                    {months[index]}\n                  </Table.Col>\n                  <Table.Col className=\"cs-insight-data-table-cell text-right\">\n                    {amount}\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </small>\n        </Card>\n        {/* Export as sold as excel sheet */}\n        {/* <Button\n          block\n          color=\"secondary\"\n          RootComponent=\"a\"\n          icon=\"download-cloud\"\n          onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n            t, doTokenRefresh, history, export_url_sold\n          )}\n        >\n          {t(\"insight.classpasses.sold.export_excel\")}\n        </Button> */}\n        {/* Export as active as excel sheet */}\n        {/* <Button\n          block\n          color=\"secondary\"\n          RootComponent=\"a\"\n          icon=\"download-cloud\"\n          onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n            t, doTokenRefresh, history, export_url_active\n          )}\n        >\n          {t(\"insight.classpasses.active.export_excel\")}\n        </Button> */}\n      </Grid.Col>\n    </Grid.Row>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenueDisplay))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { GET_REVENUE_QUERY } from './queries'\nimport InsightRevenueBase from './InsightRevenueBase'\nimport InsightRevenueDisplay from './InsightRevenueDisplay'\n\nfunction InsightRevenue ({ t, history }) {\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR))\n\n  const { loading, error, data, refetch } = useQuery(GET_REVENUE_QUERY, {\n    variables: { year: year }\n  })\n\n  function refetchData(year) {\n    refetch({year: year})\n  }\n\n  return (\n    <InsightRevenueBase year={year} refetchData={refetchData}>\n      {/* Total */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.total\")}\n        data={data && data.insightRevenueTotal}\n      />\n      {/* Subscriptions */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.subscriptions\")}\n        data={data && data.insightRevenueSubscriptions}\n      />\n      {/* Classpasses */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.classpasses\")}\n        data={data && data.insightRevenueClasspasses}\n      />\n      {/* Event tickets */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.event_tickets\")}\n        data={data && data.insightRevenueEventTickets}\n      />\n      {/* Other */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.other\")}\n        data={data && data.insightRevenueOther}\n      />\n    </InsightRevenueBase> \n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenue))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SUBSCRIPTIONS_SOLD_QUERY = gql`\n  query InsightAccountSubscriptionsSold($year: Int!) {\n    insightAccountSubscriptionsSold(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTIONS_ACTIVE_QUERY = gql`\n  query InsightAccountSubscriptionsActive($year: Int!) {\n    insightAccountSubscriptionsActive(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Button,\n  Page,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n\nfunction InsightSubscriptionsBase ({ t, history, children, year, refetchData=f=>f}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.subscriptions\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = parseInt(moment().format('YYYY'))\n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          {children}\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightSubscriptionsBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport C3Chart from \"react-c3js\"\nimport moment from 'moment'\nimport {\n  colors,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { GET_SUBSCRIPTIONS_SOLD_QUERY, GET_SUBSCRIPTIONS_ACTIVE_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightSubscriptionsBase from './InsightSubscriptionsBase'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, moment().format('YYYY')) \n} \n\n\nfunction InsightSubscriptions ({ t, history }) {\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR))\n  const export_url_active = \"/d/export/insight/subscriptions/active/\" + year\n  const export_url_sold = \"/d/export/insight/subscriptions/sold/\" + year\n\n  console.log(year)\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  const { \n    loading: loadingSold, \n    error: errorSold, \n    data: dataSold,\n    refetch: refetchSold\n   } = useQuery(GET_SUBSCRIPTIONS_SOLD_QUERY, {\n    variables: { year: year }\n  })\n\n  const { \n    loading: loadingActive, \n    error: errorActive, \n    data: dataActive,\n    refetch: refetchActive\n   } = useQuery(GET_SUBSCRIPTIONS_ACTIVE_QUERY, {\n    variables: { year: year }\n  })\n\n\n  if (loadingSold || loadingActive) {\n    return (\n      <InsightSubscriptionsBase year={year}>\n        {t(\"general.loading_with_dots\")}\n      </InsightSubscriptionsBase>\n    )\n  }\n\n  if (errorSold || errorActive) {\n    return (\n      <InsightSubscriptionsBase year={year}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightSubscriptionsBase>\n    )\n  }\n\n\n  function refetchData(year) {\n    refetchActive({year: year})\n    refetchSold({year: year})\n  }\n\n  console.log(dataSold)\n  console.log(dataActive)\n\n  const data_sold_label = t(\"insight.subscriptions.sold.title\")\n  const chart_data_sold = dataSold.insightAccountSubscriptionsSold.data\n  console.log(\"chart_data sold\")\n  console.log(data_sold_label, ...chart_data_sold)\n\n  const data_active_label = t(\"insight.subscriptions.active.title\")\n  const chart_data_active = dataActive.insightAccountSubscriptionsActive.data\n  console.log(\"chart_data active\")\n  console.log(data_sold_label, ...chart_data_active)\n\n\n  return (\n    <InsightSubscriptionsBase year={year} refetchData={refetchData}>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <Card title={t('general.chart')}>\n            <Card.Body>\n              <C3Chart\n                style={{ height: \"16rem\" }}\n                data={{\n                  x: 'x',\n                  columns: [\n                    // each columns data as array, starting with \"name\" and then containing data\n                    [ 'x',\n                      t(\"datetime.months.short_january\"),\n                      t(\"datetime.months.short_february\"),\n                      t(\"datetime.months.short_march\"),\n                      t(\"datetime.months.short_april\"),\n                      t(\"datetime.months.short_may\"),\n                      t(\"datetime.months.short_june\"),\n                      t(\"datetime.months.short_july\"),\n                      t(\"datetime.months.short_august\"),\n                      t(\"datetime.months.short_september\"),\n                      t(\"datetime.months.short_october\"),\n                      t(\"datetime.months.short_november\"),\n                      t(\"datetime.months.short_decemer\"),\n                    ],\n                    [ 'sold', ...chart_data_sold],\n                    [ 'active', ...chart_data_active],\n                  ],\n                  type: \"area\", // default type of chart\n                  groups: [['sold'], ['active']],\n                  colors: {\n                    sold: colors[\"blue\"],\n                    active: colors[\"green\"],\n                  },\n                  names: {\n                    // name of each serie\n                    sold: data_sold_label,\n                    active: data_active_label,\n                  },\n                  \n                }}\n                axis={{\n                  y: {\n                    padding: {\n                      bottom: 0,\n                    },\n                    show: true,\n                  },\n                  x: {\n                    padding: {\n                      left: 0,\n                      right: 0,\n                    },\n                    type: 'category',\n                    show: true,\n                  },\n                }}\n                tooltip={{\n                  format: {\n                    title: function(x) {\n                      return \"\";\n                    },\n                  },\n                }}\n                padding={{\n                  bottom: 0,\n                  // left: -1,\n                  right: -1,\n                }}\n                point={{\n                  show: false,\n                }}\n              />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.subscriptions.sold.export_excel\")}\n          </Button>\n          {/* Export as active as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.subscriptions.active.export_excel\")}\n          </Button>\n        </Grid.Col>\n      </Grid.Row>\n    </InsightSubscriptionsBase>\n  //   <SiteWrapper>\n  //     <div className=\"my-3 my-md-5\">\n  //       <Container>\n  //         <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.classpasses\") + \" \" + year}>\n  //           <div className=\"page-options d-flex\">\n  //             <InsightBackHome />\n  //           </div>\n  //         </Page.Header>\n\n  //       </Container>  \n  //     </div>\n  //   </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightSubscriptions))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_TRIALPASSES_QUERY = gql`\n  query AccountClasspasses($dateStartFrom: Date!, $dateStartUntil: Date!) {\n    accountClasspasses(first:100, organizationClasspass_TrialPass: true, dateStart_Gte: $dateStartFrom, dateStart_Lte:$dateStartUntil), {\n      edges {\n        node {\n          id\n          dateStart\n          dateEnd\n          account {\n            id\n            fullName\n            classpasses(organizationClasspass_TrialPass: false) {\n              edges {\n                node {\n                  id\n                  dateStart\n                  organizationClasspass{\n                    name\n                  }\n                }\n              }\n            }\n            subscriptions {\n              edges {\n                node {\n                  dateStart\n                  organizationSubscription {\n                    name\n                  }\n                }\n              }\n            }\n          }\n          organizationClasspass {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form\n} from \"tabler-react\";\n\n\nfunction InsightTrialpassesFilter({ t, history, values, errors, isSubmitting }) {\n  return (\n    <FoForm>\n      <Form.Group label={t('general.year')}>\n        <Field type=\"number\" \n                name=\"year\" \n                className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.month')}>\n        <Field component=\"select\" \n              name=\"month\" \n              className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\"\n              // onChange={(e) => {\n              //   handleChange(e)\n              //   setFieldTouched(\"financeTaxRate\", true, true)\n              // }}\n        >\n          <option value=\"01\" key={v4()}>{t(\"datetime.months.january\")}</option>\n          <option value=\"02\" key={v4()}>{t(\"datetime.months.february\")}</option>\n          <option value=\"03\" key={v4()}>{t(\"datetime.months.march\")}</option>\n          <option value=\"04\" key={v4()}>{t(\"datetime.months.april\")}</option>\n          <option value=\"05\" key={v4()}>{t(\"datetime.months.may\")}</option>\n          <option value=\"06\" key={v4()}>{t(\"datetime.months.june\")}</option>\n          <option value=\"07\" key={v4()}>{t(\"datetime.months.july\")}</option>\n          <option value=\"08\" key={v4()}>{t(\"datetime.months.august\")}</option>\n          <option value=\"09\" key={v4()}>{t(\"datetime.months.september\")}</option>\n          <option value=\"10\" key={v4()}>{t(\"datetime.months.october\")}</option>\n          <option value=\"11\" key={v4()}>{t(\"datetime.months.november\")}</option>\n          <option value=\"12\" key={v4()}>{t(\"datetime.months.december\")}</option>\n        </Field>\n        <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('insight.trialpasses.set_month')}\n      </Button>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpassesFilter))","import CSLS from \"../../../tools/cs_local_storage\"\nimport { dateToLocalISO, getFirstDayMonth, getLastDayMonth } from '../../../tools/date_tools'\n\nexport function getListQueryVariables() {\n  let dateStartFrom = dateToLocalISO(getFirstDayMonth(\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  ))\n  let dateStartUntil = dateToLocalISO(getLastDayMonth(\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  ))\n\n  return {\n    dateStartFrom: dateStartFrom,\n    dateStartUntil: dateStartUntil\n  }\n}","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InsightTrialpassesFilter from './InsightTrialpassesFilter';\nimport { getListQueryVariables } from './tools'\n\n// Set some initial values for dates, if not found\n// if (!localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) {\n//   console.log('year from not found... defaulting to today...')\n//   localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, moment().format('YYYY')) \n// } \n\nfunction InsightTrialpassesBase ({ t, history, children, year, month, refetch=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"insight.trialpasses.title\") + \" \" + year + \"-\" + month}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              {/* <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = moment().format('YYYY')\n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List>  */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n            <Formik \n                initialValues={{\n                  year: localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n                  month: localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                  console.log(\"hello world\")\n                  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_YEAR, values.year)\n                  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_MONTH, values.month)\n\n                  const listVariables = getListQueryVariables()\n                  refetch(listVariables)\n                  setSubmitting(false)\n                  \n                }}\n              >\n                {({ isSubmitting, errors, values }) => (\n                <InsightTrialpassesFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                />\n                )}\n              </Formik>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpassesBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\nimport {\n  Icon,\n  List,\n  Table\n} from \"tabler-react\";\n\nimport { GET_TRIALPASSES_QUERY } from './queries'\nimport ContentCard from '../../general/ContentCard'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InsightTrialpassesBase from './InsightTrialpassesBase'\nimport { getListQueryVariables } from './tools'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_YEAR, moment().format('YYYY')) \n  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_MONTH, moment().format('MM')) \n} \n\nfunction InsightTrialpasses ({ t, history }) {\n  const year = localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR)\n  const month = localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  const cardTitle = t(\"insight.trialpasses.title\")\n\n  const listVariables = getListQueryVariables()\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_TRIALPASSES_QUERY, {\n    variables: listVariables\n  })\n\n  if (loading) {\n    return (\n      <InsightTrialpassesBase year={year}>\n        {t(\"general.loading_with_dots\")}\n      </InsightTrialpassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightTrialpassesBase year={year}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightTrialpassesBase>\n    )\n  }\n\n  console.log(data)\n  let accountClasspasses = data.accountClasspasses\n\n\n  return (\n    <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}\n          // headerContent={headerOptions}\n          hasCardBody={false}\n          pageInfo={accountClasspasses.pageInfo}\n          onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountClasspasses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountClasspasses.edges\n              const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new glaccounts at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountClasspasses.__typename,\n                      edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.products')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountClasspasses.edges.map(({ node }) => (\n                <Table.Row>\n                  <Table.Col>\n                    {node.organizationClasspass.name} <br />\n                    <small className='text-muted'>\n                      {node.dateStart}\n                    </small>\n                  </Table.Col>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.account.id}/profile/`}>\n                      {node.account.fullName}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col>\n                    <List unstyled>\n                      {node.account.classpasses.edges && node.account.classpasses.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"credit-card\" /> { \" \" }\n                          {node.organizationClasspass.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                    <List unstyled>\n                      {node.account.subscriptions.edges && node.account.subscriptions.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"edit\" /> { \" \" }\n                          {node.organizationSubscription.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </InsightTrialpassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpasses))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport HomeItemButton from \"../../ui/HomeItemButton\"\n\n\nclass OrganizationHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"School home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"organization.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.organization.title\")}</h5>\n                    {t(\"organization.organization.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.locations.title\")}</h5>\n                    {t(\"organization.locations.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/locations\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.classtypes.title\")}</h5>\n                    {t(\"organization.classtypes.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/classtypes\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.classpasses.title\")}</h5>\n                    {t(\"organization.classpasses.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/classpasses\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.subscriptions.title\")}</h5>\n                    {t(\"organization.subscriptions.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/subscriptions\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              {/* <Grid.Col md={3} lg={3}>\n                <Link to='/organization/appointment_categories'>\n                  <StampCard header={<small>{t('organization.appointments.title')}</small>} footer={t('')} color=\"blue\" icon=\"calendar\" />\n                </Link>\n              </Grid.Col> */}\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.levels.title\")}</h5>\n                    {t(\"organization.levels.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/levels\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.shifts.title\")}</h5>\n                    {t(\"organization.shifts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/shifts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.holidays.title\")}</h5>\n                    {t(\"organization.holidays.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/holidays\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.discoveries.title\")}</h5>\n                    {t(\"organization.discoveries.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/discoveries\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.languages.title\")}</h5>\n                    {t(\"organization.languages.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/languages\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.organization.branding.title\")}</h5>\n                    {t(\"organization.organization.branding.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=/branding\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.documents.title\")}</h5>\n                    {t(\"organization.documents.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/documents/T3JnYW5pemF0aW9uTm9kZToxMDA=\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"organizationannouncement\">\n\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"organization.announcements.title\")}</h5>\n                      {t(\"organization.announcements.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/organization/announcements\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationHome))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ORGANIZATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .required(t('yup.field_required')),\n    address: Yup.string(),\n    phone: Yup.string(),\n    email: Yup.string()\n      .email(t('yup.email')),\n    registration: Yup.string(),\n    taxRegistration: Yup.string(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nconst OrganizationForm = ({ \n  t, \n  history, \n  isSubmitting, \n  errors, \n  values, \n  setFieldTouched, \n  setFieldValue,\n}) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group label={t('general.name')}>\n          <Field type=\"text\" \n                  name=\"name\" \n                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.address')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"address\"\n            initialValue={values.address}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"address\", e.target.getContent())\n              setFieldTouched(\"address\", true, true)\n            }}\n          />\n          <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('organization.organization.registration')}>\n              <Field type=\"text\" \n                      name=\"registration\" \n                      className={(errors.registration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"registration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('organization.organization.tax_registration')}>\n              <Field type=\"text\" \n                      name=\"taxRegistration\" \n                      className={(errors.taxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"taxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n          color=\"primary\"\n          // className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.submit')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nfunction OrganizationEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            <div className=\"page-options d-flex\">\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('organization.organization.title_edit')}</Card.Title>\n              </Card.Header>\n              {children}\n            </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationEditBase))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY } from './queries'\nimport { ORGANIZATION_SCHEMA } from './yupSchema'\nimport OrganizationForm from './OrganizationForm'\nimport OrganizationEditBase from \"./OrganizationEditBase\"\n\nconst UPDATE_ORGANIZATION = gql`\n  mutation UpdateOrganization($input: UpdateOrganizationInput!) {\n    updateOrganization(input: $input) {\n      organization {\n        id\n        name\n      }\n    }\n  }\n`\n\n\nfunction OrganizationEdit({t, match, history}) {\n  const id = match.params.id\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {\n      id: id\n  }})\n\n  if (loading) return (\n    <OrganizationEditBase>\n      {t(\"general.loading_with_dots\")}\n    </OrganizationEditBase>\n  )\n  if (error) return (\n    <OrganizationEditBase>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </OrganizationEditBase>\n  )\n\n  const initialData = data.organization\n\n  return (\n \n    <OrganizationEditBase>\n      <Formik\n        initialValues={{ \n          name: initialData.name, \n          address: initialData.address,\n          phone: initialData.phone,\n          email: initialData.email,\n          registration: initialData.registration,\n          taxRegistration: initialData.taxRegistration,\n        }}\n        validationSchema={ORGANIZATION_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateOrganization({ variables: {\n            input: {\n              id: match.params.id,\n              name: values.name,\n              address: values.address,\n              phone: values.phone,\n              email: values.email,\n              registration: values.registration,\n              taxRegistration: values.taxRegistration,\n            }\n          }})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('organization.organization.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <OrganizationForm \n            isSubmitting={isSubmitting}\n            values={values}\n            errors={errors}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n          />\n        )}\n      </Formik>\n    </OrganizationEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction OrganizationBrandingBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h3>{t('organization.organization.branding.title')}</h3>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBrandingBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { GET_ORGANIZATION_QUERY } from '../queries'\n\nimport {\n  Button,\n  GalleryCard,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport OrganizationBrandingBase from \"./OrganizationBrandingBase\"\n\n\nfunction OrganizationBranding({t, match, history}) {\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {\n      id: id\n  }})\n\n  if (loading) return (\n    <OrganizationBrandingBase>\n      {t(\"general.loading_with_dots\")}\n    </OrganizationBrandingBase>\n  )\n  if (error) return (\n    <OrganizationBrandingBase>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </OrganizationBrandingBase>\n  )\n\n  const organization = data.organization\n\n  return (\n \n    <OrganizationBrandingBase>\n        <Grid.Row>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_login')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoLogin}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoLogin`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_invoice')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoInvoice}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoInvoice`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_email')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoEmail}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoEmail`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_shop_header')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoShopHeader}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoShopHeader`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_self_checkin')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoSelfCheckin}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoSelfCheckin`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n        </Grid.Row>\n    </OrganizationBrandingBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBranding))","export const customFileInputLabelStyle = {\n    whiteSpace: \"nowrap\",\n    display: \"block\",\n    overflow: \"hidden\"\n  }  \n  ","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm } from 'formik'\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n\n\nconst OrganizationBrandingEditForm = ({ \n  t, \n  history, \n  formTitle,\n  isSubmitting, \n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n}) => (\n    <FoForm>\n      <Card title={formTitle}>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.custom_file_input_label')}>\n                <div className=\"custom-file\">\n                  <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                  <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                    {fileInputLabel}\n                  </label>\n                </div>\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationBrandingEditForm))","import React, { useState, useRef } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY } from '../queries'\nimport OrganizationBrandingBase from \"./OrganizationBrandingBase\"\nimport OrganizationBrandingEditForm from \"./OrganizationBrandingEditForm\"\n\n\nconst UPDATE_ORGANIZATION = gql`\n  mutation UpdateOrganization($input: UpdateOrganizationInput!) {\n    updateOrganization(input: $input) {\n      organization {\n        id\n      }\n    }\n  }\n`\n\n\nfunction OrganizationBrandingEdit({t, match, history}) {\n  const id = match.params.id\n  const updateField = match.params.update_field\n  const returnUrl = `/organization/edit/${id}/branding`\n\n  let formTitle = \"\"\n  switch (updateField) {\n    case \"logoLogin\":\n      formTitle = t(\"organization.branding.logo_login\")\n      break\n    default:\n      break\n  }\n\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  return (\n \n    <OrganizationBrandingBase>\n      <Formik\n        initialValues={{}}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            id: id\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            switch(updateField) {\n              case \"logoLogin\":\n                inputVars.logoLoginFileName = fileName\n                inputVars.logoLogin = b64_enc_file\n                break\n              case \"logoInvoice\":\n                inputVars.logoInvoiceFileName = fileName\n                inputVars.logoInvoice = b64_enc_file\n                break\n              case \"logoEmail\":\n                inputVars.logoEmailFileName = fileName\n                inputVars.logoEmail = b64_enc_file\n                break\n              case \"logoShopHeader\":\n                inputVars.logoShopHeaderFileName = fileName\n                inputVars.logoShopHeader = b64_enc_file\n                break\n              case \"logoSelfCheckin\":\n                inputVars.logoSelfCheckinFileName = fileName\n                inputVars.logoSelfCheckin = b64_enc_file\n                break\n              default:\n                break              \n            }\n            \n            updateOrganization({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_ORGANIZATION_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                setSubmitting(false)\n                history.push(returnUrl)\n                toast.success((t('organization.branding.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            toast.error(t(\"general.please_select_a_file\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <OrganizationBrandingEditForm \n            isSubmitting={isSubmitting}\n            formTitle={formTitle}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n          />\n        )}\n      </Formik>\n    </OrganizationBrandingBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBrandingEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationAnnouncementsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"organization.title\")} >\n          <div className='page-options d-flex'>\n            {(showEditBack) ?\n              <ButtonBack returnUrl=\"/organization/announcements\" />\n            :\n              <HasPermissionWrapper permission=\"add\"\n                          resource=\"organizationlevel\">\n                <ButtonAdd addUrl=\"/organization/announcements/add\" />\n              </HasPermissionWrapper>\n            }\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementsBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayShop\n          displayBackend\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ANNOUNCEMENT_QUERY = gql`\n  query OrganizationAnnouncement($id: ID!) {\n    organizationAnnouncement(id:$id) {\n      id\n      displayPublic\n      displayShop\n      displayBackend\n      title\n      content\n      dateStart\n      dateEnd\n      priority\n    }\n  }\n`\n\nexport const ADD_ANNOUNCEMENT = gql`\n  mutation CreateOrganizationAnnouncement($input:CreateOrganizationAnnouncementInput!) {\n    createOrganizationAnnouncement(input: $input) {\n      organizationAnnouncement {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ANNOUNCEMENT = gql`\n  mutation UpdateOrganizationAnnouncement($input: UpdateOrganizationAnnouncementInput!) {\n    updateOrganizationAnnouncement(input: $input) {\n      organizationAnnouncement {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ANNOUNCEMENT = gql`\nmutation DeleteOrganizationAnnouncement($input: DeleteOrganizationAnnouncementInput!) {\n  deleteOrganizationAnnouncement(input: $input) {\n    ok\n  }\n}\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Button,\n  Icon,\n  Table\n} from \"tabler-react\"\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ContentCard from \"../../general/ContentCard\"\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport OrganizationAnnouncementsBase from \"./OrganizationAnnouncementsBase\"\n\nimport { GET_ANNOUNCEMENTS_QUERY, DELETE_ANNOUNCEMENT } from \"./queries\"\n\nfunction OrganizationAnnouncements({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ANNOUNCEMENTS_QUERY)\n  const [ deleteAnnouncement ] = useMutation(DELETE_ANNOUNCEMENT)\n\n  const cardTitle = t('organization.announcements.title')\n\n  // Loading\n  if (loading) return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.announcements.error_loading')}</p>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n\n  const organizationAnnouncements = data.organizationAnnouncements\n\n  // Empty list\n  if (!organizationAnnouncements.edges.length) { return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.announcements.empty_list')}</p>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )}\n\n  return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}\n                    pageInfo={organizationAnnouncements.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: organizationAnnouncements.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationAnnouncements.edges\n                        const pageInfo = fetchMoreResult.organizationAnnouncements.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new organizationAnnouncements at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationAnnouncements: {\n                                __typename: previousResult.organizationAnnouncements.__typename,\n                                edges: [ ...previousResult.organizationAnnouncements.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.display_public')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.backend')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.priority')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                  {organizationAnnouncements.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col key={v4()}>\n                        {node.title}\n                      </Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayPublic} /></Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayShop} /></Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayBackend} /></Table.Col>\n                      <Table.Col>{moment(node.dateStart).format(dateFormat)}</Table.Col>\n                      <Table.Col>{(node.dateEnd) ? moment(node.dateEnd).format(dateFormat): \"\"}</Table.Col>\n                      <Table.Col>{node.priority}</Table.Col>\n                      <Table.Col className=\"text-right\" key={v4()}>\n                        <Link to={`/organization/announcements/edit/${node.id}`}>\n                          <Button className='btn-sm' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                        <button \n                          className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"organization.announcements.delete_confirm_msg\"),\n                              msgDescription: <p><br />{node.title}</p>,\n                              msgSuccess: t('organization.announcements.deleted'),\n                              deleteFunction: deleteAnnouncement,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_ANNOUNCEMENTS_QUERY} \n                              ]}\n                            })\n                        }}>\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\n// const OrganizationLevels = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_LEVELS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationLevels: levels}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <p>{t('organization.levels.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!levels.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={levels.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: levels.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationLevels.edges\n//                                     const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new levels at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationLevels: {\n//                                             __typename: previousResult.organizationLevels.__typename,\n//                                             edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {levels.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Link to={\"/organization/announcements/add\"}\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(OrganizationAnnouncements))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ANNOUNCEMENT_SCHEMA = Yup.object().shape({\n    title: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    content: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n    priority: Yup.number()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nfunction OrganizationAnnouncementForm({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayPublic\" \n                  checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayShop\" \n                  checked={values.displayShop} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_shop')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayShop\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayBackend\" \n                  checked={values.displayBackend} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_backend')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayBackend\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.title')}>\n              <Field type=\"text\" \n                      name=\"title\" \n                      className={(errors.title) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"title\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('organization.announcements.content')}>\n              <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"content\"\n                initialValue={values.content}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldTouched(\"content\", true)\n                  setFieldValue(\"content\", e.target.getContent())\n                }}\n                />\n              <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.priority')}>\n              <Field type=\"text\" \n                      name=\"priority\" \n                      className={(errors.priority) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"priority\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \n  \nexport default withTranslation()(withRouter(OrganizationAnnouncementForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationAnnouncementsBase from './OrganizationAnnouncementsBase';\nimport { GET_ANNOUNCEMENTS_QUERY, ADD_ANNOUNCEMENT } from './queries'\nimport { ANNOUNCEMENT_SCHEMA } from './yupSchema'\nimport OrganizationAnnouncementForm from './OrganizationAnnouncementForm'\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\n\nfunction OrganizationAnnouncementAdd({t, history}) {\n  const returnUrl = \"/organization/announcements\"\n  const [addAnnouncement] = useMutation(ADD_ANNOUNCEMENT)\n  \n  return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.announcements.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              displayPublic: false,\n              displayShop: false,\n              displayBackend: false,\n              title: '', \n              content: '',\n              dateStart: new Date(),\n              dateEnd: new Date(),\n              priority: 100,\n            }}\n            validationSchema={ANNOUNCEMENT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n              let inputValues = {\n                displayPublic: values.displayPublic,\n                displayBackend: values.displayBackend,\n                displayShop: values.displayShop,\n                title: values.title, \n                content: values.content,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateToLocalISO(values.dateEnd),\n                priority: parseInt(values.priority)\n              }\n\n              addAnnouncement({ variables: {\n                input: inputValues\n              }, refetchQueries: [\n                  {query: GET_ANNOUNCEMENTS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.announcements.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                <OrganizationAnnouncementForm \n                  isSubmitting={isSubmitting}\n                  values={values}\n                  errors={errors}\n                  setFieldTouched={setFieldTouched}\n                  setFieldValue={setFieldValue}\n                  returnUrl={returnUrl}\n                />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementAdd))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationAnnouncementsBase from \"./OrganizationAnnouncementsBase\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { GET_ANNOUNCEMENTS_QUERY, GET_ANNOUNCEMENT_QUERY, UPDATE_ANNOUNCEMENT } from './queries'\nimport { ANNOUNCEMENT_SCHEMA } from './yupSchema'\nimport OrganizationAnnouncementForm from './OrganizationAnnouncementForm'\n\n\nfunction OrganizationAnnouncementEdit({t, history, match}) {\n  const announcementId = match.params.id\n  const cardTitle = t(\"organization.announcements.title_edit\")\n  const returnUrl = \"/organization/announcements\"\n  \n  const { loading, error, data } = useQuery(GET_ANNOUNCEMENT_QUERY, { variables: {\n    id: announcementId\n  }})\n  const [updateAnnouncement] = useMutation(UPDATE_ANNOUNCEMENT)\n\n  if (loading) return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"general.loading_with_dots\")}\n        </Card.Body>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n\n  if (error) return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"general.error_sad_smiley\")}\n        </Card.Body>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n\n  const organizationAnnouncement = data.organizationAnnouncement\n  \n  return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n              initialValues={{ \n                displayPublic: organizationAnnouncement.displayPublic,\n                displayShop: organizationAnnouncement.displayShop,\n                displayBackend: organizationAnnouncement.displayBackend,\n                title: organizationAnnouncement.title, \n                content: organizationAnnouncement.content,\n                dateStart: new Date(organizationAnnouncement.dateStart),\n                dateEnd: new Date(organizationAnnouncement.dateEnd),\n                priority: organizationAnnouncement.priority,\n              }}\n              validationSchema={ANNOUNCEMENT_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                let inputValues = {\n                  id: announcementId,\n                  displayPublic: values.displayPublic,\n                  displayBackend: values.displayBackend,\n                  displayShop: values.displayShop,\n                  title: values.title, \n                  content: values.content,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateToLocalISO(values.dateEnd),\n                  priority: parseInt(values.priority)\n                }\n\n                updateAnnouncement({ variables: {\n                  input: inputValues\n                }, refetchQueries: [\n                    {query: GET_ANNOUNCEMENTS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.announcements.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n              }}\n              >\n              {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                  <OrganizationAnnouncementForm \n                    isSubmitting={isSubmitting}\n                    values={values}\n                    errors={errors}\n                    setFieldTouched={setFieldTouched}\n                    setFieldValue={setFieldValue}\n                    returnUrl={returnUrl}\n                  />\n              )}\n          </Formik>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_APPOINTMENTS_QUERY = gql`\n  query OrganizationAppointments($after: String, $before: String, $organizationAppointmentCategory: ID!, $archived: Boolean!) {\n    organizationAppointments(first: 15, before: $before, after: $after, organizationAppointmentCategory: $organizationAppointmentCategory, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationAppointmentCategory {\n            id\n            name\n          }\n          archived,\n          displayPublic\n          name\n        }\n      }\n    }\n    organizationAppointmentCategory(id: $organizationAppointmentCategory) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_APPOINTMENT_QUERY = gql`\n  query OrganizationAppointment($id: ID!, $after: String, $before: String) {\n    organizationAppointment(id:$id) {\n      id\n      name\n      displayPublic\n      archived\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query AppointmentInputValues($after: String, $before: String, $archived: Boolean) {\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_APPOINTMENTS_QUERY } from \"./queries\"\n\nconst ARCHIVE_APPOINTMENT = gql`\n  mutation ArchiveOrganizationAppointment($input: ArchiveOrganizationAppointmentInput!) {\n    archiveOrganizationAppointment(input: $input) {\n      organizationAppointment {\n        id\n        archived\n      }\n    }\n  }\n`\n\nconst OrganizationAppointments = ({ t, history, match, archived=false }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"organization.title\")}>\n          <div className=\"page-options d-flex\">\n            <Link to=\"/organization/appointment_categories\" \n                  className='btn btn-outline-secondary btn-sm'>\n                <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('organization.appointment_categories.title')}\n            </Link>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            <Query query={GET_APPOINTMENTS_QUERY} variables={{ archived, organizationAppointmentCategory: match.params.category_id }}>\n             {({ loading, error, data: {organizationAppointments: appointments, organizationAppointmentCategory: location}, refetch, fetchMore }) => {\n                // Loading\n                if (loading) return (\n                  <ContentCard cardTitle={t('organization.appointments.title')}>\n                    <Dimmer active={true}\n                            loader={true}>\n                    </Dimmer>\n                  </ContentCard>\n                )\n                // Error\n                if (error) return (\n                  <ContentCard cardTitle={t('organization.appointments.title')}>\n                    <p>{t('organization.appointments.error_loading')}</p>\n                  </ContentCard>\n                )\n                const headerOptions = <Card.Options>\n                  <Button color={(!archived) ? 'primary': 'secondary'}  \n                          size=\"sm\"\n                          onClick={() => {archived=false; refetch({archived});}}>\n                    {t('general.current')}\n                  </Button>\n                  <Button color={(archived) ? 'primary': 'secondary'} \n                          size=\"sm\" \n                          className=\"ml-2\" \n                          onClick={() => {archived=true; refetch({archived});}}>\n                    {t('general.archive')}\n                  </Button>\n                </Card.Options>\n\n                // Empty list\n                if (!appointments.edges.length) { return (\n                  <ContentCard cardTitle={t('organization.appointments.title')}\n                               headerContent={headerOptions}>\n                    <p>\n                    {(!archived) ? t('organization.appointments.empty_list') : t(\"organization.appointments.empty_archive\")}\n                    </p>\n                   \n                  </ContentCard>\n                )} else {   \n                // Life's good! :)\n                return (\n                  <ContentCard cardTitle={t('organization.appointments.title')}\n                               headerContent={headerOptions}\n                               pageInfo={appointments.pageInfo}\n                               onLoadMore={() => {\n                                fetchMore({\n                                  variables: {\n                                    after: appointments.pageInfo.endCursor\n                                  },\n                                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                                    const newEdges = fetchMoreResult.organizationAppointmentPrices.edges\n                                    const pageInfo = fetchMoreResult.organizationAppointmentPrices.pageInfo\n\n                                    return newEdges.length\n                                      ? {\n                                          // Put the new locations at the end of the list and update `pageInfo`\n                                          // so we have the new `endCursor` and `hasNextPage` values\n                                          organizationAppointmentPrices: {\n                                            __typename: previousResult.organizationAppointmentPrices.__typename,\n                                            edges: [ ...previousResult.organizationAppointmentPrices.edges, ...newEdges ],\n                                            pageInfo\n                                          }\n                                        }\n                                      : previousResult\n                                  }\n                                })\n                              }} >\n                    <div>\n                      <Alert type=\"primary\">\n                        <strong>{t('general.appointment_category')}</strong> {location.name}\n                      </Alert>\n\n                      <Table>\n                        <Table.Header>\n                          <Table.Row key={v4()}>\n                            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                          </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {appointments.edges.map(({ node }) => (\n                              <Table.Row key={v4()}>\n                                <Table.Col key={v4()}>\n                                  {node.name}\n                                </Table.Col>\n                                <Table.Col key={v4()}>\n                                  {(node.displayPublic) ? \n                                    <Badge color=\"success\">{t('general.yes')}</Badge>: \n                                    <Badge color=\"danger\">{t('general.no')}</Badge>}\n                                </Table.Col>\n                                <Table.Col className=\"text-right\" key={v4()}>\n                                  {(node.archived) ? \n                                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                                    <span>\n                                      <Button className='btn-sm' \n                                              onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/edit/\" + node.id)}\n                                              color=\"secondary\">\n                                        {t('general.edit')}\n                                      </Button>\n                                      <Button className='btn-sm' \n                                              onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + node.id)}\n                                              color=\"secondary\">\n                                        {t('organization.appointments.instructor_prices')}\n                                      </Button>\n                                    </span>\n                                  }\n                                </Table.Col>\n                                <Mutation mutation={ARCHIVE_APPOINTMENT} key={v4()}>\n                                  {(archiveAppointmentCategorysRoom, { data }) => (\n                                    <Table.Col className=\"text-right\" key={v4()}>\n                                      <button className=\"icon btn btn-link btn-sm\" \n                                          title={t('general.archive')} \n                                          href=\"\"\n                                          onClick={() => {\n                                            console.log(\"clicked archived\")\n                                            let id = node.id\n                                            archiveAppointmentCategorysRoom({ variables: {\n                                              input: {\n                                              id,\n                                              archived: !archived\n                                              }\n                                      }, refetchQueries: [\n                                          { \n                                            query: GET_APPOINTMENTS_QUERY, \n                                            variables: {\"archived\": archived, organizationAppointmentCategory: match.params.category_id }\n                                          }\n                                      ]}).then(({ data }) => {\n                                        console.log('got data', data);\n                                        toast.success(\n                                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                                            position: toast.POSITION.BOTTOM_RIGHT\n                                          })\n                                      }).catch((error) => {\n                                        toast.error((t('general.toast_server_error')) +  error, {\n                                            position: toast.POSITION.BOTTOM_RIGHT\n                                          })\n                                        console.log('there was an error sending the query', error);\n                                      })\n                                      }}>\n                                        <Icon prefix=\"fa\" name=\"inbox\" />\n                                      </button>\n                                    </Table.Col>\n                                  )}\n                                </Mutation>\n                              </Table.Row>\n                            ))}\n                        </Table.Body>\n                      </Table>\n                      </div>\n                  </ContentCard>\n                )}}\n             }\n            </Query>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointment\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/add/\")}>\n                <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.appointments.add')}\n              </Button>\n            </HasPermissionWrapper>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointments))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const APPOINTMENT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst OrganizationAppointmentForm = ({ t, history, match, inputData, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('organization.appointments.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                    name=\"financeGlaccount\" \n                    className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                    name=\"financeCostcenter\" \n                    className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" type=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentForm))","import React from 'react'\nimport { Mutation, Query } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport { GET_APPOINTMENTS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { APPOINTMENT_SCHEMA } from './yupSchema'\nimport OrganizationAppointmentForm from './OrganizationAppointmentForm'\n\n\nconst ADD_APPOINTMENT = gql`\n  mutation CreateOrganizationAppointment($input: CreateOrganizationAppointmentInput!) {\n    createOrganizationAppointment(input: $input) {\n      organizationAppointment {\n        id\n        organizationAppointmentCategory {\n          id\n          name\n        }\n        archived\n        displayPublic\n        name\n      }\n    }\n  }\n`\n\nconst returnUrl = \"/organization/appointment_categories/appointments/\"\n\nconst OrganizationAppointmentAdd = ({ t, history, match }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t('organization.title')} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n          <Card>\n            <Card.Header>\n              <Card.Title>{t('organization.appointments.title_add')}</Card.Title>\n            </Card.Header>\n            <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false}} >\n              {({ loading, error, data, refetch }) => {\n                // Loading\n                if (loading) return <p>{t('general.loading_with_dots')}</p>\n                // Error\n                if (error) {\n                  console.log(error)\n                  return <p>{t('general.error_sad_smiley')}</p>\n                }\n                \n                console.log('query data')\n                console.log(data)\n                const inputData = data\n\n                return (\n                  <Mutation mutation={ADD_APPOINTMENT} onCompleted={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments\")}> \n                      {(addAppointment, { data }) => (\n                          <Formik\n                              initialValues={{ name: '', displayPublic: true }}\n                              validationSchema={APPOINTMENT_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  addAppointment({ variables: {\n                                    input: {\n                                      organizationAppointmentCategory: match.params.category_id,\n                                      name: values.name, \n                                      displayPublic: values.displayPublic,\n                                      financeGlaccount: values.financeGlaccount,\n                                      financeCostcenter: values.financeCostcenter\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_APPOINTMENTS_QUERY,\n                                      variables: {\"archived\": false, \"organizationAppointmentCategory\": match.params.category_id }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data);\n                                      toast.success((t('organization.appointments.toast_add_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                <OrganizationAppointmentForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  errors={errors}\n                                  values={values}\n                                  returnUrl={\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments\"}\n                                  />\n                              )}\n                          </Formik>\n                      )}\n                    </Mutation>\n                )}}\n              </Query>                    \n          </Card>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointment\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(returnUrl + match.params.category_id)}>\n                <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n              </Button>\n            </HasPermissionWrapper>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentAdd))","import React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport { GET_APPOINTMENTS_QUERY, GET_APPOINTMENT_QUERY } from './queries'\nimport { APPOINTMENT_SCHEMA } from './yupSchema'\nimport OrganizationAppointmentForm from './OrganizationAppointmentForm'\n\n\nconst UPDATE_APPOINTMENT = gql`\n  mutation UpdateOrganizationAppointment($input: UpdateOrganizationAppointmentInput!) {\n    updateOrganizationAppointment(input: $input) {\n      organizationAppointment {\n        id\n        name\n        displayPublic\n      }\n    }\n  }\n`\n\n\nclass OrganizationAppointmentEdit extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization appointment edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const returnUrl = \"/organization/appointment_categories/\" + match.params.category_id + \"/appointments\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t('organization.title')} />\n            <Grid.Row>\n              <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.appointments.title_edit')}</Card.Title>\n                  {console.log(match.params.id)}\n                </Card.Header>\n                <Query query={GET_APPOINTMENT_QUERY} variables={{ id }} >\n                {({ loading, error, data, refetch }) => {\n                    // Loading\n                    if (loading) return <p>{t('general.loading_with_dots')}</p>\n                    // Error\n                    if (error) {\n                      console.log(error)\n                      return <p>{t('general.error_sad_smiley')}</p>\n                    }\n                    \n                    const inputData = data\n                    const initialData = data.organizationAppointment\n                    console.log('query data')\n                    console.log(data)\n\n                    let initialGlaccount = \"\"\n                    if (initialData.financeGlaccount) {\n                      initialGlaccount =  initialData.financeGlaccount.id\n                    } \n\n                    let initialCostcenter = \"\"\n                    if (initialData.financeCostcenter) {\n                      initialCostcenter =  initialData.financeCostcenter.id\n                    } \n\n                    return (\n                      \n                      <Mutation mutation={UPDATE_APPOINTMENT} onCompleted={() => history.push(returnUrl)}> \n                      {(updateLocation, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                name: initialData.name, \n                                displayPublic: initialData.displayPublic,\n                                financeGlaccount: initialGlaccount,\n                                financeCostcenter: initialCostcenter,\n                              }}\n                              validationSchema={APPOINTMENT_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n\n                                  updateLocation({ variables: {\n                                    input: {\n                                      id: match.params.id,\n                                      name: values.name,\n                                      displayPublic: values.displayPublic,\n                                      financeGlaccount: values.financeGlaccount,\n                                      financeCostcenter: values.financeCostcenter\n                                    }\n                                  }, refetchQueries: [\n                                    {query: GET_APPOINTMENTS_QUERY,\n                                      variables: {\"archived\": false, \"organizationAppointmentCategory\": match.params.category_id }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('organization.appointments.toast_edit_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                <OrganizationAppointmentForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  errors={errors}\n                                  values={values}\n                                  returnUrl={returnUrl}\n                                />\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                      )}}\n                </Query>\n              </Card>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"change\"\n                                      resource=\"organizationappointment\">\n                  <Button color=\"primary btn-block mb-6\"\n                          onClick={() => history.push(returnUrl)}>\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </HasPermissionWrapper>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationAppointmentEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_APPOINTMENT_CATEGORIES_QUERY = gql`\n  query OrganizationAppointmentCategories($after: String, $before: String, $archived: Boolean) {\n    organizationAppointmentCategories(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          displayPublic,\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_APPOINTMENT_CATEGORY_QUERY = gql`\n  query OrganizationAppointmentCategory($id: ID!) {\n    organizationAppointmentCategory(id:$id) {\n      id\n      name\n      displayPublic\n      archived\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\n\nimport { GET_APPOINTMENT_CATEGORIES_QUERY } from \"./queries\"\n\nconst ARCHIVE_APPOINTMENT_CATEGORY = gql`\n  mutation ArchiveOrganizationAppointmentCategory($input: ArchiveOrganizationAppointmentCategoryInput!) {\n    archiveOrganizationAppointmentCategory(input: $input) {\n      organizationAppointmentCategory {\n        id\n        archived\n      }\n    }\n  }\n`\n\nconst OrganizationAppointmentCategories = ({ t, history, archived=false }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t('organization.title')} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n            <Query query={GET_APPOINTMENT_CATEGORIES_QUERY} variables={{ archived }}>\n             {({ loading, error, data: {organizationAppointmentCategories: appointment_categories}, refetch, fetchMore }) => {\n                // Loading\n                if (loading) return (\n                  <ContentCard cardTitle={t('organization.appointment_categories.title')}>\n                    <Dimmer active={true}\n                            loader={true}>\n                    </Dimmer>\n                  </ContentCard>\n                )\n                // Error\n                if (error) return (\n                  <ContentCard cardTitle={t('organization.appointment_categories.title')}>\n                    <p>{t('organization.appointment_categories.error_loading')}</p>\n                  </ContentCard>\n                )\n                const headerOptions = <Card.Options>\n                  <Button color={(!archived) ? 'primary': 'secondary'}  \n                          size=\"sm\"\n                          onClick={() => {archived=false; refetch({archived});}}>\n                    {t('general.current')}\n                  </Button>\n                  <Button color={(archived) ? 'primary': 'secondary'} \n                          size=\"sm\" \n                          className=\"ml-2\" \n                          onClick={() => {archived=true; refetch({archived});}}>\n                    {t('general.archive')}\n                  </Button>\n                </Card.Options>\n                \n                // Empty list\n                if (!appointment_categories.edges.length) { return (\n                  <ContentCard cardTitle={t('organization.appointment_categories.title')}\n                               headerContent={headerOptions}>\n                    <p>\n                    {(!archived) ? t('organization.appointment_categories.empty_list') : t(\"organization.appointment_categories.empty_archive\")}\n                    </p>\n                   \n                  </ContentCard>\n                )} else {   \n                // Life's good! :)\n                return (\n                  <ContentCard cardTitle={t('organization.appointment_categories.title')}\n                               headerContent={headerOptions}\n                               pageInfo={appointment_categories.pageInfo}\n                               onLoadMore={() => {\n                                fetchMore({\n                                  variables: {\n                                    after: appointment_categories.pageInfo.endCursor\n                                  },\n                                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                                    const newEdges = fetchMoreResult.organizationAppointmentCategories.edges\n                                    const pageInfo = fetchMoreResult.organizationAppointmentCategories.pageInfo\n\n                                    return newEdges.length\n                                      ? {\n                                          // Put the new appointment_categories at the end of the list and update `pageInfo`\n                                          // so we have the new `endCursor` and `hasNextPage` values\n                                          organizationAppointmentCategories: {\n                                            __typename: previousResult.organizationAppointmentCategories.__typename,\n                                            edges: [ ...previousResult.organizationAppointmentCategories.edges, ...newEdges ],\n                                            pageInfo\n                                          }\n                                        }\n                                      : previousResult\n                                  }\n                                })\n                              }} >\n                    <Table>\n                          <Table.Header>\n                            <Table.Row key={v4()}>\n                              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                            </Table.Row>\n                          </Table.Header>\n                          <Table.Body>\n                              {appointment_categories.edges.map(({ node }) => (\n                                <Table.Row key={v4()}>\n                                  <Table.Col key={v4()}>\n                                    {node.name}\n                                  </Table.Col>\n                                  <Table.Col key={v4()}>\n                                    {(node.displayPublic) ? \n                                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                                  </Table.Col>\n                                  <Table.Col className=\"text-right\" key={v4()}>\n                                    {(node.archived) ? \n                                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                                      <div>\n                                        <Button className='btn-sm' \n                                                onClick={() => history.push(\"/organization/appointment_categories/edit/\" + node.id)}\n                                                color=\"secondary\">\n                                          {t('general.edit')}\n                                        </Button>\n                                        <Button className='btn-sm' \n                                                onClick={() => history.push(\"/organization/appointment_categories/\" + node.id + \"/appointments/\")}\n                                                color=\"secondary\">\n                                          {t('organization.appointments.title')}\n                                        </Button>\n                                      </div>\n                                    }\n                                  </Table.Col>\n                                  <Mutation mutation={ARCHIVE_APPOINTMENT_CATEGORY} key={v4()}>\n                                    {(archiveLocation, { data }) => (\n                                      <Table.Col className=\"text-right\" key={v4()}>\n                                        <button className=\"icon btn btn-link btn-sm\" \n                                           title={t('general.archive')} \n                                           href=\"\"\n                                           onClick={() => {\n                                             console.log(\"clicked archived\")\n                                             let id = node.id\n                                             archiveLocation({ variables: {\n                                               input: {\n                                                id,\n                                                archived: !archived\n                                               }\n                                        }, refetchQueries: [\n                                            {query: GET_APPOINTMENT_CATEGORIES_QUERY, variables: {\"archived\": archived }}\n                                        ]}).then(({ data }) => {\n                                          console.log('got data', data);\n                                          toast.success(\n                                            (archived) ? t('general.unarchived'): t('general.archived'), {\n                                              position: toast.POSITION.BOTTOM_RIGHT\n                                            })\n                                        }).catch((error) => {\n                                          toast.error((t('general.toast_server_error')) +  error, {\n                                              position: toast.POSITION.BOTTOM_RIGHT\n                                            })\n                                          console.log('there was an error sending the query', error);\n                                        })\n                                        }}>\n                                          <Icon prefix=\"fa\" name=\"inbox\" />\n                                        </button>\n                                      </Table.Col>\n                                    )}\n                                  </Mutation>\n                                </Table.Row>\n                              ))}\n                          </Table.Body>\n                        </Table>\n                  </ContentCard>\n                )}}\n             }\n            </Query>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointmentcategory\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(\"/organization/appointment_categories/add\")}>\n                <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.appointment_categories.add')}\n              </Button>\n            </HasPermissionWrapper>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentCategories))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationAppointmentCategoryForm = ({ t, history, isSubmitting, values, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.appointment_category.public')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n        </Form.Group>    \n\n        <Form.Group label={t('general.name')}>\n          <Field type=\"text\" \n                  name=\"name\" \n                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\" type=\"button\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationAppointmentCategoryForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const APPOINTMENT_CATEGORY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { Mutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport OrganizationAppointmentCategoryForm from \"./OrganizationAppointmentCategoryForm\"\nimport { GET_APPOINTMENT_CATEGORIES_QUERY } from './queries'\nimport { APPOINTMENT_CATEGORY_SCHEMA } from './yupSchema'\n\n\nconst ADD_ORGANIZATION_APPOINTMENT_CATEGORY = gql`\n  mutation CreateOrganizationAppointmentCategory($input: CreateOrganizationAppointmentCategoryInput!) {\n    createOrganizationAppointmentCategory(input: $input) {\n      organizationAppointmentCategory {\n        id\n        archived\n        displayPublic\n        name\n      }\n    }\n  }\n`\n\nconst returnUrl = \"/organization/appointment_categories\"\n\nconst OrganizationAppointmentCategoryAdd = ({ t, history }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t('organization.title')} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n          <Card>\n            <Card.Header>\n              <Card.Title>{t('organization.appointment_categories.title_add')}</Card.Title>\n            </Card.Header>\n            <Mutation mutation={ADD_ORGANIZATION_APPOINTMENT_CATEGORY} onCompleted={() => history.push(returnUrl)}> \n                {(addAppointmentCategory, { data }) => (\n                    <Formik\n                        initialValues={{ name: '', displayPublic: true }}\n                        validationSchema={APPOINTMENT_CATEGORY_SCHEMA}\n                        onSubmit={(values, { setSubmitting }) => {\n                            addAppointmentCategory({ variables: {\n                              input: {\n                                name: values.name, \n                                displayPublic: values.displayPublic\n                              }\n                            }, refetchQueries: [\n                                {query: GET_APPOINTMENT_CATEGORIES_QUERY, variables: {\"archived\": false }}\n                            ]})\n                            .then(({ data }) => {\n                                console.log('got data', data);\n                                toast.success((t('organization.appointment_categories.toast_add_success')), {\n                                    position: toast.POSITION.BOTTOM_RIGHT\n                                  })\n                              }).catch((error) => {\n                                toast.error((t('general.toast_server_error')) +  error, {\n                                    position: toast.POSITION.BOTTOM_RIGHT\n                                  })\n                                console.log('there was an error sending the query', error)\n                                setSubmitting(false)\n                              })\n                        }}\n                        >\n                        {({ isSubmitting, errors, values }) => (\n                          <OrganizationAppointmentCategoryForm\n                            isSubmitting={isSubmitting}\n                            errors={errors}\n                            values={values}\n                            returnUrl={returnUrl}\n                          />\n                        )}\n                    </Formik>\n                )}\n                </Mutation>\n          </Card>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointmentcategory\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(returnUrl)}>\n                <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n              </Button>\n            </HasPermissionWrapper>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentCategoryAdd))","import React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { GET_APPOINTMENT_CATEGORIES_QUERY, GET_APPOINTMENT_CATEGORY_QUERY } from './queries'\nimport { APPOINTMENT_CATEGORY_SCHEMA } from './yupSchema'\nimport OrganizationAppointmentCategoryForm from \"./OrganizationAppointmentCategoryForm\"\n\n\nconst UPDATE_APPOINTMENT_CATEGORY = gql`\n  mutation UpdateOrganizationAppointmentCategory($input: UpdateOrganizationAppointmentCategoryInput!) {\n    updateOrganizationAppointmentCategory(input: $input) {\n      organizationAppointmentCategory {\n        id\n        name\n        displayPublic\n      }\n    }\n  }\n`\n\n\nclass OrganizationAppointmentCategoryEdit extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization location edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const returnUrl = \"/organization/appointment_categories\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t('organization.title')} />\n            <Grid.Row>\n              <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.appointment_categories.title_edit')}</Card.Title>\n                  {console.log(match.params.id)}\n                </Card.Header>\n                <Query query={GET_APPOINTMENT_CATEGORY_QUERY} variables={{ id }} >\n                {({ loading, error, data, refetch }) => {\n                    // Loading\n                    if (loading) return <p>{t('general.loading_with_dots')}</p>\n                    // Error\n                    if (error) {\n                      console.log(error)\n                      return <p>{t('general.error_sad_smiley')}</p>\n                    }\n                    \n                    const initialData = data.organizationAppointmentCategory;\n                    console.log('query data')\n                    console.log(data)\n\n                    return (\n                      \n                      <Mutation mutation={UPDATE_APPOINTMENT_CATEGORY} onCompleted={() => history.push(returnUrl)}> \n                      {(updateAppointmentCategory, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                name: initialData.name, \n                                displayPublic: initialData.displayPublic \n                              }}\n                              validationSchema={APPOINTMENT_CATEGORY_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n\n                                  updateAppointmentCategory({ variables: {\n                                    input: {\n                                      id: match.params.id,\n                                      name: values.name,\n                                      displayPublic: values.displayPublic \n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_APPOINTMENT_CATEGORIES_QUERY, variables: {\"archived\": false }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('organization.appointment_categories.toast_edit_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                  <OrganizationAppointmentCategoryForm\n                                    isSubmitting={isSubmitting}\n                                    errors={errors}\n                                    values={values}\n                                    returnUrl={returnUrl}\n                                  />\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                      )}}\n                </Query>\n              </Card>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"change\"\n                                      resource=\"organizationappointmentcategory\">\n                  <Button color=\"primary btn-block mb-6\"\n                          onClick={() => history.push(returnUrl)}>\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </HasPermissionWrapper>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationAppointmentCategoryEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_APPOINTMENT_PRICES_QUERY = gql`\n  query OrganizationAppointmentPrices($after: String, $before: String, $organizationAppointment: ID!) {\n    organizationAppointmentPrices(first: 15, before: $before, after: $after, organizationAppointment: $organizationAppointment) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationAppointment(id: $organizationAppointment) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_APPOINTMENT_PRICE_QUERY = gql`\n  query OrganizationAppointment($id: ID!, $after: String, $before: String) {\n    organizationAppointmentPrice(id:$id) {\n      id\n      price\n      account {\n        id\n        fullName\n      }\n      financeTaxRate {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    accountInstructorProfiles(first: 100, before: $before, after: $after, appointments: true, account_IsActive: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query AppointmentInputValues($after: String, $before: String, $archived: Boolean) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    accountInstructorProfiles(first: 100, before: $before, after: $after, appointments: true, account_IsActive: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Alert,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Button,\n  Container,\n  Table\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_APPOINTMENT_PRICES_QUERY } from \"./queries\"\n\nconst DELETE_APPOINTMENT_PRICE = gql`\n  mutation DeleteOrganizationAppointmentPrice($input: DeleteOrganizationAppointmentPriceInput!) {\n    deleteOrganizationAppointmentPrice(input: $input) {\n      ok\n    }\n  }\n`\n\nconst OrganizationAppointmentPrices = ({ t, history, match }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"organization.title\")}>\n          <div className=\"page-options d-flex\">\n            <Link to={\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments\"}\n                  className='btn btn-outline-secondary btn-sm'>\n                <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('general.appointment')}\n            </Link>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            <Query query={GET_APPOINTMENT_PRICES_QUERY} variables={{ organizationAppointment: match.params.appointment_id }}>\n             {({ loading, error, data, refetch, fetchMore }) => {\n                // Loading\n                if (loading) return (\n                  <ContentCard cardTitle={t('organization.appointment_prices.title')}>\n                    <Dimmer active={true}\n                            loader={true}>\n                    </Dimmer>\n                  </ContentCard>\n                )\n                // Error\n                if (error) return (\n                  <ContentCard cardTitle={t('organization.appointment_prices.title')}>\n                    <p>{t('organization.appointment_prices.error_loading')}</p>\n                  </ContentCard>\n                )\n\n                const prices = data.organizationAppointmentPrices\n\n                // Empty list\n                if (!prices.edges.length) { return (\n                  <ContentCard cardTitle={t('organization.appointment_prices.title')}>\n                    <p>\n                      {t('organization.appointment_prices.empty_list')}\n                    </p>\n                   \n                  </ContentCard>\n                )} else {   \n                // Life's good! :)\n                return (\n                  <ContentCard cardTitle={t('organization.appointment_prices.title')}\n                               pageInfo={prices.pageInfo}\n                               onLoadMore={() => {\n                                fetchMore({\n                                  variables: {\n                                    after: prices.pageInfo.endCursor\n                                  },\n                                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                                    const newEdges = fetchMoreResult.organizationAppointmentPrices.edges\n                                    const pageInfo = fetchMoreResult.organizationAppointmentPrices.pageInfo\n\n                                    return newEdges.length\n                                      ? {\n                                          // Put the new locations at the end of the list and update `pageInfo`\n                                          // so we have the new `endCursor` and `hasNextPage` values\n                                          organizationAppointmentPrices: {\n                                            __typename: previousResult.organizationAppointmentPrices.__typename,\n                                            edges: [ ...previousResult.organizationAppointmentPrices.edges, ...newEdges ],\n                                            pageInfo\n                                          }\n                                        }\n                                      : previousResult\n                                  }\n                                })\n                              }} >\n                    <div>\n                      <Alert type=\"primary\">\n                        <strong>{t('general.prices_for')} {t('general.appointment')}</strong> {data.organizationAppointment.name}\n                      </Alert>\n\n                      <Table>\n                        <Table.Header>\n                          <Table.Row key={v4()}>\n                            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                            <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n                          </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {prices.edges.map(({ node }) => (\n                              <Table.Row key={v4()}>\n                                {console.log(node)}\n                                <Table.Col key={v4()}>\n                                  {node.account.fullName}\n                                </Table.Col>\n                                <Table.Col key={v4()}>\n                                  {node.priceDisplay}\n                                </Table.Col>\n                                <Table.Col className=\"text-right\" key={v4()}>\n                                  {(node.archived) ? \n                                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                                    <span>\n                                      <Button className='btn-sm' \n                                              onClick={() => history.push(\"/organization/appointment_categories/\" + \n                                                match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id + \"/edit/\" + node.id)}\n                                              color=\"secondary\">\n                                        {t('general.edit')}\n                                      </Button>\n                                    </span>\n                                  }\n                                </Table.Col>\n                                <Mutation mutation={DELETE_APPOINTMENT_PRICE} key={v4()}>\n                                  {(deleteAppointmentPrice, { data }) => (\n                                    <Table.Col className=\"text-right\" key={v4()}>\n                                      <button className=\"icon btn btn-link btn-sm\" \n                                        title={t('general.delete')} \n                                        href=\"\"\n                                        onClick={() => {\n                                          confirm_delete({\n                                            t: t,\n                                            msgConfirm: t(\"organization.appointment_prices.delete_confirm_msg\"),\n                                            msgDescription: <p>{node.account.fullName} {node.priceDisplay}</p>,\n                                            msgSuccess: t('organization.appointment_prices.deleted'),\n                                            deleteFunction: deleteAppointmentPrice,\n                                            functionVariables: { variables: {\n                                              input: {\n                                                id: node.id\n                                              }\n                                            }, refetchQueries: [\n                                              {query: GET_APPOINTMENT_PRICES_QUERY, variables: { organizationAppointment: match.params.appointment_id }} \n                                            ]}\n                                          })\n                                      }}>\n                                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                                      </button>\n                                    </Table.Col>\n                                  )}\n                                </Mutation>\n                              </Table.Row>\n                            ))}\n                        </Table.Body>\n                      </Table>\n                      </div>\n                  </ContentCard>\n                )}}\n             }\n            </Query>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointment\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id + \"/add\")}>\n                <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.appointment_prices.add')}\n              </Button>\n            </HasPermissionWrapper>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentPrices))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const APPOINTMENT_PRICE_SCHEMA = Yup.object().shape({\n    account: Yup.string()\n      .required(t('yup.field_required')),\n    price: Yup.number()\n      .required(t('yup.field_required')),\n    financeTaxRate: Yup.string()\n      .required(t('yup.field_required'))\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst OrganizationAppointmentForm = ({ t, history, match, inputData, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n         <Form.Group label={t('general.instructor')}>\n            <Field component=\"select\" \n                    name=\"account\" \n                    className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.accountInstructorProfiles.edges.map(({ node }) =>\n                <option value={node.account.id} key={v4()}>{node.account.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.price')}>\n              <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.taxrate')}>\n              <Field component=\"select\" \n                      name=\"financeTaxRate\" \n                      className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in appointment price form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.financeTaxRates.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" type=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentForm))","import React from 'react'\nimport { Mutation, Query } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_APPOINTMENT_PRICES_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { APPOINTMENT_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationAppointmentPriceForm from './OrganizationAppointmentPriceForm'\n\nconst ADD_APPOINTMENT_PRICE = gql`\n  mutation CreateOrganizationAppointmentPrice($input: CreateOrganizationAppointmentPriceInput!) {\n    createOrganizationAppointmentPrice(input: $input) {\n      organizationAppointmentPrice {\n        id\n        account {\n          id\n          fullName\n        }\n        organizationAppointment {\n          id\n          name\n        }\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nconst OrganizationAppointmentPriceAdd = ({ t, history, match }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t('organization.title')} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n          <Card>\n            <Card.Header>\n              <Card.Title>{t('organization.appointment_prices.title_add')}</Card.Title>\n            </Card.Header>\n            <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false}} >\n              {({ loading, error, data, refetch }) => {\n                // Loading\n                if (loading) return <p>{t('general.loading_with_dots')}</p>\n                // Error\n                if (error) {\n                  console.log(error)\n                  return <p>{t('general.error_sad_smiley')}</p>\n                }\n                \n                console.log('query data')\n                console.log(data)\n                const inputData = data\n\n                return (\n                  <Mutation mutation={ADD_APPOINTMENT_PRICE} onCompleted={\n                    () => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id)}> \n                      {(addAppointment, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                organizationAppointment: '', \n                                account: '',\n                                price: '',\n                                financeTaxRate: \"\",\n                              }}\n                              validationSchema={APPOINTMENT_PRICE_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  addAppointment({ variables: {\n                                    input: {\n                                      organizationAppointment: match.params.appointment_id,\n                                      account: values.account,\n                                      price: values.price, \n                                      financeTaxRate: values.financeTaxRate,\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_APPOINTMENT_PRICES_QUERY,\n                                      variables: {\"organizationAppointment\": match.params.appointment_id }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data);\n                                      toast.success((t('organization.appointment_prices.toast_add_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                <OrganizationAppointmentPriceForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  errors={errors}\n                                  values={values}\n                                  returnUrl={\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id}\n                                />\n                              )}\n                          </Formik>\n                      )}\n                    </Mutation>\n                )}}\n              </Query>                    \n          </Card>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointmentprice\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id)}>\n                <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n              </Button>\n            </HasPermissionWrapper>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentPriceAdd))","import React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { GET_APPOINTMENT_PRICES_QUERY, GET_APPOINTMENT_PRICE_QUERY } from './queries'\nimport { APPOINTMENT_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationAppointmentPriceForm from './OrganizationAppointmentPriceForm'\n\n\n\nconst UPDATE_APPOINTMENT_PRICE = gql`\n  mutation UpdateOrganizationAppointmentPrice($input: UpdateOrganizationAppointmentPriceInput!) {\n    updateOrganizationAppointmentPrice(input: $input) {\n      organizationAppointmentPrice {\n        id\n        account {\n          id\n          fullName\n        }\n        organizationAppointment {\n          id\n          name\n        }\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nclass OrganizationAppointmentPriceEdit extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization appointment edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const appointment_id = match.params.appointment_id\n    const category_id = match.params.category_id\n    const returnUrl = \"/organization/appointment_categories/\" + category_id + \"/appointments/prices/\" + appointment_id\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t('organization.title')} />\n            <Grid.Row>\n              <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.appointment_prices.title_edit')}</Card.Title>\n                  {console.log(match.params.id)}\n                </Card.Header>\n                <Query query={GET_APPOINTMENT_PRICE_QUERY} variables={{ id: id }} >\n                {({ loading, error, data, refetch }) => {\n                    // Loading\n                    if (loading) return <p>{t('general.loading_with_dots')}</p>\n                    // Error\n                    if (error) {\n                      console.log(error)\n                      return <p>{t('general.error_sad_smiley')}</p>\n                    }\n                    \n                    const inputData = data\n                    const initialData = data.organizationAppointmentPrice\n                    console.log('query data')\n                    console.log(data)\n\n                    let initialAccount = \"\"\n                    if (initialData.account) {\n                      initialAccount = initialData.account.id\n                    }\n\n                    let initialFinanceTaxRate = \"\"\n                    if (initialData.financeTaxRate) {\n                      initialFinanceTaxRate =  initialData.financeTaxRate.id\n                    } \n\n                    return (\n                      \n                      <Mutation mutation={UPDATE_APPOINTMENT_PRICE} onCompleted={() => history.push(returnUrl)}> \n                      {(updateLocation, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                account: initialAccount,\n                                price: initialData.price, \n                                financeTaxRate: initialFinanceTaxRate,\n                              }}\n                              validationSchema={APPOINTMENT_PRICE_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n\n                                  updateLocation({ variables: {\n                                    input: {\n                                      id: match.params.id,\n                                      account: values.account,\n                                      price: values.price,\n                                      financeTaxRate: values.financeTaxRate,\n                                    }\n                                  }, refetchQueries: [\n                                    {query: GET_APPOINTMENT_PRICES_QUERY,\n                                      variables: {organizationAppointment: match.params.appointment_id }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('organization.appointment_prices.toast_edit_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                <OrganizationAppointmentPriceForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  errors={errors}\n                                  values={values}\n                                  returnUrl={returnUrl}\n                                />\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                      )}}\n                </Query>\n              </Card>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"change\"\n                                      resource=\"organizationappointmentprice\">\n                  <Button color=\"primary btn-block mb-6\"\n                          onClick={() => history.push(returnUrl)}>\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </HasPermissionWrapper>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationAppointmentPriceEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationClasspassesBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/classpasses\" />           \n              :\n                <React.Fragment>\n                  <Link to=\"/organization/classpasses/groups\" \n                    className='btn btn-secondary mr-2'>\n                    <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n                  </Link>\n                  <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasspass\">\n                    <ButtonAdd addUrl=\"/organization/classpasses/add\" />\n                  </HasPermissionWrapper>    \n                </React.Fragment>          \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSPASSES_QUERY = gql`\n  query OrganizationClasspasses($after: String, $before: String, $archived: Boolean) {\n    organizationClasspasses(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          trialPass\n          name\n          description\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          validity\n          validityUnit\n          validityUnitDisplay\n          classes\n          unlimited\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_CLASSPASS_QUERY = gql`\n  query OrganizationClasspass($id: ID!, $after: String, $before: String) {\n    organizationClasspass(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      trialPass\n      name\n      description\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      validity\n      validityUnit\n      validityUnitDisplay\n      classes\n      unlimited\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_CLASSPASS = gql`\nmutation CreateClasspass($input: CreateOrganizationClasspassInput!) {\n  createOrganizationClasspass(input: $input) {\n    organizationClasspass {\n      id\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSPASS = gql`\n  mutation UpdateOrganizationClasspass($input: UpdateOrganizationClasspassInput!) {\n    updateOrganizationClasspass(input: $input) {\n      organizationClasspass {\n        id\n      }\n    }\n  }\n`\n\nexport const ARCHIVE_CLASSPASS = gql`\nmutation ArchiveOrganizationClasspass($input: ArchiveOrganizationClasspassInput!) {\n  archiveOrganizationClasspass(input: $input) {\n    organizationClasspass {\n      id\n      archived\n    }\n  }\n}\n`\n","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase'\n\nimport { GET_CLASSPASSES_QUERY, ARCHIVE_CLASSPASS } from \"./queries\"\n\n\nfunction OrganizationClasspasses({t, history}) {\n  const cardTitle = t('organization.classpasses.title')\n  let [archived, setArchived] = useState(false)\n\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_CLASSPASSES_QUERY, {\n    variables: { archived: archived },\n    fetchPolicy: \"network-only\"\n  })\n  const [ archiveClasspass ] = useMutation(ARCHIVE_CLASSPASS)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.classpasses.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  let classpasses = data.organizationClasspasses\n\n  // Empty list\n  if (!classpasses.edges.length) { return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.classpasses.empty_list') : t(\"organization.classpasses.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )}\n\n  return (\n    <OrganizationClasspassesBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={classpasses.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: classpasses.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationClasspasses.edges\n            const pageInfo = fetchMoreResult.organizationClasspasses.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new memberships at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationClasspasses: {\n                    __typename: previousResult.organizationClasspasses.__typename,\n                    edges: [ ...previousResult.organizationClasspasses.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader>{t('organization.classpasses.trial_pass')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.validity')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classpasses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayShop} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.trialPass} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.unlimited) ? t('general.unlimited') : node.classes }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay} <br />\n                    {(node.financeTaxRate) ? \n                      <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                      : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.validity} <br />\n                    <span className=\"text-muted\">\n                      {node.validityUnitDisplay}\n                    </span>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/classpasses/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveClasspass({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                      </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspasses))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n  .min(3, t('yup.min_len_3'))\n  .required(t('yup.field_required')),\n  price: Yup.number()\n    .required(t('yup.field_required')),\n  financeTaxRate: Yup.string()\n    .required(t('yup.field_required')),\n  validity: Yup.number()\n    .positive(t('yup.positive_number_required'))\n    .required(t('yup.field_required')),\n  validityUnit: Yup.string()\n    .required(t('yup.field_required')),\n  classes: Yup.number(),\n  quickStatsAmount: Yup.number()\n})\n\n","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Grid,\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\n\nclass OrganizationClasspassForm extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization classpass form props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const returnUrl = \"/organization/classpasses\"\n    const initialData = this.props.initialData\n    const isSubmitting = this.props.isSubmitting\n    const setFieldValue = this.props.setFieldValue\n    const setFieldTouched = this.props.setFieldTouched\n    const errors = this.props.errors\n    const values = this.props.values\n\n    return (\n        <FoForm>\n            <Card.Body> \n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('organization.classpass.public')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>      \n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayShop\" \n                    checked={values.displayShop} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('organization.classpass.shop')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"displayShop\" component=\"div\" />   \n            </Form.Group> \n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group>\n                  <Form.Label className=\"custom-switch\">\n                      <Field \n                      className=\"custom-switch-input\"\n                      type=\"checkbox\" \n                      name=\"trialPass\" \n                      checked={values.trialPass} />\n                      <span className=\"custom-switch-indicator\" ></span>\n                      <span className=\"custom-switch-description\">{t('organization.classpass.trial_pass')}</span>\n                  </Form.Label>\n                  <ErrorMessage name=\"displayShop\" component=\"div\" />   \n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>            \n            <Form.Group label={t('general.name')} >\n                <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.description')}>\n                <Editor\n                  tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                  textareaName=\"description\"\n                  initialValue={values.description}\n                  init={tinymceBasicConf}\n                  onBlur={(e) => {\n                    setFieldTouched(\"description\", true)\n                    setFieldValue(\"description\", e.target.getContent())\n                  }}\n                />\n                <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.price')}>\n                    <Field type=\"text\" \n                        name=\"price\" \n                        className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                    <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.taxrate')}>\n                  <Field component=\"select\" \n                          name=\"financeTaxRate\" \n                          className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  {console.log(\"query data in classpass add:\")}\n                  {console.log(initialData)}\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeTaxRates.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.validity')}>\n                  <Field type=\"text\" \n                      name=\"validity\" \n                      className={(errors.validity) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                  <ErrorMessage name=\"validity\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.validity_unit')}>\n                  <Field component=\"select\" \n                          name=\"validityUnit\" \n                          className={(errors.validityUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"DAYS\" key={v4()}>{t('validity.days')}</option>\n                  <option value=\"WEEKS\" key={v4()}>{t('validity.weeks')}</option>\n                  <option value=\"MONTHS\" key={v4()}>{t('validity.months')}</option>\n                  </Field>\n                  <ErrorMessage name=\"validityUnit\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"unlimited\" \n                    checked={values.unlimied} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('general.unlimited')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"unlimited\" component=\"div\" />   \n            </Form.Group>  \n            { (values.unlimited) ? \"\" :\n            <Form.Group label={t('general.classes')}>\n                <Field type=\"text\" \n                        name=\"classes\" \n                        className={(errors.classes) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"classes\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> } \n            {/* <Form.Group label={t('general.membership')}>\n                <Field component=\"select\" \n                        name=\"organizationMembership\" \n                        className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.membership_not_required\")}</option>\n                {initialData.organizationMemberships.edges.map(({ node }) =>\n                    <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n                </Field>\n                <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>  */}\n            { (values.unlimited) ? \n                    <Form.Group label={t('general.quickStatsAmount')}>\n                    <Field type=\"text\" \n                            name=\"quickStatsAmount\" \n                            className={(errors.quickStatsAmount) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"quickStatsAmount\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    : \"\"\n            }\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.glaccount')}>\n                  <Field component=\"select\" \n                          name=\"financeGlaccount\" \n                          className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeGlaccounts.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.costcenter')}>\n                  <Field component=\"select\" \n                          name=\"financeCostcenter\" \n                          className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeCostcenters.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n                <Button \n                className=\"pull-right\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n                >\n                {t('general.submit')}\n                </Button>\n                <Button\n                type=\"button\" \n                color=\"link\" \n                onClick={() => history.push(returnUrl)}\n                >\n                    {t('general.cancel')}\n                </Button>\n            </Card.Footer>\n        </FoForm>\n    ) \n  }\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase';\nimport OrganizationClasspassForm from \"./OrganizationClasspassForm\"\n\n\nfunction OrganizationClasspassAdd({t, match, history}) {\n  const cardTitle = t('organization.classpasses.title_add')\n  const returnUrl = \"/organization/classpasses\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createClasspass] = useMutation(CREATE_CLASSPASS)\n\n  if (loading) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n                    \n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  return (\n    <OrganizationClasspassesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            displayShop: true,\n            trialPass: false,\n            name: \"\",\n            description: \"\",\n            price: 0,\n            financeTaxRate: \"\",\n            validity: 1,\n            validityUnit: \"MONTHS\",\n            classes: 1,\n            unlimited: false,\n            quickStatsAmount: 0,\n            financeGlaccount: \"\",\n            financeCostcenter: \"\"\n          }}\n          validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              createClasspass({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  trialPass: values.trialPass,\n                  name: values.name,\n                  description: values.description,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  validity: parseInt(values.validity),\n                  validityUnit: values.validityUnit,\n                  classes: parseInt(values.classes),\n                  unlimited: values.unlimited,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpasses.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationClasspassForm \n              initialData = {initialData}\n              isSubmitting = {isSubmitting}\n              setFieldValue = {setFieldValue}\n              setFieldTouched = {setFieldTouched}\n              errors = {errors}\n              values = {values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSPASS_QUERY, UPDATE_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase'\nimport OrganizationClasspassForm from \"./OrganizationClasspassForm\"\n\n\nfunction OrganizationClasspassEdit({ t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.classpasses.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASSPASS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateClasspass] = useMutation(UPDATE_CLASSPASS)\n\n  if (loading) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  let initialTaxRate = \"\"\n  if (initialData.organizationClasspass.financeTaxRate) {\n    initialTaxRate = initialData.organizationClasspass.financeTaxRate.id\n  }\n\n  let initialGlaccount = \"\"\n  if (initialData.organizationClasspass.financeGlaccount) {\n    initialGlaccount =  initialData.organizationClasspass.financeGlaccount.id\n  } \n\n  let initialCostcenter = \"\"\n  if (initialData.organizationClasspass.financeCostcenter) {\n    initialCostcenter =  initialData.organizationClasspass.financeCostcenter.id\n  } \n\n  return (\n    <OrganizationClasspassesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.organizationClasspass.displayPublic,\n            displayShop: initialData.organizationClasspass.displayShop,\n            trialPass: initialData.organizationClasspass.trialPass,\n            name: initialData.organizationClasspass.name,\n            description: initialData.organizationClasspass.description,\n            price: initialData.organizationClasspass.price,\n            financeTaxRate: initialTaxRate,\n            validity: initialData.organizationClasspass.validity,\n            validityUnit: initialData.organizationClasspass.validityUnit,\n            classes: initialData.organizationClasspass.classes,\n            unlimited: initialData.organizationClasspass.unlimited,\n            quickStatsAmount: initialData.organizationClasspass.quickStatsAmount,\n            financeGlaccount:  initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateClasspass({ variables: {\n                input: {\n                  id: match.params.id,\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  trialPass: values.trialPass,\n                  name: values.name,\n                  description: values.description,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  validity: parseInt(values.validity),\n                  validityUnit: values.validityUnit,\n                  classes: parseInt(values.classes),\n                  unlimited: values.unlimited,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('organization.classpasses.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationClasspassForm \n              initialData = {initialData}\n              isSubmitting = {isSubmitting}\n              setFieldValue = {setFieldValue}\n              setFieldTouched = {setFieldTouched}\n              errors = {errors}\n              values = {values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationClasspassesGroupsBase({ t, history, children, showAdd=false, returnUrl=\"/organization/classpasses\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasspassgroup\">\n                  <ButtonAdd addUrl=\"/organization/classpasses/groups/add\" className='ml-2' />\n                </HasPermissionWrapper> \n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspassesGroupsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSPASS_GROUPS_QUERY = gql`\n  query OrganizationClasspassGroups($after: String, $before: String) {\n    organizationClasspassGroups(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_CLASSPASS_GROUP_QUERY = gql`\n  query OrganizationClasspassGroup($id: ID!) {\n    organizationClasspassGroup(id:$id) {\n      id\n      name\n      description\n    }\n  }\n`\n\n\nexport const GET_CLASSPASS_GROUP_PASSES_QUERY = gql`\n  query GetPassesAndGroupMembership($after: String, $before: String, $id:ID!) {\n    organizationClasspasses(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationClasspassGroup(id: $id) {\n      id\n      name\n      description\n      organizationClasspasses {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_CLASSPASS_GROUP = gql`\nmutation CreateOrganizationClasspassGroup($input:CreateOrganizationClasspassGroupInput!) {\n  createOrganizationClasspassGroup(input: $input) {\n    organizationClasspassGroup{\n      id\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSPASS_GROUP = gql`\nmutation UpdateOrganizationClasspassGroup($input: UpdateOrganizationClasspassGroupInput!) {\n  updateOrganizationClasspassGroup(input: $input) {\n    organizationClasspassGroup {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const DELETE_CLASSPASS_GROUP = gql`\n  mutation DeleteClasspassGroup($input: DeleteOrganizationClasspassGroupInput!) {\n    deleteOrganizationClasspassGroup(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const ADD_CARD_TO_GROUP = gql`\n  mutation AddCardToGroup($input: CreateOrganizationClasspassGroupClasspassInput!) {\n    createOrganizationClasspassGroupClasspass(input:$input) {\n      organizationClasspassGroupClasspass {\n        id\n        organizationClasspass {\n          id\n          name\n        }\n        organizationClasspassGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_CARD_FROM_GROUP = gql`\n  mutation DeleteCardFromGroup($input: DeleteOrganizationClasspassGroupClasspassInput!) {\n    deleteOrganizationClasspassGroupClasspass(input:$input) {\n      ok\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from \"./OrganizationClasspassesGroupsBase\"\n\nimport { GET_CLASSPASS_GROUPS_QUERY, DELETE_CLASSPASS_GROUP } from \"./queries\"\n\n\nfunction OrganizationClasspassesGroups({ t, history}) {\n  const { loading, error, data, fetchMore } = useQuery(GET_CLASSPASS_GROUPS_QUERY)\n  const [deleteClasspassGroup] = useMutation(DELETE_CLASSPASS_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <p>{t('organization.classpass_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  \n  const classpass_groups = data.organizationClasspassGroups\n\n  // Empty list\n  if (!classpass_groups.edges.length) { return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <p>{t('organization.classpass_groups.empty_list')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )} \n\n  \n  // We have data\n  return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}\n                    pageInfo={classpass_groups.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: classpass_groups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationClasspassGroups.edges\n                        const pageInfo = fetchMoreResult.organizationClasspassGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new classpass_groups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationClasspassGroups: {\n                                __typename: previousResult.organizationClasspassGroups.__typename,\n                                edges: [ ...previousResult.organizationClasspassGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {classpass_groups.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.description.substring(0, 24)}\n                    </Table.Col>\n                    <Table.Col className=\"text-right\" key={v4()}>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classpasses/groups/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classpasses/groups/edit/passes/\" + node.id)}\n                                color=\"secondary\">\n                          {t('organization.classpasses.groups.edit_passes')}\n                        </Button>\n                      <button className=\"icon btn btn-link btn-sm float-right\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t(\"organization.classpasses.groups.delete_confirm_msg\"),\n                            msgDescription: <p>{node.name}</p>,\n                            msgSuccess: t('organization.classpasses.groups.deleted'),\n                            deleteFunction: deleteClasspassGroup,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_CLASSPASS_GROUPS_QUERY} \n                            ]}\n                          })\n                      }}>\n                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                      </button>\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n   )\n\n}\n\n\n\n// const OrganizationClasspassesGroups = ({ t, history }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")}>\n//           <div className=\"page-options d-flex\">\n//             <Link to=\"/organization/classpasses\" \n//                   className='btn btn-outline-secondary btn-sm'>\n//                 <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('organization.classpasses.title')}\n//             </Link>\n//           </div>\n//         </Page.Header>\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_CLASSPASS_GROUPS_QUERY} >\n//              {({ loading, error, data: {organizationClasspassGroups: classpass_groups}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <p>{t('organization.classpass_groups.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n                \n//                 // Empty list\n//                 if (!classpass_groups.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <p>{t('organization.classpass_groups.empty_list')}</p>\n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}\n//                                pageInfo={classpass_groups.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: classpass_groups.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationClasspassGroups.edges\n//                                     const pageInfo = fetchMoreResult.organizationClasspassGroups.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new classpass_groups at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationClasspassGroups: {\n//                                             __typename: previousResult.organizationClasspassGroups.__typename,\n//                                             edges: [ ...previousResult.organizationClasspassGroups.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                         <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {classpass_groups.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/groups/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/groups/edit/passes/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('organization.classpasses.groups.edit_passes')}\n//                                       </Button>\n//                                   </Table.Col>\n//                                   {/* <Mutation mutation={ARCHIVE_CLASSPASS_GROUP} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_CLASSPASS_GROUPS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation> */}\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationclasspassgroup\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/classpasses/groups/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.classpass_groups.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// )\n\nexport default withTranslation()(withRouter(OrganizationClasspassesGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { GET_CLASSPASS_GROUPS_QUERY, ADD_CLASSPASS_GROUP } from './queries'\nimport { CLASSPASS_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupAdd({t, history}) {\n  const returnUrl = \"/organization/classpasses/groups\"\n  const [ addClasspassGroup ] = useMutation(ADD_CLASSPASS_GROUP)\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={t('organization.classpass_groups.title_add')}>\n        <Formik\n          initialValues={{ name: '', description: '' }}\n          validationSchema={CLASSPASS_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addClasspassGroup({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description, \n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASS_GROUPS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpass_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FoForm>\n                  <Card.Body>\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    <Form.Group label={t('general.description')}>\n                      <Field type=\"text\" \n                              name=\"description\" \n                              className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        color=\"primary\"\n                        className=\"pull-right\" \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button color=\"link\">\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                      {(isSubmitting) ? \n                        <Alert type=\"primary\" hasExtraSpace>\n                          <strong>{t('general.please_wait')}</strong> {t('organization.classpass_groups.toast_creating_might_take_a_while')}\n                        </Alert> : \n                        \"\"\n                      }\n                  </Card.Footer>\n              </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Card,\n  Dimmer,\n  Button,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\nimport { GET_CLASSPASS_GROUPS_QUERY, GET_CLASSPASS_GROUP_QUERY, UPDATE_CLASSPASS_GROUP } from './queries'\nimport { CLASSPASS_GROUP_SCHEMA } from './yupSchema'\n\n\nfunction OrganizationClasspassGroupEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.classpass_groups.title_edit')\n  const returnUrl = \"/organization/classpasses/groups\"\n  const { loading, error, data } = useQuery(GET_CLASSPASS_GROUP_QUERY, {\n    variables: {id: id}\n  })\n  const [ updateClasspassGroup ] = useMutation(UPDATE_CLASSPASS_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n    \n\n  const initialData = data.organizationClasspassGroup;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            description: initialData.description,\n          }}\n          validationSchema={CLASSPASS_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateClasspassGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  description: values.description,\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASS_GROUPS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpass_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n              <FoForm>\n                  <Card.Body>    \n                      <Form.Group label={t('general.name')} >\n                        <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('general.description')}>\n                        <Field type=\"text\" \n                                name=\"description\" \n                                className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        className=\"pull-right\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        type=\"submit\"\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button\n                          type=\"button\" \n                          color=\"link\" \n                        >\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                  </Card.Footer>\n              </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Icon,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_CLASSPASS_GROUP_PASSES_QUERY, ADD_CARD_TO_GROUP, DELETE_CARD_FROM_GROUP } from './queries'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupEditPasses({ t, match, history }) {\n  const groupId = match.params.id\n  const returnUrl = \"/organization/classpasses/groups\"\n  let cardTitle = t('organization.classpass_group_classpasses.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASSPASS_GROUP_PASSES_QUERY, { \n    variables: { id: groupId }\n  })\n  const [ addCardToGroup ] = useMutation(ADD_CARD_TO_GROUP)\n  const [ deleteCardFromGroup ] = useMutation(DELETE_CARD_FROM_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const passes = data.organizationClasspasses\n  const group = data.organizationClasspassGroup\n\n  cardTitle = `${cardTitle} - ${group.name}`\n  let group_passes = {}\n  if (group.organizationClasspasses.edges) {\n    group.organizationClasspasses.edges.map(({ node}) => (\n      group_passes[node.id] = true\n    ))\n  }\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {passes.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {(node.id in group_passes) ? \n                        <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                      }\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    {console.log((node.id in group_passes))}\n                    {(!(node.id in group_passes)) ?\n                      // Add\n                      <Table.Col className=\"text-right text-green\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.add_to_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked add\")\n                            let pass_id = node.id\n                            addCardToGroup({ variables: {\n                              input: {\n                                organizationClasspass: pass_id,\n                                organizationClasspassGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_CLASSPASS_GROUP_PASSES_QUERY, variables: {\"id\": groupId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.added_to_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                          {t('general.add_to_group')} \n                        </Button>\n                      </Table.Col>\n                      :\n                      // Delete\n                      <Table.Col className=\"text-right text-red\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.delete_from_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked delete\")\n                            console.log(node.id)\n                            let pass_id = node.id\n                            deleteCardFromGroup({ variables: {\n                              input: {\n                                organizationClasspass: pass_id,\n                                organizationClasspassGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_CLASSPASS_GROUP_PASSES_QUERY, variables: {\"id\": groupId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.deleted_from_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                          {t('general.delete_from_group')}\n                        </Button>\n                      </Table.Col>\n                      }\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupEditPasses))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let archived = localStorage.getItem(CSLS.ORGANIZATION_CLASSTYPES_ARCHIVED)\n  if (archived === null) {\n    archived = false\n  }\n\n  let queryVars = {\n    archived: (archived === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSTYPES_QUERY = gql`\nquery OrganizationClasstypes($after: String, $before: String, $archived: Boolean) {\n  organizationClasstypes(first: 15, before: $before, after: $after, archived: $archived) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        archived\n        displayPublic\n        name\n        description\n        urlWebsite\n        urlImage\n        urlImageThumbnailSmall\n      }\n    }\n  }\n}\n`\n\nexport const GET_CLASSTYPE_QUERY = gql`\nquery getOrganizationClasstype($id: ID!) {\n  organizationClasstype(id:$id) {\n    id\n    archived\n    name\n    description\n    displayPublic\n    urlWebsite\n    urlImage\n  }\n}\n`\n\nexport const ADD_CLASSTYPE = gql`\nmutation CreateOrganizationClasstype($input: CreateOrganizationClasstypeInput!) {\n  createOrganizationClasstype(input: $input) {\n    organizationClasstype {\n      id\n      archived\n      name\n      description\n      displayPublic\n      urlWebsite\n      image\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSTYPE = gql`\n  mutation UpdateOrganizationClasstype($input: UpdateOrganizationClasstypeInput!) {\n    updateOrganizationClasstype(input: $input) {\n      organizationClasstype {\n        id\n        archived\n        name\n        description\n        displayPublic\n        urlWebsite\n      }\n    }\n  }\n`\n\nexport const UPDATE_CLASSTYPE_IMAGE = gql`\nmutation UploadOrganizationClasstypeImage($input: UploadOrganizationClasstypeImageInput!) {\n  uploadOrganizationClasstypeImage(input: $input) {\n    organizationClasstype {\n      id\n      archived\n      name\n      description\n      displayPublic\n      urlWebsite\n      image\n    }\n  }\n}\n`\n\nexport const ARCHIVE_CLASSTYPE = gql`\nmutation ArchiveOrganizationClasstype($input: ArchiveOrganizationClasstypeInput!) {\n    archiveOrganizationClasstype(input: $input) {\n      organizationClasstype {\n        id\n        archived\n      }\n    }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationClasstypesBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title=\"Organization\">\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl={\"/organization/classtypes\"} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasstype\">\n                  <ButtonAdd addUrl=\"/organization/classtypes/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>          \n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypesBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Avatar,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport { get_list_query_variables } from './tools'\nimport { GET_CLASSTYPES_QUERY, ARCHIVE_CLASSTYPE } from \"./queries\"\nimport OrganizationClasstypesBase from \"./OrganizationClasstypesBase\"\n\n\nfunction OrganizationClasstypes({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_CLASSTYPES_QUERY, { \n    variables: get_list_query_variables()\n  })\n  const [archiveClasstype] = useMutation(ARCHIVE_CLASSTYPE)\n\n  if (loading) return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}>\n        <p>{t('organization.classtypes.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  \n  const classtypes = data.organizationClasstypes\n  // Empty list\n  if (!classtypes.edges.length) { return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}\n                  headerContent={headerOptions}>\n        <p>\n        {(!archived) ? t('organization.classtypes.empty_list') : t(\"organization.classtypes.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )}   \n\n  return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}\n                   headerContent={headerOptions}\n                   hasCardBody={false}\n                   pageInfo={classtypes.pageInfo}\n                   onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: classtypes.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationClasstypes.edges\n                        const pageInfo = fetchMoreResult.organizationClasstypes.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationClasstypes: {\n                                __typename: previousResult.organizationClasstypes.__typename,\n                                edges: [ ...previousResult.organizationClasstypes.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classtypes.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                        <React.Fragment>\n                          <Button className='btn-sm' \n                                  onClick={() => history.push(\"/organization/classtypes/edit_image/\" + node.id)}\n                                  color=\"secondary\">\n                            <Icon name=\"image\" />\n                          </Button>\n                          <Button className='btn-sm' \n                                  onClick={() => history.push(\"/organization/classtypes/edit/\" + node.id)}\n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </React.Fragment>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          archiveClasstype({ variables: {\n                            input: {\n                              id: node.id,\n                              archived: !node.archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_CLASSTYPES_QUERY, variables: get_list_query_variables()}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (node.archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypes))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSTYPE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    urlWebsite: Yup.string()\n      .url(t(\"yup.url\")),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_CLASSTYPES_QUERY, ADD_CLASSTYPE } from './queries'\nimport { CLASSTYPE_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from './tools'\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\n\n\nfunction OrganizationClasstypeAdd({t, history}) {\n  const returnUrl = \"/organization/classtypes\"\n  const [addClasstype] = useMutation(ADD_CLASSTYPE)\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.classtypes.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: \"\", description: \"\", displayPublic: true, urlWebsite: '' }}\n          validationSchema={CLASSTYPE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addClasstype({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description,\n                  displayPublic: values.displayPublic,\n                  urlWebsite: values.urlWebsite,\n                  image: values.image\n                },\n                // file: values.image\n              }, refetchQueries: [\n                  {query: GET_CLASSTYPES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classtypes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                <FoForm>\n                  {/* {console.log('values in FoForm')}\n                  {console.log(values)} */}\n                    <Card.Body>\n                        <Form.Group>\n                          <Form.Label className=\"custom-switch\">\n                            <Field \n                              className=\"custom-switch-input\"\n                              type=\"checkbox\" \n                              name=\"displayPublic\" \n                              checked={values.displayPublic} />\n                            <span className=\"custom-switch-indicator\" ></span>\n                            <span className=\"custom-switch-description\">{t('organization.classtype.public')}</span>\n                          </Form.Label>\n                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                        </Form.Group>    \n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('general.description')}>\n                          <Editor\n                              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                              textareaName=\"description\"\n                              initialValue={values.description}\n                              init={tinymceBasicConf}\n                              onBlur={(e) => {\n                                setFieldValue(\"description\", e.target.getContent())\n                                setFieldTouched(\"description\", true)\n                              }}\n                            />\n                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('organization.classtype.url_website')}>\n                          <Field type=\"text\" \n                                name=\"urlWebsite\" \n                                className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                            {t('general.cancel')}\n                        </Button>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_CLASSTYPES_QUERY, GET_CLASSTYPE_QUERY, UPDATE_CLASSTYPE } from './queries'\nimport { CLASSTYPE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\n\n\nfunction OrganizationClasstypeEdit({ t, history, match }) {\n  const id = match.params.id\n  const cardTitle = t('organization.classtypes.title_edit')\n  const returnUrl = \"/organization/classtypes\"\n  const { loading, error, data } = useQuery(GET_CLASSTYPE_QUERY, { variables: {\n    id: id\n  }})\n  const [ updateClasstype ] = useMutation(UPDATE_CLASSTYPE)\n\n  if (loading) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n\n                      \n  const initialData = data.organizationClasstype\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description,\n              displayPublic: initialData.displayPublic,\n              urlWebsite: initialData.urlWebsite\n            }}\n            validationSchema={CLASSTYPE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateClasstype({ variables: {\n                  input: {\n                    id: id,\n                    name: values.name,\n                    description: (values.description) ? values.description: '',\n                    displayPublic: values.displayPublic,\n                    urlWebsite: (values.urlWebsite) ? values.urlWebsite: ''\n                  }\n                }, refetchQueries: [\n                    {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('organization.classtypes.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n                <FoForm>\n                    {console.log(values)}\n                    <Card.Body>\n                        <Form.Group>\n                          <Form.Label className=\"custom-switch\">\n                            <Field \n                              className=\"custom-switch-input\"\n                              type=\"checkbox\" \n                              name=\"displayPublic\" \n                              checked={values.displayPublic} />\n                            <span className=\"custom-switch-indicator\" ></span>\n                            <span className=\"custom-switch-description\">{t('organization.classtype.public')}</span>\n                          </Form.Label>\n                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                        </Form.Group>     \n                        <Form.Group label={t('general.name')} >\n                          <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('general.description')}>\n                          <Editor\n                            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                            textareaName=\"description\"\n                            initialValue={values.description}\n                            init={tinymceBasicConf}\n                            onBlur={(e) => {\n                              setFieldValue(\"description\", e.target.getContent())\n                              setFieldTouched(\"description\", true)\n                            }}\n                          />\n                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('organization.classtype.url_website')}>\n                          <Field type=\"text\" \n                                name=\"urlWebsite\" \n                                className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeEdit))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport { \n  Formik,\n  Form as FoForm, \n} from 'formik'\n\n\nimport { GET_CLASSTYPES_QUERY, GET_CLASSTYPE_QUERY, UPDATE_CLASSTYPE_IMAGE } from './queries'\n\nimport {\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nfunction OrganizationClasstypeEditImage({t, history, match}) {\n  const classtypeId = match.params.id\n  const returnUrl = \"/organization/classtypes\"\n  let cardTitle = t('organization.classtypes.edit_image')\n  const { loading, error, data } = useQuery(GET_CLASSTYPE_QUERY, {\n    variables: { id: classtypeId }\n  })\n  const [ uploadImage ] = useMutation(UPDATE_CLASSTYPE_IMAGE)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n\n  if (loading) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n\n  cardTitle = `${cardTitle} - ${data.organizationClasstype.name}`\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card title={cardTitle}>\n       <Formik\n          initialValues={{}}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              id: classtypeId,\n              imageFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.image = b64_enc_file\n  \n              uploadImage({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classtypes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Link to={returnUrl}>\n                <Button color=\"link\">\n                  {t('general.cancel')}\n                </Button>\n              </Link>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeEditImage))","import { gql } from \"@apollo/client\"\n\nexport const GET_DISCOVERIES_QUERY = gql`\n  query OrganizationDiscoveries($after: String, $before: String, $archived: Boolean) {\n    organizationDiscoveries(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_DISCOVERY_QUERY = gql`\n  query SchoolDiscovery($id: ID!) {\n    organizationDiscovery(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_DISCOVERY = gql`\n  mutation CreateOrganizationDiscovery($input:CreateOrganizationDiscoveryInput!) {\n    createOrganizationDiscovery(input: $input) {\n      organizationDiscovery{\n        id\n        archived\n        name\n      }\n    }\n  }\n`\n\nexport const UPDATE_DISCOVERY = gql`\nmutation UpdateOrganizationDiscovery($input: UpdateOrganizationDiscoveryInput!) {\n  updateOrganizationDiscovery(input: $input) {\n    organizationDiscovery {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_DISCOVERY = gql`\nmutation ArchiveOrganizationDiscovery($input: ArchiveOrganizationDiscoveryInput!) {\n  archiveOrganizationDiscovery(input: $input) {\n    organizationDiscovery {\n      id\n      archived\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationDiscoveriesBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/discoveries\" />  \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationdiscovery\">\n                  <ButtonAdd addUrl=\"/organization/discoveries/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveriesBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_DISCOVERIES_QUERY, ARCHIVE_DISCOVERY } from \"./queries\"\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase'\n\n\nfunction OrganizationDiscoveries({ t, history }) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.discoveries.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_DISCOVERIES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  if (error) return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.discoveries.error_loading')}</p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  const discoveries = data.organizationDiscoveries\n\n  // Empty list\n  if (!discoveries.edges.length) { return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p> \n          {(!archived) ? t('organization.discoveries.empty_list') : t(\"organization.discoveries.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )}\n\n  return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={discoveries.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: discoveries.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationDiscoveries.edges\n                        const pageInfo = fetchMoreResult.organizationDiscoveries.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new discoveries at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationDiscoveries: {\n                                __typename: previousResult.organizationDiscoveries.__typename,\n                                edges: [ ...previousResult.organizationDiscoveries.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {discoveries.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/discoveries/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveDiscovery({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveries))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DISCOVERY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\n\nimport { GET_DISCOVERIES_QUERY, ADD_DISCOVERY } from './queries'\nimport { DISCOVERY_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase';\n\n\nfunction OrganizationDiscoveryAdd({t, history}) {\n  const returnUrl = \"/organization/discoveries\"\n  const [ addDiscovery ] = useMutation(ADD_DISCOVERY)\n\n  return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <Card title={t('organization.discoveries.title_add')}>\n        <Formik\n            initialValues={{ name: '', code: '' }}\n            validationSchema={DISCOVERY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addDiscovery({ variables: {\n                  input: {\n                    name: values.name, \n                  }\n                }, refetchQueries: [\n                    {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('organization.discoveries.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n                <FoForm>\n                    <Card.Body>\n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button color=\"link\">\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationDiscoveriesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveryAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { GET_DISCOVERIES_QUERY, GET_DISCOVERY_QUERY, UPDATE_DISCOVERY } from './queries'\nimport { DISCOVERY_SCHEMA } from './yupSchema'\n\nimport {\n  Dimmer,\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase';\n\n\nfunction OrganizationDiscoveryEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/discoveries\"\n  const cardTitle = t('organization.discoveries.title_edit')\n  const { loading, error, data } = useQuery(GET_DISCOVERY_QUERY, {\n    variables: {id: id}\n  })\n  const [ updateDiscovery ] = useMutation(UPDATE_DISCOVERY)\n\n  if (loading) return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  if (error) return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  const initialData = data.organizationDiscovery;\n\n  return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={DISCOVERY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateDiscovery({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.discoveries.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>    \n                        <Form.Group label={t('general.name')} >\n                          <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationDiscoveriesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveryEdit))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\n\nfunction OrganizationDocuments({ t, match }) {\n  const organizationId = match.params.organization_id\n  const docTypes = [\n    [ \"TERMS_AND_CONDITIONS\", t(\"general.terms_and_conditions\")],\n    [ \"PRIVACY_POLICY\", t(\"general.privacy_policy\")],\n  ]\n\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            {/* <div className=\"page-options d-flex\">\n              <Link to={`/organization/edit/${organizationId}`}>\n                <Button \n                  icon=\"arrow-left\"\n                  className=\"mr-2\"\n                  outline\n                  color=\"secondary\"\n                >\n                  {t('general.back_to')} {t('organization.title')}\n                </Button>\n              </Link>\n            </div> */}\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.documents.title')}</Card.Title>\n                </Card.Header>\n                <Table cards>\n                  <Table.Header>\n                    <Table.Row key={v4()}>\n                      <Table.ColHeader>{t('general.document')}</Table.ColHeader>\n                      <Table.ColHeader></Table.ColHeader>\n                    </Table.Row>\n                  </Table.Header>\n                  <Table.Body>\n                      {docTypes.map((docType) => (\n                        <Table.Row key={v4()}>\n                          <Table.Col key={v4()}>\n                            {docType[1]}\n                          </Table.Col>\n                          <Table.Col className=\"text-right\" key={v4()}>\n                            <Link to={`/organization/documents/${organizationId}/${docType[0]}`}>\n                              <Button className='btn-sm' \n                                      color=\"secondary\">\n                                {t('general.manage')} <Icon name=\"chevron-right\" />\n                              </Button>\n                            </Link>\n                          </Table.Col>\n                        </Table.Row>\n                      ))}\n                  </Table.Body>\n                </Table>\n              </Card>        \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocuments))","import { useContext } from 'react'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../context/AppSettingsContext'\n\n\nfunction FormatISODateStr({ ISODateStr }) {\n    const appSettings = useContext(AppSettingsContext)\n    const dateFormat = appSettings.dateFormat\n\n    return (\n        moment(ISODateStr).format(dateFormat)    \n    )\n}\n\nexport default FormatISODateStr\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button\n} from \"tabler-react\";\n\nconst FileDownloadTableButton = ({ t, mediaUrl, className=\"\", target=\"_blank\" }) => {\n  return <Button \n           color={\"secondary \" + className}\n           size=\"sm\"\n           icon=\"download-cloud\"\n           target={target}\n           RootComponent=\"a\" \n           href={mediaUrl}\n          >\n           {t('general.download')}\n          </Button>\n}\n\nexport default withTranslation()(FileDownloadTableButton)\n\n\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\n\nfunction OrganizationDocumentsBase({ t, children, pageHeaderButtonList }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            <div className=\"page-options d-flex\">\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}        \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocumentsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_DOCUMENTS_QUERY = gql`\n  query OrganizationDocuments($documentType: String!) {\n    organizationDocuments(documentType:$documentType) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          documentType\n          version\n          dateStart\n          dateEnd\n          document\n          urlDocument\n        }\n      }\n    }\n  }\n`\n\nexport const GET_DOCUMENT_QUERY = gql`\n  query OrganizationDocument($id: ID!) {\n    organizationDocument(id:$id) {\n      id\n      version\n      dateStart\n      dateEnd\n      document\n    }\n  }\n`\n\nexport const ADD_DOCUMENT = gql`\n  mutation CreateOrganizationDocument($input:CreateOrganizationDocumentInput!) {\n    createOrganizationDocument(input: $input) {\n      organizationDocument{\n        id\n        version\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nexport const UPDATE_DOCUMENT = gql`\n  mutation UpdateOrganizationDocument($input:UpdateOrganizationDocumentInput!) {\n    updateOrganizationDocument(input: $input) {\n      organizationDocument{\n        id\n        version\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nexport const DELETE_DOCUMENT = gql`\n  mutation DeleteOrganizationDocument($input:DeleteOrganizationDocumentInput!) {\n    deleteOrganizationDocument(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_DOCUMENT, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport confirmDelete from \"../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction OrganizationDocumentDelete({t, match, node}) {\n  const [ deleteOrganizationDocument ] = useMutation(DELETE_DOCUMENT)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirmDelete({\n          t: t,\n          msgConfirm: t(\"organization.documents.delete_confirm_msg\"),\n          msgDescription: <p> {t(\"general.version\")}: {node.version}</p>,\n          msgSuccess: t('organization.documents.deleted'),\n          deleteFunction: deleteOrganizationDocument,\n          functionVariables: { \n            variables: {\n              input: { id: node.id }\n            }, \n            refetchQueries: [\n              {query: GET_DOCUMENTS_QUERY, variables: { documentType: node.documentType} },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDocumentDelete))\n","\nexport function getSubtitle(t, documentType) {\n  switch (documentType) {\n    case \"TERMS_AND_CONDITIONS\":\n      return t('general.terms_and_conditions')\n    case \"PRIVACY_POLICY\":\n      return t('general.privacy_policy')\n    default:\n      return \"Invalid document type\"\n  }\n}\n  ","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\nimport ISODateString from \"../../ui/ISODateString\"\nimport FileDownloadTableButton from \"../../ui/FileDownloadTableButton\"\nimport ContentCard from \"../../general/ContentCard\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport OrganizationDocumentsDelete from \"./OrganizationDocumentDelete\"\nimport { getSubtitle } from './tools'\n\nimport { GET_DOCUMENTS_QUERY } from \"./queries\"\n\n\nfunction OrganizationListDocuments({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const subTitle = getSubtitle(t, documentType)\n  const cardTitle = t('organization.documents.title') + ' - ' + subTitle\n\n  const pageHeaderButtonList = <React.Fragment>\n      <ButtonBack returnUrl={`/organization/documents/${organizationId}`} />\n      <HasPermissionWrapper \n        permission=\"add\"\n        resource=\"organizationdocument\"\n      >\n        <ButtonAdd addUrl={`/organization/documents/${organizationId}/${documentType}/add`} className=\"ml-2\" />\n      </HasPermissionWrapper>\n    </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_DOCUMENTS_QUERY, {\n    variables: { documentType: documentType }\n  })\n\n  if (loading) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t('general.loading_with_dots')}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <OrganizationDocumentsBase  pageHeaderButtonList={pageHeaderButtonList}>\n        {t('organization.documents.error_loading')}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  // Empty list\n  if (!data.organizationDocuments.edges.length) { return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>\n         {t('organization.documents.empty_list')}\n        </p>\n      </ContentCard>\n    </OrganizationDocumentsBase>\n  )}   \n  \n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.organizationDocuments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: data.organizationDocuments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.organizationDocuments.edges\n              const pageInfo = fetchMoreResult.organizationDocuments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the fetched documents at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    organizationDocuments: {\n                      __typename: previousResult.organizationDocuments.__typename,\n                      edges: [ ...previousResult.organizationDocuments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }}\n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.version')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {data.organizationDocuments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <ISODateString ISODateStr={node.dateStart} />\n                    {(node.dateEnd) ? <span> - <ISODateString ISODateStr={node.dateEnd} /></span> : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.version}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <FileDownloadTableButton mediaUrl={node.urlDocument} />\n                    <Link to={`/organization/documents/${organizationId}/${documentType}/edit/${node.id}`} >\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <OrganizationDocumentsDelete node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationDocumentsBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(OrganizationListDocuments))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { ADD_DOCUMENT, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport { getSubtitle } from './tools'\n\n\nconst customFileInputLabelStyle = {\n  whiteSpace: \"nowrap\",\n  display: \"block\",\n  overflow: \"hidden\"\n}  \n\n\nfunction OrganizationDocumentAdd({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const subTitle = getSubtitle(t, documentType)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  // Vars for document file input field end\n  \n  const returnUrl = `/organization/documents/${organizationId}/${documentType}`\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const [addDocument] = useMutation(ADD_DOCUMENT, {\n    onCompleted: () => history.push(returnUrl)\n  })\n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={t('organization.documents.add') + ' - ' + subTitle}>\n        <Formik\n          initialValues={{ \n            version: '',\n            dateStart: '', \n            dateEnd: '',\n            document: ''\n          }}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n\n            let inputVars = {\n              documentType: documentType,\n              version: values.version,\n              dateStart: dateToLocalISO(values.dateStart),\n              documentFileName: fileName,\n            }\n\n            if (values.dateEnd) {\n              inputVars.dateEnd = dateToLocalISO(values.dateEnd)\n            }\n\n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n\n              addDocument({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_DOCUMENTS_QUERY, variables: {documentType: documentType}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('organization.documents.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            reader.readAsDataURL(file)\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.version')}>\n                    <Field type=\"text\" \n                          name=\"version\" \n                          className={(errors.version) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\" />\n                    <ErrorMessage name=\"version\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_start')}>\n                    <CSDatePicker \n                      selected={values.dateStart}\n                      onChange={(date) => setFieldValue(\"dateStart\", date)}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                    />\n                    <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                {t('general.cancel')}\n              </Button>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationDocumentsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocumentAdd))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next';\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_DOCUMENT, GET_DOCUMENT_QUERY, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport {\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport { getSubtitle } from './tools'\n\n\nfunction OrganizationDocumentEdit({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const id = match.params.id\n  const subTitle = getSubtitle(t, documentType)\n  \n  const returnUrl = `/organization/documents/${organizationId}/${documentType}`\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const [ updateDocument ] = useMutation(UPDATE_DOCUMENT, {\n    onCompleted: () => history.push(returnUrl)\n  })\n  const { loading, error, data } = useQuery(GET_DOCUMENT_QUERY, {\n    variables: { \"id\": id }\n  })\n\n  if (loading) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t(\"general.loading_with_dots\")}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t(\"organization.documents.error_loading\")}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateEnd = null\n  if (data.organizationDocument.dateEnd) {\n    dateEnd = new Date(data.organizationDocument.dateEnd)\n  }\n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card>\n        <Card.Header>\n          <Card.Title>\n            {t('organization.documents.edit') + ' - ' + subTitle}\n          </Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            version: data.organizationDocument.version,\n            dateStart: new Date(data.organizationDocument.dateStart), \n            dateEnd: dateEnd,\n          }}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n\n            let inputVars = {\n              id: id,\n              version: values.version,\n              dateStart: dateToLocalISO(values.dateStart),\n            }\n\n            if (values.dateEnd) {\n              inputVars.dateEnd = dateToLocalISO(values.dateEnd)\n            }\n\n            updateDocument({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_DOCUMENTS_QUERY, variables: {documentType: documentType}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('organization.documents.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.version')}>\n                    <Field type=\"text\" \n                          name=\"version\" \n                          className={(errors.version) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\" />\n                    <ErrorMessage name=\"version\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                {/* <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col> */}\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_start')}>\n                    <CSDatePicker \n                      selected={values.dateStart}\n                      onChange={(date) => setFieldValue(\"dateStart\", date)}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                    />\n                    <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                {t('general.cancel')}\n              </Button>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationDocumentsBase>\n  )\n}\n\nexport default withTranslation()(OrganizationDocumentEdit)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationHolidaysBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/holidays\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationholiday\">\n                  <ButtonAdd addUrl=\"/organization/holidays/add\" />\n                </HasPermissionWrapper>\n              }   \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationHolidaysBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_HOLIDAYS_QUERY = gql`\n  query OrganizationHolidays($after: String, $before: String) {\n    organizationHolidays(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          dateStart\n          dateEnd\n          classes\n          organizationLocations {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_HOLIDAY_QUERY = gql`\n  query OrganizationHoliday($id: ID!) {\n    organizationHoliday(id:$id) {\n      id\n      name\n      description\n      dateStart\n      dateEnd\n      classes\n    }\n  }\n`\n\nexport const ADD_HOLIDAY = gql`\n  mutation CreateOrganizationHoliday($input:CreateOrganizationHolidayInput!) {\n    createOrganizationHoliday(input: $input) {\n      organizationHoliday {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_HOLIDAY = gql`\n  mutation UpdateOrganizationHoliday($input: UpdateOrganizationHolidayInput!) {\n    updateOrganizationHoliday(input: $input) {\n      organizationHoliday {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const DELETE_HOLIDAY = gql`\n  mutation DeleteOrganizationHoliday($input: DeleteOrganizationHolidayInput!) {\n    deleteOrganizationHoliday(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const GET_HOLIDAY_LOCATIONS_QUERY = gql`\n  query GetOrganizationHolidayLocations($after: String, $before: String, $id:ID!) {\n    organizationLocations(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationHoliday(id: $id) {\n      id\n      name\n      description\n      organizationLocations {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_LOCATION_TO_HOLIDAY = gql`\n  mutation AddLocationToHoliday($input: CreateOrganizationHolidayLocationInput!) {\n    createOrganizationHolidayLocation(input:$input) {\n      organizationHolidayLocation {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_LOCATION_FROM_HOLIDAY = gql`\n  mutation DeleteLocationFromHoliday($input: DeleteOrganizationHolidayLocationInput!) {\n    deleteOrganizationHolidayLocation(input:$input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from \"moment\"\nimport DOMPurify from 'dompurify'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n\nimport {\n  Badge,\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase'\n\nimport { GET_HOLIDAYS_QUERY, DELETE_HOLIDAY } from \"./queries\"\n\n\nfunction OrganizationHolidays({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const cardTitle = t('organization.holidays.title')\n  \n  const { loading, error, data, fetchMore } = useQuery(GET_HOLIDAYS_QUERY)\n  const [ deleteHoliday ] = useMutation(DELETE_HOLIDAY)\n\n  if (loading) return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  if (error) return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.holidays.error_loading')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  let holidays = data.organizationHolidays\n\n  // Empty list\n  if (!holidays.edges.length) { return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.holidays.empty_list')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )}\n\n\n  return (\n    <OrganizationHolidaysBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={holidays.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: holidays.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationHolidays.edges\n            const pageInfo = fetchMoreResult.organizationHolidays.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new levels at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationHolidays: {\n                    __typename: previousResult.organizationHolidays.__typename,\n                    edges: [ ...previousResult.organizationHolidays.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('organization.locations.title')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {holidays.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name} \n                    <div className=\"text-muted\">\n                      <small dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                    </div>\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.organizationLocations.edges.map(({ node: location }) => (\n                       <div><Badge color=\"primary\" className=\"mr-1\">{location.name}</Badge></div>\n                    ))}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/organization/holidays/edit/${node.id}/locations`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('organization.holidays.locations.title_edit')}\n                      </Button>\n                    </Link>\n                    <Link to={`/organization/holidays/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"organization.holidays.holiday_delete_confirm_msg\"),\n                          msgDescription: <p>{node.name}</p>,\n                          msgSuccess: t('organization.holidays.payment_deleted'),\n                          deleteFunction: deleteHoliday,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_HOLIDAYS_QUERY },\n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationHolidays))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const HOLIDAY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"  \nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nconst OrganizationHolidayForm = ({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.date_start')}>\n                  <CSDatePicker \n                      className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                      selected={values.dateStart}\n                      onChange={(date) => {\n                      setFieldValue(\"dateStart\", date)\n                      setFieldTouched(\"dateStart\", true)\n                      }}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                  />\n                  <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => {\n                          setFieldValue(\"dateEnd\", date)\n                          setFieldTouched(\"dateEnd\", true)\n                      }}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                      placeholderText={t('general.date_end')}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            <h5>{t(\"general.apply_to\")}</h5>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"classes\" \n                  checked={values.classes} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.classes')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"classes\" component=\"div\" />   \n            </Form.Group>  \n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                    setFieldValue(\"description\", e.target.getContent())\n                    setFieldTouched(\"description\", true, true)\n                }}\n                />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationHolidayForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n\nimport { GET_HOLIDAYS_QUERY, ADD_HOLIDAY } from './queries'\nimport { HOLIDAY_SCHEMA } from './yupSchema'\nimport OrganizationHolidayForm from './OrganizationHolidayForm'\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\n\n\nfunction OrganizationHolidayAdd({t, history}) {\n  const returnUrl = \"/organization/holidays\"\n  const [ addHoliday ] = useMutation(ADD_HOLIDAY)\n  \n  return (\n   <OrganizationHolidaysBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.holidays.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', description: '', classes: true }}\n          validationSchema={HOLIDAY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addHoliday({ variables: {\n                input: {\n                  name: values.name, \n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateToLocalISO(values.dateEnd),\n                  description: values.description,\n                  classes: values.classes,\n                }\n              }, refetchQueries: [\n                  {query: GET_HOLIDAYS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.holidays.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n            <OrganizationHolidayForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationHolidaysBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationHolidayAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_HOLIDAYS_QUERY, GET_HOLIDAY_QUERY, UPDATE_HOLIDAY } from './queries'\nimport { HOLIDAY_SCHEMA } from './yupSchema'\nimport OrganizationHolidayForm from './OrganizationHolidayForm'\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationHolidayEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.holidays.title_edit')\n  const returnUrl = \"/organization/holidays\"\n  const { loading, error, data } = useQuery(GET_HOLIDAY_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateHoliday ] = useMutation(UPDATE_HOLIDAY)\n\n  if (loading) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  if (error) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n                    \n  const initialData = data.organizationHoliday;\n  console.log('query data')\n  console.log(data)\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n\n  return (\n    <OrganizationHolidaysBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description,\n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              classes: initialData.classes\n            }}\n            validationSchema={HOLIDAY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateHoliday({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    description: values.description,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateToLocalISO(values.dateEnd)\n                  }\n                }, refetchQueries: [\n                    {query: GET_HOLIDAYS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.holidays.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n              <OrganizationHolidayForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationHolidaysBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationHolidayEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_HOLIDAY_LOCATIONS_QUERY, ADD_LOCATION_TO_HOLIDAY, DELETE_LOCATION_FROM_HOLIDAY } from './queries'\n\nimport {\n  Dimmer,\n  Icon,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\n\n\nfunction OrganizationHolidayEditLocations({ t, match, history }) {\n  const holidayId = match.params.id\n  let cardTitle = t('organization.holidays.locations.title_edit')\n  const { loading, error, data } = useQuery(GET_HOLIDAY_LOCATIONS_QUERY, { \n    variables: { id: holidayId }\n  })\n  const [ addLocationToHoliday ] = useMutation(ADD_LOCATION_TO_HOLIDAY)\n  const [ deleteLocationFromHoliday ] = useMutation(DELETE_LOCATION_FROM_HOLIDAY)\n\n  // Loading\n  if (loading) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const locations = data.organizationLocations\n  const holiday = data.organizationHoliday\n\n  let holiday_locations = {}\n  if (holiday.organizationLocations.edges) {\n    holiday.organizationLocations.edges.map(({ node}) => (\n      holiday_locations[node.id] = true\n    ))\n  }\n\n  cardTitle = cardTitle + \" - \" + holiday.name\n\n  return (\n    <OrganizationHolidaysBase showBack={true}>\n      <Card title={cardTitle}>\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locations.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {(node.id in holiday_locations) ? \n                      <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  {console.log((node.id in holiday_locations))}\n                  {(!(node.id in holiday_locations)) ?\n                    // Add\n                    <Table.Col className=\"text-right text-green\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('organization.holiday.locations.add_to_holiday')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked add\")\n                          let locationId = node.id\n                          addLocationToHoliday({ variables: {\n                            input: {\n                              organizationHoliday: holidayId,\n                              organizationLocation: locationId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_HOLIDAY_LOCATIONS_QUERY, variables: {\"id\": holidayId }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('organization.holiday.locations.added_to_holiday'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                        {t('organization.holiday.locations.add_to_holiday')} \n                      </Button>\n                    </Table.Col>\n                    :\n                    // Delete\n                    <Table.Col className=\"text-right text-red\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('organization.holiday.locations.delete_from_holiday')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked delete\")\n                          console.log(node.id)\n                          let locationId = node.id\n                          deleteLocationFromHoliday({ variables: {\n                            input: {\n                              organizationHoliday: holidayId,\n                              organizationLocation: locationId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_HOLIDAY_LOCATIONS_QUERY, variables: {\"id\": holidayId }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('organization.holiday.locations.deleted_from_holiday'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                        {t('organization.holiday.locations.delete_from_holiday')}\n                      </Button>\n                    </Table.Col>\n                    }\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </Card>\n    </OrganizationHolidaysBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationHolidayEditLocations))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\n\nfunction OrganizationLanguagesBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/languages\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlanguage\">\n                  <ButtonAdd addUrl=\"/organization/languages/add\" />\n                </HasPermissionWrapper>\n              }    \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLanguagesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_LANGUAGES_QUERY = gql`\n  query OrganizationLanguages($after: String, $before: String, $archived: Boolean) {\n    organizationLanguages(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LANGUAGE_QUERY = gql`\n  query OrganizationLanguage($id: ID!) {\n    organizationLanguage(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_LANGUAGE = gql`\nmutation CreateOrganizationLanguage($input:CreateOrganizationLanguageInput!) {\n  createOrganizationLanguage(input: $input) {\n    organizationLanguage{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LANGUAGE = gql`\nmutation UpdateOrganizationLanguage($input: UpdateOrganizationLanguageInput!) {\n  updateOrganizationLanguage(input: $input) {\n    organizationLanguage {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LANGUAGE = gql`\nmutation ArchiveOrganizationLanguage($input: ArchiveOrganizationLanguageInput!) {\n  archiveOrganizationLanguage(input: $input) {\n    organizationLanguage {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase'\n\nimport { GET_LANGUAGES_QUERY, ARCHIVE_LANGUAGE } from \"./queries\"\n\n\nfunction OrganizationLanguages({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.languages.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LANGUAGES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLanguage ] = useMutation(ARCHIVE_LANGUAGE)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  if (error) return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.languages.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  let languages = data.organizationLanguages\n\n  // Empty list\n  if (!languages.edges.length) { return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={t('organization.languages.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.languages.empty_list') : t(\"organization.languages.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )}\n\n\n  return (\n    <OrganizationLanguagesBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={languages.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: languages.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationLanguages.edges\n            const pageInfo = fetchMoreResult.organizationLanguages.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new languages at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationLanguages: {\n                    __typename: previousResult.organizationLanguages.__typename,\n                    edges: [ ...previousResult.organizationLanguages.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {languages.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/languages/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLanguage({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LANGUAGES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLanguages))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LANGUAGE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationLanguageForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationLanguageForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LANGUAGES_QUERY, ADD_LANGUAGE } from './queries'\nimport { LANGUAGE_SCHEMA } from './yupSchema'\nimport OrganizationLanguageForm from './OrganizationLanguageForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase';\n\n\nfunction OrganizationLanguageAdd({t, history}) {\n  const returnUrl = \"/organization/languages\"\n  const [ addLanguage ] = useMutation(ADD_LANGUAGE)\n  \n  return (\n   <OrganizationLanguagesBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.languages.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={LANGUAGE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLanguage({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_LANGUAGES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.languages.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationLanguageForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationLanguagesBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLanguageAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LANGUAGES_QUERY, GET_LANGUAGE_QUERY, UPDATE_LANGUAGE } from './queries'\nimport { LANGUAGE_SCHEMA } from './yupSchema'\nimport OrganizationLanguageForm from './OrganizationLanguageForm'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationLanguageEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.languages.title_edit')\n  const returnUrl = \"/organization/languages\"\n  const { loading, error, data } = useQuery(GET_LANGUAGE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLanguage ] = useMutation(UPDATE_LANGUAGE)\n\n  if (loading) return (\n    <OrganizationLanguagesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  if (error) return (\n    <OrganizationLanguagesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n                    \n  const initialData = data.organizationLanguage;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLanguagesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={LANGUAGE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLanguage({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_LANGUAGES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.languages.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationLanguageForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationLanguagesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLanguageEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATIONS_QUERY = gql`\n  query OrganizationLocations($after: String, $before: String, $archived: Boolean) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          displayPublic,\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LOCATION_QUERY = gql`\n  query OrganizationLocation($id: ID!) {\n    organizationLocation(id:$id) {\n      id\n      name\n      displayPublic\n      archived\n    }\n  }\n`\n\nexport const ADD_LOCATION = gql`\nmutation CreateOrganizationLocation($input: CreateOrganizationLocationInput!) {\n  createOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      archived\n      displayPublic\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LOCATION = gql`\nmutation UpdateOrganizationLocation($input: UpdateOrganizationLocationInput!) {\n  updateOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      name\n      displayPublic\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LOCATION = gql`\nmutation ArchiveOrganizationLocation($input: ArchiveOrganizationLocationInput!) {\n  archiveOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      archived\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationLocationsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title=\"Organization\">\n            <div className=\"page-options d-flex\">\n              {(showBack) ? \n                <ButtonBack returnUrl=\"/organization/locations\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                resource=\"organizationlocation\">\n                  <ButtonAdd addUrl=\"/organization/locations/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>  \n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_LOCATIONS_QUERY, ARCHIVE_LOCATION } from \"./queries\"\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\nfunction OrganizationLocations({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.locations.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LOCATIONS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLocation ] = useMutation(ARCHIVE_LOCATION)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.locations.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n\n  let locations = data.organizationLocations\n\n  // Empty list\n  if (!locations.edges.length) { return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n        {(!archived) ? t('organization.locations.empty_list') : t(\"organization.locations.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )}\n\n  return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}\n                headerContent={headerOptions}\n                hasCardBody={false}\n                pageInfo={locations.pageInfo}\n                onLoadMore={() => {\n                fetchMore({\n                  variables: {\n                    after: locations.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.organizationLocations.edges\n                    const pageInfo = fetchMoreResult.organizationLocations.pageInfo\n\n                    return newEdges.length\n                      ? {\n                          // Put the new locations at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          organizationLocations: {\n                            __typename: previousResult.organizationLocations.__typename,\n                            edges: [ ...previousResult.organizationLocations.edges, ...newEdges ],\n                            pageInfo\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locations.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <React.Fragment>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/rooms/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.rooms')}\n                        </Button>\n                      </React.Fragment>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLocation({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LOCATIONS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocations))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LOCATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_LOCATIONS_QUERY, ADD_LOCATION } from './queries'\nimport { LOCATION_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\nfunction OrganizationLocationAdd({ t, history }) {\n  const returnUrl = \"/organization/locations\"\n  const cardTitle = t('organization.locations.title_add')\n  const [ addLocation ] = useMutation(ADD_LOCATION)\n\n  return (\n    <OrganizationLocationsBase showBack={true}>\n      <Card>    \n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', displayPublic: true }}\n          validationSchema={LOCATION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLocation({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic\n                }\n              }, refetchQueries: [\n                  {query: GET_LOCATIONS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.locations.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n                <Card.Body>\n                    <Form.Group>\n                      <Form.Label className=\"custom-switch\">\n                        <Field \n                          className=\"custom-switch-input\"\n                          type=\"checkbox\" \n                          name=\"displayPublic\" \n                          checked={values.displayPublic} />\n                        <span className=\"custom-switch-indicator\" ></span>\n                        <span className=\"custom-switch-description\">{t('organization.location.public')}</span>\n                      </Form.Label>\n                      <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                    </Form.Group>    \n\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      color=\"primary\"\n                      className=\"pull-right\" \n                      type=\"submit\" \n                      disabled={isSubmitting}\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button color=\"link\">\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_LOCATIONS_QUERY, GET_LOCATION_QUERY, UPDATE_LOCATION } from './queries'\nimport { LOCATION_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\n\nfunction OrganizationLocationEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.locations.title_edit')\n  const returnUrl = \"/organization/locations\"\n  const { loading, error, data } = useQuery(GET_LOCATION_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLocation ] = useMutation(UPDATE_LOCATION)\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.locations.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n\n  const initialData = data.organizationLocation;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLocationsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n          {console.log(match.params.id)}\n        </Card.Header>                    \n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              displayPublic: initialData.displayPublic \n            }}\n            validationSchema={LOCATION_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLocation({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    displayPublic: values.displayPublic \n                  }\n                }, refetchQueries: [\n                    {query: GET_LOCATIONS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.locations.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n              <FoForm>\n                  <Card.Body>\n                      <Form.Group>\n                        <Form.Label className=\"custom-switch\">\n                          <Field \n                            className=\"custom-switch-input\"\n                            type=\"checkbox\" \n                            name=\"displayPublic\" \n                            checked={values.displayPublic} />\n                          <span className=\"custom-switch-indicator\" ></span>\n                          <span className=\"custom-switch-description\">{t('organization.location.public')}</span>\n                        </Form.Label>\n                        <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                      </Form.Group>     \n                      <Form.Group label={t('general.name')} >\n                        <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        className=\"pull-right\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        type=\"submit\"\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button\n                          type=\"button\" \n                          color=\"link\" \n                        >\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                    </Card.Footer>\n                </FoForm>\n              )}\n            </Formik>\n          </Card>\n    </OrganizationLocationsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATION_ROOMS_QUERY = gql`\n  query OrganizationLocationRooms($after: String, $before: String, $organizationLocation: ID!, $archived: Boolean!) {\n    organizationLocationRooms(first: 15, before: $before, after: $after, organizationLocation: $organizationLocation, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationLocation {\n            id\n            name\n          }\n          archived,\n          displayPublic\n          name\n        }\n      }\n    }\n    organizationLocation(id: $organizationLocation) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_LOCATION_ROOM_QUERY = gql`\n  query OrganizationLocationRoom($id: ID!) {\n    organizationLocationRoom(id:$id) {\n      id\n      organizationLocation {\n        id\n        name\n      }\n      name\n      displayPublic\n      archived\n    }\n  }\n`\n\nexport const ADD_LOCATION_ROOM = gql`\n  mutation CreateOrganizationLocationRoom($input: CreateOrganizationLocationRoomInput!) {\n    createOrganizationLocationRoom(input: $input) {\n      organizationLocationRoom {\n        id\n        organizationLocation {\n          id\n          name\n        }\n        archived\n        displayPublic\n        name\n      }\n    }\n  }\n`\n\nexport const UPDATE_LOCATION_ROOM = gql`\nmutation UpdateOrganizationLocationRoom($input: UpdateOrganizationLocationRoomInput!) {\n  updateOrganizationLocationRoom(input: $input) {\n    organizationLocationRoom {\n      id\n      organizationLocation {\n        id\n        name\n      }\n      name\n      displayPublic\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LOCATION_ROOM = gql`\nmutation ArchiveOrganizationLocationRoom($input: ArchiveOrganizationLocationRoomInput!) {\n  archiveOrganizationLocationRoom(input: $input) {\n    organizationLocationRoom {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport ButtonBack from '../../../ui/ButtonBack';\n\n\nfunction OrganizationLocationRoomsBase({t, history, match, children, showAdd=false, returnUrl=\"/organization/locations\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlocationroom\">\n                  <ButtonAdd addUrl={`/organization/locations/rooms/add/${match.params.location_id}`}\n                    className=\"ml-2\" />\n                </HasPermissionWrapper>\n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>        \n)}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_LOCATION_ROOMS_QUERY, ARCHIVE_LOCATION_ROOM } from \"./queries\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase'\n\n\nfunction OrganizationLocationsRooms({ t, history, match }) {\n  const organizationLocationId = match.params.location_id\n  let cardTitle = t('organization.location_rooms.title')\n  let [archived, setArchived] = useState(false)\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LOCATION_ROOMS_QUERY, {\n    variables: { archived: archived, organizationLocation: organizationLocationId }\n  })\n  const [ archiveLocationRoom ] = useMutation(ARCHIVE_LOCATION_ROOM)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.location_rooms.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n\n  let locationRooms = data.organizationLocationRooms\n  let location = data.organizationLocation\n\n  cardTitle = `${cardTitle} - ${location.name}`\n\n  // Empty list\n  if (!locationRooms.edges.length) { return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.location_rooms.empty_list') : t(\"organization.location_rooms.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )}\n\n  return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard \n        cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={locationRooms.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: locationRooms.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationLocationsRooms.edges\n                        const pageInfo = fetchMoreResult.organizationLocationsRooms.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationLocationsRooms: {\n                                __typename: previousResult.organizationLocationsRooms.__typename,\n                                edges: [ ...previousResult.organizationLocationsRooms.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locationRooms.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/locations/rooms/edit/\" + match.params.location_id + '/' + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                      <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.archive')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked archived\")\n                            let id = node.id\n                            archiveLocationRoom({ variables: {\n                              input: {\n                              id,\n                              archived: !archived\n                              }\n                      }, refetchQueries: [\n                          { \n                            query: GET_LOCATION_ROOMS_QUERY, \n                            variables: {archived: archived, organizationLocation: organizationLocationId }\n                          }\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fa\" name=\"inbox\" />\n                      </button>\n                    </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationsRooms))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LOCATION_ROOM_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst OrganizationLocationRoomForm = ({ t, history, match, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('organization.location_room.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_LOCATION_ROOMS_QUERY, ADD_LOCATION_ROOM } from './queries'\nimport { LOCATION_ROOM_SCHEMA } from './yupSchema'\nimport OrganizationLocationRoomForm from './OrganizationLocationRoomForm'\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase';\n\n\nfunction OrganizationLocationRoomAdd({ t, history, match }) {\n  const locationId = match.params.location_id\n  const returnUrl = `/organization/locations/rooms/${locationId}`\n  const [ addLocationRoom ] = useMutation(ADD_LOCATION_ROOM)\n\n  return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <Card title={t(\"organization.location_rooms.title_add\")}>\n        <Formik\n          initialValues={{ name: '', displayPublic: true }}\n          validationSchema={LOCATION_ROOM_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLocationRoom({ variables: {\n                input: {\n                  organizationLocation: locationId,\n                  name: values.name, \n                  displayPublic: values.displayPublic\n                }\n              }, refetchQueries: [\n                  {query: GET_LOCATION_ROOMS_QUERY,\n                    variables: {\"archived\": false, \"organizationLocation\": locationId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.location_rooms.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationLocationRoomForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LOCATION_ROOMS_QUERY, GET_LOCATION_ROOM_QUERY, UPDATE_LOCATION_ROOM } from './queries'\nimport { LOCATION_ROOM_SCHEMA } from './yupSchema'\nimport OrganizationLocationRoomForm from './OrganizationLocationRoomForm'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase'\n\n\nfunction OrganizationLocationRoomEdit({t, history, match}) {\n  const id = match.params.id\n  const locationId = match.params.location_id\n  const returnUrl = `/organization/locations/rooms/${locationId}`\n  const cardTitle = t('organization.location_rooms.title_edit')\n  const { loading, error, data } = useQuery(GET_LOCATION_ROOM_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLocationRoom ] = useMutation(UPDATE_LOCATION_ROOM)\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n\n  const initialData = data.organizationLocationRoom;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic \n          }}\n          validationSchema={LOCATION_ROOM_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateLocationRoom({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  displayPublic: values.displayPublic \n                }\n              }, refetchQueries: [\n                {query: GET_LOCATION_ROOMS_QUERY,\n                  variables: {\"archived\": false, \"organizationLocation\": match.params.location_id }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.location_rooms.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationLocationRoomForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationLevelsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/levels\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlevel\">\n                  <ButtonAdd addUrl=\"/organization/levels/add\" />\n                </HasPermissionWrapper>\n              }     \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLevelsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_LEVELS_QUERY = gql`\n  query OrganizationLevels($after: String, $before: String, $archived: Boolean) {\n    organizationLevels(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LEVEL_QUERY = gql`\n  query SchoolLevel($id: ID!) {\n    organizationLevel(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_LEVEL = gql`\nmutation CreateOrganizationLevel($input:CreateOrganizationLevelInput!) {\n  createOrganizationLevel(input: $input) {\n    organizationLevel{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LEVEL = gql`\nmutation UpdateOrganizationLevel($input: UpdateOrganizationLevelInput!) {\n  updateOrganizationLevel(input: $input) {\n    organizationLevel {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LEVEL = gql`\nmutation ArchiveOrganizationLevel($input: ArchiveOrganizationLevelInput!) {\n  archiveOrganizationLevel(input: $input) {\n    organizationLevel {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLevelsBase from './OrganizationLevelsBase'\n\nimport { GET_LEVELS_QUERY, ARCHIVE_LEVEL } from \"./queries\"\n\n\nfunction OrganizationLevels({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.levels.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LEVELS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLevel ] = useMutation(ARCHIVE_LEVEL)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  if (error) return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.levels.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  let levels = data.organizationLevels\n\n  // Empty list\n  if (!levels.edges.length) { return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={t('organization.levels.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )}\n\n\n  return (\n    <OrganizationLevelsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={levels.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: levels.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationLevels.edges\n            const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new levels at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationLevels: {\n                    __typename: previousResult.organizationLevels.__typename,\n                    edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {levels.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLevel({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationLevels))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LEVEL_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationLevelForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationLevelForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LEVELS_QUERY, ADD_LEVEL } from './queries'\nimport { LEVEL_SCHEMA } from './yupSchema'\nimport OrganizationLevelForm from './OrganizationLevelForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationLevelsBase from './OrganizationLevelsBase';\n\n\nfunction OrganizationLevelAdd({t, history}) {\n  const returnUrl = \"/organization/levels\"\n  const [ addLevel ] = useMutation(ADD_LEVEL)\n  \n  return (\n   <OrganizationLevelsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.levels.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={LEVEL_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLevel({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.levels.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationLevelForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationLevelsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLevelAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LEVELS_QUERY, GET_LEVEL_QUERY, UPDATE_LEVEL } from './queries'\nimport { LEVEL_SCHEMA } from './yupSchema'\nimport OrganizationLevelForm from './OrganizationLevelForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationLevelsBase from './OrganizationLevelsBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationLevelEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.levels.title_edit')\n  const returnUrl = \"/organization/levels\"\n  const { loading, error, data } = useQuery(GET_LEVEL_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLevel ] = useMutation(UPDATE_LEVEL)\n\n  if (loading) return (\n    <OrganizationLevelsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  if (error) return (\n    <OrganizationLevelsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n                    \n  const initialData = data.organizationLevel;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLevelsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={LEVEL_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLevel({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.levels.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationLevelForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationLevelsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLevelEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationShiftsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/shifts\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationshift\">\n                  <ButtonAdd addUrl=\"/organization/shifts/add\" />\n                </HasPermissionWrapper>\n              }  \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationShiftsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SHIFTS_QUERY = gql`\n  query OrganizationShifts($after: String, $before: String, $archived: Boolean) {\n    organizationShifts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SHIFT_QUERY = gql`\n  query SchoolShift($id: ID!) {\n    organizationShift(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_SHIFT = gql`\nmutation CreateOrganizationShift($input:CreateOrganizationShiftInput!) {\n  createOrganizationShift(input: $input) {\n    organizationShift{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_SHIFT = gql`\nmutation UpdateOrganizationShift($input: UpdateOrganizationShiftInput!) {\n  updateOrganizationShift(input: $input) {\n    organizationShift {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_SHIFT = gql`\nmutation ArchiveOrganizationShift($input: ArchiveOrganizationShiftInput!) {\n  archiveOrganizationShift(input: $input) {\n    organizationShift {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationShiftsBase from './OrganizationShiftsBase'\n\nimport { GET_SHIFTS_QUERY, ARCHIVE_SHIFT } from \"./queries\"\n\n\nfunction OrganizationShifts({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.shifts.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_SHIFTS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveShift ] = useMutation(ARCHIVE_SHIFT)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  if (error) return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.shifts.error_loading')}</p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  let shifts = data.organizationShifts\n\n  // Empty list\n  if (!shifts.edges.length) { return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={t('organization.shifts.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.shifts.empty_list') : t(\"organization.shifts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )}\n\n\n  return (\n    <OrganizationShiftsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={shifts.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: shifts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationShifts.edges\n            const pageInfo = fetchMoreResult.organizationShifts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new shifts at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationShifts: {\n                    __typename: previousResult.organizationShifts.__typename,\n                    edges: [ ...previousResult.organizationShifts.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {shifts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/shifts/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveShift({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_SHIFTS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationShifts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SHIFT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationShiftForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationShiftForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_SHIFTS_QUERY, ADD_SHIFT } from './queries'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport OrganizationShiftForm from './OrganizationShiftForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationShiftsBase from './OrganizationShiftsBase';\n\n\nfunction OrganizationShiftAdd({t, history}) {\n  const returnUrl = \"/organization/shifts\"\n  const [ addShift ] = useMutation(ADD_SHIFT)\n  \n  return (\n   <OrganizationShiftsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.shifts.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '' }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addShift({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.shifts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationShiftForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationShiftsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationShiftAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_SHIFT_QUERY, UPDATE_SHIFT } from './queries'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport OrganizationShiftForm from './OrganizationShiftForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationShiftsBase from './OrganizationShiftsBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationShiftEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.shifts.title_edit')\n  const returnUrl = \"/organization/shifts\"\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateShift ] = useMutation(UPDATE_SHIFT)\n\n  if (loading) return (\n    <OrganizationShiftsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  if (error) return (\n    <OrganizationShiftsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n                    \n  const initialData = data.organizationShift;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationShiftsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={SHIFT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateShift({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_SHIFTS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.shifts.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationShiftForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationShiftsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationShiftEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ? \n                <ButtonBack returnUrl=\"/organization/subscriptions\" />\n              :\n                <React.Fragment>\n                  <Link to=\"/organization/subscriptions/groups\" \n                        className='btn btn-secondary ml-2 mr-2'>\n                      <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n                  </Link>\n                  <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscription\">\n                    <ButtonAdd addUrl=\"/organization/subscriptions/add\" />\n                  </HasPermissionWrapper>\n                </React.Fragment>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTIONS_QUERY = gql`\n  query OrganizationSubscriptions($after: String, $before: String, $archived: Boolean) {\n    organizationSubscriptions(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          priceTodayDisplay\n          displayPublic\n          displayShop\n          name\n          description\n          sortOrder\n          minDuration\n          classes\n          subscriptionUnit\n          subscriptionUnitDisplay\n          reconciliationClasses\n          creditAccumulationDays\n          unlimited\n          termsAndConditions\n          registrationFee\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SUBSCRIPTION_QUERY = gql`\n  query OrganizationSubscription($id: ID!, $after: String, $before: String) {\n    organizationSubscription(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      name\n      description\n      sortOrder\n      minDuration\n      classes\n      subscriptionUnit\n      subscriptionUnitDisplay\n      reconciliationClasses\n      creditAccumulationDays\n      unlimited\n      termsAndConditions\n      registrationFee\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query SubscriptionInputValues($after: String, $before: String) {\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SUBSCRIPTION = gql`\n  mutation CreateSubscription($input: CreateOrganizationSubscriptionInput!) {\n    createOrganizationSubscription(input: $input) {\n      organizationSubscription {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SUBSCRIPTION = gql`\n  mutation UpdateOrganizationSubscription($input: UpdateOrganizationSubscriptionInput!) {\n    updateOrganizationSubscription(input: $input) {\n      organizationSubscription {\n        id\n      }\n    }\n  }\n`\n\n\nexport const ARCHIVE_SUBSCRIPTION = gql`\nmutation ArchiveOrganizationSubscription($input: ArchiveOrganizationSubscriptionInput!) {\n  archiveOrganizationSubscription(input: $input) {\n    organizationSubscription {\n      id\n      archived\n    }\n  }\n}\n`","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from './OrganizationSubscriptionsBase'\n\nimport { GET_SUBSCRIPTIONS_QUERY, ARCHIVE_SUBSCRIPTION } from \"./queries\"\n\n\nfunction OrganizationSubscriptions({t, history}) {\n  const cardTitle = t('organization.subscriptions.title')\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_SUBSCRIPTIONS_QUERY, {\n    variables: {archived: archived},\n    fetchPolicy: \"network-only\"\n  })\n  const [archiveSubscription] = useMutation(ARCHIVE_SUBSCRIPTION)\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.subscriptions.error_loading')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  let subscriptions = data.organizationSubscriptions\n\n  // Empty list\n  if (!subscriptions.edges.length) { return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.subscriptions.empty_list') : t(\"organization.subscriptions.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )}\n\n  return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={t('organization.subscriptions.title')}\n                  headerContent={headerOptions}\n                  hasCardBody={false}\n                  pageInfo={subscriptions.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: subscriptions.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationSubscriptions.edges\n                        const pageInfo = fetchMoreResult.organizationSubscriptions.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new subscriptions at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationSubscriptions: {\n                                __typename: previousResult.organizationSubscriptions.__typename,\n                                edges: [ ...previousResult.organizationSubscriptions.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n              <Table.ColHeader><span className=\"pull-right\">{t('general.price')}</span></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {subscriptions.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <BadgeBoolean value={node.displayPublic} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <BadgeBoolean value={node.displayShop} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {\n                    (node.unlimited) ? t(\"general.unlimited\"):\n                    <div>\n                      {node.classes} <br />\n                      <span className=\"text-muted\"> {t(\"general.a\")} {node.subscriptionUnitDisplay}</span>\n                    </div>\n                  }\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {node.priceTodayDisplay} <br />\n                  <Link to={\"/organization/subscriptions/prices/\" + node.id}\n                        className='btn btn-link btn-sm'>\n                      {/* <Icon prefix=\"fe\" name=\"dollar-sign\" />  */}\n                      {t('general.edit_price')}\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(node.archived) ? \n                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  }\n                  <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      href=\"\"\n                      onClick={() => {\n                        console.log(\"clicked archived\")\n                        let id = node.id\n                        archiveSubscription({ variables: {\n                          input: {\n                          id,\n                          archived: !archived\n                          }\n                  }, refetchQueries: [\n                      {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": archived }}\n                  ]}).then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      (archived) ? t('general.unarchived'): t('general.archived'), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                  }}>\n                    <Icon name=\"inbox\" />\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ContentCard>\n  </OrganizationSubscriptionsBase>\n)}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptions))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    sortOrder: Yup.number()\n      .min(0),\n    minDuration: Yup.number()\n      .min(0),\n    classes: Yup.number()\n      .min(0),\n    subscriptionUnit: Yup.string(),\n    creditValidity: Yup.number()\n      .min(0),\n    reconciliationClasses: Yup.number()\n      .min(0),\n    quickStatsAmount: Yup.number()\n      .min(0),\n    termsAndConditions: Yup.string()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\";\n\n\nconst OrganizationSubscriptionForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.subscription.public')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n      </Form.Group>      \n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayShop\" \n              checked={values.displayShop} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.subscription.shop')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"displayShop\" component=\"div\" />   \n      </Form.Group>      \n      <Form.Group label={t('general.name')} >\n        <Field type=\"text\" \n              name=\"name\" \n              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.description')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"description\"\n            initialValue={values.description}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"description\", e.target.getContent())\n              setFieldTouched(\"description\", true)\n            }}\n          />\n        <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('shop.subscriptions.min_duration_in_months')}>\n            <Field type=\"text\" \n                  name=\"minDuration\" \n                  className={(errors.minDuration) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"minDuration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.sort_order')}>\n            <Field type=\"text\" \n                  name=\"sortOrder\" \n                  className={(errors.sortOrder) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"sortOrder\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"unlimited\" \n              checked={values.unlimied} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('general.unlimited')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"unlimited\" component=\"div\" />   \n      </Form.Group>  \n      {/* Show if unlimited */}\n      { (values.unlimited) ? \"\"\n        : \n        // Show if not unlimited\n        <React.Fragment>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.classes')}>\n                <Field type=\"text\" \n                      name=\"classes\" \n                      className={(errors.classes) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"classes\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group> \n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.subscription_unit')}>\n                <Field component=\"select\" \n                      name=\"subscriptionUnit\" \n                      className={(errors.subscriptionUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                  <option value=\"WEEK\" key={v4()}>{t('subscription_unit.week')}</option>\n                  <option value=\"MONTH\" key={v4()}>{t('subscription_unit.month')}</option>\n                </Field>\n                <ErrorMessage name=\"subscriptionUnit\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('organization.subscriptions.credit_accumulation_days')}>\n                <Field type=\"text\" \n                      name=\"creditAccumulationDays\" \n                      className={(errors.creditAccumulationDays) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"creditAccumulationDays\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('organization.subscriptions.reconciliation_classes')}>\n                <Field type=\"text\" \n                      name=\"reconciliationClasses\" \n                      className={(errors.reconciliationClasses) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"reconciliationClasses\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </React.Fragment>\n      } \n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"termsAndConditions\"\n            initialValue={values.termsAndConditions}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"termsAndConditions\", e.target.getContent())\n              setFieldTouched(\"termsAndConditions\", true)\n            }}\n          />\n        <ErrorMessage name=\"termsAndConditions\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {/* <Form.Group label={t('general.membership')}>\n        <Field component=\"select\" \n              name=\"organizationMembership\" \n              className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t(\"general.membership_not_required\")}</option>\n          {inputData.organizationMemberships.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>  */}\n      <Form.Group label={t('general.quickStatsAmount')}>\n        <Field type=\"text\" \n              name=\"quickStatsAmount\" \n              className={(errors.quickStatsAmount) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"quickStatsAmount\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.glaccount')}>\n            <Field component=\"select\" \n                  name=\"financeGlaccount\" \n                  className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeGlaccounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.costcenter')}>\n            <Field component=\"select\" \n                  name=\"financeCostcenter\" \n                  className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeCostcenters.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\"\n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionForm from './OrganizationSubscriptionForm'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from \"./OrganizationSubscriptionsBase\"\n\n\nfunction OrganizationSubscriptionAdd({ t, history }) {\n  const cardTitle = t('organization.subscriptions.title_add')\n  const returnUrl =  \"/organization/subscriptions\"\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createSubscription] = useMutation(CREATE_SUBSCRIPTION)\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              displayPublic: true,\n              displayShop: true,\n              name: \"\",\n              description: \"\",\n              sortOrder: 0,\n              minDuration: 1,\n              classes: 1,\n              subscriptionUnit: \"WEEK\",\n              reconciliationClasses: 0,\n              creditAccumulationDays: 31,\n              unlimited: false,\n              termsAndConditions: \"\",\n              organizationMembership: \"\",\n              quickStatsAmount: 0,\n              financeGlaccount: \"\",\n              financeCostcenter: \"\"\n            }}\n            validationSchema={SUBSCRIPTION_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                createSubscription({ variables: {\n                  input: {\n                    displayPublic: values.displayPublic,\n                    displayShop: values.displayShop,\n                    name: values.name,\n                    description: values.description,\n                    sortOrder: parseInt(values.sortOrder),\n                    minDuration: parseInt(values.minDuration),\n                    classes: parseInt(values.classes),\n                    subscriptionUnit: values.subscriptionUnit,\n                    reconciliationClasses: parseInt(values.reconciliationClasses),\n                    creditAccumulationDays: parseInt(values.creditAccumulationDays),\n                    unlimited: values.unlimited,\n                    termsAndConditions: values.termsAndConditions,\n                    quickStatsAmount: values.quickStatsAmount,\n                    financeGlaccount: values.financeGlaccount,\n                    financeCostcenter: values.financeCostcenter\n                  }\n                }})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.subscriptions.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n              }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <OrganizationSubscriptionForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsBase>\n  )\n}\n\n\n\n// class OrganizationSubscriptionAdd extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization subscription add props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const history = this.props.history\n//     const returnUrl = \"/organization/subscriptions\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title=\"Organization\" />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n\n//               </Grid.Col>\n//               <Grid.Col md={3}>\n//                 <HasPermissionWrapper permission=\"add\"\n//                                       resource=\"organizationsubscription\">\n//                   <Button color=\"primary btn-block mb-6\"\n//                           onClick={() => history.push(returnUrl)}>\n//                     <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                   </Button>\n//                 </HasPermissionWrapper>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_QUERY, UPDATE_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionForm from './OrganizationSubscriptionForm'\n\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from './OrganizationSubscriptionsBase';\n\n\nfunction OrganizationSubscriptionEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/subscriptions\"\n  const cardTitle = t('organization.subscriptions.title_edit')\n\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_QUERY, { \n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateSubscription ] = useMutation(UPDATE_SUBSCRIPTION)\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  const initialData = data\n\n  let initialMembership = \"\"\n  if (initialData.organizationSubscription.organizationMembership) {\n    initialMembership =  initialData.organizationSubscription.organizationMembership.id\n  } \n\n  let initialGlaccount = \"\"\n  if (initialData.organizationSubscription.financeGlaccount) {\n    initialGlaccount =  initialData.organizationSubscription.financeGlaccount.id\n  } \n\n  let initialCostcenter = \"\"\n  if (initialData.organizationSubscription.financeCostcenter) {\n    initialCostcenter =  initialData.organizationSubscription.financeCostcenter.id\n  } \n\n  return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.organizationSubscription.displayPublic,\n            displayShop: initialData.organizationSubscription.displayShop,\n            name: initialData.organizationSubscription.name,\n            description: initialData.organizationSubscription.description,\n            sortOrder: initialData.organizationSubscription.sortOrder,\n            minDuration: initialData.organizationSubscription.minDuration,\n            classes: initialData.organizationSubscription.classes,\n            subscriptionUnit: initialData.organizationSubscription.subscriptionUnit,\n            reconciliationClasses: initialData.organizationSubscription.reconciliationClasses,\n            creditAccumulationDays: initialData.organizationSubscription.creditAccumulationDays,\n            unlimited: initialData.organizationSubscription.unlimited,\n            termsAndConditions: initialData.organizationSubscription.termsAndConditions,\n            organizationMembership: initialMembership,\n            quickStatsAmount: initialData.organizationSubscription.quickStatsAmount,\n            financeGlaccount:  initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={SUBSCRIPTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateSubscription({ variables: {\n                input: {\n                  id: match.params.id,\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  name: values.name,\n                  description: values.description,\n                  sortOrder: parseInt(values.sortOrder),\n                  minDuration: parseInt(values.minDuration),\n                  classes: parseInt(values.classes),\n                  subscriptionUnit: values.subscriptionUnit,\n                  reconciliationClasses: parseInt(values.reconciliationClasses),\n                  creditAccumulationDays: parseInt(values.creditAccumulationDays),\n                  unlimited: values.unlimited,\n                  termsAndConditions: values.termsAndConditions,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('organization.subscriptions.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationSubscriptionForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsGroupsBase({ \n  t, history, children, showAdd=false, returnUrl=\"/organization/subscriptions\" \n}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscriptiongroup\">\n                  <ButtonAdd addUrl=\"/organization/subscriptions/groups/add\" className=\"ml-2\" />\n                </HasPermissionWrapper>\n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsGroupsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTION_GROUPS_QUERY = gql`\n  query OrganizationSubscriptionGroups($after: String, $before: String) {\n    organizationSubscriptionGroups(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTION_GROUP_QUERY = gql`\n  query OrganizationSubscriptionGroup($id: ID!) {\n    organizationSubscriptionGroup(id:$id) {\n      id\n      name\n      description\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY = gql`\n  query GetPassesAndGroupMembership($after: String, $before: String, $id:ID!) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationSubscriptionGroup(id: $id) {\n      id\n      name\n      description\n      organizationSubscriptions {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SUBSCRIPTION_GROUP = gql`\n  mutation CreateOrganizationSubscriptionGroup($input:CreateOrganizationSubscriptionGroupInput!) {\n    createOrganizationSubscriptionGroup(input: $input) {\n      organizationSubscriptionGroup{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_SUBSCRIPTION_GROUP = gql`\nmutation UpdateOrganizationSubscriptionGroup($input: UpdateOrganizationSubscriptionGroupInput!) {\n  updateOrganizationSubscriptionGroup(input: $input) {\n    organizationSubscriptionGroup {\n      id\n    }\n  }\n}\n`\n\nexport const DELETE_SUBSCRIPTION_GROUP = gql`\n  mutation DeleteSubscriptionGroup($input: DeleteOrganizationSubscriptionGroupInput!) {\n    deleteOrganizationSubscriptionGroup(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const ADD_CARD_TO_GROUP = gql`\n  mutation AddCardToGroup($input: CreateOrganizationSubscriptionGroupSubscriptionInput!) {\n    createOrganizationSubscriptionGroupSubscription(input:$input) {\n      organizationSubscriptionGroupSubscription {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        organizationSubscriptionGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_CARD_FROM_GROUP = gql`\n  mutation DeleteCardFromGroup($input: DeleteOrganizationSubscriptionGroupSubscriptionInput!) {\n    deleteOrganizationSubscriptionGroupSubscription(input:$input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\n\nimport OrganizationGroupsSubscriptionsBase from \"./OrganizationSubscriptionsGroupsBase\"\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, DELETE_SUBSCRIPTION_GROUP } from \"./queries\"\n\n\nfunction OrganizationSubscriptionsGroups({ t, history }) {\n  const { loading, error, data, fetchMore } = useQuery(GET_SUBSCRIPTION_GROUPS_QUERY)\n  const [deleteSubscriptionGroup] = useMutation(DELETE_SUBSCRIPTION_GROUP)\n\n  if (loading) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <p>{t('organization.subscription_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n\n  const subscription_groups = data.organizationSubscriptionGroups\n  \n  // Empty list\n  if (!subscription_groups.edges.length) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <p>{t('organization.subscription_groups.empty_list')}</p>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n\n  return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}\n            hasCardBody={false}\n            pageInfo={subscription_groups.pageInfo}\n            onLoadMore={() => {\n            fetchMore({\n              variables: {\n                after: subscription_groups.pageInfo.endCursor\n              },\n              updateQuery: (previousResult, { fetchMoreResult }) => {\n                const newEdges = fetchMoreResult.organizationSubscriptionGroups.edges\n                const pageInfo = fetchMoreResult.organizationSubscriptionGroups.pageInfo\n\n                return newEdges.length\n                  ? {\n                      // Put the new subscription_groups at the end of the list and update `pageInfo`\n                      // so we have the new `endCursor` and `hasNextPage` values\n                      organizationSubscriptionGroups: {\n                        __typename: previousResult.organizationSubscriptionGroups.__typename,\n                        edges: [ ...previousResult.organizationSubscriptionGroups.edges, ...newEdges ],\n                        pageInfo\n                      }\n                    }\n                  : previousResult\n              }\n            })\n          }} >\n        <Table cards>\n          <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {subscription_groups.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.description.substring(0, 24)}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <span>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/groups/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/groups/edit/subscriptions/\" + node.id)}\n                            color=\"secondary\">\n                      {t('organization.subscriptions.groups.edit_subscriptions')}\n                    </Button>\n                  </span>\n                  <button className=\"icon btn btn-link btn-sm float-right\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"organization.subscriptions.groups.delete_confirm_msg\"),\n                        msgDescription: <p>{node.name}</p>,\n                        msgSuccess: t('organization.subscriptions.groups.deleted'),\n                        deleteFunction: deleteSubscriptionGroup,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUPS_QUERY} \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nconst OrganizationSubscriptionGroupForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.description')}>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        {(isSubmitting) ?\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          loading\n          disabled={isSubmitting}\n        >\n          {t(\"general.submit\")}\n        </Button>\n        :\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n        }\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n        {(isSubmitting) ? \n          <Alert type=\"primary\" hasExtraSpace>\n            <strong>{t('general.please_wait')}</strong> {t('organization.subscription_groups.toast_creating_might_take_a_while')}\n          </Alert> : \n          \"\"\n        }\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, ADD_SUBSCRIPTION_GROUP } from './queries'\nimport { SUBSCRIPTION_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionGroupForm from './OrganizationSubscriptionsGroupForm'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\nfunction OrganizationSubscriptionGroupAdd({t, history}) {\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const [addSubscriptionGroup] = useMutation(ADD_SUBSCRIPTION_GROUP)\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.subscription_groups.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '' }}\n          validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            addSubscriptionGroup({ variables: {\n              input: {\n                name: values.name, \n                description: values.description,\n              }\n            }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('organization.subscription_groups.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationSubscriptionGroupForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, GET_SUBSCRIPTION_GROUP_QUERY, UPDATE_SUBSCRIPTION_GROUP } from './queries'\nimport { SUBSCRIPTION_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionGroupForm from './OrganizationSubscriptionsGroupForm'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\n\nfunction OrganizationSubscriptionGroupEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const cardTitle = t('organization.subscription_groups.title_edit')\n  const {loading, error, data} = useQuery(GET_SUBSCRIPTION_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateSubscriptionGroup ] = useMutation(UPDATE_SUBSCRIPTION_GROUP)\n  \n  if (loading) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.subscription_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n\n  const initialData = data.organizationSubscriptionGroup;\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            description: initialData.description,\n          }}\n          validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateSubscriptionGroup({ variables: {\n              input: {\n                id: match.params.id,\n                name: values.name,\n                description: values.description,\n              }\n            }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('organization.subscription_groups.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationSubscriptionGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\n\n// class OrganizationSubscriptionGroupEdit extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization subscriptiongroup edit props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n//     const returnUrl = \"/organization/subscriptions/groups\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title=\"Organization\" />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n//               <Card>\n//                 <Card.Header>\n//                   <Card.Title>{t('organization.subscription_groups.title_edit')}</Card.Title>\n//                   {console.log(match.params.id)}\n//                 </Card.Header>\n//                 <Query query={GET_SUBSCRIPTION_GROUP_QUERY} variables={{ id }} >\n//                 {({ loading, error, data, refetch }) => {\n//                     // Loading\n//                     if (loading) return <p>{t('general.loading_with_dots')}</p>\n//                     // Error\n//                     if (error) {\n//                       console.log(error)\n//                       return <p>{t('general.error_sad_smiley')}</p>\n//                     }\n                    \n//                     const initialData = data.organizationSubscriptionGroup;\n//                     console.log('query data')\n//                     console.log(data)\n\n//                     return (\n                      \n//                       <Mutation mutation={UPDATE_SUBSCRIPTION_GROUP} onCompleted={() => history.push(returnUrl)}> \n//                       {(updateSubscriptionGroup, { data }) => (\n//                           <Formik\n//                               initialValues={{ \n//                                 name: initialData.name, \n//                                 description: initialData.description,\n//                               }}\n//                               validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n//                               onSubmit={(values, { setSubmitting }) => {\n//                                   console.log('submit values:')\n//                                   console.log(values)\n\n//                                   updateSubscriptionGroup({ variables: {\n//                                     input: {\n//                                       id: match.params.id,\n//                                       name: values.name,\n//                                       description: values.description,\n//                                     }\n//                                   }, refetchQueries: [\n//                                       {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n//                                   ]})\n//                                   .then(({ data }) => {\n//                                       console.log('got data', data)\n//                                       toast.success((t('organization.subscription_groups.toast_edit_success')), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error)\n//                                       setSubmitting(false)\n//                                     })\n//                               }}\n//                               >\n//                               {({ isSubmitting, errors, values }) => (\n//                                 <OrganizationSubscriptionGroupForm\n//                                   isSubmitting={isSubmitting}\n//                                   errors={errors}\n//                                   returnUrl={returnUrl}\n//                                 />\n//                               )}\n//                           </Formik>\n//                       )}\n//                       </Mutation>\n//                       )}}\n//                 </Query>\n//               </Card>\n//               </Grid.Col>\n//               <Grid.Col md={3}>\n//                 <HasPermissionWrapper permission=\"change\"\n//                                       resource=\"organizationsubscriptiongroup\">\n//                   <Button color=\"primary btn-block mb-6\"\n//                           onClick={() => history.push(returnUrl)}>\n//                     <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                   </Button>\n//                 </HasPermissionWrapper>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupEdit))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, ADD_CARD_TO_GROUP, DELETE_CARD_FROM_GROUP } from './queries'\n\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from '../../general/ContentCard'\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\nfunction OrganizationSubscriptionGroupEditSubscriptions({t, match, history}) {\n  const groupId = match.params.id\n  const returnUrl = \"/organization/subscriptions/groups\"\n  let cardTitle = t('organization.subscription_group_subscriptions.title_edit')\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, {\n    variables: { id: groupId }\n  })\n  const [ addCardToGroup ] = useMutation(ADD_CARD_TO_GROUP)\n  const [ deleteCardFromGroup ] = useMutation(DELETE_CARD_FROM_GROUP)\n\n  if (loading) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const subscriptions = data.organizationSubscriptions\n  const group = data.organizationSubscriptionGroup\n\n  let group_subscriptions = {}\n  if (group.organizationSubscriptions.edges) {\n    group.organizationSubscriptions.edges.map(({ node }) => (\n      group_subscriptions[node.id] = true\n    ))\n  }\n\n  console.log(\"group_subscriptions\")\n  console.log(group_subscriptions)\n\n  cardTitle = `${cardTitle} - ${group.name}`\n\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n      {(!subscriptions.edges) ? \"\" : \n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {subscriptions.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {(node.id in group_subscriptions) ? \n                      <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  {console.log((node.id in group_subscriptions))}\n                  {(!(node.id in group_subscriptions)) ?\n                    // Add\n                    <Table.Col className=\"text-right text-green\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('general.add_to_group')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked add\")\n                          let pass_id = node.id\n                          addCardToGroup({ variables: {\n                            input: {\n                              organizationSubscription: pass_id,\n                              organizationSubscriptionGroup: groupId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, variables: {\"id\": groupId, \"archived\": false }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('general.added_to_group'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                        {t('general.add_to_group')} \n                      </Button>\n                    </Table.Col>\n                    :\n                    // Delete\n                    <Table.Col className=\"text-right text-red\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('general.delete_from_group')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked delete\")\n                          console.log(node.id)\n                          let pass_id = node.id\n                          deleteCardFromGroup({ variables: {\n                            input: {\n                              organizationSubscription: pass_id,\n                              organizationSubscriptionGroup: groupId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, variables: {\"id\": groupId, \"archived\": false }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('general.deleted_from_group'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                        {t('general.delete_from_group')}\n                      </Button>\n                    </Table.Col>\n                    }\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      }\n    </Card>\n  </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupEditSubscriptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsPricesBase ({ t, history, match, children, showAdd=false, returnUrl=\"/organization/subscriptions\" }) {\n  const subscriptionId = match.params.subscription_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscriptionprice\">\n                  <ButtonAdd addUrl={`/organization/subscriptions/prices/add/${subscriptionId}`} className=\"ml-2\" />\n                </HasPermissionWrapper>\n              : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsPricesBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTION_PRICES_QUERY = gql`\n  query OrganizationSubscriptionPrices($after: String, $before: String, $organizationSubscription: ID!) {\n    organizationSubscriptionPrices(first: 15, before: $before, after: $after, organizationSubscription: $organizationSubscription) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n          }\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n        }\n      }\n    }\n    organizationSubscription(id: $organizationSubscription) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_SUBSCRIPTION_PRICE_QUERY = gql`\n  query OrganizationSubscriptionPrice($id: ID!, $after: String, $before: String) {\n    organizationSubscriptionPrice(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SUBSCRIPTION_PRICE = gql`\nmutation CreateOrganizationSubscriptionPrice($input: CreateOrganizationSubscriptionPriceInput!) {\n  createOrganizationSubscriptionPrice(input: $input) {\n    organizationSubscriptionPrice {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n  }\n}\n`\n\nexport const UPDATE_SUBSCRIPTION_PRICE = gql`\nmutation UpdateOrganizationSubscriptionPrice($input: UpdateOrganizationSubscriptionPriceInput!) {\n  updateOrganizationSubscriptionPrice(input: $input) {\n    organizationSubscriptionPrice {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n  }\n}\n`\n\nexport const DELETE_SUBSCRIPTION_PRICE = gql`\n  mutation DeleteOrganizationSubscriptionPrice($input: DeleteOrganizationSubscriptionPriceInput!) {\n    deleteOrganizationSubscriptionPrice(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_delete from \"../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonDelete({t, match, history, msgConfirm, msgDescription, msgSuccess, deleteFunction, deleteFunctionVariables}) {\n  return (\n    <button className=\"icon btn btn-link btn-sm\"\n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: <p>{msgConfirm}</p>,\n          msgDescription: msgDescription,\n          msgSuccess: msgSuccess,\n          deleteFunction: deleteFunction,\n          functionVariables: deleteFunctionVariables\n        })\n    }}>\n      <span className=\"text-red\">\n        <Icon prefix=\"fe\" name=\"trash-2\" />\n      </span>\n    </button> \n  )\n}\n\n\nexport default withTranslation()(withRouter(ButtonDelete))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase'\nimport { GET_SUBSCRIPTION_PRICES_QUERY, DELETE_SUBSCRIPTION_PRICE } from \"./queries\"\nimport { GET_SUBSCRIPTIONS_QUERY } from \"../queries\"\n\nimport ButtonDelete from '../../../ui/ButtonDelete'\n\n\nfunction OrganizationSubscriptionsPrices ({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const subscriptionId = match.params.subscription_id\n  let cardTitle = t('organization.subscription_prices.title')\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SUBSCRIPTION_PRICES_QUERY, {\n    variables: {\n      organizationSubscription: subscriptionId\n    }\n  })\n  const [deleteSubscriptionPrice] = useMutation(DELETE_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  const subscriptionPrices = data.organizationSubscriptionPrices\n  cardTitle = `${cardTitle} - ${data.organizationSubscription.name}`\n  \n\n  if (!subscriptionPrices.edges.length) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t('organization.subscription_prices.empty_list')}\n        </Card.Body>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={subscriptionPrices.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: subscriptionPrices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.organizationSubscriptionsPrices.edges\n              const pageInfo = fetchMoreResult.organizationSubscriptionsPrices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    organizationSubscriptionsPrices: {\n                      __typename: previousResult.organizationSubscriptionsPrices.__typename,\n                      edges: [ ...previousResult.organizationSubscriptionsPrices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {subscriptionPrices.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay} <br />\n                    <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/subscriptions/prices/edit/\" + subscriptionId + '/' + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <ButtonDelete \n                      msgConfirm={t('organization.subscription_prices.delete_confirm_msg')}\n                      msgDescription={<p>\n                        {node.priceDisplay} {node.financeTaxRate.name} <br />\n                        <span className=\"text-muted\">\n                          {node.dateStart} {(node.dateEnd) ? ' - ' + node.dateEnd : \"\"}\n                        </span>\n                      </p>}\n                      msgSuccess={t('organization.subscription_prices.deleted')}\n                      deleteFunction={deleteSubscriptionPrice}\n                      deleteFunctionVariables={{ variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: { organizationSubscription: subscriptionId }},\n                          {query: GET_SUBSCRIPTIONS_QUERY, variables: {archived: false}},\n                      ]}}\n                    />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsPrices))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_PRICE_SCHEMA = Yup.object().shape({\n    price: Yup.number()\n      .typeError(t('yup.type_error_number'))\n      .required(t('yup.field_required'))\n      .max(99999999999999999999, t('yup.max_decimal_number')),\n    financeTaxRate: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    // dateEnd: Yup.date(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonFormSubmit = ({ t, disabled, className=\"\" }) => (\n  <Button\n    type=\"submit\"\n    disabled={disabled}\n    className={`pull-right ${className}`}\n    color=\"primary\"\n  >\n      {t(\"general.submit\")}\n  </Button>\n)\n\nexport default withTranslation()(ButtonFormSubmit)\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\n\nimport {\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from \"../../../ui/ButtonFormCancel\" \nimport ButtonFormSubmit from \"../../../ui/ButtonFormSubmit\"\n\n\nconst OrganizationSubscriptionPriceForm = (\n  { t, history, inputData, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl }\n  ) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.price')}>\n            <Field type=\"text\" \n                  name=\"price\" \n                  className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.taxrate')}>\n            <Field component=\"select\" \n                    name=\"financeTaxRate\" \n                    className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n              {console.log(\"query data in subscription price add:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              selected={values.dateStart}\n              onChange={(date) => setFieldValue(\"dateStart\", date)}\n              onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.date_end')}>\n            <CSDatePicker \n              selected={values.dateEnd}\n              onChange={(date) => setFieldValue(\"dateEnd\", date)}\n              onBlur={() => setFieldTouched(\"dateEnd\", true)}\n            />\n            <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY, ADD_SUBSCRIPTION_PRICE, GET_INPUT_VALUES_QUERY } from './queries'\nimport { GET_SUBSCRIPTIONS_QUERY } from '../queries'\nimport { SUBSCRIPTION_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase';\nimport OrganizationSubscriptionPriceForm from './OrganizationSubscriptionPriceForm'\n\n\nfunction OrganizationSubscriptionPriceAdd({ t, history, match }) {\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = t('organization.subscription_prices.title_add')\n  const returnUrl = `/organization/subscriptions/prices/${subscriptionId}`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ addSubscriptionPrice ] = useMutation(ADD_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ price: \"\", dateStart: new Date() }}\n          validationSchema={SUBSCRIPTION_PRICE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              let dateEnd\n              if (values.dateEnd) {\n                dateEnd = dateToLocalISO(values.dateEnd)\n              } else {\n                dateEnd = values.dateEnd\n              }\n\n              addSubscriptionPrice({ variables: {\n                input: {\n                  organizationSubscription: match.params.subscription_id,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd\n                }\n              }, refetchQueries: [\n                  {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: {\"organizationSubscription\": match.params.subscription_id }},\n                  {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.subscription_prices.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <OrganizationSubscriptionPriceForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY, GET_SUBSCRIPTION_PRICE_QUERY, UPDATE_SUBSCRIPTION_PRICE } from './queries'\nimport { GET_SUBSCRIPTIONS_QUERY } from '../queries'\nimport { SUBSCRIPTION_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionPriceForm from './OrganizationSubscriptionPriceForm'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase';\n\n\nfunction OrganizationSubscriptionPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = t('organization.subscription_prices.title_edit')\n  const returnUrl = `/organization/subscriptions/prices/${subscriptionId}`\n\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_PRICE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateSubscriptionPrice ] = useMutation(UPDATE_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  const initialData = data.organizationSubscriptionPrice\n\n    // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            price: initialData.price, \n            financeTaxRate: initialData.financeTaxRate.id,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n          }}\n          validationSchema={SUBSCRIPTION_PRICE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let dateEnd\n              if (values.dateEnd) {\n                if (values.dateEnd instanceof Date) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              } else {\n                dateEnd = values.dateEnd\n              }\n\n              let dateStart\n              if (values.dateStart instanceof Date) {\n                dateStart = dateToLocalISO(values.dateStart)\n              } else {\n                // Input hasn't changed and DatePicket hasn't made a Date object out of it\n                dateStart = values.dateStart\n              }\n\n              updateSubscriptionPrice({ variables: {\n                input: {\n                  id: match.params.id,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  dateStart: dateStart,\n                  dateEnd: dateEnd,\n                }\n              }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: { organizationSubscription: subscriptionId }},\n                {query: GET_SUBSCRIPTIONS_QUERY, variables: { \"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.subscription_prices.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <OrganizationSubscriptionPriceForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </OrganizationSubscriptionPriceForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceEdit))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass RelationsHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"School home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"relations.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"relations.accounts.title\")}</h5>\n                    {t(\"relations.accounts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/relations/accounts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              {/* <HasPermissionWrapper permission=\"view\"\n                                    resource=\"business\">\n                <Grid.Col md={4} lg={4}>\n                  <Link to='/relations/suppliers')}>\n                    <StampCard header={<small>{t('relations.suppliers.title')}</small>} footer={t('')} color=\"blue\" icon=\"package\" />\n                  </Link>\n                </Grid.Col>\n              </HasPermissionWrapper> */}\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"business\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"relations.b2b.title\")}</h5>\n                      {t(\"relations.b2b.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/relations/b2b\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(RelationsHome))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Icon\n  } from \"tabler-react\"\n\n\nclass InputSearch extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Input search props:\")\n    console.log(props)\n    this.input = React.createRef()\n    let inputValue\n    const initialValue = localStorage.getItem(this.props.initialValueKey)\n    if (initialValue) {\n      inputValue = initialValue \n    } else {\n      inputValue = \"\"\n    }\n\n    this.state = {\n      inputValue: inputValue,\n      submitValue: \"\",\n      doneTypingInterval: 500\n    }\n  }\n  \n  componentDidMount() {\n    this.typingTimer = null\n    this.input.current.focus()\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.typingTimer)\n  }\n\n\n  onInputKeyUp() {\n    // Clear timeout\n    if (this.typingTimer) {\n      clearTimeout(this.typingTimer)\n    }\n    \n    this.typingTimer = setTimeout(() => {\n      // console.log(this.input.current.value)  \n      this.setState({submitValue: this.input.current.value})\n      // Trigger onChange after typing timer timeout\n      this.props.onChange(this.state.submitValue)\n    }, this.state.doneTypingInterval)\n  }\n\n\n  onInputChange(event) {\n    this.setState({inputValue: event.target.value})\n  }\n\n\n  render() {\n    // const t = this.props.t\n    const placeholder = this.props.placeholder\n\n    return(\n        <div className=\"row row gutters-xs\">\n          <div className=\"col\">\n            <div className=\"input-icon\">\n              <span className=\"input-icon-addon\">\n                <Icon name=\"search\" />\n              </span>\n              <input \n                ref={this.input}\n                className={`form-control ${this.props.className}`}\n                type=\"text\" \n                placeholder={placeholder} \n                value={this.state.inputValue}\n                onKeyUp={this.onInputKeyUp.bind(this)}\n                onChange={this.onInputChange.bind(this)}\n              />\n            </div>\n          </div>\n          {(this.state.inputValue) ?\n            <div className=\"col col-auto\">\n              <Button\n                color=\"secondary\"\n                // icon=\"x\"\n                disabled={!(this.state.inputValue)}\n                onClick={() => {\n                  this.setState({inputValue: \"\", submitValue: \"\"}, () => {\n                    // setState callback, this makes sure the onChange function is calles with new values\n                    console.log(this.state)\n                    this.props.onChange(this.state.submitValue) \n                  })\n                }}\n              >\n                {this.props.t(\"general.clear_search\")}\n              </Button>\n            </div>\n          : \"\" }\n        </div>\n    )\n  }\n}\n\nInputSearch.defaultProps = {\n  onChange: f=>f,\n  onClear: f=>f,\n}\n  \nexport default withTranslation()(InputSearch)","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let isActive = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE)\n  if (isActive === null) {\n    isActive = true\n  }\n\n  let queryVars = {\n    isActive: (isActive === \"true\") ? true : false,\n    customer: undefined,\n    instructor: undefined,\n    employee: undefined\n  }\n\n  let search = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_SEARCH)\n  queryVars.searchName = search\n\n  let type_filter = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_FILTER_TYPE)\n  switch (type_filter) {\n    case \"customer\":\n      queryVars.customer = true\n      break\n    case \"instructor\":\n      queryVars.instructor = true\n      break\n    case \"employee\":\n      queryVars.employee = true\n      break\n    default:\n      break\n  }\n\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Form,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\n\n\nimport { TOKEN_REFRESH } from '../../../queries/system/auth'\nimport { refreshTokenAndOpenExportLinkInNewTab } from '../../../tools/refresh_token_and_open_export_link';\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport InputSearch from \"../../general/InputSearch\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction RelationsAccountsBase({t, history, children, refetch}) {\n  const exportUrl = `/d/export/relations/accounts/active`\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  \n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"relations.title\")}>\n            <div className=\"page-options d-flex\">\n              <InputSearch \n                initialValueKey={CSLS.RELATIONS_ACCOUNTS_SEARCH}\n                placeholder=\"Search...\"\n                onChange={(value) => {\n                  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_SEARCH, value)\n                  refetch(get_list_query_variables())\n                }}\n              />\n              <Form.Select\n                className=\"w-auto ml-2\"\n                onChange={(event) => {\n                  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_FILTER_TYPE, event.target.value)\n                  console.log(refetch(get_list_query_variables()))\n                }}\n              >\n                <option value=\"\">{t(\"general.all_accounts\")}</option>\n                <option value=\"customer\">{t(\"general.customers\")}</option>\n                <option value=\"instructor\">{t(\"general.instructors\")}</option>\n                <option value=\"employee\">{t(\"general.employees\")}</option>\n              </Form.Select>\n              {/* Export Active Accounts */}\n              <Button\n                color=\"secondary\"\n                icon=\"download-cloud\"\n                className=\"ml-2\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                {t('relations.btn_export_active_accounts')} \n              </Button>\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"account\">\n                <Button color=\"primary ml-2\"\n                        onClick={() => history.push(\"/relations/accounts/add\")}>\n                  <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n                </Button>\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>        \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\nquery Accounts(\n  $after: String, \n  $before: String, \n  $isActive: Boolean!, \n  $searchName: String,\n  $customer: Boolean,\n  $instructor: Boolean,\n  $employee: Boolean\n  \n) {\n  accounts(\n    first: 15, \n    before: $before, \n    after: $after, \n    isActive: $isActive, \n    fullName_Icontains: $searchName,\n    customer: $customer,\n    instructor: $instructor,\n    employee: $employee\n  ) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        customer\n        instructor\n        employee\n        firstName\n        lastName\n        fullName\n        email\n        phone\n        mobile\n        isActive\n        urlImageThumbnailSmall\n        subscriptionsLatest {\n          organizationSubscription {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n        }\n        classpassesLatest {\n          id\n          organizationClasspass {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemaining\n          classesRemainingDisplay\n          isExpired\n        }\n      }\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_QUERY = gql`\n  query Account($id: ID!) {\n    account(id:$id) {\n      id\n      customer\n      instructor\n      employee\n      firstName\n      lastName\n      email\n      dateOfBirth\n      gender\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      isActive\n      keyNumber\n      urlImageThumbnailSmall\n      organizationDiscovery {\n        id\n      }\n      organizationLanguage {\n        id\n      }\n    }\n    organizationDiscoveries(first: 100){\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationLanguages(first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_ACCOUNT = gql`\n  mutation CreateAccount($input:CreateAccountInput!) {\n    createAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT = gql`\n  mutation UpdateAccount($input:UpdateAccountInput!) {\n    updateAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_ACTIVE = gql`\n  mutation UpdateAccountActive($input: UpdateAccountActiveInput!) {\n    updateAccountActive(input: $input) {\n      account {\n        id\n        isActive\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT = gql`\n  mutation DeleteAccount($input: DeleteAccountInput!) {\n    deleteAccount(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Avatar,\n  Badge,\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Container,\n  List,\n  SocialNetworksList,\n  Table,\n  Tooltip\n} from \"tabler-react\";\n\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport RelationsAccountsBase from \"./RelationsAccountsBase\"\nimport { GET_ACCOUNTS_QUERY, UPDATE_ACCOUNT_ACTIVE, DELETE_ACCOUNT } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n// Set some initial value for isActive, if not found\nif (!localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE)) {\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, true) \n} \n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          {msgConfirm}\n          {msgDescription}\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deleteFunction(functionVariables)\n                .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success(\n                    msgSuccess, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error);\n                })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n        </div>\n      )\n    }\n  })\n}\n\n\nfunction RelationsAccounts({t, history}) {\n  const [isLoadingMore, setIsLoadingMore] = useState(false)\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const {loading, error, data, fetchMore, refetch} = useQuery(GET_ACCOUNTS_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [updateAccountActive] = useMutation(UPDATE_ACCOUNT_ACTIVE)\n  const [deleteAccount] = useMutation(DELETE_ACCOUNT)\n\n  if (loading || (data && !data.accounts)) return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.accounts.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )\n  \n  if (error) return (\n    <RelationsAccountsBase refetch={refetch}>\n      <Container>\n        <ContentCard cardTitle={t('relations.accounts.title')}>\n          <p>{t('relations.accounts.error_loading')}</p>\n        </ContentCard>\n      </Container>\n    </RelationsAccountsBase>\n  )\n\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.active')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"false\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.deleted')}\n    </Button>\n  </Card.Options>\n\n  let accounts = data.accounts\n\n  // Empty list\n  if (!accounts.edges.length) { return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.accounts.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") ? t('relations.accounts.empty_list') : t(\"relations.accounts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )}\n\n  // Data\n  return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard \n        cardTitle={t('relations.accounts.title')}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={data.accounts.pageInfo}\n        isLoadingMore={isLoadingMore}\n        onLoadMore={async () => {\n          setIsLoadingMore(true)\n          await fetchMore({\n            variables: {\n              after: data.accounts.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accounts.edges\n              const pageInfo = fetchMoreResult.accounts.pageInfo \n              return newEdges.length\n                ? {\n                    // Put the new accounts at the end of the list and update `pageInfo`\n                  accounts: {\n                    __typename: previousResult.accounts.__typename,\n                    edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n          })\n          setIsLoadingMore(false)\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.products')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.contact')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.id}/profile`}>\n                      {(node.urlImageThumbnailSmall) ? \n                        <Avatar size={\"lg\"} imageURL={node.urlImageThumbnailSmall} /> :\n                        <Avatar size={\"lg\"} icon=\"user\" />\n                      }\n                    </Link>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <span className=\"bold\">{node.fullName}</span>\n                    <div className=\"text-muted\">\n                      <a href={`mailto:${node.email}`}>{node.email}</a>\n                    </div>\n                    {(node.customer) ? <span>\n                        <Badge color=\"primary\" className=\"mr-1\">{t(\"general.customer\")}</Badge>\n                      </span> : null}\n                    {(node.instructor) ? <span>\n                        <Badge color=\"info\" className=\"mr-1\">{t(\"general.instructor\")}</Badge>\n                      </span> : null}\n                    {(node.employee) ? <span>\n                        <Badge color=\"secondary\">{t(\"general.employee\")}</Badge>\n                      </span> : null}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.subscriptionsLatest) ? \n                      node.subscriptionsLatest.map((subscription) => (\n                        <div key={v4()}>\n                          <small>\n                          <Icon name=\"edit\" /> {' '}\n                          { subscription.organizationSubscription.name } <br />\n                          <div className=\"text-muted \">\n                            <small>\n                              { moment(subscription.dateStart).format(dateFormat) } \n                              {(subscription.dateEnd) ? \n                                <span> - {moment(subscription.dateEnd).format(dateFormat)}</span>  \n                                : \"\"\n                              }\n                            </small>\n                          </div>\n                          </small>\n                        </div>\n                      )) \n                      : \"\"\n                    }\n                    {(node.classpassesLatest) ? \n                      node.classpassesLatest.map((classpass) => (\n                        <div key={v4()}>\n                          <small>\n                          <Icon name=\"credit-card\" /> {' '}\n                          { classpass.organizationClasspass.name } <br />\n                          <div className=\"text-muted \">\n                            <small>\n                              { moment(classpass.dateStart).format(dateFormat) } {\" - \"}\n                              { moment(classpass.dateEnd).format(dateFormat)} { \" | \" }  \n                              { t(\"general.classes_remaining\") }: { classpass.classesRemainingDisplay }\n                            </small>\n                          </div>\n                          </small>\n                        </div>\n                      )) \n                      : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col>\n                    <SocialNetworksList className=\"mb-0 mt-2\">\n                      {\n                        (node.phone) ? \n                          <List.Item inline>\n                            <Tooltip content={node.phone} placement=\"top\">\n                              <span>\n                                <Icon prefix=\"fe\" name=\"phone\" />\n                              </span>\n                            </Tooltip>\n                          </List.Item>\n                        // No phone number found\n                        : \"\"\n                      }\n                      {\n                        (node.mobile) ?\n                          <List.Item inline>\n                            <Tooltip content={node.mobile} placement=\"top\">\n                              <span>\n                                <Icon prefix=\"fe\" name=\"smartphone\" />\n                              </span>\n                            </Tooltip>\n                          </List.Item> \n                          // No mobile number found\n                          : \"\"\n                      }\n\n                      <List.Item inline>\n                        <Tooltip content={node.email} placement=\"top\">\n                          <a href={\"mailto:\" + node.email}>\n                            <Icon prefix=\"fe\" name=\"mail\" />\n                          </a>\n                        </Tooltip>\n                      </List.Item>\n                    </SocialNetworksList>\n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    {(node.customer) ? <span>\n                        <Badge color=\"primary\" className=\"mb-1\">{t(\"general.customer\")}</Badge> <br />\n                      </span> : null}\n                    {(node.instructor) ? <span>\n                        <Badge color=\"info\" className=\"mb-1\">{t(\"general.instructor\")}</Badge> <br />\n                      </span> : null}\n                    {(node.employee) ? <span>\n                        <Badge color=\"secondary\" className=\"mb-1\">{t(\"general.employee\")}</Badge> <br />\n                      </span> : null}\n                  </Table.Col> */}\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(!node.isActive) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/relations/accounts/${node.id}/profile`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.deactivate')} \n                      href=\"\"\n                      onClick={() => {\n                        let id = node.id\n                        let isActive \n                        if (localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") {\n                          isActive = true\n                        } else {\n                          isActive = false\n                        }\n\n                        updateAccountActive({ variables: {\n                          input: {\n                            id,\n                            isActive: !isActive // invert, as we need the opposite from the list currently displayed\n                          }\n                    }, refetchQueries: [\n                        {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (isActive) ? t('relations.accounts.deactivated'): t('relations.accounts.restored'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      {\n                        (node.isActive) ?\n                          <Icon prefix=\"fe\" name=\"trash-2\" /> :\n                          t(\"general.restore\")\n                      }\n                    </button>\n                  {\n                    (node.isActive) ? '' :\n                        <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"relations.accounts.delete_confirm_msg\"),\n                              msgDescription: <p>{node.first_name} {node.last_name}</p>,\n                              msgSuccess: t('relations.accounts.deleted'),\n                              deleteFunction: deleteAccount,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                              ]}\n                            })\n                        }}>\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                  }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccounts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SCHEMA = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.first_name')}>\n                <Field type=\"text\" \n                        name=\"firstName\" \n                        className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.last_name')}>\n                <Field type=\"text\" \n                        name=\"lastName\" \n                        className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Form.Group label={t('general.email')}>\n            <Field type=\"text\" \n                    name=\"email\" \n                    className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">{t('general.cancel')}</Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, ADD_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack';\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountForm from \"./RelationsAccountForm\"\n\nconst returnUrl = \"/relations/accounts\"\n\n\nfunction RelationsAccountAdd({t, history}) {\n  const [addAccount] = useMutation(ADD_ACCOUNT)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('relations.title')} >\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('relations.accounts.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ name: '', code: '' }}\n                    validationSchema={ACCOUNT_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        addAccount({ variables: {\n                          input: {\n                            firstName: values.firstName,\n                            lastName: values.lastName,\n                            email: values.email\n                          }\n                        }, refetchQueries: [\n                            {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            const accountId = data.createAccount.account.id\n                            history.push(`/relations/accounts/${accountId}/profile`)\n                            toast.success((t('relations.accounts.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors }) => (\n                        <RelationsAccountForm\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          returnUrl={returnUrl}\n                        />\n                    )}\n                </Formik>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountAdd))","import { t } from 'i18next'\n\nconst ISO_COUNTRY_CODES = [{\"Name\":t(\"countries.Afghanistan\"),\"Code\":\"AF\"},{\"Name\":t(\"countries.Åland_Islands\"),\"Code\":\"AX\"},{\"Name\":t(\"countries.Albania\"),\"Code\":\"AL\"},{\"Name\":t(\"countries.Algeria\"),\"Code\":\"DZ\"},{\"Name\":t(\"countries.American_Samoa\"),\"Code\":\"AS\"},{\"Name\":t(\"countries.Andorra\"),\"Code\":\"AD\"},{\"Name\":t(\"countries.Angola\"),\"Code\":\"AO\"},{\"Name\":t(\"countries.Anguilla\"),\"Code\":\"AI\"},{\"Name\":t(\"countries.Antarctica\"),\"Code\":\"AQ\"},{\"Name\":t(\"countries.Antigua_and_Barbuda\"),\"Code\":\"AG\"},{\"Name\":t(\"countries.Argentina\"),\"Code\":\"AR\"},{\"Name\":t(\"countries.Armenia\"),\"Code\":\"AM\"},{\"Name\":t(\"countries.Aruba\"),\"Code\":\"AW\"},{\"Name\":t(\"countries.Australia\"),\"Code\":\"AU\"},{\"Name\":t(\"countries.Austria\"),\"Code\":\"AT\"},{\"Name\":t(\"countries.Azerbaijan\"),\"Code\":\"AZ\"},{\"Name\":t(\"countries.Bahamas\"),\"Code\":\"BS\"},{\"Name\":t(\"countries.Bahrain\"),\"Code\":\"BH\"},{\"Name\":t(\"countries.Bangladesh\"),\"Code\":\"BD\"},{\"Name\":t(\"countries.Barbados\"),\"Code\":\"BB\"},{\"Name\":t(\"countries.Belarus\"),\"Code\":\"BY\"},{\"Name\":t(\"countries.Belgium\"),\"Code\":\"BE\"},{\"Name\":t(\"countries.Belize\"),\"Code\":\"BZ\"},{\"Name\":t(\"countries.Benin\"),\"Code\":\"BJ\"},{\"Name\":t(\"countries.Bermuda\"),\"Code\":\"BM\"},{\"Name\":t(\"countries.Bhutan\"),\"Code\":\"BT\"},{\"Name\":t(\"countries.Bolivia,_Plurinational_State_of\"),\"Code\":\"BO\"},{\"Name\":t(\"countries.Bonaire,_Sint_Eustatius_and_Saba\"),\"Code\":\"BQ\"},{\"Name\":t(\"countries.Bosnia_and_Herzegovina\"),\"Code\":\"BA\"},{\"Name\":t(\"countries.Botswana\"),\"Code\":\"BW\"},{\"Name\":t(\"countries.Bouvet_Island\"),\"Code\":\"BV\"},{\"Name\":t(\"countries.Brazil\"),\"Code\":\"BR\"},{\"Name\":t(\"countries.British_Indian_Ocean_Territory\"),\"Code\":\"IO\"},{\"Name\":t(\"countries.Brunei_Darussalam\"),\"Code\":\"BN\"},{\"Name\":t(\"countries.Bulgaria\"),\"Code\":\"BG\"},{\"Name\":t(\"countries.Burkina_Faso\"),\"Code\":\"BF\"},{\"Name\":t(\"countries.Burundi\"),\"Code\":\"BI\"},{\"Name\":t(\"countries.Cambodia\"),\"Code\":\"KH\"},{\"Name\":t(\"countries.Cameroon\"),\"Code\":\"CM\"},{\"Name\":t(\"countries.Canada\"),\"Code\":\"CA\"},{\"Name\":t(\"countries.Cape_Verde\"),\"Code\":\"CV\"},{\"Name\":t(\"countries.Cayman_Islands\"),\"Code\":\"KY\"},{\"Name\":t(\"countries.Central_African_Republic\"),\"Code\":\"CF\"},{\"Name\":t(\"countries.Chad\"),\"Code\":\"TD\"},{\"Name\":t(\"countries.Chile\"),\"Code\":\"CL\"},{\"Name\":t(\"countries.China\"),\"Code\":\"CN\"},{\"Name\":t(\"countries.Christmas_Island\"),\"Code\":\"CX\"},{\"Name\":t(\"countries.Cocos_(Keeling)_Islands\"),\"Code\":\"CC\"},{\"Name\":t(\"countries.Colombia\"),\"Code\":\"CO\"},{\"Name\":t(\"countries.Comoros\"),\"Code\":\"KM\"},{\"Name\":t(\"countries.Congo\"),\"Code\":\"CG\"},{\"Name\":t(\"countries.Congo,_the_Democratic_Republic_of_the\"),\"Code\":\"CD\"},{\"Name\":t(\"countries.Cook_Islands\"),\"Code\":\"CK\"},{\"Name\":t(\"countries.Costa_Rica\"),\"Code\":\"CR\"},{\"Name\":t(\"countries.Côte_d'Ivoire\"),\"Code\":\"CI\"},{\"Name\":t(\"countries.Croatia\"),\"Code\":\"HR\"},{\"Name\":t(\"countries.Cuba\"),\"Code\":\"CU\"},{\"Name\":t(\"countries.Curaçao\"),\"Code\":\"CW\"},{\"Name\":t(\"countries.Cyprus\"),\"Code\":\"CY\"},{\"Name\":t(\"countries.Czech_Republic\"),\"Code\":\"CZ\"},{\"Name\":t(\"countries.Denmark\"),\"Code\":\"DK\"},{\"Name\":t(\"countries.Djibouti\"),\"Code\":\"DJ\"},{\"Name\":t(\"countries.Dominica\"),\"Code\":\"DM\"},{\"Name\":t(\"countries.Dominican_Republic\"),\"Code\":\"DO\"},{\"Name\":t(\"countries.Ecuador\"),\"Code\":\"EC\"},{\"Name\":t(\"countries.Egypt\"),\"Code\":\"EG\"},{\"Name\":t(\"countries.El_Salvador\"),\"Code\":\"SV\"},{\"Name\":t(\"countries.Equatorial_Guinea\"),\"Code\":\"GQ\"},{\"Name\":t(\"countries.Eritrea\"),\"Code\":\"ER\"},{\"Name\":t(\"countries.Estonia\"),\"Code\":\"EE\"},{\"Name\":t(\"countries.Ethiopia\"),\"Code\":\"ET\"},{\"Name\":t(\"countries.Falkland_Islands_(Malvinas)\"),\"Code\":\"FK\"},{\"Name\":t(\"countries.Faroe_Islands\"),\"Code\":\"FO\"},{\"Name\":t(\"countries.Fiji\"),\"Code\":\"FJ\"},{\"Name\":t(\"countries.Finland\"),\"Code\":\"FI\"},{\"Name\":t(\"countries.France\"),\"Code\":\"FR\"},{\"Name\":t(\"countries.French_Guiana\"),\"Code\":\"GF\"},{\"Name\":t(\"countries.French_Polynesia\"),\"Code\":\"PF\"},{\"Name\":t(\"countries.French_Southern_Territories\"),\"Code\":\"TF\"},{\"Name\":t(\"countries.Gabon\"),\"Code\":\"GA\"},{\"Name\":t(\"countries.Gambia\"),\"Code\":\"GM\"},{\"Name\":t(\"countries.Georgia\"),\"Code\":\"GE\"},{\"Name\":t(\"countries.Germany\"),\"Code\":\"DE\"},{\"Name\":t(\"countries.Ghana\"),\"Code\":\"GH\"},{\"Name\":t(\"countries.Gibraltar\"),\"Code\":\"GI\"},{\"Name\":t(\"countries.Greece\"),\"Code\":\"GR\"},{\"Name\":t(\"countries.Greenland\"),\"Code\":\"GL\"},{\"Name\":t(\"countries.Grenada\"),\"Code\":\"GD\"},{\"Name\":t(\"countries.Guadeloupe\"),\"Code\":\"GP\"},{\"Name\":t(\"countries.Guam\"),\"Code\":\"GU\"},{\"Name\":t(\"countries.Guatemala\"),\"Code\":\"GT\"},{\"Name\":t(\"countries.Guernsey\"),\"Code\":\"GG\"},{\"Name\":t(\"countries.Guinea\"),\"Code\":\"GN\"},{\"Name\":t(\"countries.Guinea-Bissau\"),\"Code\":\"GW\"},{\"Name\":t(\"countries.Guyana\"),\"Code\":\"GY\"},{\"Name\":t(\"countries.Haiti\"),\"Code\":\"HT\"},{\"Name\":t(\"countries.Heard_Island_and_McDonald_Islands\"),\"Code\":\"HM\"},{\"Name\":t(\"countries.Holy_See_(Vatican_City_State)\"),\"Code\":\"VA\"},{\"Name\":t(\"countries.Honduras\"),\"Code\":\"HN\"},{\"Name\":t(\"countries.Hong_Kong\"),\"Code\":\"HK\"},{\"Name\":t(\"countries.Hungary\"),\"Code\":\"HU\"},{\"Name\":t(\"countries.Iceland\"),\"Code\":\"IS\"},{\"Name\":t(\"countries.India\"),\"Code\":\"IN\"},{\"Name\":t(\"countries.Indonesia\"),\"Code\":\"ID\"},{\"Name\":t(\"countries.Iran,_Islamic_Republic_of\"),\"Code\":\"IR\"},{\"Name\":t(\"countries.Iraq\"),\"Code\":\"IQ\"},{\"Name\":t(\"countries.Ireland\"),\"Code\":\"IE\"},{\"Name\":t(\"countries.Isle_of_Man\"),\"Code\":\"IM\"},{\"Name\":t(\"countries.Israel\"),\"Code\":\"IL\"},{\"Name\":t(\"countries.Italy\"),\"Code\":\"IT\"},{\"Name\":t(\"countries.Jamaica\"),\"Code\":\"JM\"},{\"Name\":t(\"countries.Japan\"),\"Code\":\"JP\"},{\"Name\":t(\"countries.Jersey\"),\"Code\":\"JE\"},{\"Name\":t(\"countries.Jordan\"),\"Code\":\"JO\"},{\"Name\":t(\"countries.Kazakhstan\"),\"Code\":\"KZ\"},{\"Name\":t(\"countries.Kenya\"),\"Code\":\"KE\"},{\"Name\":t(\"countries.Kiribati\"),\"Code\":\"KI\"},{\"Name\":t(\"countries.Korea,_Democratic_People's_Republic_of\"),\"Code\":\"KP\"},{\"Name\":t(\"countries.Korea,_Republic_of\"),\"Code\":\"KR\"},{\"Name\":t(\"countries.Kuwait\"),\"Code\":\"KW\"},{\"Name\":t(\"countries.Kyrgyzstan\"),\"Code\":\"KG\"},{\"Name\":t(\"countries.Lao_People's_Democratic_Republic\"),\"Code\":\"LA\"},{\"Name\":t(\"countries.Latvia\"),\"Code\":\"LV\"},{\"Name\":t(\"countries.Lebanon\"),\"Code\":\"LB\"},{\"Name\":t(\"countries.Lesotho\"),\"Code\":\"LS\"},{\"Name\":t(\"countries.Liberia\"),\"Code\":\"LR\"},{\"Name\":t(\"countries.Libya\"),\"Code\":\"LY\"},{\"Name\":t(\"countries.Liechtenstein\"),\"Code\":\"LI\"},{\"Name\":t(\"countries.Lithuania\"),\"Code\":\"LT\"},{\"Name\":t(\"countries.Luxembourg\"),\"Code\":\"LU\"},{\"Name\":t(\"countries.Macao\"),\"Code\":\"MO\"},{\"Name\":t(\"countries.Macedonia,_the_Former_Yugoslav_Republic_of\"),\"Code\":\"MK\"},{\"Name\":t(\"countries.Madagascar\"),\"Code\":\"MG\"},{\"Name\":t(\"countries.Malawi\"),\"Code\":\"MW\"},{\"Name\":t(\"countries.Malaysia\"),\"Code\":\"MY\"},{\"Name\":t(\"countries.Maldives\"),\"Code\":\"MV\"},{\"Name\":t(\"countries.Mali\"),\"Code\":\"ML\"},{\"Name\":t(\"countries.Malta\"),\"Code\":\"MT\"},{\"Name\":t(\"countries.Marshall_Islands\"),\"Code\":\"MH\"},{\"Name\":t(\"countries.Martinique\"),\"Code\":\"MQ\"},{\"Name\":t(\"countries.Mauritania\"),\"Code\":\"MR\"},{\"Name\":t(\"countries.Mauritius\"),\"Code\":\"MU\"},{\"Name\":t(\"countries.Mayotte\"),\"Code\":\"YT\"},{\"Name\":t(\"countries.Mexico\"),\"Code\":\"MX\"},{\"Name\":t(\"countries.Micronesia,_Federated_States_of\"),\"Code\":\"FM\"},{\"Name\":t(\"countries.Moldova,_Republic_of\"),\"Code\":\"MD\"},{\"Name\":t(\"countries.Monaco\"),\"Code\":\"MC\"},{\"Name\":t(\"countries.Mongolia\"),\"Code\":\"MN\"},{\"Name\":t(\"countries.Montenegro\"),\"Code\":\"ME\"},{\"Name\":t(\"countries.Montserrat\"),\"Code\":\"MS\"},{\"Name\":t(\"countries.Morocco\"),\"Code\":\"MA\"},{\"Name\":t(\"countries.Mozambique\"),\"Code\":\"MZ\"},{\"Name\":t(\"countries.Myanmar\"),\"Code\":\"MM\"},{\"Name\":t(\"countries.Namibia\"),\"Code\":\"NA\"},{\"Name\":t(\"countries.Nauru\"),\"Code\":\"NR\"},{\"Name\":t(\"countries.Nepal\"),\"Code\":\"NP\"},{\"Name\":t(\"countries.Netherlands\"),\"Code\":\"NL\"},{\"Name\":t(\"countries.New_Caledonia\"),\"Code\":\"NC\"},{\"Name\":t(\"countries.New_Zealand\"),\"Code\":\"NZ\"},{\"Name\":t(\"countries.Nicaragua\"),\"Code\":\"NI\"},{\"Name\":t(\"countries.Niger\"),\"Code\":\"NE\"},{\"Name\":t(\"countries.Nigeria\"),\"Code\":\"NG\"},{\"Name\":t(\"countries.Niue\"),\"Code\":\"NU\"},{\"Name\":t(\"countries.Norfolk_Island\"),\"Code\":\"NF\"},{\"Name\":t(\"countries.Northern_Mariana_Islands\"),\"Code\":\"MP\"},{\"Name\":t(\"countries.Norway\"),\"Code\":\"NO\"},{\"Name\":t(\"countries.Oman\"),\"Code\":\"OM\"},{\"Name\":t(\"countries.Pakistan\"),\"Code\":\"PK\"},{\"Name\":t(\"countries.Palau\"),\"Code\":\"PW\"},{\"Name\":t(\"countries.Palestine,_State_of\"),\"Code\":\"PS\"},{\"Name\":t(\"countries.Panama\"),\"Code\":\"PA\"},{\"Name\":t(\"countries.Papua_New_Guinea\"),\"Code\":\"PG\"},{\"Name\":t(\"countries.Paraguay\"),\"Code\":\"PY\"},{\"Name\":t(\"countries.Peru\"),\"Code\":\"PE\"},{\"Name\":t(\"countries.Philippines\"),\"Code\":\"PH\"},{\"Name\":t(\"countries.Pitcairn\"),\"Code\":\"PN\"},{\"Name\":t(\"countries.Poland\"),\"Code\":\"PL\"},{\"Name\":t(\"countries.Portugal\"),\"Code\":\"PT\"},{\"Name\":t(\"countries.Puerto_Rico\"),\"Code\":\"PR\"},{\"Name\":t(\"countries.Qatar\"),\"Code\":\"QA\"},{\"Name\":t(\"countries.Réunion\"),\"Code\":\"RE\"},{\"Name\":t(\"countries.Romania\"),\"Code\":\"RO\"},{\"Name\":t(\"countries.Russian_Federation\"),\"Code\":\"RU\"},{\"Name\":t(\"countries.Rwanda\"),\"Code\":\"RW\"},{\"Name\":t(\"countries.Saint_Barthélemy\"),\"Code\":\"BL\"},{\"Name\":t(\"countries.Saint_Helena,_Ascension_and_Tristan_da_Cunha\"),\"Code\":\"SH\"},{\"Name\":t(\"countries.Saint_Kitts_and_Nevis\"),\"Code\":\"KN\"},{\"Name\":t(\"countries.Saint_Lucia\"),\"Code\":\"LC\"},{\"Name\":t(\"countries.Saint_Martin_(French_part)\"),\"Code\":\"MF\"},{\"Name\":t(\"countries.Saint_Pierre_and_Miquelon\"),\"Code\":\"PM\"},{\"Name\":t(\"countries.Saint_Vincent_and_the_Grenadines\"),\"Code\":\"VC\"},{\"Name\":t(\"countries.Samoa\"),\"Code\":\"WS\"},{\"Name\":t(\"countries.San_Marino\"),\"Code\":\"SM\"},{\"Name\":t(\"countries.Sao_Tome_and_Principe\"),\"Code\":\"ST\"},{\"Name\":t(\"countries.Saudi_Arabia\"),\"Code\":\"SA\"},{\"Name\":t(\"countries.Senegal\"),\"Code\":\"SN\"},{\"Name\":t(\"countries.Serbia\"),\"Code\":\"RS\"},{\"Name\":t(\"countries.Seychelles\"),\"Code\":\"SC\"},{\"Name\":t(\"countries.Sierra_Leone\"),\"Code\":\"SL\"},{\"Name\":t(\"countries.Singapore\"),\"Code\":\"SG\"},{\"Name\":t(\"countries.Sint_Maarten_(Dutch_part)\"),\"Code\":\"SX\"},{\"Name\":t(\"countries.Slovakia\"),\"Code\":\"SK\"},{\"Name\":t(\"countries.Slovenia\"),\"Code\":\"SI\"},{\"Name\":t(\"countries.Solomon_Islands\"),\"Code\":\"SB\"},{\"Name\":t(\"countries.Somalia\"),\"Code\":\"SO\"},{\"Name\":t(\"countries.South_Africa\"),\"Code\":\"ZA\"},{\"Name\":t(\"countries.South_Georgia_and_the_South_Sandwich_Islands\"),\"Code\":\"GS\"},{\"Name\":t(\"countries.South_Sudan\"),\"Code\":\"SS\"},{\"Name\":t(\"countries.Spain\"),\"Code\":\"ES\"},{\"Name\":t(\"countries.Sri_Lanka\"),\"Code\":\"LK\"},{\"Name\":t(\"countries.Sudan\"),\"Code\":\"SD\"},{\"Name\":t(\"countries.Suriname\"),\"Code\":\"SR\"},{\"Name\":t(\"countries.Svalbard_and_Jan_Mayen\"),\"Code\":\"SJ\"},{\"Name\":t(\"countries.Swaziland\"),\"Code\":\"SZ\"},{\"Name\":t(\"countries.Sweden\"),\"Code\":\"SE\"},{\"Name\":t(\"countries.Switzerland\"),\"Code\":\"CH\"},{\"Name\":t(\"countries.Syrian_Arab_Republic\"),\"Code\":\"SY\"},{\"Name\":t(\"countries.Taiwan,_Province_of_China\"),\"Code\":\"TW\"},{\"Name\":t(\"countries.Tajikistan\"),\"Code\":\"TJ\"},{\"Name\":t(\"countries.Tanzania,_United_Republic_of\"),\"Code\":\"TZ\"},{\"Name\":t(\"countries.Thailand\"),\"Code\":\"TH\"},{\"Name\":t(\"countries.Timor-Leste\"),\"Code\":\"TL\"},{\"Name\":t(\"countries.Togo\"),\"Code\":\"TG\"},{\"Name\":t(\"countries.Tokelau\"),\"Code\":\"TK\"},{\"Name\":t(\"countries.Tonga\"),\"Code\":\"TO\"},{\"Name\":t(\"countries.Trinidad_and_Tobago\"),\"Code\":\"TT\"},{\"Name\":t(\"countries.Tunisia\"),\"Code\":\"TN\"},{\"Name\":t(\"countries.Turkey\"),\"Code\":\"TR\"},{\"Name\":t(\"countries.Turkmenistan\"),\"Code\":\"TM\"},{\"Name\":t(\"countries.Turks_and_Caicos_Islands\"),\"Code\":\"TC\"},{\"Name\":t(\"countries.Tuvalu\"),\"Code\":\"TV\"},{\"Name\":t(\"countries.Uganda\"),\"Code\":\"UG\"},{\"Name\":t(\"countries.Ukraine\"),\"Code\":\"UA\"},{\"Name\":t(\"countries.United_Arab_Emirates\"),\"Code\":\"AE\"},{\"Name\":t(\"countries.United_Kingdom\"),\"Code\":\"GB\"},{\"Name\":t(\"countries.United_States\"),\"Code\":\"US\"},{\"Name\":t(\"countries.United_States_Minor_Outlying_Islands\"),\"Code\":\"UM\"},{\"Name\":t(\"countries.Uruguay\"),\"Code\":\"UY\"},{\"Name\":t(\"countries.Uzbekistan\"),\"Code\":\"UZ\"},{\"Name\":t(\"countries.Vanuatu\"),\"Code\":\"VU\"},{\"Name\":t(\"countries.Venezuela,_Bolivarian_Republic_of\"),\"Code\":\"VE\"},{\"Name\":t(\"countries.Viet_Nam\"),\"Code\":\"VN\"},{\"Name\":t(\"countries.Virgin_Islands_British\"),\"Code\":\"VG\"},{\"Name\":t(\"countries.Virgin_Islands_US\"),\"Code\":\"VI\"},{\"Name\":t(\"countries.Wallis_and_Futuna\"),\"Code\":\"WF\"},{\"Name\":t(\"countries.Western_Sahara\"),\"Code\":\"EH\"},{\"Name\":t(\"countries.Yemen\"),\"Code\":\"YE\"},{\"Name\":t(\"countries.Zambia\"),\"Code\":\"ZM\"},{\"Name\":t(\"countries.Zimbabwe\"),\"Code\":\"ZW\"}]\n\nexport default ISO_COUNTRY_CODES","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nconst RelationsAccountProfileForm = ({ t, history, isSubmitting, errors, values, inputData, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"customer\" \n                  checked={values.customer} \n                />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.customer')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"customer\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"instructor\" \n                  checked={values.instructor} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.instructor')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"instructor\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"employee\" \n                  checked={values.employee} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.employee')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"employee\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.first_name')}>\n              <Field type=\"text\" \n                      name=\"firstName\" \n                      className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.last_name')}>\n              <Field type=\"text\" \n                      name=\"lastName\" \n                      className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n         <Grid.Col>\n            <Form.Group label={t('general.date_of_birth')}>\n              <CSDatePicker \n                selected={values.dateOfBirth}\n                onChange={(date) => setFieldValue(\"dateOfBirth\", date)}\n                onBlur={() => setFieldTouched(\"dateOfBirth\", true)}\n              />\n              <ErrorMessage name=\"dateOfBirth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.gender')}>\n              <Field component=\"select\" \n                    name=\"gender\" \n                    className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                <option value=\"F\">{t(\"genders.female\")}</option>\n                <option value=\"M\">{t(\"genders.male\")}</option>\n                <option value=\"X\">{t(\"genders.other\")}</option>\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.emergency')}>\n              <Field type=\"text\" \n                     name=\"emergency\" \n                     className={(errors.emergency) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"emergency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.mobile')}>\n              <Field type=\"text\" \n                     name=\"mobile\" \n                     className={(errors.mobile) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"mobile\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                     name=\"postcode\" \n                     className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                     name=\"country\" \n                     className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"country\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.discovery')}>\n              <Field component=\"select\" \n                    name=\"organizationDiscovery\" \n                    className={(errors.organizationDiscovery) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.organizationDiscoveries.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationDiscovery\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.language')}>\n              <Field component=\"select\" \n                    name=\"organizationLanguage\" \n                    className={(errors.organizationLanguage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.organizationLanguages.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLanguage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.key_number')}>\n              <Field type=\"text\" \n                      name=\"keyNumber\" \n                      className={(errors.keyNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"keyNumber\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountProfileForm))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Avatar,\n  Card,\n  Icon,\n  List,\n  Media,\n  SocialNetworksList,\n  Tooltip,\n} from \"tabler-react\"\n\nfunction ProfileCardSmall({ t, value, user, avatarSize='lg' }) {\n  if (!user) {\n    return \"\"\n  }\n\n  const accountId = user.id\n\n  return (\n    <Card>\n      <Card.Body>\n        <Media>\n          <Link to={`/relations/accounts/${accountId}/profile/image`}>\n            {(user.urlImageThumbnailSmall) ? \n              <Avatar size={avatarSize + \" mr-5\"} imageURL={user.urlImageThumbnailSmall} /> :\n              <Avatar size={avatarSize + \" mr-5\"} icon=\"user\" />\n            }\n          </Link>\n          <Media.Body>\n            <h4 className=\"mb-2\">{user.firstName + \" \" + user.lastName}</h4>\n            <div className=\"text-muted mb-0\">\n              <SocialNetworksList className=\"mb-0 mt-2\">\n                {\n                  (user.phone) ? \n                    <List.Item inline>\n                      <Tooltip content={user.phone} placement=\"top\">\n                        <span>\n                          <Icon prefix=\"fe\" name=\"phone\" />\n                        </span>\n                      </Tooltip>\n                    </List.Item>\n                  // No phone number found\n                  : \"\"\n                }\n                {\n                  (user.mobile) ?\n                    <List.Item inline>\n                      <Tooltip content={user.mobile} placement=\"top\">\n                        <span>\n                          <Icon prefix=\"fe\" name=\"smartphone\" />\n                        </span>\n                      </Tooltip>\n                    </List.Item> \n                    // No mobile number found\n                    : \"\"\n                }\n\n                <List.Item inline>\n                  <Tooltip content={user.email} placement=\"top\">\n                    <a href={\"mailto:\" + user.email}>\n                      <Icon prefix=\"fe\" name=\"mail\" />\n                    </a>\n                  </Tooltip>\n                </List.Item>\n\n              </SocialNetworksList>\n              {/* items={[\n                <a href={\"mailto:\" + user.email}\n                  title={user.email}>\n                  <Icon prefix=\"fe\" name=\"mail\" />\n                </a>,\n                <span title=\"Phone number here\">\n                  <Icon prefix=\"fe\" name=\"phone\" />\n                </span>,\n                <span title=\"Phone number here\">\n                  <Icon prefix=\"fe\" name=\"mobile\" />\n                </span>,\n                \n              ]}\n            /> */}\n              {/* <Text.Small>\n                <Icon name=\"mail\" />  <a href={\"mailto:\" + user.email}>{user.email}</a> <br/>\n                <Icon name=\"phone\" /> user phone nr here... <br />\n                <Icon name=\"smartphone\" /> user mobile nr here...\n              </Text.Small> */}\n            </div>\n            {/* <SocialNetworksList\n              items={[\n                <a href=\"http://www.twitter.com\">\n                  <Icon prefix=\"fa\" name=\"twitter\" />\n                </a>,\n                <a href=\"http://www.facebook.com\">\n                  <Icon prefix=\"fa\" name=\"facebook\" />\n                </a>,\n              ]}\n            /> */}\n          </Media.Body>\n        </Media>\n      </Card.Body>\n    </Card>  \n  )\n}\n\nexport default withTranslation()(ProfileCardSmall)","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\nimport { GET_ACCOUNT_QUERY } from './queries'\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nlet profile_active\nlet subscriptions_active\nlet classpasses_active\nlet classes_active\nlet documents_active\nlet tickets_active\nlet instructor_profile_active\nlet orders_active\nlet invoices_active\nlet bank_account_active\nlet notes_active\nlet finance_payment_batch_category_item_active\nlet accepted_documents_active\n\n\nfunction ProfileMenu({t, accountId, activeLink}) {\n    const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n        variables: {id: accountId}\n    })\n\n    if (loading) return <p>{t('general.loading_with_dots')}</p>\n    // Error\n    if (error) {\n      console.log(error)\n      return <p>{t('general.error_sad_smiley')}</p>\n    }\n    const account = data.account\n    console.log('account in profile menu')\n    console.log(account)\n\n    return (\n      <List.Group transparent={true}>\n        {(activeLink === 'profile') ? profile_active = true: profile_active = false}\n        {(activeLink === 'subscriptions') ? subscriptions_active = true: subscriptions_active = false}\n        {(activeLink === 'classpasses') ? classpasses_active = true: classpasses_active = false}\n        {(activeLink === 'classes') ? classes_active = true: classes_active = false}\n        {(activeLink === 'documents') ? documents_active = true: documents_active = false}\n        {(activeLink === 'tickets') ? tickets_active = true: tickets_active = false}\n        {(activeLink === 'instructor_profile') ? instructor_profile_active = true: instructor_profile_active = false}\n        {(activeLink === 'orders') ? orders_active = true: orders_active = false}\n        {(activeLink === 'invoices') ? invoices_active = true: invoices_active = false}\n        {(activeLink === 'bank_account') ? bank_account_active = true: bank_account_active = false}\n        {(activeLink === 'notes') ? notes_active = true: notes_active = false}\n        {(activeLink === 'finance_payment_batch_category_item') ? \n            finance_payment_batch_category_item_active = true : \n            finance_payment_batch_category_item_active = false }\n        {(activeLink === 'accepted_documents') ? accepted_documents_active = true: accepted_documents_active = false}\n        \n\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/relations/accounts/\" + accountId + \"/profile\"}\n            icon=\"user\"\n            active={profile_active}\n        >\n            {t('relations.accounts.profile')}\n        </List.GroupItem>\n        {/* <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountmembership\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/memberships\"}\n                icon=\"clipboard\"\n                active={memberships_active}\n                >\n            {t('relations.account.memberships.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper> */}\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountsubscription\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/subscriptions\"}\n                icon=\"edit\"\n                active={subscriptions_active}\n                >\n            {t('relations.account.subscriptions.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountclasspass\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/classpasses\"}\n                icon=\"credit-card\"\n                active={classpasses_active}\n                >\n            {t('relations.account.classpasses.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"scheduleitemattendance\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/classes\"}\n                icon=\"book\"\n                active={classes_active}\n                >\n            {t('relations.account.classes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountscheduleeventticket\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/event_tickets\"}\n                icon=\"clipboard\"\n                active={tickets_active}\n                >\n            {t('relations.account.event_tickets.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeorder\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/orders\"}\n                icon=\"file-plus\"\n                active={orders_active}\n                >\n            {t('relations.account.orders.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeinvoice\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/invoices\"}\n                icon=\"file-text\"\n                active={invoices_active}\n                >\n            {t('relations.account.invoices.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountbankaccount\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/bank_accounts\"}\n                icon=\"briefcase\"\n                active={bank_account_active}\n                >\n            {t('relations.account.bank_accounts.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountfinancepaymentbatchcategoryitem\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/finance_payment_batch_category_items\"}\n                icon=\"list\"\n                active={finance_payment_batch_category_item_active}\n                >\n            {t('relations.account.finance_payment_batch_category_items.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        { (account.instructor) ?\n            <HasPermissionWrapper \n                permission=\"view\"\n                resource=\"accountinstructorprofile\">\n                <List.GroupItem\n                    key={v4()}\n                    className=\"d-flex align-items-center\"\n                    to={\"#/relations/accounts/\" + accountId + \"/instructor_profile\"}\n                    icon=\"paperclip\"\n                    active={instructor_profile_active}\n                    >\n                {t('relations.account.instructor_profile.title')}\n                </List.GroupItem>\n            </HasPermissionWrapper>\n        : \"\" }\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountaccepteddocument\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/accepted_documents\"}\n                icon=\"check-square\"\n                active={accepted_documents_active}\n                >\n            {t('relations.account.accepted_documents.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountdocument\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/documents\"}\n                icon=\"file\"\n                active={documents_active}\n                >\n            {t('relations.account.documents.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountnote\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/notes\"}\n                icon=\"message-square\"\n                active={notes_active}\n                >\n            {t('relations.account.notes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n  )\n}\n\nexport default withTranslation()(ProfileMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ProfileCardSmall from \"../../ui/ProfileCardSmall\"\n\nimport ButtonBack from '../../ui/ButtonBack'\nimport ProfileMenu from \"./ProfileMenu\"\n\n\nfunction RelationsAccountProfileBase({t, match, children, back, returnUrl='/relations/accounts', pageHeaderButtonList=\"\", activeLink=\"\", user={}}) {\n  const accountId = match.params.account_id\n  let headerTitle = \"\"\n  if (user) {\n    headerTitle = `${user.firstName} ${user.lastName}`\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={headerTitle}>\n            <div className=\"page-options d-flex\">\n              {(back) ? back : <ButtonBack returnUrl={returnUrl} />}\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>                                    \n            <Grid.Col md={3}>\n              <ProfileCardSmall user={user}/>\n              <ProfileMenu \n                activeLink={activeLink}\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfileBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountProfileForm from \"./RelationsAccountProfileForm\"\nimport RelationsAccountProfileBase from './RelationsAccountProfileBase'\n\n\nfunction RelationsAccountProfile({t, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"profile\"\n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId}\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateOfBirth = null\n  if (account.dateOfBirth) {\n    dateOfBirth = new Date(account.dateOfBirth)\n  }\n\n  let initialValues = { \n    customer: account.customer, \n    instructor: account.instructor, \n    employee: account.employee, \n    firstName: account.firstName, \n    lastName: account.lastName, \n    email: account.email,\n    dateOfBirth: dateOfBirth,\n    gender: account.gender,\n    emergency: account.emergency,\n    phone: account.phone,\n    mobile: account.mobile,\n    address: account.address,\n    postcode: account.postcode,\n    city: account.city,\n    country: account.country,\n    keyNumber: account.keyNumber\n  }\n\n  if (account.organizationDiscovery) {\n    initialValues.organizationDiscovery = account.organizationDiscovery.id\n  }\n\n  if (account.organizationLanguage) {\n    initialValues.organizationLanguage = account.organizationLanguage.id\n  }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n\n        <Formik\n            initialValues={initialValues}\n            validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: accountId,\n                  customer: values.customer,\n                  instructor: values.instructor,\n                  employee: values.employee,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  gender: values.gender,\n                  emergency: values.emergency,\n                  phone: values.phone,\n                  mobile: values.mobile,\n                  address: values.address,\n                  postcode: values.postcode,\n                  city: values.city,\n                  country: values.country,\n                  keyNumber: values.keyNumber,\n                  organizationDiscovery: values.organizationDiscovery,\n                  organizationLanguage: values.organizationLanguage\n                }\n\n                if (values.dateOfBirth) {\n                  input_vars['dateOfBirth'] = dateToLocalISO(values.dateOfBirth)\n                } \n\n                updateAccount({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // Refetch list\n                    {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // Refresh local cached results for this account\n                    {query: GET_ACCOUNT_QUERY, variables: {id: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('relations.accounts.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <RelationsAccountProfileForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                inputData={data}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfile))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nconst RelationsAccountProfileImageForm = ({ t, history, isSubmitting, returnUrl, inputFileName, fileInputLabel, handleFileInputChange=f=>f }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Link to={returnUrl}>\n            <Button color=\"link\" className=\"pull-right\">\n              {t('general.cancel')}\n            </Button>\n          </Link>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountProfileImageForm))\n\n","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from './queries'\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountProfileImageForm from \"./RelationsAccountProfileImageForm\"\nimport RelationsAccountProfileBase from './RelationsAccountProfileBase'\n\n\nfunction RelationsAccountProfileImage({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"profile\"\n  const cardTitle = t('relations.accounts.profile_image')\n  const returnUrl = `/relations/accounts/${accountId}/profile` \n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId}\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n\n  // Vars file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n  // Vars file input field end\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{}}\n            // validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let inputVars = {\n                  id: accountId,\n                }\n\n                function updateImage() {\n                  updateAccount({ variables: {\n                    input: inputVars\n                  }, refetchQueries: [\n                      // Refetch list\n                      {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                      // Refresh local cached results for this account\n                      {query: GET_ACCOUNT_QUERY, variables: {id: accountId}}\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      history.push(`/relations/accounts/${accountId}/profile`)\n                      toast.success((t('relations.accounts.toast_edit_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n                }\n\n                let reader = new FileReader()\n                reader.onload = function(reader_event) {\n                  console.log(reader_event.target.result)\n                  let b64_enc_file = reader_event.target.result\n                  console.log(b64_enc_file)\n                  // Add uploaded document b64 encoded blob to input vars\n                  inputVars.image = b64_enc_file\n                  inputVars.imageFileName = fileName\n      \n                  updateImage()\n                }\n                \n                let file = inputFileName.current.files[0]\n                if (file && file.size < 5242880) {\n                  reader.readAsDataURL(file)\n                } else if (file && file.size > 5242880) { \n                  toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                } else {\n                  updateImage()\n                }\n            }}\n            >\n            {({ isSubmitting, values }) => (\n              <RelationsAccountProfileImageForm\n                isSubmitting={isSubmitting}\n                values={values}\n                inputData={data}\n                inputFileName={inputFileName}\n                fileInputLabel={fileInputLabel}\n                handleFileInputChange={handleFileInputChange}\n                returnUrl={returnUrl}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfileImage))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../ui/ButtonBack'\n\nconst RelationsAccountsBack = ({ t }) => (\n    <ButtonBack returnUrl=\"/relations/accounts\" />\n)\n\nexport default withTranslation()(RelationsAccountsBack)","import { withTranslation } from 'react-i18next'\n\nconst DocumentType = ({ t, documentType }) => {\n  switch (documentType) {\n    case \"TERMS_AND_CONDITIONS\":  \n      return t('general.terms_and_conditions')\n    case \"PRIVACY_POLICY\":\n      return t('general.privacy_policy')\n    default:\n      return t('general.unknown_document_type')\n  }\n}\n\nexport default withTranslation()(DocumentType)\n\n\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY = gql`\n  query AccountAcceptedDocuments($after: String, $before: String, $account: ID!) {\n    accountAcceptedDocuments(first: 15, before:$before, after:$after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          document {\n            id\n            documentType\n            version\n            urlDocument\n          }\n          dateAccepted\n          clientIp\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport DocumentType from \"../../../ui/DocumentType\"\nimport FileDownloadTableButton from \"../../../ui/FileDownloadTableButton\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nimport { GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY } from \"./queries\"\n\n\n\n\nfunction AccountAcceptedDocuments({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t('relations.account.accepted_documents.title')\n\n  const accountId = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY, {\n    variables: {\n      account: accountId\n    }\n  })\n\n  // Loading\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  console.log(data)\n  \n  const account = data.account\n  const acceptedDocuments = data.accountAcceptedDocuments\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {\n              // Empty list\n                (!acceptedDocuments.edges.length) ?\n                  <Card title={cardTitle}>\n                    <Card.Body>\n                      <p>{t('relations.account.accepted_documents.empty_list')}</p>\n                    </Card.Body>\n                  </Card>\n                :\n                <ContentCard \n                  cardTitle={cardTitle}\n                  pageInfo={acceptedDocuments.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: data.accountAcceptedDocuments.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accountAcceptedDocuments.edges\n                        const pageInfo = fetchMoreResult.accountAcceptedDocuments.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new acceptedDocuments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              accountAcceptedDocuments: {\n                                __typename: previousResult.accountAcceptedDocuments.__typename,\n                                edges: [ ...previousResult.accountAcceptedDocuments.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n                >\n                  <Table cards>\n                    <Table.Header>\n                      <Table.Row key={v4()}>\n                        <Table.ColHeader>{t('general.document_type')}</Table.ColHeader>\n                        <Table.ColHeader>{t('general.date_accepted')}</Table.ColHeader>\n                        <Table.ColHeader>{t('relations.account.accepted_documents.accepted_from_address')}</Table.ColHeader>\n                        <Table.ColHeader><span className=\"pull-right\">{t('general.document')}</span></Table.ColHeader>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {acceptedDocuments.edges.map(({ node }) => (\n                          <Table.Row key={v4()}>\n                            <Table.Col key={v4()}>\n                              <DocumentType documentType={node.document.documentType} />\n                            </Table.Col>\n                            <Table.Col key={v4()}>\n                              {moment(node.dateAccepted).format(dateFormat)}\n                            </Table.Col>\n                            <Table.Col>\n                              {node.clientIp}\n                            </Table.Col>\n                            <Table.Col key={v4()}>\n                              <FileDownloadTableButton mediaUrl={node.document.urlDocument} className=\"pull-right\" />\n                            </Table.Col>\n                          </Table.Row>\n                        ))}\n                    </Table.Body>\n                  </Table>\n                </ContentCard>\n              }\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='accepted_documents' \n                accountId={match.params.account_id}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n      \n        \nexport default withTranslation()(withRouter(AccountAcceptedDocuments))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_BANK_ACCOUNTS_QUERY = gql`\n  query AccountBankAccounts($after: String, $before: String, $account: ID!) {\n    accountBankAccounts(\n      first: 1, \n      before: $before, \n      after: $after, \n      account: $account\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          number\n          holder\n          bic\n          mandates(first: 100) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                id\n                reference\n                content\n                signatureDate\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n// export const GET_ACCOUNT_QUERY = gql`\n//   query Account($id: ID!) {\n//     account(id:$id) {\n//       id\n//       customer\n//       instructor\n//       employee\n//       firstName\n//       lastName\n//       email\n//       dateOfBirth\n//       gender\n//       address\n//       postcode\n//       city\n//       country\n//       phone\n//       mobile\n//       emergency\n//       isActive\n//     }\n//   }\n// `\n\nexport const UPDATE_ACCOUNT_BANK_ACCOUNT = gql`\n  mutation UpdateAccountBanKAccount($input:UpdateAccountBankAccountInput!) {\n    updateAccountBankAccount(input: $input) {\n      accountBankAccount {\n        id\n        number\n        holder\n        bic\n      }\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY = gql`\n  query AccountBankAccountMandate($id: ID!) {\n    accountBankAccountMandate(id:$id) {\n      id\n      reference\n      content\n      signatureDate\n    }\n  }\n`\n\n\nexport const CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation CreateAccountBankAccountMandate($input:CreateAccountBankAccountMandateInput!) {\n    createAccountBankAccountMandate(input: $input) {\n      accountBankAccountMandate {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation UpdateAccountBankAccountMandate($input:UpdateAccountBankAccountMandateInput!) {\n    updateAccountBankAccountMandate(input: $input) {\n      accountBankAccountMandate {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation DeleteAccountBankAccountMandate($input:DeleteAccountBankAccountMandateInput!) {\n    deleteAccountBankAccountMandate(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport ButtonBack from '../../../ui/ButtonBack';\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nfunction RelationsAccountBankAccountBase({ t, match, history, children, bankAccountId=\"\", pageHeaderButtonList, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ? \n                <ButtonBack returnUrl={`/relations/accounts/${accountId}/bank_accounts/`} /> :\n                <RelationsAccountsBack />  \n              }\n              {pageHeaderButtonList}\n              {((bankAccountId) && !(showEditBack)) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountbankaccountmandate\">\n                  <ButtonAdd \n                    addUrl={`/relations/accounts/${match.params.account_id}/bank_accounts/${bankAccountId}/mandates/add`}\n                    buttonText={t('relations.account.bank_accounts.mandates.add')}\n                    className=\"ml-2\"\n                  />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='bank_account'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountBankAccountForm = ({ t, history, isSubmitting, errors, values, }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.holder')}>\n              <Field type=\"text\" \n                      name=\"holder\" \n                      className={(errors.holder) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.number')}>\n              <Field type=\"text\" \n                      name=\"number\" \n                      className={(errors.number) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"number\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.bic')}>\n              <Field type=\"text\" \n                      name=\"bic\" \n                      className={(errors.bic) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountForm))\n\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card, \n  Grid,\n  Icon\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY, UPDATE_ACCOUNT_BANK_ACCOUNT } from './queries'\nimport { DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './mandates/queries'\nimport confirm_delete from \"../../../../tools/confirm_delete\"\nimport RelationsAccountBankAccountBase from \"./RelationsAccountBankAccountBase\"\nimport RelationsAccountBankAccountForm from \"./RelationsAccountBankAccountForm\"\n\n\n\nfunction RelationsAccountBankAccount({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNTS_QUERY, {\n    variables: { account: accountId }\n  })\n\n  const [ updateAccountBankAccount ] = useMutation(UPDATE_ACCOUNT_BANK_ACCOUNT)\n  const [ deleteAccountBankAccountMandate ] = useMutation(DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE)\n\n  if (loading) return (\n    <RelationsAccountBankAccountBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </RelationsAccountBankAccountBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <RelationsAccountBankAccountBase>\n        <p>{t('general.loading_with_dots')}</p><p>{t('general.error_sad_smiley')}</p>\n      </RelationsAccountBankAccountBase>\n    )\n  }\n\n  const accountBankAccounts = data.accountBankAccounts\n  const accountBankAccount = accountBankAccounts.edges[0].node\n  const mandates = accountBankAccount.mandates\n  console.log(accountBankAccount)\n\n  return (\n    <RelationsAccountBankAccountBase bankAccountId={accountBankAccount.id}>\n      <Card title={t('relations.account.bank_accounts.title')}>\n        <Formik\n          initialValues={{ \n            number: accountBankAccount.number,\n            holder: accountBankAccount.holder,\n            bic: accountBankAccount.bic\n          }}\n          // validationSchema={ACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let input_vars = {\n                id: accountBankAccount.id,\n                number: values.number,\n                holder: values.holder,\n                bic: values.bic              \n              }\n\n              updateAccountBankAccount({ variables: {\n                input: input_vars\n              }, refetchQueries: [\n                  // Refresh local cached results for this account\n                  {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.account.bank_accounts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card>\n      {(mandates.edges.length) ? <h5>{t(\"relations.account.bank_accounts.mandates.title\")}</h5> : \"\"}\n      <Grid.Row>\n      {mandates.edges.map(({ node }) => (\n        <Grid.Col md={6}>\n          <Card title={node.reference}>\n            <Card.Body>\n              {t(\"relations.account.bank_accounts.mandates.signature_date\")} {moment(node.signatureDate).format(dateFormat)}\n              <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }} />\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                className=\"pull-right\"\n                color=\"danger\"\n                type=\"button\"\n                onClick={() => {\n                  confirm_delete({\n                    t: t,\n                    msgConfirm: t(\"relations.account.bank_accounts.mandates.delete_confirm_msg\"),\n                    msgDescription: <p>{node.reference}</p>,\n                    msgSuccess: t('relations.account.bank_accounts.mandates.deleted'),\n                    deleteFunction: deleteAccountBankAccountMandate,\n                    functionVariables: { \n                      variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, \n                      refetchQueries: [\n                        {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId} } \n                      ]\n                    }\n                  })\n                }}\n              >\n                <Icon name=\"trash-2\" />\n              </Button>\n              <Link to={`/relations/accounts/${accountId}/bank_accounts/${accountBankAccount.id}/mandates/edit/${node.id}`}>\n                <Button\n                  type=\"button\" \n                  color=\"secondary\" \n                >\n                    {t('general.edit')}\n                </Button>\n              </Link>\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n      ))}\n      </Grid.Row>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccount))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../plugin_config/tinymce\"\n\n\nconst RelationsAccountBankAccountMandateForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.reference')}>\n            <Field type=\"text\" \n                    name=\"reference\" \n                    className={(errors.reference) ? \"form-control is-invalid\" : \"form-control\"}\n                    placeholder={t('relations.account.bank_accounts.mandates.reference_placeholder')}\n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"reference\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.signature_date')}>\n            <CSDatePicker \n              selected={values.signatureDate}\n              onChange={(date) => setFieldValue(\"signatureDate\", date)}\n              onBlur={() => setFieldTouched(\"signatureDate\", true)}\n            />\n            <ErrorMessage name=\"signatureDate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.content')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"content\"\n              initialValue={values.content}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"content\", e.target.getContent())\n                setFieldTouched(\"content\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateForm))","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './queries'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY } from '../queries'\nimport RelationsAccountBankAccountMandateForm from './RelationsAccountBankAccountMandateForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport RelationsAccountBankAccountBase from '../RelationsAccountBankAccountBase'\n\n\nfunction RelationsAccountBankAccountMandateAdd({ t, match, history }) {\n  const accountId = match.params.account_id\n  const bankAccountId = match.params.bank_account_id\n  const returnUrl = `/relations/accounts/${accountId}/bank_accounts`\n\n  const [createAccountBankAccountMandate] = useMutation(CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE) \n \n  return (\n    <RelationsAccountBankAccountBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.account.bank_accounts.mandates.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{\n            reference: \"\",\n            content: \"\",\n            signatureDate: new Date()\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createAccountBankAccountMandate({ variables: {\n              input: {\n                accountBankAccount: bankAccountId,\n                reference: values.refrence, \n                content: values.content,\n                signatureDate: dateToLocalISO(values.signatureDate)\n              }\n            }, refetchQueries: [\n              {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('relations.account.bank_accounts.mandates.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountMandateForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </RelationsAccountBankAccountMandateForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY, UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './queries'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY } from '../queries'\nimport RelationsAccountBankAccountMandateForm from './RelationsAccountBankAccountMandateForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport RelationsAccountBankAccountBase from '../RelationsAccountBankAccountBase'\n\n\nfunction RelationsAccountBankAccountMandateEdit({ t, match, history }) {\n  const accountId = match.params.account_id\n  const mandateId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/bank_accounts`\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY, {\n    variables: {'id': mandateId},\n  })\n  const [updateAccountBankAccountMandate] = useMutation(UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE) \n\n  if (loading) return (\n    <RelationsAccountBankAccountBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </RelationsAccountBankAccountBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <RelationsAccountBankAccountBase>\n        <p>{t('general.loading_with_dots')}</p><p>{t('general.error_sad_smiley')}</p>\n      </RelationsAccountBankAccountBase>\n    )\n  }\n\n  const mandate = data.accountBankAccountMandate\n \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let signDate = null\n  if (mandate.signatureDate) {\n    signDate = new Date(mandate.signatureDate)\n  }\n\n  return (\n    <RelationsAccountBankAccountBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.account.bank_accounts.mandates.title_edit')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{\n            reference: mandate.reference,\n            content: mandate.content,\n            signatureDate: signDate\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateAccountBankAccountMandate({ variables: {\n              input: {\n                id: mandateId,\n                reference: values.refrence, \n                content: values.content,\n                signatureDate: dateToLocalISO(values.signatureDate)\n              }\n            }, refetchQueries: [\n              {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.bank_accounts.mandates.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push(returnUrl)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountMandateForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </RelationsAccountBankAccountMandateForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateEdit))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeBookingStatus({ t, status }) {\n  switch (status) {\n    case \"ATTENDING\":\n      return <Badge color=\"success\">{t('schedule.classes.class.attendance.booking_status.ATTENDING')}</Badge> \n    case \"BOOKED\":\n      return <Badge color=\"primary\">{t('schedule.classes.class.attendance.booking_status.BOOKED')}</Badge> \n    case \"CANCELLED\":\n      return <Badge color=\"warning\">{t('schedule.classes.class.attendance.booking_status.CANCELLED')}</Badge> \n    default:\n      return t(\"schedule.classes.class.attendance.booking_status.invalid_type\")\n  }\n}\n\nexport default withTranslation()(BadgeBookingStatus)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountClassesBase({ t, match, history, children, account={} }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className=\"page-options d-flex\">\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='classes' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountClassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_CLASSES_QUERY = gql`\n  query ScheduleItemAttendance($account: ID!, $before: String, $after: String) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, accountScheduleEventTicket_Isnull: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          attendanceType\n          date\n          bookingStatus\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_CLASS_ATTENDANCE_QUERY = gql`\n  query ScheduleItemAttendances($after: String, $before: String, $scheduleItem: ID!, $date: Date!) {\n    scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem: $scheduleItem, date: $date) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }     \n          attendanceType\n          bookingStatus\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    scheduleClass(scheduleItemId:$scheduleItem, date:$date) {\n      scheduleItemId\n      frequencyType\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      date\n      timeStart\n      timeEnd\n      displayPublic\n      status\n      description\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItem: ID!, $date: Date!) {\n    scheduleClass(scheduleItemId:$scheduleItem, date:$date) {\n      scheduleItemId\n      frequencyType\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      date\n      timeStart\n      timeEnd\n      displayPublic\n      status\n      description\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_ATTENDANCE = gql`\n  mutation DeleteScheduleItemAttendance($input: DeleteScheduleItemAttendanceInput!) {\n    deleteScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation UpdateScheduleItemAttendance($input: UpdateScheduleItemAttendanceInput!) {\n    updateScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`\n\n\n// export const GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n//   query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n//     scheduleItemAccount(id: $id) {\n//       id\n//       account {\n//         id\n//         fullName\n//       }\n//       role\n//       account2 {\n//         id\n//         fullName\n//       }\n//       role2\n//       dateStart\n//       dateEnd       \n//     }\n//     accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           fullName\n//         }\n//       }\n//     }\n//   }\n// `\n\n\n// export const GET_INPUT_VALUES_QUERY = gql`\n//   query InputValues($after: String, $before: String) {\n//     accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           fullName\n//         }\n//       }\n//     }\n//   }\n// `","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\nimport { DELETE_SCHEDULE_CLASS_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport moment from 'moment'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nfunction AccountClassDelete({t, match, node, account}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const [deleteScheduleItemAttendance] = useMutation(DELETE_SCHEDULE_CLASS_ATTENDANCE)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm pull-right\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.class.attendance.delete_confirm_msg\"),\n          msgDescription: <p>\n            <List>\n              <List.Item>\n                {t(\"general.time\")}: { moment(node.date).format(dateFormat) } { ' ' }\n                {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n              </List.Item>\n              <List.Item>\n                {t(\"general.class\")}: {node.scheduleItem.organizationClasstype.name} \n              </List.Item>\n              <List.Item>\n                {t(\"general.location\")}: {node.scheduleItem.organizationLocationRoom.organizationLocation.name} \n              </List.Item>\n            </List>    \n          </p>,\n          msgSuccess: t('schedule.classes.class.attendance.delete_success'),\n          deleteFunction: deleteScheduleItemAttendance,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_CLASSES_QUERY, \n                variables: { account: account.id } },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBookingStatus from \"../../../ui/BadgeBookingStatus\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountClassesBase from \"./AccountClassesBase\"\nimport AccountClassDelete from \"./AccountClassDelete\"\n\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\n\n\nfunction AccountClasses({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const account_id = match.params.account_id\n  const cardTitle = t('relations.account.classes.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_CLASSES_QUERY, {\n    variables: {'account': account_id},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountClassesBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountClassesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountClassesBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountClassesBase>\n    )\n  }\n\n  const account = data.account\n  const scheduleItemAttendances = data.scheduleItemAttendances\n  \n  // Empty list\n  if (!scheduleItemAttendances.edges.length) {\n    return (\n      <AccountClassesBase account={account}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.classes.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountClassesBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountClassesBase account={account}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={scheduleItemAttendances.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: scheduleItemAttendances.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n              const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {scheduleItemAttendances.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                { console.log(node) }\n                { console.log(account) }\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) } <br />\n                  <span className=\"text-muted\">\n                    {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n                  </span>\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationClasstype.name }\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                  <span className=\"text-muted\">\n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col>\n                <Table.Col>\n                  <BadgeBookingStatus status={node.bookingStatus} />\n                </Table.Col>\n                <Table.Col>\n                  <AccountClassDelete account={account} node={node} />\n                </Table.Col>\n                {/* <Table.Col className=\"text-right\" key={v4()}>\n                  <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col> */}\n                {/* <Mutation mutation={DELETE_ACCOUNT_CLASSPASS} key={v4()}>\n                  {(deleteAccountClasspass, { data }) => (\n                    <Table.Col className=\"text-right\" key={v4()}>\n                      <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n                            msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n                            msgSuccess: t('relations.account.classpasses.deleted'),\n                            deleteFunction: deleteAccountClasspass,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n                            ]}\n                          })\n                      }}>\n                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                      </button>\n                    </Table.Col>\n                  )}\n                </Mutation> */}\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountClassesBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasses))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_CLASSPASSES_QUERY = gql`\n  query AccountClasspasses($after: String, $before: String, $accountId: ID!) {\n    accountClasspasses(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationClasspass {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_ACCOUNT_CLASSPASS_QUERY = gql`\n  query AccountClasspass($id: ID!, $accountId: ID!, $after: String, $before: String) {\n    accountClasspass(id:$id) {\n      id\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n    }\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ClasspassInputValues($after: String, $before: String, $accountId: ID!) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_CLASSPASS = gql`\n  mutation CreateAccountClasspass($input: CreateAccountClasspassInput!) {\n    createAccountClasspass(input: $input) {\n      accountClasspass {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationClasspass {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_CLASSPASS = gql`\nmutation UpdateAccountClasspass($input: UpdateAccountClasspassInput!) {\n  updateAccountClasspass(input: $input) {\n    accountClasspass {\n      id\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n    }\n  }\n}\n`\n\nexport const DELETE_ACCOUNT_CLASSPASS = gql`\n  mutation DeleteAccountClasspass($input: DeleteAccountClasspassInput!) {\n    deleteAccountClasspass(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, DELETE_ACCOUNT_CLASSPASS } from \"./queries\"\n\n\nfunction AccountClasspasses({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountclasspass\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/classpasses/add`} className=\"ml-2\" />\n  </HasPermissionWrapper>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_CLASSPASSES_QUERY, {\n    variables: { accountId: accountId }\n  })\n  const [deleteAccountClasspass] = useMutation(DELETE_ACCOUNT_CLASSPASS)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountClasspasses = data.accountClasspasses\n\n    // Empty list\n    if (!accountClasspasses.edges.length) {\n      return (\n        <RelationsAccountProfileBase \n          user={account}\n          activeLink={activeLink}\n          pageHeaderButtonList={pageHeaderButtonList}\n        >\n          <Card title={cardTitle}>\n            <Card.Body>\n              <p>{t('relations.account.classpasses.empty_list')}</p>\n            </Card.Body>\n          </Card>\n        </RelationsAccountProfileBase>\n      )\n    }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.classpasses.title')}\n        pageInfo={accountClasspasses.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountClasspasses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountClasspasses.edges\n              const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountClasspasses.__typename,\n                      edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountClasspasses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.organizationClasspass.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <Link to={`/relations/accounts/${accountId}/classpasses/classes/${node.id}`}>\n                      {node.classesRemainingDisplay}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n                          msgSuccess: t('relations.account.classpasses.deleted'),\n                          deleteFunction: deleteAccountClasspass,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasspasses))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_SCHEMA = Yup.object().shape({\n  organizationClasspass: Yup.string()\n    .required(t('yup.field_required')),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  note: Yup.string(),\n})\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountClasspassForm = ({ t, history, create, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.classpass')}>\n            <Field component=\"select\" \n                  name=\"organizationClasspass\" \n                  className={(errors.organizationClasspass) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationClasspasses.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationClasspass\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateStart}\n              onChange={(date) => {\n                setFieldValue(\"dateStart\", date)\n                setFieldTouched(\"dateEnd\", true)\n              }}\n              onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        {(!create) ? \n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                placeholderText={t('schedule.classes.placeholder_enddate')}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        : \"\" }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Button\n          type=\"button\" \n          color=\"link\" \n          onClick={() => history.push(returnUrl)}\n        >\n          {t('general.cancel')}\n        </Button>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountClasspassForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\n\n\nfunction AccountClasspassAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/classpasses`\n  \n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, { \n    variables: { accountId: accountId }\n  })\n  const [createAccountClasspass] = useMutation(CREATE_ACCOUNT_CLASSPASS)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: \"\",\n              dateStart: new Date(),\n              note: \"\",\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n\n                createAccountClasspass({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const classpassId = data.createAccountClasspass.accountClasspass.id\n                    history.push(`/relations/accounts/${accountId}/classpasses/edit/${classpassId}`)\n                    toast.success((t('relations.account.classpasses.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountClasspassAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, GET_ACCOUNT_CLASSPASS_QUERY, UPDATE_ACCOUNT_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\n\nfunction AccountClasspassEdit({t, history, match}) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_edit')\n  const returnUrl = `/relations/accounts/${accountId}/classpasses`\n  \n  const {loading, error, data} = useQuery(GET_ACCOUNT_CLASSPASS_QUERY, {\n    variables: { id: id, accountId: accountId }\n  })\n  const [updateClasspass] = useMutation(UPDATE_ACCOUNT_CLASSPASS)\n\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountClasspass\n\n    // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialdata.dateStart) {\n    dateStart = new Date(initialdata.dateStart)\n  }\n  if (initialdata.dateEnd) {\n    dateEnd = new Date(initialdata.dateEnd)\n  }\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: initialdata.organizationClasspass.id,\n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              note: initialdata.note,\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n                \n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                updateClasspass({ variables: {\n                  input: {\n                    id: id,\n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd,\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('relations.account.classpasses.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountClasspassEdit))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASSPASS_CLASSES_QUERY = gql`\n  query AccountClasspass($id: ID!, $accountId: ID!, $before: String, $after: String) {\n    accountClasspass(id:$id) {\n      id\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n      classes(first:100, before:$before, after:$after) {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            date\n            scheduleItem {\n              timeStart\n              timeEnd\n              organizationLocationRoom {\n                id\n                name\n                organizationLocation {\n                  id\n                  name\n                }\n              }\n              organizationClasstype {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonBack from '../../../ui/ButtonBack'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_CLASSPASS_CLASSES_QUERY } from \"./queries\"\n\n\nfunction AccountClasspassClasses({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_classes')\n  const back = <div className=\"page-options d-flex\">\n    <ButtonBack returnUrl={`/relations/accounts/${accountId}/classpasses`} />\n  </div>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_CLASSPASS_CLASSES_QUERY, {\n    variables: { \n      accountId: accountId,\n      id: id\n    }\n  })\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} back={back}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} back={back}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountClasspass = data.accountClasspass\n  const classes = accountClasspass.classes\n  console.log(classes)\n\n  const cardTitleWithCardInfo = `${cardTitle} ${accountClasspass.organizationClasspass.name} (${moment(accountClasspass.dateStart).format(dateFormat)})`\n\n  if (!classes.edges.length) return (\n    <RelationsAccountProfileBase user={account} activeLink={activeLink} back={back}>\n      {console.log(error)}\n      <Card title={cardTitleWithCardInfo}>\n        <Card.Body>\n          {t(\"relations.account.classpasses.no_classes_taken_yet\")}\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n\n\n  return (\n    <RelationsAccountProfileBase user={account} activeLink={activeLink} back={back}>\n      <ContentCard \n        cardTitle={cardTitleWithCardInfo}\n        pageInfo={classes.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: classes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.classes.edges\n              const pageInfo = fetchMoreResult.classes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    classes: {\n                      __typename: previousResult.classes.__typename,\n                      edges: [ ...previousResult.classes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classes.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {moment(new Date(node.date + \" \" + node.scheduleItem.timeStart)).format(dateTimeFormatMoment)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.scheduleItem.organizationLocationRoom.organizationLocation.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.scheduleItem.organizationClasstype.name}\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasspassClasses))","import { gql } from \"@apollo/client\"\n\nexport const GET_DOCUMENTS_QUERY = gql`\n  query AccountDocuments($account: ID!) {\n    accountDocuments(account:$account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          description\n          urlProtectedDocument\n          createdAt\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_DOCUMENT_QUERY = gql`\n  query AccountDocument($id: ID!, $account: ID!) {\n    accountDocument(id:$id) {\n      id\n      description\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const ADD_DOCUMENT = gql`\n  mutation CreateAccountDocument($input:CreateAccountDocumentInput!) {\n    createAccountDocument(input: $input) {\n      accountDocument{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_DOCUMENT = gql`\n  mutation UpdateAccountDocument($input:UpdateAccountDocumentInput!) {\n    updateAccountDocument(input: $input) {\n      accountDocument{\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_DOCUMENT = gql`\n  mutation DeleteAccountDocument($input:DeleteAccountDocumentInput!) {\n    deleteAccountDocument(input: $input) {\n      ok\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button\n} from \"tabler-react\";\n\nimport { TOKEN_REFRESH } from \"../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../tools/refresh_token_and_open_export_link\"\n\n\nfunction FileProtectedDownloadTableButton({ t, history, protectedMediaUrl, className=\"\" }) {\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <Button \n      color={\"secondary \" + className}\n      size=\"sm\"\n      icon=\"download-cloud\"\n      RootComponent=\"a\" \n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n        t, doTokenRefresh, history, protectedMediaUrl\n    )}\n    >\n      {t('general.download')}\n    </Button>\n  )\n}\n\nexport default withTranslation()(withRouter(FileProtectedDownloadTableButton))\n\n\n\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_DOCUMENTS_QUERY, DELETE_DOCUMENT } from \"./queries\"\nimport FileProtectedDownloadTableButton from \"../../../ui/FileProtectedDownloadTableButton\"\n\n\nfunction AccountDocuments({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const activeLink = \"documents\"\n  const cardTitle = t('relations.account.documents.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountdocument\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/documents/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_DOCUMENTS_QUERY, {\n    variables: { account: accountId }\n  })\n  const [deleteAccountDocument] = useMutation(DELETE_DOCUMENT)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountDocuments = data.accountDocuments\n  console.log(accountDocuments)\n\n  // Empty list\n  if (!accountDocuments.edges.length) {\n    return (\n      <RelationsAccountProfileBase activeLink={activeLink} user={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.documents.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n    )\n  }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.documents.title')}\n        pageInfo={accountDocuments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountDocuments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountDocuments.edges\n              const pageInfo = fetchMoreResult.accountDocuments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountDocuments at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountDocuments: {\n                      __typename: previousResult.accountDocuments.__typename,\n                      edges: [ ...previousResult.accountDocuments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.document')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.download')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountDocuments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.description}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <FileProtectedDownloadTableButton protectedMediaUrl={node.urlProtectedDocument} />\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + accountId + \"/documents/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.documents.delete_confirm_msg\"),\n                          msgDescription: <p>{node.description}</p>,\n                          msgSuccess: t('relations.account.documents.deleted'),\n                          deleteFunction: deleteAccountDocument,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_DOCUMENTS_QUERY, variables: { account: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountDocuments))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n  \n\nfunction AccountDocumentForm({ t, history, errors, values, isSubmitting, returnUrl, inputFileName, fileInputLabel, handleFileInputChange=f=>f, }) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Button\n            type=\"button\" \n            color=\"link\" \n            onClick={() => history.push(returnUrl)}\n          >\n            {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentForm))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_DOCUMENTS_QUERY, ADD_DOCUMENT } from './queries'\nimport { GET_ACCOUNT_QUERY } from '../queries'\n// import { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountDocumentForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nfunction AccountDocumentAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.documents.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/documents`\n  \n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n  const [addAccountDocument] = useMutation(ADD_DOCUMENT)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: \"\"\n          }}\n          // validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              account: accountId,\n              description: values.description,\n              documentFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n  \n              addAccountDocument({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_DOCUMENTS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.documents.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountClasspassForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountClasspassForm>\n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountDocumentAdd))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DOCUMENT_SCHEMA = Yup.object().shape({\n    description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n  \n\nfunction AccountDocumentFormEdit({ t, history, errors, values, isSubmitting, returnUrl }) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button\n              type=\"button\" \n              color=\"link\"\n            >\n              {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentFormEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_DOCUMENTS_QUERY, GET_DOCUMENT_QUERY, UPDATE_DOCUMENT } from './queries'\nimport { DOCUMENT_SCHEMA } from './yupSchema'\nimport AccountDocumentFormEdit from './AccountDocumentFormEdit'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nfunction AccountDocumentEdit({t, history, match}) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"documents\"\n  const cardTitle = t('relations.account.documents.title_edit')\n  const returnUrl = `/relations/accounts/${accountId}/documents`\n  \n  const {loading, error, data} = useQuery(GET_DOCUMENT_QUERY, {\n    variables: { id: id, account: accountId }\n  })\n  const [updateDocument] = useMutation(UPDATE_DOCUMENT)\n\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountDocument\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: initialdata.description,\n          }}\n          validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateDocument({ variables: {\n                input: {\n                  id: id,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                {query: GET_DOCUMENTS_QUERY, variables: { account: accountId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.documents.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <AccountDocumentFormEdit\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountDocumentFormEdit>\n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentEdit))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\n\nfunction AccountFinancePaymentBatchcAtegoryItemsBase({ t, history, match, children, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"accountfinancepaymentbatchcategoryitem\">\n                  <ButtonBack returnUrl={`/relations/accounts/${accountId}/finance_payment_batch_category_items/`} />\n                </HasPermissionWrapper>\n                : \n                <RelationsAccountsBack />\n              }\n              {!(showEditBack) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountfinancepaymentbatchcategoryitem\">\n                  <ButtonAdd \n                    addUrl={`/relations/accounts/${accountId}/finance_payment_batch_category_items/add`}\n                    className=\"ml-2\"\n                  />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='finance_payment_batch_category_item'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}    \n        \nexport default withTranslation()(withRouter(AccountFinancePaymentBatchcAtegoryItemsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY = gql`\n  query AccountFinancePaymentBatchCategoryItems($after: String, $before: String, $account: ID!) {\n    accountFinancePaymentBatchCategoryItems(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          financePaymentBatchCategory {\n            id\n            name\n          }\n          year\n          month\n          amountDisplay\n          description\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY = gql`\n  query AccountFinancePaymentBatchCategoryItem($id: ID!) {\n    accountFinancePaymentBatchCategoryItem(id: $id) {\n      id\n      financePaymentBatchCategory {\n        id\n        name\n      }\n      year\n      month\n      amount\n      description\n    }\n    financePaymentBatchCategories(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          batchCategoryType\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query AccountPaymentBatchCategoryItemInputValues($after: String, $before: String) {\n    financePaymentBatchCategories(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          batchCategoryType\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation CreateAccountFinancePaymentBatchCategoryItem($input: CreateAccountFinancePaymentBatchCategoryItemInput!) {\n    createAccountFinancePaymentBatchCategoryItem(input: $input) {\n      accountFinancePaymentBatchCategoryItem {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation UpdateAccountFinancePaymentBatchCategoryItem($input: UpdateAccountFinancePaymentBatchCategoryItemInput!) {\n    updateAccountFinancePaymentBatchCategoryItem(input: $input) {\n      accountFinancePaymentBatchCategoryItem {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation DeleteAccountFinancePaymentBatchCategoryItem($input: DeleteAccountFinancePaymentBatchCategoryItemInput!) {\n    deleteAccountFinancePaymentBatchCategoryItem(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY,\n  DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n} from \"./queries\"\n\n\nfunction AccountFinancePaymentBatchCategoryItems({ t, history, match }) {\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.finance_payment_batch_category_items.title')\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, {\n    variables: { account: accountId }\n  })\n  const [deleteAccountFinancePaymentBatchCategoryItem] = useMutation(DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM)\n\n  if (loading) return (\n    <AccountFinancePaymentBatchCategoryItemsBase>\n      <Card title={cardTitle}>\n        <Card.Body><p>{t('general.loading_with_dots')}</p></Card.Body>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase>\n        <Card title={cardTitle}>\n          <Card.Body><p>{t('general.error_sad_smiley')}</p></Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  let batchCategoryItems = data.accountFinancePaymentBatchCategoryItems\n\n    \n  // Empty list\n  if (!batchCategoryItems.edges.length) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.finance_payment_batch_category_items.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        hasCardBody={false}\n        pageInfo={batchCategoryItems.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: batchCategoryItems.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountFinancePaymentBatchCategoryItems.edges\n              const pageInfo = fetchMoreResult.accountFinancePaymentBatchCategoryItems.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    batchCategoryItems: {\n                      __typename: previousResult.accountFinancePaymentBatchCategoryItems.__typename,\n                      edges: [ ...previousResult.accountFinancePaymentBatchCategoryItems.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.year')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.month')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.category')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {batchCategoryItems.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.year}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.month}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.amountDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.financePaymentBatchCategory.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.description.replace(/(.{28})..+/, \"$1...\")}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/relations/accounts/${match.params.account_id}/finance_payment_batch_category_items/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button \n                      className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.finance_payment_batch_category_items.delete_confirm_msg\"),\n                          msgDescription: <p><br />{node.financePaymentBatchCategory.name} {node.amountDisplay} <br/>{node.description}</p>,\n                          msgSuccess: t('relations.account.finance_payment_batch_category_items.deleted'),\n                          deleteFunction: deleteAccountFinancePaymentBatchCategoryItem,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: { \n                              account: accountId\n                            }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItems))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA = Yup.object().shape({\n  financePaymentBatchCategory: Yup.string()\n    .required(t('yup.field_required')),\n  year: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  month: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  amount: Yup.number()\n    .required(t('yup.field_required')),\n  description: Yup.string(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountFinancePaymentBatchCategoryItemsForm = ({ t, history, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.year')} >\n            <Field type=\"text\" \n                  name=\"year\" \n                  className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.month')} >\n            <Field type=\"text\" \n                  name=\"month\" \n                  className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.amount')} >\n            <Field type=\"text\" \n                  name=\"amount\" \n                  className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.category')}>\n            <Field component=\"select\" \n                  name=\"financePaymentBatchCategory\" \n                  className={(errors.financePaymentBatchCategory) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.financePaymentBatchCategories.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentBatchCategory\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.description')} >\n            <Field type=\"text\" \n                  name=\"description\" \n                  className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n            {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, \n  CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM,\n  GET_INPUT_VALUES_QUERY \n} from './queries'\nimport { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountFinancePaymentBatchCategoryItemsForm from './AccountFinancePaymentBatchCategoryItemsForm'\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\n\nfunction AccountFinancePaymentBatchCategoryItemAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/finance_payment_batch_category_items`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addAccountFinancePaymentBatchCategoryItem] = useMutation(\n    CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n  )\n\n  if (loading) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n          <Card.Body>\n            {t(\"general.loading_with_dots\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n          <Card.Body>\n            {t(\"relations.account.finance_payment_batch_category_items.error_loading\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  const inputData = data\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n      <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n        <Formik\n          initialValues={{ \n            financePaymentBatchCategory: \"\",\n            year: new Date().getFullYear(),\n            month: new Date().getMonth() + 1,\n            amount: \"\",\n            description: \"\"\n          }}\n          validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              addAccountFinancePaymentBatchCategoryItem({ variables: {\n                input: {\n                  account: accountId, \n                  amount: values.amount,\n                  year: values.year,\n                  month: values.month,\n                  financePaymentBatchCategory: values.financePaymentBatchCategory,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.finance_payment_batch_category_items.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountFinancePaymentBatchCategoryItemsForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountFinancePaymentBatchCategoryItemsForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY, \n  UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n} from './queries'\nimport { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountFinancePaymentBatchCategoryItemsForm from './AccountFinancePaymentBatchCategoryItemsForm'\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\n\nfunction AccountFinancePaymentBatchCategoryItemEdit({ t, history, match }) {\n  const accountId = match.params.account_id\n  const accountFinancePaymentBatchCategoryItemId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/finance_payment_batch_category_items`\n  const cardTitle = t('relations.account.finance_payment_batch_category_items.title_edit')\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY, { variables: {\n    id: accountFinancePaymentBatchCategoryItemId\n  }})\n  const [updateAccountFinancePaymentBatchCategoryItem] = useMutation(\n    UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n  )\n\n  if (loading) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.loading_with_dots\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"relations.account.finance_payment_batch_category_items.error_loading\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  const inputData = data\n  const initialValues = data.accountFinancePaymentBatchCategoryItem\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            financePaymentBatchCategory: initialValues.financePaymentBatchCategory.id,\n            year: initialValues.year,\n            month: initialValues.month,\n            amount: initialValues.amount,\n            description: initialValues.description\n          }}\n          validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateAccountFinancePaymentBatchCategoryItem({ variables: {\n                input: {\n                  id: accountFinancePaymentBatchCategoryItemId, \n                  amount: values.amount,\n                  year: values.year,\n                  month: values.month,\n                  financePaymentBatchCategory: values.financePaymentBatchCategory,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.finance_payment_batch_category_items.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountFinancePaymentBatchCategoryItemsForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountFinancePaymentBatchCategoryItemsForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemEdit))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: String, $accountId: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status, account: $accountId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n// export const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n//   query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n//     accountSubscription(id:$id) {\n//       id\n//       organizationSubscription {\n//         id\n//         name\n//       }\n//       financePaymentMethod {\n//         id\n//         name\n//       }\n//       dateStart\n//       dateEnd\n//       note\n//       registrationFeePaid\n//       createdAt\n//     }\n//     organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//           code\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//     }\n//   }\n// `\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String, $accountId: ID!) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_INVOICE = gql`\n  mutation CreateFinanceInvoice($input: CreateFinanceInvoiceInput!) {\n    createFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nfunction AccountInvoicesBase({ t, match, history, children, account={}, pageHeaderButtonList=\"\" }) {\n  const accountId = match.params.account_id\n  let pageHeader\n  if (account) {\n    pageHeader = account.fullName\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={pageHeader} >\n            <div className='page-options d-flex'>\n              { pageHeaderButtonList }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n\n              <ProfileMenu \n                activeLink='invoices' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoicesBase))\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Card,\n  Icon,\n  Button,\n  Table,\n  Text\n} from \"tabler-react\";\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport { GET_ACCOUNT_INVOICES_QUERY } from \"./queries\"\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport { DELETE_FINANCE_INVOICE } from \"../../../finance/invoices/queries\"\nimport FinanceInvoiceStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport AccountInvoicesBase from './AccountInvoicesBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\n\nfunction AccountInvoices({ t, location, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.invoices.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <RelationsAccountsBack />\n    <ButtonAdd addUrl={`/relations/accounts/${accountId}/invoices/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_INVOICES_QUERY, {\n    variables: {accountId: accountId},\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteFinanceInvoice] = useMutation(DELETE_FINANCE_INVOICE)\n\n  // Loading\n  if (loading) return (\n    <AccountInvoicesBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountInvoicesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountInvoicesBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountInvoicesBase>\n    )\n  }\n\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  let financeInvoices = data.financeInvoices\n  const account = data.account\n  \n  return (\n    <AccountInvoicesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={financeInvoices.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeInvoices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeInvoices.edges\n              const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeInvoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeInvoices: {\n                      __typename: previousResult.financeInvoices.__typename,\n                      edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeInvoices.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceInvoiceStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.invoiceNumber} <br />\n                    <Text.Small color=\"gray\">{node.summary.trunc(35)}</Text.Small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateSent).format(dateFormat)} <br />\n                    <Text.Small color=\"gray\">{moment(node.dateDue).format(dateFormat)}</Text.Small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.balanceDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/finance/invoices/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n                          msgDescription: <p>{node.invoiceNumber}</p>,\n                          msgSuccess: t('finance.invoices.deleted'),\n                          deleteFunction: deleteFinanceInvoice,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_ACCOUNT_INVOICES_QUERY, variables: {accountId: accountId}},\n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountInvoicesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoices))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\n\nconst AccountInvoiceAddForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group label={t('general.finance_invoice_group')}>\n        <Field component=\"select\" \n              name=\"financeInvoiceGroup\" \n              className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n          {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.summary')}>\n        <Field type=\"text\" \n                name=\"summary\" \n                className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountInvoiceAddForm))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_INVOICE } from './queries'\nimport AccountInvoiceAddForm from './AccountInvoiceAddForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountInvoiceAdd({ t, match, history }) {\n  const account_id = match.params.account_id\n  const activeLink = \"invoices\"\n  const cardTitle = t('relations.account.invoices.title_add')\n  const returnUrl = `/relations/accounts/${account_id}/invoices`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY, {\n      variables: {\n        accountId: account_id\n      }\n    }\n  )\n  const [createInvoice] = useMutation(CREATE_ACCOUNT_INVOICE, {\n    // onCompleted = () => history.push('/finance/invoices/edit/')\n  }) \n\n  // Query\n  // Loading\n  if (loading) {\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.loading_with_dots')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  \n  console.log(data)\n  const account = data.account\n\n\n  return (\n    <RelationsAccountProfileBase activeLink={activeLink} user={account} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{\n            financeInvoiceGroup: \"\",\n            summary: \"\"\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createInvoice({ variables: {\n              input: {\n                account: account_id, \n                financeInvoiceGroup: values.financeInvoiceGroup,\n                summary: values.summary\n              }\n            }, refetchQueries: [\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.invoices.title_add')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push('/finance/invoices/edit/' + data.createFinanceInvoice.financeInvoice.id)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <AccountInvoiceAddForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </AccountInvoiceAddForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n\n    // <SiteWrapper>\n    //   <div className=\"my-3 my-md-5\">\n    //     <Container>\n    //       <Page.Header title={account.firstName + \" \" + account.lastName} />\n    //       <Grid.Row>\n    //           <Grid.Col md={9}>\n                \n    //           </Grid.Col>\n    //           <Grid.Col md={3}>\n    //             <ProfileMenu \n    //               activeLink='invoices'\n    //               accountId={match.params.account_id}\n    //             />\n    //           </Grid.Col>\n    //         </Grid.Row>\n    //       </Container>\n    //   </div>\n    // </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoiceAdd))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_MEMBERSHIPS_QUERY = gql`\n  query AccountMemberships($after: String, $before: String, $accountId: ID!) {\n    accountMemberships(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationMembership {\n            id\n            name\n          }\n          financePaymentMethod {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n    }\n  }\n`\n\nexport const GET_ACCOUNT_MEMBERSHIP_QUERY = gql`\n  query AccountMembership($id: ID!, $accountId: ID!, $after: String, $before: String, $archived: Boolean!) {\n    accountMembership(id:$id) {\n      id\n      organizationMembership {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n    }\n    organizationMemberships(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query MembershipInputValues($after: String, $before: String, $archived: Boolean!, $accountId: ID!) {\n    organizationMemberships(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n    }\n  }\n`","import React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nimport { GET_ACCOUNT_MEMBERSHIPS_QUERY } from \"./queries\"\n\nconst DELETE_ACCOUNT_MEMBERSHIP = gql`\n  mutation DeleteAccountMembership($input: DeleteAccountMembershipInput!) {\n    deleteAccountMembership(input: $input) {\n      ok\n    }\n  }\n`\n\n\nconst AccountMemberships = ({ t, history, match, archived=false }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Query query={GET_ACCOUNT_MEMBERSHIPS_QUERY} variables={{ archived: archived, accountId: match.params.account_id }}> \n        {({ loading, error, data, refetch, fetchMore }) => {\n          // Loading\n          if (loading) return <p>{t('general.loading_with_dots')}</p>\n          // Error\n          if (error) {\n            console.log(error)\n            return <p>{t('general.error_sad_smiley')}</p>\n          }\n\n          const account = data.account\n          const accountMemberships = data.accountMemberships\n\n          return (\n            <Container>\n              <Page.Header title={account.firstName + \" \" + account.lastName} >\n                <RelationsAccountsBack />\n              </Page.Header>\n              <Grid.Row>\n                <Grid.Col md={9}>\n                  <ContentCard \n                    cardTitle={t('relations.account.memberships.title')}\n                    pageInfo={accountMemberships.pageInfo}\n                    onLoadMore={() => {\n                      fetchMore({\n                        variables: {\n                          after: accountMemberships.pageInfo.endCursor\n                        },\n                        updateQuery: (previousResult, { fetchMoreResult }) => {\n                          const newEdges = fetchMoreResult.accountMemberships.edges\n                          const pageInfo = fetchMoreResult.accountMemberships.pageInfo\n\n                          return newEdges.length\n                            ? {\n                                // Put the new accountMemberships at the end of the list and update `pageInfo`\n                                // so we have the new `endCursor` and `hasNextPage` values\n                                accountMemberships: {\n                                  __typename: previousResult.accountMemberships.__typename,\n                                  edges: [ ...previousResult.accountMemberships.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            : previousResult\n                        }\n                      })\n                    }} \n                  >\n                    <Table>\n                      <Table.Header>\n                        <Table.Row key={v4()}>\n                          <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                          <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                          <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                          <Table.ColHeader>{t('general.payment_method')}</Table.ColHeader>\n                          <Table.ColHeader></Table.ColHeader> \n                        </Table.Row>\n                      </Table.Header>\n                      <Table.Body>\n                          {accountMemberships.edges.map(({ node }) => (\n                            <Table.Row key={v4()}>\n                              <Table.Col key={v4()}>\n                                {node.organizationMembership.name}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {node.dateStart}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {node.dateEnd}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {(node.financePaymentMethod) ? node.financePaymentMethod.name : \"\"}\n                              </Table.Col>\n                              <Table.Col className=\"text-right\" key={v4()}>\n                                <Link to={\"/relations/accounts/\" + match.params.account_id + \"/memberships/edit/\" + node.id}>\n                                  <Button className='btn-sm' \n                                          color=\"secondary\">\n                                    {t('general.edit')}\n                                  </Button>\n                                </Link>\n                              </Table.Col>\n                              <Mutation mutation={DELETE_ACCOUNT_MEMBERSHIP} key={v4()}>\n                                {(deleteAccountMembership, { data }) => (\n                                  <Table.Col className=\"text-right\" key={v4()}>\n                                    <button className=\"icon btn btn-link btn-sm\" \n                                      title={t('general.delete')} \n                                      href=\"\"\n                                      onClick={() => {\n                                        confirm_delete({\n                                          t: t,\n                                          msgConfirm: t(\"relations.account.memberships.delete_confirm_msg\"),\n                                          msgDescription: <p>{node.organizationMembership.name} {node.dateStart}</p>,\n                                          msgSuccess: t('relations.account.memberships.deleted'),\n                                          deleteFunction: deleteAccountMembership,\n                                          functionVariables: { variables: {\n                                            input: {\n                                              id: node.id\n                                            }\n                                          }, refetchQueries: [\n                                            {query: GET_ACCOUNT_MEMBERSHIPS_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n                                          ]}\n                                        })\n                                    }}>\n                                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                                    </button>\n                                  </Table.Col>\n                                )}\n                              </Mutation>\n                            </Table.Row>\n                          ))}\n                      </Table.Body>\n                    </Table>\n                  </ContentCard>\n                </Grid.Col>\n                <Grid.Col md={3}>\n                  <ProfileCardSmall user={account}/>\n                  <HasPermissionWrapper permission=\"add\"\n                                        resource=\"accountmembership\">\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/memberships/add\"}>\n                      <Button color=\"primary btn-block mb-6\">\n                              {/* //  onClick={() => history.push(\"/organization/memberships/add\")}> */}\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.memberships.add')}\n                      </Button>\n                    </Link>\n                  </HasPermissionWrapper>\n                  <ProfileMenu \n                    activeLink='memberships' \n                    account_id={match.params.account_id}\n                  />\n                </Grid.Col>\n              </Grid.Row>\n            </Container>\n          )\n        }}\n      </Query>\n    </div>\n  </SiteWrapper>\n)\n      \n        \nexport default withTranslation()(withRouter(AccountMemberships))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const MEMBERSHIP_SCHEMA = Yup.object().shape({\n  organizationMembership: Yup.string()\n    .required(t('yup.field_required')),\n  financePaymentMethod: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  //   .nullable(),\n  note: Yup.string(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountMembershipForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.membership')}>\n            <Field component=\"select\" \n                  name=\"organizationMembership\" \n                  className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationMemberships.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.payment_method')}>\n            <Field component=\"select\" \n                  name=\"financePaymentMethod\" \n                  className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financePaymentMethods.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Button\n          type=\"button\" \n          color=\"link\" \n          onClick={() => history.push(returnUrl)}\n        >\n            {t('general.cancel')}\n        </Button>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountMembershipForm))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_MEMBERSHIPS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { MEMBERSHIP_SCHEMA } from './yupSchema'\nimport AccountMembershipForm from './AccountMembershipForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nconst CREATE_ACCOUNT_MEMBERSHIP = gql`\n  mutation CreateAccountMembership($input: CreateAccountMembershipInput!) {\n    createAccountMembership(input: $input) {\n      accountMembership {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationMembership {\n          id\n          name\n        }\n        financePaymentMethod {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note     \n      }\n    }\n  }\n`\n\n\nclass AccountMembershipAdd extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Account membership add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const match = this.props.match\n    const account_id = match.params.account_id\n    const returnUrl = \"/relations/accounts/\" + account_id + \"/memberships\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n        <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false, accountId: account_id}} >\n          {({ loading, error, data, refetch }) => {\n            // Loading\n            if (loading) return <p>{t('general.loading_with_dots')}</p>\n            // Error\n            if (error) {\n              console.log(error)\n              return <p>{t('general.error_sad_smiley')}</p>\n            }\n            \n            console.log('query data')\n            console.log(data)\n            const inputData = data\n            const account = data.account\n\n            return (\n              <Container>\n               <Page.Header title={account.firstName + \" \" + account.lastName} />\n               <Grid.Row>\n                  <Grid.Col md={9}>\n                  <Card>\n                    <Card.Header>\n                      <Card.Title>{t('relations.account.memberships.title_add')}</Card.Title>\n                    </Card.Header>\n                      <Mutation mutation={CREATE_ACCOUNT_MEMBERSHIP} onCompleted={() => history.push(returnUrl)}> \n                      {(createMembership, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                organizationMembership: \"\",\n                                financePaymentMethod: \"\",\n                                dateStart: new Date(),\n                                note: \"\",\n                              }}\n                              validationSchema={MEMBERSHIP_SCHEMA}\n                              onSubmit={(values, { setSubmitting }, errors) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n                                  console.log(errors)\n\n                                  \n                                  let dateEnd\n                                  if (values.dateEnd) {\n                                    dateEnd = dateToLocalISO(values.dateEnd)\n                                  } else {\n                                    dateEnd = values.dateEnd\n                                  }\n\n                                  createMembership({ variables: {\n                                    input: {\n                                      account: account_id, \n                                      organizationMembership: values.organizationMembership,\n                                      financePaymentMethod: values.financePaymentMethod,\n                                      dateStart: dateToLocalISO(values.dateStart),\n                                      dateEnd: dateEnd,\n                                      note: values.note,\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_ACCOUNT_MEMBERSHIPS_QUERY, variables: {archived: false, accountId: account_id}}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('relations.account.memberships.toast_add_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                                <AccountMembershipForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  setFieldValue={setFieldValue}\n                                  setFieldTouched={setFieldTouched}\n                                  errors={errors}\n                                  values={values}\n                                  returnUrl={returnUrl}\n                                >\n                                  {console.log(errors)}\n                                </AccountMembershipForm>\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={3}>\n                    <HasPermissionWrapper permission=\"add\"\n                                          resource=\"accountmembership\">\n                      <Link to={returnUrl}>\n                        <Button color=\"primary btn-block mb-6\">\n                          <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                        </Button>\n                      </Link>\n                    </HasPermissionWrapper>\n                    <ProfileMenu account_id={account_id} activeLink='memberships'/>\n                  </Grid.Col>\n                </Grid.Row>\n              </Container>\n            )}}\n          </Query>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(AccountMembershipAdd))\n","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_MEMBERSHIPS_QUERY, GET_ACCOUNT_MEMBERSHIP_QUERY } from './queries'\nimport { MEMBERSHIP_SCHEMA } from './yupSchema'\nimport AccountMembershipForm from './AccountMembershipForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nconst UPDATE_ACCOUNT_MEMBERSHIP = gql`\n  mutation UpdateAccountMembership($input: UpdateAccountMembershipInput!) {\n    updateAccountMembership(input: $input) {\n      accountMembership {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationMembership {\n          id\n          name\n        }\n        financePaymentMethod {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n      }\n    }\n  }\n`\n\n\nclass AccountMembershipEdit extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Account membership add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const match = this.props.match\n    const id = match.params.id\n    const account_id = match.params.account_id\n    const returnUrl = \"/relations/accounts/\" + account_id + \"/memberships\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n        <Query query={GET_ACCOUNT_MEMBERSHIP_QUERY} variables = {{archived: false,  accountId: account_id, id: id}} >\n          {({ loading, error, data, refetch }) => {\n            // Loading\n            if (loading) return <p>{t('general.loading_with_dots')}</p>\n            // Error\n            if (error) {\n              console.log(error)\n              return <p>{t('general.error_sad_smiley')}</p>\n            }\n            \n            console.log('query data')\n            console.log(data)\n            const inputData = data\n            const account = data.account\n            const initialdata = data.accountMembership\n\n            let initialPaymentMethod = \"\"\n            if (initialdata.financePaymentMethod) {\n              initialPaymentMethod = initialdata.financePaymentMethod.id\n            }\n\n            return (\n              <Container>\n               <Page.Header title={account.firstName + \" \" + account.lastName} />\n               <Grid.Row>\n                  <Grid.Col md={9}>\n                  <Card>\n                    <Card.Header>\n                      <Card.Title>{t('relations.account.memberships.title_edit')}</Card.Title>\n                    </Card.Header>\n                      <Mutation mutation={UPDATE_ACCOUNT_MEMBERSHIP} onCompleted={() => history.push(returnUrl)}> \n                      {(updateMembership, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                organizationMembership: initialdata.organizationMembership.id,\n                                financePaymentMethod: initialPaymentMethod,\n                                dateStart: initialdata.dateStart,\n                                dateEnd: initialdata.dateEnd,\n                                note: initialdata.note,\n                                registrationFeePaid: initialdata.registrationFeePaid\n                              }}\n                              validationSchema={MEMBERSHIP_SCHEMA}\n                              onSubmit={(values, { setSubmitting }, errors) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n                                  console.log(errors)\n\n                                  \n                                  let dateEnd\n                                  if (values.dateEnd) {\n                                    dateEnd = dateToLocalISO(values.dateEnd)\n                                  } else {\n                                    dateEnd = values.dateEnd\n                                  }\n\n                                  updateMembership({ variables: {\n                                    input: {\n                                      id: id,\n                                      organizationMembership: values.organizationMembership,\n                                      financePaymentMethod: values.financePaymentMethod,\n                                      dateStart: dateToLocalISO(values.dateStart),\n                                      dateEnd: dateEnd,\n                                      note: values.note,\n                                      registrationFeePaid: values.registrationFeePaid\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_ACCOUNT_MEMBERSHIPS_QUERY, variables: {archived: false, accountId: account_id}}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('relations.account.memberships.toast_edit_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                                <AccountMembershipForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  setFieldValue={setFieldValue}\n                                  setFieldTouched={setFieldTouched}\n                                  errors={errors}\n                                  values={values}\n                                  returnUrl={returnUrl}\n                                >\n                                  {console.log(errors)}\n                                </AccountMembershipForm>\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={3}>\n                    <HasPermissionWrapper permission=\"change\"\n                                          resource=\"accountmembership\">\n                      <Link to={returnUrl}>\n                        <Button color=\"primary btn-block mb-6\">\n                          <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                        </Button>\n                      </Link>\n                    </HasPermissionWrapper>\n                    <ProfileMenu account_id={account_id} activeLink='memberships'/>\n                  </Grid.Col>\n                </Grid.Row>\n              </Container>\n            )}}\n          </Query>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(AccountMembershipEdit))\n","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Card,\n    Grid,\n  } from \"tabler-react\"\n\n\nclass LoadMoreOnBottomScroll extends Component {\n    componentDidMount() {\n      window.addEventListener(\"scroll\", this.handleOnScroll);\n    }\n  \n    componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.handleOnScroll);\n    }\n\n    handleOnScroll = () => {\n      // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n      var scrollTop =\n        (document.documentElement && document.documentElement.scrollTop) ||\n        document.body.scrollTop;\n      var scrollHeight =\n        (document.documentElement && document.documentElement.scrollHeight) ||\n        document.body.scrollHeight;\n      var clientHeight =\n        document.documentElement.clientHeight || window.innerHeight;\n      var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n      if (scrolledToBottom) {\n        const pageInfo = this.props.pageInfo\n        if (pageInfo) {\n          if (pageInfo.hasNextPage) {\n            this.props.onLoadMore()\n          }\n        }\n      }\n    }\n\n    render() {\n      const t = this.props.t\n      const onLoadMore = this.props.onLoadMore \n      const pageInfo = this.props.pageInfo\n      const children = this.props.children\n\n\n      return(\n        <div>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Card>\n                <Card.Body>\n                  {(!pageInfo) ? '':\n                    (pageInfo.hasNextPage) ? \n                      <Button \n                        link\n                        onClick={onLoadMore} \n                        >\n                        {t('general.load_more')}\n                      </Button>\n                    : t('general.loaded_all')\n                  }\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </div>\n      )\n    }\n}\n\nLoadMoreOnBottomScroll.defaultProps = {\n  onLoadMore: f=>f\n}\n  \nexport default withTranslation()(LoadMoreOnBottomScroll)\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\n\nfunction AccountNotesBase({ t, history, match, children, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ?\n                <ButtonBack returnUrl={`/relations/accounts/${accountId}/notes/`} />\n              :\n                <React.Fragment>\n                  <RelationsAccountsBack />\n                  <ButtonAdd addUrl={`/relations/accounts/${accountId}/notes/add`} className='ml-2' />\n                </React.Fragment>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='notes'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}    \n        \nexport default withTranslation()(withRouter(AccountNotesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_NOTES_QUERY = gql`\n  query AccountNotes($after: String, $before: String, $account: ID!, $noteType: String!) {\n    accountNotes(first: 15, before: $before, after: $after, account: $account, noteType: $noteType ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          note\n          injury\n          noteType\n          noteBy {\n            id\n            fullName\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ACCOUNT_NOTE_QUERY = gql`\n  query AccountNote($id: ID!) {\n    accountNote(id: $id) {\n      id\n      note\n      injury\n    }\n  }\n`\n\n\nexport const CREATE_ACCOUNT_NOTE = gql`\n  mutation CreateAccountNote($input: CreateAccountNoteInput!) {\n    createAccountNote(input: $input) {\n      accountNote {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_NOTE = gql`\n  mutation UpdateAccountNote($input: UpdateAccountNoteInput!) {\n    updateAccountNote(input: $input) {\n      accountNote {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_NOTE = gql`\n  mutation DeleteAccountNote($input: DeleteAccountNoteInput!) {\n    deleteAccountNote(input: $input) {\n      ok\n    }\n  }\n`\n","import CSLS from \"../../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables(accountId) {\n  let queryVars = {\n      account: accountId,\n      // noteType: noteType\n  }\n\n  let noteType = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)\n\n  queryVars.noteType = noteType  \n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport {\n  Button,\n  Badge,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { \n  GET_ACCOUNT_NOTES_QUERY,\n  DELETE_ACCOUNT_NOTE\n} from \"./queries\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\n\nfunction AccountNotes({ t, history, match }) {\n  let [noteType, setNoteType] = useState(localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE) || \"BACKOFFICE\")\n  // Set some initial value for noteType, if not found\n  if (!localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)) {\n    localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\")\n  } \n\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const accountId = match.params.account_id\n\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_ACCOUNT_NOTES_QUERY, {\n    variables: get_list_query_variables(accountId)\n  })\n  const [deleteAccountNote] = useMutation(DELETE_ACCOUNT_NOTE)\n\n  if (loading) return (\n    <AccountNotesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountNotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountNotesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountNotesBase>\n    )\n  }\n\n  let notes = data.accountNotes\n\n  return (\n    <AccountNotesBase>\n      <Grid.Row>\n        <Grid.Col>\n          <div className=\"float-right mb-4\">\n            <Button.List>\n              <Button color={(noteType === \"BACKOFFICE\") ? 'primary': 'secondary'}  \n                      size=\"\"\n                      onClick={() => {\n                        setNoteType(\"BACKOFFICE\")\n                        localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\")\n                        refetch(get_list_query_variables(accountId))\n                      }\n              }>\n                {t('relations.account.notes.backoffice')}\n              </Button>\n              <Button color={(noteType === \"INSTRUCTORS\") ? 'primary': 'secondary'} \n                      size=\"\" \n                      className=\"ml-2\" \n                      onClick={() => {\n                        setNoteType(\"INSTRUCTORS\")\n                        localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"INSTRUCTORS\")\n                        refetch(get_list_query_variables(accountId))\n                      }\n              }>\n                {t('relations.account.notes.instructors')}\n              </Button>\n            </Button.List>\n          </div>\n        </Grid.Col>\n      </Grid.Row>\n      <LoadMoreOnBottomScroll \n        pageInfo={notes.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: notes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountNotes.edges\n              const pageInfo = fetchMoreResult.accountNotes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountNotes: {\n                      __typename: previousResult.accountNotes.__typename,\n                      edges: [ ...previousResult.accountNotes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        {notes.edges.map(({ node }) => (\n          <Card>\n            <Card.Body>\n              {(node.injury) ? <Badge color=\"danger\" className=\"float-right\">{t(\"general.injury\")}</Badge> : \"\"}\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.note) }} />\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"danger\"\n                size=\"sm\"\n                className=\"float-right\"\n                outline\n                onClick={() => {\n                  confirm_delete({\n                    t: t,\n                    msgConfirm: t(\"relations.account.notes.delete_confirm_msg\"),\n                    msgDescription: <p><div dangerouslySetInnerHTML={{__html: node.note}} /></p>,\n                    msgSuccess: t('relations.account.notes.deleted'),\n                    deleteFunction: deleteAccountNote,\n                    functionVariables: { \n                      variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, \n                      refetchQueries: [\n                        {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId, noteType) },\n                      ]\n                    }\n                  })\n                }}\n              >\n                <Icon name=\"trash-2\" />\n              </Button>\n              <Link to={`/relations/accounts/${match.params.account_id}/notes/edit/${node.id}`}>\n                <Button\n                  color=\"secondary\"\n                  size=\"sm\"\n                  className=\"float-right mr-4\"\n                  outline\n                >\n                  {t(\"general.edit\")}\n                </Button>\n              </Link>              \n              <small className=\"text-muted float-right mr-4\">{moment(node.createdAt).format(dateTimeFormatMoment)}</small>\n              {node.noteBy.fullName} <br />\n            </Card.Footer>\n          </Card>\n        ))}\n      </LoadMoreOnBottomScroll>\n    </AccountNotesBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountNotes))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountNoteForm = ({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.note')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"note\"\n            initialValue={values.note}\n            init={tinymceBasicConf}\n            onBlur={(e) => { \n              setFieldTouched(\"note\", true)\n              setFieldValue(\"note\", e.target.getContent())\n            }}\n          />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"injury\" \n                checked={values.injury} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('general.injury')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"injury\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n            {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport { \n  GET_ACCOUNT_NOTES_QUERY, \n  CREATE_ACCOUNT_NOTE,\n} from './queries'\n// import { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountNoteForm from './AccountNoteForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport AccountNotesBase from \"./AccountNotesBase\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction AccountNoteAdd({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n  let noteType = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)\n  if (!noteType) {\n    localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\") \n  }\n\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/notes`\n  const cardTitle = t('relations.account.notes.title_add')\n\n  const [addNote] = useMutation(\n    CREATE_ACCOUNT_NOTE\n  )\n\n  return (\n    <AccountNotesBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            injury: false,\n            note: \"\"\n          }}\n          // validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              addNote({ variables: {\n                input: {\n                  account: accountId, \n                  noteType: noteType,\n                  injury: values.injury,\n                  note: values.note\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId)}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.notes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <AccountNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountNoteForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountNotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountNoteAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { \n  GET_ACCOUNT_NOTE_QUERY, \n  GET_ACCOUNT_NOTES_QUERY, \n  UPDATE_ACCOUNT_NOTE,\n} from './queries'\n// import { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountNoteForm from './AccountNoteForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction AccountNoteEdit({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n\n  const accountId = match.params.account_id\n  const noteId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/notes`\n  const cardTitle = t('relations.account.notes.title_edit')\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_NOTE_QUERY, {\n    variables: { id: noteId }\n  })\n  const [updateNote] = useMutation(\n    UPDATE_ACCOUNT_NOTE\n  )\n\n  if (loading) return (\n    <AccountNotesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountNotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountNotesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountNotesBase>\n    )\n  }\n\n  const note = data.accountNote\n\n  return (\n    <AccountNotesBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            injury: note.injury,\n            note: note.note\n          }}\n          // validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateNote({ variables: {\n                input: {\n                  id: noteId,\n                  injury: values.injury,\n                  note: values.note\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId)}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.notes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <AccountNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountNoteForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountNotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountNoteEdit))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountOrdersBase({ t, match, history, children, account={} }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='orders' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountOrdersBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ORDERS_QUERY = gql`\n  query FinanceOrders($after: String, $before: String, $status: String, $account: ID!) {\n    financeOrders(first: 15, before: $before, after: $after, status: $status, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          status\n          createdAt\n          total\n          totalDisplay\n          balanceDisplay\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n} from \"tabler-react\"\n\nimport { GET_ACCOUNT_ORDERS_QUERY } from \"./queries\"\nimport { DELETE_FINANCE_ORDER } from \"../../../finance/orders/queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\n\nfunction AccountClassDelete({t, match, node, account}) {\n  const [deleteOrder] = useMutation(DELETE_FINANCE_ORDER)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm pull-right\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.orders.delete_confirm_msg\"),\n          msgDescription: <p>\n            {t('general.order')}# {node.orderNumber}\n          </p>,\n          msgSuccess: t('relations.account.orders.delete_success'),\n          deleteFunction: deleteOrder,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_ORDERS_QUERY, \n                variables: { account: account.id } },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceOrderStatus from \"../../../finance/orders/FinanceOrderStatus\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountOrdersBase from \"./AccountOrdersBase\"\nimport AccountOrderDelete from \"./AccountOrderDelete\"\n\nimport { GET_ACCOUNT_ORDERS_QUERY } from \"./queries\"\n\n\nfunction AccountOrders({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormat = appSettings.dateTimeFormatMoment\n  const cardTitle = t('relations.account.orders.title')\n  const account_id = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ORDERS_QUERY, {\n    variables: {'account': account_id},\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountOrdersBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountOrdersBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountOrdersBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountOrdersBase>\n    )\n  }\n\n  console.log(\"AccountClasses data:\")\n  console.log(data)\n  const account = data.account\n  const financeOrders = data.financeOrders\n  \n  // Empty list\n  if (!financeOrders.edges.length) {\n    return (\n      <AccountOrdersBase account={account}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.orders.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountOrdersBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountOrdersBase account={account}>\n      <ContentCard \n        cardTitle={t('relations.account.orders.title')}\n        pageInfo={financeOrders.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeOrders.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeOrders.edges\n              const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeOrders at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeOrders: {\n                      __typename: previousResult.financeOrders.__typename,\n                      edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.order_number')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeOrders.edges.map(({ node }) => (        \n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceOrderStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    # {node.orderNumber}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.createdAt).format(dateTimeFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                  <AccountOrderDelete node={node} account={account} />\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      <Button className='btn-sm float-right' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountOrdersBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountOrders))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT = gql`\n  query Account($accountId: ID!){\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport { GET_ACCOUNT } from \"../../../../queries/accounts/get_account\"\n\n\nfunction AccountScheduleEventTicketsBase({t, history, match, children}) {\n  const accountId = match.params.account_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT, { variables: {\n    accountId: accountId\n  }})\n\n  if (loading) return (\n    <p>\n      {t(\"general.loading_with_dots\")}\n    </p>\n  )\n  if (error) return (\n    <p>\n      {t(\"relations.account.error_loading\")}\n    </p>\n  )\n\n  console.log(data)\n  const account = data.account\n  console.log(account)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {/* <HasPermissionWrapper permission=\"add\"\n                                    resource=\"accountclasspass\">\n                <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/add\"}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper> */}\n              <ProfileMenu \n                activeLink='tickets' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountScheduleEventTicketsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY = gql`\nquery AccountScheduleEventTickets($before:String, $after:String, $scheduleEventTicket:ID!) {\n  accountScheduleEventTickets(first: 100, before: $before, after: $after, scheduleEventTicket:$scheduleEventTicket) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        account {\n          id\n          fullName\n        }\n        cancelled\n        paymentConfirmation\n        infoMailSent\n        invoiceItems {\n          edges {\n            node {\n              financeInvoice {\n                id\n                invoiceNumber\n                summary\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query AccountsAndTicketInfo(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $ticketId: ID!\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n    scheduleEventTicket(id: $ticketId) {\n      id\n      displayPublic\n      name\n      description\n      price\n      scheduleEvent {\n        name\n        dateStart\n      }\n    }\n    accountScheduleEventTickets(first: 1000, scheduleEventTicket: $ticketId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          cancelled\n          paymentConfirmation\n          infoMailSent\n        }\n      }\n    }\n  }\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n\nexport const ADD_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\nmutation CreateAccountScheduleEventTicket($input:CreateAccountScheduleEventTicketInput!) {\n  createAccountScheduleEventTicket(input: $input) {\n    accountScheduleEventTicket {\n      id\n    }\n  }\n}\n`\n\n\nexport const UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\n  mutation UpdateAccountScheduleEventTicket($input:UpdateAccountScheduleEventTicketInput!) {\n    updateAccountScheduleEventTicket(input: $input) {\n      accountScheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n// export const DELETE_SCHEDULE_EVENT_TICKET = gql`\n//   mutation DeleteScheduleEventTicket($input: DeleteScheduleEventTicketInput!) {\n//     deleteScheduleEventTicket(input: $input) {\n//       ok\n//     }\n//   }\n// `\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY = gql`\n  query AccountScheduleEventTickets($after: String, $before: String, $account: ID!) {\n    accountScheduleEventTickets(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          cancelled\n          infoMailSent\n          scheduleEventTicket {\n            id\n            name\n            scheduleEvent {\n              id\n              name\n              dateStart\n              organizationLocation {\n                name\n              }\n            }\n          }\n          invoiceItems(first:1) {\n            edges {\n              node {\n                financeInvoice {\n                  id\n                  invoiceNumber\n                  status\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport AccountScheduleEventTicketsBase from \"./AccountScheduleEventTicketsBase\"\n\nimport { UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET } from \"../../../schedule/events/tickets/customers/queries\"\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\n\n\n\nfunction AccountScheduleEventTickets({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t('relations.account.event_tickets.title')\n\n  const accountId = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, { variables: {\n    account: accountId\n  }})\n  const [updateAccountScheduleEventTicket] = useMutation(UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET)\n\n\n  if (loading) return (\n    <AccountScheduleEventTicketsBase>\n      {t(\"general.loading_with_dots\")}\n    </AccountScheduleEventTicketsBase>\n  )\n  if (error) return (\n    <AccountScheduleEventTicketsBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </AccountScheduleEventTicketsBase>\n  )\n\n  const accountScheduleEventTickets = data.accountScheduleEventTickets\n\n  // Empty list\n  if (!accountScheduleEventTickets.edges.length) {\n    return (\n      <AccountScheduleEventTicketsBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.event_tickets.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountScheduleEventTicketsBase>\n    )\n  }\n\n  return (\n    <AccountScheduleEventTicketsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={accountScheduleEventTickets.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountScheduleEventTickets.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountScheduleEventTickets.edges\n              const pageInfo = fetchMoreResult.accountScheduleEventTickets.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountScheduleEventTickets at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountScheduleEventTickets: {\n                      __typename: previousResult.accountScheduleEventTickets.__typename,\n                      edges: [ ...previousResult.accountScheduleEventTickets.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.ticket')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n              <Table.ColHeader>{t('schedule.events.tickets.info_mail_sent')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountScheduleEventTickets.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    {node.scheduleEventTicket.scheduleEvent.name} <br />\n                    <Badge>{node.scheduleEventTicket.name}</Badge> {\" \"}\n                    {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.scheduleEventTicket.scheduleEvent.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.invoiceItems.edges.length) ? \n                      <span>\n                        <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                          {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber}\n                        </Link> <br />\n                        <FinanceInvoicesStatus status={node.invoiceItems.edges[0].node.financeInvoice.status} />\n                        \n                      </span>\n                      : \"\"\n                    }\n                    \n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    {node.dateStart}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dateEnd}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.classesRemainingDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col> */}\n                  <Table.Col>\n                    <BadgeBoolean value={node.infoMailSent} />\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.cancelled) ?\n                      <Button \n                        className=\"pull-right\"\n                        color=\"warning\"\n                        onClick={() =>\n                          updateAccountScheduleEventTicket({ variables: {\n                            input: {\n                              id: node.id,\n                              cancelled: false\n                            }\n                          }, refetchQueries: [\n                            { \n                              query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, \n                              variables: { account: accountId }\n                            },\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.events.tickets.customers.uncancelled')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                            }\n                          )\n                        }\n                      >\n                        {t(\"general.uncancel\")}\n                      </Button>\n                    :\n                      <Button \n                        className=\"pull-right\"\n                        color=\"warning\"\n                        onClick={() =>\n                          updateAccountScheduleEventTicket({ variables: {\n                            input: {\n                              id: node.id,\n                              cancelled: true\n                            }\n                          }, refetchQueries: [\n                              { \n                                query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, \n                                variables: { account: accountId }\n                              },\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.events.tickets.customers.cancelled')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                            })\n                          }\n                        >\n                          {t(\"general.cancel\")}\n                        </Button>\n                    }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountScheduleEventTicketsBase>\n  )\n}\n\n\n\n// const AccountClasspasses = ({ t, history, match, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Query query={GET_ACCOUNT_CLASSPASSES_QUERY} variables={{ archived: archived, accountId: match.params.account_id }} \n//         fetchPolicy=\"network-only\"> \n//         {({ loading, error, data, refetch, fetchMore }) => {\n//           // Loading\n//           if (loading) return <p>{t('general.loading_with_dots')}</p>\n//           // Error\n//           if (error) {\n//             console.log(error)\n//             return <p>{t('general.error_sad_smiley')}</p>\n//           }\n\n//           const account = data.account\n//           const accountClasspasses = data.accountClasspasses\n\n//           return (\n//             <Container>\n//               <Page.Header title={account.firstName + \" \" + account.lastName} >\n//                 <RelationsAccountsBack />\n//               </Page.Header>\n//               <Grid.Row>\n//                 <Grid.Col md={9}>\n//                   <ContentCard \n//                     cardTitle={t('relations.account.classpasses.title')}\n//                     pageInfo={accountClasspasses.pageInfo}\n//                     onLoadMore={() => {\n//                       fetchMore({\n//                         variables: {\n//                           after: accountClasspasses.pageInfo.endCursor\n//                         },\n//                         updateQuery: (previousResult, { fetchMoreResult }) => {\n//                           const newEdges = fetchMoreResult.accountClasspasses.edges\n//                           const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n//                           return newEdges.length\n//                             ? {\n//                                 // Put the new accountClasspasses at the end of the list and update `pageInfo`\n//                                 // so we have the new `endCursor` and `hasNextPage` values\n//                                 accountClasspasses: {\n//                                   __typename: previousResult.accountClasspasses.__typename,\n//                                   edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n//                                   pageInfo\n//                                 }\n//                               }\n//                             : previousResult\n//                         }\n//                       })\n//                     }} \n//                   >\n//                     <Table>\n//                       <Table.Header>\n//                         <Table.Row key={v4()}>\n//                           <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n//                           <Table.ColHeader></Table.ColHeader> \n//                         </Table.Row>\n//                       </Table.Header>\n//                       <Table.Body>\n//                           {accountClasspasses.edges.map(({ node }) => (\n//                             <Table.Row key={v4()}>\n//                               <Table.Col key={v4()}>\n//                                 {node.organizationClasspass.name}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.dateStart}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.dateEnd}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.classesRemainingDisplay}\n//                               </Table.Col>\n//                               <Table.Col className=\"text-right\" key={v4()}>\n//                                 <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n//                                   <Button className='btn-sm' \n//                                           color=\"secondary\">\n//                                     {t('general.edit')}\n//                                   </Button>\n//                                 </Link>\n//                               </Table.Col>\n//                               <Mutation mutation={DELETE_ACCOUNT_CLASSPASS} key={v4()}>\n//                                 {(deleteAccountClasspass, { data }) => (\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     <button className=\"icon btn btn-link btn-sm\" \n//                                       title={t('general.delete')} \n//                                       href=\"\"\n//                                       onClick={() => {\n//                                         confirm_delete({\n//                                           t: t,\n//                                           msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n//                                           msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n//                                           msgSuccess: t('relations.account.classpasses.deleted'),\n//                                           deleteFunction: deleteAccountClasspass,\n//                                           functionVariables: { variables: {\n//                                             input: {\n//                                               id: node.id\n//                                             }\n//                                           }, refetchQueries: [\n//                                             {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n//                                           ]}\n//                                         })\n//                                     }}>\n//                                       <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n//                                     </button>\n//                                   </Table.Col>\n//                                 )}\n//                               </Mutation>\n//                             </Table.Row>\n//                           ))}\n//                       </Table.Body>\n//                     </Table>\n//                   </ContentCard>\n//                 </Grid.Col>\n//                 <Grid.Col md={3}>\n//                   <ProfileCardSmall user={account}/>\n//                   <HasPermissionWrapper permission=\"add\"\n//                                         resource=\"accountclasspass\">\n//                     <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/add\"}>\n//                       <Button color=\"primary btn-block mb-6\">\n//                               {/* //  onClick={() => history.push(\"/organization/classpasses/add\")}> */}\n//                         <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n//                       </Button>\n//                     </Link>\n//                   </HasPermissionWrapper>\n//                   <ProfileMenu \n//                     activeLink='classpasses' \n//                     account_id={match.params.account_id}\n//                   />\n//                 </Grid.Col>\n//               </Grid.Row>\n//             </Container>\n//           )\n//         }}\n//       </Query>\n//     </div>\n//   </SiteWrapper>\n// )\n      \n        \nexport default withTranslation()(withRouter(AccountScheduleEventTickets))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTIONS_QUERY = gql`\n  query AccountSubscriptions($after: String, $before: String, $accountId: ID!) {\n    accountSubscriptions(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n          }\n          financePaymentMethod {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          creditTotal\n          registrationFeePaid\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n    accountSubscription(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query SubscriptionInputValues($after: String, $before: String, $archived: Boolean!, $accountId: ID!) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n\nexport const GET_ACCOUNT_QUERY = gql`\n  query Account($accountId: ID!) {\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation CreateAccountSubscription($input: CreateAccountSubscriptionInput!) {\n    createAccountSubscription(input: $input) {\n      accountSubscription {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationSubscription {\n          id\n          name\n        }\n        financePaymentMethod {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n        registrationFeePaid        \n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation UpdateAccountSubscription($input: UpdateAccountSubscriptionInput!) {\n    updateAccountSubscription(input: $input) {\n      accountSubscription {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationSubscription {\n          id\n          name\n        }\n        financePaymentMethod {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n        registrationFeePaid        \n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation DeleteAccountSubscription($input: DeleteAccountSubscriptionInput!) {\n    deleteAccountSubscription(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, DELETE_ACCOUNT_SUBSCRIPTION } from \"./queries\"\n\n\nfunction AccountSubscriptions({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.subscriptions.title')\n  const activeLink = \"subscriptions\"\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTIONS_QUERY, {\n    variables: {accountId: accountId}\n  })\n  const [deleteAccountSubscription] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountSubscriptions = data.accountSubscriptions\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountsubscription\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/subscriptions/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.subscriptions.title')}\n        pageInfo={accountSubscriptions.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountSubscriptions.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountSubscriptions.edges\n              const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountSubscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountSubscriptions: {\n                      __typename: previousResult.accountSubscriptions.__typename,\n                      edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.payment_method')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.credits')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountSubscriptions.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.organizationSubscription.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.Enddate && moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.financePaymentMethod) ? node.financePaymentMethod.name : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.creditTotal}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/subscriptions/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.subscriptions.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationSubscription.name} {node.dateStart}</p>,\n                          msgSuccess: t('relations.account.subscriptions.deleted'),\n                          deleteFunction: deleteAccountSubscription,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountSubscriptions))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  organizationSubscription: Yup.string()\n    .required(t('yup.field_required')),\n  financePaymentMethod: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  registrationFeePaid: Yup.boolean(),\n  note: Yup.string(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nimport ButtonFormCancel from \"../../../ui/ButtonFormCancel\"\n\n\nconst AccountSubscriptionForm = ({ t, history, create, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.subscription')}>\n            <Field component=\"select\" \n                  name=\"organizationSubscription\" \n                  className={(errors.organizationSubscription) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationSubscriptions.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationSubscription\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.payment_method')}>\n            <Field component=\"select\" \n                  name=\"financePaymentMethod\" \n                  className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financePaymentMethods.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"note\"\n            initialValue={values.note}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"note\", e.target.getContent())\n              setFieldTouched(\"note\", true, true)\n            }}\n          />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(create) ? \"\" : \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"registrationFeePaid\" \n                checked={values.registrationFeePaid} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('relations.account.subscriptions.registration_fee_paid')}</span>\n            </Form.Label>\n          <ErrorMessage name=\"registrationFeePaid\" component=\"div\" />   \n        </Form.Group> \n      }\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionForm))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport AccountSubscriptionForm from './AccountSubscriptionForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountSubscriptionAdd({t, history, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"subscriptions\"\n  const cardTitle = t('relations.account.subscriptions.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, {\n    variables: { archived: false, accountId: accountId }\n  })\n  const [createAccountSubscription] = useMutation(CREATE_ACCOUNT_SUBSCRIPTION)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationSubscription: \"\",\n              financePaymentMethod: \"\",\n              dateStart: new Date(),\n              note: \"\",\n              registrationFeePaid: false\n            }}\n            validationSchema={SUBSCRIPTION_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n                \n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                createAccountSubscription({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationSubscription: values.organizationSubscription,\n                    financePaymentMethod: values.financePaymentMethod,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd,\n                    note: values.note\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const subscriptionId = data.createAccountSubscription.accountSubscription.id\n                    history.push(`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}`)\n                    toast.success((t('relations.account.subscriptions.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountSubscriptionForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountSubscriptionForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\n\n// class AccountSubscriptionAdd extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Account subscription add props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const history = this.props.history\n//     const match = this.props.match\n//     const accountId = match.params.accountId\n//     const returnUrl = \"/relations/accounts/\" + accountId + \"/subscriptions\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//         <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false, accountId: accountId}} >\n//           {({ loading, error, data, refetch }) => {\n//             // Loading\n//             if (loading) return <p>{t('general.loading_with_dots')}</p>\n//             // Error\n//             if (error) {\n//               console.log(error)\n//               return <p>{t('general.error_sad_smiley')}</p>\n//             }\n            \n//             console.log('query data')\n//             console.log(data)\n//             const inputData = data\n//             const account = data.account\n\n//             return (\n//               <Container>\n//                <Page.Header title={account.firstName + \" \" + account.lastName} />\n//                <Grid.Row>\n//                   <Grid.Col md={9}>\n//                   <Card>\n//                     <Card.Header>\n//                       <Card.Title>{t('relations.account.subscriptions.title_add')}</Card.Title>\n//                     </Card.Header>\n//                       <Mutation mutation={CREATE_ACCOUNT_SUBSCRIPTION} onCompleted={() => history.push(returnUrl)}> \n//                       {(createSubscription, { data }) => (\n//                           <Formik\n//                               initialValues={{ \n//                                 organizationSubscription: \"\",\n//                                 financePaymentMethod: \"\",\n//                                 dateStart: new Date(),\n//                                 note: \"\",\n//                                 registrationFeePaid: false\n//                               }}\n//                               validationSchema={SUBSCRIPTION_SCHEMA}\n//                               onSubmit={(values, { setSubmitting }, errors) => {\n//                                   console.log('submit values:')\n//                                   console.log(values)\n//                                   console.log(errors)\n\n                                  \n//                                   let dateEnd\n//                                   if (values.dateEnd) {\n//                                     dateEnd = dateToLocalISO(values.dateEnd)\n//                                   } else {\n//                                     dateEnd = values.dateEnd\n//                                   }\n\n//                                   createSubscription({ variables: {\n//                                     input: {\n//                                       account: accountId, \n//                                       organizationSubscription: values.organizationSubscription,\n//                                       financePaymentMethod: values.financePaymentMethod,\n//                                       dateStart: dateToLocalISO(values.dateStart),\n//                                       dateEnd: dateEnd,\n//                                       note: values.note,\n//                                       registrationFeePaid: values.registrationFeePaid\n//                                     }\n//                                   }, refetchQueries: [\n//                                       {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n//                                   ]})\n//                                   .then(({ data }) => {\n//                                       console.log('got data', data)\n//                                       toast.success((t('relations.account.subscriptions.toast_add_success')), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error)\n//                                       setSubmitting(false)\n//                                     })\n//                               }}\n//                               >\n//                               {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n//                                 <AccountSubscriptionForm\n//                                   inputData={inputData}\n//                                   isSubmitting={isSubmitting}\n//                                   setFieldValue={setFieldValue}\n//                                   setFieldTouched={setFieldTouched}\n//                                   errors={errors}\n//                                   values={values}\n//                                   returnUrl={returnUrl}\n//                                 >\n//                                   {console.log(errors)}\n//                                 </AccountSubscriptionForm>\n//                               )}\n//                           </Formik>\n//                       )}\n//                       </Mutation>\n//                     </Card>\n//                   </Grid.Col>\n//                   <Grid.Col md={3}>\n//                     <HasPermissionWrapper permission=\"add\"\n//                                           resource=\"accountsubscription\">\n//                       <Link to={returnUrl}>\n//                         <Button color=\"primary btn-block mb-6\">\n//                           <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                         </Button>\n//                       </Link>\n//                     </HasPermissionWrapper>\n//                     <ProfileMenu \n//                       activeLink='subscriptions'\n//                       accountId={match.params.accountId}\n//                     />\n//                   </Grid.Col>\n//                 </Grid.Row>\n//               </Container>\n//             )}}\n//           </Query>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionAdd))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n// position: top or bottom\n// tabs: [[name, title, link], ...]\n// active: active tab name\n\nfunction CardTabs({ t, position=\"top\", tabs, active}) {\n  let class_tabs_position = \"card-tabs-top\"\n  switch(position) {\n    case \"top\":\n      break\n    case \"bottom\":\n      class_tabs_position = \"card-tabs-top\"\n      break\n    default:\n      break\n  }   \n\n  return (\n    <div className={`card-tabs ${class_tabs_position}`}>\n      {\n        tabs.map(({name, title, link}) => (\n          <Link key={v4()} to={link} className={`card-tabs-item ${(name === active) ? \"active\": \"\"}`}>\n            <h3 className=\"card-title\"> {title} </h3>\n          </Link>\n        ))\n      }\n    </div>\n  )\n}\n\nexport default withTranslation()(CardTabs)\n\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../../ui/CardTabs\"\n\nfunction AccountSubscriptionEditTabs({ t, active, account_id, subscription_id}) {\n\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"relations.account.subscriptions.menu.general\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}`\n          },\n          {\n            name: \"pauses\", \n            title: t(\"relations.account.subscriptions.menu.pauses\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/pauses`\n          },\n          {\n            name: \"blocks\", \n            title: t(\"relations.account.subscriptions.menu.blocks\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/blocks`\n          },\n          {\n            name: \"alt_prices\", \n            title: t(\"relations.account.subscriptions.menu.alt_prices\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/alt_prices`\n          },\n          {\n            name: \"invoices\", \n            title: t(\"relations.account.subscriptions.menu.invoices\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/invoices`\n          },\n          {\n            name: \"credits\", \n            title: t(\"relations.account.subscriptions.menu.credits\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/credits`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(AccountSubscriptionEditTabs)\n\n\n\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\n\nimport ProfileCardSmall from \"../../../../ui/ProfileCardSmall\"\nimport ProfileMenu from \"../../ProfileMenu\"\nimport moment from 'moment'\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\n\nfunction AccountSubscriptionEditBaseBase({t, history, match, children, returnUrl, account=null, subscription=null, activeTab}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = (subscription) ? \n    <span className=\"text-muted\">\n      - {subscription.organizationSubscription.name + \" \" + moment(subscription.dateStart).format(dateFormat)} - {subscription.creditTotal} {t(\"general.credits\")}\n    </span> : \"\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={(account) ? account.firstName + \" \" + account.lastName : \"\"} >\n            <div className='page-options d-flex'>\n              {(returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\"}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('relations.account.subscriptions.title_edit')} {cardTitle}</Card.Title>\n                </Card.Header>\n                <AccountSubscriptionEditTabs \n                  account_id={accountId}\n                  subscription_id={subscriptionId}\n                  active={activeTab}\n                />\n                {children}\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {/* <HasPermissionWrapper permission=\"change\"\n                                    resource=\"accountsubscription\">\n                <Link to={returnUrl}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper> */}\n              <ProfileMenu \n                activeLink='subscriptions'\n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBaseBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from '../queries'\nimport AccountSubscriptionEditBaseBase from \"./AccountSubscriptionEditBaseBase\"\n\n\nfunction AccountSubscriptionEditBase({t, history, match, children, activeTab, returnUrl}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      accountId: accountId,\n      id: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab} returnUrl={returnUrl}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditBaseBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab} returnUrl={returnUrl}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditBaseBase>\n  )\n\n  console.log(data)\n  const account = data.account\n  const subscription = data.accountSubscription\n\n  return (\n    <AccountSubscriptionEditBaseBase \n      activeTab={activeTab} \n      account={account} \n      subscription={subscription}\n      returnUrl={returnUrl}  \n    >\n      {children}\n    </AccountSubscriptionEditBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBase))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_ACCOUNT_SUBSCRIPTION_QUERY, UPDATE_ACCOUNT_SUBSCRIPTION } from '../queries'\nimport { SUBSCRIPTION_SCHEMA } from '../yupSchema'\nimport AccountSubscriptionForm from '../AccountSubscriptionForm'\n\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport AccountSubscriptionEditBase from \"./AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEdit({t, match, history}) {\n  const id = match.params.subscription_id\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"general\"\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      archived: false,\n      accountId: accountId,\n      id: id\n    }\n  })\n\n  const [ updateSubscription ] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION)\n  \n  if (loading) return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditBase>\n  )\n\n  const inputData = data\n  const initialdata = data.accountSubscription\n\n  let initialPaymentMethod = \"\"\n  if (initialdata.financePaymentMethod) {\n    initialPaymentMethod = initialdata.financePaymentMethod.id\n  }\n  \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialdata.dateStart) {\n    dateStart = new Date(initialdata.dateStart)\n  }\n  if (initialdata.dateEnd) {\n    dateEnd = new Date(initialdata.dateEnd)\n  }\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      <Formik\n        initialValues={{ \n          organizationSubscription: initialdata.organizationSubscription.id,\n          financePaymentMethod: initialPaymentMethod,\n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          note: initialdata.note,\n          registrationFeePaid: initialdata.registrationFeePaid\n        }}\n        validationSchema={SUBSCRIPTION_SCHEMA}\n        onSubmit={(values, { setSubmitting }, errors) => {\n            console.log('submit values:')\n            console.log(values)\n            console.log(errors)\n\n            \n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateSubscription({ variables: {\n              input: {\n                id: id,\n                organizationSubscription: values.organizationSubscription,\n                financePaymentMethod: values.financePaymentMethod,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd,\n                note: values.note,\n                registrationFeePaid: values.registrationFeePaid\n              }\n            }, refetchQueries: [\n                {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.subscriptions.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n          <AccountSubscriptionForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldValue={setFieldValue}\n            setFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </AccountSubscriptionForm>\n        )}\n      </Formik>\n    </AccountSubscriptionEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEdit))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY = gql`\nquery AccountSubscriptionAltPrices($before:String, $after:String, $accountSubscription: ID!) {\n  accountSubscriptionAltPrices(before: $before, after: $after, accountSubscription:$accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        subscriptionYear\n        subscriptionMonth\n        amount\n        amountDisplay\n        description\n        note\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY = gql`\nquery AccountSubscriptionAltPrice($id: ID!) {\n  accountSubscriptionAltPrice(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    subscriptionYear\n    subscriptionMonth\n    amount\n    description\n    note\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation DeleteAccountSubscriptionAltPrice($input: DeleteAccountSubscriptionAltPriceInput!) {\n    deleteAccountSubscriptionAltPrice(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\nimport ProfileCardSmall from \"../../../../ui/ProfileCardSmall\"\nimport ProfileMenu from \"../../ProfileMenu\"\nimport moment from 'moment'\n\n\nfunction AccountSubscriptionEditBaseBase({\n  t, \n  history, \n  match, \n  children, \n  account=null, \n  subscription=null, \n  pageInfo, \n  onLoadMore, \n  activeTab,\n  returnUrl,\n  pageHeaderButtonList=\"\"}\n  ){\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = (subscription) ? \n    <span className=\"text-muted\">\n      - {subscription.organizationSubscription.name + \" \" + moment(subscription.dateStart).format(dateFormat)} - {subscription.creditTotal} {t(\"general.credits\")}\n    </span> : \"\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={(account) ? account.firstName + \" \" + account.lastName : \"\"} >\n            <div className='page-options d-flex'>\n              {(returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\"}\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <ContentCard \n                cardTitle={<span>{t('relations.account.subscriptions.title_edit')} {cardTitle}</span>}\n                pageInfo={pageInfo}\n                onLoadMore={onLoadMore}\n                hasCardBody={false}\n                cardTabs={<AccountSubscriptionEditTabs \n                  account_id={accountId}\n                  subscription_id={subscriptionId}\n                  active={activeTab} /> }\n              >\n                {children}\n              </ContentCard>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='subscriptions'\n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBaseBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from '../queries'\nimport AccountSubscriptionEditListBaseBase from \"./AccountSubscriptionEditListBaseBase\"\n\n\nfunction AccountSubscriptionEditListBase({t, history, match, children, pageInfo, onLoadMore, activeTab, returnUrl, pageHeaderButtonList=\"\"}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      accountId: accountId,\n      id: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBaseBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBaseBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBaseBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBaseBase>\n  )\n\n  console.log(data)\n  const account = data.account\n  const subscription = data.accountSubscription\n\n  return (\n    <AccountSubscriptionEditListBaseBase \n      activeTab={activeTab} \n      account={account} \n      subscription={subscription}\n      pageInfo={pageInfo}\n      onLoaMore={onLoadMore}\n      returnUrl={returnUrl}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      {children}\n    </AccountSubscriptionEditListBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditListBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE, GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditAltPriceDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionAltPrice] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.alt_prices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.alt_prices.delete_success'),\n          deleteFunction: deleteAccountSubscriptionAltPrice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport ButtonAdd from '../../../../../ui/ButtonAdd'\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditAltPriceDelete from \"./AccountSubscriptionEditAltPriceDelete\"\n\n\nfunction AccountSubscriptionEditAltPrices({t, match, history}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"alt_prices\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/add`} \n    className=\"ml-2\"\n   />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionAltPrices = data.accountSubscriptionAltPrices\n  const pageInfo = data.accountSubscriptionAltPrices.pageInfo\n\n    // Empty list\n    if (!accountSubscriptionAltPrices.edges.length) { return (\n      <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card.Body>{t('relations.account.subscriptions.alt_prices.empty_list')}</Card.Body>\n      </AccountSubscriptionEditListBase>\n    )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionAltPrices.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionAltPrices.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionAltPrices.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionAltPrices: {\n                __typename: previousResult.accountSubscriptionAltPrices.__typename,\n                edges: [ ...previousResult.accountSubscriptionAltPrices.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.subscription_year')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.subscription_month')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionAltPrices.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.subscriptionYear}\n                </Table.Col>\n                <Table.Col>\n                  {node.subscriptionMonth}\n                </Table.Col>\n                <Table.Col>\n                  {node.amountDisplay}\n                </Table.Col>\n                <Table.Col>\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditAltPriceDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPrices))\n","import * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  amount: Yup.number()\n    .required()\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditAltPriceBase({ t, history, match, children}) {\n  const activeTab = \"alt_prices\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\n\n\nfunction AccountSubscriptionEditAltPriceForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.alt_prices.add')\n  } else {\n    title = t('relations.account.subscriptions.alt_prices.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n                <Field type=\"text\" \n                    name=\"amount\" \n                    className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.note')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"note\"\n                initialValue={values.note}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"note\", e.target.getContent())\n                  setFieldTouched(\"note\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditAltPriceBase from \"./AccountSubscriptionEditAltPriceBase\"\nimport AccountSubscriptionEditAltPriceForm from \"./AccountSubscriptionEditAltPriceForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation CreateAccountSubscriptionAltPrice($input:CreateAccountSubscriptionAltPriceInput!) {\n    createAccountSubscriptionAltPrice(input: $input) {\n      accountSubscriptionAltPrice {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditAltPriceAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n\n  const [addSubscriptionAltPrice] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditAltPriceBase>\n      <Formik\n        initialValues={{ \n          subscriptionYear: new Date().getFullYear(),\n          subscriptionMonth: new Date().getMonth() + 1,\n          amount: 0,\n          description: \"\",\n          note: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionAltPrice({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              amount: values.amount,\n              description: values.description,\n              note: values.note,\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.alt_prices.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditAltPriceForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditAltPriceBase from \"./AccountSubscriptionEditAltPriceBase\"\nimport AccountSubscriptionEditAltPriceForm from \"./AccountSubscriptionEditAltPriceForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation UpdateAccountSubscriptionAltPrice($input:UpdateAccountSubscriptionAltPriceInput!) {\n    updateAccountSubscriptionAltPrice(input: $input) {\n      accountSubscriptionAltPrice {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditAltPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionAltPrice] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditAltPriceBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditAltPriceBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditAltPriceBase>\n    )\n  }\n\n  const accountSubscriptionAltPrice = data.accountSubscriptionAltPrice\n\n\n  return (\n    <AccountSubscriptionEditAltPriceBase>\n      <Formik\n        initialValues={{ \n          subscriptionYear: accountSubscriptionAltPrice.subscriptionYear,\n          subscriptionMonth: accountSubscriptionAltPrice.subscriptionMonth,\n          amount: accountSubscriptionAltPrice.amount,\n          description: accountSubscriptionAltPrice.description,\n          note: accountSubscriptionAltPrice.note\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionAltPrice({ variables: {\n            input: {\n              id: id,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              amount: values.amount,\n              description: values.description,\n              note: values.note,\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.alt_prices.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditAltPriceForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY = gql`\nquery AccountSubscriptionBlocks($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionBlocks(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        dateStart\n        dateEnd\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY = gql`\nquery AccountSubscriptionBlock($id: ID!) {\n  accountSubscriptionBlock(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    dateStart\n    dateEnd\n    description\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation DeleteAccountSubscriptionBlock($input: DeleteAccountSubscriptionBlockInput!) {\n    deleteAccountSubscriptionBlock(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_BLOCK, GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditBlockDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionBlock] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_BLOCK)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.blocks.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.blocks.delete_success'),\n          deleteFunction: deleteAccountSubscriptionBlock,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditBlockDelete from \"./AccountSubscriptionEditBlockDelete\"\nimport moment from 'moment';\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\n\n\nfunction AccountSubscriptionEditBlocks({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"blocks\"\n\n  const pageHeaderButtonList = <ButtonAdd \n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionBlocks = data.accountSubscriptionBlocks\n  const pageInfo = data.accountSubscriptionBlocks.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionBlocks.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>{t('relations.account.subscriptions.blocks.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionBlocks.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionBlocks.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionBlocks.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionBlocks: {\n                __typename: previousResult.accountSubscriptionBlocks.__typename,\n                edges: [ ...previousResult.accountSubscriptionBlocks.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionBlocks.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditBlockDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlocks))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  })","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditBlockBase({ t, history, match, children}) {\n  const activeTab = \"blocks\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditBlockForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.blocks.add')\n  } else {\n    title = t('relations.account.subscriptions.blocks.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditBlockBase from \"./AccountSubscriptionEditBlockBase\"\nimport AccountSubscriptionEditBlockForm from \"./AccountSubscriptionEditBlockForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation CreateAccountSubscriptionBlock($input:CreateAccountSubscriptionBlockInput!) {\n    createAccountSubscriptionBlock(input: $input) {\n      accountSubscriptionBlock {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditBlockAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n\n  const [addSubscriptionBlock] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_BLOCK, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditBlockBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionBlock({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.blocks.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditBlockForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditBlockBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditBlockBase from \"./AccountSubscriptionEditBlockBase\"\nimport AccountSubscriptionEditBlockForm from \"./AccountSubscriptionEditBlockForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation UpdateAccountSubscriptionBlock($input:UpdateAccountSubscriptionBlockInput!) {\n    updateAccountSubscriptionBlock(input: $input) {\n      accountSubscriptionBlock {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditBlockEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionBlock] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditBlockBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditBlockBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditBlockBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditBlockBase>\n    )\n  }\n\n  const accountSubscriptionBlock = data.accountSubscriptionBlock\n\n  return (\n    <AccountSubscriptionEditBlockBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date(accountSubscriptionBlock.dateStart),\n          dateEnd: new Date(accountSubscriptionBlock.dateEnd),\n          description: accountSubscriptionBlock.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionBlock({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.blocks.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditBlockForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditBlockBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\";\n\nfunction SubscriptionCreditsMutationType({ t, mutationType }) {\n  switch (mutationType) {\n    case \"ADD\":  \n      return <Badge color=\"success\">+</Badge>\n    case \"SUB\":\n      return <Badge color=\"secondary\">-</Badge>\n    default:\n      return \"\"\n  }\n}\n\nexport default withTranslation()(SubscriptionCreditsMutationType)\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY = gql`\nquery AccountSubscriptionCredits($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionCredits(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        mutationType\n        mutationAmount\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY = gql`\nquery AccountSubscriptionCredit($id: ID!) {\n  accountSubscriptionCredit(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    mutationType\n    mutationAmount\n    description\n    createdAt\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation DeleteAccountSubscriptionCredit($input: DeleteAccountSubscriptionCreditInput!) {\n    deleteAccountSubscriptionCredit(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { DELETE_ACCOUNT_SUBSCRIPTION_CREDIT, GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditCreditDelete({t, match, history, id}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionCredit] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_CREDIT)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.credits.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.credits.delete_success'),\n          deleteFunction: deleteAccountSubscriptionCredit,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: query_vars },\n              { query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\nimport SubscriptionCreditsMutationType from \"../../../../../ui/SubscriptionCreditsMutationType\"\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditCreditDelete from \"./AccountSubscriptionEditCreditDelete\"\n\n\n\nfunction AccountSubscriptionEditCredits({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"credits\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionCredits = data.accountSubscriptionCredits\n  const pageInfo = data.accountSubscriptionCredits.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionCredits.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>{t('relations.account.subscriptions.credits.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionCredits.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionCredits.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionCredits.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionCredits: {\n                __typename: previousResult.accountSubscriptionCredits.__typename,\n                edges: [ ...previousResult.accountSubscriptionCredits.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}  \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.credits')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.mutation')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionCredits.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.createdAt).format(dateTimeFormatMoment)}\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col>\n                  {node.mutationAmount}\n                </Table.Col>\n                <Table.Col>\n                  <SubscriptionCreditsMutationType mutationType={node.mutationType} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditCreditDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCredits))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA = Yup.object().shape({\n  mutationAmount: Yup.number()\n    .required(t('yup.field_required')),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditCreditBase({ t, history, match, children}) {\n  const activeTab = \"credits\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\n\n\nfunction AccountSubscriptionEditCreditForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.credits.add')\n  } else {\n    title = t('relations.account.subscriptions.credits.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.credits')}>\n              <Field type=\"number\" \n                      name=\"mutationAmount\" \n                      className={(errors.mutationAmount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"mutationAmount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.subscriptions.credits.mutationType')}>\n              <Field component=\"select\" \n                     name=\"mutationType\" \n                     className={(errors.mutationType) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"ADD\">{t(\"general.add\")}</option>\n                <option value=\"SUB\">{t(\"general.subtract\")}</option>\n              </Field>\n              <ErrorMessage name=\"mutationType\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditCreditBase from \"./AccountSubscriptionEditCreditBase\"\nimport AccountSubscriptionEditCreditForm from \"./AccountSubscriptionEditCreditForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation CreateAccountSubscriptionCredit($input:CreateAccountSubscriptionCreditInput!) {\n    createAccountSubscriptionCredit(input: $input) {\n      accountSubscriptionCredit {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditCreditAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  const [addSubscriptionCredit] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_CREDIT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditCreditBase>\n      <Formik\n        initialValues={{ \n          mutationType: \"ADD\",\n          mutationAmount: 0,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionCredit({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              mutationType: values.mutationType,\n              mutationAmount: values.mutationAmount,\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.credits.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditCreditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditCreditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditCreditBase from \"./AccountSubscriptionEditCreditBase\"\nimport AccountSubscriptionEditCreditForm from \"./AccountSubscriptionEditCreditForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation UpdateAccountSubscriptionCredit($input:UpdateAccountSubscriptionCreditInput!) {\n    updateAccountSubscriptionCredit(input: $input) {\n      accountSubscriptionCredit {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditCreditEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionCredit] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditCreditBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditCreditBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditCreditBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditCreditBase>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const accountSubscriptionCredit = data.accountSubscriptionCredit\n\n\n  return (\n    <AccountSubscriptionEditCreditBase>\n      <Formik\n        initialValues={{ \n          mutationType: accountSubscriptionCredit.mutationType,\n          mutationAmount: accountSubscriptionCredit.mutationAmount,\n          description: accountSubscriptionCredit.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionCredit({ variables: {\n            input: {\n              id: id,\n              mutationType: values.mutationType,\n              mutationAmount: values.mutationAmount,\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.credits.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditCreditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditCreditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_FINANCE_INVOICE_ITEM_QUERY = gql`\nquery financeInvoiceItem($before: String, $after: String, $accountSubscription: ID!) {\n  financeInvoiceItems(before: $before, after: $after, accountSubscription:$accountSubscription, orderBy: [\"-finance_invoice__date_sent\"]) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        financeInvoice {\n          id\n          invoiceNumber\n          status\n          summary\n          dateSent\n          dateDue\n          total\n          balance\n        }\n        subscriptionYear\n        subscriptionMonth\n      }\n    }\n  }\n}\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n// export const GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY = gql`\n// query AccountSubscriptionCredit($id: ID!) {\n//   accountSubscriptionCredit(id:$id) {\n//     id\n//     accountSubscription {\n//       id\n//     }\n//     mutationType\n//     mutationAmount\n//     description\n//     createdAt\n//   }\n// }\n// `\n\n\n// export const DELETE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n//   mutation DeleteAccountSubscriptionCredit($input: DeleteAccountSubscriptionCreditInput!) {\n//     deleteAccountSubscriptionCredit(input: $input) {\n//       ok\n//     }\n//   }\n// `\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_FINANCE_INVOICE_ITEM_QUERY } from \"./queries\"\nimport { DELETE_FINANCE_INVOICE } from \"../../../../../finance/invoices/queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditInvoiceDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionInvoice] = useMutation(DELETE_FINANCE_INVOICE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('finance.invoices.deleted'),\n          deleteFunction: deleteAccountSubscriptionInvoice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: query_vars },\n              // { query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: {\n              //   accountId: accountId,\n              //   id: subscriptionId\n              // }}\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport FinanceInvoicesStatus from \"../../../../../ui/FinanceInvoiceStatus\"\nimport { GET_FINANCE_INVOICE_ITEM_QUERY } from './queries'\nimport CSLS from \"../../../../../../tools/cs_local_storage\"\nimport AccountSubscriptionEditInvoiceDelete from \"./AccountSubscriptionEditInvoiceDelete\"\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\nimport moment from 'moment';\n\n\nfunction AccountSubscriptionEditInvoices({t, location, match, history}) {  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"invoices\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/add`} \n    className=\"ml-2\"  \n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_FINANCE_INVOICE_ITEM_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  const financeInvoiceItems = data.financeInvoiceItems\n  const pageInfo = data.financeInvoiceItems.pageInfo\n\n\n  // Empty list\n  if (!financeInvoiceItems.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n\n      <Card.Body>{t('relations.account.subscriptions.invoices.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: financeInvoiceItems.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.financeInvoiceItems.edges\n        const pageInfo = fetchMoreResult.financeInvoiceItems.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              financeInvoiceItems: {\n                __typename: previousResult.financeInvoiceItems.__typename,\n                edges: [ ...previousResult.financeInvoiceItems.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}  \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n            {/* <Table.ColHeader>{t('finance.invoices.due')}</Table.ColHeader> */}\n            <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {financeInvoiceItems.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <FinanceInvoicesStatus status={node.financeInvoice.status} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.invoiceNumber} <br />\n                  <Text.Small color=\"gray\">{node.financeInvoice.summary.trunc(30)}</Text.Small>\n                </Table.Col>\n\n                <Table.Col key={v4()}>\n                  {moment(node.financeInvoice.dateSent).format('LL')} <br />\n                  {moment(node.financeInvoice.dateDue).format('LL')}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.totalDisplay}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.balanceDisplay}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <Button className='btn-sm' \n                          onClick={() => history.push(\"/finance/invoices/edit/\" + node.financeInvoice.id)}\n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                  <AccountSubscriptionEditInvoiceDelete id={node.financeInvoice.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoices))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA = Yup.object().shape({\n  financeInvoiceGroup: Yup.string()\n    .required(t('yup.field_required')),\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditInvoiceAddBase({ t, history, match, children}) {\n  const activeTab = \"invoices\"\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAddBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditInvoiceAddForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  const title = t('relations.account.subscriptions.invoices.add')\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Form.Group label={t('general.finance_invoice_group')}>\n          <Field component=\"select\" \n                name=\"financeInvoiceGroup\" \n                className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n            {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.summary')}>\n          <Field type=\"text\" \n                  name=\"summary\" \n                  className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button\n              type=\"button\" \n              color=\"link\" \n            >\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAddForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n// import { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_FINANCE_INVOICE_ITEM_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { CREATE_ACCOUNT_INVOICE } from \"../../../invoices/queries\"\nimport { ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditInvoiceAddBase from \"./AccountSubscriptionEditInvoiceAddBase\"\nimport AccountSubscriptionEditInvoiceAddForm from \"./AccountSubscriptionEditInvoiceAddForm\"\n\n\nfunction AccountSubscriptionEditInvoiceAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/`\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const [ addFinanceInvoice ] = useMutation(CREATE_ACCOUNT_INVOICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n    // Loading\n    if (queryLoading) return (\n      <AccountSubscriptionEditInvoiceAddBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </AccountSubscriptionEditInvoiceAddBase>\n    )\n    // Error\n    if (queryError) {\n      console.log(queryError)\n      return (\n        <AccountSubscriptionEditInvoiceAddBase>\n          <p>{t('general.error_sad_smiley')}</p>\n        </AccountSubscriptionEditInvoiceAddBase>\n      )\n    }\n    \n    console.log(queryData)\n\n  return (\n    <AccountSubscriptionEditInvoiceAddBase>\n      <Formik\n        initialValues={{ \n          financeInvoiceGroup: \"\",\n          summary: \"\",\n          subscriptionYear: new Date().getFullYear(), \n          subscriptionMonth: new Date().getMonth() + 1,\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addFinanceInvoice({ variables: {\n            input: {\n              account: accountId,\n              accountSubscription: subscriptionId,\n              financeInvoiceGroup: values.financeInvoiceGroup,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              summary: values.summary,\n            }\n          }, refetchQueries: [\n              {query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              // {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n              //   accountId: accountId,\n              //   id: subscriptionId\n              // }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              const financeInvoiceId = data.createFinanceInvoice.financeInvoice.id\n              history.push(`/finance/invoices/edit/${financeInvoiceId}`)\n              toast.success((t('relations.account.subscriptions.invoices.toast_add_success')), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              toast.success((t('relations.account.subscriptions.invoices.toast_you_are_now_editing')), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditInvoiceAddForm\n            inputData={queryData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditInvoiceAddBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAdd))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY = gql`\nquery AccountSubscriptionPauses($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionPauses(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        dateStart\n        dateEnd\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY = gql`\nquery AccountSubscriptionPause($id: ID!) {\n  accountSubscriptionPause(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    dateStart\n    dateEnd\n    description\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation DeleteAccountSubscriptionPause($input: DeleteAccountSubscriptionPauseInput!) {\n    deleteAccountSubscriptionPause(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_PAUSE, GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditPauseDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionPause] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_PAUSE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.pauses.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.pauses.delete_success'),\n          deleteFunction: deleteAccountSubscriptionPause,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditPauseDelete from \"./AccountSubscriptionEditPauseDelete\"\nimport moment from 'moment';\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\n\n\nfunction AccountSubscriptionEditPauses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"pauses\"\n\n  const pageHeaderButtonList = <ButtonAdd \n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/add`} \n    className='ml-2'\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionPauses = data.accountSubscriptionPauses\n  const pageInfo = data.accountSubscriptionPauses.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionPauses.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      {/* <div className=\"pull-right\">{buttonAdd}</div> */}\n      {/* <h5>{t('relations.account.subscriptions.pauses.title_list')}</h5> */}\n      <Card.Body>{t('relations.account.subscriptions.pauses.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionPauses.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionPauses.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionPauses.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionPauses: {\n                __typename: previousResult.accountSubscriptionPauses.__typename,\n                edges: [ ...previousResult.accountSubscriptionPauses.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore} \n      returnUrl={returnUrl}\n      pageHeaderButtonList={pageHeaderButtonList} \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>{/* <div className=\"pull-right\">{buttonAdd}</div> */}\n      {/* <h5>{t('relations.account.subscriptions.pauses.title_list')}</h5> */}\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionPauses.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditPauseDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauses))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditPauseBase({ t, history, match, children}) {\n  const activeTab = \"pauses\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditPauseForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.pauses.add')\n  } else {\n    title = t('relations.account.subscriptions.pauses.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditPauseBase from \"./AccountSubscriptionEditPauseBase\"\nimport AccountSubscriptionEditPauseForm from \"./AccountSubscriptionEditPauseForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation CreateAccountSubscriptionPause($input:CreateAccountSubscriptionPauseInput!) {\n    createAccountSubscriptionPause(input: $input) {\n      accountSubscriptionPause {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditPauseAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  const [addSubscriptionPause] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_PAUSE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditPauseBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionPause({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.pauses.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditPauseForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditPauseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditPauseBase from \"./AccountSubscriptionEditPauseBase\"\nimport AccountSubscriptionEditPauseForm from \"./AccountSubscriptionEditPauseForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation UpdateAccountSubscriptionPause($input:UpdateAccountSubscriptionPauseInput!) {\n    updateAccountSubscriptionPause(input: $input) {\n      accountSubscriptionPause {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditPauseEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionPause] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditPauseBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditPauseBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditPauseBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditPauseBase>\n    )\n  }\n\n  const accountSubscriptionPause = data.accountSubscriptionPause\n\n  return (\n    <AccountSubscriptionEditPauseBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date(accountSubscriptionPause.dateStart),\n          dateEnd: new Date(accountSubscriptionPause.dateEnd),\n          description: accountSubscriptionPause.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionPause({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.pauses.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditPauseForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditPauseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY = gql`\n  query AccountInstructorProfileQuery($id: ID!) {\n    accountInstructorProfiles(account:$id) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          account {\n            id\n          }\n          classes\n          appointments\n          events\n          role\n          education\n          bio\n          urlBio\n          urlWebsite   \n        }\n      }\n    }\n    account(id:$id) {\n      id\n      instructor\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_INSTRUCTOR_PROFILE = gql`\n  mutation UpdateAccountInstructorProfile($input:UpdateAccountInstructorProfileInput!) {\n    updateAccountInstructorProfile(input: $input) {\n      accountInstructorProfile {\n        id\n      }\n    }\n  }\n`\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA = Yup.object().shape({\n  classes: Yup.boolean(),  \n  appointments: Yup.boolean(),  \n  events: Yup.boolean(),  \n  role: Yup.string(),\n  education: Yup.string(),\n  bio: Yup.string(),\n  urlBio: Yup.string()\n    .url(t('yup.url')),\n  urlWebsite: Yup.string()\n    .url(t('yup.url')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nconst RelationsAccountInstructorProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"classes\" \n                  checked={values.classes} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.classes')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"classes\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"events\" \n                  checked={values.events} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.events')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"events\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"appointments\" \n                  checked={values.appointments} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.appointments')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"appointments\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.role')}>\n              <Field type=\"text\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.education')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"education\"\n              initialValue={values.education}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldTouched(\"education\", true)\n                setFieldValue(\"education\", e.target.getContent())\n              }}\n            />\n          <ErrorMessage name=\"education\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.bio')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"bio\"\n              initialValue={values.bio}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldTouched(\"bio\", true)\n                setFieldValue(\"bio\", e.target.getContent())\n              }}\n            />\n          <ErrorMessage name=\"bio\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.instructor_profile.url_bio')}>\n              <Field type=\"text\" \n                      name=\"urlBio\" \n                      className={(errors.urlBio) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"urlBio\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.instructor_profile.url_website')}>\n              <Field type=\"text\" \n                      name=\"urlWebsite\" \n                      className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountInstructorProfileForm))\n\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, UPDATE_ACCOUNT_INSTRUCTOR_PROFILE } from './queries'\nimport { ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport RelationsAccountProfileForm from \"./RelationsAccountInstructorProfileForm\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction RelationsAccountInstructorProfile({ t, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"instructor_profile\"\n  const { loading, error, data } = useQuery(GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, {\n    variables: { id: accountId }\n  })\n  const [updateAccountInstructorProfile] = useMutation(UPDATE_ACCOUNT_INSTRUCTOR_PROFILE)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const initialData = data.accountInstructorProfiles.edges[0].node\n\n  return (\n    <RelationsAccountProfileBase\n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            classes: initialData.classes, \n            appointments: initialData.appointments, \n            events: initialData.events, \n            role: initialData.role, \n            education: initialData.education, \n            bio: initialData.bio,\n            urlBio: initialData.urlBio,\n            urlWebsite: initialData.urlWebsite,\n          }}\n          validationSchema={ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateAccountInstructorProfile({ variables: {\n                input: {\n                  account: initialData.account.id,\n                  classes: values.classes, \n                  appointments: values.appointments, \n                  events: values.events, \n                  role: values.role, \n                  education: values.education, \n                  bio: values.bio,\n                  urlBio: values.urlBio,\n                  urlWebsite: values.urlWebsite,\n                }\n              }, refetchQueries: [\n                  // Refresh local cached results for this account instructor profile\n                  {query: GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, variables: {id: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.account.instructor_profile.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountProfileForm\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>    \n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\n\n// class RelationsAccountInstructorProfile extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization profile props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const account_id = match.params.account_id\n//     console.log(account_id)\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Query query={GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY} variables={{ id: account_id }} >\n//               {({ loading, error, data, refetch }) => {\n//                   // Loading\n//                   if (loading) return <p>{t('general.loading_with_dots')}</p>\n//                   // Error\n//                   if (error) {\n//                     console.log(error)\n//                     return <p>{t('general.error_sad_smiley')}</p>\n//                   }\n\n//                   console.log('query data')\n//                   console.log(data)\n                  \n//                   const account = data.account\n//                   const initialData = data.accountInstructorProfiles.edges[0].node\n//                   console.log(initialData)\n\n\n//                   return (\n//                     <div>\n//                       <Page.Header title={account.firstName + \" \" + account.lastName}>\n//                         <RelationsAccountsBack />\n//                       </Page.Header>\n//                       <Grid.Row>\n//                         <Grid.Col md={9}>\n//                         <Card>\n//                           <Card.Header>\n//                             <Card.Title>{t('relations.account.instructor_profile.title')}</Card.Title>\n//                             {console.log(match.params.account_id)}\n//                           </Card.Header>\n//                         <Mutation mutation={UPDATE_ACCOUNT_INSTRUCTOR_PROFILE}> \n//                          {(updateAccountInstructorProfile, { data }) => (\n//                           <Formik\n//                             initialValues={{ \n//                               classes: initialData.classes, \n//                               appointments: initialData.appointments, \n//                               events: initialData.events, \n//                               role: initialData.role, \n//                               education: initialData.education, \n//                               bio: initialData.bio,\n//                               urlBio: initialData.urlBio,\n//                               urlWebsite: initialData.urlWebsite,\n//                             }}\n//                             validationSchema={ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA}\n//                             onSubmit={(values, { setSubmitting }) => {\n//                                 console.log('submit values:')\n//                                 console.log(values)\n\n//                                 updateAccountInstructorProfile({ variables: {\n//                                   input: {\n//                                     account: initialData.account.id,\n//                                     classes: values.classes, \n//                                     appointments: values.appointments, \n//                                     events: values.events, \n//                                     role: values.role, \n//                                     education: values.education, \n//                                     bio: values.bio,\n//                                     urlBio: values.urlBio,\n//                                     urlWebsite: values.urlWebsite,\n//                                   }\n//                                 }, refetchQueries: [\n//                                     // Refresh local cached results for this account instructor profile\n//                                     {query: GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, variables: {id: account_id}}\n//                                 ]})\n//                                 .then(({ data }) => {\n//                                     console.log('got data', data)\n//                                     toast.success((t('relations.account.instructor_profile.toast_edit_success')), {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     setSubmitting(false)\n//                                   }).catch((error) => {\n//                                     toast.error((t('general.toast_server_error')) +  error, {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     console.log('there was an error sending the query', error)\n//                                     setSubmitting(false)\n//                                   })\n//                             }}\n//                             >\n//                             {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n//                               <RelationsAccountProfileForm\n//                                 isSubmitting={isSubmitting}\n//                                 setFieldTouched={setFieldTouched}\n//                                 setFieldValue={setFieldValue}\n//                                 errors={errors}\n//                                 values={values}\n//                               />\n//                             )}\n//                           </Formik>\n//                         )}\n//                       </Mutation>\n//                     </Card>\n//                     </Grid.Col>                                    \n//                     <Grid.Col md={3}>\n//                       <ProfileCardSmall user={account}/>\n//                       <ProfileMenu \n//                         activeLink='instructor_profile'\n//                         account_id={account_id}\n//                       /> \n//                     </Grid.Col>\n//                   </Grid.Row>\n//                 </div>\n//               )}}\n//             </Query>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(RelationsAccountInstructorProfile))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let search = localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SEARCH)\n  let showArchived = localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE)\n  \n  if (search) {\n    queryVars.name = search\n  }\n  if (showArchived === \"true\") {\n    queryVars.archived = true\n  } else {\n    queryVars.archived = false\n  }\n  \n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Page,\n    Grid,\n    Container,\n  } from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InputSearch from \"../../general/InputSearch\"\nimport { get_list_query_variables } from \"./tools\"\nimport ButtonAdd from '../../ui/ButtonAdd';\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nconst RelationsB2BBase = ({t, history, refetch, children }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"relations.title\")}>\n          <div className=\"page-options d-flex\">\n            <InputSearch \n              initialValueKey={CSLS.RELATIONS_BUSINESSES_SEARCH}\n              placeholder=\"Search...\"\n              onChange={(value) => {\n                console.log(value)\n                localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SEARCH, value)\n                refetch(get_list_query_variables())\n              }}\n            />\n            <ButtonAdd addUrl=\"/relations/b2b/add\" className='ml-2 '/>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n)\n\n\n  export default withTranslation()(withRouter(RelationsB2BBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_BUSINESSES_QUERY = gql`\n  query Businesses($before:String, $after:String, $name:String, $archived: Boolean!) {\n    businesses(first:15, before:$before, after:$after, b2b:true, name_Icontains:$name, archived:$archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          b2b\n          supplier\n          vip\n          name\n          address\n          postcode\n          city\n          country\n          phone\n          phone2\n          emailContact\n          emailBilling\n          registration\n          taxRegistration\n          mollieCustomerId\n        }\n      }\n    }\n  }\n`\n\nexport const GET_BUSINESS_QUERY = gql`\n  query Business($id: ID!) {\n    business(id:$id) {\n      id\n      archived\n      vip\n      name\n      address\n      postcode\n      city\n      country\n      phone\n      phone2\n      emailContact\n      emailBilling\n      registration\n      taxRegistration\n      mollieCustomerId\n    }\n  }\n`\n\nexport const UPDATE_BUSINESS = gql`\n  mutation UpdateBusiness($input: UpdateBusinessInput!) {\n    updateBusiness(input: $input) {\n      business {\n        id\n        archived\n      }\n    }\n  }\n`\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ContentCard from \"../../general/ContentCard\"\nimport RelationsB2BBase from \"./RelationsB2BBase\"\nimport { GET_BUSINESSES_QUERY, UPDATE_BUSINESS } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\n\n\nconst DELETE_BUSINESS = gql`\n  mutation DeleteBusiness($input: DeleteBusinessInput!) {\n    deleteBusiness(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction RelationsB2B({ t, history }) {\n  // Set some initial value for archived, if not found\n  if (!localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE)) {\n    localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false) \n  }\n\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_BUSINESSES_QUERY, { \n    variables: get_list_query_variables()\n  })\n  const [updateBusiness] = useMutation(UPDATE_BUSINESS)\n  const [deleteBusiness] = useMutation(DELETE_BUSINESS)\n\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard>\n        {t(\"general.loading_with_dots\")}\n      </ContentCard>\n    </RelationsB2BBase>\n  )\n  if (error) return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}>\n        <p>{t('relations.b2b.error_loading')}</p>\n      </ContentCard>\n    </RelationsB2BBase>\n  )\n\n  let businesses = data.businesses\n\n  // Empty list\n  if (!businesses.edges.length) { return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}\n                   headerContent={headerOptions}>\n        <p>\n          {(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? \n            t('relations.b2b.empty_archive') : \n            t(\"relations.b2b.empty_list\")}\n        </p>\n      </ContentCard>\n    </RelationsB2BBase>\n  )}\n\n  return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={businesses.pageInfo}\n                    onLoadMore={() => {\n                      fetchMore({\n                        variables: {\n                          after: businesses.pageInfo.endCursor\n                        },\n                        updateQuery: (previousResult, { fetchMoreResult }) => {\n                          const newEdges = fetchMoreResult.businesses.edges\n                          const pageInfo = fetchMoreResult.businesses.pageInfo \n\n                          return newEdges.length\n                            ? {\n                                // Put the new businesses at the end of the list and update `pageInfo`\n                                // so we have the new `endCursor` and `hasNextPage` values\n                                businesses: {\n                                  __typename: previousResult.businesses.__typename,\n                                  edges: [ ...previousResult.businesses.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {data.businesses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/relations/b2b/${node.id}/edit`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    {/* Archive / restore buttons */}\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      href=\"\"\n                      onClick={() => {\n                        let id = node.id\n                        let show_archive\n                        if (localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") {\n                          show_archive = true\n                        } else {\n                          show_archive = false\n                        }\n\n                        updateBusiness({ variables: {\n                          input: {\n                            id,\n                            archived: !node.archived // invert, as we need the opposite from the list currently displayed\n                          }}, \n                          refetchQueries: [\n                        {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                        ]}).then(({ data }) => {\n                          toast.success(\n                            (!show_archive) ? t('relations.b2b.archived'): t('relations.b2b.restored'), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                      {\n                        (!node.archived) ?\n                          <Icon prefix=\"fa\" name=\"inbox\" /> :\n                          t(\"general.restore\")\n                      }\n                    </button>\n\n                  {/* Delete button shown when archived */}\n                    {\n                      (!node.archived) ? '' :\n                        <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"relations.b2b.delete_confirm_msg\"),\n                              msgDescription: <span><br /><br /><ul><li>{node.name}</li></ul></span>,\n                              msgSuccess: t('relations.b2b.deleted'),\n                              deleteFunction: deleteBusiness,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                              ]}\n                            })\n                          }}\n                        >\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                    }\n                    </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>  \n    </RelationsB2BBase>  \n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2B))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsB2BAddFrom = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.name')}>\n                <Field type=\"text\" \n                        name=\"name\" \n                        className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsB2BAddFrom))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport { GET_BUSINESSES_QUERY } from './queries'\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack';\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsB2BAddForm from \"./RelationB2BAddForm\"\n\n\nconst ADD_BUSINESS = gql`\n  mutation CreateBusiness($input:CreateBusinessInput!) {\n    createBusiness(input: $input) {\n      business {\n        id\n      }\n    }\n  }\n`\n\nconst returnUrl = \"/relations/b2b\"\n\nfunction RelationsB2BAdd({ t, history }) {\n  const [addBusiness] = useMutation(ADD_BUSINESS)\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('relations.title')} >\n            <div className='page-options d-flex'>\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('relations.b2b.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ name: '' }}\n                    // validationSchema={B2BADD_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        addBusiness({ variables: {\n                          input: {\n                            name: values.name,\n                            b2b: true\n                          }\n                        }, refetchQueries: [\n                            {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data)\n                            const businessId = data.createBusiness.business.id\n                            history.push(`/relations/b2b/${businessId}/edit`)\n                            toast.success((t('relations.b2b.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors }) => (\n                        <RelationsB2BAddForm\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          returnUrl={returnUrl}\n                        />\n                    )}\n                </Formik>\n            </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction RelationsB2BEditBase({ t, match, history, children, cardTitle=\"\" }) {\n  const returnUrl = \"/relations/b2b\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"relations.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{cardTitle}</Card.Title>\n              </Card.Header>\n              {children}\n            </Card>\n            </Grid.Col>                                    \n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2BEditBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nfunction RelationsB2BEditForm({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.email_contact')}>\n              <Field type=\"text\" \n                      name=\"emailContact\" \n                      className={(errors.emailContact) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"emailContact\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.email_billing')}>\n              <Field type=\"text\" \n                      name=\"emailBilling\" \n                      className={(errors.emailBilling) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"emailBilling\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n          <Form.Group label={t('general.phone2')}>\n              <Field type=\"text\" \n                      name=\"phone2\" \n                      className={(errors.phone2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                      name=\"postcode\" \n                      className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                    name=\"country\" \n                    className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"country\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('finance.invoices.relation_company_registration')}>\n              <Field type=\"text\" \n                      name=\"registration\" \n                      className={(errors.registration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"registration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n          <Form.Group label={t('finance.invoices.relation_company_tax_registration')}>\n              <Field type=\"text\" \n                      name=\"taxRegistration\" \n                      className={(errors.taxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"taxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2BEditForm))\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_BUSINESSES_QUERY, GET_BUSINESS_QUERY, UPDATE_BUSINESS } from './queries'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsB2BEditBase from './RelationsB2BEditBase'\nimport RelationsB2BEditForm from \"./RelationsB2BEditForm\"\n\n// \n// import ProfileMenu from \"./ProfileMenu\"\n\nfunction RelationsB2BEdit({ t, match, history}) {\n  const businessId = match.params.business_id\n  const [updateBusiness] = useMutation(UPDATE_BUSINESS)\n  const { loading, error, data } = useQuery(GET_BUSINESS_QUERY, {\n    variables: {\n      id: businessId\n    }\n  })\n\n  // Loading\n  if (loading) return <RelationsB2BEditBase>\n      <Card.Body>{t('general.loading_with_dots')}</Card.Body>\n    </RelationsB2BEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsB2BEditBase>\n      <Card.Body>{t('general.error_sad_smiley')}</Card.Body>\n    </RelationsB2BEditBase>\n  }\n\n  const initialData = data.business\n  console.log(initialData)\n\n  return (\n    <RelationsB2BEditBase cardTitle={t('relations.b2b.title_edit')}>\n      <Formik\n        initialValues={{ \n          name: initialData.name,\n          phone: initialData.phone,\n          phone2: initialData.phone2,\n          address: initialData.address,\n          postcode: initialData.postcode,\n          city: initialData.city,\n          country: initialData.country,\n          emailBilling: initialData.emailBilling,\n          emailContact: initialData.emailContact,\n          registration: initialData.registration,\n          taxRegistration: initialData.taxRegistration\n        }}\n        // validationSchema={ACCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            let input_vars = {\n              id: businessId,\n              name: values.name,\n              phone: values.phone,\n              phone2: values.phone2,\n              address: values.address,\n              postcode: values.postcode,\n              city: values.city,\n              country: values.country,\n              emailBilling: values.emailBilling,\n              emailContact: values.emailContact,\n              registration: values.registration,\n              taxRegistration: values.taxRegistration\n            }\n\n            updateBusiness({ variables: {\n              input: input_vars\n            }, refetchQueries: [\n                // Refetch list\n                {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()},\n                // Refresh local cached results for this account\n                {query: GET_BUSINESS_QUERY, variables: {\"id\": businessId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.b2b.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <RelationsB2BEditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n          />\n        )}\n      </Formik>\n    </RelationsB2BEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BEdit))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass ScheduleHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule home props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t('general.manage')\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.title\")} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <Grid.Row>\n                  <HasPermissionWrapper\n                    resource=\"scheduleclass\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.classes.title\")}</h5>\n                          {t(\"schedule.classes.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/classes\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper\n                    resource=\"scheduleevent\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.events.title\")}</h5>\n                          {t(\"schedule.events.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/events\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper\n                    resource=\"scheduleshift\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.shifts.title\")}</h5>\n                          {t(\"schedule.shifts.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/shifts\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  {/* <HasPermissionWrapper\n                    resource=\"scheduleappointment\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={3} lg={3}>\n                      <Link to='/schedule/appointments')}>\n                        <StampCard header={<small>{t('schedule.appointments.title')}</small>} footer={t('')} color=\"blue\" icon=\"calendar\" />\n                      </div>\n                    </Grid.Col>\n                  </HasPermissionWrapper> */}\n                </Grid.Row>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(ScheduleHome))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationAppointment\n  let organizationLocation\n\n  let queryVars = {\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationAppointment = localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE)\n  if (organizationAppointment) {\n    queryVars.organizationAppointment = organizationAppointment\n  } else {\n    queryVars.organizationAppointment = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst ScheduleAppointmentsFilter = ({ t, history, data, refetch }) => (\n  <div>\n    {/* Locations */}\n    <select \n      className={selectClass}\n      defaultValue={getDefaultValue(CSLS.SCHEDULE_APPOINTMENTS_FILTER_LOCATION)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.SCHEDULE_APPOINTMENTS_FILTER_LOCATION,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"schedule.appointments.filter_all_locations\")}</option>\n      {data.organizationLocations.edges.map(({ node }) =>\n        <option value={node.id} key={v4()}>{node.name}</option>\n      )}\n    </select>\n    {/* Appointments */}\n    {/* <select \n      className={selectClass}\n      defaultValue={getDefaultValue(CSLS.SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"schedule.appointments.filter_all_appointments\")}</option>\n      {data.organizationAppointments.edges.map(({ node }) =>\n        <option value={node.id} key={v4()}>{node.name}</option>\n      )}\n    </select> */}\n  </div>\n);\n\nexport default withTranslation()(withRouter(ScheduleAppointmentsFilter))","import { gql } from \"@apollo/client\"\n\nexport const GET_APPOINTMENTS_QUERY = gql`\n  query ScheduleAppointments(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $organizationLocation: String\n    ){\n    scheduleAppointments(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationLocation: $organizationLocation\n    ){\n      date\n      appointments {\n        scheduleItemId\n        frequencyType\n        date\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationAppointment {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n    user {\n      id\n      isActive\n      email\n      firstName\n      lastName\n      groups {\n        edges {\n          node {\n            id\n            name\n            permissions {\n              edges {\n                node {\n                  id\n                  name\n                  codename\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationAppointments(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_APPOINTMENT_QUERY = gql`\n  query ScheduleItem($id: ID!, $before: String, $after: String, $archived: Boolean!) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleClassInputValues($after: String, $before: String, $archived: Boolean) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationAppointments(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Badge,\n  Dropdown,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport ScheduleAppointmentsFilter from \"./ScheduleAppointmentsFilter\"\n\nimport { GET_APPOINTMENTS_QUERY } from \"./queries\"\nimport { get_list_query_variables } from './tools'\n\nimport moment from 'moment'\n\n\nconst DELETE_SCHEDULE_APPOINTMENT = gql`\n  mutation DeleteScheduleAppointment($input: DeleteScheduleAppointmentInput!) {\n    deleteScheduleAppointment(input: $input) {\n      ok\n    }\n  }\n`\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nconst ScheduleAppointments = ({ t, history }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Query query={GET_APPOINTMENTS_QUERY} variables={get_list_query_variables()}>\n        {({ loading, error, data, refetch }) => {\n          // Loading\n          if (loading) return (\n            <Container>\n              <p>{t('general.loading_with_dots')}</p>\n            </Container>\n          )\n          // Error\n          if (error) {\n            console.log(error)\n            return (\n              <Container>\n                <p>{t('general.error_sad_smiley')}</p>\n              </Container>\n            )\n          }\n          \n          // Empty list\n          if (!data.scheduleAppointments.length) { return (\n            <ContentCard cardTitle={t('schedule.appointments.title')}>\n              <p>\n                {t('schedule.appointments.empty_list')}\n              </p>\n            </ContentCard>\n          )} else {   \n          // Life's good! :)\n          return (\n            <Container>\n              <Page.Header title={t(\"schedule.title\")}>\n                <div className=\"page-options d-flex\">\n                  <span title={t(\"schedule.appointments.tooltip_sort_by_location\")}>\n                    <Button \n                      icon=\"home\"\n                      tooltip=\"text\"\n                      className=\"mr-2\"\n                      color={\n                        ((localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY))) ?\n                        \"azure\" : \"secondary\"\n                      }\n                      onClick={() => {\n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY, \"location\")\n                        refetch(get_list_query_variables())\n                      }}\n                    />\n                  </span>\n                  <span title={t(\"schedule.appointments.tooltip_sort_by_starttime\")}>\n                    <Button \n                      icon=\"clock\"\n                      className=\"mr-2\"\n                      color={\n                        (localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY) === \"starttime\") ?\n                        \"azure\" : \"secondary\"\n                      }\n                      onClick={() => {\n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY, \"starttime\")\n                        refetch(get_list_query_variables())\n                      }}\n                    />\n                  </span>\n                  <CSDatePicker \n                    className=\"form-control schedule-list-csdatepicker mr-2\"\n                    selected={new Date(localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM))}\n                    isClearable={false}\n                    onChange={(date) => {\n                      let nextWeekFrom = moment(date)\n                      let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                      console.log(get_list_query_variables())\n\n                      refetch(get_list_query_variables())\n                    }}\n                    placeholderText={t('schedule.appointments.go_to_date')}\n                  />\n                  <Button.List className=\"schedule-list-page-options-btn-list\">\n                    <Button \n                      icon=\"chevron-left\"\n                      color=\"secondary\"\n                      onClick={ () => {\n                        let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM)).subtract(7, 'days')\n                        let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                        \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                        refetch(get_list_query_variables())\n                    }} />\n                    <Button \n                      icon=\"sun\"\n                      color=\"secondary\"\n                      onClick={ () => {\n                        let currentWeekFrom = moment()\n                        let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                        \n                        refetch(get_list_query_variables())\n                    }} />\n                    <Button \n                      icon=\"chevron-right\"\n                      color=\"secondary\"\n                      onClick={ () => {\n                        let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM)).add(7, 'days')\n                        let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                        \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                        refetch(get_list_query_variables())\n                    }} />\n                  </Button.List> \n                </div>\n              </Page.Header>\n              <Grid.Row>\n                <Grid.Col md={9}>\n                  { data.scheduleAppointments.map(({ date, appointments }) => (\n                    <div key={v4()}>\n                      <Card>\n                        <Card.Header>\n                          <Card.Title>\n                            <b>{moment(date).format(\"dddd\")}</b> {' '}\n                            <span className=\"text-muted\">\n                              {moment(date).format(\"LL\")} \n                            </span>\n                          </Card.Title>\n                        </Card.Header>\n                        <Card.Body>\n                          {!(appointments.length) ? t('schedule.appointments.empty_list') :\n                            <Table>\n                              <Table.Header>\n                                <Table.Row key={v4()}>\n                                  <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                                  <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                                  <Table.ColHeader>{t('general.appointment')}</Table.ColHeader>\n                                  <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                                  <Table.ColHeader></Table.ColHeader>\n                                </Table.Row>\n                              </Table.Header>\n                              <Table.Body>\n                                {appointments.map((\n                                  { scheduleItemId, \n                                    frequencyType,\n                                    date, \n                                    organizationLocationRoom, \n                                    organizationAppointment, \n                                    timeStart, \n                                    timeEnd,\n                                    displayPublic }) => (\n                                  <Table.Row key={v4()}>\n                                    <Table.Col>\n                                      {/* Start & end time */}\n                                      {moment(date + ' ' + timeStart).format('LT')} {' - '}\n                                      {moment(date + ' ' + timeEnd).format('LT')} { ' ' }\n                                      {(frequencyType === 'SPECIFIC') ? <Badge color=\"primary\">{t('general.once')}</Badge> : null }\n                                    </Table.Col>\n                                    <Table.Col>\n                                      {/* Location */}\n                                      {organizationLocationRoom.organizationLocation.name} {' '}\n                                      <span className=\"text-muted\"> &bull; {organizationLocationRoom.name}</span>\n                                    </Table.Col>\n                                    <Table.Col>\n                                      {/* Type */}\n                                      {/* {organizationAppointment.name} <br /> */}\n                                    </Table.Col>\n                                    <Table.Col>\n                                      {/* Public */}\n                                      <BadgeBoolean value={displayPublic} />\n                                    </Table.Col>\n                                    <Table.Col>\n                                      <Dropdown\n                                        key={v4()}\n                                        className=\"pull-right\"\n                                        type=\"button\"\n                                        toggle\n                                        color=\"secondary btn-sm\"\n                                        triggerContent={t(\"general.actions\")}\n                                        items={[\n                                          <Dropdown.Item key={v4()}>Dropdown Link</Dropdown.Item>,\n                                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleclass\">\n                                            <Dropdown.ItemDivider key={v4()} />\n                                            <Dropdown.Item\n                                              key={v4()}\n                                              badge={t('schedule.appointments.all_appointments_in_series')}\n                                              badgeType=\"secondary\"\n                                              icon=\"edit-2\"\n                                              onClick={() => history.push('/schedule/appointments/all/edit/' + scheduleItemId)}>\n                                                {t(\"general.edit\")}\n                                            </Dropdown.Item>\n                                          </HasPermissionWrapper>,\n                                          <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleclass\">\n                                            <Dropdown.ItemDivider key={v4()} />\n                                            <Mutation mutation={DELETE_SCHEDULE_APPOINTMENT} key={v4()}>\n                                              {(deleteScheduleAppointment, { data }) => (\n                                                  <Dropdown.Item\n                                                    key={v4()}\n                                                    badge={t('schedule.appointments.all_appointments_in_series')}\n                                                    badgeType=\"danger\"\n                                                    icon=\"trash-2\"\n                                                    onClick={() => {\n                                                      confirm_delete({\n                                                        t: t,\n                                                        msgConfirm: t(\"schedule.appointments.delete_confirm_msg\"),\n                                                        msgDescription: <p key={v4()}>\n                                                          {moment(date + ' ' + timeStart).format('LT')} {' - '}\n                                                          {moment(date + ' ' + timeEnd).format('LT')} {' '} @ {' '}\n                                                          {organizationLocationRoom.organizationLocation.name} {' '}\n                                                          {organizationLocationRoom.name}\n                                                          </p>,\n                                                        msgSuccess: t('schedule.appointments.deleted'),\n                                                        deleteFunction: deleteScheduleAppointment,\n                                                        functionVariables: { variables: {\n                                                          input: {\n                                                            id: scheduleItemId\n                                                          }\n                                                        }, refetchQueries: [\n                                                          { query: GET_APPOINTMENTS_QUERY, variables: get_list_query_variables() }\n                                                        ]}\n                                                      })\n                                                  }}>\n                                                  {t(\"general.delete\")}\n                                                  </Dropdown.Item>\n                                              )}\n                                            </Mutation>\n                                          </HasPermissionWrapper>\n                                        ]}\n                                      />\n                                    </Table.Col>\n                                  </Table.Row>\n                                ))}\n                              </Table.Body>\n                            </Table>\n                          }\n                        </Card.Body>\n                      </Card>\n                    </div>\n                    ))}\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"scheduleclass\">\n                  <Button color=\"primary btn-block mb-1\"\n                          onClick={() => history.push(\"/schedule/appointments/add\")}>\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.appointments.add')}\n                  </Button>\n                </HasPermissionWrapper>\n                <div>\n                  <Button\n                    className=\"pull-right\"\n                    color=\"link\"\n                    size=\"sm\"\n                    onClick={() => {\n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE, \"\")\n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_LEVEL, \"\")\n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_LOCATION, \"\")\n                      refetch(get_list_query_variables())\n                    }}\n                  >\n                    {t(\"general.clear\")}\n                  </Button>\n                </div>\n                <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5>\n                <ScheduleAppointmentsFilter data={data} refetch={refetch} />\n                <h5>{t(\"general.menu\")}</h5>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      )}}}\n      </Query>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(ScheduleAppointments))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const APPOINTMENT_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n  })\n","import React, { useContext } from 'react'\nimport DatePicker from \"react-datepicker\"\nimport { withTranslation } from 'react-i18next'\n\nimport AppSettingsContext from '../context/AppSettingsContext'\n\nfunction CSTimePicker({t, selected, onChange=f=>f, onBlur=f=>f, className=\"form-control\", clearable=true, placeholderText=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  return (\n    <DatePicker \n      dateFormat={timeFormat}\n      selected={selected}\n      placeholderText={(placeholderText) ? placeholderText : t('datepicker.placeholder_time')}\n      isClearable={clearable}\n      showTimeSelect\n      showTimeSelectOnly\n      timeIntervals={15}\n      timeCaption={t(\"general.time\")}\n      className={className}\n      dropdownMode=\"select\"\n      onChange={(date) => onChange(date)}\n      onBlur={() => onBlur()}\n    />\n  )\n}\n\nexport default withTranslation()(CSTimePicker)","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nlet edit_active\nlet instructors_available_active\n\nconst AppointmentEditMenu = ({ t, activeLink, appointmentId }) => (\n    <List.Group transparent={true}>\n        {(activeLink === 'edit') ? edit_active = true: edit_active = false}\n        {(activeLink === 'instructors_available') ? instructors_available_active = true: instructors_available_active = false}\n        \n        <HasPermissionWrapper\n          resource=\"scheduleappointment\"\n          permission=\"change\"\n        >        \n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/appointments/all/edit/\" + appointmentId}\n              icon=\"edit-3\"\n              active={edit_active}\n              >\n              {t('general.edit')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper\n          resource=\"scheduleappointment\"\n          permission=\"change\"\n        >     \n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/appointments/all/instructors_available/\" + appointmentId}\n              icon=\"users\"\n              active={instructors_available_active}\n              >\n              {t('general.instructors_available')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n);\n\nexport default withTranslation()(AppointmentEditMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleAppointmentForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.appointments.public')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group label={t('schedule.appointments.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.appointments.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.appointments.select_weekly')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.appointments.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        {/* <Form.Group label={t('general.appointment')}>\n          <Field component=\"select\" \n                name=\"organizationAppointment\" \n                className={(errors.organizationAppointment) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n            {inputData.organizationAppointments.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationAppointment\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>  */}\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.appointments.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.note')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"note\"\n              initialValue={values.note}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"note\", e.target.getContent())\n                setFieldTouched(\"note\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n            {t('general.cancel')}\n        </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleAppointmentForm))","import React, { Component } from 'react'\nimport { Query, Mutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_APPOINTMENTS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { APPOINTMENT_SCHEMA } from './yupSchema'\nimport ScheduleAppointmentForm from './ScheduleAppointmentForm'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\n\nconst CREATE_APPOINTMENT = gql`\n  mutation CreateScheduleAppointment($input:CreateScheduleAppointmentInput!) {\n    createScheduleAppointment(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n  }\n`\n\n\nclass ScheduleAppointmentAdd extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule appointment add add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const returnUrl = \"/schedule/appointments\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n\n          <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false}} >\n            {({ loading, error, data, refetch }) => {\n              // Loading\n              if (loading) return (\n                <Container>\n                  <p>{t('general.loading_with_dots')}</p>\n                </Container>\n              )\n              // Error\n              if (error) {\n                console.log(error)\n                return (\n                  <Container>\n                    <p>{t('general.error_sad_smiley')}</p>\n                  </Container>\n                )\n              }\n              \n              console.log('query data')\n              console.log(data)\n              const inputData = data\n\n              return (\n                <Container>\n                  <Page.Header title={t(\"schedule.title\")} />\n                  <Grid.Row>\n                    <Grid.Col md={9}>\n                      <Card>\n                        <Card.Header>\n                          <Card.Title>{t('schedule.appointments.title_add')}</Card.Title>\n                        </Card.Header>\n                        <Mutation mutation={CREATE_APPOINTMENT} onCompleted={() => history.push(returnUrl)}> \n                  {(createSubscription, { data }) => (\n                    <Formik\n                      initialValues={{ \n                        displayPublic: true,\n                        frequencyType: \"WEEKLY\",\n                        frequencyInterval: 1,\n                        organizationLocationRoom: \"\",\n                        dateStart: new Date(),\n                        timeStart: new Date(),\n                        timeEnd: new Date(),\n                      }}\n                      validationSchema={APPOINTMENT_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log('submit values:')\n                          console.log(values)\n\n                          let frequencyInterval = values.frequencyInterval\n                          if (values.frequencyType === 'SPECIFIC')\n                            frequencyInterval = 0\n\n                          let dateEnd\n                            if (values.dateEnd) {\n                              dateEnd = dateToLocalISO(values.dateEnd)\n                            } else {\n                              dateEnd = values.dateEnd\n                            }\n                          \n                          createSubscription({ variables: {\n                            input: {\n                              displayPublic: values.displayPublic,\n                              frequencyType: values.frequencyType,\n                              frequencyInterval: frequencyInterval,\n                              organizationLocationRoom: values.organizationLocationRoom,\n                              dateStart: dateToLocalISO(values.dateStart),\n                              dateEnd: dateEnd,\n                              timeStart: dateToLocalISOTime(values.timeStart),\n                              timeEnd: dateToLocalISOTime(values.timeEnd)\n                            }\n                          }, refetchQueries: [\n                              {query: GET_APPOINTMENTS_QUERY, variables: get_list_query_variables()}\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data)\n                              toast.success((t('schedule.appointments.toast_add_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                            <ScheduleAppointmentForm\n                              inputData={inputData}\n                              isSubmitting={isSubmitting}\n                              setFieldValue={setFieldValue}\n                              setFieldTouched={setFieldTouched}\n                              errors={errors}\n                              values={values}\n                              touched={touched}\n                              returnUrl={returnUrl}\n                            >\n                              {console.log('########## v & e')}\n                              {console.log(values)}\n                              {console.log(errors)}\n                              {console.log(touched)}\n                            </ScheduleAppointmentForm>\n                          )\n                        }\n                    </Formik>\n                    )}\n                  </Mutation>\n                </Card>\n                    </Grid.Col>\n                      <Grid.Col md={3}>\n                        <HasPermissionWrapper permission=\"add\"\n                                              resource=\"scheduleappointment\">\n                          <Button color=\"primary btn-block mb-6\"\n                                  onClick={() => history.push(returnUrl)}>\n                            <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                          </Button>\n                        </HasPermissionWrapper>\n                      </Grid.Col>\n                    </Grid.Row>\n                  </Container>\n            )}}\n          </Query>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(ScheduleAppointmentAdd))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nconst AppointmentEditBack = ({ t }) => (\n  <div className=\"page-options d-flex\">\n    <Link to=\"/schedule/appointments\" \n          className='btn btn-outline-secondary btn-sm'>\n        <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('schedule.title')}\n    </Link>\n  </div>\n)\n\nexport default withTranslation()(AppointmentEditBack)","// @flow\n\nimport React, { Component } from 'react'\nimport { t } from 'i18next'\nimport { Query } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_APPOINTMENT_QUERY } from \"../queries\"\n\nimport AppointmentEditMenu from './AppointmentEditMenu'\nimport AppointmentEditBack from './AppointmentEditBack';\nimport { appointment_edit_all_subtitle } from \"./tools\"\n\n\nclass AppointmentEditBase extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule appointment edit add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const appointmentId = match.params.appointment_id\n    const menu_activeLink = this.props.menu_activeLink\n    const default_card = this.props.default_card\n    const sidebar_button = this.props.sidebar_button\n\n    return (\n      <Query query={GET_APPOINTMENT_QUERY} variables = {{id: appointmentId, archived: false}} >\n        {({ loading, error, data, refetch }) => {\n          // Loading\n          if (loading) return (\n            <p>{t('general.loading_with_dots')}</p>\n          )\n          // Error\n          if (error) {\n            console.log(error)\n            return (\n              <p>{t('general.error_sad_smiley')}</p>\n            )\n          }\n          \n          console.log('query data')\n          console.log(data)\n          const initialValues = data.scheduleItem\n\n          const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n          const subtitle = appointment_edit_all_subtitle({\n            t: t,\n            location: initialValues.organizationLocationRoom.organizationLocation.name,\n            locationRoom: initialValues.organizationLocationRoom.name,\n            starttime: initialTimeStart\n          })\n          \n          return (\n            <Container>\n              <Page.Header \n                title={t(\"schedule.title\")} \n                subTitle={subtitle}\n              >\n                <AppointmentEditBack />\n              </Page.Header>\n              <Grid.Row>\n                <Grid.Col md={9}>\n                  {!default_card ? this.props.children :\n                    <Card>\n                      <Card.Header>\n                        <Card.Title>{this.props.card_title}</Card.Title>\n                      </Card.Header>\n                      <Card.Body>\n                        {this.props.children}\n                      </Card.Body>\n                    </Card>\n                  }\n                </Grid.Col>\n                <Grid.Col md={3}>\n                  {sidebar_button}\n                  <AppointmentEditMenu activeLink={menu_activeLink} appointmentId={appointmentId}/>\n                </Grid.Col>\n              </Grid.Row>\n            </Container>\n          )\n        }}\n      </Query>\n)}}\n\nAppointmentEditBase.defaultProps = {\n  default_card: true,\n  sidebar_button: \"\",\n  card_title: t('schedule.appointments.title_edit')\n}\n\nexport default withTranslation()(withRouter(AppointmentEditBase))","import moment from 'moment'\n\nexport function appointment_edit_all_subtitle({t, location, locationRoom, starttime}) {\n  return t('general.appointment') + ': ' + location + ' (' + locationRoom + ') @ ' + moment(starttime).format('LT')\n}\n\n\nexport function represent_instructor_role(t, role) {\n  console.log(role)\n  switch (role) {\n    case \"SUB\":\n      return t('schedule.classes.instructor_roles.sub')\n    case \"ASSISTANT\":\n      return t('schedule.classes.instructor_roles.assistant')\n    case \"KARMA\":\n      return t('schedule.classes.instructor_roles.karma')\n    default:\n      return \"\"\n  }\n}\n","import React, { Component } from 'react'\nimport { Query, Mutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_APPOINTMENTS_QUERY, GET_APPOINTMENT_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { APPOINTMENT_SCHEMA } from '../../yupSchema'\nimport ScheduleAppointmentForm from '../../ScheduleAppointmentForm'\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n\nimport AppointmentEditBase from '../AppointmentEditBase'\n\n\nconst UPDATE_APPOINTMENT = gql`\n  mutation UpdateScheduleAppointment($input:UpdateScheduleAppointmentInput!) {\n    updateScheduleAppointment(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n  }\n`\n\n\nclass ScheduleAppointmentEditAll extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule appointment edit add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.appointment_id\n    const returnUrl = \"/schedule/appointments\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Query query={GET_APPOINTMENT_QUERY} variables = {{id: id, archived: false}} >\n            {({ loading, error, data, refetch }) => {\n              // Loading\n              if (loading) return (\n                <AppointmentEditBase menu_activeLink=\"edit\">\n                  <p>{t('general.loading_with_dots')}</p>\n                </AppointmentEditBase>\n              )\n              // Error\n              if (error) {\n                console.log(error)\n                return (\n                  <AppointmentEditBase menu_activeLink=\"edit\">\n                    <p>{t('general.error_sad_smiley')}</p>\n                  </AppointmentEditBase>\n                )\n              }\n              \n              console.log('query data')\n              console.log(data)\n              const inputData = data\n              const initialValues = data.scheduleItem\n\n              const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n              const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n              \n              return (\n                <AppointmentEditBase \n                  menu_activeLink=\"edit\"\n                >\n                  <Mutation mutation={UPDATE_APPOINTMENT} onCompleted={() => history.push(returnUrl)}> \n                  {(updateScheduleAppointment, { data }) => (\n                    <Formik\n                      initialValues={{ \n                        displayPublic: initialValues.displayPublic,\n                        frequencyType: initialValues.frequencyType,\n                        frequencyInterval: initialValues.frequencyInterval,\n                        organizationLocationRoom: initialValues.organizationLocationRoom.id,\n                        dateStart: initialValues.dateStart,\n                        dateEnd: initialValues.dateEnd,\n                        timeStart: initialTimeStart,\n                        timeEnd: initialTimeEnd,\n                      }}\n                      validationSchema={APPOINTMENT_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log('submit values:')\n                          console.log(values)\n\n                          let frequencyInterval = values.frequencyInterval\n                          if (values.frequencyType === 'SPECIFIC')\n                            frequencyInterval = 0\n\n                          let dateEnd\n                            if (values.dateEnd) {\n                              dateEnd = dateToLocalISO(values.dateEnd)\n                            } else {\n                              dateEnd = values.dateEnd\n                            }  \n\n                          updateScheduleAppointment({ variables: {\n                            input: {\n                              id: id,\n                              displayPublic: values.displayPublic,\n                              frequencyType: values.frequencyType,\n                              frequencyInterval: frequencyInterval,\n                              organizationLocationRoom: values.organizationLocationRoom,\n                              dateStart: dateToLocalISO(values.dateStart),\n                              dateEnd: dateEnd,\n                              timeStart: dateToLocalISOTime(values.timeStart),\n                              timeEnd: dateToLocalISOTime(values.timeEnd)\n                            }\n                          }, refetchQueries: [\n                              {query: GET_APPOINTMENTS_QUERY, variables: get_list_query_variables()}\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data)\n                              toast.success((t('schedule.appointments.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                        <ScheduleAppointmentForm\n                          inputData={inputData}\n                          isSubmitting={isSubmitting}\n                          setFieldValue={setFieldValue}\n                          setFieldTouched={setFieldTouched}\n                          errors={errors}\n                          values={values}\n                          touched={touched}\n                          returnUrl={returnUrl}\n                        >\n                          {console.log('########## v & e')}\n                          {console.log(values)}\n                          {console.log(errors)}\n                          {console.log(touched)}\n                        </ScheduleAppointmentForm>\n                      )}\n                    </Formik>\n                    )}\n                  </Mutation>\n                </AppointmentEditBase>\n            )}}\n           </Query>\n         </div>\n      </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(ScheduleAppointmentEditAll))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\n\nfunction StatusIcon({color=\"\"}) {\n  let className\n\n  switch (color) {\n    case \"success\":\n      className=\"bg-success\"\n      break\n    case \"warning\":\n      className=\"bg-warning\"\n      break\n    case \"danger\":\n      className=\"bg-danger\"\n      break\n    case \"primary\":\n      className=\"bg-primary\"\n      break\n    default:\n      className=\"bg-secondary\"\n  }\n\n  return <span className={\"status-icon \" + className} />\n}\n\n\nexport default withTranslation()(StatusIcon)\n\n\n\n","import React from \"react\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport StatusIcon from \"../../ui/StatusIcon\"\n\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationClasstype\n  let organizationLevel\n  let organizationLocation\n\n  let queryVars = {\n    attendanceCountType: \"ATTENDING_AND_BOOKED\",\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationClasstype = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE)\n  if (organizationClasstype) {\n    queryVars.organizationClasstype = organizationClasstype\n  } else {\n    queryVars.organizationClasstype = \"\"\n  }\n\n  organizationLevel = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL)\n  if (organizationLevel) {\n    queryVars.organizationLevel = organizationLevel\n  } else {\n    queryVars.organizationLevel = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function represent_instructor(name, role) {\n  let textColor = false\n\n  switch (role) {\n    case \"SUB\":\n      textColor = \"text-blue\"\n      break\n    case \"ASSISTANT\":\n      textColor = \"text-green\"\n      break\n    case \"KARMA\":\n      textColor = \"text-orange\"\n      break\n    default:\n      break\n  }\n\n  if (textColor) {\n    return <span className={textColor}>{name}</span>\n  } else {\n    return name\n  }\n}\n\n\nexport function represent_class_status(status) {\n  let color\n\n  switch (status) {\n    case \"SUB\":\n      color = \"primary\"\n      break\n    case \"CANCELLED\":\n      color = \"warning\"\n      break\n    case \"OPEN\":\n      color = \"danger\"\n      break\n    default:\n      color = \"success\"\n  }\n\n  return <StatusIcon color={color} />\n}\n\n\nexport function get_class_messages(t, status, description, holiday, holidayName) {\n  if (holiday) {\n    return <span>{t(\"general.holiday\")} ({holidayName})</span>\n  }\n\n  if (status === 'CANCELED') {\n    return description\n  }\n}","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nfunction ScheduleClassesFilter({ t, history, data, refetch }) {\n  let [location, setLocation] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION))\n  let [classtype, setClasstype] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE))\n  let [level, setLevel] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL))\n\n  return (\n    <React.Fragment>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Button\n            className=\"float-right\"\n            color=\"link\"\n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n              setLocation(\"\")\n              setClasstype(\"\")\n              setLevel(\"\")\n              refetch(get_list_query_variables())\n            }}\n          >\n            {t(\"general.reset_filter\")}\n          </Button>\n          <h6 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h6>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          {/* Locations */}\n          <select \n            className={selectClass}\n            value={location}\n            onChange={ (event) => {\n              setLocation(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_LOCATION,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_locations\")}</option>\n            {data.organizationLocations.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col>\n          {/* Classtypes */}\n          <select \n            className={selectClass}\n            value={classtype}\n            onChange={ (event) => {\n              setClasstype(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_classtypes\")}</option>\n            {data.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col>\n          {/* Levels */}\n          <select \n            className={selectClass}\n            value={level}\n            onChange={ (event) => {\n              setLevel(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_LEVEL,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_levels\")}</option>\n            {data.organizationLevels.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n      </Grid.Row>\n    </React.Fragment>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassesFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport ButtonAdd from '../../ui/ButtonAdd';\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ScheduleClassesFilter from \"./ScheduleClassesFilter\"\n\nimport { \n  get_list_query_variables, \n} from './tools'\n\nimport moment from 'moment'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleClassesBase ({ t, history, children, data, refetch }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.classes.title\")}>\n            <div className=\"page-options d-flex\">\n              <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n                <Button \n                  icon=\"home\"\n                  tooltip=\"text\"\n                  className=\"mr-2\"\n                  color={\n                    ((localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY))) ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"location\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n                <Button \n                  icon=\"clock\"\n                  className=\"mr-2\"\n                  color={\n                    (localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"starttime\") ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"starttime\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <CSDatePicker \n                className=\"form-control schedule-list-csdatepicker mr-2\"\n                selected={new Date(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM))}\n                isClearable={false}\n                onChange={(date) => {\n                  let nextWeekFrom = moment(date)\n                  let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                  console.log(get_list_query_variables())\n\n                  refetch(get_list_query_variables())\n                }}\n                placeholderText={t('schedule.classes.go_to_date')}\n              />\n              <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).subtract(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentWeekFrom = moment()\n                    let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                    \n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).add(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n              </Button.List> \n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"scheduleclass\">\n                <ButtonAdd addUrl={\"/schedule/classes/add\"} className=\"ml-2\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n          <Grid.Col md={12}>\n            {(data) ? \n              <ScheduleClassesFilter data={data} refetch={refetch} />\n            : \"\"}\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSES_QUERY = gql`\n  query ScheduleClasses(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $organizationClasstype: ID,\n      $organizationLevel: ID,\n      $organizationLocation: ID,\n      $attendanceCountType: String!\n    ){\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationClasstype: $organizationClasstype,\n        organizationLevel: $organizationLevel,\n        organizationLocation: $organizationLocation,\n        attendanceCountType: $attendanceCountType,\n        publicOnly: false\n    ){\n      date\n      bookingOpenOn\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        holiday\n        holidayName\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        availableSpacesOnline\n        availableSpacesTotal\n        displayPublic\n        bookingStatus\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationClasstypes(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_CLASS_QUERY = gql`\n  query ScheduleItem($id: ID!, $before: String, $after: String) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      spaces\n      walkInSpaces\n      displayPublic\n      infoMailContent\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleClassInputValues($after: String, $before: String) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_CLASS = gql`\n  mutation CreateScheduleClass($input:CreateScheduleClassInput!) {\n    createScheduleClass(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport {\n  Badge,\n  Dropdown,\n  Icon,\n  Card,\n  Table,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ScheduleClassesBase from './ScheduleClassesBase'\n\nimport { GET_CLASSES_QUERY } from \"./queries\"\nimport { \n  get_class_messages,\n  get_list_query_variables, \n  represent_class_status,\n  represent_instructor \n} from './tools'\n\nimport moment from 'moment'\n\n\nconst DELETE_SCHEDULE_CLASS = gql`\n  mutation DeleteScheduleClass($input: DeleteScheduleClassInput!) {\n    deleteScheduleClass(input: $input) {\n      ok\n    }\n  }\n`\n\n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div key={v4()} className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          {msgConfirm}\n          {msgDescription}\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deleteFunction(functionVariables)\n                .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success(\n                    msgSuccess, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error);\n                })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n        </div>\n      )\n    }\n  })\n}\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleClasses ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const {loading, error, data, refetch} = useQuery(GET_CLASSES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteScheduleClass] = useMutation(DELETE_SCHEDULE_CLASS)\n\n  if (loading) {\n    return (\n      <ScheduleClassesBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </ScheduleClassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleClassesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleClassesBase>\n    )\n  }\n\n  const classes = data.scheduleClasses\n       \n  // Empty list\n  if (!classes.length) { return (\n    <ScheduleClassesBase>\n      <p>\n        {t('schedule.classes.empty_list')}\n      </p>\n    </ScheduleClassesBase>\n  )} \n\n  return (\n    <ScheduleClassesBase data={data} refetch={refetch}>\n      { data.scheduleClasses.map(({ date, classes }) => (\n        <div key={v4()}>\n          <Card>\n            <Card.Header>\n              <Card.Title>\n                <b>{moment(date).format(\"dddd\")}</b> {' '}\n                <span className=\"text-muted\">\n                  {moment(date).format(\"LL\")} \n                </span>\n              </Card.Title>\n            </Card.Header>\n            {!(classes.length) ? <Card.Body>{t('schedule.classes.empty_list')}</Card.Body> :\n              <Table cards>\n                <Table.Header>\n                  <Table.Row key={v4()}>\n                    <Table.ColHeader /> \n                    <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                    <Table.ColHeader></Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {classes.map((\n                    { scheduleItemId, \n                      frequencyType,\n                      date, \n                      status,\n                      holiday,\n                      holidayName,\n                      description,\n                      account, \n                      role,\n                      account2,\n                      role2,\n                      organizationLocationRoom, \n                      organizationClasstype, \n                      organizationLevel,\n                      timeStart, \n                      timeEnd,\n                      displayPublic }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {represent_class_status(status)}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Start & end time */}\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                        {(frequencyType === 'SPECIFIC') ? <Badge color=\"primary\">{t('general.once')}</Badge> : null } \n                        {(frequencyType === 'LAST_WEEKDAY_OF_MONTH') ? <Badge color=\"success\">{t('general.monthly')}</Badge> : null } \n                        <br />\n                        <small className=\"text-muted\">{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Location */}\n                        {organizationLocationRoom.organizationLocation.name} <br />\n                        <small className=\"text-muted\">{organizationLocationRoom.name}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Type and level */}\n                        {organizationClasstype.name} <br />\n                        <small className=\"text-muted\">\n                          {(organizationLevel) ? organizationLevel.name: \"\"}\n                        </small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Instructor(s) */}\n                        { (account) ? \n                            represent_instructor(account.fullName, role) : \n                            <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                        } <br />\n                        <small className=\"text-muted\">\n                          {(account2) ? represent_instructor(account2.fullName, role2) : \"\"}\n                        </small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Public */}\n                        <BadgeBoolean value={displayPublic} />\n                      </Table.Col>\n                      <Table.Col>\n                        <Dropdown\n                          key={v4()}\n                          className=\"pull-right\"\n                          type=\"button\"\n                          toggle\n                          color=\"secondary btn-sm\"\n                          triggerContent={t(\"general.actions\")}\n                          items={[\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                              <Link to={'/schedule/classes/class/attendance/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"check-circle\"\n                                >\n                                    {t(\"general.attendance\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                              <Link to={'/schedule/classes/class/attendance_chart/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"bar-chart-2\">\n                                    {t(\"schedule.classes.class.attendance_chart.title\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemweeklyotc\">\n                              <Link to={'/schedule/classes/class/edit/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"edit-3\"\n                                >\n                                  {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleclass\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <Link to={'/schedule/classes/all/edit/' + scheduleItemId}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  badge={t('schedule.classes.all_classes_in_series')}\n                                  badgeType=\"secondary\"\n                                  icon=\"edit-3\"\n                                >\n                                    {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleclass\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <span className=\"text-red\">\n                              <Dropdown.Item\n                                key={v4()}\n                                badge={t('schedule.classes.all_classes_in_series')}\n                                badgeType=\"danger\"\n                                icon=\"trash-2\"\n                                onClick={() => {\n                                  confirm_delete({\n                                    t: t,\n                                    msgConfirm: t(\"schedule.classes.delete_confirm_msg\"),\n                                    msgDescription: <p key={v4()}>\n                                      {moment(date + ' ' + timeStart).format('LT')} {' - '}\n                                      {moment(date + ' ' + timeEnd).format('LT')} {' '} @ {' '}\n                                      {organizationLocationRoom.organizationLocation.name} {' '}\n                                      {organizationLocationRoom.name}\n                                      {organizationClasstype.Name}\n                                      </p>,\n                                    msgSuccess: t('schedule.classes.deleted'),\n                                    deleteFunction: deleteScheduleClass,\n                                    functionVariables: { variables: {\n                                      input: {\n                                        id: scheduleItemId\n                                      }\n                                    }, refetchQueries: [\n                                      { query: GET_CLASSES_QUERY, variables: get_list_query_variables() }\n                                    ]}\n                                  })\n                                }}>\n                              {t(\"general.delete\")}\n                              </Dropdown.Item>\n                              </span>\n                            </HasPermissionWrapper>\n                          ]}\n                        />\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            }\n          </Card>\n        </div>\n      ))}\n    </ScheduleClassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClasses))\n\n//     <SiteWrapper>\n//       <div className=\"my-3 my-md-5\">\n//         <Query query={GET_CLASSES_QUERY} variables={get_list_query_variables()}>\n//           {({ loading, error, data, refetch }) => {\n//             // Loading\n//             if (loading) return (\n//               <Container>\n//                 <p>{t('general.loading_with_dots')}</p>\n//               </Container>\n//             )\n//             // Error\n//             if (error) {\n//               console.log(error)\n//               return (\n//                 <Container>\n//                   <p>{t('general.error_sad_smiley')}</p>\n//                 </Container>\n//               )\n//             }\n//             const headerOptions = <Card.Options>\n//               {/* <Button color={(!archived) ? 'primary': 'secondary'}  \n//                       size=\"sm\"\n//                       onClick={() => {archived=false; refetch({archived});}}>\n//                 {t('general.current')}\n//               </Button>\n//               <Button color={(archived) ? 'primary': 'secondary'} \n//                       size=\"sm\" \n//                       className=\"ml-2\" \n//                       onClick={() => {archived=true; refetch({archived});}}>\n//                 {t('general.archive')}\n//               </Button> */}\n//             </Card.Options>\n            \n//             // Empty list\n//             if (!data.scheduleClasses.length) { return (\n//               <ContentCard cardTitle={t('schedule.classes.title')}\n//                             headerContent={headerOptions}\n//                             hasCardBody={true}>\n//                 <p>\n//                   {t('schedule.classes.empty_list')}\n//                 </p>\n//               </ContentCard>\n//             )} else {   \n\n//             console.log(data)\n//             // Life's good! :)\n//             return (\n//               <Container>\n//                 <Page.Header title={t(\"schedule.title\")}>\n//                   <div className=\"page-options d-flex\">\n//                     <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n//                       <Button \n//                         icon=\"home\"\n//                         tooltip=\"text\"\n//                         className=\"mr-2\"\n//                         color={\n//                           ((localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY))) ?\n//                           \"azure\" : \"secondary\"\n//                         }\n//                         onClick={() => {\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"location\")\n//                           refetch(get_list_query_variables())\n//                         }}\n//                       />\n//                     </span>\n//                     <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n//                       <Button \n//                         icon=\"clock\"\n//                         className=\"mr-2\"\n//                         color={\n//                           (localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"starttime\") ?\n//                           \"azure\" : \"secondary\"\n//                         }\n//                         onClick={() => {\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"starttime\")\n//                           refetch(get_list_query_variables())\n//                         }}\n//                       />\n//                     </span>\n//                     <CSDatePicker \n//                       className=\"form-control schedule-list-csdatepicker mr-2\"\n//                       selected={new Date(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM))}\n//                       isClearable={false}\n//                       onChange={(date) => {\n//                         let nextWeekFrom = moment(date)\n//                         let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                         console.log(get_list_query_variables())\n\n//                         refetch(get_list_query_variables())\n//                       }}\n//                       placeholderText={t('schedule.classes.go_to_date')}\n//                     />\n//                     <Button.List className=\"schedule-list-page-options-btn-list\">\n//                       <Button \n//                         icon=\"chevron-left\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).subtract(7, 'days')\n//                           let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                          \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                           refetch(get_list_query_variables())\n//                       }} />\n//                       <Button \n//                         icon=\"sunset\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let currentWeekFrom = moment()\n//                           let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                          \n//                           refetch(get_list_query_variables())\n//                       }} />\n//                       <Button \n//                         icon=\"chevron-right\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).add(7, 'days')\n//                           let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                          \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                           refetch(get_list_query_variables())\n//                       }} />\n//                     </Button.List> \n//                   </div>\n//                 </Page.Header>\n//                 <Grid.Row>\n//                   <Grid.Col md={9}>\n//                     {\n                      \n//                       ))}\n//                 </Grid.Col>\n//                 <Grid.Col md={3}>\n//                   <HasPermissionWrapper permission=\"add\"\n//                                         resource=\"scheduleclass\">\n//                     <Button color=\"primary btn-block mb-1\"\n//                             onClick={() => history.push(\"/schedule/classes/add\")}>\n//                       <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.add')}\n//                     </Button>\n//                   </HasPermissionWrapper>\n//                   <div>\n//                     <Button\n//                       className=\"pull-right\"\n//                       color=\"link\"\n//                       size=\"sm\"\n//                       onClick={() => {\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n//                         refetch(get_list_query_variables())\n//                       }}\n//                     >\n//                       {t(\"general.clear\")}\n//                     </Button>\n//                   </div>\n//                   <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5>\n//                   <ScheduleClassesFilter data={data} refetch={refetch} />\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         )}}}\n//         </Query>\n//       </div>\n//     </SiteWrapper>\n//   )\n// }\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASS_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    organizationClasstype: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    spaces: Yup.number()\n      .required(t('yup.field_required')),\n    walkInSpaces: Yup.number()\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleClassForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.public')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group label={t('schedule.classes.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.classes.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.classes.select_weekly')}</option>\n            <option value=\"LAST_WEEKDAY_OF_MONTH\" key={v4()}>{t('schedule.classes.select_last_weekday_of_month')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.classes.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.level')}>\n              <Field component=\"select\" \n                    name=\"organizationLevel\" \n                    className={(errors.organizationLevels) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"\")}</option>\n                {inputData.organizationLevels.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLevels\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.class')}>\n          <Field component=\"select\" \n                name=\"organizationClasstype\" \n                className={(errors.organizationClasstype) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n            {inputData.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationClasstype\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces')}>\n              <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_walk_in')}>\n              <Field type=\"text\" \n                    name=\"walkInSpaces\" \n                    className={(errors.walkInSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"walkInSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.note')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"note\"\n              initialValue={values.note}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"note\", e.target.getContent())\n                setFieldTouched(\"note\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.info_mail')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"infoMailContent\"\n              initialValue={values.infoMailContent}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"infoMailContent\", e.target.getContent())\n                setFieldTouched(\"infoMailContent\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction ScheduleClassAddBase({t, children}) {\n  const returnUrl = \"/schedule/classes\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"general.classes\")}>\n            <div className='page-options d-flex'>\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAddBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_CLASS } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { CLASS_SCHEMA } from './yupSchema'\nimport ScheduleClassForm from './ScheduleClassForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\nimport ScheduleClassAddBase from './ScheduleClassAddBase'\n\n\nfunction ScheduleClassAdd({t, history}) {\n  const cardTitle = t('schedule.classes.title_add')\n  const returnUrl = \"/schedule/classes\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleClass ] = useMutation(CREATE_CLASS)\n  \n\n  if (loading) return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleClassAddBase>\n  )\n\n  if (error) return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleClassAddBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            frequencyType: \"WEEKLY\",\n            frequencyInterval: 1,\n            organizationLocationRoom: \"\",\n            organizationClasstype: \"\",\n            organizationLevel: \"\",\n            dateStart: new Date(),\n            timeStart: new Date(),\n            timeEnd: new Date(),\n            spaces: \"\",\n            walkInSpaces: \"\"\n          }}\n          validationSchema={CLASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              \n              createScheduleClass({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationClasstype: values.organizationClasstype,\n                  organizationLevel: values.organizationLevel,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                  spaces: parseInt(values.spaces),\n                  walkInSpaces: parseInt(values.walkInSpaces)\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  const classId = data.createScheduleClass.scheduleItem.id\n                  history.push(`/schedule/classes/all/edit/${classId}`)\n                  toast.success((t('schedule.classes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                <ScheduleClassForm\n                  inputData={inputData}\n                  isSubmitting={isSubmitting}\n                  setFieldValue={setFieldValue}\n                  setFieldTouched={setFieldTouched}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  returnUrl={returnUrl}\n                >\n                </ScheduleClassForm>\n              )\n           }\n        </Formik>\n      </Card>      \n    </ScheduleClassAddBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAdd))","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_CLASS = gql`\nmutation UpdateScheduleClass($input:UpdateScheduleClassInput!) {\n  updateScheduleClass(input: $input) {\n    scheduleItem {\n      id\n      scheduleItemType\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n}\n`","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nconst ClassEditMenu = ({ t, activeLink, classId }) => (\n    <List.Group transparent={true}>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/schedule/classes/all/edit/\" + classId}\n            icon=\"edit-3\"\n            active={activeLink === 'edit'}\n            >\n            {t('general.edit')}\n        </List.GroupItem>\n        <HasPermissionWrapper \n            resource=\"scheduleitemaccount\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/instructors/\" + classId}\n              icon=\"users\"\n              active={activeLink === 'instructors'}\n              >\n              {t('general.instructors')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemenrollment\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/enrollments/\" + classId}\n              icon=\"check-square\"\n              active={activeLink === 'enrollments'}\n              >\n              {t('general.enrollments')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemprice\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/prices/\" + classId}\n              icon=\"copy\"\n              active={activeLink === 'prices'}\n              >\n              {t('schedule.classes.prices.title')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemorganizationsubscriptiongroup\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/subscriptions/\" + classId}\n              icon=\"edit\"\n              active={activeLink === 'subscriptions'}\n              >\n              {t('general.subscriptions')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemorganizationclasspassgroup\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/classpasses/\" + classId}\n              icon=\"credit-card\"\n              active={activeLink === 'classpasses'}\n              >\n              {t('general.classpasses')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n);\n\nexport default withTranslation()(ClassEditMenu)\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ClassEditMenu from './ClassEditMenu'\n\n\nfunction ClassEditBaseBase({t, match, children, subTitle=\"\", cardTitle=\"\", defaultCard=true, menuActiveLink=\"\", pageHeaderButtonList=\"\"}) {\n  const classId = match.params.class_id\n  \n  return (\n    <SiteWrapper>\n      <Container>\n        <Page.Header \n          title={t(\"schedule.title\")} \n          subTitle={subTitle}\n        >\n          <div className='page-options d-flex'>\n            {pageHeaderButtonList}\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            {(!defaultCard) ? children :\n              <Card title={cardTitle}>\n                {children}\n              </Card>\n            }\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <ClassEditMenu activeLink={menuActiveLink} classId={classId}/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ClassEditBaseBase))","import moment from 'moment'\n\nexport function class_edit_all_subtitle({t, location, locationRoom, classtype, starttime}) {\n  return t('general.class') + ': ' + location + ' (' + locationRoom + ') - ' + classtype + ' @ ' + moment(starttime).format('LT')\n}\n\nexport function represent_instructor_role(t, role) {\n  console.log(role)\n  switch (role) {\n    case \"SUB\":\n      return t('schedule.classes.instructor_roles.sub')\n    case \"ASSISTANT\":\n      return t('schedule.classes.instructor_roles.assistant')\n    case \"KARMA\":\n      return t('schedule.classes.instructor_roles.karma')\n    default:\n      return \"\"\n  }\n}\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_CLASS_QUERY } from \"../queries\"\n\nimport ClassEditBaseBase from './ClassEditBaseBase'\nimport { class_edit_all_subtitle } from \"./tools\"\n\n\nfunction ClassEditBase({t, match, children, menuActiveLink=\"\", defaultCard=true, pageHeaderButtonList=\"\", cardTitle=\"\"}) {\n  const classId = match.params.class_id\n  const { loading, error, data } = useQuery(GET_CLASS_QUERY, { variables: {\n    id: classId\n  }})\n\n  if (!cardTitle) {\n    cardTitle = t('schedule.classes.title_edit')\n  }\n\n  if (loading) return (\n    <ClassEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ClassEditBaseBase>\n  )\n\n  if (error) return (\n    <ClassEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      {console.log(error)}\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBaseBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const subTitle = class_edit_all_subtitle({\n    t: t,\n    location: initialValues.organizationLocationRoom.organizationLocation.name,\n    locationRoom: initialValues.organizationLocationRoom.name,\n    classtype: initialValues.organizationClasstype.name,\n    starttime: initialTimeStart\n  })\n\n  return (\n    <ClassEditBaseBase \n      subTitle={subTitle}\n      cardTitle={cardTitle}\n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={defaultCard}\n      menuActiveLink={menuActiveLink}\n    >\n      {children}\n    </ClassEditBaseBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(ClassEditBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSES_QUERY, GET_CLASS_QUERY } from '../../queries'\nimport { UPDATE_CLASS } from './queries'\n\nimport { get_list_query_variables } from '../../tools'\nimport { CLASS_SCHEMA } from '../../yupSchema'\nimport ScheduleClassForm from '../../ScheduleClassForm'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ClassEditBase from '../ClassEditBase'\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleClassEditAll({t, match}) {\n  const id = match.params.class_id\n  const menuActiveLink = \"edit\"\n  const returnUrl = \"/schedule/classes\"\n  const cardTitle = t('schedule.classes.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASS_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleClass ] = useMutation(UPDATE_CLASS)\n\n  if (loading) return (\n    <ClassEditBase menu_activeLink={menuActiveLink}>\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase menu_activeLink={menuActiveLink}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialValues = data.scheduleItem\n\n  let initialLevelID = \"\"\n  if (initialValues.organizationLevel) {\n    initialLevelID = initialValues.organizationLevel.id\n  }\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialValues.dateStart) {\n    dateStart = new Date(initialValues.dateStart)\n  }\n  if (initialValues.dateEnd) {\n    dateEnd = new Date(initialValues.dateEnd)\n  }\n\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink}\n      defaultCard={false}\n    >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialValues.displayPublic,\n            frequencyType: initialValues.frequencyType,\n            frequencyInterval: initialValues.frequencyInterval,\n            organizationLocationRoom: initialValues.organizationLocationRoom.id,\n            organizationClasstype: initialValues.organizationClasstype.id,\n            organizationLevel: initialLevelID,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n            timeStart: initialTimeStart,\n            timeEnd: initialTimeEnd,\n            spaces: initialValues.spaces,\n            walkInSpaces: initialValues.walkInSpaces,\n            infoMailContent: initialValues.infoMailContent\n          }}\n          validationSchema={CLASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }  \n\n              updateScheduleClass({ variables: {\n                input: {\n                  id: id,\n                  displayPublic: values.displayPublic,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationClasstype: values.organizationClasstype,\n                  organizationLevel: values.organizationLevel,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                  spaces: parseInt(values.spaces),\n                  walkInSpaces: parseInt(values.walkInSpaces),\n                  infoMailContent: values.infoMailContent\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.classes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n            <ScheduleClassForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              touched={touched}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>      \n      </Card>\n    </ClassEditBase>   \n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEditAll))","export function getAccountsQueryVariables(searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  if (searchName) {\n    queryVars.searchName = searchName\n  }\n\n  return queryVars\n}\n\nexport function getEnrollmentsListQueryVariables(scheduleItemId, showEnded=false) {\n  let queryVars = {\n    scheduleItem: scheduleItemId,\n    dateEnd_Isnull: true\n  }\n\n  if (showEnded) {\n    queryVars.dateEnd_Isnull = false\n  } \n\n  return queryVars\n}\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\nconst ClassEditBack = ({ t, className }) => (\n  <ButtonBack returnUrl=\"/schedule/classes\" className={className} />\n)\n\nexport default withTranslation()(ClassEditBack)","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY = gql`\n  query ScheduleItemEnrollments($after: String, $before: String, $scheduleItem: ID!, $dateEnd_Isnull:Boolean) {\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n      enrollments(first: 1000, before: $before, after: $after, scheduleItem: $scheduleItem, dateEnd_Isnull: $dateEnd_Isnull) {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id \n            dateStart\n            dateEnd\n            accountSubscription {\n              id\n              dateStart\n              dateEnd\n              organizationSubscription {\n                id\n                name\n              }\n              account {\n                id\n                fullName\n              }            \n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENT_QUERY = gql`\n  query ScheduleItemEnrollment($id: ID!) {\n    scheduleItemEnrollment(id: $id) {\n      id\n      dateStart\n      dateEnd\n      accountSubscription {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        account {\n          id\n          fullName\n        }\n      }   \n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY = gql`\n  query ScheduleItemEnrollmentOptions($account: ID!, $scheduleItem: ID!) {\n    scheduleClassEnrollmentOptions(account: $account, scheduleItem: $scheduleItem) {\n      subscriptions {\n        allowed\n        blocked\n        paused\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            name\n          }\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n    }\n  }\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!) {\n    accountSubscription(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation CreateScheduleItemEnrollment($input: CreateScheduleItemEnrollmentInput!) {\n    createScheduleItemEnrollment(input:$input) {\n      scheduleItemEnrollment {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation UpdateScheduleItemEnrollment($input: UpdateScheduleItemEnrollmentInput!) {\n    updateScheduleItemEnrollment(input:$input) {\n      scheduleItemEnrollment {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation DeleteScheduleItemEnrollment($input: DeleteScheduleItemEnrollmentInput!) {\n    deleteScheduleItemEnrollment(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_ITEM_ENROLLMENT, GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY } from \"./queries\"\nimport ButtonDelete from '../../../../ui/ButtonDelete'\nimport { getEnrollmentsListQueryVariables } from './tools'\n\nfunction ScheduleClassEnrollmentDelete({t, match, node}) {\n  const scheduleItemId = match.params.class_id\n  const [deleteScheduleItemEnrollment] = useMutation(DELETE_SCHEDULE_ITEM_ENROLLMENT)\n\n    return (\n      <ButtonDelete\n        msgConfirm={t(\"schedule.classes.class.enrollments.delete_confirm_msg\")}\n        msgDescription={<p>{node.accountSubscription.account.fullName}</p>}\n        msgSuccess={t('schedule.classes.class.enrollments.delete_success')}\n        deleteFunction={deleteScheduleItemEnrollment}\n        deleteFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, \n                variables: getEnrollmentsListQueryVariables(scheduleItemId)},\n            ]\n          }}\n      />\n    )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentDelete))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonEdit = ({ t, editUrl, className=\"\" }) => (\n  <Link to={editUrl}>\n    <Button\n      className={`btn-sm ${className}`}\n      color=\"secondary\"\n    >\n        {t(\"general.edit\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonEdit)\n","import React, { useState, useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ScheduleClassEnrollmentDelete from \"./ScheduleClassEnrollmentDelete\"\nimport ButtonAdd from '../../../../ui/ButtonAdd'\nimport ButtonEdit from '../../../../ui/ButtonEdit'\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassEnrollments({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const [showCurrent, setShowCurrent] = useState(true)\n  const scheduleItemId = match.params.class_id\n  const cardTitle = t('general.enrollments')\n  const menuActiveLink = \"enrollments\"\n  \n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, {\n      variables: getEnrollmentsListQueryVariables(scheduleItemId)\n    }\n  )\n\n  const headerOptions = <Card.Options>\n    <Button color={(showCurrent) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              setShowCurrent(true); \n              let queryVars = getEnrollmentsListQueryVariables(scheduleItemId)\n              console.log(queryVars)\n              refetch(queryVars); \n            }}\n    >\n      {t('general.current')}\n    </Button>\n    <Button color={(!showCurrent) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              setShowCurrent(false); \n              let queryVars = getEnrollmentsListQueryVariables(scheduleItemId, true)\n              console.log(queryVars)\n              refetch(queryVars); \n            }}\n    >\n      {t('general.ended')}\n    </Button>\n  </Card.Options>\n\n  const ButtonAddEnrollment = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemenrollment\">\n    <ButtonAdd addUrl={`/schedule/classes/all/enrollments/${scheduleItemId}/search`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    {ButtonAddEnrollment}\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.enrollments.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )  \n\n  console.log(data)\n  const scheduleItem = data.scheduleItem\n  const enrollments = scheduleItem.enrollments\n\n  // Empty list\n  if (!enrollments.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <p>{t('schedule.classes.enrollments.empty_list')}</p>\n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  \n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={enrollments.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: enrollments.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.scheduleItem.enrollments.edges\n                        const pageInfo = fetchMoreResult.scheduleItem.enrollments.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryEnrollmentsData: {\n                                scheduleItemEnrollments: {\n                                  __typename: previousResult.scheduleItem.enrollments.__typename,\n                                  edges: [ ...previousResult.scheduleItem.enrollments.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.subscription')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {enrollments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    {node.accountSubscription.account.fullName}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.accountSubscription.organizationSubscription.name}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\">\n                    {/* Edit */}\n                    <ButtonEdit editUrl={`/schedule/classes/all/enrollments/${scheduleItemId}/edit/${node.id}`} />\n                    {/* Delete */}\n                    <ScheduleClassEnrollmentDelete node={node} />\n                    {/* <ScheduleClassEnrollmentsDelete node={node} /> */}                            \n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollments))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query Accounts(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $instructor: Boolean,\n    $employee: Boolean\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true,\n      instructor: $instructor,\n      employee: $employee\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n  }\n`","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport { getAccountsQueryVariables } from \"./tools\"\n\nimport CSLS from \"../../../../../tools/cs_local_storage\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ButtonBack from '../../../../ui/ButtonBack'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY } from \"../../../../../queries/accounts/account_search_queries\"\n\n\nfunction ScheduleClassEnrollmentsSearch({ t, match, history }) {\n  let [searchName, setSearchName] = useState(localStorage.getItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH))\n  \n  const scheduleItemId = match.params.class_id\n  const cardTitle = t('schedule.classes.enrollments.search.title')\n  const menuActiveLink = \"enrollments\"\n  \n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_ACCOUNTS_QUERY, {\n      variables: getAccountsQueryVariables(searchName)\n    }\n  )\n\n  const headerOptions = <Card.Options>\n    <InputSearch \n      initialValueKey={CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH}\n      placeholder=\"Search...\"\n      onChange={(value) => {\n        console.log(value)\n        localStorage.setItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH, value)\n        setSearchName(value)\n        refetch({ variables: getAccountsQueryVariables(value)})\n      }}\n    />\n  </Card.Options>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ButtonBack returnUrl={`/schedule/classes/all/enrollments/${scheduleItemId}`} />\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Alert type=\"danger\">{t('schedule.classes.enrollments.search.error_loading')}</Alert>\n      </Card.Body>\n    </ClassEditBase>\n  )  \n\n  console.log(data)\n  const accounts = data.accounts\n\n  // No search name entered\n  if (!searchName) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"primary\" icon=\"info\">\n            {t('schedule.classes.enrollments.search.search_to_find_customers_to_enroll')}\n          </Alert> \n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  // Empty list / No search results\n  if (!accounts.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"secondary\">{t('schedule.classes.enrollments.search.empty_list')}</Alert>\n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  \n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={accounts.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryEnrollmentsData: {\n                                scheduleItemEnrollments: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <Link to={`/schedule/classes/all/enrollments/${scheduleItemId}/options/${node.id}`}>\n                    <Button color=\"secondary\">\n                      {t(\"general.enroll\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  </Link>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentsSearch))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_ENROLLMENT_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\n\n\nconst ScheduleClassEnrollmentForm = ({ t, history, match, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                placeholderText={t('schedule.classes.enrollments.placeholder_date_end')}\n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentForm))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Dimmer } from 'tabler-react';\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY, GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, CREATE_SCHEDULE_ITEM_ENROLLMENT } from './queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from './yupSchema'\nimport ScheduleClassEnrollmentForm from './ScheduleClassEnrollmentForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport ButtonBack from '../../../../ui/ButtonBack';\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\n\nfunction ScheduleClassEnrollmentAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const classId = match.params.class_id\n  const accountSubscriptionId = match.params.account_subscription_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}/options/${accountId}`\n  const nextUrl = `/schedule/classes/all/enrollments/${classId}`\n  let cardTitle = t('schedule.classes.enrollments.title_add')\n  const menuActiveLink = \"enrollments\" \n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: { id: accountSubscriptionId}\n  })\n  const [addScheduleClassEnrollment] = useMutation(CREATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer loader={true} active={true} />\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  const account = data.accountSubscription.account\n  const accountSubscription = data.accountSubscription\n  const using = t(\"general.using\")\n  cardTitle = `${cardTitle} ${account.fullName} ${using} ${accountSubscription.organizationSubscription.name}`\n  \n  // TODO: Add account subscription to sent values\n  \n\n  \n\n  return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          price: \"\", \n          dateStart: new Date() ,\n        }}\n        validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassEnrollment({ variables: {\n              input: {\n                scheduleItem: classId,\n                accountSubscription: accountSubscriptionId,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, variables: getEnrollmentsListQueryVariables(classId)},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(nextUrl)\n                toast.success((t('schedule.classes.enrollments.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassEnrollmentForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleClassEnrollmentBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={ \"/schedule/classes/all/enrollments/\" + classId } />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentBack))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, UPDATE_SCHEDULE_ITEM_ENROLLMENT } from './queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from './yupSchema'\nimport ScheduleClassEnrollmentForm from './ScheduleClassEnrollmentForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassEnrollmentBack from \"./ScheduleClassEnrollmentBack\"\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\n\nfunction ScheduleClassEnrollmentEdit({ t, match, history }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}`\n  let cardTitle = t('schedule.classes.enrollments.title_edit')\n  const menuActiveLink = \"enrollments\"\n  const pageHeaderButtonList = <ScheduleClassEnrollmentBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassEnrollment] = useMutation(UPDATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const using = t(\"general.using\")\n  cardTitle = `\n    ${cardTitle}  \n    ${data.scheduleItemEnrollment.accountSubscription.account.fullName} \n    ${using} \n    ${data.scheduleItemEnrollment.accountSubscription.organizationSubscription.name}\n  `\n\n  const scheduleItemEnrollment = data.scheduleItemEnrollment\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (scheduleItemEnrollment.dateStart) {\n    dateStart = new Date(scheduleItemEnrollment.dateStart)\n  }\n  \n  let dateEnd = null\n  if (scheduleItemEnrollment.dateEnd) {\n    dateEnd = new Date(scheduleItemEnrollment.dateEnd)\n  }\n\n  return (\n    <ClassEditBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"enrollments\"\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n        }}\n        validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleClassEnrollment({ variables: {\n              input: {\n                id: match.params.id,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, variables: getEnrollmentsListQueryVariables(classId)},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.enrollments.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassEnrollmentForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleClassEnrollmentForm>\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentEdit))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n// import SubscriptionCheckinButton from \"./ScheduleClassBookSubscriptionBtn\"\n\n\nfunction ScheduleClassEnrollSubscriptions({ \n  t, \n  match, \n  history, \n  subscriptions\n}) {\n  const classId = match.params.class_id\n  const accountId = match.params.account_id\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col md={4}>\n        {console.log(subscription)}\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {moment(subscription.dateStart).format(dateFormat)}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.enroll.subscription_not_allowed') :\n            <Link to={`/schedule/classes/all/enrollments/${classId}/add/${accountId}/${subscription.accountSubscription.id}`}>\n              <Button \n                block \n                outline \n                color=\"success\" \n              >\n                {t(\"general.enroll\")} <Icon name=\"chevron-right\" />\n              </Button>\n            </Link>\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollSubscriptions))\n\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Dimmer, Grid } from 'tabler-react';\n\nimport ScheduleClassEnrollSubscriptions from \"./ScheduleClassEnrollSubscriptions\"\nimport { GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY } from './queries'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction ScheduleClassEnrollmentOptions({ t, history, match }) {\n  const classId = match.params.class_id\n  const accountId = match.params.account_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}/search`\n  const menuActiveLink = \"enrollments\" \n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n  const { loading, error, data } = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY, {\n    variables: {\n      account: accountId,\n      scheduleItem: classId,\n    },\n    fetchPolicy: \"network-only\"\n  })\n  // const [addScheduleClassEnrollment] = useMutation(CREATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n    defaultCard={false}\n    menuActiveLink={menuActiveLink}\n    pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer loader={true} active={true} />\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      defaultCard={false}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n  \n  const account = data.account\n  const subscriptions = data.scheduleClassEnrollmentOptions.subscriptions\n\n  \n  return (\n    <ClassEditBase\n      defaultCard={false}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <h4>{t('schedule.classes.enrollments.enrollment_options_for')} {account.fullName}</h4>\n      <Grid.Row cards deck>\n        <ScheduleClassEnrollSubscriptions subscriptions={subscriptions} />\n      </Grid.Row>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\n\nconst FormHelp = ({ t, message }) => (\n    <span className=\"form-help\" \n          data-toggle=\"popover\" \n          data-placement=\"top\" \n          data-content={message} \n          data-original-title=\"\" \n          title={message} \n          aria-describedby={'popover23432'}>\n        ?\n    </span>\n)\n\nexport default withTranslation()(FormHelp)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Grid,\n  Form,\n  Text\n} from \"tabler-react\"\n\nimport FormHelp from \"../../../../ui/FormHelp\"\n\n\nconst ScheduleClassClasspassForm = ({ t, history, match, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"shopBook\" \n                onChange={() => {\n                  setFieldValue('shopBook', !values.shopBook)\n                  setFieldTouched('shopBook', true)\n                  if (!values.shopBook) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.shopBook} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.classpasses.shop_book')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"shopBook\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"attend\" \n                disabled={(values.shopBook)}\n                onChange={() => {\n                  setFieldValue('attend', !values.attend)\n                  setFieldTouched('attend', true)\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.attend} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.attend')}</span>\n            </Form.Label>\n            {/* Show message to inform user they can't disable attend while enroll or shopBook is enabled*/}\n            { (values.shopBook) ? <div>\n                <Text.Small>{t('schedule.classes.classpasses.attend_disabled')}</Text.Small> { ' ' }\n                <FormHelp message={t('schedule.classes.classpasses.attend_disabled_help')} />\n              </div> : \"\" }\n            <ErrorMessage name=\"attend\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Dimmer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassClasspassForm))","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_CLASSPASS_SCHEMA = Yup.object().shape({\n  shopBook: Yup.boolean(),\n  attend: Yup.boolean(),\n})\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_CLASSPASSES_QUERY = gql`\n  query ScheduleItemOrganizationClasspassGroups($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemOrganizationClasspassGroups(before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleItem {\n            id\n          }\n          organizationClasspassGroup {\n            id\n            name\n          }\n          shopBook\n          attend\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_CLASS_CLASSPASS = gql`\n  mutation UpdateScheduleItemOrganizationClasspassGroup($input: UpdateScheduleItemOrganizationClasspassGroupInput!) {\n    updateScheduleItemOrganizationClasspassGroup(input:$input) {\n      scheduleItemOrganizationClasspassGroup {\n        id\n      } \n    }\n  }\n`","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Dimmer,\n  Table,\n  Card\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from '../ClassEditBack'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassClasspassForm from \"./ScheduleClassClasspassForm\"\n\nimport { SCHEDULE_CLASS_CLASSPASS_SCHEMA } from './yupSchema'\nimport { GET_SCHEDULE_CLASS_CLASSPASSES_QUERY, UPDATE_SCHEDULE_CLASS_CLASSPASS } from \"./queries\"\n\n\nfunction ScheduleClassClasspasses({ t, match }) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"classpasses\"\n  const cardTitle = t('schedule.classes.classpasses.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_CLASSPASSES_QUERY, { \n    variables: { scheduleItem: classId }\n  })\n  const [ updateScheduleClassClasspass ] = useMutation(UPDATE_SCHEDULE_CLASS_CLASSPASS)\n\n  const pageHeaderButtonList = <ClassEditBack />\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.classpasses.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemOrganizationClasspassGroups.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.classpasses.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      defaultCard={false} \n      menuActiveLink={menuActiveLink} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n    <ContentCard \n      cardTitle={cardTitle}\n      // headerContent={headerOptions}\n      pageInfo={data.scheduleItemOrganizationClasspassGroups.pageInfo}\n      hasCardBody={false}\n      onLoadMore={() => {\n      fetchMore({\n        variables: {\n          after: data.scheduleItemOrganizationClasspassGroups.pageInfo.endCursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.scheduleItemOrganizationClasspassGroups.edges\n          const pageInfo = fetchMoreResult.scheduleItemOrganizationClasspassGroups.pageInfo\n\n          return newEdges.length\n            ? {\n                // Put the new locations at the end of the list and update `pageInfo`\n                // so we have the new `endCursor` and `hasNextPage` values\n                data: { \n                  scheduleItemOrganizationClasspassGroups: {\n                    __typename: previousResult.scheduleItemOrganizationClasspassGroups.__typename,\n                    edges: [ ...previousResult.scheduleItemOrganizationClasspassGroups.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              }\n            : previousResult\n          }\n        })\n      }} >\n      <div>\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.classpass_group')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.scheduleItemOrganizationClasspassGroups.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                {console.log(node)}\n                <Table.Col key={v4()}> \n                  {node.organizationClasspassGroup.name}\n                </Table.Col>\n                <Table.Col>\n                <Formik\n                    initialValues={{  \n                      shopBook: node.shopBook,\n                      attend: node.attend\n                    }}\n                    validationSchema={SCHEDULE_CLASS_CLASSPASS_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        console.log(values)\n\n                        updateScheduleClassClasspass({ variables: {\n                            input: {\n                              id: node.id,\n                              shopBook: values.shopBook,\n                              attend: values.attend\n                            }\n                          }, refetchQueries: [\n                            { query: GET_SCHEDULE_CLASS_CLASSPASSES_QUERY,\n                              variables: { scheduleItem: classId }\n                            }\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.classes.classpasses.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, setSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                      <ScheduleClassClasspassForm\n                        isSubmitting={isSubmitting}\n                        setSubmitting={setSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                        submitForm={submitForm}\n                      >\n                        {console.log(errors)}\n                        {console.log(values)}\n                        test\n                      </ScheduleClassClasspassForm>\n                    )}\n                </Formik>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        </div>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\n// class ScheduleClassClasspasses extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Schedule classs classpasses props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const classId = match.params.class_id\n\n//     const ButtonAdd = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemclasspass\">\n//       <Link to={\"/schedule/classes/all/classpasses/\" + classId + \"/add\" } >\n//         <Button color=\"primary btn-block mb-6\">\n//         <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.classpasses.add')}\n//         </Button>\n//       </Link>\n//     </HasPermissionWrapper>\n\n//     return (\n//       <SiteWrapper>\n//       <div className=\"my-3 my-md-5\">\n//         {console.log('ID here:')}\n//         {console.log(classId)}\n//         <Query query={GET_SCHEDULE_CLASS_CLASSPASSES_QUERY} variables={{ scheduleItem: classId }}>\n//           {({ loading, error, data, refetch, fetchMore }) => {\n  \n//             // Loading\n//             if (loading) return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <Dimmer active={true} loader={true} />\n//               </ClassEditBase>\n//             )\n//             // Error\n//             if (error) return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <p>{t('schedule.classes.classpasses.error_loading')}</p>\n//               </ClassEditBase>\n//             )\n  \n//             const initialTimeStart = TimeStringToJSDateOBJ(data.scheduleItem.timeStart)\n//             const subtitle = class_edit_all_subtitle({\n//               t: t,\n//               location: data.scheduleItem.organizationLocationRoom.organizationLocation.name,\n//               locationRoom: data.scheduleItem.organizationLocationRoom.name,\n//               classtype: data.scheduleItem.organizationClasstype.name,\n//               starttime: initialTimeStart\n//             })\n  \n//             // Empty list\n//             if (!data.scheduleItemOrganizationClasspassGroups.edges.length) { return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <p>{t('schedule.classes.classpasses.empty_list')}</p>\n//               </ClassEditBase>\n//             )} else {   \n//             // Life's good! :)\n//               return (\n//                 <ClassEditBase \n//                   menu_activeLink=\"classpasses\" \n//                   default_card={false} \n//                   subtitle={subtitle}\n//                   sidebar_button={ButtonAdd}\n//                 >\n//                 <ContentCard \n//                   cardTitle={t('schedule.classes.title_edit')}\n//                   // headerContent={headerOptions}\n//                   pageInfo={data.scheduleItemOrganizationClasspassGroups.pageInfo}\n//                   onLoadMore={() => {\n//                   fetchMore({\n//                     variables: {\n//                       after: data.scheduleItemOrganizationClasspassGroups.pageInfo.endCursor\n//                     },\n//                     updateQuery: (previousResult, { fetchMoreResult }) => {\n//                       const newEdges = fetchMoreResult.scheduleItemOrganizationClasspassGroups.edges\n//                       const pageInfo = fetchMoreResult.scheduleItemOrganizationClasspassGroups.pageInfo\n  \n//                       return newEdges.length\n//                         ? {\n//                             // Put the new locations at the end of the list and update `pageInfo`\n//                             // so we have the new `endCursor` and `hasNextPage` values\n//                             data: { \n//                               scheduleItemOrganizationClasspassGroups: {\n//                                 __typename: previousResult.scheduleItemOrganizationClasspassGroups.__typename,\n//                                 edges: [ ...previousResult.scheduleItemOrganizationClasspassGroups.edges, ...newEdges ],\n//                                 pageInfo\n//                               }\n//                             }\n//                           }\n//                         : previousResult\n//                       }\n//                     })\n//                   }} >\n//                   <div>\n//                     <Table>\n//                       <Table.Header>\n//                         <Table.Row>\n//                           <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n//                           <Table.ColHeader></Table.ColHeader>\n//                         </Table.Row>\n//                       </Table.Header>\n//                       <Table.Body>\n//                         {data.scheduleItemOrganizationClasspassGroups.edges.map(({ node }) => (\n//                           <Table.Row key={v4()}>\n//                             {console.log(node)}\n//                             <Table.Col key={v4()}> \n//                               {node.organizationClasspassGroup.name}\n//                             </Table.Col>\n//                             <Table.Col>\n//                             <Mutation mutation={UPDATE_SCHEDULE_CLASS_CLASSPASS}> \n//                               {(updateScheduleClassClasspass, { data }) => (\n//                                 <Formik\n//                                     initialValues={{  \n//                                       shopBook: node.shopBook,\n//                                       attend: node.attend\n//                                     }}\n//                                     validationSchema={SCHEDULE_CLASS_CLASSPASS_SCHEMA}\n//                                     onSubmit={(values, { setSubmitting }) => {\n//                                         console.log(values)\n\n//                                         updateScheduleClassClasspass({ variables: {\n//                                           input: {\n//                                             id: node.id,\n//                                             shopBook: values.shopBook,\n//                                             attend: values.attend\n//                                           }\n//                                         }, refetchQueries: [\n//                                             // {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n//                                             // {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": false }},\n//                                         ]})\n//                                         .then(({ data }) => {\n//                                             console.log('got data', data);\n//                                             toast.success((t('schedule.classes.classpasses.toast_edit_success')), {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             setSubmitting(false)\n//                                           }).catch((error) => {\n//                                             toast.error((t('general.toast_server_error')) +  error, {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             console.log('there was an error sending the query', error)\n//                                             setSubmitting(false)\n//                                           })\n//                                     }}\n//                                     >\n//                                     {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n//                                       <ScheduleClassClasspassForm\n//                                         isSubmitting={isSubmitting}\n//                                         setFieldTouched={setFieldTouched}\n//                                         setFieldValue={setFieldValue}\n//                                         errors={errors}\n//                                         values={values}\n//                                         submitForm={submitForm}\n//                                       >\n//                                         {console.log(errors)}\n//                                         {console.log(values)}\n//                                         test\n//                                       </ScheduleClassClasspassForm>\n//                                     )}\n//                                 </Formik>\n//                               )}\n//                             </Mutation>\n//                             </Table.Col>\n//                           </Table.Row>\n//                         ))}\n//                       </Table.Body>\n//                     </Table>\n//                     </div>\n//                   </ContentCard>\n//                 </ClassEditBase>\n//             )}}\n//           }\n//         </Query>\n//       </div>\n//     </SiteWrapper>\n//     )\n//   }\n\n// };\n\nexport default withTranslation()(withRouter(ScheduleClassClasspasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Grid,\n  Form,\n  Text\n} from \"tabler-react\"\n\nimport FormHelp from \"../../../../ui/FormHelp\"\n\n\nconst ScheduleClassSubscriptionForm = ({ t, history, match, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"enroll\" \n                onChange={() => {\n                  setFieldValue('enroll', !values.enroll)\n                  setFieldTouched('enroll', true)\n                  if (!values.enroll) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.enroll} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.enroll')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"enroll\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"shopBook\" \n                onChange={() => {\n                  setFieldValue('shopBook', !values.shopBook)\n                  setFieldTouched('shopBook', true)\n                  if (!values.shopBook) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.shopBook} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.subscriptions.shop_book')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"shopBook\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"attend\" \n                disabled={((values.shopBook) || (values.enroll))}\n                onChange={() => {\n                  setFieldValue('attend', !values.attend)\n                  setFieldTouched('attend', true)\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.attend} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.attend')}</span>\n            </Form.Label>\n            {/* Show message to inform user they can't disable attend while enroll or shopBook is enabled*/}\n            { ((values.shopBook) || (values.enroll)) ? <div>\n                <Text.Small>{t('schedule.classes.subscriptions.attend_disabled')}</Text.Small> { ' ' }\n                <FormHelp message={t('schedule.classes.subscriptions.attend_disabled_help')} />\n              </div> : \"\" }\n            <ErrorMessage name=\"attend\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Dimmer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassSubscriptionForm))","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  enroll: Yup.boolean(),\n  shopBook: Yup.boolean(),\n  attend: Yup.boolean(),\n})\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY = gql`\n  query ScheduleItemOrganizationSubscriptionGroups($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemOrganizationSubscriptionGroups(first: 100, before: $before, after: $after, scheduleItem:$scheduleItem) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleItem {\n            id\n          }\n          organizationSubscriptionGroup {\n            id\n            name\n          }\n          enroll\n          shopBook\n          attend\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_CLASS_SUBSCRIPTION = gql`\nmutation UpdateScheduleItemOrganizationSubscriptionGroup($input: UpdateScheduleItemOrganizationSubscriptionGroupInput!) {\n  updateScheduleItemOrganizationSubscriptionGroup(input:$input) {\n    scheduleItemOrganizationSubscriptionGroup {\n      id\n    } \n  }\n}\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Dimmer,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from '../ClassEditBack'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassSubscriptionForm from \"./ScheduleClassSubscriptionForm\"\n\nimport { SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport { GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, UPDATE_SCHEDULE_CLASS_SUBSCRIPTION } from \"./queries\"\n\n\nfunction ScheduleClassSubscriptions({t, match, history}) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"subscriptions\"\n  const cardTitle = t('schedule.classes.subscriptions.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, { \n    variables: { scheduleItem: classId }\n  })\n  const [ updateScheduleClassSubscription ] = useMutation(UPDATE_SCHEDULE_CLASS_SUBSCRIPTION)\n\n  const pageHeaderButtonList = <ClassEditBack />\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.subscriptions.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemOrganizationSubscriptionGroups.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.subscriptions.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        // headerContent={headerOptions}\n        pageInfo={data.scheduleItemOrganizationSubscriptionGroups.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemOrganizationSubscriptionGroups.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemOrganizationSubscriptionGroups.edges\n            const pageInfo = fetchMoreResult.scheduleItemOrganizationSubscriptionGroups.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemOrganizationSubscriptionGroups: {\n                      __typename: previousResult.scheduleItemOrganizationSubscriptionGroups.__typename,\n                      edges: [ ...previousResult.scheduleItemOrganizationSubscriptionGroups.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.subscription_group')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemOrganizationSubscriptionGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {node.organizationSubscriptionGroup.name}\n                  </Table.Col>\n                  <Table.Col>\n                    <Formik\n                      initialValues={{  \n                        enroll: node.enroll,\n                        shopBook: node.shopBook,\n                        attend: node.attend\n                      }}\n                      validationSchema={SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log(values)\n                          updateScheduleClassSubscription({ \n                            variables: {\n                              input: {\n                                id: node.id,\n                                enroll: values.enroll,\n                                shopBook: values.shopBook,\n                                attend: values.attend\n                              }\n                            }, \n                            refetchQueries: [\n                              { query: GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, \n                                variables: { scheduleItem: classId }\n                            }\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.classes.subscriptions.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              setSubmitting(false)\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, setSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                        <ScheduleClassSubscriptionForm\n                          isSubmitting={isSubmitting}\n                          setSubmitting={setSubmitting}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          errors={errors}\n                          values={values}\n                          submitForm={submitForm}\n                        >\n                          {console.log(errors)}\n                          {console.log(values)}\n                        </ScheduleClassSubscriptionForm>\n                      )}\n                    </Formik>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        </ContentCard>\n      </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassSubscriptions))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccounts($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemAccounts(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n    scheduleItemAccount(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      role\n      account2 {\n        id\n        fullName\n      }\n      role2\n      dateStart\n      dateEnd       \n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    accounts(first: 1000, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation CreateScheduleItemAccount($input:CreateScheduleItemAccountInput!) {\n  createScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const UPDATE_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation UpdateScheduleItemAccount($input: UpdateScheduleItemAccountInput!) {\n  updateScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation DeleteScheduleClassInstructor($input: DeleteScheduleItemAccountInput!) {\n  deleteScheduleItemAccount(input: $input) {\n    ok\n  }\n}\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table,\n  Card\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { represent_instructor_role } from \"../tools\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport ButtonAdd from '.././../../../ui/ButtonAdd'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, DELETE_SCHEDULE_CLASS_INSTRUCTOR } from \"./queries\"\n\n\nfunction ScheduleClassInstructors({ t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const classId = match.params.class_id\n  const menuActiveLink = \"instructors\"\n  const cardTitle = t('schedule.classes.instructors.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, {\n    variables: {scheduleItem: classId}\n  })\n  const [ deleteScheduleItemAccount ] = useMutation(DELETE_SCHEDULE_CLASS_INSTRUCTOR)\n\n  const ButtonAddInstructor = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemaccount\">\n    <ButtonAdd addUrl={`/schedule/classes/all/instructors/${classId}/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    {ButtonAddInstructor}\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.instructors.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemAccounts.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.instructors.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.scheduleItemAccounts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemAccounts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAccounts.edges\n            const pageInfo = fetchMoreResult.scheduleItemAccounts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemAccounts: {\n                      __typename: previousResult.scheduleItemAccounts.__typename,\n                      edges: [ ...previousResult.scheduleItemAccounts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.instructor_2')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}> \n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account.fullName} <br />\n                    <span className=\"text-muted\">\n                      {represent_instructor_role(t, node.role)}\n                    </span>\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account2 ?\n                      <span>\n                        {node.account2.fullName} <br />\n                        <span className=\"text-muted\">\n                          {represent_instructor_role(t, node.role2)}\n                        </span>\n                      </span> : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/schedule/classes/all/instructors/${classId}/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\"\n                      >\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t('schedule.classes.instructors.delete_confirm_msg'),\n                            msgDescription: <p>{t('schedule.classes.instructors.delete_confirm_description')}</p>,\n                            msgSuccess: t('schedule.classes.instructors.deleted'),\n                            deleteFunction: deleteScheduleItemAccount,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }}\n                            ]}\n                        })}}\n                    >\n                      <span className=\"text-red\">\n                        <Icon prefix=\"fe\" name=\"trash-2\" />\n                      </span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        </ContentCard>      \n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassInstructors))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_INSTRUCTOR_SCHEMA = Yup.object().shape({\n  account: Yup.string()\n    .required(t('yup.field_required')),\n  role: Yup.string(),\n  account2: Yup.string(),\n  role2: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleClassInstructorForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role')}>\n              <Field component=\"select\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role2')}>\n              <Field component=\"select\" \n                      name=\"role2\" \n                      className={(errors.role2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleClassInstructorBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={ \"/schedule/classes/all/instructors/\" + classId } />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorBack))","// @flow\n\nimport React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_CLASS_INSTRUCTOR } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassInstructorForm from './ScheduleClassInstructorForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassInstructorBack from \"./ScheduleClassInstructorBack\"\n\n\nfunction ScheduleClassInstructorAdd({ t, history, match }) {\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/instructors/${classId}`\n  const cardTitle = t('schedule.classes.instructors.title_add')\n  const menuActiveLink = \"instructors\" \n  const pageHeaderButtonList = <ScheduleClassInstructorBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleClassInstructor] = useMutation(ADD_SCHEDULE_CLASS_INSTRUCTOR)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          price: \"\", \n          dateStart: new Date() ,\n          account: \"\",\n          role: \"\",\n          account2: \"\",\n          role2: \"\",\n        }}\n        validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassInstructor({ variables: {\n              input: {\n                scheduleItem: match.params.class_id,\n                account: values.account,\n                role: values.role,\n                account2: values.account2,\n                role2: values.role2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.instructors.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassInstructorForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY, UPDATE_SCHEDULE_CLASS_INSTRUCTOR } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassInstructorForm from './ScheduleClassInstructorForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassInstructorBack from \"./ScheduleClassInstructorBack\"\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleClassInstructorEdit({ t, match, history }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/instructors/${classId}`\n  const cardTitle = t('schedule.classes.instructors.title_edit')\n  const menuActiveLink = \"instructors\"\n  const pageHeaderButtonList = <ScheduleClassInstructorBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassInstructor] = useMutation(UPDATE_SCHEDULE_CLASS_INSTRUCTOR)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialData = data.scheduleItemAccount\n\n  let initialAccount2 = \"\"\n  if (initialData.account2) {\n    initialAccount2 =  initialData.account2.id\n  } \n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  \n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <ClassEditBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"instructors\"\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          account: initialData.account.id,\n          role: initialData.role,\n          account2: initialAccount2,\n          role2: initialData.role2,\n        }}\n        validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleClassInstructor({ variables: {\n              input: {\n                id: match.params.id,\n                account: values.account,\n                role: values.role,\n                account2: values.account2,\n                role2: values.role2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.instructors.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassInstructorForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleClassInstructorForm>\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorEdit))","import CSLS from \"../../../../../tools/cs_local_storage\"\n\nexport function get_accounts_query_variables() {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  let search = localStorage.getItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH)\n  queryVars.searchName = search\n\n  return queryVars\n}\n\nexport function get_attendance_list_query_variables(schedule_item_id, date) {\n  return {\n    scheduleItem: schedule_item_id,\n    date: date\n  }\n}\n","import React, { useState } from 'react'\nimport { useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Dimmer,\n  Icon,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport { get_accounts_query_variables } from \"./tools\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY } from \"../../../../../queries/accounts/account_search_queries\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nfunction ScheduleClassAttendanceSearch({ t, match, history, checkedInIds, classStatus }) {\n  const [showSearchResults, setShowSearchResults] = useState(false)\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [ getAccounts, { called, loading, error, data, fetchMore } ] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  function Search() {\n    return <InputSearch \n      className=\"mb-2\"\n      initialValueKey={CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH}\n      placeholder={t(\"schedule.classes.class.attendance.placeholder_search\")}\n      onChange={(value) => {\n        localStorage.setItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH, value)\n        if (value) {\n          setShowSearchResults(true)\n          getAccounts({ variables: get_accounts_query_variables()})\n        } else {\n          setShowSearchResults(false)\n        }\n      }}\n    />\n  }\n\n  if (!showSearchResults) {\n    return <Search />\n  }\n\n  if (called && loading) return (\n    <React.Fragment>\n      <Search />\n      <ContentCard cardTitle={t('general.search_results')}>\n        <Dimmer active={true} loader={true} />\n      </ContentCard>\n    </React.Fragment>\n  )\n\n  if (called && error) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"danger\">{t(\"general.error_sad_smiley\")}</Alert>\n    </React.Fragment>\n  )\n\n  if (called && !data.accounts.edges.length) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"primary\">\n        <strong>{t(\"schedule.classes.class.attendance.search_customer_not_found\")}</strong> {\" - \"}\n        {t(\"schedule.classes.class.attendance.search_no_account_results\")}\n      </Alert>\n    </React.Fragment>\n  )\n\n  return (\n    <React.Fragment>\n      <Search />\n      {(called && data) ?\n      <ContentCard cardTitle={t('general.search_results')}\n                  pageInfo={data.accounts.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                      after: data.accounts.pageInfo.endCursor\n                    },\n                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                      const newEdges = fetchMoreResult.accounts.edges\n                      const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                      return newEdges.length\n                        ? {\n                            // Put the new accounts at the end of the list and update `pageInfo`\n                            // so we have the new `endCursor` and `hasNextPage` values\n                            queryAccountsData: {\n                              accounts: {\n                                __typename: previousResult.accounts.__typename,\n                                edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          }\n                        : previousResult\n                    }\n                  })\n                }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {(checkedInIds.includes(node.id)) ? \n                    <span className=\"pull-right\">{t(\"schedule.classes.class.attendance.search_results_already_checked_in\")}</span> :\n                    <Link to={\"/schedule/classes/class/book/\" + schedule_item_id + \"/\" + class_date + \"/\" + node.id}>\n                      <Button color=\"secondary pull-right\">\n                        {t('general.checkin')} <Icon name=\"chevron-right\" />\n                      </Button>\n                    </Link>       \n                  }   \n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n      : \"\" }\n    </React.Fragment>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceSearch))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nconst ScheduleClassBack = ({ t, classId }) => (\n  <ButtonBack className=\"mr-2\" returnUrl=\"/schedule/classes\" />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassBack))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n\nfunction ClassMenu ({ t, scheduleItemId, class_date, activeLink }) {\n  let attendance_active = false\n  let attendancechart_active = false\n  let edit_active = false\n\n  switch (activeLink) {\n    case \"attendance\":\n      attendance_active = true\n      break\n    case \"attendancechart\":\n      attendancechart_active = true\n      break\n    case \"edit\":\n      edit_active = true\n      break\n    default:\n      break\n  }\n\n  return (\n    <div>\n      <List.Group transparent={true}>   \n        <HasPermissionWrapper \n            resource=\"scheduleitemattendance\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/attendance/\" + scheduleItemId + \"/\" + class_date}\n              icon=\"check-circle\"\n              active={attendance_active}\n              >\n              {t(\"general.attendance\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemattendance\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/attendance_chart/\" + scheduleItemId + \"/\" + class_date}\n              icon=\"bar-chart-2\"\n              active={attendancechart_active}\n              >\n              {t(\"schedule.classes.class.attendance_chart.title\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemweeklyotc\"\n            permission=\"change\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/edit/\" + scheduleItemId + \"/\" + class_date}\n              icon=\"edit-3\"\n              active={edit_active}\n              >\n              {t(\"schedule.classes.class.menu.edit_this_class\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n\n      </List.Group>\n    </div>\n  )\n}\n\nexport default withTranslation()(ClassMenu)","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport { TOKEN_REFRESH } from '../../../../../queries/system/auth';\nimport { refreshTokenAndOpenExportLinkInNewTab } from '../../../../../tools/refresh_token_and_open_export_link';\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ScheduleClassBack from \"../ScheduleClassBack\"\nimport ClassMenu from \"../ClassMenu\"\n\nfunction ScheduleClassAttendanceBaseBase({ t, match, history, children, pageSubTitle }) {\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n  const exportUrl = `/d/export/schedule_item_attendance/mailinglist/${scheduleItemId}/${classDate}`\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={pageSubTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n              {/* Export Mailinglist */}\n              <Button\n                color=\"secondary\"\n                icon=\"download-cloud\"\n                className=\"mr-2\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                {t('general.mailing_list')} \n              </Button>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n              <Grid.Col md={9}>\n                {children}\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <ClassMenu \n                  scheduleItemId={scheduleItemId}\n                  class_date={classDate}\n                  activeLink=\"attendance\"\n                />\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceBaseBase))\n","import moment from 'moment'\n\nexport function class_subtitle({t, location, locationRoom, classtype, timeStart, date}) {\n  return t('general.class') + ': ' + \n         location + ' (' + locationRoom + ') - ' + \n         classtype + ' @ ' + \n         moment(date).format('LL') + ' ' + moment(timeStart).format('LT')\n}\n\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ScheduleClassAttendanceBaseBase from './ScheduleClassAttendanceBaseBase'\nimport { class_subtitle } from \"../tools\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_SCHEDULE_CLASS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassAttendanceBase({ t, match, history, children }) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const cardTitle=t('general.attendance')\n  const { loading, error, data } = useQuery(\n    GET_SCHEDULE_CLASS_QUERY, {\n      variables: { scheduleItem: schedule_item_id, date: class_date }\n    }\n  )\n\n  if (loading) return (\n    <ScheduleClassAttendanceBaseBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </ScheduleClassAttendanceBaseBase>\n  )\n\n  if (error) return (\n    <ScheduleClassAttendanceBaseBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('schedule.classes.class.attendance.error_loading')}</p>\n      </ContentCard>\n    </ScheduleClassAttendanceBaseBase>\n  )\n\n  const scheduleClass = data.scheduleClass\n\n  const pageSubTitle = class_subtitle({\n    t: t,\n    location: scheduleClass.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleClass.organizationLocationRoom.name,\n    classtype: scheduleClass.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleClass.timeStart), \n    date: class_date\n  })\n  \n  console.log(scheduleClass.status)\n  \n  return (\n    <ScheduleClassAttendanceBaseBase pageSubTitle={pageSubTitle}>\n      {children}\n    </ScheduleClassAttendanceBaseBase>\n\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_attendance_list_query_variables } from \"./tools\"\nimport { DELETE_SCHEDULE_CLASS_ATTENDANCE, GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction ScheduleClassAttendanceDelete({t, match, node}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [deleteScheduleItemAttendance ] = useMutation(DELETE_SCHEDULE_CLASS_ATTENDANCE)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm pull-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"schedule.classes.class.attendance.delete_confirm_msg\"),\n            msgDescription: <p>{node.account.fullName}</p>,\n            msgSuccess: t('schedule.classes.class.attendance.delete_success'),\n            deleteFunction: deleteScheduleItemAttendance,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                { query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n                  variables: get_attendance_list_query_variables(schedule_item_id, class_date) },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Dimmer,\n  Dropdown,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\nimport { get_attendance_list_query_variables } from \"./tools\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport BadgeBookingStatus from \"../../../../ui/BadgeBookingStatus\"\nimport ScheduleClassAttendanceSearch from \"./ScheduleClassAttendanceSearch\"\nimport ScheduleClassAttendanceBase from \"./ScheduleClassAttendanceBase\"\nimport ScheduleClassAttendanceDelete from \"./ScheduleClassAttendanceDelete\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\n\n\nfunction setAttendanceStatus({t, match, updateAttendance, node, status}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  updateAttendance({\n    variables: { \n      input: {\n        id: node.id, \n        bookingStatus: status\n      }\n    },\n    refetchQueries: [\n      {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n        variables: get_attendance_list_query_variables(schedule_item_id, class_date)}\n    ]\n  }).then(({ data }) => {\n    console.log('got data', data);\n    toast.success(\n      t('schedule.classes.class.attendance.status_saved'), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n  }).catch((error) => {\n    toast.error((t('general.toast_server_error')) +  error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    console.log('there was an error sending the query', error);\n  })\n}\n\n\nfunction ScheduleClassAttendance({ t, match, history }) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data, fetchMore } = useQuery(\n    GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, {\n      variables: get_attendance_list_query_variables(schedule_item_id, class_date)\n    }\n  )\n  const [ updateAttendance ] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  // Loading\n  if (loading) return <ScheduleClassAttendanceBase>\n      <ContentCard cardTitle={t('general.attendance')}>\n        <Dimmer loader={true} active={true} />\n      </ContentCard>\n  </ScheduleClassAttendanceBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <ScheduleClassAttendanceBase>{t('general.error_sad_smiley')}</ScheduleClassAttendanceBase>\n  }\n  \n  const scheduleClass = data.scheduleClass\n  console.log(scheduleClass)\n  let checkedInIds = []\n  data.scheduleItemAttendances.edges.map(({ node }) => (\n    checkedInIds.push(node.account.id)\n  ))\n\n  return (\n    <ScheduleClassAttendanceBase>\n      {(scheduleClass.status === 'CANCELLED') ? \n        <Alert type=\"warning\">\n          <strong>{t(\"schedule.classes.class.attendance.this_class_is_cancelled\")}</strong> - {\" \"}\n          {t(\"schedule.classes.class.attendance.unable_to_add_attendance\")}\n        </Alert>  \n        : \n        <ScheduleClassAttendanceSearch \n          checkedInIds={checkedInIds}\n        />\n      }\n      <ContentCard \n        cardTitle={t('general.attendance')}\n        pageInfo={data.scheduleItemAttendances.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n          variables: {\n            after: data.scheduleItemAttendances.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n            const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo \n\n            return newEdges.length\n              ? {\n                  // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: {\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }}>\n        { !(data.scheduleItemAttendances.edges.length) ? \n          <Card.Body>\n            <p>{t('schedule.classes.class.attendance.empty_list')}</p>\n          </Card.Body>\n          :\n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAttendances.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.account.fullName}\n                    </Table.Col>\n                    <Table.Col>\n                      <BadgeBookingStatus status={node.bookingStatus} />\n                    </Table.Col>\n                    <Table.Col>\n                      {/* Delete */}\n                      <ScheduleClassAttendanceDelete node={node} />\n                      {/* Status dropdown */}\n                      <Dropdown\n                        key={v4()}\n                        className=\"pull-right\"\n                        type=\"button\"\n                        toggle\n                        color=\"secondary btn-sm\"\n                        triggerContent={t(\"general.status\")}\n                        items={[\n                          // <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                          //   <Dropdown.Item\n                          //     key={v4()}\n                          //     icon=\"check\"\n                          //     onClick={() => {\n                          //       setAttendanceStatus({\n                          //         t: t, \n                          //         updateAttendance: updateAttendance,\n                          //         node: node,\n                          //         status: 'ATTENDING'\n                          //       })\n                          //       refetchAttendance()\n                          //     }}>\n                          //       {t('schedule.classes.class.attendance.booking_status.ATTENDING')}\n                          //   </Dropdown.Item>\n                          // </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"calendar\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  match: match,\n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'BOOKED'\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.BOOKED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"x\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  match: match,\n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'CANCELLED'\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.CANCELLED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                        ]}\n                      />\n                      {(node.bookingStatus === \"BOOKED\") ?\n                        <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                          <Button\n                            key={v4()}\n                            className=\"pull-right\"\n                            color=\"success\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setAttendanceStatus({\n                                t: t, \n                                match: match,\n                                updateAttendance: updateAttendance,\n                                node: node,\n                                status: 'ATTENDING'\n                              })\n                            }}>\n                              {t('general.checkin')}\n                          </Button>\n                        </HasPermissionWrapper>  : \"\" }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n        }\n      </ContentCard>\n    </ScheduleClassAttendanceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendance))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ScheduleClassBack from \"./ScheduleClassBack\"\nimport ClassMenu from \"./ClassMenu\"\n\n\nfunction ScheduleClassEditBase({ t, match, history, children, subTitle=\"\", menuActiveLink=\"\" }) {\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ClassMenu \n                scheduleItemId={scheduleItemId}\n                class_date={classDate}\n                activeLink={menuActiveLink}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEditBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASS_ATTENDANCE_COUNT_YEAR = gql`\n  query InsightClassAttendanceQuery($year: Int!, $scheduleItem: ID!) {\n    insightClassAttendanceCountYear(year: $year, scheduleItem: $scheduleItem) {\n      description\n      dataCurrent\n      dataPrevious\n      year\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport C3Chart from \"react-c3js\"\n\nimport {\n    colors,\n    Card,\n  } from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport { class_subtitle } from \"../tools\"\nimport ScheduleClassEditBase from '../ScheduleClassEditBase'\n\n\nimport { GET_CLASS_ATTENDANCE_COUNT_YEAR } from \"./queries\"\n\n\nfunction ScheduleClassAttendanceChart({t, history, match}) {\n  const classDate = match.params.date\n  const scheduleItemId = match.params.class_id\n  const menuActiveLink = \"attendancechart\"\n\n  const year = parseInt(classDate.substring(0, 4))\n  console.log(year)\n\n  const { loading, error, data } = useQuery(GET_CLASS_ATTENDANCE_COUNT_YEAR, {\n    variables: {\n      year: year,\n      scheduleItem: scheduleItemId\n    }\n  })\n\n  if (loading) {\n    return (\n      <ScheduleClassEditBase menuActiveLink={menuActiveLink}>\n          {t('general.loading_with_dots')}\n      </ScheduleClassEditBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleClassEditBase menuActiveLink={menuActiveLink}>\n          {t('general.error_sad_smiley')}\n      </ScheduleClassEditBase>\n    )\n  }\n\n  const dataLabelCurrentYear = year\n  const chartDataCurrentYear = data.insightClassAttendanceCountYear.dataCurrent\n  const dataLabelPreviousYear = year - 1\n  const chartDataPreviousYear = data.insightClassAttendanceCountYear.dataPrevious\n  const scheduleItem = data.scheduleItem\n  \n  const subTitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: classDate\n  })\n\n  function range(size, startAt = 0) {\n    return [...Array(size).keys()].map(i => i + startAt);\n  }\n\n  return (\n    <ScheduleClassEditBase menuActiveLink={menuActiveLink} subTitle={subTitle}>\n      <Card title={t('schedule.classes.class.attendance_chart.title')}>\n        <Card.Body>\n          <C3Chart\n            style={{ height: \"16rem\" }}\n            data={{\n              x: 'x',\n              columns: [\n                // each columns data as array, starting with \"name\" and then containing data\n                [ 'x',\n                  ...range(54, 1) // This adds 1 .. 53\n                ],\n                [ 'current', ...chartDataCurrentYear],\n                [ 'previous', ...chartDataPreviousYear],\n              ],\n              type: \"bar\", // default type of chart\n              groups: [['current'], ['previous']],\n              colors: {\n                current: colors[\"azure\"],\n                previous: colors[\"azure-lighter\"],\n              },\n              names: {\n                // name of each serie\n                current: dataLabelCurrentYear,\n                previous: dataLabelPreviousYear\n              },\n              \n            }}\n            axis={{\n              y: {\n                padding: {\n                  bottom: 0,\n                },\n                show: true,\n                // Don't show decimals on ticks, only whole numbers\n                tick: {\n                  format: function (d) {\n                      return (parseInt(d) === d) ? d : null;\n                  }\n                }\n              },\n              x: {\n                padding: {\n                  left: 0,\n                  right: 0,\n                },\n                type: 'category',\n                show: true,\n              },\n            }}\n            tooltip={{\n              format: {\n                title: function(x) {\n                  return \"\";\n                },\n              },\n            }}\n            padding={{\n              bottom: 0,\n              // left: -1,\n              right: -1,\n            }}\n            point={{\n              show: false,\n            }}\n          />\n        </Card.Body>\n        <Card.Footer>\n          {/* {t(\"insight.revenue.total.explanation\")} */}\n        </Card.Footer>\n      </Card>\n    </ScheduleClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceChart))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ScheduleClassBookBack = ({ t, classId, date }) => (\n  <Link to={\"/schedule/classes/class/attendance/\" + classId + \"/\" + date} >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ScheduleClassBookBack))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($account: ID!, $scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClassBookingOptions(account: $account, scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      account {\n        id\n        fullName\n        hasReachedTrialLimit\n      }\n      alreadyBooked\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        blocked\n        paused\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n          creditTotal\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation CreateScheduleItemAttendance($input: CreateScheduleItemAttendanceInput!) {\n    createScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`","export function getUrlFromReturnTo({returnTo, schedule_item_id, class_date, locationId}) {\n  let returnUrl\n\n  if (returnTo === \"schedule_classes\") {\n    returnUrl = '/schedule/classes/class/attendance/' + schedule_item_id + \"/\" + class_date\n  } else if (returnTo === \"selfcheckin\") {\n    returnUrl = '/selfcheckin/checkin/' + locationId + \"/\" + schedule_item_id + \"/\" + class_date\n  }\n  \n  return returnUrl\n}","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction ClasspassCheckinButton({t, match, history, classpass, returnTo, locationId=null}) {\n  console.log(classpass)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"accountClasspass\": classpass.accountClasspass.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ClasspassCheckinButton))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card\n} from \"tabler-react\";\n\nimport ClasspassCheckinButton from \"./ScheduleClassBookClasspassBtn\"\n\n\nfunction ScheduleClassBookClasspasses({ \n  t, \n  match, \n  history, \n  classpasses,  \n  locationId,\n  onClickCheckin=f=>f ,\n  returnTo=\"schedule_classes\"\n}) {\n\n  return (\n    classpasses.map((classpass) =>(\n      <Grid.Col md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.classpass\")} >\n        <Card.Body>\n          <b>{classpass.accountClasspass.organizationClasspass.name}</b><br />\n          <span className=\"text-muted\">\n            {t('general.classes_remaining')}: {classpass.accountClasspass.classesRemainingDisplay} <br />\n            {t('general.valid_until')}: {moment(classpass.accountClasspass.dateEnd).format('LL')} <br />\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!classpass.allowed) ? t('schedule.classes.class.book.classpass_not_allowed') :\n            <ClasspassCheckinButton classpass={classpass} returnTo={returnTo} locationId={locationId} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookClasspasses))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\n\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction SubscriptionCheckinButton({t, match, history, subscription, returnTo, locationId=null}) {\n  console.log(subscription)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"accountSubscription\": subscription.accountSubscription.id,\n    \"date\": class_date,\n    \"attendanceType\": \"SUBSCRIPTION\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  if (subscription.blocked) {\n    return (\n      <p className=\"text-muted\">\n        <Icon name=\"alert-triangle\" />\n        {t(\"schedule.classes.class.book.subscription_blocked\")}\n      </p>\n    )\n  }\n\n  if (subscription.paused) {\n    return (\n      <p className=\"text-muted\">\n        <Icon name=\"pause\" />\n        {t(\"schedule.classes.class.book.subscription_paused\")}\n      </p>\n    )\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SubscriptionCheckinButton))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport SubscriptionCheckinButton from \"./ScheduleClassBookSubscriptionBtn\"\n\n\nfunction ScheduleClassBookSubscriptions({ \n  t, \n  match, \n  history, \n  subscriptions, \n  locationId,\n  returnTo=\"schedule_classes\"\n}) {\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {t(\"general.credits_remaining\")}: {subscription.accountSubscription.creditTotal}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.book.subscription_not_allowed') :\n            <SubscriptionCheckinButton subscription={subscription} returnTo={returnTo} locationId={locationId} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookSubscriptions))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction ScheduleClassBookPriceBtn({t, match, history, price, returnTo, locationId=null}) {\n  console.log(price)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"organizationClasspass\": price.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS_BUY_AND_BOOK\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceBtn))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleClassBookPriceBtn from \"./ScheduleClassBookPriceBtn\"\n\nfunction ScheduleClassBookPriceDropin({ \n  t, \n  match, \n  history, \n  priceDropin, \n  locationId,\n  onClickCheckin=f=>f,\n  returnTo=\"schedule_classes\"\n}) {\n  console.log('priceDropin')\n  console.log(priceDropin)\n\n  return (\n    <Grid.Col md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.dropin\")} >\n      <Card.Body>\n        <b>{priceDropin.priceDisplay}</b><br />\n        {t(\"schedule.classes.class.book.dropin_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ScheduleClassBookPriceBtn price={priceDropin} returnTo={returnTo} locationID={locationId} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceDropin))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleClassBookPriceBtn from \"./ScheduleClassBookPriceBtn\"\n\n\nfunction ScheduleClassBookPriceTrial({ \n  t, \n  match, \n  history, \n  priceTrial, \n  locationId,\n  onClickCheckin=f=>f,\n  returnTo=\"schedule_classes\"\n}) {\n  console.log('priceTrial')\n  console.log(priceTrial)\n\n  return (\n    <Grid.Col md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.trial\")} >\n      <Card.Body>\n        <b>{priceTrial.priceDisplay}</b><br />\n        {t(\"schedule.classes.class.book.trial_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ScheduleClassBookPriceBtn price={priceTrial} returnTo={returnTo} locationId={locationId} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceTrial))\n\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n\nimport { class_subtitle } from \"../tools\"\n\nimport ScheduleClassBookBack from \"./ScheduleClassBookBack\"\nimport ScheduleClassBookClasspasses from \"./ScheduleClassBookClasspasses\"\nimport ScheduleClassBookSubscriptions from \"./ScheduleClassBookSubscriptions\"\nimport ScheduleClassBookPriceDropin from \"./ScheduleClassBookPriceDropin\"\nimport ScheduleClassBookPriceTrial from \"./ScheduleClassBookPriceTrial\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassBook({ t, match, history }) {\n  // Clear attendance search\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH, \"\")\n  \n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        account: account_id,\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"ATTEND\"\n      },\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  // Query\n  // Loading\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryData)\n  const account = queryData.scheduleClassBookingOptions.account\n  const classpasses = queryData.scheduleClassBookingOptions.classpasses\n  const subscriptions = queryData.scheduleClassBookingOptions.subscriptions\n  const prices = queryData.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = queryData.scheduleClassBookingOptions.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: class_date\n  })\n\n  console.log(prices)\n  \n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">   \n              <ScheduleClassBookBack classId={schedule_item_id} date={class_date} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t('general.booking_options')} {account.fullName}</h4>\n                <div className=\"mt-6\">\n                <Grid.Row cards deck>\n                  <ScheduleClassBookSubscriptions subscriptions={subscriptions} />\n                  <ScheduleClassBookClasspasses classpasses={classpasses} />\n                  {(prices) ?\n                    (prices.organizationClasspassDropin) ? \n                      <ScheduleClassBookPriceDropin priceDropin={prices.organizationClasspassDropin}/> : \"\" \n                    : \"\" }\n                  {(prices) ?\n                    ((prices.organizationClasspassTrial) && (!account.hasReachedTrialLimit)) ? \n                      <ScheduleClassBookPriceTrial priceTrial={prices.organizationClasspassTrial}/> : \"\" \n                    : \"\" }\n                </Grid.Row>\n                </div>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBook))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY = gql`\n  query ScheduleClassWeeklyOTCs($scheduleItem: ID!, $date: Date!) {\n    scheduleItemWeeklyOtcs(first:1, scheduleItem: $scheduleItem, date:$date) {\n      edges {\n        node {\n          id \n          date\n          status\n          description\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          organizationLocationRoom {\n            id\n            name\n          }\n          organizationClasstype {\n            id\n            name\n          }\n          organizationLevel {\n            id\n            name\n          }\n          timeStart\n          timeEnd\n          spaces\n          walkInSpaces\n          infoMailContent\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    accounts(first: 100, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_WEEKLY_OTC = gql`\n  mutation DeleteScheduleClassWeeklyOTC($input: DeleteScheduleItemWeeklyOTCInput!) {\n    deleteScheduleItemWeeklyOtc(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_CLASS_WEEKLY_OTC = gql`\n  mutation UpdateScheduleClassWeeklyOTC($input: UpdateScheduleItemWeeklyOTCInput!) {\n    updateScheduleItemWeeklyOtc(input:$input) {\n      scheduleItemWeeklyOtc {\n        id\n      }\n    }\n  }\n`\n","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_EDIT_OTC_SCHEMA = Yup.object().shape({\n  spaces: Yup.number().nullable().notRequired(),\n  walkInSpaces: Yup.number().nullable().notRequired(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../plugin_config/tinymce\"\nimport CSTimePicker from \"../../../../ui/CSTimePicker\"\n\nconst ScheduleClassEditForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                      name=\"status\" \n                      className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('general.cancelled')}</option>\n                <option value=\"OPEN\" key={v4()}>{t('schedule.classes.no_instructor')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role')}>\n              <Field component=\"select\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role2')}>\n              <Field component=\"select\" \n                      name=\"role2\" \n                      className={(errors.role2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.level')}>\n              <Field component=\"select\" \n                    name=\"organizationLevel\" \n                    className={(errors.organizationLevels) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLevels.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLevels\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.class')}>\n          <Field component=\"select\" \n                name=\"organizationClasstype\" \n                className={(errors.organizationClasstype) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n            {inputData.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationClasstype\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> \n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces')}>\n              <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_walk_in')}>\n              <Field type=\"text\" \n                    name=\"walkInSpaces\" \n                    className={(errors.walkInSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"walkInSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.info_mail')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"infoMailContent\"\n            initialValue={values.infoMailContent}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"infoMailContent\", e.target.getContent())\n              setFieldTouched(\"infoMailContent\", true, true)\n            }}\n          />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n            {t('general.cancel')}\n        </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_CLASSES_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { DELETE_SCHEDULE_CLASS_WEEKLY_OTC, GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleClassWeeklyOTCDelete({t, match, history}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [deleteClassOTC] = useMutation(DELETE_SCHEDULE_CLASS_WEEKLY_OTC, {\n    onCompleted: () => { history.push(\"/schedule/classes/\") }\n  })\n  const query_vars = {\n    scheduleItem: schedule_item_id,\n    date: class_date\n  }\n\n  return (\n    <button className=\"icon btn-block btn btn-danger mb-3\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.class.edit.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.classes.class.edit.delete_success'),\n          deleteFunction: deleteClassOTC,\n          functionVariables: { \n            variables: {\n              input: {\n                scheduleItem: schedule_item_id,\n                date: class_date\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, variables: query_vars },\n              { query: GET_CLASSES_QUERY, variables: get_list_query_variables() },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-white\"><Icon prefix=\"fe\" name=\"trash-2\" /> {\" \"} {t(\"schedule.classes.class.edit.delete_all_changes\")}</span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassWeeklyOTCDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, UPDATE_SCHEDULE_CLASS_WEEKLY_OTC } from './queries'\nimport { GET_CLASSES_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { SCHEDULE_CLASS_EDIT_OTC_SCHEMA } from './yupSchema'\nimport ScheduleClassEditForm from './ScheduleClassEditForm'\nimport { TimeStringToJSDateOBJ, dateToLocalISOTime } from '../../../../../tools/date_tools'\n\nimport { class_subtitle } from \"../tools\"\n\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ScheduleClassWeeklyOTCDelete from './ScheduleClassWeeklyOTCDelete'\nimport ScheduleClassBack from \"../ScheduleClassBack\"\nimport ClassMenu from \"../ClassMenu\"\n\n\nfunction ScheduleClassEdit({ t, match, history }) {\n  let showDelete = false\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  console.log(schedule_item_id)\n  console.log(class_date)\n\n  const query_vars = {\n    scheduleItem: schedule_item_id,\n    date: class_date\n  }\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, {\n    variables: query_vars,\n  })\n  const [ updateScheduleClassWeeklyOTC ] = useMutation(UPDATE_SCHEDULE_CLASS_WEEKLY_OTC)\n\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  console.log('queryData')\n  console.log(queryData)\n\n  const scheduleItem = queryData.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: class_date\n  })\n  \n  let initialData\n  var initialValues = {}\n  if (queryData.scheduleItemWeeklyOtcs.edges.length) {\n    showDelete = true\n\n    initialData = queryData.scheduleItemWeeklyOtcs.edges[0].node\n\n    initialValues.status = initialData.status\n    initialValues.description = initialData.description\n    if (initialData.account) {\n      initialValues.account = initialData.account.id\n    }\n    if (initialData.account2) {\n      initialValues.account2 = initialData.account2.id\n    }\n    initialValues.role = initialData.role || \"\"\n    initialValues.role2 = initialData.role2 || \"\"\n    if (initialData.organizationLocationRoom) {\n      initialValues.organizationLocationRoom = initialData.organizationLocationRoom.id\n    }\n    if (initialData.organizationClasstype) {\n      initialValues.organizationClasstype = initialData.organizationClasstype.id\n    }\n    if (initialData.organizationLevel) {\n      initialValues.organizationLevel = initialData.organizationLevel.id\n    }\n    if (initialData.timeStart) {\n      initialValues.timeStart = TimeStringToJSDateOBJ(initialData.timeStart)\n    }\n    if (initialData.timeEnd) {\n      initialValues.timeEnd = TimeStringToJSDateOBJ(initialData.timeEnd)\n    }\n    if (initialData.spaces) {\n      initialValues.spaces = initialData.spaces\n    }\n    if (initialData.walkInSpaces) {\n      initialValues.walkInSpaces = initialData.walkInSpaces\n    }\n    if (initialData.infoMailContent) {\n      initialValues.infoMailContent = initialData.infoMailContent\n    }\n    \n  } else {\n    console.log('setting initial values')\n    initialValues.status = \"\"\n    initialValues.description = \"\"\n    initialValues.account = \"\"\n    initialValues.role = \"\"\n    initialValues.account2 = \"\"\n    initialValues.role2 = \"\"\n    initialValues.organizationLocationRoom = \"\"\n    initialValues.organizationClasstype = \"\"\n    initialValues.organizationLevel = \"\"\n    initialValues.timeStart = \"\"\n    initialValues.timeEnd = \"\"\n    initialValues.infoMailContent = \"\"\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('general.edit')}</Card.Title>\n                </Card.Header>\n                <Card.Body>\n                  <Formik\n                    initialValues={initialValues}\n                    validationSchema={SCHEDULE_CLASS_EDIT_OTC_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n\n                        console.log(\"SUBMIT VALUES\")\n                        console.log(values)\n\n                        let timeStart = undefined\n                        let timeEnd = undefined\n                        if (values.timeStart) {\n                          timeStart = dateToLocalISOTime(values.timeStart)\n                        }\n                        \n                        if (values.timeEnd) {\n                          timeEnd = dateToLocalISOTime(values.timeEnd)  \n                        }\n                        \n\n                        updateScheduleClassWeeklyOTC({ variables: {\n                          input: {\n                            scheduleItem: schedule_item_id,\n                            date: class_date,\n                            status: values.status,\n                            description: values.description,\n                            account: values.account,\n                            role: values.role,\n                            account2: values.account2,\n                            role2: values.role2,\n                            organizationLocationRoom: values.organizationLocationRoom,\n                            organizationClasstype: values.organizationClasstype,\n                            organizationLevel: values.organizationLevel,\n                            timeStart: timeStart,\n                            timeEnd: timeEnd,\n                            spaces: parseInt(values.spaces),\n                            walkInSpaces: parseInt(values.walkInSpaces),\n                            infoMailContent: values.infoMailContent\n                          }\n                        }, refetchQueries: [\n                            {query: GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, variables: query_vars},\n                            {query: GET_CLASSES_QUERY, variables: get_list_query_variables()},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.classes.class.edit.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                          console.log('there was an error sending the query', error.graphQLErrors)\n                          setSubmitting(false)\n                        })\n                      }\n                    }\n                    >\n                    {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                      <ScheduleClassEditForm\n                        inputData={queryData}\n                        isSubmitting={isSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                      >\n                        {console.log(errors)}\n                      </ScheduleClassEditForm>\n                    )}\n                  </Formik>\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showDelete) ? \n                <ScheduleClassWeeklyOTCDelete /> : \"\"\n              }\n              <ClassMenu \n                scheduleItemId={schedule_item_id}\n                class_date={class_date}\n                activeLink=\"edit\"\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_ITEM_PRICES_QUERY = gql`\n  query ScheduleItemPrices($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemPrices(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationClasspassDropin {\n            id\n            name\n          }\n          organizationClasspassTrial {\n            id\n            name\n          }\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY = gql`\nquery ScheduleItemPrice($before: String, $after: String, $id: ID!) {\n  scheduleItemPrice(id: $id) {\n    id\n    organizationClasspassDropin {\n      id\n      name\n    }\n    organizationClasspassTrial {\n      id\n      name\n    }\n    dateStart\n    dateEnd       \n  }\n  organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SCHEDULE_ITEM_PRICE = gql`\n  mutation CreateScheduleItemPrice($input:CreateScheduleItemPriceInput!) {\n    createScheduleItemPrice(input:$input) {\n      scheduleItemPrice {\n        id\n      } \n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_ITEM_PRICE = gql`\nmutation UpdateScheduleItemPrice($input: UpdateScheduleItemPriceInput!) {\n  updateScheduleItemPrice(input:$input) {\n    scheduleItemPrice {\n      id\n    } \n  }\n}\n`\n\nexport const DELETE_SCHEDULE_ITEM_PRICE = gql`\n  mutation DeleteScheduleItemPrice($input: DeleteScheduleItemPriceInput!) {\n    deleteScheduleItemPrice(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_ITEM_PRICE, GET_SCHEDULE_ITEM_PRICES_QUERY } from \"./queries\"\n\nimport ButtonDelete from '../../../../ui/ButtonDelete';\n\n\nfunction ScheduleClassPriceDelete({t, match, history, id}) {\n  const classId = match.params.class_id\n  const [deleteClassPrice] = useMutation(DELETE_SCHEDULE_ITEM_PRICE)\n  const query_vars = {\n    scheduleItem: classId\n  }\n\n  return (\n    <ButtonDelete \n      msgConfirm={t(\"schedule.classes.prices.delete_confirm_msg\")}\n      msgDescription={\"\"}\n      msgSuccess={t('schedule.classes.prices.delete_success')}\n      deleteFunction={deleteClassPrice}\n      deleteFunctionVariables={\n        { \n          variables: {\n            input: {\n              id: id\n            },\n          }, \n          refetchQueries: [\n            { query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: query_vars },\n          ]\n        }\n      }\n    />\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassPriceDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Table,\n  Card\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../../ui/ButtonAdd\"\nimport ButtonEdit from \"../../../../ui/ButtonEdit\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceDelete from './ScheduleClassPriceDelete'\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassPrices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const classId = match.params.class_id\n  const menuActiveLink = \"prices\" \n  const cardTitle = t('schedule.classes.prices.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    <ButtonAdd addUrl={`/schedule/classes/all/prices/${classId}/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_ITEM_PRICES_QUERY, {\n    variables: { scheduleItem: classId }\n  })\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.prices.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemPrices.edges.length) { return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.prices.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )}\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={false}\n    >\n    <ContentCard \n      cardTitle={cardTitle}\n      // headerContent={headerOptions}\n      hasCardBody={false}\n      pageInfo={data.scheduleItemPrices.pageInfo}\n      onLoadMore={() => {\n      fetchMore({\n        variables: {\n          after: data.scheduleItemPrices.pageInfo.endCursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.scheduleItemPrices.edges\n          const pageInfo = fetchMoreResult.scheduleItemPrices.pageInfo\n\n          return newEdges.length\n            ? {\n                // Put the new locations at the end of the list and update `pageInfo`\n                // so we have the new `endCursor` and `hasNextPage` values\n                data: { \n                  scheduleItemPrices: {\n                    __typename: previousResult.scheduleItemPrices.__typename,\n                    edges: [ ...previousResult.scheduleItemPrices.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              }\n            : previousResult\n          }\n        })\n      }} >\n      <div>\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.dropin')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.trial')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.scheduleItemPrices.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                {console.log(node)}\n                <Table.Col key={v4()}> \n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col key={v4()}> \n                  {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {node.organizationClasspassDropin.name}\n                </Table.Col>\n                <Table.Col>\n                  {(node.organizationClasspassTrial) ? node.organizationClasspassTrial.name : \"\"}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <ButtonEdit editUrl={`/schedule/classes/all/prices/${classId}/edit/${node.id}`} />\n                  <ScheduleClassPriceDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        </div>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassPrices))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../../ui/ButtonFormSubmit'\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleClassPriceForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.classpass_dropin')}>\n              <Field component=\"select\" \n                      name=\"organizationClasspassDropin\" \n                      className={(errors.organizationClasspassDropin) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class price form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.organizationClasspasses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationClasspassDropin\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.classpass_trial')}>\n              <Field component=\"select\" \n                      name=\"organizationClasspassTrial\" \n                      className={(errors.organizationClasspassTrial) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                {inputData.organizationClasspasses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationClasspassTrial\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <ButtonFormSubmit disabled={isSubmitting} />\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassPriceForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\n\nconst ScheduleClassPriceBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={`/schedule/classes/all/prices/${classId}`} />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassPriceBack))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_ITEM_PRICE } from './queries'\nimport ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\n\n\nfunction ScheduleClassPriceAdd({ t, history, match }) {\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/prices/${classId}`\n  const cardTitle = t('schedule.classes.prices.title_add')\n  const menuActiveLink = \"prices\"\n  const pageHeaderButtonList = <ScheduleClassPriceBack classId={classId} />\n  const { loading, error, data, } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleClassPrice] = useMutation(ADD_SCHEDULE_ITEM_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          organizationClasspassDropin: \"\",\n          organizationClasspassTrial: \"\",\n        }}\n        // validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassPrice({ variables: {\n              input: {\n                scheduleItem: match.params.class_id,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd,\n                organizationClasspassDropin: values.organizationClasspassDropin,\n                organizationClasspassTrial: values.organizationClasspassTrial\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.classes.prices.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassPriceForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n    </Formik>\n  </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY, GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY, UPDATE_SCHEDULE_ITEM_PRICE } from './queries'\nimport ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\n\nfunction ScheduleClassPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/prices/${classId}`\n  const menuActiveLink = \"prices\"\n  const cardTitle = t('schedule.classes.prices.title_edit')\n  const pageHeaderButtonList = <ScheduleClassPriceBack classId={classId} />\n  const { loading, error, data, } = useQuery(GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [editScheduleClassPrice] = useMutation(UPDATE_SCHEDULE_ITEM_PRICE, {\n    onCompleted: () => history.push(returnUrl)\n  })\n\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  let initialOrganizationClasspassDropin\n  let initialOrganizationClasspassTrial\n\n  if (inputData.scheduleItemPrice.organizationClasspassDropin) {\n    initialOrganizationClasspassDropin = inputData.scheduleItemPrice.organizationClasspassDropin.id\n  }\n\n  if (inputData.scheduleItemPrice.organizationClasspassTrial) {\n    initialOrganizationClasspassTrial = inputData.scheduleItemPrice.organizationClasspassTrial.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (inputData.scheduleItemPrice.dateStart) {\n    dateStart = new Date(inputData.scheduleItemPrice.dateStart)\n  }\n  if (inputData.scheduleItemPrice.dateEnd) {\n    dateEnd = new Date(inputData.scheduleItemPrice.dateEnd)\n  }\n\n\n  return (\n  <ClassEditBase \n    cardTitle={cardTitle}\n    menuActiveLink={menuActiveLink}\n    pageHeaderButtonList={pageHeaderButtonList}\n  >\n    <Formik\n      initialValues={{ \n        dateStart: dateStart,\n        dateEnd: dateEnd,\n        organizationClasspassDropin: initialOrganizationClasspassDropin,\n        organizationClasspassTrial: initialOrganizationClasspassTrial,\n      }}\n      // validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n      onSubmit={(values, { setSubmitting }) => {\n\n          let dateEnd\n          if (values.dateEnd) {\n            dateEnd = dateToLocalISO(values.dateEnd)\n          } else {\n            dateEnd = values.dateEnd\n          }\n\n          editScheduleClassPrice({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateEnd,\n              organizationClasspassDropin: values.organizationClasspassDropin,\n              organizationClasspassTrial: values.organizationClasspassTrial\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: { scheduleItem: match.params.class_id }},\n              // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.classes.prices.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n      >\n      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n        <ScheduleClassPriceForm\n          inputData={inputData}\n          isSubmitting={isSubmitting}\n          setFieldTouched={setFieldTouched}\n          setFieldValue={setFieldValue}\n          errors={errors}\n          values={values}\n          returnUrl={returnUrl}\n        />\n      )}\n  </Formik>\n</ClassEditBase>\n  )\n}\n\n\n// class ScheduleClassInstructorEdit extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Schedule class instructor edit props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n//     const class_id = match.params.class_id\n//     const returnUrl = \"/schedule/classes/all/instructors/\" + class_id\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Query query={GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY} variables={{id: id}}>\n//             {({ loading, error, data, refetch }) => {\n//               // Loading\n//               if (loading) return <p>{t('general.loading_with_dots')}</p>\n//               // Error\n//               if (error) {\n//                 console.log(error)\n//                 return <p>{t('general.error_sad_smiley')}</p>\n//               }\n    \n//               console.log('query data')\n//               console.log(data)\n//               const inputData = data\n//               const initialData = data.scheduleItemAccount\n\n//               let initialAccount2 = \"\"\n//               if (initialData.account2) {\n//                 initialAccount2 =  initialData.account2.id\n//               } \n    \n//               return (\n//                 <ClassEditBase \n//                   card_title={t('schedule.classes.instructors.title_edit')}\n//                   menu_activeLink=\"instructors\"\n//                   sidebar_button={<ScheduleClassInstructorBack classId={class_id} />}\n//                 >\n//                   <Mutation mutation={UPDATE_SCHEDULE_CLASS_INSTRUCTOR} onCompleted={() => history.push(returnUrl)}> \n//                     {(addScheduleClassInstructor, { data }) => (\n//                         <Formik\n//                             initialValues={{  \n//                               dateStart: initialData.dateStart,\n//                               dateEnd: initialData.dateEnd,\n//                               account: initialData.account.id,\n//                               role: initialData.role,\n//                               account2: initialAccount2,\n//                               role2: initialData.role2,\n//                             }}\n//                             validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n//                             onSubmit={(values, { setSubmitting }) => {\n    \n//                                 let dateEnd\n//                                 if (values.dateEnd) {\n//                                   dateEnd = dateToLocalISO(values.dateEnd)\n//                                 } else {\n//                                   dateEnd = values.dateEnd\n//                                 }\n    \n//                                 addScheduleClassInstructor({ variables: {\n//                                   input: {\n//                                     id: match.params.id,\n//                                     account: values.account,\n//                                     role: values.role,\n//                                     account2: values.account2,\n//                                     role2: values.role2,\n//                                     dateStart: dateToLocalISO(values.dateStart),\n//                                     dateEnd: dateEnd\n//                                   }\n//                                 }, refetchQueries: [\n//                                     {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n//                                     // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n//                                 ]})\n//                                 .then(({ data }) => {\n//                                     console.log('got data', data);\n//                                     toast.success((t('schedule.classes.instructors.toast_edit_success')), {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                   }).catch((error) => {\n//                                     toast.error((t('general.toast_server_error')) +  error, {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     console.log('there was an error sending the query', error)\n//                                     setSubmitting(false)\n//                                   })\n//                             }}\n//                             >\n//                             {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n//                               <ScheduleClassInstructorForm\n//                                 inputData={inputData}\n//                                 isSubmitting={isSubmitting}\n//                                 setFieldTouched={setFieldTouched}\n//                                 setFieldValue={setFieldValue}\n//                                 errors={errors}\n//                                 values={values}\n//                                 returnUrl={returnUrl}\n//                               >\n//                                 {console.log(errors)}\n//                               </ScheduleClassInstructorForm>\n//                             )}\n//                         </Formik>\n//                     )}\n//                   </Mutation>\n//                 </ClassEditBase>\n//               )\n//             }}\n//           </Query>\n//         </div>\n//       </SiteWrapper>\n//     )\n//   }\n// }\n\n\nexport default withTranslation()(withRouter(ScheduleClassPriceEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container,\n  Grid\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n// import ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ScheduleEventsBase({ t, match, history, children, pageHeaderButtonList=\"\" }) {\n  return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.events.title\")}>\n              <div className=\"page-options d-flex\">\n                {pageHeaderButtonList}\n              </div>\n            </Page.Header>\n            <Grid.Row>\n            <Grid.Col md={12}>\n              { children }\n            </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n      </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventsBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENTS_QUERY = gql`\n  query ScheduleEvents($before:String, $after:String, $archived:Boolean!) {\n    scheduleEvents(first: 100, before: $before, after:$after, archived:$archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          autoSendInfoMail\n          organizationLocation {\n            id\n            name\n          }\n          name\n          tagline\n          preview\n          description\n          organizationLevel {\n            id\n            name\n          }\n          instructor {\n            id \n            fullName\n          }\n          instructor2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd\n          timeStart\n          timeEnd\n          infoMailContent\n          scheduleItems {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_EVENT_QUERY = gql`\n  query ScheduleEvent($id: ID!, $before: String, $after: String) {\n    scheduleEvent(id: $id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      autoSendInfoMail\n      organizationLocation {\n        id\n        name\n      }\n      name\n      tagline\n      preview\n      description\n      organizationLevel {\n        id\n        name\n      }\n      instructor {\n        id \n        fullName\n      }\n      instructor2 {\n        id\n        fullName\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      infoMailContent\n      scheduleItems {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      createdAt\n      updatedAt\n    }\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventInputValues($after: String, $before: String) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\nexport const ARCHIVE_SCHEDULE_EVENT = gql`\n  mutation ArchiveScheduleEvent($input: ArchiveScheduleEventInput!) {\n    archiveScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n      }\n    }\n  }\n`\n","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let archived = localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED)\n  if (archived === null) {\n    archived = false\n  }\n\n  let queryVars = {\n    archived: (archived === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_archive = ({t, msgConfirm, msgDescription, msgSuccess, archiveFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_archive')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_archive_no')}</button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                archiveFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"inbox\" /> {t('general.confirm_archive_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_archive\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_archive from '../../tools/confirm_archive'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonArchive({t, match, history, msgConfirm, msgDescription, msgSuccess, archiveFunction, archiveFunctionVariables}) {\n  return (\n    <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.archive')} \n        onClick={() => {\n          confirm_archive({\n              t: t,\n              msgConfirm: <p>{msgConfirm}</p>,\n              msgDescription: msgDescription,\n              msgSuccess: msgSuccess,\n              archiveFunction: archiveFunction,\n              functionVariables: archiveFunctionVariables\n          })\n      }}>\n      <Icon prefix=\"fe\" name=\"inbox\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ButtonArchive))","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_unarchive = ({t, msgConfirm, msgDescription, msgSuccess, unArchiveFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_unarchive')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_unarchive_no')}</button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                unArchiveFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"corner-up-left\" /> {t('general.confirm_unarchive_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_unarchive\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_unarchive from \"../../tools/confirm_unarchive\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonUnArchive({t, match, history, msgConfirm, msgDescription, msgSuccess, unArchiveFunction, unArchiveFunctionVariables}) {\n  return (\n    <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.unarchive')} \n        onClick={() => {\n          confirm_unarchive({\n              t: t,\n              msgConfirm: <p>{msgConfirm}</p>,\n              msgDescription: msgDescription,\n              msgSuccess: msgSuccess,\n              unArchiveFunction: unArchiveFunction,\n              functionVariables: unArchiveFunctionVariables\n          })\n      }}>\n      <Icon prefix=\"fe\" name=\"inbox\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ButtonUnArchive))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { ARCHIVE_SCHEDULE_EVENT, GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\nimport { get_list_query_variables } from './tools'\n\nimport ButtonArchive from '../../ui/ButtonArchive'\nimport ButtonUnArchive from '../../ui/ButtonUnArchive'\n\n\nfunction ScheduleEventArchive({t, match, history, node}) {\n  const [archiveScheduleEvent] = useMutation(ARCHIVE_SCHEDULE_EVENT)\n  const refetchQueries = [\n    { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() },\n  ]\n\n  if (!node.archived) {\n    return (\n      <ButtonArchive\n        msgConfirm={t(\"schedule.events.archive_confirm_msg\")}\n        msgSuccess={t(\"general.archived\")}\n        archiveFunction={archiveScheduleEvent}\n        archiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: true\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n\n  } else {\n    return (\n      <ButtonUnArchive\n        msgConfirm={t(\"schedule.events.unarchive_confirm_msg\")}\n        msgSuccess={t(\"general.unarchived\")}\n        unArchiveFunction={archiveScheduleEvent}\n        unArchiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: false\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n  }\n}\n\nexport default withTranslation()(withRouter(ScheduleEventArchive))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport ScheduleEventsBase from \"./ScheduleEventsBase\"\nimport ScheduleEventArchive from \"./ScheduleEventArchive\"\n\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonEdit from '../../ui/ButtonEdit'\nimport { GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED)) {\n  localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, false) \n} \n\n\nfunction ScheduleEvents({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_SCHEDULE_EVENTS_QUERY, {\n    variables: get_list_query_variables()\n  })\n\n  const pageHeaderButtonList = <HasPermissionWrapper permission=\"add\" resource=\"scheduleevent\">\n    <ButtonAdd addUrl=\"/schedule/events/add\" />\n  </HasPermissionWrapper>\n\n  const cardHeaderContent = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <ContentCard \n          cardTitle={t('schedule.events.title')}\n          headerContent={cardHeaderContent}\n        >\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </ContentCard>\n      </ScheduleEventsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <ContentCard \n          cardTitle={t('schedule.events.title')}\n          headerContent={cardHeaderContent}\n        >\n          {t(\"schedule.events.error_loading_data\")}\n        </ContentCard>\n      </ScheduleEventsBase>\n    )\n  }\n\n  console.log(data)\n\n  const scheduleEvents = data.scheduleEvents\n\n  return (\n    <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={t('schedule.events.title')}\n        headerContent={cardHeaderContent}\n        hasCardBody={false}\n        pageInfo={scheduleEvents.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: scheduleEvents.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.scheduleEvents.edges\n                  const pageInfo = fetchMoreResult.scheduleEvents.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        scheduleEvents: {\n                          __typename: previousResult.scheduleEvents.__typename,\n                          edges: [ ...previousResult.scheduleEvents.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.event')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            { scheduleEvents.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  { moment(node.dateStart).format(dateFormat) } <br /> \n                </Table.Col>\n                <Table.Col>\n                  <span title={ node.name }>{ node.name.trunc(36) }</span> <br />\n                  <small className=\"text-muted\">\n                    { node.organizationLocation.name }\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {\n                    (node.instructor) ? node.instructor.fullName.trunc(30) : \"\"\n                  }\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.displayShop} />\n                </Table.Col>\n                {/* <Table.Col>\n                  { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                  <span className=\"text-muted\">\n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col> */}\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(node.archived) ? \n                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                    <ButtonEdit editUrl={`/schedule/events/edit/${node.id}`} />\n                  }\n                  <ScheduleEventArchive node={node} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ScheduleEventsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEvents))\n\n\n// const ScheduleEvents = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_LEVELS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationLevels: levels}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <p>{t('organization.levels.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!levels.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={levels.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: levels.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationLevels.edges\n//                                     const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new levels at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationLevels: {\n//                                             __typename: previousResult.organizationLevels.__typename,\n//                                             edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {levels.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/levels/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_EDIT_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  displayShop: Yup.boolean(),\n  autoSendInfoMail: Yup.boolean(),\n  organizationLocation: Yup.string()\n    .required(t('yup.field_required')),\n  organizationLevel: Yup.string(),\n  instructor: Yup.string(),\n  instructor2: Yup.string(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  tagline: Yup.string(),\n  preview: Yup.string(),\n  description: Yup.string(),\n  infoMailContent: Yup.string()\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nconst ScheduleEventForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, values, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayPublic\" \n                  checked={values.displayPublic} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayShop\" \n                checked={values.displayShop} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.shop')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayShop\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoSendInfoMail\" \n                checked={values.autoSendInfoMail} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.auto_send_info_mail')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoSendInfoMail\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.location')}>\n            <Field component=\"select\" \n                  name=\"organizationLocation\" \n                  className={(errors.organizationLocation) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t(\"schedule.event.location_please_select\")}</option>\n              {inputData.organizationLocations.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationLocation\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.level')}>\n            <Field component=\"select\" \n                  name=\"organizationLevel\" \n                  className={(errors.organizationLevel) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.organizationLevels.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationLevel\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.instructor')}>\n            <Field component=\"select\" \n                  name=\"instructor\" \n                  className={(errors.instructor) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t(\"schedule.event.instructor_please_select\")}</option>\n              {inputData.accounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"instructor\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.instructor2')}>\n            <Field component=\"select\" \n                  name=\"instructor2\" \n                  className={(errors.instructor2) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.accounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"instructor2\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.tagline')}>\n            <Field type=\"text\" \n                    name=\"tagline\" \n                    className={(errors.tagline) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"tagline\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.preview')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"preview\"\n              initialValue={values.preview}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"preview\", e.target.getContent())\n                setFieldTouched(\"preview\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"preview\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.infoMailContent')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"infoMailContent\"\n              initialValue={values.infoMailContent}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"infoMailContent\", e.target.getContent())\n                setFieldTouched(\"infoMailContent\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"infoMailContent\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n      <Link to={returnUrl}>\n        <Button color=\"link\">\n          {t('general.cancel')}\n        </Button>\n      </Link>\n    </Card.Footer>\n  </FoForm>\n)\n  \n  \nexport default withTranslation()(withRouter(ScheduleEventForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"./tools\"\n\nimport { GET_SCHEDULE_EVENTS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { SCHEDULE_EVENT_EDIT_SCHEMA } from './yupSchema'\nimport ScheduleEventForm from './ScheduleEventForm'\nimport ScheduleEventsBase from './ScheduleEventsBase'\nimport ButtonBack from '../../ui/ButtonBack';\n\n\nconst CREATE_SCHEDULE_EVENT = gql`\n  mutation CreateScheduleEvent($input:CreateScheduleEventInput!) {\n    createScheduleEvent(input: $input) {\n      scheduleEvent{\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventAdd({ t, history }) {\n  const returnUrl = \"/schedule/events\"\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleEvent ] = useMutation(CREATE_SCHEDULE_EVENT)\n\n  if (loading) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={t(\"schedule.events.add\")}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={t(\"schedule.events.add\")}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventsBase>\n    )\n  }\n\n  console.log(\"CREATE SCHEDULE EVENT INPUT DATA\")\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={t(\"schedule.events.add\")}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            displayShop: true,\n            name: \"\",\n            description: \"\",\n          }}\n          validationSchema={SCHEDULE_EVENT_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              createScheduleEvent({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  autoSentInfoMail: values.autoSentInfoMail,\n                  organizationLocation: values.organizationLocation,\n                  organizationLevel: values.organizationLevel,\n                  name: values.name,\n                  tagline: values.tagline,\n                  preview: values.preview,\n                  description: values.description,\n                  instructor: values.instructor,\n                  instructor2: values.instructor2,\n                  infoMailContent: values.infoMailContent,\n                }\n              }, refetchQueries: [\n                  { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('schedule.events.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <ScheduleEventForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </ScheduleEventsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventAdd))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport {\n  List\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nconst ScheduleEventMenu = ({ t, eventId, activeLink }) => (\n  <List.Group transparent={true}>\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"change\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}`}\n          icon=\"edit-2\"\n          active={(activeLink === 'general')}\n          >\n          {t('schedule.events.edit.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventticket\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/tickets`}\n          icon=\"clipboard\"\n          active={(activeLink === 'tickets')}\n          >\n          {t('schedule.events.tickets.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/activities`}\n          icon=\"calendar\"\n          active={(activeLink === 'activities')}\n          >\n          {t('schedule.events.activities.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventmedia\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/media`}\n          icon=\"image\"\n          active={(activeLink === 'media')}\n          >\n          {t('schedule.events.media.title')}\n      </List.GroupItem>\n      <HasPermissionWrapper \n        resource=\"scheduleeventearlybird\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/earlybirds`}\n          icon=\"clock\"\n          active={(activeLink === 'earlybirds')}\n          >\n          {t('schedule.events.earlybirds.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    </HasPermissionWrapper>\n  </List.Group>\n);\n\nexport default withTranslation()(ScheduleEventMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container,\n  Grid\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ScheduleEventEditMenu from \"./ScheduleEventEditMenu\"\nimport ButtonBack from '../../../ui/ButtonBack';\n\nfunction ScheduleEventEditBaseBase({ \n  t, \n  match, \n  history, \n  children, \n  returnUrl=\"/schedule/events\", \n  pageHeaderOptions, \n  activeLink,\n  pageSubTitle\n }) {\n  const eventId = match.params.event_id\n\n  return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.events.title\")} subTitle={pageSubTitle}>\n              <div className=\"page-options d-flex\">\n                {/* Page options can go here... */}\n                <ButtonBack returnUrl={returnUrl} />\n                { pageHeaderOptions }\n              </div>\n            </Page.Header>\n            <Grid.Row>\n            <Grid.Col md={9}>\n              { children }\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ScheduleEventEditMenu activeLink={activeLink} eventId={eventId}/>\n            </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n      </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEditBaseBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"./ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventEditBase({\n    t, \n    match, \n    history, \n    activeTab, \n    children, \n    activeLink, \n    cardTitle, \n    pageHeaderOptions,\n    returnUrl=\"/schedule/events\"}) \n  {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const eventId = match.params.event_id\n\n  // Set default card title\n  if (!cardTitle) {\n    cardTitle = t(\"schedule.events.edit.title\")\n  }\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  if (loading) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl} activeLink={activeLink}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl} activeLink={activeLink}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (event) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase \n      cardTitle={cardTitle} \n      pageHeaderOptions={pageHeaderOptions} \n      returnUrl={returnUrl} \n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle}</Card.Title>\n        </Card.Header>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n    )\n  }\n\nexport default withTranslation()(withRouter(ScheduleEventEditBase))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENTS_QUERY, GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport { SCHEDULE_EVENT_EDIT_SCHEMA } from '../yupSchema'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleEventEditBase from \"./ScheduleEventEditBase\"\nimport ScheduleEventForm from \"../ScheduleEventForm\"\nimport { get_list_query_variables } from \"../tools\"\n\n\nconst UPDATE_SCHEDULE_EVENT = gql`\n  mutation UpdateScheduleEvent($input: UpdateScheduleEventInput!) {\n    updateScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n        name\n      }\n    }\n  }\n`\n\nfunction ScheduleEventEdit({t, match, history}) {\n  const id = match.params.event_id\n  const returnUrl = \"/schedule/events\"\n  const activeLink = \"general\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleEvent ] = useMutation(UPDATE_SCHEDULE_EVENT)\n\n\n  if (loading) {\n    return (\n      <ScheduleEventEditBase activeLink={activeLink}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </ScheduleEventEditBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventEditBase activeLink={activeLink}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </ScheduleEventEditBase>\n    )\n  }\n\n  const initialData = data.scheduleEvent\n  const inputData = data\n\n  let initialOrgranizationlevel = \"\"\n  if (initialData.organizationLevel) {\n    initialOrgranizationlevel = initialData.organizationLevel.id\n  }\n\n  let initialInstructor = \"\"\n  if (initialData.instructor) {\n    initialInstructor = initialData.instructor.id\n  }\n\n  let initialInstructor2 = \"\"\n  if (initialData.instructor2) {\n    initialInstructor2 = initialData.instructor2.id\n  }\n\n  return (\n    <ScheduleEventEditBase activeLink={activeLink}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.displayPublic,\n            displayShop: initialData.displayShop,\n            autoSendInfoMail: initialData.autoSendInfoMail,\n            organizationLocation: initialData.organizationLocation.id,\n            organizationLevel: initialOrgranizationlevel,\n            name: initialData.name,\n            tagline: initialData.tagline,\n            preview: initialData.preview,\n            description: initialData.description,\n            instructor: initialInstructor,\n            instructor2: initialInstructor2,\n            infoMailContent: initialData.infoMailContent,\n          }}\n          validationSchema={SCHEDULE_EVENT_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let inputValues = {\n                id: id,\n                displayPublic: values.displayPublic,\n                displayShop: values.displayShop,\n                autoSendInfoMail: values.autoSendInfoMail,\n                organizationLocation: values.organizationLocation,\n                organizationLevel: values.organizationLevel,\n                name: values.name,\n                tagline: values.tagline,\n                preview: values.preview,\n                description: values.description,\n                infoMailContent: values.infoMailContent,\n              }\n\n              if (values.instructor) {\n                inputValues['instructor'] = values.instructor\n              }\n\n              if (values.instructor2) {\n                inputValues['instructor2'] = values.instructor2\n              }\n\n              updateScheduleEvent({ variables: {\n                input: inputValues\n              }, refetchQueries: [\n                  { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.events.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <ScheduleEventForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_ACTIVITIES_QUERY = gql`\nquery ScheduleItem($before:String, $after:String, $scheduleEvent:ID!) {\n  scheduleItems(first:100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        displayPublic\n        scheduleEvent {\n          id\n          name\n        }\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        name\n        spaces\n        countAttendance\n        dateStart\n        timeStart\n        timeEnd\n        account {\n          id\n          fullName\n        }\n        account2 {\n          id\n          fullName\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const GET_SCHEDULE_EVENT_ACTIVITY_QUERY = gql`\nquery ScheduleEventActivity($before:String, $after:String, $id:ID!) {\n  scheduleItem(id: $id) {\n    id\n    displayPublic\n    name\n    spaces\n    dateStart\n    timeStart\n    timeEnd\n    organizationLocationRoom {\n      id\n      name\n      organizationLocation {\n        id\n        name\n      }\n    }\n    account {\n      id\n      fullName\n    }\n    account2 {\n      id\n      fullName\n    }\n  }\n  accounts(first: 100, before: $before, after: $after, isActive:true, instructor: true) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        fullName\n      }\n    }\n  }\n  organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n        organizationLocation {\n          id \n          name\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation DeleteScheduleItem($input: DeleteScheduleItemInput!) {\n    deleteScheduleItem(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventActivityInputValues($after: String, $before: String) {\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"./ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventEditListBase({\n  t, \n  match, \n  history, \n  activeTab, \n  pageInfo, \n  onLoadMore, \n  activeLink, \n  children, \n  pageHeaderOptions=\"\",\n  pageSubTitle=\"\",\n  returnUrl=\"/schedule/events\"\n}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.edit.title\")\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n\nif (loading) {\n  return (\n    <ScheduleEventEditBaseBase \n      pageHeaderOptions={pageHeaderOptions} \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nif (error) {\n  return (\n    <ScheduleEventEditBaseBase \n      pageHeaderOptions={pageHeaderOptions} \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nconst event = data.scheduleEvent\nconst dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\nconst cardSubTitle = (event) ? \n<span className=\"text-muted\">\n  - {event.name + \" \" + dateStart}\n</span> : \"\"\n\nreturn (\n  <ScheduleEventEditBaseBase \n    pageHeaderOptions={pageHeaderOptions} \n    activeLink={activeLink} \n    pageSubTitle={pageSubTitle}\n    returnUrl={returnUrl}\n  >\n    <ContentCard \n      cardTitle={<span>{cardTitle} {cardSubTitle}</span>}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n      hasCardBody={false}\n    >\n      {children}\n    </ContentCard>\n  </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEditListBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_ACTIVITY, GET_SCHEDULE_EVENT_ACTIVITIES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventActivityDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventActivity] = useMutation(DELETE_SCHEDULE_EVENT_ACTIVITY)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.activities.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.activities.delete_success'),\n          deleteFunction: deleteScheduleEventActivity,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventActivityDelete from \"./ScheduleEventActivityDelete\"\nimport moment from 'moment';\n\n\nfunction ScheduleItems({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"activities\"\n\n  const pageHeaderOptions = <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/activities/add`} className=\"ml-2\" />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  const scheduleItems = data.scheduleItems\n  const pageInfo = data.scheduleItems.pageInfo\n\n  // Empty list\n  if (!scheduleItems.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.tickets.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleItems.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleItems.edges\n        const pageInfo = fetchMoreResult.scheduleItems.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleItems: {\n                __typename: previousResult.scheduleItems.__typename,\n                edges: [ ...previousResult.scheduleItems.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.filled')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleItems.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)} <br />\n                  {/* Start & end time */}\n                  <small className=\"text-muted\">\n                    {moment(node.dateStart + ' ' + node.timeStart).format(timeFormat)} {' - '}\n                    {moment(node.dateStart + ' ' + node.timeEnd).format(timeFormat)} { ' ' }\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {node.name} <br />\n                  <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} className=\"text-muted\"/>\n                </Table.Col>\n                <Table.Col>\n                  {node.organizationLocationRoom.organizationLocation.name} <br />\n                  <small className=\"text-muted\">{node.organizationLocationRoom.name}</small>\n                </Table.Col>\n                <Table.Col>\n                  {node.account && node.account.fullName} \n                  {(node.account2) ? <span className=\"text-muted\"><br />{node.account2.fullName}</span> : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {node.countAttendance}/{node.spaces}\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.displayPublic} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/activities/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventActivityDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleItems))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_ACTIVITY_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  spaces: Yup.number()\n    .required(t('yup.field_required')),\n  organizationLocationRoom: Yup.string()\n    .required(t('yup.field_required')),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  timeStart: Yup.date()\n    .typeError(t('yup.time_required'))\n    .required(t('yup.field_required')),\n  timeEnd: Yup.date()\n    .typeError(t('yup.time_required'))\n    .required(t('yup.field_required')), \n  account: Yup.string(),\n  account2: Yup.string(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventActivityBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../../ui/CSTimePicker\"\n\nfunction ScheduleEventActivityForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.events.activities.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              {/* {errors.timeStart}\n              {errors.timeStart && touched.timeStart ? (\n                <span className=\"invalid-feedback\">{errors.timeStart} - hacky thingy</span>\n              ) : null} */}\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.spaces')}>\n                <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\n\n\nconst ADD_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation CreateScheduleItem($input:CreateScheduleItemInput!) {\n    createScheduleItem(input: $input) {\n      scheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventActivityAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeLink = 'activities'\n  const cardTitle = t(\"schedule.events.activities.add\")\n\n  const [addScheduleEventTicket] = useMutation(ADD_SCHEDULE_EVENT_ACTIVITY, {\n    onCompleted: () => history.push(returnUrl),\n  })\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n  console.log(inputData)\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: true,\n          name: '',\n          spaces: '',\n          organizationLocationRoom: '',\n          dateStart: new Date(),\n          timeStart: '',\n          timeEnd: '',\n          account: '',\n          account2: ''\n        }}\n        validationSchema={SCHEDULE_EVENT_ACTIVITY_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addScheduleEventTicket({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              frequencyType: \"SPECIFIC\",\n              frequencyInterval: 0,\n              scheduleItemType: \"EVENT_ACTIVITY\",\n              displayPublic: values.displayPublic,\n              name: values.name,\n              spaces: parseInt(values.spaces),\n              organizationLocationRoom: values.organizationLocationRoom,\n              account: values.account,\n              account2: values.account2,\n              dateStart: dateToLocalISO(values.dateStart),\n              timeStart: dateToLocalISOTime(values.timeStart),\n              timeEnd: dateToLocalISOTime(values.timeEnd),\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.activities.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventActivityForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../ui/CardTabs\"\n\nfunction ScheduleEventActivityTabs({ t, activeTab, eventId, scheduleItemId}) {\n  console.log(activeTab)\n\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"schedule.events.tickets.edit_menu.general\"), \n            link: `/schedule/events/edit/${eventId}/activities/edit/${scheduleItemId}`\n          },\n          {\n            name: \"attendance\", \n            title: t(\"schedule.events.tickets.edit_menu.attendance\"), \n            link: `/schedule/events/edit/${eventId}/activities/edit/${scheduleItemId}/attendance`\n          },\n      ]}\n      active={activeTab}\n    />\n  )\n}\n\nexport default withTranslation()(ScheduleEventActivityTabs)\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\nimport ScheduleEventActivityTabs from \"./ScheduleEventActivityTabs\"\n\n\nfunction ScheduleEventActivityEditBase({t, match, history, activeTab, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingActivity, error: errorActivity, data: dataActivity } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading || loadingActivity) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorActivity) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleItem = dataActivity.scheduleItem\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleItem) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleItem) ?\n  <span className=\"text-muted\">\n    - {scheduleItem.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityEditBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventActivityEditBase from \"./ScheduleEventActivityEditBase\"\nimport ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation UpdateScheduleItem($input:UpdateScheduleItemInput!) {\n    updateScheduleItem(input: $input) {\n      scheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\n\nfunction ScheduleEventActivityEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.activities.edit\")\n\n  const [updateScheduleEventTicket] = useMutation(UPDATE_SCHEDULE_EVENT_ACTIVITY)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n  }})\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventActivityEditBase>\n  )\n  if (error) return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventActivityEditBase>\n  )\n\n  const inputData = data\n  const scheduleItem = data.scheduleItem\n  console.log(inputData)\n\n// DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDateStart = null\n  if (scheduleItem.dateStart) {\n    initialDateStart = new Date(scheduleItem.dateStart)\n  }\n\n  let initialTimeStart = null\n  if (scheduleItem.timeStart) {\n    initialTimeStart = TimeStringToJSDateOBJ(scheduleItem.timeStart)\n  }\n  let initialTimeEnd = null\n  if (scheduleItem.timeEnd) {\n    initialTimeEnd = TimeStringToJSDateOBJ(scheduleItem.timeEnd)\n  }\n\n\n  return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: scheduleItem.displayPublic,\n          name: scheduleItem.name,\n          spaces: scheduleItem.spaces,\n          organizationLocationRoom: scheduleItem.organizationLocationRoom.id,\n          dateStart: initialDateStart,\n          timeStart: initialTimeStart,\n          timeEnd: initialTimeEnd,\n          account: (scheduleItem.account) ? scheduleItem.account.id : '',\n          account2: (scheduleItem.account2) ? scheduleItem.account2.id : ''\n        }}\n        validationSchema={SCHEDULE_EVENT_ACTIVITY_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateScheduleEventTicket({ variables: {\n            input: {\n              id: scheduleItemId,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              spaces: parseInt(values.spaces),\n              organizationLocationRoom: values.organizationLocationRoom,\n              account: values.account,\n              account2: values.account2,\n              dateStart: dateToLocalISO(values.dateStart),\n              timeStart: dateToLocalISOTime(values.timeStart),\n              timeEnd: dateToLocalISOTime(values.timeEnd),\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.activities.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventActivityForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventActivityEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_ITEM_ATTENDANCES_QUERY = gql`\nquery ScheduleItemAttendances($before:String, $after:String, $schedule_item:ID!) {\n  scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem:$schedule_item) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        bookingStatus\n        account {\n          id\n          fullName\n        }\n        accountScheduleEventTicket {\n          id\n          scheduleEventTicket {\n            name\n          }\n          cancelled\n        }\n      }\n    }\n  }\n}\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport { GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from '../queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../../queries'\n\nimport ScheduleEventActivityBack from \"../ScheduleEventActivityBack\"\nimport ScheduleEventEditBaseBase from \"../../edit/ScheduleEventEditBaseBase\"\nimport ScheduleEventActivityTabs from \"../ScheduleEventActivityTabs\"\n\n\nfunction ScheduleEventActivityAttendanceBase({t, match, history, activeTab, onLoadMore, pageInfo, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  console.log(activeTab)\n\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingActivity, error: errorActivity, data: dataActivity } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading || loadingActivity) {\n    return (\n      <ScheduleEventEditBaseBase  activeLink={activeLink} sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorActivity) {\n    return (\n      <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            {t(\"schedule.event.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleItem = dataActivity.scheduleItem\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleItem) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleItem) ?\n  <span className=\"text-muted\">\n    - {scheduleItem.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <ContentCard \n        cardTitle={<span>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</span>}\n        cardTabs={<ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>}\n        hasCardBody={false}\n        pageInfo={pageInfo}\n        onLoadMore={onLoadMore}\n      >\n        \n        {children}\n      </ContentCard>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventActivityTabs active={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n        {children}\n      </Card> */}\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAttendanceBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\"\n\nimport { GET_SCHEDULE_ITEM_ATTENDANCES_QUERY } from \"./queries\"\nimport ScheduleEventActivityBack from \"../ScheduleEventActivityBack\"\nimport ScheduleEventActivityAttendanceBase from \"./ScheduleEventActivityAttendanceBase\"\nimport BadgeBookingStatus from \"../../../../ui/BadgeBookingStatus\"\n\n\nfunction ScheduleEventActivityAttendance({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeTab = 'attendance'\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_ITEM_ATTENDANCES_QUERY, {\n    variables: {\n      schedule_item: scheduleItemId\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventActivityAttendanceBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventActivityAttendanceBase>\n  )\n  if (error) return (\n    <ScheduleEventActivityAttendanceBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventActivityAttendanceBase>\n  )\n\n  const scheduleItemAttendances = data.scheduleItemAttendances\n  console.log(data)\n  const pageInfo = scheduleItemAttendances.pageInfo\n\n  // Empty list\n  if (!scheduleItemAttendances.edges.length) { return (\n    <ScheduleEventActivityAttendanceBase activeLink={activeLink} activeTab={activeTab} sidebarContent={sidebarContent}>\n      <Card.Body>\n        <p>{t('schedule.events.activities.attendance.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventActivityAttendanceBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleItemAttendances.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n        const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new attendance items at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleItemAttendances: {\n                __typename: previousResult.scheduleItemAttendances.__typename,\n                edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventActivityAttendanceBase \n      // sidebarContent={sidebarContent} \n      // cardTitle={cardTitle} \n      activeTab={activeTab}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleItemAttendances.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.account.fullName}\n              </Table.Col>\n              <Table.Col>\n                <BadgeBookingStatus status={node.bookingStatus} />\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventActivityAttendanceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAttendance))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY = gql`\n  query ScheduleEventEarlybirds($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventEarlybirds(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          discountPercentage\n          dateStart\n          dateEnd\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_EARLYBIRD_QUERY = gql`\n  query ScheduleEventEarlybird($id:ID!) {\n    scheduleEventEarlybird(id: $id) {\n      id\n      discountPercentage\n      dateStart\n      dateEnd\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_EVENT_EARLYBIRD = gql`\n  mutation CreateScheduleEventEarlybird($input:CreateScheduleEventEarlybirdInput!) {\n    createScheduleEventEarlybird(input: $input) {\n      scheduleEventEarlybird {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_EVENT_EARLYBIRD = gql`\n  mutation UpdateScheduleEventEarlybird($input:UpdateScheduleEventEarlybirdInput!) {\n    updateScheduleEventEarlybird(input: $input) {\n      scheduleEventEarlybird {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_EARLYBIRD   = gql`\n  mutation DeleteScheduleEventEarlybird($input: DeleteScheduleEventEarlybirdInput!) {\n    deleteScheduleEventEarlybird(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_EARLYBIRD, GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventEarlybirdDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventEarlybird] = useMutation(DELETE_SCHEDULE_EVENT_EARLYBIRD)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.earlybirds.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.earlybirds.delete_success'),\n          deleteFunction: deleteScheduleEventEarlybird,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment';\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\n// import ScheduleEventTicketListBase from \"./ScheduleEventTicketListBase\"\nimport ScheduleEventEarlybirdDelete from \"./ScheduleEventEarlybirdDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventEarlybirds({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"earlybirds\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/earlybirds/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventEarlybirds = data.scheduleEventEarlybirds\n  const pageInfo = data.scheduleEventEarlybirds.pageInfo\n\n  // Empty list\n  if (!scheduleEventEarlybirds.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.earlybirds.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventEarlybirds.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventEarlybirds.edges\n        const pageInfo = fetchMoreResult.scheduleEventEarlybirds.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventEarlybirds: {\n                __typename: previousResult.scheduleEventEarlybirds.__typename,\n                edges: [ ...previousResult.scheduleEventEarlybirds.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.earlybirds.discountPercentage')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventEarlybirds.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {node.discountPercentage} %\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/earlybirds/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventEarlybirdDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirds))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_EARLYBIRDS_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  discountPercentage: Yup.number()\n  .required(t('yup.field_required')),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nfunction ScheduleEventMediaForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  setFieldTouched,\n  setFieldValue,\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.events.earlybirds.discountPercentage')}>\n              <Field type=\"text\" \n                    name=\"discountPercentage\" \n                    className={(errors.discountPercentage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"discountPercentage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { ADD_SCHEDULE_EVENT_EARLYBIRD, GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_EARLYBIRDS_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventEarlybirdForm\"\n\n\nfunction ScheduleEventEarlybirdAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.earlybirds.add\")\n\n  const [addScheduleEventEarlybird] = useMutation(ADD_SCHEDULE_EVENT_EARLYBIRD)\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date(),\n          dateEnd: \"\",\n          discountPercentage: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_EARLYBIRDS_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          addScheduleEventEarlybird({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.earlybirds.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n      >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { \n  GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, \n  GET_SCHEDULE_EVENT_EARLYBIRD_QUERY,\n  UPDATE_SCHEDULE_EVENT_EARLYBIRD\n } from \"./queries\"\nimport { SCHEDULE_EVENT_EARLYBIRDS_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventEarlybirdForm\"\n\n\nfunction ScheduleEventEarlybirdEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventEarlybirdId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.earlybirds.edit\")\n\n  const [updateScheduleEventEarlybird] = useMutation(UPDATE_SCHEDULE_EVENT_EARLYBIRD)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_EARLYBIRD_QUERY, {\n    variables: {\n      id: scheduleEventEarlybirdId\n  }})\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const scheduleEventEarlybird = data.scheduleEventEarlybird\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDateStart = null\n  if (scheduleEventEarlybird.dateStart) {\n    initialDateStart = new Date(scheduleEventEarlybird.dateStart)\n  }\n\n  let initialDateEnd = null\n  if (scheduleEventEarlybird.dateEnd) {\n    initialDateEnd = new Date(scheduleEventEarlybird.dateEnd)\n  }\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: initialDateStart,\n          dateEnd: initialDateEnd,\n          discountPercentage: scheduleEventEarlybird.discountPercentage\n        }}\n        validationSchema={SCHEDULE_EVENT_EARLYBIRDS_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          updateScheduleEventEarlybird({ variables: {\n            input: {\n              id: scheduleEventEarlybirdId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.earlybirds.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_MEDIAS_QUERY = gql`\n  query ScheduleEventMedias($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventMedias(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          sortOrder\n          description\n          urlImage\n          urlImageThumbnailSmall\n          image\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_MEDIA_QUERY = gql`\n  query ScheduleEventMedia($id:ID!) {\n    scheduleEventMedia(id: $id) {\n      id\n      sortOrder\n      description\n      image\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_MEDIA   = gql`\n  mutation DeleteScheduleEventMedia($input: DeleteScheduleEventMediaInput!) {\n    deleteScheduleEventMedia(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventActivityInputValues($after: String, $before: String) {\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_MEDIA, GET_SCHEDULE_EVENT_MEDIAS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventMediaDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventMedia] = useMutation(DELETE_SCHEDULE_EVENT_MEDIA)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.media.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.media.delete_success'),\n          deleteFunction: deleteScheduleEventMedia,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Avatar,\n  Button,\n  Table,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventMediaDelete from \"./ScheduleEventMediaDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventMedia({t, match, history}) {\n  const eventId = match.params.event_id\n  const activeLink = \"media\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/media/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_MEDIAS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventMedias = data.scheduleEventMedias\n  const pageInfo = data.scheduleEventMedias.pageInfo\n\n  // Empty list\n  if (!scheduleEventMedias.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.media.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventMedias.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventMedias.edges\n        const pageInfo = fetchMoreResult.scheduleEventMedias.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventMedias: {\n                __typename: previousResult.scheduleEventMedias.__typename,\n                edges: [ ...previousResult.scheduleEventMedias.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader></Table.ColHeader> \n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.sort_order')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventMedias.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                </Table.Col>\n                <Table.Col>\n                  {node.description}\n                </Table.Col>\n                <Table.Col>\n                  {node.sortOrder}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/media/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventMediaDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMedia))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_MEDIA_SCHEMA = Yup.object().shape({\n  description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  sortOrder: Yup.number(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventMediaBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/media`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaBack))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n\nfunction ScheduleEventMediaForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.sort_order')}>\n              <Field type=\"text\" \n                    name=\"sortOrder\" \n                    className={(errors.sortOrder) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"sortOrder\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaForm))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_MEDIA_SCHEMA } from './yupSchema'\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventMediaForm from \"./ScheduleEventMediaForm\"\n\n\nconst ADD_SCHEDULE_EVENT_MEDIA = gql`\n  mutation CreateScheduleEventMedia($input:CreateScheduleEventMediaInput!) {\n    createScheduleEventMedia(input: $input) {\n      scheduleEventMedia {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventMediaAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n  const activeLink = 'media'\n  const cardTitle = t(\"schedule.events.media.add\")\n\n  const [addScheduleEventMedia] = useMutation(ADD_SCHEDULE_EVENT_MEDIA, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          description: \"\",\n          sortOrder: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_MEDIA_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            scheduleEvent: eventId,\n            description: values.description,\n            sortOrder: values.sortOrder,\n            imageFileName: fileName,\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            inputVars.image = b64_enc_file\n\n            addScheduleEventMedia({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: {scheduleEvent: eventId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.events.media.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            toast.error(t(\"general.please_select_a_file\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          }\n        }}\n      >\n        {({ isSubmitting, errors, values }) => (\n          <ScheduleEventMediaForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaAdd))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_MEDIA_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventMediaEditBase({t, match, history, activeTab, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const eventId = match.params.event_id\n  const scheduleEventMediaId = match.params.id\n  const cardTitle = t(\"schedule.events.media.edit\")\n  const activeLink = \"media\"\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingMedia, error: errorMedia, data: dataMedia } = useQuery(GET_SCHEDULE_EVENT_MEDIA_QUERY, {\n    variables: {\n      id: scheduleEventMediaId\n    }\n  })\n\n  if (loading || loadingMedia) {\n    return (\n      <ScheduleEventEditBaseBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorMedia) {\n    return (\n      <ScheduleEventEditBaseBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleEventMedia = dataMedia.scheduleEventMedia\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleEventMedia) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleEventMedia) ?\n  <span className=\"text-muted\">\n    - {scheduleEventMedia.description}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaEditBase))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY, GET_SCHEDULE_EVENT_MEDIA_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_MEDIA_SCHEMA } from './yupSchema'\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventMediaEditBase from \"./ScheduleEventMediaEditBase\"\nimport ScheduleEventMediaForm from \"./ScheduleEventMediaForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_MEDIA = gql`\n  mutation UpdateScheduleEventMedia($input:UpdateScheduleEventMediaInput!) {\n    updateScheduleEventMedia(input: $input) {\n      scheduleEventMedia {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventMediaEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventMediaId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.media.edit\")\n\n  const [updateScheduleEventMedia] = useMutation(UPDATE_SCHEDULE_EVENT_MEDIA)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_MEDIA_QUERY, {\n    variables: {\n      id: scheduleEventMediaId\n  }})\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventMediaEditBase>\n  )\n  if (error) return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventMediaEditBase>\n  )\n\n  const inputData = data\n  const scheduleEventMedia = data.scheduleEventMedia\n  console.log(inputData)\n\n  return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          description: scheduleEventMedia.description,\n          sortOrder: scheduleEventMedia.sortOrder\n        }}\n        validationSchema={SCHEDULE_EVENT_MEDIA_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            id: scheduleEventMediaId,\n            description: values.description,\n            sortOrder: values.sortOrder\n          }\n\n          function updateMedia() {\n            updateScheduleEventMedia({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: {scheduleEvent: eventId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.events.media.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            inputVars.image = b64_enc_file\n            inputVars.imageFileName = fileName\n\n            updateMedia()\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            updateMedia()\n          }\n        }}\n        >\n        {({ isSubmitting, errors, values }) => (\n          <ScheduleEventMediaForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventMediaEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_TICKETS_QUERY = gql`\n  query ScheduleEventTickets($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventTickets(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          fullEvent\n          deletable\n          displayPublic\n          name\n          description\n          price\n          priceDisplay\n          isSoldOut\n          financeTaxRate {\n            id\n            name\n          }\n          financeGlaccount {\n            id\n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_EVENT_TICKET_QUERY = gql`\n  query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n    scheduleEventTicket(id: $id) {\n      id\n      displayPublic\n      name\n      description\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      financeGlaccount {\n        id\n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_EVENT_TICKET = gql`\n  mutation DeleteScheduleEventTicket($input: DeleteScheduleEventTicketInput!) {\n    deleteScheduleEventTicket(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventTicketInputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_TICKET, GET_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventTicketDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [ deleteScheduleEventTicket ] = useMutation(DELETE_SCHEDULE_EVENT_TICKET)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.tickets.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.tickets.delete_success'),\n          deleteFunction: deleteScheduleEventTicket,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketDelete))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeSoldOut({ t }) {\n  return <Badge color=\"warning\">{t('general.sold_out')}</Badge> \n}\n\nexport default withTranslation()(BadgeSoldOut)","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventTicketDelete from \"./ScheduleEventTicketDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport BadgeSoldOut from '../../../ui/BadgeSoldOut';\n\n\nfunction ScheduleEventTickets({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"tickets\"\n\n  const pageHeaderOptions = <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/tickets/add`} className=\"ml-2\" />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_TICKETS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  const scheduleEventTickets = data.scheduleEventTickets\n  const pageInfo = data.scheduleEventTickets.pageInfo\n\n  // Empty list\n  if (!scheduleEventTickets.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('schedule.events.tickets.empty_list')}</p>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventTickets.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventTickets.edges\n        const pageInfo = fetchMoreResult.scheduleEventTickets.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventTickets: {\n                __typename: previousResult.scheduleEventTickets.__typename,\n                edges: [ ...previousResult.scheduleEventTickets.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.glaccount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.costcenter')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleEventTickets.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              {/* <Table.Col>\n                {moment(node.dateStart).format(dateFormat)}\n              </Table.Col>\n              <Table.Col>\n                {moment(node.dateEnd).format(dateFormat)}\n              </Table.Col> */}\n              <Table.Col>\n                {node.name} <br />\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} className=\"text-muted\"/>\n              </Table.Col>\n              <Table.Col>\n                {node.priceDisplay} <br />\n                {(node.isSoldOut) ? <BadgeSoldOut /> : \"\"}\n              </Table.Col>\n              <Table.Col>\n                <BadgeBoolean value={node.displayPublic} />\n              </Table.Col>\n              <Table.Col>\n                {(node.financeGlaccount) ? node.financeGlaccount.name : \"\"}\n              </Table.Col>\n              <Table.Col>\n                {(node.financeCostcenter) ? node.financeCostcenter.name : \"\"}\n              </Table.Col>\n              <Table.Col className=\"text-right\">\n                <Link to={`/schedule/events/edit/${eventId}/tickets/edit/${node.id}`}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                {/* Check for fullEvent / deletable before showing delete button */}\n                {(node.deletable) ? <ScheduleEventTicketDelete id={node.id} /> : \"\"}\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTickets))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_TICKET_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  description: Yup.string(),\n  price: Yup.number(),\n  financeTaxRate: Yup.string(),\n  financeGlaccount: Yup.string(),\n  financeCostcenter: Yup.string(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventTicketBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketBack))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n// import CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction ScheduleEventTicketForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.events.tickets.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.price')}>\n                <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.taxrate')}>\n              <Field component=\"select\" \n                      name=\"financeTaxRate\" \n                      className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in subscription price add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.financeTaxRates.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                    name=\"financeGlaccount\" \n                    className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                    name=\"financeCostcenter\" \n                    className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEMA } from './yupSchema'\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventTicketForm from \"./ScheduleEventTicketForm\"\n\n\nconst ADD_SCHEDULE_EVENT_TICKET = gql`\n  mutation CreateScheduleEventTicket($input:CreateScheduleEventTicketInput!) {\n    createScheduleEventTicket(input: $input) {\n      scheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeLink = 'tickets'\n  const cardTitle = t(\"schedule.events.tickets.add\")\n\n  const [addScheduleEventTicket] = useMutation(ADD_SCHEDULE_EVENT_TICKET, {\n    onCompleted: () => history.push(returnUrl),\n  })\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: true,\n          name: '',\n          description: '',\n        }}\n        validationSchema={SCHEDULE_EVENT_TICKET_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addScheduleEventTicket({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.tickets.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventTicketForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../ui/CardTabs\"\n\nfunction ScheduleEventTicketTabs({ t, active, eventId, ticketId}) {\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"schedule.events.tickets.edit_menu.general\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}`\n          },\n          {\n            name: \"activities\", \n            title: t(\"schedule.events.tickets.edit_menu.activities\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/activities`\n          },\n          {\n            name: \"customers\", \n            title: t(\"schedule.events.tickets.edit_menu.customers\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/customers`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(ScheduleEventTicketTabs)\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_TICKET_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventTicketTabs from \"./ScheduleEventTicketTabs\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventTicketEditBase({t, match, history, activeTab, children, pageHeaderOptions=\"\", searchResults=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const eventId = match.params.event_id\n  const ticketId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const cardTitle = t(\"schedule.events.tickets.edit\")\n  const activeLink = \"tickets\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingTicket, error: errorTicket, data: dataTicket } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: {\n      id: ticketId\n    }\n  })\n\n  if (loading || loadingTicket) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventTicketTabs active={activeTab} eventId={eventId}  ticketId={ticketId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorTicket) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventTicketTabs active={activeTab} eventId={eventId} ticketId={ticketId}/>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const ticket = dataTicket.scheduleEventTicket\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (event) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardTicketSubtitle = (ticket) ?\n  <span className=\"text-muted\">\n    - {ticket.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} activeLink={activeLink} returnUrl={returnUrl} >\n      {searchResults}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardTicketSubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventTicketTabs active={activeTab} eventId={eventId} ticketId={ticketId}/>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditBase))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY, GET_SCHEDULE_EVENT_TICKET_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEMA } from './yupSchema'\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"./ScheduleEventTicketEditBase\"\nimport ScheduleEventTicketForm from \"./ScheduleEventTicketForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_TICKET = gql`\n  mutation UpdateScheduleEventTicket($input:UpdateScheduleEventTicketInput!) {\n    updateScheduleEventTicket(input: $input) {\n      scheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketEdit({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"general\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateScheduleEventTicket] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const scheduleEventTicket = data.scheduleEventTicket\n\n\n  let initialFinanceTaxRate = \"\"\n  if (scheduleEventTicket.financeTaxRate) {\n    initialFinanceTaxRate = scheduleEventTicket.financeTaxRate.id\n  }\n\n  let initialFinanceGlaccount = \"\"\n  if (scheduleEventTicket.financeGlaccount) {\n    initialFinanceGlaccount = scheduleEventTicket.financeGlaccount.id\n  }\n\n  let initialFinanceCostcenter = \"\"\n  if (scheduleEventTicket.financeCostcenter) {\n    initialFinanceCostcenter = scheduleEventTicket.financeCostcenter.id\n  }\n\n\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: scheduleEventTicket.displayPublic,\n          name: scheduleEventTicket.name,\n          description: scheduleEventTicket.description,\n          price: scheduleEventTicket.price,\n          financeTaxRate: initialFinanceTaxRate,\n          financeGlaccount: initialFinanceGlaccount,\n          financeCostcenter: initialFinanceCostcenter\n        }}\n        validationSchema={SCHEDULE_EVENT_TICKET_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateScheduleEventTicket({ variables: {\n            input: {\n              id: id,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.tickets.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventTicketForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            inputData={inputData}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY = gql`\nquery ScheduleEventTicketScheduleItem($before:String, $after:String, $scheduleEventTicket:ID!) {\n  scheduleEventTicketScheduleItems(first: 100, before: $before, after: $after, scheduleEventTicket:$scheduleEventTicket) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        scheduleEventTicket {\n          id\n          name\n          fullEvent\n        }\n        scheduleItem {\n          id\n          name\n        }\n        included\n      }\n    }\n  }\n}\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n","import * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA = Yup.object().shape({\n  included: Yup.boolean(),\n})","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst ScheduleEventTicketEditActivityForm = ({ t, history, match, disabled, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Form.Group className='mb-0'>\n        <Form.Label className=\"custom-switch\">\n          <Field \n            className=\"custom-switch-input\"\n            type=\"checkbox\" \n            name=\"included\" \n            onChange={() => {\n              setFieldValue('included', !values.included)\n              setFieldTouched('included', true)\n              setSubmitting(true)\n              setTimeout(() => {submitForm()}, 200)\n            }}\n            checked={values.included} \n            disabled={disabled} \n          />\n          <span className=\"custom-switch-indicator\" ></span>\n          <span className=\"custom-switch-description\">{t('general.included')}</span>\n        </Form.Label>\n        <ErrorMessage name=\"included\" component=\"div\" />   \n      </Form.Group>  \n    </Dimmer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditActivityForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from 'uuid'\n\nimport {\n  Table,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA } from \"./yupSchema\"\n\nimport ScheduleEventTicketBack from \"../ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"../ScheduleEventTicketEditBase\"\nimport ScheduleEventTicketEditActivityForm from \"./ScheduleEventTicketEditActivityForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM = gql`\n  mutation UpdateScheduleEventTicketScheduleItem($input:UpdateScheduleEventTicketScheduleItemInput!) {\n    updateScheduleEventTicketScheduleItem(input: $input) {\n      scheduleEventTicketScheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketEditActivities({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"activities\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY, {\n    variables: {\n      scheduleEventTicket: id\n    }\n  })\n\n  const [updateScheduleEventTicketScheduleItem] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  const scheduleEventTicketActivities = data.scheduleEventTicketScheduleItems\n\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader className=\"text-right\">{t('general.included')}</Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleEventTicketActivities.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.scheduleItem.name}\n              </Table.Col>  \n              <Table.Col className=\"text-right\">\n                <Formik\n                  initialValues={{ \n                    included: node.included,\n                  }}\n                  validationSchema={SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA}\n                  onSubmit={(values, { setSubmitting }) => {\n                    console.log(\"submit values\")\n                    console.log(values)\n\n                    updateScheduleEventTicketScheduleItem({ variables: {\n                      input: {\n                          id: node.id,\n                          included: values.included\n                        }\n                      }, \n                      refetchQueries: [\n                          {query: GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                        ]\n                      })\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.activities.toast_edit_success')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          setSubmitting(false)\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                          setSubmitting(false)\n                        })\n                  }}\n                  >\n                  {({  isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm, setSubmitting }) => (\n                    <ScheduleEventTicketEditActivityForm\n                      isSubmitting={isSubmitting}\n                      setFieldTouched={setFieldTouched}\n                      setFieldValue={setFieldValue}\n                      errors={errors}\n                      values={values}\n                      disabled={node.scheduleEventTicket.fullEvent}\n                      setSubmitting={setSubmitting}\n                      submitForm={submitForm}\n                    >\n                      {/* {console.log(errors)}\n                      {console.log(values)} */}\n                    </ScheduleEventTicketEditActivityForm>\n                  )}\n                </Formik>\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditActivities))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Badge,\n  Button,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET } from \"./queries\"\nimport CSLS from '../../../../../tools/cs_local_storage'\nimport BadgeBoolean from \"../../../../ui/BadgeBoolean\"\nimport ScheduleEventTicketEditBase from \"../ScheduleEventTicketEditBase\"\nimport ButtonAdd from '../../../../ui/ButtonAdd'\n\n\n\nfunction ScheduleEventTicketEditCustomers({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"customers\"\n  const activeLink = 'tickets'\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, {\n    variables: {\n      scheduleEventTicket: id\n    }\n  })\n\n  const [updateAccountScheduleEventTicket] = useMutation(UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET)\n  // const [updateScheduleEventTicketScheduleItem] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM)\n\n  // set returnURL for invoice links\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, \n    `/schedule/events/edit/${eventId}/tickets/edit/${id}/customers`)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log(data)\n\n  const pageHeaderOptions = <React.Fragment>\n    <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/tickets/edit/${id}/customers/search`}\n      className=\"ml-2\" />\n  </React.Fragment>\n\n\n  // Data\n  return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n      pageHeaderOptions={pageHeaderOptions}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.tickets.info_mail_sent')}</Table.ColHeader> \n            <Table.ColHeader></Table.ColHeader> \n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {data.accountScheduleEventTickets.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.account.fullName} <br />\n                {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n              </Table.Col>  \n              <Table.Col>\n                { node.invoiceItems.edges && <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                    {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber } <br />\n                  </Link>\n                }\n                <small className=\"text-muted\">\n                  {node.invoiceItems.edges && node.invoiceItems.edges[0].node.financeInvoice.summary.trunc(40) } <br />\n                </small>\n              </Table.Col>\n              <Table.Col>\n                <BadgeBoolean value={node.infoMailSent} /> <br />\n                {/* TODO: resend link here */}\n              </Table.Col>\n              <Table.Col>\n                {(node.cancelled) ?\n                  <Button \n                    className=\"pull-right\"\n                    color=\"warning\"\n                    onClick={() =>\n                      updateAccountScheduleEventTicket({ variables: {\n                        input: {\n                          id: node.id,\n                          cancelled: false\n                        }\n                      }, refetchQueries: [\n                          {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                      ]})\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.customers.uncancelled')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                        }\n                      )\n                    }\n                  >\n                    {t(\"general.uncancel\")}\n                  </Button>\n                :\n                  <Button \n                    className=\"pull-right\"\n                    color=\"warning\"\n                    onClick={() =>\n                      updateAccountScheduleEventTicket({ variables: {\n                        input: {\n                          id: node.id,\n                          cancelled: true\n                        }\n                      }, refetchQueries: [\n                          {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                      ]})\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.customers.cancelled')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                        })\n                      }\n                    >\n                      {t(\"general.cancel\")}\n                    </Button>\n                }\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditCustomers))","export function getAccountsQueryVariables(ticketId, searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined,\n    ticketId: ticketId\n  }\n\n  queryVars.searchName = searchName\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n// export function get_attendance_list_query_variables(schedule_item_id, date) {\n//   return {\n//     scheduleItem: schedule_item_id,\n//     date: date\n//   }\n// }\n","import React, { useState, useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Badge,\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport { getAccountsQueryVariables } from \"./tools\"\n\nimport CSLS from \"../../../../../tools/cs_local_storage\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ScheduleEventEditBaseBase from '../../edit/ScheduleEventEditBaseBase'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY, ADD_ACCOUNT_SCHEDULE_EVENT_TICKET, GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\n\n\nfunction ScheduleEventTicketEditCustomersSearch({ t, match, history }) {\n  let [searchName, setSearchName] = useState(\"\")\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const ticketId = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/customers`\n  const activeLink = 'tickets'\n  const cardTitle = t('schedule.events.tickets.customers.search.title')\n\n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_ACCOUNTS_QUERY, {\n      variables: getAccountsQueryVariables(ticketId, searchName)\n    }\n  )\n  const [ addAccountScheduleEventTicket ] = useMutation(ADD_ACCOUNT_SCHEDULE_EVENT_TICKET)\n\n  const headerOptions = <Card.Options>\n    <InputSearch \n      initialValueKey={CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH}\n      placeholder=\"Search...\"\n      onChange={(value) => {\n        console.log(value)\n        localStorage.setItem(CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH, value)\n        setSearchName(value)\n        console.log(\"Executing refetch\")\n        refetch({ variables: getAccountsQueryVariables(ticketId, value)})\n      }}\n    />\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ScheduleEventEditBaseBase>\n  )\n  // Error\n  if (error) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <p>{t('schedule.events.tickets.customers.search.error_loading')}</p>\n      </Card.Body>\n    </ScheduleEventEditBaseBase>\n  )  \n\n  console.log(data)\n  const accounts = data.accounts\n  const ticket = data.scheduleEventTicket\n  const event = ticket.scheduleEvent\n  const accountScheduleEventTickets = data.accountScheduleEventTickets\n  const dateStart = moment(event.dateStart).format(dateFormat)\n  // TODO: Add date to page subtitle\n  const pageSubTitle = `${ticket.scheduleEvent.name} ${dateStart} - ${ticket.name}`\n  let accountIdsWithTickets = []\n  accountScheduleEventTickets.edges.map(({ node }) => (\n    accountIdsWithTickets.push(node.account.id)\n  ))\n  console.log(accountIdsWithTickets)\n\n  // No search name entered\n  if (!searchName) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"primary\" icon=\"info\">\n            {t('schedule.events.tickets.customers.search.search_to_find_customers_to_sell_to')}\n          </Alert> \n        </Card.Body>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n\n  // Empty list\n  if (!accounts.edges.length) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"secondary\">{t('schedule.events.tickets.customers.search.empty_list')}</Alert>\n        </Card.Body>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n\n  \n  return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={accounts.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              data: {\n                                accounts: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(accountIdsWithTickets.includes(node.id)) ? \n                    <Badge color=\"success\" className=\"pull-right\">{t(\"schedule.events.tickets.customers.search_results_already_bought\")}</Badge> :\n                    <Button a\n                      color=\"primary\"\n                      outline\n                      onClick={() =>\n                        addAccountScheduleEventTicket({ variables: {\n                          input: {\n                            account: node.id,\n                            scheduleEventTicket: ticketId\n                          }                            \n                        }, refetchQueries: [\n                            {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                              scheduleEventTicket: ticketId\n                            }},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            history.push(returnUrl)\n                            toast.success((`${t('schedule.events.tickets.customers.toast_add_success')} ${node.fullName}`), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                          })\n                      }\n                    >\n                      {t(\"general.sell\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  }\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditCustomersSearch))\n","import React from \"react\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport StatusIcon from \"../../ui/StatusIcon\"\n\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationShift\n  let organizationLocation\n\n  let queryVars = {\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationShift = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT)\n  if (organizationShift) {\n    queryVars.organizationShift = organizationShift\n  } else {\n    queryVars.organizationShift = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function represent_instructor(name, role) {\n  let textColor = false\n\n  switch (role) {\n    case \"SUB\":\n      textColor = \"text-blue\"\n      break\n    case \"ASSISTANT\":\n      textColor = \"text-green\"\n      break\n    case \"KARMA\":\n      textColor = \"text-orange\"\n      break\n    default:\n      break\n  }\n\n  if (textColor) {\n    return <span className={textColor}>{name}</span>\n  } else {\n    return name\n  }\n}\n\n\nexport function represent_shift_status(status) {\n  let color\n\n  switch (status) {\n    case \"SUB\":\n      color = \"primary\"\n      break\n    case \"CANCELLED\":\n      color = \"warning\"\n      break\n    case \"OPEN\":\n      color = \"danger\"\n      break\n    default:\n      color = \"success\"\n  }\n\n  return <StatusIcon color={color} />\n}\n\n\nexport function get_class_messages(t, status, description, holiday, holidayName) {\n  if (holiday) {\n    return <span>{t(\"general.holiday\")} ({holidayName})</span>\n  }\n\n  if (status === 'CANCELED') {\n    return description\n  }\n}","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Button, Grid,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nfunction ScheduleShiftsFilter({ t, history, data, refetch }) {\n  let [location, setLocation] = useState(getDefaultValue(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION))\n  let [shift, setShift] = useState(getDefaultValue(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT))\n\n  return (\n    <React.Fragment>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Button\n            className=\"float-right\"\n            color=\"link\"\n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT, \"\")\n              setLocation(\"\")\n              setShift(\"\")\n              refetch(get_list_query_variables())\n            }}\n          >\n            {t(\"general.clear\")}\n          </Button>\n          <h6 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h6 >\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          {/* Locations */}\n          <select \n            className={selectClass}\n            value={location}\n            onChange={ (event) => {\n              setLocation(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.shifts.filter_all_locations\")}</option>\n            {data.organizationLocations.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col>\n          {/* Shifts */}\n          <select \n            className={selectClass}\n            value={shift}\n            onChange={ (event) => {\n              setShift(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.shifts.filter_all_shifts\")}</option>\n            {data.organizationShifts.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n      </Grid.Row>\n    </React.Fragment>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftsFilter))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ScheduleShiftsFilter from \"./ScheduleShiftsFilter\"\n\nimport { \n  get_list_query_variables, \n} from './tools'\n\nimport moment from 'moment'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleShiftsBase ({ t, history, children, data, refetch }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.shifts.title\")}>\n            <div className=\"page-options d-flex\">\n              <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n                <Button \n                  icon=\"home\"\n                  tooltip=\"text\"\n                  className=\"mr-2\"\n                  color={\n                    ((localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY))) ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY, \"location\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n                <Button \n                  icon=\"clock\"\n                  className=\"mr-2\"\n                  color={\n                    (localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY) === \"starttime\") ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY, \"starttime\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <CSDatePicker \n                className=\"form-control schedule-list-csdatepicker mr-2\"\n                selected={new Date(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM))}\n                isClearable={false}\n                onChange={(date) => {\n                  let nextWeekFrom = moment(date)\n                  let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                  console.log(get_list_query_variables())\n\n                  refetch(get_list_query_variables())\n                }}\n                placeholderText={t('schedule.classes.go_to_date')}\n              />\n              <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)).subtract(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentWeekFrom = moment()\n                    let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                    \n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)).add(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n              </Button.List> \n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"scheduleshift\">\n                <Link to={\"/schedule/shifts/add\"}>\n                  <Button color=\"primary btn-block ml-2\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {(data) ? \n                <ScheduleShiftsFilter data={data} refetch={refetch} />\n              : \"\"}\n              {children}\n            </Grid.Col>\n        </Grid.Row>\n      </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SHIFTS_QUERY = gql`\n  query ScheduleShifts(\n    $dateFrom: Date!, \n    $dateUntil:Date!, \n    $orderBy: String, \n    $organizationShift: ID,\n    $organizationLocation: ID,\n  ){\n    scheduleShifts(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationShift: $organizationShift,\n        organizationLocation: $organizationLocation,\n    ){\n      date\n      shifts {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        description\n        holiday\n        holidayName\n        account {\n          id\n          fullName\n        }\n        account2 {\n          id\n          fullName\n        }\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationShift {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SHIFT_QUERY = gql`\n  query ScheduleItem($id: ID!) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleShiftInputValues($after: String, $before: String) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_SHIFT = gql`\n  mutation CreateScheduleShift($input:CreateScheduleShiftInput!) {\n    createScheduleShift(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationShift {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_SHIFT = gql`\n  mutation DeleteScheduleShift($input: DeleteScheduleShiftInput!) {\n    deleteScheduleShift(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport {\n  Badge,\n  Dropdown,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ScheduleShiftsBase from './ScheduleShiftsBase'\n\nimport { GET_SHIFTS_QUERY, DELETE_SCHEDULE_SHIFT } from \"./queries\"\nimport { \n  get_class_messages,\n  get_list_query_variables, \n  represent_shift_status\n} from './tools'\n\nimport moment from 'moment'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleShifts ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const {loading, error, data, refetch} = useQuery(GET_SHIFTS_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteScheduleShift] = useMutation(DELETE_SCHEDULE_SHIFT)\n\n  if (loading) {\n    return (\n      <ScheduleShiftsBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </ScheduleShiftsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleShiftsBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleShiftsBase>\n    )\n  }\n\n  const shifts = data.scheduleShifts\n  console.log(shifts)\n       \n  // Empty list\n  if (!shifts.length) { return (\n    <ScheduleShiftsBase>\n      <p>\n        {t('schedule.shifts.empty_list')}\n      </p>\n    </ScheduleShiftsBase>\n  )} \n\n  return (\n    <ScheduleShiftsBase data={data} refetch={refetch}>\n      { data.scheduleShifts.map(({ date, shifts }) => (\n        <div key={v4()}>\n          <Card>\n            <Card.Header>\n              <Card.Title>\n                <b>{moment(date).format(\"dddd\")}</b> {' '}\n                <span className=\"text-muted\">\n                  {moment(date).format(\"LL\")} \n                </span>\n              </Card.Title>\n            </Card.Header>\n            {!(shifts.length) ? <Card.Body>{t('schedule.shifts.empty_list')}</Card.Body> :\n              <Table cards>\n                <Table.Header>\n                  <Table.Row key={v4()}>\n                    <Table.ColHeader /> \n                    <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.shift')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.employee')}</Table.ColHeader>\n                    <Table.ColHeader></Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {shifts.map((\n                    { scheduleItemId, \n                      frequencyType,\n                      date, \n                      status,\n                      holiday,\n                      holidayName,\n                      description,\n                      account, \n                      account2,\n                      organizationLocationRoom, \n                      organizationShift, \n                      timeStart, \n                      timeEnd }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {represent_shift_status(status)}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Start & end time */}\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                        {(frequencyType === 'SPECIFIC') ? <Badge color=\"primary\">{t('general.once')}</Badge> : null } <br />\n                        <small className=\"text-muted\">{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Location */}\n                        {organizationLocationRoom.organizationLocation.name} <br />\n                        <small className=\"text-muted\">{organizationLocationRoom.name}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Shift and level */}\n                        {organizationShift.name}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Employee(s) */}\n                        { (account) ? \n                            account.fullName : \n                            <span className=\"text-red\">{t(\"schedule.shifts.no_employee\")}</span>\n                        } <br />\n                        <small className=\"text-muted\">\n                          {(account2) ? account2.fullName : \"\"}\n                        </small>\n                      </Table.Col>\n                      <Table.Col>\n                        <Dropdown\n                          key={v4()}\n                          className=\"pull-right\"\n                          type=\"button\"\n                          toggle\n                          color=\"secondary btn-sm\"\n                          triggerContent={t(\"general.actions\")}\n                          items={[\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemweeklyotc\">\n                              <Link to={'/schedule/shifts/shift/edit/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"edit-3\"\n                                >\n                                  {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleshift\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <Link to={'/schedule/shifts/all/edit/' + scheduleItemId}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  badge={t('schedule.shifts.all_shifts_in_series')}\n                                  badgeType=\"secondary\"\n                                  icon=\"edit-3\"\n                                >\n                                    {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleshift\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <span className=\"text-red\">\n                              <Dropdown.Item\n                                key={v4()}\n                                badge={t('schedule.shifts.all_shifts_in_series')}\n                                badgeType=\"danger\"\n                                icon=\"trash-2\"\n                                onClick={() => {\n                                  confirm_delete({\n                                    t: t,\n                                    msgConfirm: t(\"schedule.shifts.delete_confirm_msg\"),\n                                    msgDescription: <p key={v4()}>\n                                      {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                      {moment(date + ' ' + timeEnd).format(timeFormat)} {' '} \n                                      {organizationShift.name} {' '} @ {' '}\n                                      {organizationLocationRoom.organizationLocation.name} {' '}\n                                      {organizationLocationRoom.name}\n                                      </p>,\n                                    msgSuccess: t('schedule.shifts.deleted'),\n                                    deleteFunction: deleteScheduleShift,\n                                    functionVariables: { variables: {\n                                      input: {\n                                        id: scheduleItemId\n                                      }\n                                    }, refetchQueries: [\n                                      { query: GET_SHIFTS_QUERY, variables: get_list_query_variables() }\n                                    ]}\n                                  })\n                                }}>\n                              {t(\"general.delete\")}\n                              </Dropdown.Item>\n                              </span>\n                            </HasPermissionWrapper>\n                          ]}\n                        />\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            }\n          </Card>\n        </div>\n      ))}\n    </ScheduleShiftsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShifts))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SHIFT_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    organizationShift: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n// import { Editor } from '@tinymce/tinymce-react'\n// import { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleShiftForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group label={t('schedule.classes.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.classes.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.classes.select_weekly')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.classes.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.shift')}>\n              <Field component=\"select\" \n                    name=\"organizationShift\" \n                    className={(errors.organizationShift) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationShifts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationShift\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {/* <Form.Group label={t('general.note')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"note\"\n              initialValue={values.note}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"note\", e.target.getContent())\n                setFieldTouched(\"note\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> */}\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleShiftForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack'\n\nfunction ScheduleShiftAddBase({t, children}) {\n  const returnUrl = \"/schedule/shifts\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.shifts.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl}/>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftAddBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_SHIFT } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport ScheduleShiftForm from './ScheduleShiftForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\nimport ScheduleShiftAddBase from './ScheduleShiftAddBase'\n\n\nfunction ScheduleShiftAdd({t, history}) {\n  const cardTitle = t('schedule.shifts.title_add')\n  const returnUrl = \"/schedule/shifts\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleShift ] = useMutation(CREATE_SHIFT)\n  \n\n  if (loading) return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleShiftAddBase>\n  )\n\n  if (error) return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleShiftAddBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            frequencyType: \"WEEKLY\",\n            frequencyInterval: 1,\n            organizationLocationRoom: \"\",\n            organizationShift: \"\",\n            dateStart: new Date(),\n            timeStart: new Date(),\n            timeEnd: new Date(),\n          }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              \n              createScheduleShift({ variables: {\n                input: {\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd)\n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.shifts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  history.push(returnUrl)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                <ScheduleShiftForm\n                  inputData={inputData}\n                  isSubmitting={isSubmitting}\n                  setFieldValue={setFieldValue}\n                  setFieldTouched={setFieldTouched}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  returnUrl={returnUrl}\n                >\n                </ScheduleShiftForm>\n              )\n           }\n        </Formik>\n      </Card>      \n    </ScheduleShiftAddBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftAdd))","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_SHIFT = gql`\nmutation UpdateScheduleShift($input:UpdateScheduleShiftInput!) {\n  updateScheduleShift(input: $input) {\n    scheduleItem {\n      id\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../../ui/ButtonBack';\n\nconst ShiftEditBack = ({ t }) => (\n    <ButtonBack returnUrl=\"/schedule/shifts\" />\n)\n\nexport default withTranslation()(ShiftEditBack)","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n\nconst ShiftEditMenu = ({ t, activeLink, shiftId }) => (\n  <List.Group transparent={true}>\n    <List.GroupItem\n      key={v4()}\n      className=\"d-flex align-items-center\"\n      to={\"#/schedule/shifts/all/edit/\" + shiftId}\n      icon=\"edit-3\"\n      active={(activeLink===\"edit\")}\n      >\n      {t('general.edit')}\n    </List.GroupItem>\n    <HasPermissionWrapper permission=\"view\"\n                          resource=\"scheduleitemaccount\">\n      <List.GroupItem\n        key={v4()}\n        className=\"d-flex align-items-center\"\n        to={\"#/schedule/shifts/all/employees/\" + shiftId}\n        icon=\"users\"\n        active={activeLink===\"employees\"}\n        >\n        {t('general.employees')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n  </List.Group>\n);\n\nexport default withTranslation()(ShiftEditMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ShiftEditMenu from './ShiftEditMenu'\n\n\nfunction ShiftEditBaseBase({t, match, children, subTitle=\"\", cardTitle=\"\", defaultCard=true, menuActiveLink=\"\", pageHeaderButtonList=\"\"}) {\n  const shiftId = match.params.shift_id\n  \n  return (\n    <SiteWrapper>\n      <Container>\n        <Page.Header \n          title={t(\"schedule.title\")} \n          subTitle={subTitle}\n        >\n          <div className=\"page-options d-flex\">\n            {pageHeaderButtonList}\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            {(!defaultCard) ? children :\n              <Card title={cardTitle}>\n                {children}\n              </Card>\n            }\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <ShiftEditMenu activeLink={menuActiveLink} shiftId={shiftId}/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShiftEditBaseBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_SHIFT_QUERY } from \"../queries\"\n\nimport ShiftEditBaseBase from './ShiftEditBaseBase'\nimport { shift_edit_all_subtitle } from \"./tools\"\n\n\nfunction ShiftEditBase({t, match, children, menuActiveLink=\"\", defaultCard=true, pageHeaderButtonList=\"\", cardTitle=\"\"}) {\n  const shiftId = match.params.shift_id\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, { variables: {\n    id: shiftId\n  }})\n\n  if (!cardTitle) {\n    cardTitle = t('schedule.shifts.title_edit')\n  }\n\n  if (loading) return (\n    <ShiftEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ShiftEditBaseBase>\n  )\n\n  if (error) return (\n    <ShiftEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      {console.log(error)}\n      <p>{t('general.error_sad_smiley')}</p>\n    </ShiftEditBaseBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const subTitle = shift_edit_all_subtitle({\n    t: t,\n    location: initialValues.organizationLocationRoom.organizationLocation.name,\n    locationRoom: initialValues.organizationLocationRoom.name,\n    shift: initialValues.organizationShift.name,\n    starttime: initialTimeStart\n  })\n\n  return (\n    <ShiftEditBaseBase \n      subTitle={subTitle}\n      cardTitle={cardTitle}\n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={defaultCard}\n      menuActiveLink={menuActiveLink}\n    >\n      {children}\n    </ShiftEditBaseBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(ShiftEditBase))","import moment from 'moment'\n\nexport function shift_edit_all_subtitle({t, location, locationRoom, shift, starttime}) {\n  return t('general.shift') + ': ' + location + ' (' + locationRoom + ') - ' + shift + ' @ ' + moment(starttime).format('LT')\n}\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_SHIFT_QUERY } from '../../queries'\nimport { UPDATE_SHIFT } from './queries'\n\nimport { get_list_query_variables } from '../../tools'\nimport { SHIFT_SCHEMA } from '../../yupSchema'\nimport ScheduleShiftForm from '../../ScheduleShiftForm'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ShiftEditBack from \"../ShiftEditBack\"\nimport ShiftEditBase from '../ShiftEditBase'\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleShiftEditAll({t, match}) {\n  const id = match.params.shift_id\n  const menuActiveLink = \"edit\"\n  const returnUrl = \"/schedule/shifts\"\n  const cardTitle = t('schedule.shifts.title_edit')\n  const pageHeaderButtonList = <ShiftEditBack />\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleShift ] = useMutation(UPDATE_SHIFT)\n\n  if (loading) return (\n    <ShiftEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialValues.dateStart) {\n    dateStart = new Date(initialValues.dateStart)\n  }\n  if (initialValues.dateEnd) {\n    dateEnd = new Date(initialValues.dateEnd)\n  }\n\n\n  return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink}\n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            frequencyType: initialValues.frequencyType,\n            frequencyInterval: initialValues.frequencyInterval,\n            organizationLocationRoom: initialValues.organizationLocationRoom.id,\n            organizationShift: initialValues.organizationShift.id,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n            timeStart: initialTimeStart,\n            timeEnd: initialTimeEnd,\n          }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }  \n\n              updateScheduleShift({ variables: {\n                input: {\n                  id: id,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.shifts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n            <ScheduleShiftForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              touched={touched}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>      \n      </Card>\n    </ShiftEditBase>   \n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftEditAll))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY = gql`\n  query ScheduleShiftWeeklyOTCs($scheduleItem: ID!, $date: Date!) {\n    scheduleItemWeeklyOtcs(first:1, scheduleItem: $scheduleItem, date:$date) {\n      edges {\n        node {\n          id \n          date\n          status\n          description\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          organizationLocationRoom {\n            id\n            name\n          }\n          organizationShift {\n            id\n            name\n          }\n          timeStart\n          timeEnd\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n    accounts(first: 100, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_ITEM_WEEKLY_OTC = gql`\n  mutation DeleteScheduleItemWeeklyOTC($input: DeleteScheduleItemWeeklyOTCInput!) {\n    deleteScheduleItemWeeklyOtc(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_WEEKLY_OTC = gql`\n  mutation UpdateScheduleItemWeeklyOTC($input: UpdateScheduleItemWeeklyOTCInput!) {\n    updateScheduleItemWeeklyOtc(input:$input) {\n      scheduleItemWeeklyOtc {\n        id\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSTimePicker from \"../../../../ui/CSTimePicker\"\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\n\nconst ScheduleShiftEditForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                      name=\"status\" \n                      className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('general.cancelled')}</option>\n                <option value=\"OPEN\" key={v4()}>{t('schedule.classes.no_instructor')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.shift')}>\n              <Field component=\"select\" \n                    name=\"organizationShift\" \n                    className={(errors.organizationShift) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationShifts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationShift\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleShiftEditForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nconst ScheduleShiftBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={\"/schedule/shifts\"} />\n)\n\nexport default withTranslation()(withRouter(ScheduleShiftBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ScheduleShiftBack from \"./ScheduleShiftBack\"\n\n\nfunction ScheduleShiftEditBase({ t, match, history, children, pageHeaderButtonList=\"\", subTitle=\"\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleShiftBack />\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_SHIFTS_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { DELETE_SCHEDULE_ITEM_WEEKLY_OTC, GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleItemWeeklyOTCDelete({t, match, history}) {\n  const scheduleItemId = match.params.shift_id\n  const shiftDate = match.params.date\n  const [deleteScheduleShiftOTC] = useMutation(DELETE_SCHEDULE_ITEM_WEEKLY_OTC, {\n    onCompleted: () => { history.push(\"/schedule/shifts/\") }\n  })\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: shiftDate\n  }\n\n  return (\n    <button className=\"icon btn-block btn btn-danger ml-2\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.shifts.shift.edit.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.shifts.shift.edit.delete_success'),\n          deleteFunction: deleteScheduleShiftOTC,\n          functionVariables: { \n            variables: {\n              input: {\n                scheduleItem: scheduleItemId,\n                date: shiftDate\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, variables: query_vars },\n              { query: GET_SHIFTS_QUERY, variables: get_list_query_variables() },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-white\"><Icon prefix=\"fe\" name=\"trash-2\" /> {\" \"} {t(\"schedule.shifts.shift.edit.delete_all_changes\")}</span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleItemWeeklyOTCDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, UPDATE_SCHEDULE_ITEM_WEEKLY_OTC } from './queries'\nimport { GET_SHIFTS_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\n// import { SCHEDULE_CLASS_EDIT_OTC_SCHEMA } from './yupSchema'\nimport ScheduleShiftEditForm from './ScheduleShiftEditForm'\nimport { TimeStringToJSDateOBJ, dateToLocalISOTime } from '../../../../../tools/date_tools'\n\nimport { shiftSubtitle } from \"../tools\"\n\nimport ScheduleShiftEditBase from \"../ScheduleShiftEditBase\"\nimport ScheduleShiftWeeklyOTCDelete from './ScheduleShiftWeeklyOTCDelete'\n\n\nfunction ScheduleShiftEdit({ t, match, history }) {\n  let showDelete = false\n  const scheduleItemId = match.params.shift_id\n  const shiftDate = match.params.date\n  const returnUrl = \"/schedule/shifts\"\n\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: shiftDate\n  }\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, {\n    variables: query_vars,\n  })\n  const [ updateScheduleITEMWeeklyOTC ] = useMutation(UPDATE_SCHEDULE_ITEM_WEEKLY_OTC)\n\n  if (queryLoading) return (\n    <ScheduleShiftEditBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </ScheduleShiftEditBase>\n  )\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return (\n      <ScheduleShiftEditBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleShiftEditBase>\n    )\n  }\n\n  console.log('queryData')\n  console.log(queryData)\n\n  const scheduleItem = queryData.scheduleItem\n  const subtitle = shiftSubtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    shift: scheduleItem.organizationShift.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: shiftDate\n  })\n  \n  let initialData\n  var initialValues = {}\n  if (queryData.scheduleItemWeeklyOtcs.edges.length) {\n    showDelete = true\n\n    initialData = queryData.scheduleItemWeeklyOtcs.edges[0].node\n\n    initialValues.status = initialData.status\n    initialValues.description = initialData.description\n    if (initialData.account) {\n      initialValues.account = initialData.account.id\n    }\n    if (initialData.account2) {\n      initialValues.account2 = initialData.account2.id\n    }\n    if (initialData.organizationLocationRoom) {\n      initialValues.organizationLocationRoom = initialData.organizationLocationRoom.id\n    }\n    if (initialData.organizationShift) {\n      initialValues.organizationShift = initialData.organizationShift.id\n    }\n    if (initialData.timeStart) {\n      initialValues.timeStart = TimeStringToJSDateOBJ(initialData.timeStart)\n    }\n    if (initialData.timeEnd) {\n      initialValues.timeEnd = TimeStringToJSDateOBJ(initialData.timeEnd)\n    }\n    \n  } else {\n    console.log('setting initial values')\n    initialValues.status = \"\"\n    initialValues.description = \"\"\n    initialValues.account = \"\"\n    initialValues.account2 = \"\"\n    initialValues.organizationLocationRoom = \"\"\n    initialValues.organizationShift = \"\"\n    initialValues.timeStart = \"\"\n    initialValues.timeEnd = \"\"\n  }\n\n\n  return (\n    <ScheduleShiftEditBase subTitle={subtitle} pageHeaderButtonList={(showDelete) ? <ScheduleShiftWeeklyOTCDelete/> : \"\"}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('general.edit')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={initialValues}\n          // validationSchema={SCHEDULE_CLASS_EDIT_OTC_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              console.log(\"SUBMIT VALUES\")\n              console.log(values)\n\n              let timeStart = undefined\n              let timeEnd = undefined\n              if (values.timeStart) {\n                timeStart = dateToLocalISOTime(values.timeStart)\n              }\n              \n              if (values.timeEnd) {\n                timeEnd = dateToLocalISOTime(values.timeEnd)  \n              }\n              \n\n              updateScheduleITEMWeeklyOTC({ variables: {\n                input: {\n                  scheduleItem: scheduleItemId,\n                  date: shiftDate,\n                  status: values.status,\n                  description: values.description,\n                  account: values.account,\n                  account2: values.account2,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  timeStart: timeStart,\n                  timeEnd: timeEnd,\n                }\n              }, refetchQueries: [\n                  {query: GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, variables: query_vars},\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()},\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('schedule.shifts.shift.edit.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                console.log('there was an error sending the query', error.graphQLErrors)\n                setSubmitting(false)\n              })\n            }\n          }\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <ScheduleShiftEditForm\n              inputData={queryData}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </ScheduleShiftEditForm>\n          )}\n        </Formik>\n      </Card>\n    </ScheduleShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEdit))","import moment from 'moment'\n\nexport function shiftSubtitle({t, location, locationRoom, shift, timeStart, date}) {\n  return t('general.shift') + ': ' + \n         location + ' (' + locationRoom + ') - ' + \n         shift + ' @ ' + \n         moment(date).format('LL') + ' ' + moment(timeStart).format('LT')\n}\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccounts($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemAccounts(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          account2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n    scheduleItemAccount(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      account2 {\n        id\n        fullName\n      }\n      dateStart\n      dateEnd       \n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, employee: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    accounts(first: 1000, before: $before, after: $after, isActive: true, employee: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation CreateScheduleItemAccount($input:CreateScheduleItemAccountInput!) {\n  createScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const UPDATE_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation UpdateScheduleItemAccount($input: UpdateScheduleItemAccountInput!) {\n  updateScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation DeleteScheduleClassInstructor($input: DeleteScheduleItemAccountInput!) {\n  deleteScheduleItemAccount(input: $input) {\n    ok\n  }\n}\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table,\n  Card,\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ShiftEditBack from \"../ShiftEditBack\"\nimport ShiftEditBase from \"../ShiftEditBase\"\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, DELETE_SCHEDULE_SHIFT_ACCOUNT } from \"./queries\"\n\n\nfunction ScheduleShiftEmployees({ t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const shiftId = match.params.shift_id\n  const menuActiveLink = \"employees\"\n  const cardTitle = t('schedule.shifts.employees.title')\n  const ButtonAdd = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemaccount\">\n    <Link to={`/schedule/shifts/all/employees/${shiftId}/add` } >\n      <Button color=\"primary ml-2\">\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n      </Button>\n    </Link>\n  </HasPermissionWrapper>\n  const pageHeaderButtonList = <Button.List>\n    <ShiftEditBack />\n    {ButtonAdd}\n  </Button.List>\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, {\n    variables: {scheduleItem: shiftId}\n  })\n  const [ deleteScheduleItemAccount ] = useMutation(DELETE_SCHEDULE_SHIFT_ACCOUNT)\n\n\n\n  // Loading\n  if (loading) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ShiftEditBase>\n  )\n  // Error\n  if (error) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.shifts.employees.error_loading')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemAccounts.edges.length) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.shifts.employees.empty_list')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  return (\n    <ShiftEditBase \n    menuActiveLink={menuActiveLink} \n    defaultCard={false}\n    pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.scheduleItemAccounts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemAccounts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAccounts.edges\n            const pageInfo = fetchMoreResult.scheduleItemAccounts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemAccounts: {\n                      __typename: previousResult.scheduleItemAccounts.__typename,\n                      edges: [ ...previousResult.scheduleItemAccounts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.employee')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.employee2')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}> \n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account.fullName}\n                  </Table.Col>\n                  <Table.Col>\n                    { node.account2 ? node.account2.fullName : \"\" }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/schedule/shifts/all/employees/${shiftId}/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\"\n                      >\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t('schedule.shifts.employees.delete_confirm_msg'),\n                            msgDescription: <List>\n                                <List.Item>{t(\"general.start\")}: {moment(node.dateStart).format(dateFormat)}</List.Item>\n                                <List.Item>{node.account.fullName} </List.Item>\n                               {(node.account2) ? <List.Item>{node.account2.fullName}</List.Item> : \"\"}\n                              </List>,\n                            msgSuccess: t('schedule.shifts.employees.deleted'),\n                            deleteFunction: deleteScheduleItemAccount,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }}\n                            ]}\n                        })}}\n                    >\n                      <span className=\"text-red\">\n                        <Icon prefix=\"fe\" name=\"trash-2\" />\n                      </span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </div>\n      </ContentCard>      \n    </ShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployees))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_SHIFT_EMPLOYEE_SCHEMA = Yup.object().shape({\n  account: Yup.string()\n    .required(t('yup.field_required')),\n  account2: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleShiftEmployeeForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.employee')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule shift employee add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.employee2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleShiftEmployeeBack = ({ t, shiftId }) => (\n  <ButtonBack returnUrl={\"/schedule/shifts/all/employees/\" + shiftId} />\n)\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeBack))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_SHIFT_ACCOUNT } from './queries'\nimport { SCHEDULE_SHIFT_EMPLOYEE_SCHEMA } from './yupSchema'\nimport ScheduleShiftEmployeeForm from './ScheduleShiftEmployeeForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ShiftEditBase from \"../ShiftEditBase\"\nimport ScheduleShiftEmployeeBack from \"./ScheduleShiftEmployeeBack\"\n\n\nfunction ScheduleShiftEmployeeAdd({ t, history, match }) {\n  const shiftId = match.params.shift_id\n  const returnUrl = `/schedule/shifts/all/employees/${shiftId}`\n  const cardTitle = t('schedule.shifts.employees.title_add')\n  const menuActiveLink = \"employees\" \n  const pageHeaderButtonList = <ScheduleShiftEmployeeBack shiftId={shiftId} />\n\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleShiftAccount] = useMutation(ADD_SCHEDULE_SHIFT_ACCOUNT)\n\n  if (loading) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          account: \"\",\n          account2: \"\",\n        }}\n        validationSchema={SCHEDULE_SHIFT_EMPLOYEE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleShiftAccount({ variables: {\n              input: {\n                scheduleItem: shiftId,\n                account: values.account,\n                account2: values.account2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.shifts.employees.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleShiftEmployeeForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ShiftEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY, UPDATE_SCHEDULE_SHIFT_ACCOUNT } from './queries'\nimport { SCHEDULE_SHIFT_EMPLOYEE_SCHEMA } from './yupSchema'\nimport ScheduleShiftEmployeeForm from './ScheduleShiftEmployeeForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ShiftEditBase from \"../ShiftEditBase\"\nimport ScheduleShiftEmployeeBack from \"./ScheduleShiftEmployeeBack\"\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleShiftEmployeeEdit({ t, match, history }) {\n  const id = match.params.id\n  const shiftId = match.params.shift_id\n  const returnUrl = `/schedule/shifts/all/employees/${shiftId}`\n  const cardTitle = t('schedule.shifts.employees.title_edit')\n  const menuActiveLink = \"employees\"\n  const pageHeaderButtonList = <ScheduleShiftEmployeeBack shiftId={shiftId} />\n\n  const {loading, error, data} = useQuery(GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleShiftAccount] = useMutation(UPDATE_SCHEDULE_SHIFT_ACCOUNT)\n\n  if (loading) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialData = data.scheduleItemAccount\n\n  let initialAccount2 = \"\"\n  if (initialData.account2) {\n    initialAccount2 =  initialData.account2.id\n  } \n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  \n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <ShiftEditBase \n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          account: initialData.account.id,\n          account2: initialAccount2,\n        }}\n        validationSchema={SCHEDULE_SHIFT_EMPLOYEE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleShiftAccount({ variables: {\n              input: {\n                id: match.params.id,\n                account: values.account,\n                account2: values.account2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.shifts.employees.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleShiftEmployeeForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleShiftEmployeeForm>\n        )}\n      </Formik>\n    </ShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeEdit))","import * as React from \"react\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\n\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\nimport GET_USER from \"../queries/system/get_user\"\n\nimport {\n  Site,\n  Grid,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\n// type subNavItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +LinkComponent?: React.ElementType,\n// |};\n\n// type navItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +active?: boolean,\n//   +LinkComponent?: React.ElementType,\n//   +subItems?: Array<subNavItem>,\n//   +useExact?: boolean,\n// |};\n\nconst now = new Date()\n\nfunction SiteWrapperSelfCheckin({t, match, history, children}) {\n  const { error, loading, data } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader />\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  console.log(data)\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n        href: \"/\",\n        alt: \"Costasiella\",\n        imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n        // navItems: (\n        //   <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n        //     <Link to=\"/settings/general\">\n        //       <Button\n        //         icon=\"settings\"\n        //         outline\n        //         size=\"sm\"\n        //         color=\"primary\"\n        //       >\n        //         {this.props.t('general.settings')}\n        //       </Button>\n        //     </Link>\n        //   </Nav.Item>\n        // ),\n        // notificationsTray: {\n        //   notificationsObjects,\n        //   markAllAsRead: () =>\n        //     this.setState(\n        //       () => ({\n        //         notificationsObjects: this.state.notificationsObjects.map(\n        //           v => ({ ...v, unread: false })\n        //         ),\n        //       }),\n        //       () =>\n        //         setTimeout(\n        //           () =>\n        //             this.setState({\n        //               notificationsObjects: this.state.notificationsObjects.map(\n        //                 v => ({ ...v, unread: true })\n        //               ),\n        //             }),\n        //           5000\n        //         )\n        //     ),\n        //   unread: unreadCount,\n        // },\n        accountDropdown: {\n        avatarURL: \"#\",\n        name: data.user.firstName + ' ' + data.user.lastName,\n        description: \"\",\n        options: [\n          // { icon: \"user\", value: \"Profile\" },\n          { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n          { isDivider: true },\n          { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n        ],\n      },\n      }}\n      // navProps={{ itemsObjects: navBarItems }}\n      // navProps={{ itemsObjects: getNavBarItems(this.props.t, data.user) }}\n      routerContextComponentType={withRouter(RouterContextProvider)}\n      footerProps={{\n        // links: [\n        //   <a href=\"#\">First Link</a>,\n        //   <a href=\"#\">Second Link</a>,\n        //   <a href=\"#\">Third Link</a>,\n        //   <a href=\"#\">Fourth Link</a>,\n        //   <a href=\"#\">Five Link</a>,\n        //   <a href=\"#\">Sixth Link</a>,\n        //   <a href=\"#\">Seventh Link</a>,\n        //   <a href=\"#\">Eigth Link</a>,\n        // ],\n        // note:\n        //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n        copyright: (\n          <React.Fragment>\n            <small>\n              Peacefully powered by\n              <a\n                href=\"https://www.costasiella.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {\" \"}\n                Costasiella\n              </a>{\". \"}\n              All rights reserved © {now.getFullYear()}.\n            </small>\n          </React.Fragment>\n        ),\n        nav: (\n          <React.Fragment>\n            <Grid.Col auto={true}>\n              {/* <List className=\"list-inline list-inline-dots mb-0\">\n                <List.Item className=\"list-inline-item\">\n                  <a href=\"./docs/index.html\">Documentation</a>\n                </List.Item>\n                <List.Item className=\"list-inline-item\">\n                  <a href=\"./faq.html\">FAQ</a>\n                </List.Item>\n              </List> */}\n            </Grid.Col>\n            <Grid.Col auto={true}>\n              {/* <Button\n                href=\"https://github.com/tabler/tabler-react\"\n                size=\"sm\"\n                outline\n                color=\"primary\"\n                RootComponent=\"a\"\n              >\n                Source code\n              </Button> */}\n            </Grid.Col>\n          </React.Fragment>\n        ),\n      }}\n    >\n      {children}\n      <ToastContainer \n        autoClose={5000} \n        transition={Slide}\n      />\n    </Site.Wrapper> \n  )\n}\n\n\n// class SiteWrapperSelfCheckin extends React.Component<Props, State> {\n//   state = {}  \n\n//   render(): React.Node {\n//     return (\n//       <Query query={GET_USER} >\n//         {({ loading, error, data }) => {\n//           if (loading) return <p>{this.props.t('general.loading_with_dots')}</p>;\n//           if (error) return <p>{this.props.t('system.user.error_loading')}</p>; \n          \n//           console.log('user data in site wrapper')\n//           console.log(data)\n      \n//           return <Site.Wrapper\n//             headerProps={{\n//                 href: \"/\",\n//                 alt: \"Costasiella\",\n//                 imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n//                 // navItems: (\n//                 //   <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n//                 //     <Link to=\"/settings/general\">\n//                 //       <Button\n//                 //         icon=\"settings\"\n//                 //         outline\n//                 //         size=\"sm\"\n//                 //         color=\"primary\"\n//                 //       >\n//                 //         {this.props.t('general.settings')}\n//                 //       </Button>\n//                 //     </Link>\n//                 //   </Nav.Item>\n//                 // ),\n//                 // notificationsTray: {\n//                 //   notificationsObjects,\n//                 //   markAllAsRead: () =>\n//                 //     this.setState(\n//                 //       () => ({\n//                 //         notificationsObjects: this.state.notificationsObjects.map(\n//                 //           v => ({ ...v, unread: false })\n//                 //         ),\n//                 //       }),\n//                 //       () =>\n//                 //         setTimeout(\n//                 //           () =>\n//                 //             this.setState({\n//                 //               notificationsObjects: this.state.notificationsObjects.map(\n//                 //                 v => ({ ...v, unread: true })\n//                 //               ),\n//                 //             }),\n//                 //           5000\n//                 //         )\n//                 //     ),\n//                 //   unread: unreadCount,\n//                 // },\n//                 accountDropdown: {\n//                 avatarURL: \"#\",\n//                 name: data.user.firstName + ' ' + data.user.lastName,\n//                 description: \"\",\n//                 options: [\n//                   // { icon: \"user\", value: \"Profile\" },\n//                   { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n//                   { isDivider: true },\n//                   { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n//                 ],\n//               },\n//               }}\n//               // navProps={{ itemsObjects: navBarItems }}\n//               // navProps={{ itemsObjects: getNavBarItems(this.props.t, data.user) }}\n//               routerContextComponentType={withRouter(RouterContextProvider)}\n//               footerProps={{\n//                 // links: [\n//                 //   <a href=\"#\">First Link</a>,\n//                 //   <a href=\"#\">Second Link</a>,\n//                 //   <a href=\"#\">Third Link</a>,\n//                 //   <a href=\"#\">Fourth Link</a>,\n//                 //   <a href=\"#\">Five Link</a>,\n//                 //   <a href=\"#\">Sixth Link</a>,\n//                 //   <a href=\"#\">Seventh Link</a>,\n//                 //   <a href=\"#\">Eigth Link</a>,\n//                 // ],\n//                 // note:\n//                 //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n//                 copyright: (\n//                   <React.Fragment>\n//                     Copyleft © {now.getFullYear()}.\n//                     <a\n//                       href=\"https://www.costasiella.com\"\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                     >\n//                       {\" \"}\n//                       Edwin van de Ven\n//                     </a>{\". \"}\n//                     All rights reserved.\n//                   </React.Fragment>\n//                 ),\n//                 nav: (\n//                   <React.Fragment>\n//                     <Grid.Col auto={true}>\n//                       {/* <List className=\"list-inline list-inline-dots mb-0\">\n//                         <List.Item className=\"list-inline-item\">\n//                           <a href=\"./docs/index.html\">Documentation</a>\n//                         </List.Item>\n//                         <List.Item className=\"list-inline-item\">\n//                           <a href=\"./faq.html\">FAQ</a>\n//                         </List.Item>\n//                       </List> */}\n//                     </Grid.Col>\n//                     <Grid.Col auto={true}>\n//                       {/* <Button\n//                         href=\"https://github.com/tabler/tabler-react\"\n//                         size=\"sm\"\n//                         outline\n//                         color=\"primary\"\n//                         RootComponent=\"a\"\n//                       >\n//                         Source code\n//                       </Button> */}\n//                     </Grid.Col>\n//                   </React.Fragment>\n//                 ),\n//               }}\n//             >\n//               {this.props.children}\n//               <ToastContainer \n//                 autoClose={5000} \n//                 transition={Slide}\n//               />\n//             </Site.Wrapper>\n//           }}\n//         </Query>\n//     );\n//   }\n// }\n\nexport default withTranslation()(SiteWrapperSelfCheckin)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapperSelfCheckin from \"../SiteWrapperSelfCheckin\"\n\n\nfunction SelfCheckinBase({ t, match, history, children, title, subTitle=\"\" }) {\n\n  return (\n    <SiteWrapperSelfCheckin>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={title} subTitle={subTitle} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                { children }\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapperSelfCheckin>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query Accounts(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $instructor: Boolean,\n    $employee: Boolean\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true,\n      instructor: $instructor,\n      employee: $employee\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_CLASS_ATTENDANCE_QUERY = gql`\n  query ScheduleItemAttendances($after: String, $before: String, $scheduleItem: ID!, $date: Date!) {\n    scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem: $scheduleItem, date: $date) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }     \n          attendanceType\n          bookingStatus\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_ATTENDANCE = gql`\n  mutation DeleteScheduleItemAttendance($input: DeleteScheduleItemAttendanceInput!) {\n    deleteScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation UpdateScheduleItemAttendance($input: UpdateScheduleItemAttendanceInput!) {\n    updateScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`\n","import CSLS from \"../../../tools/cs_local_storage\"\nimport moment from 'moment'\n\nexport function get_accounts_query_variables() {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  let search = localStorage.getItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH)\n  queryVars.searchName = search\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\nexport function get_attendance_list_query_variables(schedule_item_id, date) {\n  return {\n    scheduleItem: schedule_item_id,\n    date: date\n  }\n}\n\nexport function getSubtitle(classDate, scheduleItem, dateTimeFormat) {\n  return <span>\n    {scheduleItem.organizationLocationRoom.organizationLocation.name} { \" - \" }\n    {moment(classDate + \" \" +  scheduleItem.timeStart).format(dateTimeFormat)} { \" \" } \n    {scheduleItem.organizationClasstype.name} { \" \" }\n  </span> \n}\n","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport {\n  Button,\n  Card,\n  Dropdown,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { GET_ACCOUNTS_QUERY, GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { get_attendance_list_query_variables, get_accounts_query_variables, getSubtitle } from \"./tools\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport BadgeBookingStatus from \"../../ui/BadgeBookingStatus\"\nimport ContentCard from \"../../general/ContentCard\"\nimport InputSearch from \"../../general/InputSearch\"\n\n\nfunction setAttendanceStatus({t, updateAttendance, node, status}) {\n  updateAttendance({\n    variables: { \n      input: {\n        id: node.id, \n        bookingStatus: status\n      }\n    }\n  }).then(({ data }) => {\n    console.log('got data', data);\n    toast.success(\n      t('schedule.classes.class.attendance.status_saved'), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n  }).catch((error) => {\n    toast.error((t('general.toast_server_error')) +  error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    console.log('there was an error sending the query', error);\n  })\n}\n\n\nfunction SelfCheckinCheckin({ t, match, history }) {\n  const [showSearch, setShowSearch] = useState(false)\n  const locationId = match.params.location_id\n  const scheduleItemId = match.params.class_id\n  const class_date = match.params.date\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + \" \" + timeFormat\n\n  const { \n    refetch: refetchAttendance, \n    loading: queryAttendanceLoading, \n    error: queryAttendanceError, \n    data: queryAttendanceData \n  } = useQuery(\n    GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, {\n      variables: get_attendance_list_query_variables(scheduleItemId, class_date)\n    }\n  )\n\n  const [ updateAttendance ] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  const [ getAccounts, \n    { fetchMore: fetchMoreAccounts,\n      loading: queryAccountsLoading, \n      error: queryAccountsError, \n      data: queryAccountsData \n    }] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  console.log('queryAccountsData')\n  console.log(queryAccountsData)\n\n  if (queryAttendanceLoading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (queryAttendanceError) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.checkin.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n  console.log(queryAttendanceData)\n  let checkedInIds = []\n  queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n    checkedInIds.push(node.account.id)\n  ))\n  console.log(checkedInIds)\n  const scheduleItem = queryAttendanceData.scheduleItem\n\n  const subTitle = getSubtitle(\n    class_date,\n    scheduleItem,\n    dateTimeFormat\n  )\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <ContentCard cardTitle={t('general.attendance')}\n                   hasCardBody={false}\n                    pageInfo={queryAttendanceData.scheduleItemAttendances.pageInfo}\n                    onLoadMore={() => {\n                      fetchMoreAccounts({\n                      variables: {\n                        after: queryAttendanceData.scheduleItemAttendances.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n                        const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryAttendanceData: {\n                                scheduleItemAttendances: {\n                                  __typename: previousResult.scheduleItemAttendances.__typename,\n                                  edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n        }} >\n        { (!queryAttendanceData.scheduleItemAttendances.edges.length) ? \n            <Card.Body>{t('schedule.classes.class.attendance.empty_list')}</Card.Body> : \n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.account.fullName}\n                    </Table.Col>\n                    <Table.Col>\n                      <BadgeBookingStatus status={node.bookingStatus} />\n                    </Table.Col>\n                    <Table.Col>\n                      {/* Delete */}\n                      {/* <ScheduleClassAttendanceDelete node={node} /> */}\n                      {/* Status dropdown */}\n                      <Dropdown\n                        key={v4()}\n                        className=\"pull-right\"\n                        type=\"button\"\n                        toggle\n                        color=\"secondary\"\n                        triggerContent={t(\"general.status\")}\n                        items={[\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"check\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'ATTENDING'\n                                })\n                                refetchAttendance()\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.ATTENDING')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"calendar\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'BOOKED'\n                                })\n                                refetchAttendance()\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.BOOKED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"x\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'CANCELLED'\n                                })\n                                refetchAttendance()\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.CANCELLED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                        ]}\n                      />\n                      {(node.bookingStatus === \"BOOKED\") ?\n                        <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                          <Button\n                            key={v4()}\n                            className=\"pull-right\"\n                            color=\"success\"\n                            size=\"\"\n                            onClick={() => {\n                              setAttendanceStatus({\n                                t: t, \n                                updateAttendance: updateAttendance,\n                                node: node,\n                                status: 'ATTENDING'\n                              })\n                              refetchAttendance()\n                            }}>\n                              {t('general.checkin')}\n                          </Button>\n                        </HasPermissionWrapper>  : \"\" }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n      }\n      </ContentCard>\n      <h3>{t(\"selfcheckin.checkin.title_not_on_list\")}</h3>\n      <InputSearch \n        initialValueKey={CSLS.SELFCHECKIN_CHECKIN_SEARCH}\n        placeholder={t(\"search\")}\n        onChange={(value) => {\n          console.log(value)\n          localStorage.setItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH, value)\n          if (value) {\n            // {console.log('showSearch')}\n            // {console.log(showSearch)}\n            setShowSearch(true)\n            getAccounts({ variables: get_accounts_query_variables()})\n          } else {\n            setShowSearch(false)\n          }\n        }}\n      /> <br />\n      {/* Search results */}\n      {(showSearch && (queryAccountsData) && (!queryAccountsLoading) && (!queryAccountsError)) ?\n        <ContentCard cardTitle={t('general.search_results')}\n                    pageInfo={queryAccountsData.accounts.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                      fetchMoreAccounts({\n                        variables: {\n                        after: queryAccountsData.accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new accounts at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryAccountsData: {\n                                accounts: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n          { (!queryAccountsData.accounts.edges.length) ? \n            <Card.Body>{t('schedule.classes.class.attendance.search_result_empty')}</Card.Body> : \n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {queryAccountsData.accounts.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.fullName}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.email}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {(checkedInIds.includes(node.id)) ? \n                        <span className=\"pull-right\">{t(\"schedule.classes.class.attendance.search_results_already_checked_in\")}</span> :\n                        <Link to={\"/selfcheckin/book/\" + locationId + \"/\" + scheduleItemId + \"/\" + class_date + \"/\" + node.id}>\n                          <Button color=\"secondary pull-right\">\n                            {t('general.checkin')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>       \n                      }   \n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n        : \"\"\n      }\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinCheckin))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($account: ID!, $scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClassBookingOptions(account: $account, scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      account {\n        id\n        fullName\n      }\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation CreateScheduleItemAttendance($input: CreateScheduleItemAttendanceInput!) {\n    createScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { getSubtitle } from \"../Checkin/tools\"\n\nimport ScheduleClassBookClasspasses from \"../../schedule/classes/class/book/ScheduleClassBookClasspasses\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ScheduleClassBookSubscriptions from \"../../schedule/classes/class/book/ScheduleClassBookSubscriptions\"\nimport ScheduleClassBookPriceDropin from \"../../schedule/classes/class/book/ScheduleClassBookPriceDropin\"\nimport ScheduleClassBookPriceTrial from \"../../schedule/classes/class/book/ScheduleClassBookPriceTrial\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction SelfCheckinBookingOptions({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + \" \" + timeFormat\n\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const locationId = match.params.location_id\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        account: account_id,\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"ATTEND\"\n      }\n    }\n  )\n\n  // Remove search in checkin component\n  localStorage.removeItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH)\n\n  // Query\n  // Loading\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryData)\n  const account = queryData.scheduleClassBookingOptions.account\n  const classpasses = queryData.scheduleClassBookingOptions.classpasses\n  const subscriptions = queryData.scheduleClassBookingOptions.subscriptions\n  const prices = queryData.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = queryData.scheduleClassBookingOptions.scheduleItem\n  console.log(prices)\n  \n  const subTitle = getSubtitle(\n    class_date,\n    scheduleItem,\n    dateTimeFormat\n  )\n  \n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <Grid.Row>\n          <Grid.Col md={12}>\n            <h4>{t('general.booking_options')} {account.fullName}</h4>\n            <div className=\"mt-6\">\n            <Grid.Row cards deck>\n              <ScheduleClassBookSubscriptions \n                subscriptions={subscriptions} \n                returnTo=\"selfcheckin\" \n                locationId={locationId}\n              />\n              <ScheduleClassBookClasspasses \n                classpasses={classpasses} \n                returnTo=\"selfcheckin\" \n                locationId={locationId}\n              />\n              {(prices) ?\n                (prices.organizationClasspassDropin) ? \n                  <ScheduleClassBookPriceDropin \n                    priceDropin={prices.organizationClasspassDropin}\n                    returnTo=\"selfcheckin\" \n                    locationId={locationId}\n                  /> : \"\" \n                : \"\" }\n              {(prices) ?\n                (prices.organizationClasspassTrial) ? \n                  <ScheduleClassBookPriceTrial \n                    priceTrial={prices.organizationClasspassTrial}\n                    returnTo=\"selfcheckin\" \n                    locationId={locationId}\n                  /> : \"\" \n                : \"\" }\n            </Grid.Row>\n            </div>\n          </Grid.Col>\n        </Grid.Row>\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinBookingOptions))\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_LOCATIONS_QUERY = gql`\n  query Organizationlocations($after: String, $before: String) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          rooms(first: 100, archived: false) {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport { GET_ORGANIZATION_LOCATIONS_QUERY } from \"./queries\"\n\n\nfunction Locations({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_LOCATIONS_QUERY);\n\n  if (loading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (error) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.locations.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.home.title\")}>\n      <h4>{t(\"selfcheckin.locations.please_select\")}</h4>\n        <List.Group>\n          {\n            data.organizationLocations.edges.map(({node}) =>\n              <List.GroupItem action>\n                <Link to={\"/selfcheckin/location/\" + node.id}>\n                  <div>\n                    <span className=\"pull-right\"><Icon name=\"chevron-right\" /></span>\n                    {node.name}\n                  </div>\n                </Link>\n              </List.GroupItem>\n          )}\n        </List.Group>\n\n          {/* //  List location rooms\n          // <div>\n          //   <h3>{node.name}</h3>\n          //   <List.Group>\n          //     {\n          //       node.organizationlocationroomSet.edges.map(({node}) =>\n          //         <List.GroupItem action>\n          //           <Link to={\"/selfcheckin/room/\" + node.id}>\n          //             <div>\n          //               <span className=\"pull-right\"><Icon name=\"chevron-right\" /></span>\n          //               {node.name}\n          //             </div>\n          //           </Link>\n          //         </List.GroupItem>\n          //       )\n          //     }\n          //   </List.Group>\n          //   <br />\n          // </div>\n        // ) */}\n      \n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(Locations))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATION_CLASSES_QUERY = gql`\n  query ScheduleClasses(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $organizationClasstype: ID,\n      $organizationLevel: ID,\n      $organizationLocation: ID!,\n      $attendanceCountType: String!\n    ){\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationClasstype: $organizationClasstype,\n        organizationLevel: $organizationLevel,\n        organizationLocation: $organizationLocation,\n        attendanceCountType: $attendanceCountType\n    ){\n      date\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n    organizationLocation(id: $organizationLocation) {\n      id\n      name\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { GET_LOCATION_CLASSES_QUERY } from \"./queries\"\n\n\nfunction LocationClasses({ t, match, history }) {\n  const locationId = match.params.location_id\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n  const today = moment().format('YYYY-MM-DD')\n\n  const { loading, error, data } = useQuery(GET_LOCATION_CLASSES_QUERY, {\n    variables: {\n      dateFrom: today,\n      dateUntil: today,\n      organizationLocation: locationId,\n      attendanceCountType: \"ATTENDING_AND_BOOKED\"\n    }\n  })\n\n  if (loading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (error) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.classes.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n  console.log(data)\n  const subTitle = data.organizationLocation.name\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <Card>\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>\n              { t(\"general.time\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.room\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.class\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.instructor\") }\n            </Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {\n            data.scheduleClasses.map(({ date, classes }) => \n              classes.map((\n                { scheduleItemId, \n                  frequencyType,\n                  date, \n                  status,\n                  description,\n                  account, \n                  role,\n                  account2,\n                  role2,\n                  organizationLocationRoom, \n                  organizationClasstype, \n                  organizationLevel,\n                  timeStart, \n                  timeEnd,\n                  displayPublic }) => (\n                    // console.log(scheduleItemId)\n                    <Table.Row>\n                      <Table.Col>\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)}\n                      </Table.Col>\n                      <Table.Col>\n                        { organizationLocationRoom.name }\n                      </Table.Col>\n                      <Table.Col>\n                        { organizationClasstype.name }\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Instructor(s) */}\n                        { (account) ? account.fullName : \n                          <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        <Link to={\"/selfcheckin/checkin/\" + locationId + \"/\" + scheduleItemId + \"/\" + date}>\n                          <Button color=\"secondary\" className=\"pull-right\">\n                            {t(\"selfcheckin.classes.go_to_checkin\")}\n                            <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                    </Table.Row>\n                  )\n                )\n            )\n          }\n        </Table.Body>\n      </Table>\n      </Card>\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(LocationClasses))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SYSTEM_SETTINGS_QUERY = gql`\n  query SystemSettings($setting: String!) {\n    systemSettings(setting: $setting) {\n      edges {\n        node {\n          id\n          setting\n          value\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SYSTEM_SETTING = gql`\n  mutation UpdateSystemSetting($input: UpdateSystemSettingInput!) {\n    updateSystemSetting(input: $input) {\n      systemSetting {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../ui/ButtonBack\"\n\n\nfunction SettingsBack({ t, returnUrl=\"/settings\" }) { \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(SettingsBack)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../SiteWrapper\"\nimport SettingsBack from \"./SettingsBack\"\n\n\nfunction SettingsBase({ t, children, headerSubTitle=\"\", cardTitle, alertBanner=\"\", returnUrl=\"/settings\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('settings.title')} subTitle={headerSubTitle}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {alertBanner}\n              <Card>\n                <Card.Header>\n                  <Card.Title>{cardTitle}</Card.Title>\n                </Card.Header>\n                {children}\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY } from '../queries'\nimport SettingsBase from \"../SettingsBase\"\n\n\nfunction SettingsAbout({ t, match, history }) {\n  const headerSubTitle = t('settings.about.title')\n  const cardTitle = t(\"settings.about.about.title\")\n\n  const { \n    loading: loadingVersion, \n    error: errorVersion, \n    data: dataVersion \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"system_version\"\n    }\n  })\n  const { \n    loading: loadingPatch, \n    error: errorPatch, \n    data: dataPatch \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"system_version_patch\"\n    }\n  })\n\n  if ((loadingVersion) || (loadingPatch)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle} >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorVersion) || errorPatch) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle} >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let version = 0\n  let patch = 0\n  if (dataVersion.systemSettings.edges.length){\n    version = dataVersion.systemSettings.edges[0].node.value\n  } \n  if (dataPatch.systemSettings.edges.length){\n    patch = dataPatch.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >\n      <Card.Body>\n        <h2>\n          {t(\"settings.about.about.this_is_costasiella\")} {`${version}.${patch}`}\n        </h2>\n        <h3>{t(\"general.license_info\")}</h3>\n        {t(\"settings.about.about.license_version\")} <br /><br />\n        <h3>{t(\"general.license\")}</h3>\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. <br /><br />\nThis program is distributed in the hope that it will be useful, but <b>WITHOUT ANY WARRANTY</b>; without even the implied warranty of <b>MERCHANTABILITY</b> or <b>FITNESS FOR A PARTICULAR PURPOSE</b>. See the GNU General Public License for more details. <br /><br />\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. <br />\n<br />\nGNU GENERAL PUBLIC LICENSE<br />\n<br />\nVersion 2, June 1991<br />\n<br />\nCopyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA<br />\n<br />\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. <br />\n<br />\nPreamble<br />\n<br />\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too.<br />\n<br />\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.<br /><br />\n<br />\nTo protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.<br />\n<br />\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.<br />\n<br />\nWe protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.<br />\n<br />\nAlso, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.<br />\n<br />\nFinally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.<br />\n<br />\nThe precise terms and conditions for copying, distribution and modification follow.<br />\n<br />\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION<br />\n<br />\n0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\".<br />\n<br />\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.<br />\n<br />\n1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.<br />\n<br />\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.<br />\n<br />\n2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:<br />\n<br />\na) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.<br />\n<br />\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.<br />\n<br />\nIn addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.<br />\n<br />\n3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:<br />\n<br />\na) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.<br />\n<br />\nIf distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.<br />\n<br />\n4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.<br />\n<br />\n5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.<br />\n<br />\n6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.<br />\n<br />\n7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.<br />\n<br />\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.<br />\n<br />\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.<br />\n<br />\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.<br />\n<br />\n8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.<br />\n<br />\n9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.<br />\n<br />\nEach version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.<br />\n<br />\n10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.<br />\n<br />\nNO WARRANTY<br />\n<br />\n11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br />\n<br />\n12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.<br />\n<br />\nEND OF TERMS AND CONDITIONS<br />\n<br />\nHow to Apply These Terms to Your New Programs<br />\n<br />\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.<br />\n<br />\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.<br />\n<br />\none line to give the program's name and an idea of what it does. Copyright (C) yyyy name of author<br />\n<br />\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.<br />\n<br />\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.<br />\n<br />\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. Also add information on how to contact you by electronic and paper mail.<br />\n<br />\nIf the program is interactive, make it output a short notice like this when it starts in an interactive mode:<br />\n<br />\nGnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program.<br />\n<br />\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names:<br />\n<br />\nYoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.<br />\n<br />\nsignature of Ty Coon, 1 April 1989 Ty Coon, President of Vice\n      </Card.Body>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsAbout))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsFinanceBankAccountsForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"finance_bank_accounts_iban\" \n                checked={values.finance_bank_accounts_iban}\n              />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('settings.finance.bank_accounts.iban')}</span>\n            </Form.Label>\n          <ErrorMessage name=\"finance_bank_accounts_iban\" component=\"div\" />   \n        </Form.Group>  \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsFinanceBankAccountsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsFinanceBankAccountsForm from \"./SettingsFinanceBankAccountsForm\"\n\n\nfunction SettingsFinanceIBAN({ t, match, history }) {\n  const headerSubTitle = t('settings.finance.title')\n  const cardTitle = t(\"settings.finance.bank_accounts.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_bank_accounts_iban\"\n    },\n    // fetchPolicy: \"network-only\"\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >\n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    iban: false\n  }\n  if (data.systemSettings.edges.length){\n    initialValues['iban'] = (data.systemSettings.edges[0].node.value.toLowerCase() === 'true')\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        finance_bank_accounts_iban: initialValues['iban'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"finance_bank_accounts_iban\", value: values.finance_bank_accounts_iban },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value.toString(),\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsFinanceBankAccountsForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsFinanceBankAccountsForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsFinanceIBAN))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsFinanceCurrencyForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.finance.currency')}>\n            <Field type=\"text\" \n              name=\"finance_currency\" \n              className={(errors.finance_currency) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"finance_currency\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.finance.currency_symbol')}>\n            <Field type=\"text\" \n              name=\"finance_currency_symbol\" \n              className={(errors.finance_currency_symbol) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"finance_currency_symbol\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsFinanceCurrencyForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsFinanceCurrencyForm from \"./SettingsFinanceCurrencyForm\"\n\n\nfunction SettingsFinanceCurrency({ t, match, history }) {\n  const headerSubTitle = t('settings.finance.title')\n  const cardTitle = t(\"settings.finance.currency.title\")\n  const sidebarActive = \"integration\"\n\n  const { \n    loading: loadingCurrency, \n    error: errorCurrency, \n    data: dataCurrency \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_currency\"\n    }\n  })\n  const { \n    loading: loadingSymbol, \n    error: errorSymbol, \n    data: dataSymbol \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_currency_symbol\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingCurrency) || (loadingSymbol)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorCurrency) || errorSymbol) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    currency: \"EUR\",\n    symbol: \"€\"\n  }\n  if (dataCurrency.systemSettings.edges.length){\n    initialValues['currency'] = dataCurrency.systemSettings.edges[0].node.value\n  } \n  if (dataSymbol.systemSettings.edges.length){\n    initialValues['symbol'] = dataSymbol.systemSettings.edges[0].node.value\n  } \n    \n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        finance_currency: initialValues['currency'],\n        finance_currency_symbol: initialValues['symbol']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"finance_currency\", value: values.finance_currency },\n            { setting: \"finance_currency_symbol\", value: values.finance_currency_symbol },\n          ]\n\n          for (let i in settings) {\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsFinanceCurrencyForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsFinanceCurrencyForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsFinanceCurrency))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DATETIME_SCHEMA = Yup.object().shape({\n    dateFormat: Yup.string()\n      .required(t('yup.field_required')),\n    timeFormat: Yup.string()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsGeneralDateTimeForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.general.date_format')}>\n            <Field component=\"select\" \n                    name=\"dateFormat\" \n                    className={(errors.dateFormat) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"YYYY-MM-DD\" key={v4()}>{t('settings.general.date_formats.YYYY-MM-DD')}</option>\n                <option value=\"MM-DD-YYYY\" key={v4()}>{t('settings.general.date_formats.MM-DD-YYYY')}</option>\n                <option value=\"DD-MM-YYYY\" key={v4()}>{t('settings.general.date_formats.DD-MM-YYYY')}</option>\n            </Field>\n            <ErrorMessage name=\"dateFormat\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.general.time_format')}>\n            <Field component=\"select\" \n                    name=\"timeFormat\" \n                    className={(errors.timeFormat) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"24\" key={v4()}>{t('settings.general.time_formats.24hr')}</option>\n                <option value=\"12\" key={v4()}>{t('settings.general.time_formats.12hr')}</option>\n            </Field>\n            <ErrorMessage name=\"timeFormat\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsGeneralDateTimeForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_APP_SETTINGS_QUERY, UPDATE_APP_SETTINGS } from './queries'\nimport { DATETIME_SCHEMA } from './yupSchema'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsGeneralDateTimeForm from \"./SettingsGeneralDateTimeForm\"\n\n\nfunction SettingsGeneralDateTime({ t, match, history }) {\n  const headerSubTitle = t(\"settings.general.datetime\")\n  const cardTitle = t(\"settings.general.datetime\")\n  const sidebarActive = \"general\"\n\n  const { loading, error, data } = useQuery(GET_APP_SETTINGS_QUERY)\n  const [ updateSettings ] = useMutation(UPDATE_APP_SETTINGS)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        dateFormat: data.appSettings.dateFormat,\n        timeFormat: data.appSettings.timeFormat,\n        note: \"\",\n      }}\n      validationSchema={DATETIME_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              dateFormat: values.dateFormat,\n              timeFormat: values.timeFormat,\n            }\n          }, refetchQueries: [\n              {query: GET_APP_SETTINGS_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsGeneralDateTimeForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsGeneralDateTimeForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsGeneralDateTime))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsGeneralSystemForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.general.system.system_hostname')}>\n            <Field type=\"text\" \n              name=\"system_hostname\" \n              className={(errors.system_hostname) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"system_hostname\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsGeneralSystemForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsGeneralSystemForm from \"./SettingsGeneralSystemForm\"\n\n\nfunction SettingsGeneralSystem({ t, match, history }) {\n  const headerSubTitle = t('settings.general.title')\n  const cardTitle = t(\"settings.general.system.title\")\n  const sidebarActive = \"general\"\n  const queryVariables = {\n    setting: \"system_hostname\"\n  }\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: queryVariables\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let hostname = \"\"\n  if (data.systemSettings.edges.length) {\n    hostname = data.systemSettings.edges[0].node.value \n  }\n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        system_hostname: hostname\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              setting: \"system_hostname\",\n              value: values.system_hostname\n            }\n          }, refetchQueries: [\n              { query: GET_SYSTEM_SETTINGS_QUERY, variables: queryVariables }\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsGeneralSystemForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsGeneralSystemForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsGeneralSystem))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\n\nimport {\n  Card,\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HomeItemButton from \"../../ui/HomeItemButton\"\n\nfunction SettingsHome({ t, match, params }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('settings.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.general.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.general.date_time.title\")}</h5>\n                  {t(\"settings.general.date_time.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/general/datetime\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.general.system.title\")}</h5>\n                  {t(\"settings.general.system.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/general/system\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.workflow.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.class_booking.title\")}</h5>\n                  {t(\"settings.workflow.class_booking.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/class_booking\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.subscription_pauses.title\")}</h5>\n                  {t(\"settings.workflow.subscription_pauses.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/subscription_pauses\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.trial.title\")}</h5>\n                  {t(\"settings.workflow.trial.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/trial\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.shop.title\")}</h5>\n                  {t(\"settings.workflow.shop.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/shop\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.finance.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.finance.currency.title\")}</h5>\n                  {t(\"settings.finance.currency.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/finance/currency\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.finance.bank_accounts.title\")}</h5>\n                  {t(\"settings.finance.bank_accounts.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/finance/bank_accounts\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.mail.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.mailchimp_lists.title\")}</h5>\n                  {t(\"settings.mail.mailchimp_lists.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/mailchimp_lists\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.templates.title\")}</h5>\n                  {t(\"settings.mail.templates.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/templates\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.shop.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.shop.features.title\")}</h5>\n                  {t(\"settings.shop.features.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/shop/features/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.integration.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.integration.mailchimp.title\")}</h5>\n                  {t(\"settings.integration.mailchimp.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/integration/mailchimp/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.integration.mollie.title\")}</h5>\n                  {t(\"settings.integration.mollie.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/integration/mollie/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.about.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.about.about.title\")}</h5>\n                  {t(\"settings.about.explanation\")}\n                  <br /><br />\n                  <HomeItemButton \n                    link=\"/settings/about\" \n                    linkTitle={t(\"View info\")}\n                  />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsHome))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsIntegrationMailChimpForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        <Form.Group label={t('settings.integration.mailchimp.api_key')}>\n          <Field type=\"text\" \n            name=\"mailchimp_api_key\" \n            className={(errors.mailchimp_api_key) ? \"form-control is-invalid\" : \"form-control\"} \n            autoComplete=\"off\" />\n          <ErrorMessage name=\"mailchimp_api_key\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('settings.integration.mailchimp.server_prefix')}>\n          <Field type=\"text\" \n            name=\"mailchimp_server_prefix\" \n            className={(errors.mailchimp_server_prefix) ? \"form-control is-invalid\" : \"form-control\"} \n            autoComplete=\"off\" />\n          <ErrorMessage name=\"mailchimp_server_prefix\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsIntegrationMailChimpForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsIntegrationMailChimpForm from \"./SettingsIntegrationMailChimpForm\"\n\n\nfunction SettingsIntegrationMailChimp({ t, match, history }) {\n  const headerSubTitle = t('settings.integration.title')\n  const cardTitle = t(\"settings.integration.mailchimp.title\")\n  const sidebarActive = \"integration\"\n\n  const { \n    loading: loadingUser, \n    error: errorUser, \n    data: dataUser\n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mailchimp_server_prefix\"\n    }\n  })\n  const { \n    loading: loadingKey, \n    error: errorKey, \n    data: dataKey\n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mailchimp_api_key\"\n    }\n  })\n\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  console.log('query data app settings')\n  console.log(dataUser)\n  console.log(dataKey)\n\n  if (loadingUser || loadingKey) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorUser || errorKey) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let mcUser = \"\"\n  if (dataUser.systemSettings.edges.length) {\n    mcUser = dataUser.systemSettings.edges[0].node.value\n  }\n\n  let mcApiKey = \"\"\n  if (dataKey.systemSettings.edges.length) {\n    mcApiKey = dataKey.systemSettings.edges[0].node.value\n  }\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >\n    <Formik\n      initialValues={{ \n        mailchimp_server_prefix: mcUser,\n        mailchimp_api_key: mcApiKey\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"integration_mailchimp_server_prefix\", value: values.mailchimp_server_prefix },\n            { setting: \"integration_mailchimp_api_key\", value: values.mailchimp_api_key },\n          ]\n\n          for (let i in settings) {\n            console.log(i)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsIntegrationMailChimpForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsIntegrationMailChimpForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMailChimp))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsIntegrationMollieForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.integration.mollie.api_key')}>\n            <Field type=\"text\" \n              name=\"mollie_api_key\" \n              className={(errors.mollie_api_key) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"mollie_api_key\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollieForm))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n  Header,\n  Icon\n} from \"tabler-react\";\n\n\nfunction SettingsIntegrationMollieCreateAccount({ t, match, history, mollieApiKey }) {\n  if (mollieApiKey) {\n    return \"\"\n  }\n\n  return (\n    <Alert type=\"primary\">\n      <Header.H4>{t('settings.integration.mollie.create_account_title')}</Header.H4>\n      <p>\n        {t(\"settings.integration.mollie.create_account_message\")}\n      </p>\n      <a href=\"https://www.mollie.com/dashboard/signup/2488481\" target=\"_blank\" rel=\"noreferrer\" >\n        <Button color=\"success\" RootComponent=\"button\">\n          {t(\"settings.integration.mollie.to_mollie\")} <Icon name=\"chevron-right\" />\n        </Button>\n      </a>\n    </Alert>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollieCreateAccount))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsIntegrationMollieForm from \"./SettingsIntegrationMollieForm\"\nimport SettingsIntegrationMollieCreateAccount from \"./SettingsIntegrationMollieCreateAccount\"\n\n\nfunction SettingsIntegrationMollie({ t, match, history }) {\n  const headerSubTitle = t('settings.integration.title')\n  const cardTitle = t(\"settings.integration.mollie.title\")\n  const sidebarActive = \"integration\"\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mollie_api_key\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let mollieApiKey = \"\"\n  if (data.systemSettings.edges.length) {\n    mollieApiKey = data.systemSettings.edges[0].node.value\n  }\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n      alertBanner={<SettingsIntegrationMollieCreateAccount mollieApiKey={mollieApiKey} />}\n    >\n    <Formik\n      initialValues={{ \n        mollie_api_key: mollieApiKey\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              setting: \"integration_mollie_api_key\",\n              value: values.mollie_api_key\n            }\n          }, refetchQueries: [\n              {query: GET_SYSTEM_SETTINGS_QUERY,     variables: {\n                setting: \"integration_mollie_api_key\"\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsIntegrationMollieForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsIntegrationMollieForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollie))","import { gql } from \"@apollo/client\"\n\nexport const GET_MAILCHIMP_LISTS_QUERY = gql`\n  query systemMailchimpLists($after: String, $before: String) {\n    systemMailchimpLists(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          frequency\n          mailchimpListId\n        }\n      }\n    }\n  }\n`\n\nexport const GET_MAILCHIMP_LIST_QUERY = gql`\n  query SystemMailchimpList($id: ID!) {\n    systemMailchimpList(id:$id) {\n      id\n      name\n      description\n      frequency\n      mailchimpListId\n    }\n  }\n`\n\nexport const ADD_MAILCHIMP_LIST = gql`\n  mutation CreateSystemMailChimpList($input:CreateSystemMailChimpListInput!) {\n    createSystemMailchimpList(input: $input) {\n      systemMailchimpList{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_MAILCHIMP_LIST = gql`\n  mutation UpdateSystemMailChimpList($input:UpdateSystemMailChimpListInput!) {\n    updateSystemMailchimpList(input: $input) {\n      systemMailchimpList{\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_MAILCHIMP_LIST = gql`\nmutation DeleteSystemMailChimpList($input: DeleteSystemMailChimpListInput!) {\n  deleteSystemMailchimpList(input: $input) {\n    ok\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ButtonBack from \"../../../ui/ButtonBack\"\n\n\nfunction SettingsMailMailChimpListsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"settings.title\")} subTitle={t(\"settings.mail.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/settings/mail/mailchimp_lists\" />  \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"systemmailchimplist\">\n                  <ButtonAdd addUrl=\"/settings/mail/mailchimp_lists/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListsBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_MAILCHIMP_LIST, GET_MAILCHIMP_LISTS_QUERY } from \"./queries\"\nimport ButtonDelete from '../../../ui/ButtonDelete';\n\n\nfunction SettingsMailMailChimpListDelete({t, match, node}) {\n  const [ deleteMailChimpList ] = useMutation(DELETE_MAILCHIMP_LIST)\n\n  return <ButtonDelete\n    msgConfirm={t(\"settings.mail.mailchimp_lists.delete_confirm_msg\")}\n    msgDescription={<p>{node.name}</p>}\n    msgSuccess={t('settings.mail.mailchimp_lists.delete_success')}\n    deleteFunction={deleteMailChimpList}\n    deleteFunctionVariables={{ \n        variables: {\n          input: {\n            id: node.id\n          }\n        }, \n        refetchQueries: [\n          { query: GET_MAILCHIMP_LISTS_QUERY },\n        ]\n      }}\n  />\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListDelete))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\nimport ButtonEdit from \"../../../ui/ButtonEdit\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_MAILCHIMP_LISTS_QUERY } from \"./queries\"\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase'\nimport SettingsMailMailChimpListDelete from './SettingsMailMailChimpListDelete'\n\n\nfunction SettingsMailMailChimpLists({ t, history }) {\n  const cardTitle = t('settings.mail.mailchimp_lists.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_MAILCHIMP_LISTS_QUERY)\n  // const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  if (loading) return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  if (error) return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('settings.mail.mailchimp_lists.error_loading')}</p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  const mailchimpLists = data.systemMailchimpLists\n\n  // Empty list\n  if (!mailchimpLists.edges.length) { return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle} >\n        <p> \n          {t('settings.mail.mailchimp_lists.empty_list')}\n        </p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )}\n\n  return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}\n                    hasCardBody={false}\n                    pageInfo={mailchimpLists.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: mailchimpLists.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationmailchimpLists.edges\n                        const pageInfo = fetchMoreResult.organizationmailchimpLists.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new mailchimpLists at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationmailchimpLists: {\n                                __typename: previousResult.organizationmailchimpLists.__typename,\n                                edges: [ ...previousResult.organizationmailchimpLists.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('settings.mail.mailchimp_lists.mailchimp_list_id')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {mailchimpLists.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.mailchimpListId}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <ButtonEdit editUrl={`/settings/mail/mailchimp_lists/edit/${node.id}`} />\n                    <SettingsMailMailChimpListDelete node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpLists))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const MAILCHIMP_LIST_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    frequency: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    mailchimpListId: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\nconst SettingsMailChimpListForm = ({ t, history, isSubmitting, errors, values, setFieldValue, setFieldTouched, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.name')}>\n                <Field type=\"text\" \n                        name=\"name\" \n                        className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('settings.mail.mailchimp_lists.mailchimp_list_id')}>\n                <Field type=\"text\" \n                        name=\"mailchimpListId\" \n                        className={(errors.mailchimpListId) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"mailchimpListId\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n            <Form.Group label={t('general.frequency')}>\n              <Field type=\"text\" \n                      name=\"frequency\" \n                      className={(errors.frequency) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"frequency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.description')}>\n              <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(SettingsMailChimpListForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_MAILCHIMP_LISTS_QUERY, ADD_MAILCHIMP_LIST } from './queries'\nimport { MAILCHIMP_LIST_SCHEMA } from './yupSchema'\nimport SettingsMailMailChimpListForm from './SettingsMailMailChimpListForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase';\n\n\nfunction SettingsMailMailChimpListAdd({t, history}) {\n  const returnUrl = \"/settings/mail/mailchimp_lists\"\n  const [ addMailChimpList ] = useMutation(ADD_MAILCHIMP_LIST)\n  \n  return (\n   <SettingsMailMailChimpListsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('settings.mail.mailchimp_lists.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', description: '', frequency: '', mailchimpListId: '' }}\n          validationSchema={MAILCHIMP_LIST_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addMailChimpList({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description, \n                  frequency: values.frequency, \n                  mailchimpListId: values.mailchimpListId, \n                }\n              }, refetchQueries: [\n                  {query: GET_MAILCHIMP_LISTS_QUERY }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('settings.mail.mailchimp_lists.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldTouched, setFieldValue, values, errors }) => (\n            <SettingsMailMailChimpListForm \n              isSubmitting={isSubmitting}\n              values={values}\n              errors={errors}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </SettingsMailMailChimpListsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_MAILCHIMP_LISTS_QUERY, GET_MAILCHIMP_LIST_QUERY, UPDATE_MAILCHIMP_LIST } from './queries'\nimport { MAILCHIMP_LIST_SCHEMA } from './yupSchema'\nimport SettingsMailMailChimpListForm from './SettingsMailMailChimpListForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase';\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction SettingsMailMailChimpListEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/settings/mail/mailchimp_lists\"\n  const cardTitle = t('settings.mail.mailchimp_lists.title_edit')\n  const { loading, error, data } = useQuery(GET_MAILCHIMP_LIST_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateMailchimpList ] = useMutation(UPDATE_MAILCHIMP_LIST)\n\n  if (loading) return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  if (error) return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n                    \n  const initialData = data.systemMailchimpList;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description, \n              frequency: initialData.frequency, \n              mailchimpListId: initialData.mailchimpListId, \n            }}\n            validationSchema={MAILCHIMP_LIST_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateMailchimpList({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name, \n                    description: values.description, \n                    frequency: values.frequency, \n                    mailchimpListId: values.mailchimpListId, \n                  }\n                }, refetchQueries: [\n                    {query: GET_MAILCHIMP_LISTS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('settings.mail.mailchimp_lists.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldTouched, setFieldValue, values, errors }) => (\n              <SettingsMailMailChimpListForm \n                isSubmitting={isSubmitting}\n                values={values}\n                errors={errors}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </SettingsMailMailChimpListsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport SettingsBack from \"../../SettingsBack\"\n\nfunction SettingsMailTemplatesBase({ t, children, headerSubTitle=\"\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"general.settings\")} subTitle={`${t(\"settings.mail.title\")} ${headerSubTitle}`}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsMailTemplatesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SYSTEM_MAIL_TEMPLATES_QUERY = gql`\n  query SystemMailTemplates {\n    systemMailTemplates(first:100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          subject\n          title\n          description\n          content\n          comments\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SYSTEM_MAIL_TEMPLATE_QUERY = gql`\n  query SystemMailTemplate($id: ID!) {\n    systemMailTemplate(id:$id) {\n      id\n      name\n      subject\n      title\n      description\n      content\n      comments\n    }\n  }\n`\n\nexport const UPDATE_SYSTEM_MAIL_TEMPLATE =  gql`\n  mutation UpdateSystemMailTemplate($input: UpdateSystemMailTemplateInput!) {\n    updateSystemMailTemplate(input: $input) {\n      systemMailTemplate {\n        id\n        name\n        subject\n        title\n        description\n        content\n        comments\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport SettingsMailTemplatesBase from \"./SettingsMailTemplatesBase\"\n\nimport { GET_SYSTEM_MAIL_TEMPLATES_QUERY } from \"./queries\"\n\n\nfunction SystemMailTemplates({ t, match, params }) {\n  const title = t(\"settings.mail.templates.title\")\n  const { loading, error, data, fetchMore } = useQuery(GET_SYSTEM_MAIL_TEMPLATES_QUERY)\n\n  if (loading) return (\n    <SettingsMailTemplatesBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </SettingsMailTemplatesBase>\n  )\n  if (error) return (\n    <SettingsMailTemplatesBase title={title}>\n      {t(\"settings.mail.templates.error_loading\")}\n    </SettingsMailTemplatesBase>\n  )\n\n  const mailTemplates = data.systemMailTemplates\n\n  // TODO: add empty list message and request import\n\n  return (\n    <SettingsMailTemplatesBase title={title} >\n      <ContentCard \n        cardTitle={t('settings.mail.templates.title')}\n        // headerContent={headerOptions}\n        pageInfo={mailTemplates.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: mailTemplates.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.systemMailTemplates.edges\n              const pageInfo = fetchMoreResult.systemMailTemplates.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    systemMailTemplates: {\n                      __typename: previousResult.systemMailTemplates.__typename,\n                      edges: [ ...previousResult.systemMailTemplates.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('settings.mail.templates.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n              <Table.Body>\n                  {mailTemplates.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {node.name}\n                      </Table.Col>\n                      <Table.Col>\n                        <Link to={\"/settings/mail/templates/edit/\" + node.id}>\n                          <Button className='btn-sm pull-right' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </SettingsMailTemplatesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(SystemMailTemplates))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport SettingsBack from \"../../SettingsBack\"\n\nfunction SettingsMailTemplatesBase({ t, children, headerSubTitle, help={} }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"general.settings\")} subTitle={`${t('settings.mail.title')} ${headerSubTitle}`}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack returnUrl=\"/settings/mail/templates\" />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={8}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={4}>\n              <Card title={t('general.subject')}>\n                <Card.Body>\n                  {help.subject}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.title')}>\n                <Card.Body>\n                  {help.title}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.description')}>\n                <Card.Body>\n                  {help.description}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.content')}>\n                <Card.Body>\n                  {help.content}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.comments')}>\n                <Card.Body>\n                  {help.comments}\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsMailTemplatesBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n\n\n\nfunction SettingsMailTemplateEditForm({ t, history, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl, cardTitle }) {\n\n\n  return (\n    <FoForm>\n      <Card title={cardTitle}>\n        <Card.Body>    \n          <Form.Group label={t('general.subject')} >\n            <Field type=\"text\" \n                  name=\"subject\" \n                  className={(errors.subject) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"subject\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.title')} >\n            <Field type=\"text\" \n                  name=\"title\" \n                  className={(errors.title) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"title\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.content')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"content\"\n              initialValue={values.content}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"content\", e.target.getContent())\n                setFieldTouched(\"content\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.comments')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"comments\"\n              initialValue={values.comments}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"comments\", e.target.getContent())\n                setFieldTouched(\"comments\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"comments\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n              className=\"pull-right\"\n              color=\"primary\"\n              disabled={isSubmitting}\n              type=\"submit\"\n            >\n              {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n              <Button\n                type=\"button\" \n                color=\"link\" \n              >\n                {t('general.cancel')}\n              </Button>\n            </Link>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailTemplateEditForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_MAIL_TEMPLATE_QUERY, GET_SYSTEM_MAIL_TEMPLATES_QUERY, UPDATE_SYSTEM_MAIL_TEMPLATE } from './queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport { getTemplateInfo } from './tools'\n\nimport SettingsMailTemplateEditBase from \"./SettingsMailTemplateEditBase\"\nimport SettingsMailTemplateEditForm from \"./SettingsMailTemplateEditForm\"\n\n\nfunction SettingsMailTemplateEdit({ t, match, history }) {\n  const id = match.params.id\n  const returnUrl = \"/settings/mail/templates\"\n  const headerSubTitle = t(\"settings.mail.templates.title\")\n  const cardTitle = t(\"settings.mail.templates.edit.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_MAIL_TEMPLATE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_MAIL_TEMPLATE)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsMailTemplateEditBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsMailTemplateEditBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsMailTemplateEditBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsMailTemplateEditBase>\n    )\n  }\n\n  const templateInfo = getTemplateInfo(t, data.systemMailTemplate.name)\n  console.log(data.systemMailTemplate.name)\n  console.log(templateInfo)\n\n\n  return (\n    <SettingsMailTemplateEditBase \n      headerSubTitle={headerSubTitle}\n      help={templateInfo.helpTexts}\n    >  \n    <Formik\n      initialValues={{ \n        subject: data.systemMailTemplate.subject,\n        title: data.systemMailTemplate.title,\n        description: data.systemMailTemplate.description,\n        content: data.systemMailTemplate.content,\n        comments: data.systemMailTemplate.comments        \n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              id: id,\n              subject: values.subject,\n              title: values.title,\n              description: values.description,\n              content: values.content,\n              comments: values.comments\n            }\n          }, refetchQueries: [\n              {query: GET_SYSTEM_MAIL_TEMPLATES_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.mail.templates.edit.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n        <SettingsMailTemplateEditForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n          setFieldTouched={setFieldTouched}\n          setFieldValue={setFieldValue}\n          cardTitle={templateInfo.cardTitle}\n          returnUrl={returnUrl}\n        >\n          {console.log(errors)}\n        </SettingsMailTemplateEditForm>\n      )}\n      </Formik>\n    </SettingsMailTemplateEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailTemplateEdit))","\nexport function getTemplateInfo(t, template_name) {\n  let cardTitle\n  let helpTexts\n\n\n  switch(template_name) {\n    case \"class_info_mail\":\n      cardTitle = t(\"settings.mail.templates.class_info_mail.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.class_info_mail.help_subject\"),\n        title: t(\"settings.mail.templates.class_info_mail.help_title\"),\n        description: t(\"settings.mail.templates.class_info_mail.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.class_info_mail.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.class_info_mail.help_comments\"), \n      }\n      break\n    case \"event_info_mail\":\n      cardTitle = t(\"settings.mail.templates.event_info_mail.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.event_info_mail.help_subject\"),\n        title: t(\"settings.mail.templates.event_info_mail.help_title\"),\n        description: t(\"settings.mail.templates.event_info_mail.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.event_info_mail.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.event_info_mail.help_comments\"), \n      }\n      break\n    case \"order_received\":\n      cardTitle = t(\"settings.mail.templates.order_received.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.order_received.help_subject\"),\n        title: t(\"settings.mail.templates.order_received.help_title\"),\n        description: t(\"settings.mail.templates.order_received.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.order_received.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.order_received.help_comments\"), \n      }\n      break\n    case \"recurring_payment_failed\":\n      cardTitle = t(\"settings.mail.templates.recurring_payment_failed.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.recurring_payment_failed.help_subject\"),\n        title: t(\"settings.mail.templates.recurring_payment_failed.help_title\"),\n        description: t(\"settings.mail.templates.recurring_payment_failed.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.recurring_payment_failed.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.recurring_payment_failed.help_comments\"), \n      }\n      break\n    case \"system_footer\":\n      cardTitle = t(\"settings.mail.templates.system_footer.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.system_footer.help_subject\"),\n        title: t(\"settings.mail.templates.system_footer.help_title\"),\n        description: t(\"settings.mail.templates.system_footer.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.system_footer.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.system_footer.help_comments\"), \n      }\n      break\n    case \"trialpass_followup\":\n      cardTitle = t(\"settings.mail.templates.trialpass_followup.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.trialpass_followup.help_subject\"),\n        title: t(\"settings.mail.templates.trialpass_followup.help_title\"),\n        description: t(\"settings.mail.templates.trialpass_followup.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.trialpass_followup.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.trialpass_followup.help_comments\"), \n      }\n      break\n    default:\n      cardTitle = t(\"settings.mail.templates.not_found.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.not_found.help_subject\"),\n        title: t(\"settings.mail.templates.not_found.help_title\"),\n        description: t(\"settings.mail.templates.not_found.help_description\"),\n        content: t(\"settings.mail.templates.not_found.help_content\"),\n        comments: t(\"settings.mail.templates.not_found.help_comments\"),\n      }\n  }\n\n\n  return {\n    \"cardTitle\": cardTitle,\n    \"helpTexts\": helpTexts,\n  }\n}\n\n","import * as Yup from 'yup'\n\nexport const SHOP_FEATURES_SCHEMA = Yup.object().shape({\n    subscriptions: Yup.boolean(),\n    classpasses: Yup.boolean(),\n    classes: Yup.boolean(),\n    events: Yup.boolean(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsShopFeaturesForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        {/* <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"memberships\" \n              checked={values.memberships} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.memberships')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"memberships\" component=\"div\" />   \n        </Form.Group>   */}\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"subscriptions\" \n              checked={values.subscriptions} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.subscriptions')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"subscriptions\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"classpasses\" \n              checked={values.classpasses} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.classpasses')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"classpasses\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"classes\" \n              checked={values.classes} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.classes')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"classes\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"events\" \n              checked={values.events} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.events')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"events\" component=\"div\" />   \n        </Form.Group>  \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsShopFeaturesForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHOP_FEATURES_QUERY, UPDATE_SHOP_FEATURES } from './queries'\nimport { SHOP_FEATURES_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsShopFeaturesForm from \"./SettingsShopFeaturesForm\"\n\n\nfunction SettingsShopFeatures({ t, match, history }) {\n  const headerSubTitle = t(\"settings.shop.features.title\")\n  const cardTitle = t(\"settings.shop.features.title\")\n  const sidebarActive = \"general\"\n\n  const { loading, error, data } = useQuery(GET_SHOP_FEATURES_QUERY)\n  const [ updateSettings ] = useMutation(UPDATE_SHOP_FEATURES)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  const shopFeatures = data.systemFeatureShop\n  \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        memberships: shopFeatures.memberships,\n        subscriptions: shopFeatures.subscriptions,\n        classpasses: shopFeatures.classpasses,\n        classes: shopFeatures.classes,\n        events: shopFeatures.events,\n      }}\n      validationSchema={SHOP_FEATURES_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          updateSettings({ variables: {\n            input: {\n              memberships: values.memberships,\n              subscriptions: values.subscriptions,\n              classpasses: values.classpasses,\n              classes: values.classes,\n              events: values.events\n            }\n          }, refetchQueries: [\n              {query: GET_SHOP_FEATURES_QUERY}\n          ]})\n          .then(({ data }) => {\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsShopFeaturesForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsShopFeaturesForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsShopFeatures))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowClassBookingForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.class_booking.book_days_advance')}>\n            <Field type=\"text\" \n              name=\"workflow_class_book_days_advance\" \n              className={(errors.workflow_class_book_days_advance) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_class_book_days_advance\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.workflow.class_booking.cancel_until')}>\n            <Field type=\"text\" \n              name=\"workflow_class_cancel_until\" \n              className={(errors.workflow_class_cancel_until) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_class_cancel_until\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBookingForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowClassBookingForm from \"./SettingsWorkflowClassBookingForm\"\n\n\nfunction SettingsWorkflowClassBooking({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.class_booking.title\")\n\n  const { \n    loading: loadingDaysAdvance, \n    error: errorDaysAdvance, \n    data: dataDaysAdvance \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_class_book_days_advance\"\n    }\n  })\n  const { \n    loading: loadingCancelUntil, \n    error: errorCancelUntil, \n    data: dataCancelUntil \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_class_cancel_until\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingDaysAdvance) || (loadingCancelUntil)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorDaysAdvance) || errorCancelUntil) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_class_book_days_advance: \"30\",\n    workflow_class_cancel_until: \"2\"\n  }\n  if (dataDaysAdvance.systemSettings.edges.length){\n    initialValues['workflow_class_book_days_advance'] = dataDaysAdvance.systemSettings.edges[0].node.value\n  } \n  if (dataCancelUntil.systemSettings.edges.length){\n    initialValues['workflow_class_cancel_until'] = dataCancelUntil.systemSettings.edges[0].node.value\n  } \n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_class_book_days_advance: initialValues['workflow_class_book_days_advance'],\n        workflow_class_cancel_until: initialValues['workflow_class_cancel_until']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"workflow_class_book_days_advance\", value: values.workflow_class_book_days_advance },\n            { setting: \"workflow_class_cancel_until\", value: values.workflow_class_cancel_until },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowClassBookingForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowClassBookingForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBooking))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowShopForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.shop.subscription_payment_method')}>\n            <Field component=\"select\" \n              name=\"workflow_shop_subscription_payment_method\" \n              className={(errors.workflow_shop_subscription_payment_method) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n                <option value=\"MOLLIE\">{t(\"finance.payment_methods.mollie\")}</option>\n                <option value=\"DIRECTDEBIT\">{t(\"finance.payment_methods.direct_debit\")}</option>\n            </Field>\n            <ErrorMessage name=\"workflow_shop_subscription_payment_method\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowShopForm))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowShopForm from \"./SettingsWorkflowShopForm\"\n\n\nfunction SettingsWorkflowShop({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.shop.title\")\n\n  const { \n    loading: loadingSubscriptionPayment, \n    error: errorSubscriptionPayment, \n    data: dataSubscriptionPayment \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_shop_subscription_payment_method\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loadingSubscriptionPayment) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorSubscriptionPayment) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_shop_subscription_payment_method: \"\",\n  }\n  if (dataSubscriptionPayment.systemSettings.edges.length){\n    initialValues['workflow_shop_subscription_payment_method'] = dataSubscriptionPayment.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_shop_subscription_payment_method: initialValues['workflow_shop_subscription_payment_method'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"workflow_shop_subscription_payment_method\", \n              value: values.workflow_shop_subscription_payment_method },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowShopForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowShopForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowShop))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowSubscriptionPausesForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.subscription_pauses.min_duration_in_days')}>\n            <Field type=\"text\" \n              name=\"workflow_subscription_pauses_min_duration_in_days\" \n              className={(errors.workflow_subscription_pauses_min_duration_in_days) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_subscription_pauses_min_duration_in_days\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.workflow.subscription_pauses.max_pauses_in_year')}>\n            <Field type=\"text\" \n              name=\"workflow_subscription_pauses_max_pauses_in_year\" \n              className={(errors.workflow_subscription_pauses_max_pauses_in_year) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_subscription_pauses_max_pauses_in_year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowSubscriptionPausesForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowSubscriptionPausesForm from \"./SettingsWorkflowSubscriptionPausesForm\"\n\n\nfunction SettingsWorkflowSubscriptionPauses({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.subscription_pauses.title\")\n\n  const { \n    loading: loadingMinDuration, \n    error: errorMinDuration, \n    data: dataMinDuration \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_subscription_pauses_min_duration_in_days\"\n    }\n  })\n  const { \n    loading: loadingMaxPauses, \n    error: errorMaxPauses, \n    data: dataMaxPauses \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_subscription_pauses_max_pauses_in_year\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingMinDuration) || (loadingMaxPauses)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorMinDuration) || errorMaxPauses) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_subscription_pauses_min_duration_in_days: \"1\",\n    workflow_subscription_pauses_max_pauses_in_year: \"1\"\n  }\n\n  if (dataMinDuration.systemSettings.edges.length){\n    initialValues['workflow_subscription_pauses_min_duration_in_days'] = dataMinDuration.systemSettings.edges[0].node.value\n  } \n  if (dataMaxPauses.systemSettings.edges.length){\n    initialValues['workflow_subscription_pauses_max_pauses_in_year'] = dataMaxPauses.systemSettings.edges[0].node.value\n  } \n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_subscription_pauses_min_duration_in_days: initialValues['workflow_subscription_pauses_min_duration_in_days'],\n        workflow_subscription_pauses_max_pauses_in_year: initialValues['workflow_subscription_pauses_max_pauses_in_year']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_subscription_pauses_min_duration_in_days\", \n              value: values.workflow_subscription_pauses_min_duration_in_days },\n            { setting: \"workflow_subscription_pauses_max_pauses_in_year\", \n              value: values.workflow_subscription_pauses_max_pauses_in_year },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowSubscriptionPausesForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowSubscriptionPausesForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowSubscriptionPauses))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowTrialForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.trial.trial_pass_limit')}>\n            <Field type=\"text\" \n              name=\"workflow_trial_pass_limit\" \n              className={(errors.workflow_trial_pass_limit) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_trial_pass_limit\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowTrialForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowTrialForm from \"./SettingsWorkflowTrialForm\"\n\n\nfunction SettingsWorkflowClassBooking({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.class_booking.title\")\n\n  const { \n    loading: loadingTrialClassLimit, \n    error: errorTrialClassLimit, \n    data: dataTrialClassLimit \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_trial_pass_limit\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loadingTrialClassLimit) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorTrialClassLimit) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_trial_pass_limit: \"1\",\n  }\n  if (dataTrialClassLimit.systemSettings.edges.length){\n    initialValues['workflow_trial_pass_limit'] = dataTrialClassLimit.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_trial_pass_limit: initialValues['workflow_trial_pass_limit'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_trial_pass_limit\", value: values.workflow_trial_pass_limit },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowTrialForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowTrialForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBooking))","import { gql } from \"@apollo/client\"\n\nconst GET_USER_PROFILE = gql`\n  query User {\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      instructor\n      employee\n    }\n  }\n`\n\nexport default GET_USER_PROFILE","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountHomeBase({ t, match, history, children, subTitle=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={subTitle}/>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountHomeBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\n\nfunction ShopAccountHomeButton({ t, link, buttonText }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {buttonText} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountHomeButton))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Dimmer,\n  Grid\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage';\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountHomeBase from \"./ShopAccountHomeBase\"\nimport ShopAccountHomeButton from \"./ShopAccountHomeButton\"\n\n\nfunction ShopAccountHome({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n\n  // Unset any next link for bank accounts that might have come from /shop/subscription/:id\n  localStorage.removeItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT)\n\n\n  if (loading) return (\n    <ShopAccountHomeBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountHomeBase>\n  )\n  if (error) return (\n    <ShopAccountHomeBase>\n      {t(\"shop.account.error_loading_user_data\")}\n    </ShopAccountHomeBase>\n  )\n\n  const user = data.user\n\n  return (\n    <ShopAccountHomeBase subTitle={user.fullName}>\n      {(user.instructor || user.employee) ?\n        <div>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={4} lg={4}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"goto.title\")}</h5>\n                  {t(\"shop.account.goto.explanation\")}\n                  <br /><br />\n                  <ShopAccountHomeButton link=\"/user/welcome\" buttonText={t(\"shop.account.btn_go_to\")} />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row> \n          <hr />\n        </div>\n        : \"\"\n      } \n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.classes.title\")}</h5>\n              {t(\"shop.account.classes.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/classes\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.subscriptions.title\")}</h5>\n              {t(\"shop.account.subscriptions.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/subscriptions\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.classpasses.title\")}</h5>\n              {t(\"shop.account.classpasses.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/classpasses\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.event_tickets.title\")}</h5>\n              {t(\"shop.account.event_tickets.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/event_tickets\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      <hr />\n      {/* Administrative stuff below this point, profile, invoices, orders, etc. */}\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.profile.title\")}</h5>\n              {t(\"shop.account.profile.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/profile\" buttonText={t(\"shop.account.btn_text_profile_edit\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.bank_account.title\")}</h5>\n              {t(\"shop.account.bank_account.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/bank_account\" buttonText={t(\"shop.account.btn_text_bank_account_edit\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.orders.title\")}</h5>\n              {t(\"shop.account.orders.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/orders\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.invoices.title\")}</h5>\n              {t(\"shop.account.invoices.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/invoices\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.mailing_lists.title\")}</h5>\n              {t(\"shop.account.mailing_lists.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton \n                link=\"/shop/account/mailing_lists\" \n                buttonText={t(\"shop.account.btn_text_manage\")} \n              />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.change_password.title\")}</h5>\n              {t(\"shop.account.change_password.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/user/password/change/\" buttonText={t(\"shop.account.btn_text_change_password\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.sign_out.title\")}</h5>\n              {t(\"shop.account.sign_out.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/user/logout/\" buttonText={t(\"shop.account.btn_text_sign_out\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountHomeBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountHome))","import React from 'react'\nimport moment from 'moment'\nimport { TimeStringToJSDateOBJ } from '../../tools/date_tools'\n\n\nexport function DisplayClassInfo({t, classDate, classData, dateFormat, timeFormat }) {\n    return (\n      <div>\n        <b>\n          {moment(classDate).format(dateFormat)} {' '}\n          {moment(TimeStringToJSDateOBJ(classData.scheduleClass.timeStart)).format(timeFormat)} {' - '}\n          {moment(TimeStringToJSDateOBJ(classData.scheduleClass.timeEnd)).format(timeFormat)} <br />  \n        </b>\n        {classData.scheduleClass.organizationClasstype.name + \" \" + t(\"general.at\") + ' ' + \n          classData.scheduleClass.organizationLocationRoom.organizationLocation.name}\n      </div>\n    )\n}","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASS_QUERY = gql`\n  query ScheduleItemAttendance($scheduleItemId:ID!, $date:Date!, $id: ID!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n    scheduleItemAttendance(id: $id) {\n      id\n      cancellationPossible\n      attendanceType\n      date\n      bookingStatus\n      scheduleItem {\n        id\n        timeStart\n        timeEnd\n        organizationLocationRoom {\n          name\n          organizationLocation {\n            name\n          }\n        }\n        organizationClasstype {\n          name\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassCancelBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassCancelBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer\n} from \"tabler-react\"\n\nimport { DisplayClassInfo } from \"../../tools\"\nimport { UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport { GET_ACCOUNT_CLASS_QUERY } from \"./queries\"\n// import { GET_SCHEDULE_CLASS_QUERY } from \"../../checkout/class_info/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountClassCancelBase from \"./ShopAccountClassCancelBase\"\n\n\n\nfunction ShopAccountClassCancel({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const attendanceId = match.params.attendance_id\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date\n  const { loading: loadingAttendance, error: errorAttendance, data: dataAttendance } = useQuery(GET_ACCOUNT_CLASS_QUERY, {\n    variables: { \n      id: attendanceId,\n      scheduleItemId: scheduleItemId,\n      date: date\n    }\n  })\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const [updateScheduleItemAttendance] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loadingUser || loadingAttendance) return (\n    <ShopAccountClassCancelBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassCancelBase>\n  )\n  if (errorUser || errorAttendance) return (\n    <ShopAccountClassCancelBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassCancelBase>\n  )\n\n  const user = dataUser.user\n  console.log(dataUser)\n  console.log(dataAttendance)\n  const scheduleItemAttendance = dataAttendance.scheduleItemAttendance\n\n  // Booking already cancelled\n  if (scheduleItemAttendance.bookingStatus === 'CANCELLED') {\n    return (\n      <ShopAccountClassCancelBase accountName={user.fullName}>\n        <Card title={t(\"shop.account.class_cancel.title_already_cancelled\")}>\n          <Card.Body>\n            <h5>{t(\"shop.account.class_cancel.already_cancelled\")}</h5>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassCancelBase>\n    )\n  }\n\n  // Cancellation no longer possible\n  if (!scheduleItemAttendance.cancellationPossible) {\n    return (\n      <ShopAccountClassCancelBase accountName={user.fullName}>\n        <Card title={t(\"shop.account.class_cancel.title_cancelation_not_possible\")}>\n          <Card.Body>\n            <h5>{t(\"shop.account.class_cancel.cancelation_not_possible\")}</h5>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassCancelBase>\n    )\n  }\n\n  // Show cancel option\n  return (\n    <ShopAccountClassCancelBase accountName={user.fullName}>\n      <Card title={t(\"shop.account.class_cancel.title\")}>\n        <Card.Body>\n          {/* TODO: Check if class already cancelled */}\n          <h5>\n            {t(\"shop.account.class_cancel.confirmation_question\")}\n          </h5>\n            <DisplayClassInfo\n              t={t}\n              classDate={date}\n              classData={dataAttendance}\n              dateFormat={dateFormat}\n              timeFormat={timeFormat}\n            />\n            <br />\n            <Button\n              className=\"mr-4\"\n              color=\"warning\"\n              onClick={() =>\n                updateScheduleItemAttendance({ variables: {\n                  input: {\n                    id: attendanceId,\n                    bookingStatus: \"CANCELLED\"\n                  }\n                }})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(\"/shop/account/classes\")\n                    toast.success((t('shop.account.class_cancel.success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                  })\n                }\n            >\n              {t(\"shop.account.class_cancel.confirm_yes\")}\n            </Button>\n            <Link to={\"/shop/account/classes\"}>\n              {t(\"shop.account.class_cancel.confirm_no\")}\n            </Link>\n        </Card.Body>\n      </Card>\n    </ShopAccountClassCancelBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassCancel))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItemId:ID!, $date:Date!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n  }\n`\n\n\n\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Dimmer,\n  Icon,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { DisplayClassInfo } from \"../../tools\"\nimport { GET_SCHEDULE_CLASS_QUERY } from \"./queries\"\n\n\nfunction ShopCheckoutClassInfo({ t, scheduleItemId, date, complete=true}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_CLASS_QUERY, {\n    variables: { \n      scheduleItemId: scheduleItemId,\n      date: date\n    }\n  })\n\n  if (loading) return (\n    <Dimmer active={true} loader={true} />\n  )\n  if (error) return (\n      t(\"shop.checkout.class_info.error_loading\")\n  )\n\n  console.log(data)\n\n  return (\n    (!loading && !error) ?\n      <div className=\"text-muted\">\n        <h5><Icon name=\"book\" /> {\n          (complete) ? t(\"shop.checkout.class_info.have_been_checked_in\")\n                     : t(\"shop.checkout.class_info.will_be_checked_in\") \n        }</h5>\n        {/* Class display info $ mail content */}\n        <DisplayClassInfo \n          t={t} \n          classDate={date}\n          classData={data} \n          dateFormat={dateFormat} \n          timeFormat={timeFormat}\n        />\n        <br />\n        {(data.scheduleClass.infoMailContent) ? \n          <div>\n            <h5><Icon name=\"info\" /> {t(\"shop.checkout.class_info.info_mail\")}</h5>\n            <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(data.scheduleClass.infoMailContent) }} /> \n          </div>\n          : \"\"\n        }\n      </div> \n      : \"\"\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutClassInfo))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassInfoBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassInfoBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\"\n\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopCheckoutClassInfo from \"../../checkout/class_info/ShopCheckoutClassInfo\"\nimport ShopAccountClassInfoBase from \"./ShopAccountClassInfoBase\"\n\n\n\nfunction ShopAccountClassInfo({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date \n\n  if (loading) return (\n    <ShopAccountClassInfoBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassInfoBase>\n  )\n  if (error) return (\n    <ShopAccountClassInfoBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassInfoBase>\n  )\n\n  const user = data.user\n\n  // Populated list\n  return (\n    <ShopAccountClassInfoBase accountName={user.fullName}>\n      <Card title={t(\"shop.account.class_info.title\")}>\n        <Card.Body>\n          <ShopCheckoutClassInfo\n            scheduleItemId={scheduleItemId}\n            date={date}\n            complete={true}\n          />\n        </Card.Body>\n      </Card>\n    </ShopAccountClassInfoBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClassInfo))\n","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_CLASSPASSES = gql`\n  query AccountClasspass($before: String, $after: String, $account: ID!) {\n    accountClasspasses(first: 100, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          organizationClasspass {\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction ShopAccountBack({ t, returnUrl=\"/shop/account\" }) {\n  \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(ShopAccountBack)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","import React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { QUERY_ACCOUNT_CLASSPASSES } from \"./queries\"\n\nimport ShopAccountClasspassesBase from \"./ShopAccountClasspassesBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountClasspasses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_CLASSPASSES, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountClasspassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClasspassesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountClasspassesBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountClasspassesBase>\n  )\n\n  const user = data.user\n  const classpasses = data.accountClasspasses\n\n  // Empty list\n  if (!classpasses.edges.length) {\n    return (\n      <ShopAccountClasspassesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.classpasses.title')} >\n              <Card.Body>\n                {t('shop.account.classpasses.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountClasspassesBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountClasspassesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.classpasses.title')}\n            hasCardBody={false}\n            pageInfo={classpasses.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: classpasses.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountClasspasses.edges\n                  const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountClasspasses: {\n                          __typename: previousResult.accountClasspasses.__typename,\n                          edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {classpasses.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.organizationClasspass.name}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateEnd).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.classesRemainingDisplay}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClasspasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../SiteWrapperShop\"\nimport ShopAccountBack from \"./ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport {\n  Badge,\n  Card,\n  Dimmer,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"../../../relations/accounts/schedule_event_tickets/queries\"\n\nimport ShopAccountProfileBase from \"../ShopAccountProfileBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountEventTickets({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.event_tickets.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  const user = dataUser.user\n  const eventTickets = data.accountScheduleEventTickets\n\n  // Empty list\n  if (!eventTickets.edges.length) {\n    return (\n      <ShopAccountProfileBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.event_tickets.title')} >\n              <Card.Body>\n                {t('shop.account.event_tickets.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountProfileBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.event_tickets.title')}\n            hasCardBody={false}\n            pageInfo={eventTickets.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: eventTickets.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountScheduleEventTickets.edges\n                  const pageInfo = fetchMoreResult.accountScheduleEventTickets.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new tickets at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        eventTickets: {\n                          __typename: previousResult.accountScheduleEventTickets.__typename,\n                          edges: [ ...previousResult.accountScheduleEventTickets.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.ticket')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {eventTickets.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.scheduleEventTicket.scheduleEvent.name} <br />\n                      <Badge>{node.scheduleEventTicket.name}</Badge> {\" \"}\n                      {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.scheduleEventTicket.scheduleEvent.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.scheduleEventTicket.scheduleEvent.organizationLocation.name}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountEventTickets))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INVOICE_QUERY = gql`\n  query FinanceInvoice($id: ID!) {\n    financeInvoice(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      invoiceNumber\n      dateSent\n      dateDue\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      paidDisplay\n      balance\n      balanceDisplay\n      creditInvoiceNumber\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_PAYMENT_LINK = gql`\nmutation CreateFinanceInvoicePaymentLink($id: ID!) {\n  createFinanceInvoicePaymentLink(id: $id) {\n    financeInvoicePaymentLink {\n      paymentLink\n    }\n  }\n}\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicePaymentBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack returnUrl=\"/shop/account/invoices\"/>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentBase))","import React, { useRef, useState } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\"\nimport { GET_INVOICE_QUERY, CREATE_PAYMENT_LINK } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountInvoicePaymentBase from \"./ShopAccountInvoicePaymentBase\"\n\n\nfunction ShopAccountInvoicePayment({t, match, history}) {\n  const id = match.params.id\n  const cardTitleLoadingError = t(\"shop.account.invoice_payment.title\")\n\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      id: id\n    }\n  })\n\n  const [createPaymentLink] = useMutation(CREATE_PAYMENT_LINK)\n\n  function onClickPay() {\n    btnPayNow.current.setAttribute(\"disabled\", \"disabled\")\n    setBtnText(t(\"shop.checkout.payment.redirecting\"))\n    // btnPayNow.current.setValue(\"redirecting...\")\n    // btnPayNow\n    // btnPayNow.current.removeAttribute(\"disabled\")\n    createPaymentLink({ variables: { id: id } }).then(({ data }) => {\n      console.log('got data', data);\n      const paymentLink = data.createFinanceInvoicePaymentLink.financeInvoicePaymentLink.paymentLink\n      window.location.href = paymentLink\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n    })\n  }\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicePaymentBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicePaymentBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"shop.account.invoice_payment.error_loading_data\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoice = data.financeInvoice\n\n  \n  return (\n    <ShopAccountInvoicePaymentBase accountName={user.fullName}>\n      <Card title={<span>{t(\"general.invoice\")} #{invoice.invoiceNumber}</span>}>\n        <Card.Body>\n          { invoice.items.edges.map(({ node }) => (\n            <Grid.Row>\n              <Grid.Col md={9}>\n                {node.productName} <br />\n                <small className=\"text-muted\">\n                  {node.description}\n                </small>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <span className=\"float-right\">\n                  {node.totalDisplay}\n                </span>\n              </Grid.Col>\n            </Grid.Row>\n          ))}\n          {/* Total */}\n          <Grid.Row>\n            <Grid.Col md={9} className=\"bold\">\n              <br />\n              {t(\"general.total\")}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <span className=\"bold float-right\">\n                <br />\n                {invoice.totalDisplay}\n              </span>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <button\n            className=\"btn float-right btn-success\"\n            ref={btnPayNow}\n            onClick={ onClickPay }\n          >\n            {btn_text}\n          </button>\n        </Card.Footer>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePayment))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountInvoicePaymentStatusBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName } />\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentStatusBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\"\nimport { GET_INVOICE_QUERY } from \"../invoice_payment/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountInvoicePaymentStatusBase from \"./ShopAccountInvoicePaymentStatusBase\"\n\n\nfunction ShopAccountInvoicePaymentStatus({t, match, history}) {\n  const id = match.params.id\n  const cardTitleLoadingError = t(\"shop.account.invoice_payment.title\")\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      id: id\n    }\n  })\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicePaymentStatusBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicePaymentStatusBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"shop.account.invoice_payment_status.error_loading_data\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n\n  const user = dataUser.user\n  const invoice = data.financeInvoice\n\n  let alert\n  if (invoice.status === \"PAID\") {\n    alert = <Alert type=\"success\" icon=\"check\">\n      {t(\"shop.account.invoice_payment_status.payment_received\")}\n    </Alert>\n  } else {\n    alert = <Alert type=\"primary\" icon=\"help-circle\">\n      {t(\"shop.account.invoice_payment_status.payment_not_confirmed\")}\n    </Alert>\n  }\n\n  \n  return (\n    <ShopAccountInvoicePaymentStatusBase accountName={user.fullName}>\n      {alert}\n      <Card title={<span>{t(\"general.invoice\")} #{invoice.invoiceNumber}</span>}>\n        <Card.Body>\n          { invoice.items.edges.map(({ node }) => (\n            <Grid.Row>\n              <Grid.Col md={9}>\n                {node.productName} <br />\n                <small className=\"text-muted\">\n                  {node.description}\n                </small>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <span className=\"float-right\">\n                  {node.totalDisplay}\n                </span>\n              </Grid.Col>\n            </Grid.Row>\n          ))}\n          {/* Total */}\n          <Grid.Row>\n            <Grid.Col md={9} className=\"bold\">\n              <br />\n              {t(\"general.total\")}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <span className=\"bold float-right\">\n                <br />\n                {invoice.totalDisplay}\n              </span>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <Link to=\"/shop/account/invoices\">\n            <Button \n              color=\"primary\"\n              className=\"float-right\"\n            >\n              {t(\"shop.account.invoice_payment_status.to_profile\")} <Icon name=\"chevron-right\" />\n            </Button>\n          </Link>\n        </Card.Footer>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentStatus))\n","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_INVOICES = gql`\n  query FinanceInvoices($after: String, $before: String, $account: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicesBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicesBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  Table,\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_INVOICES } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\n\nimport ShopAccountInvoicesBase from \"./ShopAccountInvoicesBase\"\n\n\nfunction ShopAccountInvoices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_INVOICES, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountInvoicesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicesBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountInvoicesBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoices = data.financeInvoices\n\n  // Empty list\n  if (!invoices.edges.length) {\n    return (\n      <ShopAccountInvoicesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.invoices.title')} >\n              <Card.Body>\n                {t('shop.account.invoices.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountInvoicesBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountInvoicesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={invoices.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: invoices.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.financeInvoices.edges\n                  const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        financeInvoices: {\n                          __typename: previousResult.financeInvoices.__typename,\n                          edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} \n          >\n            <h4>{t(\"shop.account.invoices.title\")}</h4>\n            <Grid.Row>\n              {invoices.edges.map(({ node }) => (\n                <Grid.Col xs={12} sm={12} md={4} lg={4}>\n                  <Card>\n                    <Card.Header>\n                      <Card.Title>{node.invoiceNumber}</Card.Title>\n                      <Card.Options>\n                        <FinanceInvoicesStatus status={node.status}/>\n                      </Card.Options>\n                    </Card.Header>\n                    <Card.Body>\n                      <span className=\"text-bold\">\n                        {node.summary}\n                      </span>\n                    </Card.Body>\n                      <Table cards>\n                        <Table.Body>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n                            <Table.Col>{moment(node.dateSent).format(dateFormat)}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"finance.invoices.due\")}</Table.ColHeader>\n                            <Table.Col>{moment(node.dateDue).format(dateFormat)}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                            <Table.Col>{node.totalDisplay}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.balance\")}</Table.ColHeader>\n                            <Table.Col>{node.balanceDisplay}</Table.Col>\n                          </Table.Row>\n                        </Table.Body>\n                      </Table>\n                    <Card.Footer>\n                      {(node.status === \"SENT\" && onlinePaymentsAvailable) ?\n                        <Link to={\"/shop/account/invoice_payment/\" + node.id}>\n                          <Button\n                            className=\"float-right\"\n                            color=\"success\"\n                          >\n                            {t('shop.account.invoices.to_payment')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                        : \"\"\n                      }  \n                      <Button \n                        color=\"secondary\"\n                        icon=\"printer\"\n                        onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                          t, doTokenRefresh, history, `/d/export/invoice/pdf/${node.id}`\n                        )}\n                      >\n                        {t('general.pdf')}\n                      </Button>              \n                    </Card.Footer>\n                  </Card>\n                </Grid.Col>\n              ))}\n            </Grid.Row>\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountInvoicesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoices))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_SYSTEM_MAILCHIMP_LISTS = gql`\n  query SystemMailchimpLists($before: String, $after: String) {\n    systemMailchimpLists(first: 100, before: $before, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          frequency\n          subscribed\n          mailchimpListId\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\nexport const UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS = gql`\n  mutation updateSystemMailchimpListSubscriptionStatus($input: UpdateSystemMailChimpListSubscriptionStatusInput!) {\n    updateSystemMailchimpListSubscriptionStatus(input: $input) {\n      subscriptionStatus\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountMailingListsBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountMailingListsBase))","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  GalleryCard,\n  Button,\n  Badge,\n} from \"tabler-react\";\n\nimport { QUERY_SYSTEM_MAILCHIMP_LISTS, UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS } from './queries'\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopAccountMailingListCard({ t, mailingList, btnLink, active=false }) {\n  let [isSubmitting, setSubmitting] = useState(false)\n  const [ updateSubscriptionStatus ] = useMutation(UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS)\n\n  function doUpdateSubscriptionStatus(mailchimpListId) {\n    setSubmitting(true)\n\n    updateSubscriptionStatus({ variables: {\n      input: {\n        mailchimpListId: mailchimpListId\n      }\n    }, refetchQueries: [\n      {query: QUERY_SYSTEM_MAILCHIMP_LISTS}\n    ]})\n    .then(({ data }) => {\n        console.log('got data', data)\n        toast.success((t('shop.account.mailing_lists.toast_update_subscription_status_success')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n        setSubmitting(false)\n      }).catch((error) => {\n        toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        console.log('there was an error sending the query', error)\n        setSubmitting(false)\n      })\n    }  \n\n  return (\n    <GalleryCard>\n      <GalleryCard.Details>\n        <div>\n        <span className='float-right'>\n        {(mailingList.subscribed) ? <Badge color=\"success\">Subscribed</Badge> : \"\"}\n        </span>\n        <h4>{mailingList.name}</h4>\n        </div>\n        \n        <h6>{mailingList.frequency}</h6>\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(mailingList.description) }} />\n\n        {(mailingList.subscribed) ? \n              <Button\n                color=\"secondary\" \n                block\n                outline\n                disabled={isSubmitting}\n                onClick={() => doUpdateSubscriptionStatus(mailingList.mailchimpListId)}\n              >\n                { (isSubmitting) ? \n                  t(\"shop.account.mailing_lists.unsubscribing\") : \n                  t(\"shop.account.mailing_lists.unsubscribe\") \n                }\n              </Button> :\n              <Button\n                color=\"success\" \n                block\n                outline\n                disabled={isSubmitting}\n                onClick={() => doUpdateSubscriptionStatus(mailingList.mailchimpListId)}\n              >\n                { (isSubmitting) ? \n                  t(\"shop.account.mailing_lists.subscribing\") : \n                  t(\"shop.account.mailing_lists.subscribe\") \n                }\n              </Button>\n        }\n      </GalleryCard.Details>\n    </GalleryCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountMailingListCard))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Dimmer,\n  Grid\n} from \"tabler-react\";\n\nimport { QUERY_SYSTEM_MAILCHIMP_LISTS } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountMailingListsBase from \"./ShopAccountMailingListsBase\"\nimport ShopAccountMailingListCard from \"./ShopAccountMailingListCard\"\n\n\nfunction ShopAccountMailingLists({t, match, history}) {\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(QUERY_SYSTEM_MAILCHIMP_LISTS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountMailingListsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountMailingListsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountMailingListsBase>\n      {t(\"shop.account.mailing_lists.error_loading_data\")}\n    </ShopAccountMailingListsBase>\n  )\n\n  const user = data.user\n  const mailingLists = data.systemMailchimpLists\n\n  // Empty list\n  if (!mailingLists.edges.length) {\n    return (\n      <ShopAccountMailingListsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.mailing_lists.title')} >\n              <Card.Body>\n                {t('shop.account.mailing_lists.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountMailingListsBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountMailingListsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h4>{t('shop.account.mailing_lists.title')}</h4>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        {mailingLists.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={4}>\n            <ShopAccountMailingListCard\n              mailingList={node}\n              // btnLink={\"/shop/classpass/\" + node.id}\n            />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopAccountMailingListsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountMailingLists))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_ORDERS = gql`\n  query FinanceOrders($after: String, $before: String, $account: ID!) {\n    financeOrders(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          message\n          status\n          total\n          totalDisplay\n          createdAt\n          items(first: 100) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                id\n                productName\n                description\n                quantity\n                priceDisplay\n                financeTaxRate {\n                  id\n                  name\n                  percentage\n                  rateType\n                }\n                subtotalDisplay\n                taxDisplay\n                totalDisplay                \n              }\n            }\n          }\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n\nexport const UPDATE_ORDER = gql`\n  mutation UpdateOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n        status\n      }\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountOrdersBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountOrdersBase))","export function get_order_card_status_color(status) {\n    switch(status) {\n        case (\"RECEIVED\"): \n          return \"blue\"\n        case (\"AWAITING_PAYMENT\"): \n          return \"blue\"\n        case (\"PAID\"):\n          return \"green\"\n        case (\"DELIVERED\"):\n          return \"green\"\n        case \"CANCELLED\":\n          return \"orange\"\n        default:\n          return \"\"\n      }\n}","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceOrderStatus from \"../../../finance/orders/FinanceOrderStatus\"\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  Table\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_ORDERS, UPDATE_ORDER } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountOrdersBase from \"./ShopAccountOrdersBase\"\nimport { cancelOrder } from \"./ShopAccountOrderCancel\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\n\nimport { get_order_card_status_color } from \"./tools\"\n\nfunction ShopAccountOrders({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  // Chain queries. First query user data and then query orders for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_ORDERS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  const [ updateOrder ] = useMutation(UPDATE_ORDER)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountOrdersBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountOrdersBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountOrdersBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountOrdersBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const orders = data.financeOrders\n\n  // Empty list\n  if (!orders.edges.length) {\n    return (\n      <ShopAccountOrdersBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.orders.title')} >\n              <Card.Body>\n                {t('shop.account.orders.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountOrdersBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountOrdersBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={orders.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: orders.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.financeOrders.edges\n                  const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        financeOrders: {\n                          __typename: previousResult.financeOrders.__typename,\n                          edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <h4>{t(\"shop.account.orders.title\")}</h4>\n            {orders.edges.map(({ node }) => (\n              <div>\n                <span className=\"pull-right\">\n                  <FinanceOrderStatus status={node.status} />\n                </span>\n                <small className=\"text-muted\">\n                  {moment(node.createdAt).format(dateTimeFormat)}\n                </small>\n                <Card statusColor={get_order_card_status_color(node.status)}>\n                  <Card.Header>\n                    <Card.Title>{t(\"general.order\") + \" #\" + node.orderNumber}</Card.Title>\n                    <Card.Options>\n                      {(node.status === \"RECEIVED\" || node.status === \"AWAITING_PAYMENT\") ?\n                        <Button\n                          outline\n                          color=\"warning\"\n                          size=\"sm\"\n                          onClick={() => cancelOrder({\n                            t: t,\n                            msgConfirm: t('shop.account.orders.msg_cancel_confirm'),\n                            msgDescription: <p>{t('general.order') + \" #\" + node.orderNumber}</p>, \n                            msgSuccess: t('shop.account.orders.order.cancelled'), \n                            cancelFunction: updateOrder, \n                            functionVariables: {\n                              variables: {\n                                input: {\n                                  id: node.id,\n                                  status: 'CANCELLED'\n                                }\n                              }\n                            }\n                          })}\n                        >\n                          {t('general.cancel')}\n                        </Button>\n                      : \"\"}\n                      {(node.status === \"AWAITING_PAYMENT\" && onlinePaymentsAvailable) ?\n                        <Link to={\"/shop/checkout/payment/\" + node.id}>\n                          <Button\n                            className=\"ml-4\"\n                            color=\"success\"\n                            size=\"sm\"\n                          >\n                            {t('shop.account.orders.to_payment')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                      : \"\"}\n                    </Card.Options>\n                  </Card.Header>\n                  <Table cards>\n                    <Table.Header>\n                      <Table.Row>\n                        <Table.ColHeader>{t(\"general.product\")}</Table.ColHeader>\n                        <Table.ColHeader>{t(\"general.description\")}</Table.ColHeader>\n                        <Table.ColHeader><span className=\"float-right\">{t(\"general.total\")}</span></Table.ColHeader>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                      {node.items.edges.map(({ node }) => (\n                        <Table.Row>\n                          <Table.Col>{node.productName}</Table.Col>\n                          <Table.Col>{node.description}</Table.Col>\n                          <Table.Col><span className=\"float-right\">{node.totalDisplay}</span></Table.Col>\n                        </Table.Row>    \n                      ))}\n                      <Table.Row>\n                        <Table.Col></Table.Col>\n                        <Table.Col></Table.Col>\n                        <Table.Col><span className=\"bold float-right\">{node.totalDisplay}</span></Table.Col>\n                      </Table.Row>\n                    </Table.Body>\n                  </Table>\n                </Card>\n              </div>\n            ))}\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountOrdersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountOrders))","import React from 'react'\nimport { toast } from 'react-toastify'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { v4 } from 'uuid'\n\n\nexport function cancelOrder({t, msgConfirm, msgDescription, msgSuccess, cancelFunction, functionVariables}) {\n  return (\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div key={v4()} className='custom-ui'>\n            <h1>{t('shop.account.orders.confirm_cancel')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('shop.account.orders.confirm_cancel_no')}</button>\n            <button\n              className=\"btn btn-warning btn-sm outline\"\n              onClick={() => {\n                cancelFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              {t('shop.account.orders.confirm_cancel_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  )\n}\n","import { gql } from \"@apollo/client\"\n\n\nexport const UPDATE_PROFILE = gql`\n  mutation UpdateAccount($input:UpdateAccountInput!) {\n    updateAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\n\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Button,\n} from \"tabler-react\";\n\n\nfunction ShopAccountProfileBtnDownloadData({ t, history }) {\n  const export_url = \"/d/export/account_data\"\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  //TODO Check if account data download feature is enabled\n\n  return (\n    <Button\n      color=\"secondary\"\n      icon=\"download\"\n      className=\"ml-2\"\n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n        t, doTokenRefresh, history, export_url\n      )}\n    >\n      {t('shop.account.profile.download_my_data')} \n    </Button>\n  )\n}\n\nexport default withTranslation()(ShopAccountProfileBtnDownloadData)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\nimport ShopAccountProfileBtnDownloadData from './ShopAccountProfileBtnDownloadData'\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n            <div className=\"page-options d-flex\">\n              <ShopAccountBack />\n              <ShopAccountProfileBtnDownloadData />\n            </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../../tools/iso_country_codes\"\n\n\nconst ShopAccountProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Card title={t(\"shop.accounts.profile.edit\")} >\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.first_name')}>\n              <Field type=\"text\" \n                      name=\"firstName\" \n                      className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.last_name')}>\n              <Field type=\"text\" \n                      name=\"lastName\" \n                      className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n         <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.date_of_birth')}>\n              <CSDatePicker \n                selected={values.dateOfBirth}\n                onChange={(date) => setFieldValue(\"dateOfBirth\", date)}\n                onBlur={() => setFieldTouched(\"dateOfBirth\", true)}\n              />\n              <ErrorMessage name=\"dateOfBirth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.gender')}>\n              <Field component=\"select\" \n                    name=\"gender\" \n                    className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                <option value=\"F\">{t(\"genders.female\")}</option>\n                <option value=\"M\">{t(\"genders.male\")}</option>\n                <option value=\"X\">{t(\"genders.other\")}</option>\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('relations.accounts.emergency')}>\n              <Field type=\"text\" \n                     name=\"emergency\" \n                     className={(errors.emergency) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"emergency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.mobile')}>\n              <Field type=\"text\" \n                     name=\"mobile\" \n                     className={(errors.mobile) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"mobile\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                     name=\"postcode\" \n                     className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                     name=\"country\" \n                     className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopAccountProfileForm))\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SCHEMA = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport { UPDATE_PROFILE } from \"./queries\"\nimport ShopAccountProfileBase from \"./ShopAccountProfileBase\"\nimport ShopAccountProfileForm from \"./ShopAccountProfileForm\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { ACCOUNT_SCHEMA } from \"./yupSchema\"\n\n\nfunction ShopAccountProfile({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n  const [ updateProfile ] = useMutation(UPDATE_PROFILE)\n\n  if (loading) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.profile.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  const user = data.user\n\n  let dateOfBirth = null\n  if (user.dateOfBirth) {\n    dateOfBirth = new Date(user.dateOfBirth)\n  }\n\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Formik\n            initialValues={{ \n              firstName: user.firstName, \n              lastName: user.lastName, \n              email: user.email,\n              dateOfBirth: dateOfBirth,\n              gender: user.gender,\n              emergency: user.emergency,\n              phone: user.phone,\n              mobile: user.mobile,\n              address: user.address,\n              postcode: user.postcode,\n              city: user.city,\n              country: user.country\n            }}\n            validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: user.accountId,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  gender: values.gender,\n                  emergency: values.emergency,\n                  phone: values.phone,\n                  mobile: values.mobile,\n                  address: values.address,\n                  postcode: values.postcode,\n                  city: values.city,\n                  country: values.country\n                }\n\n                if (values.dateOfBirth) {\n                  input_vars['dateOfBirth'] = dateToLocalISO(values.dateOfBirth)\n                } \n\n                updateProfile({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // // Refetch list\n                    // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // // Refresh local cached results for this account\n                    // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('shop.account.profile.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <ShopAccountProfileForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                returnUrl={\"/shop/account\"}\n              />\n            )}\n          </Formik>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountProfile))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_SUBSCRIPTIONS = gql`\n  query AccountSubscriptions($before: String, $after: String, $account: ID!) {\n    accountSubscriptions(first: 100, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          organizationSubscription {\n            name\n          }\n          dateStart\n          dateEnd\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","import React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { QUERY_ACCOUNT_SUBSCRIPTIONS } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountSubscriptionsBase from \"./ShopAccountSubscriptionsBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountSubscriptions({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_SUBSCRIPTIONS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountSubscriptionsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountSubscriptionsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountSubscriptionsBase>\n      {t(\"shop.account.subscriptions.error_loading_data\")}\n    </ShopAccountSubscriptionsBase>\n  )\n\n  const user = data.user\n  const subscriptions = data.accountSubscriptions\n\n  // Empty list\n  if (!subscriptions.edges.length) {\n    return (\n      <ShopAccountSubscriptionsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.subscriptions.title')} >\n              <Card.Body>\n                {t('shop.account.subscriptions.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountSubscriptionsBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountSubscriptionsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.subscriptions.title')}\n            hasCardBody={false}\n            pageInfo={subscriptions.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: subscriptions.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountSubscriptions.edges\n                  const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountSubscriptions: {\n                          __typename: previousResult.accountSubscriptions.__typename,\n                          edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {subscriptions.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.organizationSubscription.name}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      { (node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\" }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountSubscriptions))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ShopClassBookBack = ({ t }) => (\n  <Link to={\"/shop/classes\"} >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ShopClassBookBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassBookBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.classes.book.title\")} pageHeaderOptions={pageHeaderOptions}>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookBase))","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/book/queries\"\n\n\nfunction ShopClassBookClasspassBtn({t, match, history, classpass}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"scheduleItem\": schedule_item_id,\n    \"accountClasspass\": classpass.accountClasspass.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS\",\n    \"onlineBooking\": true,\n    \"bookingStatus\": \"BOOKED\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return t(\"general.please_wait\")\n  }\n\n  if (error) {\n    return t(\"general.error_sad_smiley\")\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"primary\" \n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          // {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect to class booked page\n            console.log(\"Checkin success!\")\n            history.push(`/shop/classes/booked/${schedule_item_id}/${class_date}`)\n\n            // show message to user\n            // toast.success((t('schedule.classes.class.book.toast_success')), {\n            //   position: toast.POSITION.BOTTOM_RIGHT\n            // })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.book\")} <Icon name=\"chevron-right\" />\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookClasspassBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ShopClassBookClasspassBtn from \"./ShopClassBookClasspassBtn\"\n\n\nfunction ShopClassBookClasspasses({ t, match, history, classpasses }) {\n  console.log(\"CLASSPASSES\")\n  console.log(classpasses)\n\n  return (\n    classpasses.map((classpass) =>(\n      <Grid.Col xs={12} sm={12} md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.classpass\")} >\n        <Card.Body>\n          <b>{classpass.accountClasspass.organizationClasspass.name}</b><br />\n          <span className=\"text-muted\">\n            {t('general.classes_remaining')}: {classpass.accountClasspass.classesRemainingDisplay} <br />\n            {t('general.valid_until')}: {moment(classpass.accountClasspass.dateEnd).format('LL')} <br />\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!classpass.allowed) ? t('schedule.classes.class.book.classpass_not_allowed') :\n            <ShopClassBookClasspassBtn classpass={classpass} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookClasspasses))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/book/queries\"\n\n\nfunction ShopClassBookSubscriptionBtn({t, match, history, subscription}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"scheduleItem\": schedule_item_id,\n    \"accountSubscription\": subscription.accountSubscription.id,\n    \"date\": class_date,\n    \"attendanceType\": \"SUBSCRIPTION\",\n    \"onlineBooking\": true,\n    \"bookingStatus\": \"BOOKED\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return t(\"general.please_wait\")\n  }\n\n  if (error) {\n    return t(\"general.error_sad_smiley\")\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"primary\" \n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          // {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect to class booked page\n            console.log(\"Checkin success!\")\n            history.push(`/shop/classes/booked/${schedule_item_id}/${class_date}`)\n\n            // show message to user\n            // toast.success((t('schedule.classes.class.book.toast_success')), {\n            //   position: toast.POSITION.BOTTOM_RIGHT\n            // })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.book\")} <Icon name=\"chevron-right\" />\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookSubscriptionBtn))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ShopClassBookSubscriptionBtn from \"./ShopClassBookSubscriptionBtn\"\n\n\nfunction ShopClassBookSubscriptions({ t, match, history, subscriptions }) {\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col xs={12} sm={12} md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {t(\"general.credits_remaining\")}: {subscription.accountSubscription.creditTotal}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.book.subscription_not_allowed') :\n            <ShopClassBookSubscriptionBtn subscription={subscription} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookSubscriptions))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\n\n\nfunction ShopClassBookPriceBtn({t, match, history, price}) {\n  console.log(price)\n  const classpassId = price.id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <Link to={`/shop/classpass/${classpassId}/${scheduleItemId}/${classDate}`}>\n    <Button \n      block \n      outline \n      color=\"primary\" \n    >\n      {t(\"shop.classes.book.pay_and_book\")} <Icon name=\"chevron-right\" />\n    </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClassBookPriceBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport ShopClassBookPriceBtn from './ShopClassBookPriceBtn'\n\nfunction ShopClassBookPriceDropin({ \n  t, \n  match, \n  history, \n  priceDropin\n}) {\n\n  return (\n    <Grid.Col xs={12} sm={12} md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.dropin\")} >\n      <Card.Body>\n        <b>{priceDropin.priceDisplay}</b><br />\n        {t(\"shop.classes.book.dropin_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ShopClassBookPriceBtn price={priceDropin} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookPriceDropin))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport ShopClassBookPriceBtn from './ShopClassBookPriceBtn'\n\nfunction ShopClassBookPriceTrial({ \n  t, \n  match, \n  history, \n  priceTrial\n}) {\n\n  return (\n    <Grid.Col xs={12} sm={12} md={3}>\n      <Card \n        statusColor=\"green\"\n        title={t(\"general.trial\")} >\n      <Card.Body>\n        <b>{priceTrial.priceDisplay}</b><br />\n        {t(\"shop.classes.book.trial_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ShopClassBookPriceBtn price={priceTrial} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookPriceTrial))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClass(scheduleItemId: $scheduleItem, date:$date) {\n      bookingStatus\n    }\n    scheduleClassBookingOptions(scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      alreadyBooked\n      account {\n        id\n        fullName\n        hasReachedTrialLimit\n      }\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n          creditTotal\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport ShopClassBookBack from \"./ShopClassBookBack\"\nimport ShopClassBookBase from \"./ShopClassBookBase\"\nimport ShopClassBookClasspasses from './ShopClassBookClasspasses'\nimport ShopClassBookSubscriptions from \"./ShopClassBookSubscriptions\"\nimport ShopClassBookPriceDropin from \"./ShopClassBookPriceDropin\"\nimport ShopClassBookPriceTrial from \"./ShopClassBookPriceTrial\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction ShopClassBook({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"SHOP_BOOK\"\n      },\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  // Loading\n  if (loading) return (\n    <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n      <Dimmer active={true} loader={true} />\n    </ShopClassBookBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ShopClassBookBase>\n    )\n  }\n  \n  console.log(data)\n  const scheduleClass = data.scheduleClass\n\n  const alreadyBooked = data.scheduleClassBookingOptions.alreadyBooked\n  const account = data.scheduleClassBookingOptions.account\n  const classpasses = data.scheduleClassBookingOptions.classpasses\n  const subscriptions = data.scheduleClassBookingOptions.subscriptions\n  const prices = data.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = data.scheduleClassBookingOptions.scheduleItem\n\n  const location = scheduleItem.organizationLocationRoom.organizationLocation.name\n  const classType = scheduleItem.organizationClasstype.name\n  const timeStart = moment(TimeStringToJSDateOBJ(scheduleItem.timeStart)).format(timeFormat) \n  const timeEnd = moment(TimeStringToJSDateOBJ(scheduleItem.timeEnd)).format(timeFormat) \n  const date_display = moment(class_date).format(dateFormat)\n  // const subtitle = class_subtitle({\n  //   t: t,\n  //   location: , \n  //   locationRoom: scheduleItem.organizationLocationRoom.name,\n  //   classtype: , \n  //   timeStart: , \n  //   date: class_date\n  // })\n  const class_info = date_display + ' ' + timeStart + ' - ' + timeEnd + ' ' + classType + ' ' + t(\"general.at\") + ' ' + location\n\n  console.log(prices)\n  console.log(\"ALREADY BOOKED\")\n  console.log(alreadyBooked)\n  console.log(scheduleClass.bookingStatus)\n\n  let content\n\n  switch(scheduleClass.bookingStatus) {\n    case \"NOT_YET_OPEN\":\n      const bookingOpenOn = scheduleClass.bookingOpenOn\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.open_on\") + \" \" + moment(bookingOpenOn).format(dateFormat)}\n        </Alert>\n      break\n    case \"CANCELLED\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.cancelled\")}\n        </Alert>\n      break\n    case \"HOLIDAY\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.cancelled_holiday\")}\n        </Alert>\n      break\n    case \"FINISHED\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.finished\")}\n        </Alert>\n      break\n    case \"ONGOING\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.ongoing\")}\n        </Alert>\n      break\n    case \"FULL\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.full\")}\n        </Alert>\n      break\n    case \"OK\":\n      content = <Grid.Row cards deck>\n        <ShopClassBookSubscriptions subscriptions={subscriptions} />\n        <ShopClassBookClasspasses classpasses={classpasses} />\n        {(prices) ?\n          (prices.organizationClasspassDropin) ? \n            <ShopClassBookPriceDropin priceDropin={prices.organizationClasspassDropin}/> : \"\" \n        : \"\" }\n        {(prices) ?\n          ((prices.organizationClasspassTrial) && (!account.hasReachedTrialLimit)) ? \n            <ShopClassBookPriceTrial priceTrial={prices.organizationClasspassTrial}/> : \"\" \n          : \"\" } \n      </Grid.Row>\n      break\n    default:\n      content = \"\"\n  }\n\n  return (\n    <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h5>{ class_info }</h5>\n          <div className=\"mt-6\">\n            {(alreadyBooked) ?\n              <Alert type=\"primary\" hasExtraSpace>\n                <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n                {t(\"shop.classes.book.already_booked\")}\n              </Alert>\n              : content\n            }\n          </div>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClassBookBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBook))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassBookedBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.classes.booked.title\")} pageHeaderOptions={pageHeaderOptions}>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookedBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItemId: ID!, $date: Date!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId \n      date\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n      organizationClasstype {\n        name\n      }\n      timeStart\n      timeEnd\n    }\n  }\n`\n\n\nexport const CREATE_ORDER = gql`\n  mutation CreateFinanceOrder($input: CreateFinanceOrderInput!) {\n    createFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ShopClassBookedBase from \"./ShopClassBookedBase\"\nimport { GET_CLASS_QUERY } from \"../../queries\"\nimport { DisplayClassInfo } from \"../../tools\"\n\n\nfunction ShopClassBook({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data } = useQuery(\n    GET_CLASS_QUERY, {\n      variables: {\n        scheduleItemId: schedule_item_id,\n        date: class_date,\n      }\n    }\n  )\n\n  // Loading\n  if (loading) return (\n    <ShopClassBookedBase>\n      <Dimmer active={true} loader={true} />\n    </ShopClassBookedBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <ShopClassBookedBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ShopClassBookedBase>\n    )\n  }\n  \n  console.log(data)\n  // TODO: display class info in a card\n\n  \n  return (\n    <ShopClassBookedBase>\n      <Grid.Row cards deck>\n        <Grid.Col xs={12} sm={12} md={6} lg={6}>\n          <Card title={t(\"shop.classes.booked.class\")}>\n            <Card.Body>\n              {t(\"shop.classes.booked.class_explanation\")} <br /><br />\n              <DisplayClassInfo \n                t={t} \n                classDate={class_date}\n                classData={data} \n                dateFormat={dateFormat} \n                timeFormat={timeFormat}\n              />\n            </Card.Body>\n            <Card.Footer>\n              <Link to={\"/shop/account\"}>\n                <Button\n                  outline\n                  block\n                  color=\"success\"\n                >\n                  {t(\"general.continue\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClassBookedBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBook))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassesScheduleBase({ t, match, history, children, pageHeaderOptions=\"\" }) {  \n  return (\n    <ShopBase title={t(\"shop.classes.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClassesScheduleBase))\n","import CSLS from \"../../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n    // let orderBy\n    let organizationClasstype\n    let organizationLevel\n    let organizationLocation\n  \n    let queryVars = {\n      attendanceCountType: \"ATTENDING_AND_BOOKED\",\n      dateFrom: localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM), \n      dateUntil: localStorage.getItem(CSLS.SHOP_CLASSES_DATE_UNTIL),\n    }\n  \n    // orderBy = localStorage.getItem(CSLS.SHOP_CLASSES_ORDER_BY)\n    // if (orderBy) {\n    //   queryVars.orderBy = orderBy\n    // }\n  \n    organizationClasstype = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_CLASSTYPE)\n    if (organizationClasstype) {\n      queryVars.organizationClasstype = organizationClasstype\n    } else {\n      queryVars.organizationClasstype = \"\"\n    }\n  \n    organizationLevel = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_LEVEL)\n    if (organizationLevel) {\n      queryVars.organizationLevel = organizationLevel\n    } else {\n      queryVars.organizationLevel = \"\"\n    }\n  \n    organizationLocation = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_LOCATION)\n    if (organizationLocation) {\n      queryVars.organizationLocation = organizationLocation\n    } else {\n      queryVars.organizationLocation = \"\"\n    }\n  \n    console.log(queryVars)\n  \n    return queryVars\n  }\n  ","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\nimport { \n  Grid,\n} from \"tabler-react\";\n\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\nconst ShopClassesScheduleFilter = ({ t, history, data, refetch }) => (\n  <Grid.Row>\n    <Grid.Col xs={12} sm={12} md={4}>\n      {/* Locations */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_LOCATION)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_LOCATION,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_locations\")}</option>\n        {data.organizationLocations.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n    <Grid.Col xs={12} sm={12} md={4}>\n      {/* Classtypes */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_CLASSTYPE)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_CLASSTYPE,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_classtypes\")}</option>\n        {data.organizationClasstypes.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n    <Grid.Col xs={12} sm={12} md={4}>\n      {/* Levels */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_LEVEL)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_LEVEL,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_levels\")}</option>\n        {data.organizationLevels.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n  </Grid.Row>\n);\n\nexport default withTranslation()(withRouter(ShopClassesScheduleFilter))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\n\nfunction ShopClassesScheduleButtonBook({ t, match, history, scheduleItemId, classDate, bookingOpenOn, bookingStatus }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  let buttonBook\n  // Uncomment the line below when testing the book component statuses. (Development only)\n  // bookingStatus = \"OK\"\n\n  switch(bookingStatus) {\n    case \"NOT_YET_OPEN\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.open_on\") + \" \" + moment(bookingOpenOn).format(dateFormat)}\n        </span>\n      break\n    case \"CANCELLED\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.cancelled\")}\n        </span>\n      break\n    case \"HOLIDAY\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.cancelled_holiday\")}\n        </span>\n      break\n    case \"FINISHED\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.finished\")}\n        </span>\n      break\n    case \"ONGOING\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.ongoing\")}\n        </span>\n      break\n    case \"FULL\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.full\")}\n        </span>\n      break\n    case \"OK\":\n      buttonBook = <Link to={`/shop/classes/book/${scheduleItemId}/${classDate}`}>\n          <Button className=\"pull-right\" color=\"primary\" outline>\n            {t(\"general.book\")} <Icon name=\"chevron-right\" />\n          </Button>\n        </Link>\n      break\n    \n    default:\n      buttonBook = \"\"\n  }\n  \n  return buttonBook\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesScheduleButtonBook))\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card, \n  Dimmer,\n  Grid,\n  Table,\n} from \"tabler-react\";\nimport ShopClassesScheduleBase from \"./ShopClassesScheduleBase\"\nimport ShopClassesScheduleFilter from \"./ShopClassesScheduleFilter\"\nimport ShopClassesScheduleButtonBook from \"./ShopClassesScheduleButtonBook\"\n\nimport { GET_CLASSES_QUERY } from \"../../../schedule/classes/queries\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction capitalize(word) {\n  const lower = word.toLowerCase();\n  return word.charAt(0).toUpperCase() + lower.slice(1);\n}\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} else {\n  const date_from  = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM))\n  if (date_from.isBefore(moment(), \"day\")) {\n    localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n  }\n}\n\n\nfunction ShopClassesSchedule({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const { loading, error, data, refetch } = useQuery(GET_CLASSES_QUERY, {\n    variables: get_list_query_variables(),\n    // https://github.com/apollographql/react-apollo/issues/321\n    // Set loading to true when refetching\n    notifyOnNetworkStatusChange: true\n  })\n\n  console.log(loading)\n\n  const pageHeaderOptions = <Button.List className=\"schedule-list-page-options-btn-list\">\n    <Button \n      icon=\"chevron-left\"\n      color=\"secondary\"\n      disabled={ (moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).subtract(7, 'days').isBefore(moment(), \"day\")) }\n      onClick={ () => {\n        let prevWeekFrom = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).subtract(7, 'days')\n        let prevWeekUntil = moment(prevWeekFrom).add(6, 'days')\n        \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, prevWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, prevWeekUntil.format('YYYY-MM-DD')) \n\n        refetch(get_list_query_variables())\n    }} />\n    <Button \n      color=\"secondary\"\n      onClick={ () => {\n        let currentWeekFrom = moment()\n        let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n        \n        refetch(get_list_query_variables())\n    }} > \n      {t(\"general.today\")}\n    </Button>\n    <Button \n      icon=\"chevron-right\"\n      color=\"secondary\"\n      onClick={ () => {\n        let nextWeekFrom = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).add(7, 'days')\n        let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n        \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n        refetch(get_list_query_variables())\n    }} />\n  </Button.List>\n\n  if (loading) return (\n    <ShopClassesScheduleBase title={title} pageHeaderOptions={pageHeaderOptions} >\n      <br /><br /><br /><br />    \n      <Dimmer active={true} loader={true} />\n    </ShopClassesScheduleBase>\n  )\n  if (error) return (\n    <ShopClassesScheduleBase title={title} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"shop.classes.error_loading\")}\n    </ShopClassesScheduleBase>\n  )\n\n  console.log(data)\n  console.log(data.scheduleClasses)\n  \n\n  return (\n    <ShopClassesScheduleBase \n      title={title}\n      pageHeaderOptions={pageHeaderOptions}\n    >\n      <ShopClassesScheduleFilter data={data} refetch={refetch} />\n      {data.scheduleClasses.map(({ date, bookingOpenOn, classes }) =>\n        <Grid.Row key={v4()}>\n          <Grid.Col md={12}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>\n                    <b>{capitalize(moment(date).format(\"dddd\"))}</b> {' '}\n                    <span className=\"text-muted\">\n                      {moment(date).format(\"LL\")} \n                    </span>\n                  </Card.Title>\n                </Card.Header>                \n                {!(classes.length) ? \n                  <Card.Body>\n                    <p>{t('schedule.classes.empty_list')}</p>\n                  </Card.Body> :\n                  <Table cards>\n                    <Table.Body>\n                      {classes.map(({ \n                        scheduleItemId, \n                        frequencyType,\n                        date, \n                        status,\n                        holiday,\n                        holidayName,\n                        description,\n                        account, \n                        role,\n                        account2,\n                        role2,\n                        organizationLocationRoom, \n                        organizationClasstype, \n                        organizationLevel,\n                        timeStart, \n                        timeEnd,\n                        displayPublic,\n                        bookingStatus }) => (\n                          <Table.Row>\n                            <Table.Col>\n                            <h4>\n                              {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                              {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                            </h4> \n                            { organizationClasstype.name } { (account) ? ' ' + t(\"general.with\") + ' ' + account.fullName : \"\" } <br />\n                            <span className=\"text-muted\">{ organizationLocationRoom.organizationLocation.name }</span>\n                            </Table.Col>\n                            <Table.Col>\n                              <ShopClassesScheduleButtonBook\n                                scheduleItemId={scheduleItemId}\n                                classDate={date}\n                                bookingOpenOn={bookingOpenOn}\n                                bookingStatus={bookingStatus}\n                              />\n                            </Table.Col>\n                          </Table.Row>\n                        )\n                      )}\n                    </Table.Body>\n                  </Table>\n                }\n              </Card>\n          </Grid.Col>\n        </Grid.Row>\n      )}\n\n    </ShopClassesScheduleBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesSchedule))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopContactBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.contact.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopContactBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Card, \n} from \"tabler-react\";\nimport ShopContactBase from \"./ShopContactBase\"\n\nimport { GET_ORGANIZATION_QUERY } from \"../../organization/organization/queries\"\n\n\nfunction ShopContact({ t, match, history }) {\n  // The ID is fixed, as there's only one organization supported at the moment... easy peasy.\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: { id: \"T3JnYW5pemF0aW9uTm9kZToxMDA=\"}\n  })\n\n  if (loading) return (\n    <ShopContactBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopContactBase>\n  )\n  if (error) return (\n    <ShopContactBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopContactBase>\n  )\n\n  console.log(data)\n  console.log(data.organization)\n\n  const organization = data.organization\n\n  return (\n    <ShopContactBase>\n      <Card title={organization.name}>\n        <Card.Body>\n          <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organization.address) }} />\n          <p>{organization.email} <br /> {organization.phone}</p>\n          <p>{organization.registration} <br /> {organization.taxRegistration}</p>\n        </Card.Body>\n      </Card>\n    </ShopContactBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopContact))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventsBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.events.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENTS_QUERY = gql`\n  query ScheduleEvents($before:String, $after:String) {\n    scheduleEvents(first: 100, before: $before, after:$after, archived:false, displayShop:true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          autoSendInfoMail\n          organizationLocation {\n            id\n            name\n          }\n          name\n          tagline\n          preview\n          description\n          organizationLevel {\n            id\n            name\n          }\n          instructor {\n            id \n            fullName\n          }\n          instructor2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd\n          timeStart\n          timeEnd\n          infoMailContent\n          scheduleItems {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          media(first: 1) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                urlImageThumbnailSmall\n                urlImageThumbnailLarge\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Dimmer,\n  Grid,\n  Icon,\n  GalleryCard\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport ShopEventsBase from \"./ShopEventsBase\"\nimport { GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopEvents({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const title = t(\"shop.home.title\")\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENTS_QUERY)\n\n  if (loading) return (\n    <ShopEventsBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventsBase>\n  )\n  if (error) return (\n    <ShopEventsBase title={title}>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopEventsBase>\n  )\n\n  console.log(data)\n  const scheduleEvents = data.scheduleEvents\n  console.log(scheduleEvents)\n\n  return (\n    <ShopEventsBase title={title}>\n        <Grid.Row>\n          {scheduleEvents.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={6} lg={4} key={v4()}>\n              <GalleryCard>\n                {(node.media.edges.length) ?\n                  <GalleryCard.Image \n                    src={(node.media.edges.length) ? node.media.edges[0].node.urlImageThumbnailLarge: \"\"} \n                    href={`#/shop/events/${node.id}`}\n                  /> : \"\" }\n                <GalleryCard.Footer>\n                  <h4>{node.name}</h4>\n                </GalleryCard.Footer>\n                <GalleryCard.Footer>                  \n                  <GalleryCard.Details\n                    fullName={<span className=\"\">{(node.instructor) ? node.instructor.fullName: \"\"}</span>}\n                    dateString={node.organizationLocation.name}\n                  />\n                  <GalleryCard.IconGroup>\n                  <GalleryCard.IconItem \n                    name=\"calendar\"\n                    label={moment(node.dateStart).format(dateFormat)}\n                    right={false}\n                    RootComponent=\"span\"\n                  />\n                  </GalleryCard.IconGroup>\n                </GalleryCard.Footer>\n                <Link to={`/shop/events/${node.id}`}>\n                  <GalleryCard.Footer pt={10}>\n                    <Button\n                      block\n                      color=\"link\"\n                    >\n                      {t(\"shop.events.tell_me_more\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  </GalleryCard.Footer>\n                </Link>\n              </GalleryCard>\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n    </ShopEventsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEvents))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventBase({ t, match, history, children, title=\"\" }) {\n  \n  return (\n    <ShopBase \n      title={title}\n      returnUrl=\"/shop/events\"\n      // checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventBase))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopEventTicketPricingCard({ t, match, eventTicket, showButton=true, active=false }) {\n  // eventTicket should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, \n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(eventTicket)\n  const ticketScheduleItems = eventTicket.ticketScheduleItems\n\n  const eventId = match.params.event_id\n\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {eventTicket.name}\n        {(eventTicket.isEarlybirdPrice) ? <div><Badge color=\"primary\">{t(\"shop.event.ticket.earlybird_price\")}</Badge></div> : \"\"}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        { (eventTicket.price === 0) ? \n          t(\"shop.event.ticket.free\") :\n          eventTicket.totalPriceDisplay \n        }\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        {(eventTicket.isEarlybirdPrice) ? \n          <PricingCard.AttributeItem>\n            {t(\"shop.event.ticket.regular_price\")} {eventTicket.priceDisplay}\n          </PricingCard.AttributeItem>\n          : \"\" \n        }\n        {ticketScheduleItems.edges.map(({ node }) => (\n          <PricingCard.AttributeItem>\n              <Icon name=\"calendar\" /> { \" \" }\n              {moment(node.scheduleItem.dateStart).format(dateFormat)} {\" \"}\n              {/* Start & end time */}\n              {moment(node.scheduleItem.dateStart + ' ' + node.scheduleItem.timeStart).format(timeFormat)} {' - '}\n              {moment(node.scheduleItem.dateStart + ' ' + node.scheduleItem.timeEnd).format(timeFormat)} { ' ' }\n            <br />\n            <small className=\"text-muted\">\n              {node.scheduleItem.name} <Icon name=\"map-pin\" /> {node.scheduleItem.organizationLocationRoom.organizationLocation.name}\n            </small>\n          </PricingCard.AttributeItem>\n        ))}\n      </PricingCard.AttributeList>\n      {(showButton && !eventTicket.isSoldOut) ?\n        <Link to={`/shop/events/${eventId}/ticket/${eventTicket.id}`}>\n          <PricingCard.Button>\n            {t(\"shop.event.ticket.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\" \n      }\n      {(showButton && eventTicket.isSoldOut) ? \n        <PricingCard.Button \n          className=\"disabled\"\n        >\n          {t('general.sold_out')}\n        </PricingCard.Button> : \"\"}\n    </PricingCard>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventTicketPricingCard))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_QUERY = gql`\nquery ScheduleEvent($id: ID!) {\n  scheduleEvent(id: $id) {\n    id\n    archived\n    displayPublic\n    displayShop\n    autoSendInfoMail\n    organizationLocation {\n      id\n      name\n    }\n    name\n    tagline\n    preview\n    description\n    organizationLevel {\n      id\n      name\n    }\n    instructor {\n      id \n      fullName\n    }\n    instructor2 {\n      id\n      fullName\n    }\n    dateStart\n    dateEnd\n    timeStart\n    timeEnd\n    infoMailContent\n    media(first: 1) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          urlImageThumbnailSmall\n          urlImageThumbnailLarge\n        }\n      }\n    }\n    tickets(first: 100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          price\n          priceDisplay\n          totalPrice\n          totalPriceDisplay\n          description\n          isSoldOut\n          isEarlybirdPrice\n          ticketScheduleItems(included: true, orderBy: \"date_start\") {\n           pageInfo{\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n            }\n            edges {\n              node {\n                id\n                included\n                scheduleItem {\n                  name\n                  dateStart\n                  timeStart\n                  timeEnd\n                  organizationLocationRoom {\n                    organizationLocation {\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    createdAt\n    updatedAt\n  }\n}\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Dimmer,\n  GalleryCard,\n  Grid,\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ShopEventBase from \"./ShopEventBase\"\nimport ShopEventTicketPricingCard from \"./ShopEventTicketPricingCard\"\nimport { GET_SCHEDULE_EVENT_QUERY } from \"./queries\"\n\n\nfunction ShopEvent({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  let tempTitle = t(\"shop.home.title\")\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  if (loading) return (\n    <ShopEventBase title={tempTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventBase>\n  )\n  if (error) return (\n    <ShopEventBase title={tempTitle}>\n      {t(\"shop.event.error_loading\")}\n    </ShopEventBase>\n  )\n\n  const event = data.scheduleEvent\n  const tickets = event.tickets\n\n\n  return (\n    <ShopEventBase title={event.name}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <h5>{event.tagline}</h5>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={6} lg={4}>\n          {((event.media.edges.length) ? \n            <GalleryCard>\n              <GalleryCard.Image src={(event.media.edges.length) ? event.media.edges[0].node.urlImageThumbnailLarge : \"\"} />\n              <GalleryCard.Details>\n                {(event.media.edges.length) ? event.media.edges[0].node.description : \"\"}\n              </GalleryCard.Details>\n            </GalleryCard>\n          : \"\" )}\n          <Card title={t(\"general.info\")}>\n            <Card.Body>\n              <h6>{t('general.instructor')}: {(event.instructor) ? event.instructor.fullName: \"\"}</h6>\n              <h6>{t('general.start')}: {(event.dateStart) ? moment(event.dateStart).format(dateFormat): \"\"}</h6>\n              <h6>{t('general.end')}: {(event.dateEnd) ? moment(event.dateEnd).format(dateFormat): \"\"}</h6>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={6} lg={8}>\n          <Card title={t(\"general.description\")}>\n            <Card.Body>\n              <h5>{t('general.description')}</h5>\n              <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(event.description) }} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <h3>{t(\"shop.event.tickets\")}</h3>\n        </Grid.Col>\n        {tickets.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={6} lg={4}>\n            <ShopEventTicketPricingCard eventID={eventId} eventTicket={node} />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopEventBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEvent))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventTicketBase({ t, match, history, children, subTitle }) {\n  const eventId = match.params.event_id\n  \n  return (\n    <ShopBase \n      title={t(\"shop.events.ticket.title\")}\n      subTitle={subTitle}\n      returnUrl={`/shop/events/${eventId}`}\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopEventTicketBase))","const cs_django_links = {\n    EXPORT_TERMS_AND_CONDITIONS: \"/d/export/terms-and-conditions\",\n    EXPORT_PRIVACY_POLICY: \"/d/export/privacy-policy\",\n}\n\nexport default cs_django_links\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Icon\n} from \"tabler-react\"\n\nimport cs_django_links from \"../../tools/cs_django_links\"\n\n\nconst ShopClasspassForm = ({ t, isSubmitting, errors }) => (\n    <FoForm>\n      <Form.Group label={t('shop.order.message')}>\n        <Field type=\"text\" \n               component=\"textarea\"\n               name=\"message\" \n               className={(errors.message) ? \"form-control is-invalid\" : \"form-control\"} \n               autoComplete=\"off\" />\n        <ErrorMessage name=\"message\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <small className=\"text-muted\">\n        {t(\"shop.order.by_placing_this_order\")} <br />\n        <ul>\n          <li>{t(\"shop.order.agree_terms\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\"\n              href={cs_django_links.EXPORT_TERMS_AND_CONDITIONS}>{t(\"general.terms_and_conditions\")}</a>\n          </li>\n          <li>{t(\"shop.order.agree_privacy\")} {\" \"}\n            <a target=\"_blank\" rel=\"noreferrer\" href={cs_django_links.EXPORT_PRIVACY_POLICY}>{t(\"general.privacy_policy\")}</a>\n          </li>\n        </ul>\n      </small>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('shop.place_order')} <Icon name=\"chevron-right\" />\n      </Button>\n    </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopClasspassForm))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_TICKET_QUERY = gql`\n  query ScheduleEventTicket($id: ID!) {\n    scheduleEventTicket(id:$id) {\n      id\n      name\n      price\n      priceDisplay\n      totalPrice\n      totalPriceDisplay\n      description\n      isSoldOut\n      isEarlybirdPrice\n      ticketScheduleItems(included: true, orderBy: \"date_start\") {\n        pageInfo{\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n        }\n        edges {\n          node {\n            id\n            included\n            scheduleItem {\n              name\n              dateStart\n              timeStart\n              timeEnd\n              organizationLocationRoom {\n                organizationLocation {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      scheduleEvent {\n        id\n        name\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport ShopEventTicketBase from \"./ShopEventTicketBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopEventTicketPricingCard from \"../event/ShopEventTicketPricingCard\"\n\nimport { GET_SCHEDULE_EVENT_TICKET_QUERY } from \"./queries\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction ShopEventTicket({ t, match, history }) {\n  let title = t(\"shop.home.title\")\n  const scheduleEventTicketId = match.params.id\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: { id: scheduleEventTicketId },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n\n  if (loading) return (\n    <ShopEventTicketBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventTicketBase>\n  )\n  if (error) return (\n    <ShopEventTicketBase title={title}>\n      {t(\"shop.events.ticket.error_loading\")}\n    </ShopEventTicketBase>\n  )\n\n  console.log(data)\n  const eventTicket = data.scheduleEventTicket\n  console.log(eventTicket)\n  const subTitle = eventTicket.scheduleEvent.name\n\n  // Chceck sold out\n  if (eventTicket.isSoldOut) {\n    return (\n      <ShopEventTicketBase title={title} subTitle={subTitle}>\n        <Card title={t(\"shop.events.ticket.sold_out_title\")}>\n          <Card.Body>{t(\"shop.events.ticket.sold_out\")}</Card.Body>\n        </Card>\n      </ShopEventTicketBase>\n    )\n  }\n\n  return (\n    <ShopEventTicketBase title={title} subTitle={subTitle}>\n      <Grid.Row>\n        <Grid.Col md={4}>\n          <ShopEventTicketPricingCard eventId={eventId} eventTicket={eventTicket} showButton={false} active={true} />\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"shop.events.ticket.additional_info\")}>\n            <Card.Body>\n              {(eventTicket.description) ?\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(eventTicket.description) }} />\n              : t(\"shop.events.ticket.no_additional_info\")}\n            </Card.Body>\n          </Card> \n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"shop.checkout.title\")}>\n            <Card.Body>\n              <Formik\n                initialValues={{ message: \"\" }}\n                // validationSchema={CLASSTYPE_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n\n                    let createOrderInput = {\n                      message: values.message,\n                      scheduleEventTicket: match.params.id,\n                    }\n\n                    createOrder({ variables: {\n                      input: createOrderInput,\n                      // file: values.image\n                    }, refetchQueries: [\n                        // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                    ]})\n                    .then(({ data }) => {\n                        const orderId = data.createFinanceOrder.financeOrder.id\n                        history.push('/shop/checkout/payment/' + orderId)\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                        setSubmitting(false)\n                      })\n                }}\n                >\n                {({ isSubmitting, errors, values }) => (\n                  <ShopCheckoutForm \n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    values={values}\n                  />\n                )}\n              </Formik>\n\n              {/* When a user is not logged in, show a login button to redirect to the login page */}\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopEventTicketBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopEventTicket))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SHOP_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 100, before: $before, after: $after, displayPublic: true, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayShop\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\n\nfunction ShopHomeBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.home.title\")}>\n        {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopHomeBase))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport { GET_SHOP_ANNOUNCEMENTS_QUERY } from \"./queries\"\nimport ShopHomeBase from \"./ShopHomeBase\"\n\n\nfunction ShopHome({ t, match, history }) {\n  \n  const { loading, error, data } = useQuery(GET_SHOP_ANNOUNCEMENTS_QUERY);\n\n  if (loading) return (\n    <ShopHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopHomeBase>\n  )\n  if (error) return (\n    <ShopHomeBase>\n      {t(\"shop.home.announcements.error_loading\")}\n    </ShopHomeBase>\n  )\n\n  const announcements = data.organizationAnnouncements\n\n  return (\n    <ShopHomeBase title={t(\"shop.home.title\")}>\n      <Grid.Row cards deck>\n        {(announcements.edges.length) ? announcements.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={6} key={v4()}>\n            <Card title={node.title}>\n              <Card.Body>\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }}></div>\n              </Card.Body>\n            </Card> \n          </Grid.Col>\n        )) : \"\"\n        }\n      </Grid.Row>\n    </ShopHomeBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopCheckoutPaymentBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      // title={t(\"shop.order.payment\")}\n      checkoutProgress=\"payment\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutPaymentBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      orderNumber\n      account {\n        id\n        fullName\n      }\n      message\n      status\n      total\n      totalDisplay\n      createdAt\n      items {\n        edges {\n          node {\n            id\n            productName\n            description\n            quantity\n            totalDisplay\n            scheduleItem {\n              id\n            }\n            attendanceDate\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Dimmer,\n  Icon,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_ORDER_QUERY } from \"../queries\"\nimport ShopCheckoutClassInfo from \"../class_info/ShopCheckoutClassInfo\"\n\n\nfunction ShopCheckoutOrderSummary({ t, id, complete=false }) {\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  if (loading) return (\n    <Dimmer active={true} loader={true} />\n  )\n  if (error) return (\n      t(\"shop.checkout.order_summary.error_loading\")\n  )\n\n  const order = data.financeOrder\n  const orderItems = order.items.edges\n\n  let classDate \n  let scheduleItemId\n  let item\n  for (item of orderItems) {\n    let node = item.node\n    if (node.scheduleItem) {\n      classDate = node.attendanceDate\n      scheduleItemId = node.scheduleItem.id\n    }\n  }\n\n\n  return (\n    <Card title={t(\"shop.checkout.payment.order_summary\")}>\n      <div className=\"table-responsive\">\n        <Table cards={true}>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.item')}</Table.ColHeader>\n              <Table.ColHeader className=\"text-right\">{t('general.price')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {orderItems.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.productName} <br /> \n                  <span className=\"text-muted\">\n                    {node.description}\n                  </span>\n                </Table.Col>\n                <Table.Col className=\"text-right\">{node.totalDisplay}</Table.Col>\n              </Table.Row>      \n            ))}\n            <Table.Row className=\"bold\">\n              <Table.Col>\n                {t(\"general.total\")}\n              </Table.Col>\n              <Table.Col className=\"text-right\">\n                  {order.totalDisplay}\n              </Table.Col>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      </div>\n      {(order.message) || (scheduleItemId && classDate) ? \n        <Card.Body>\n          {(order.message) ?\n            <span className=\"text-muted\">\n              <h5><Icon name=\"message-square\" /> {t(\"shop.checkout.order_summary.message\")}</h5> \n              {/* Order message */}\n              {order.message}\n              <br /><br />\n            </span> \n            : \"\"\n          }\n          {(scheduleItemId && classDate) ?\n            <ShopCheckoutClassInfo \n              scheduleItemId={scheduleItemId}\n              date={classDate}\n              complete={complete}\n            />\n            : \"\"\n          }\n        </Card.Body>\n        : \"\"\n      }\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutOrderSummary))\n","import { gql } from \"@apollo/client\"\n\n\nexport const CREATE_PAYMENT_LINK = gql`\nmutation CreateFinanceOrderPaymentLink($id: ID!) {\n  createFinanceOrderPaymentLink(id: $id) {\n    financeOrderPaymentLink {\n      paymentLink\n    }\n  }\n}\n`","// @flow\n\nimport React, { useContext, useRef, useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\";\nimport ShopCheckoutPaymentBase from \"./ShopCheckoutPaymentBase\"\nimport ShopCheckoutOrderSummary from \"../order_summary/ShopCheckoutOrderSummary\"\n\nimport { GET_ORDER_QUERY } from \"../queries\"\nimport { CREATE_PAYMENT_LINK } from \"./queries\"\n\n\nfunction ShopCheckoutPayment({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  const [createPaymentLink] = useMutation(CREATE_PAYMENT_LINK)\n\n  if (loading) return (\n    <ShopCheckoutPaymentBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopCheckoutPaymentBase>\n  )\n  if (error) return (\n    <ShopCheckoutPaymentBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopCheckoutPaymentBase>\n  )\n\n  console.log(data)\n  const order = data.financeOrder\n  console.log(order)\n  const orderItems = order.items.edges\n  console.log(orderItems)\n\n  function onClickPay() {\n    btnPayNow.current.setAttribute(\"disabled\", \"disabled\")\n    setBtnText(t(\"shop.checkout.payment.redirecting\"))\n    // btnPayNow.current.setValue(\"redirecting...\")\n    // btnPayNow\n    // btnPayNow.current.removeAttribute(\"disabled\")\n    createPaymentLink({ variables: { id: id } }).then(({ data }) => {\n      console.log('got data', data);\n      const paymentLink = data.createFinanceOrderPaymentLink.financeOrderPaymentLink.paymentLink\n      window.location.href = paymentLink\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n    })\n  }\n\n  let msgNextStep\n  let buttonNext\n  \n  // The order has been added to the users' account as it's free.\n  // No need for a payment.\n  if (order.total === \"0.00\") {\n    history.push(`/shop/checkout/complete/${id}`)\n  }\n\n  // Continue processing and see if online payments are available\n  if (onlinePaymentsAvailable) {\n    msgNextStep = t(\"shop.checkout.payment.order_received_to_payment_text\")\n    buttonNext = <button\n      className=\"btn btn-block btn-success\"\n      ref={btnPayNow}\n      onClick={ onClickPay }\n    >\n      {btn_text}\n    </button>\n  } else {\n    msgNextStep = t(\"shop.checkout.payment.order_received_to_profile_text\")\n    buttonNext = <Link to=\"/\">\n      <Button\n        block\n        color=\"success\"\n      >\n        {t(\"shop.checkout.payment.to_profile\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  }\n\n\n  return (\n    <ShopCheckoutPaymentBase title={title}>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Card title={t(\"shop.checkout.payment.order_received\")}>\n              <Card.Body>\n                <h5 className={\"mb-4\"}>{t(\"shop.checkout.payment.order_received_subheader\")}</h5>\n                {t(\"shop.checkout.payment.order_received_to_payment_explanation\")} <br />< br />\n                {msgNextStep}\n              </Card.Body>\n              <Card.Footer>\n                {buttonNext}\n              </Card.Footer>\n            </Card>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <ShopCheckoutOrderSummary id={id} />\n          </Grid.Col>\n        </Grid.Row>\n    </ShopCheckoutPaymentBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopCheckoutPayment))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopCheckoutCompleteBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={\"\"}\n      checkoutProgress=\"complete\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutCompleteBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\nimport ShopCheckoutCompleteBase from \"./ShopCheckoutCompleteBase\"\nimport ShopCheckoutOrderSummary from \"../order_summary/ShopCheckoutOrderSummary\"\n\nimport { GET_ORDER_QUERY } from \"../queries\"\n\n\nfunction ShopCheckoutComplete({ t, match, history }) {\n  // const btnPayNow = useRef(null);\n  // const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  // const [btn_text, setBtnText] = useState(initialBtnText)\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  if (loading) return (\n    <ShopCheckoutCompleteBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopCheckoutCompleteBase>\n  )\n  if (error) return (\n    <ShopCheckoutCompleteBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopCheckoutCompleteBase>\n  )\n\n  console.log(data)\n  const order = data.financeOrder\n  console.log(order)\n  const orderItems = order.items.edges\n  console.log(orderItems)\n\n  // Order not found\n  if (!order) {\n    return (\n      <ShopCheckoutCompleteBase title={title}>\n        {t(\"shop.checkout.complete.order_not_found\")}\n      </ShopCheckoutCompleteBase>\n    )\n  }\n\n  let subHeader = \"\"\n  let contentText = \"\"\n  let paymentText = \"\"\n  let complete = false\n\n  // Success!\n  if (order.status === \"DELIVERED\") {\n    // subHeader: thank you message\n    // contentText: Something to explain the user what's next\n    if (order.total === \"0.00\") {\n      subHeader = t(\"shop.checkout.complete.success_subheader_free_order\") \n      contentText = t(\"shop.checkout.complete.success_content_text_free_order\")\n    } else {\n      subHeader = t(\"shop.checkout.complete.success_subheader\") \n      contentText = t(\"shop.checkout.complete.success_content_text\")\n    }\n    \n    complete = true\n\n    // Confirm receiving payment to user\n    if (order.total !== \"0.00\") {\n      paymentText = t(\"shop.checkout.complete.success_payment_text\")\n    }\n  } else {\n    // Fail...\n    // Looks like something went wrong message\n    subHeader = t(\"shop.checkout.complete.fail_subheader\") \n    // Notify user of ways to contact\n    contentText = t(\"shop.checkout.complete.fail_content_text\")\n\n    // Notify user that payment hasn't been received\n    if (order.total !== \"0.00\") {\n      paymentText = t(\"shop.checkout.complete.fail_payment_text\")\n    }\n  }\n\n\n  return (\n    <ShopCheckoutCompleteBase title={title}>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Card title={t(\"shop.checkout.complete.title\")}>\n              <Card.Body>\n                <h5 className={\"mb-4\"}>{subHeader}</h5>\n                {paymentText} <br />\n                {contentText}\n              </Card.Body>\n              <Card.Footer>\n                <Link to=\"/shop/account/\">\n                  <Button \n                    block\n                    color=\"success\"\n                  >\n                    {t(\"shop.complete.to_account\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Card.Footer>\n            </Card>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <ShopCheckoutOrderSummary id={id} complete={complete} />\n          </Grid.Col>\n        </Grid.Row>\n    </ShopCheckoutCompleteBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopCheckoutComplete))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASSES_QUERY = gql`\n  query ScheduleItemAttendance($before: String, $after: String, $account: ID!) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, accountScheduleEventTicket_Isnull: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          cancellationPossible\n          attendanceType\n          date\n          bookingStatus\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountClassesBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassesBase))","import React, { useContext } from 'react'\nimport { useQuery, } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBookingStatus from '../../../ui/BadgeBookingStatus'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Table\n} from \"tabler-react\"\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountClassesBase from \"./ShopAccountClassesBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountClasses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_CLASSES_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  // TODO: add cancel class button & query\n  // const [ updateOrder ] = useMutation(UPDATE_ORDER)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountClassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountClassesBase>\n      {t(\"shop.account.classes.error_loading_data\")}\n    </ShopAccountClassesBase>\n  )\n\n  const user = dataUser.user\n  const scheduleItemAttendances = data.scheduleItemAttendances\n\n  // Empty list\n  if (!scheduleItemAttendances.edges.length) {\n    return (\n      <ShopAccountClassesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.classes.title')} >\n              <Card.Body>\n                {t('shop.account.classes.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountClassesBase>\n    )  \n  }\n\n\n  // Populated list\n  return (\n    <ShopAccountClassesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.classes.title')}\n            hasCardBody={false}\n            pageInfo={scheduleItemAttendances.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: scheduleItemAttendances.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.schduleItemAttendances.edges\n                  const pageInfo = fetchMoreResult.schduleItemAttendances.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        schduleItemAttendances: {\n                          __typename: previousResult.schduleItemAttendances.__typename,\n                          edges: [ ...previousResult.schduleItemAttendances.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>  \n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                { scheduleItemAttendances.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      { moment(node.date).format(dateFormat) } <br />\n                      <span className=\"text-muted\">\n                        {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n                      </span>\n                    </Table.Col>\n                    <Table.Col>\n                      { node.scheduleItem.organizationClasstype.name }\n                    </Table.Col>\n                    <Table.Col>\n                      { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                      <span className=\"text-muted\">\n                        { node.scheduleItem.organizationLocationRoom.name }\n                      </span> \n                    </Table.Col>\n                    <Table.Col>\n                      <BadgeBookingStatus status={node.bookingStatus} />\n                    </Table.Col>\n                    <Table.Col>\n                      {/* TODO: improve this by adding a \"Can be cancelled field to GQL schema\" */}\n                      {((node.bookingStatus !== \"CANCELLED\") && node.cancellationPossible) ?  \n                        <div>\n                          <Link to={`/shop/account/class_cancel/${node.scheduleItem.id}/${node.date}/${node.id}`}>\n                            <Button \n                              className=\"pull-right mr-r\"\n                              color=\"warning\"\n                              >\n                              {t(\"general.cancel\")}\n                            </Button>\n                          </Link>\n                          <Link to={`/shop/account/class_info/${node.scheduleItem.id}/${node.date}`}>\n                            <Button\n                              className=\"pull-right\"\n                              color=\"secondary\"\n                              icon=\"info\"\n                            >\n                              {t(\"general.info\")}\n                            </Button>\n                          </Link>\n                        </div> : \"\"\n                      }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountClassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopClasspassesBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.classpasses.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassesBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspassPricingCard({ t, classpass, btnLink, active=false }) {\n  // classpass should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, unlimited, classes, validity, link\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {classpass.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        {classpass.priceDisplay}\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          <b>{(classpass.unlimited) ? t('general.unlimited') : classpass.classes }</b> { \" \" }\n          {((classpass.classes !== 1) || (classpass.unlimited))? t('general.classes'): t('general.class')}\n        </PricingCard.AttributeItem>\n        <PricingCard.AttributeItem>\n          {t('general.valid_for')} { \" \" }\n          <b>{classpass.validity} {' '} {classpass.validityUnitDisplay}</b>\n        </PricingCard.AttributeItem>\n      </PricingCard.AttributeList>\n      {(btnLink) ?\n        <Link to={btnLink}>\n          <PricingCard.Button >\n            {t(\"shop.classpasses.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\"\n      }\n    </PricingCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspassPricingCard))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_CLASSPASSES_QUERY = gql`\n  query OrganizationClasspasses($after: String, $before: String) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          trialPass\n          name\n          description\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          validity\n          validityUnit\n          validityUnitDisplay\n          classes\n          unlimited\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\nimport ShopClasspassesBase from \"./ShopClasspassesBase\"\nimport ShopClasspassPricingCard from \"../classpass/ShopClasspassPricingCard\"\n\nimport { GET_ORGANIZATION_CLASSPASSES_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspasses({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_CLASSPASSES_QUERY)\n\n  if (loading) return (\n    <ShopClasspassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopClasspassesBase>\n  )\n  if (error) return (\n    <ShopClasspassesBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopClasspassesBase>\n  )\n\n  const classpasses = data.organizationClasspasses\n  \n  return (\n    <ShopClasspassesBase>\n      <Grid.Row>\n        {classpasses.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={3}>\n            <ShopClasspassPricingCard\n              classpass={node}\n              btnLink={\"/shop/classpass/\" + node.id}\n            />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspasses))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopClasspassBase({ t, match, history, pageTitle, pageSubTitle, children }) {\n  \n  return (\n    <ShopBase \n      title={pageTitle}\n      subTitle={pageSubTitle}\n      returnUrl=\"/shop/classpasses\"\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASSPASS_QUERY = gql`\n  query OrganizationClasspass($id: ID!) {\n    organizationClasspass(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      trialPass\n      name\n      description\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      validity\n      validityUnit\n      validityUnitDisplay\n      classes\n      unlimited\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    user {\n      hasReachedTrialLimit\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport { TimeStringToJSDateOBJ } from '../../../tools/date_tools'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport ShopClasspassBase from \"./ShopClasspassBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopClasspassesPricingCard from \"./ShopClasspassPricingCard\"\n\nimport { GET_CLASSPASS_QUERY } from \"./queries\"\nimport { GET_CLASS_QUERY } from \"../queries\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction ShopClasspass({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const pageTitle = t(\"general.classpass\")\n  const id = match.params.id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  const { loading, error, data } = useQuery(GET_CLASSPASS_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  const { loading: loadingClass, error: errorClass, data: dataClass } = useQuery(GET_CLASS_QUERY, {\n    variables: { scheduleItemId: scheduleItemId, date: classDate },\n    skip: (!scheduleItemId || !classDate)\n  })\n\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n\n  if (loading) return (\n    <ShopClasspassBase pageTitle={pageTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopClasspassBase>\n  )\n  if (error) return (\n    <ShopClasspassBase pageTitle={pageTitle}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopClasspassBase>\n  )\n\n  const classpass = data.organizationClasspass\n  const user = data.user\n  const pageSubTitle = classpass.name\n\n  if (user.hasReachedTrialLimit && classpass.trialPass) {\n    return (\n      <ShopClasspassBase pageTitle={pageTitle}>\n        <Card pageTitle={t(\"shop.classpass.trial_limit_reached\")}>\n          <Card.Body>\n            {t(\"shop.classpass.trial_limit_reached_explanation\")}\n          </Card.Body>\n        </Card>\n      </ShopClasspassBase>\n    )\n  }\n\n  return (\n    <ShopClasspassBase pageTitle={pageTitle} pageSubTitle={pageSubTitle}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <ShopClasspassesPricingCard classpass={classpass} active={true} />\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          {(dataClass && !loadingClass && !errorClass) ?\n            <Card pageTitle={t(\"shop.classpass.class_book_information\")}>\n              <Card.Body>\n                {t(\"shop.classpass.class_book_explanation\")} <br /><br />\n                <b>\n                  {moment(classDate).format(dateFormat)} {' '}\n                  {moment(TimeStringToJSDateOBJ(dataClass.scheduleClass.timeStart)).format(timeFormat)} {' - '}\n                  {moment(TimeStringToJSDateOBJ(dataClass.scheduleClass.timeEnd)).format(timeFormat)} <br />  \n                </b>\n                {dataClass.scheduleClass.organizationClasstype.name + \" \" + t(\"general.at\") + ' ' + \n                  dataClass.scheduleClass.organizationLocationRoom.organizationLocation.name}\n\n              </Card.Body>\n            </Card>\n            : \"\" \n          }\n          <Card pageTitle={t(\"shop.classpass.additional_information\")}>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(classpass.description) }}></div>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <Card pageTitle={t(\"shop.checkout.pageTitle\")}>\n            <Card.Body>\n              <Formik\n                initialValues={{ message: \"\" }}\n                // validationSchema={CLASSTYPE_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n\n                    let createOrderInput = {\n                      message: values.message,\n                      organizationClasspass: match.params.id,\n                    }\n\n                    if (scheduleItemId && classDate) {\n                      createOrderInput.attendanceDate = classDate\n                      createOrderInput.scheduleItem = scheduleItemId\n                    }\n\n                    createOrder({ variables: {\n                      input: createOrderInput,\n                      // file: values.image\n                    }, refetchQueries: [\n                        // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                    ]})\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        console.log('good...  now redirect to the payment page')\n                        const orderId = data.createFinanceOrder.financeOrder.id\n                        history.push('/shop/checkout/payment/' + orderId)\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                        setSubmitting(false)\n                      })\n                }}\n                >\n                {({ isSubmitting, errors, values }) => (\n                  <ShopCheckoutForm \n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    values={values}\n                  />\n                )}\n              </Formik>\n\n              {/* When a user is not logged in, show a login button to redirect to the login page */}\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClasspassBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspass))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\n\nfunction ShopSubscriptionsBase({ t, match, history, children }) {\n  return (\n    <ShopBase title={t(\"shop.subscriptions.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionsBase))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopSubscriptionPricingCard({ t, subscription, btnLink, active=false, displayCheckoutInfo=false }) {\n  // subscription should be an object with at least the following values from an organizationSubscription object:\n  // id, name, priceTodayDisplay, subscriptionUnit, unlimited, minDuration, priceFirstMonthDisplay, \n  // accountRegistrationfee\n\n  let unit = t(\"general.month\")\n  if (!subscription.unlimited && subscription.subscriptionUnit === 'WEEK') {\n    unit = t(\"general.week\")\n  }\n\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {subscription.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        {subscription.priceTodayDisplay}\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          <b>{(subscription.unlimited) ? t('general.unlimited') : subscription.classes }</b> { \" \" }\n          {t('general.classes')} / {unit}\n        </PricingCard.AttributeItem>\n        <PricingCard.AttributeItem>\n          {t('general.min_duration')} { \" \" }\n          <b>{subscription.minDuration} {(subscription.minDuration === 1) ? t(\"general.month\") : t(\"general.months\")}</b> \n        </PricingCard.AttributeItem>\n        {(displayCheckoutInfo) ? \n          <PricingCard.AttributeItem>\n            {t(\"general.first_month\")}: <b>{subscription.priceFirstMonthDisplay}</b>\n          </PricingCard.AttributeItem>\n        : \"\"}\n        {(displayCheckoutInfo && subscription.accountRegistrationFee > 0) ? \n          <PricingCard.AttributeItem>\n            {t(\"general.registration_fee\")}: <b>{subscription.accountRegistrationFeeDisplay}</b>\n          </PricingCard.AttributeItem>\n        : \"\"}\n      </PricingCard.AttributeList>\n      {(btnLink) ?\n        <Link to={btnLink}>\n          <PricingCard.Button >\n            {t(\"shop.subscriptions.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\"\n      }\n    </PricingCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionPricingCard))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_SUBSCRIPTIONS_QUERY = gql`\n  query OrganizationSubscriptions($after: String, $before: String) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          priceTodayDisplay\n          displayPublic\n          displayShop\n          name\n          description\n          sortOrder\n          minDuration\n          classes\n          subscriptionUnit\n          subscriptionUnitDisplay\n          reconciliationClasses\n          unlimited\n          termsAndConditions\n          registrationFee\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\nimport ShopSubscriptionsBase from \"./ShopSubscriptionsBase\"\nimport ShopSubscriptionPricingCard from \"../subscription/ShopSubscriptionPricingCard\"\n\nimport { GET_ORGANIZATION_SUBSCRIPTIONS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopSubscriptions({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_SUBSCRIPTIONS_QUERY)\n\n  if (loading) return (\n    <ShopSubscriptionsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionsBase>\n  )\n  if (error) return (\n    <ShopSubscriptionsBase>\n      {t(\"shop.subscriptions.error_loading\")}\n    </ShopSubscriptionsBase>\n  )\n\n  const subscriptions = data.organizationSubscriptions\n\n  return (\n    <ShopSubscriptionsBase>\n        <Grid.Row>\n          {subscriptions.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={3}>\n              <ShopSubscriptionPricingCard\n                subscription={node}\n                btnLink={\"/shop/subscription/\" + node.id}\n              />\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n\n        \n    </ShopSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptions))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction CheckoutCardMollie({ t, match, history, organizationSubscriptionId }) {\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n  return (\n    <Card title={t(\"shop.checkout.title\")}>\n      <Card.Body>\n        <Formik\n          initialValues={{ message: \"\" }}\n          // validationSchema={CLASSTYPE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              let createOrderInput = {\n                message: values.message,\n                organizationSubscription: organizationSubscriptionId,\n              }\n\n              createOrder({ variables: {\n                input: createOrderInput,\n                // file: values.image\n              }, refetchQueries: [\n                  // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  console.log('good...  now redirect to the payment page')\n                  const orderId = data.createFinanceOrder.financeOrder.id\n                  history.push('/shop/checkout/payment/' + orderId)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <ShopCheckoutForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardMollie))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Icon,\n} from \"tabler-react\"\n\n\nfunction CheckoutCardBankAccountRequired({ t, match, history }) {\n\n  return (\n    <Card title={t(\"shop.subscription.bank_account_required\")}>\n      <Card.Body>\n        {t(\"shop.subscription.bank_account_required_explanation\")}\n      </Card.Body>\n      <Card.Footer>\n      <Link to=\"/shop/account/bank_account\">\n        <Button \n          block\n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n        >\n          {t('shop.subscription.to_bank_account')} <Icon name=\"chevron-right\" />\n        </Button>\n      </Link>\n      </Card.Footer>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardBankAccountRequired))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Icon\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport cs_django_links from \"../../../tools/cs_django_links\"\n\n\nconst ShopClasspassForm = ({ t, isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n    <FoForm>\n      <Form.Group label={t('shop.subscription.start_on')}>\n        <CSDatePicker\n          selected={values.dateStart}\n          onChange={(date) => setFieldValue(\"dateStart\", date)}\n          onBlur={() => setFieldTouched(\"dateStart\", true)}\n        />\n        <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <small className=\"text-muted\">\n        {t(\"shop.order.by_placing_this_order\")} <br />\n        <ul>\n          <li>{t(\"shop.order.agree_terms\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\" \n              href={cs_django_links.EXPORT_TERMS_AND_CONDITIONS}\n            >\n              {t(\"general.terms_and_conditions\")}\n            </a>\n          </li>\n          <li>{t(\"shop.order.agree_privacy\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\" \n              href={cs_django_links.EXPORT_PRIVACY_POLICY}\n            >\n              {t(\"general.privacy_policy\")}\n            </a>\n          </li>\n        </ul>\n      </small>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting || !values.dateStart}\n      >\n        {(!values.dateStart) ? t(\"shop.subscription.please_select_date\") : t(\"general.i_agree\")}\n        {\" \"} <Icon name=\"chevron-right\" />\n      </Button>\n    </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopClasspassForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_SCHEMA = Yup.object().shape({\n    dateStart: Yup.string()\n      .nullable()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n} from \"tabler-react\"\nimport CheckoutCardDirectDebitForm from \"./CheckoutCardDirectDebitForm\"\nimport { ACCOUNT_SUBSCRIPTION_SCHEMA } from \"./yupSchemaDirectDebit\"\n\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport { CREATE_ACCOUNT_SUBSCRIPTION } from \"../../relations/accounts/subscriptions/queries\"\n\n\nfunction CheckoutDirectDebit({ t, match, history, accountId, organizationSubscription }) {\n  const [createSubscription] = useMutation(CREATE_ACCOUNT_SUBSCRIPTION)\n\n  return (\n    <Card title={t(\"shop.checkout.title\")}>\n      <Card.Body>\n        {/* <p>{t(\"shop.subscription.bank_account_required_explanation\")}</p> */}\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organizationSubscription.termsAndConditions) }} />\n        <Formik\n          initialValues={{ message: \"\" }}\n          validationSchema={ACCOUNT_SUBSCRIPTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              createSubscription({ variables: {\n                input: {\n                  organizationSubscription: organizationSubscription.id,\n                  account: accountId,\n                  dateStart: dateToLocalISO(values.dateStart),\n                },\n                // file: values.image\n              }, refetchQueries: [\n                  // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  console.log('good...  now redirect to the subscription activated page')\n                  const accountSubscriptionId = data.createAccountSubscription.accountSubscription.id\n                  history.push(`/shop/subscription/direct_debit_activated/${accountSubscriptionId}`)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <CheckoutCardDirectDebitForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutDirectDebit))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionBase({ t, match, history, pageTitle, pageSubTitle, children }) {\n  \n  return (\n    <ShopBase \n      title={pageTitle}\n      subTitle={pageSubTitle}\n      returnUrl=\"/shop/subscriptions\"\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SUBSCRIPTION_QUERY = gql`\n  query OrganizationSubscription($id: ID!) {\n    organizationSubscription(id:$id) {\n      id\n      archived\n      priceTodayDisplay\n      displayPublic\n      displayShop\n      name\n      description\n      sortOrder\n      minDuration\n      classes\n      subscriptionUnit\n      subscriptionUnitDisplay\n      reconciliationClasses\n      unlimited\n      termsAndConditions\n      registrationFee\n      shopPaymentMethod\n      accountRegistrationFee\n      accountRegistrationFeeDisplay\n      priceFirstMonthDisplay\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      instructor\n      employee\n      hasBankAccountInfo\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport CheckoutCardMollie from './CheckoutCardMollie'\nimport CheckoutCardBankAccountRequired from './CheckoutCardBankAccountRequired'\nimport CheckoutCardDirectDebit from './CheckoutCardDirectDebit'\nimport ShopSubscriptionBase from \"./ShopSubscriptionBase\"\nimport ShopSubscriptionPricingCard from \"./ShopSubscriptionPricingCard\"\n\nimport { GET_SUBSCRIPTION_QUERY } from \"./queries\"\n\nfunction ShopSubscription({ t, match, history }) {\n  const pageTitle = t(\"general.subscription\")\n  const id = match.params.id\n\n  // fetchPolicy network-only prevents caching. Need fresh results when coming back after setting bank account.\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopSubscriptionBase pageTitle={pageTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionBase>\n  )\n  if (error) return (\n    <ShopSubscriptionBase pageTitle={pageTitle}>\n      {t(\"shop.subscription.error_loading\")}\n    </ShopSubscriptionBase>\n  )\n\n  const subscription = data.organizationSubscription\n  const account = data.user\n  const pageSubTitle = subscription.name\n\n  let CheckoutCard\n\n  // Check for shop subscription payment method\n  if (subscription.shopPaymentMethod === \"DIRECTDEBIT\") {\n    // Check for bank account details, if not set, \n    if (!account.hasBankAccountInfo) {\n      // Create local storage back url for account bank account component    \n      localStorage.setItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT, `/shop/subscription/${id}`)\n      // Show bank account requird \n      CheckoutCard = <CheckoutCardBankAccountRequired />\n    } else {\n      // Allow customer to create a subscription\n      CheckoutCard = <CheckoutCardDirectDebit accountId={account.accountId} organizationSubscription={subscription} />\n    }\n  } else {\n    CheckoutCard = <CheckoutCardMollie organizationSubscriptionId={id} />\n  }\n\n\n  return (\n    <ShopSubscriptionBase pageTitle={pageTitle} pageSubTitle={pageSubTitle}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <ShopSubscriptionPricingCard subscription={subscription} active={true} displayCheckoutInfo={true} />\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <Card pageTitle={t(\"shop.subscription.additional_information\")}>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(subscription.description) }}></div>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          {CheckoutCard}\n        </Grid.Col>\n      </Grid.Row>\n    </ShopSubscriptionBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscription))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionDirectDebitActivatedBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      checkoutProgress=\"complete\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionDirectDebitActivatedBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!) {\n    accountSubscription(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  List\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ShopSubscriptionDirectDebitActivatedBase from \"./ShopSubscriptionDirectDebitActivatedBase\"\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"./queries\"\n\n\nfunction ShopSubscriptionDirectDebitActivated({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n\n  // fetchPolicy network-only prevents caching. Need fresh results when coming back after setting bank account.\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n  if (error) return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title}>\n      {t(\"shop.subscription.error_loading\")}\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n\n  console.log(data)\n  const subscription = data.accountSubscription\n  const account = data.user\n  console.log(subscription)\n  console.log(account)\n\n  return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <Card title={t(\"shop.subscription_directdebit_activated.thank_you\")}>\n            <Card.Body>\n              {t(\"shop.subscription_directdebit_activated.message_activated\")} <br/>\n\n              <b>{subscription.organizationSubscription.name}</b> {t(\"shop.subscription_directdebit_activated.starting_on\")} {' '}\n              <b>{moment(subscription.dateStart).format(dateFormat)}</b>.\n              <br /><br />\n              <b>{t(\"shop.subscription_directdebit_activated.what_next_question\")}</b>\n              <List.Group>\n                <Link to=\"/shop/classes\" className=\"mb-1\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_book_class')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n                <Link to=\"/shop/account\" className=\"mb-1\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_account')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n                <Link to=\"/\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_continue_shopping')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n              </List.Group>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionDirectDebitActivated))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PASSWORD_CHANGE_SCHEMA = Yup.object().shape({\n    passwordCurrent: Yup.string()\n      .required(t('yup.field_required')),\n    passwordNew: Yup.string()\n      .required(t('yup.field_required'))\n      .min(2, t('yup.min_len_9')),\n    passwordNew2: Yup.string()\n      .oneOf([Yup.ref('passwordNew'), null], t('yup.passwords_must_match')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst UserPasswordChangeForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm className=\"card\" autoComplete=\"off\">\n    <Card.Body className=\"p-6\">\n      <Card.Title>\n        {t('user.change_password.title')}\n      </Card.Title>\n      <Form.Group label={t('user.change_password.password_current')}>\n        <Field type=\"password\" \n                name=\"passwordCurrent\" \n                className={(errors.passwordCurrent) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordCurrent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('user.change_password.password_new')}>\n        <Field type=\"password\" \n                name=\"passwordNew\" \n                className={(errors.passwordNew) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordNew\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('user.change_password.password_new_repeat')}>\n        <Field type=\"password\" \n                name=\"passwordNew2\" \n                className={(errors.passwordNew2) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordNew2\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Footer>\n        <Button \n          block\n          loading={isSubmitting}\n          color=\"primary\"\n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('user.change_password.title')}\n        </Button>\n      </Form.Footer>\n    </Card.Body>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(UserPasswordChangeForm))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { ToastContainer, Slide } from 'react-toastify'\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\"\n\n\nfunction CSStandalonePage({ t, urlLogo=\"\", children}) {\n\n  return (\n    <Page>\n      <div className=\"page-single\">\n        <Container>\n          <Grid.Row>\n            <div className=\"col col-login mx-auto\">            \n              <div className=\"text-center mb-5\">\n                { (urlLogo) ? <img src={urlLogo} className=\"h-9\" alt=\"logo\" /> : \"\" }\n              </div>\n              {children}\n              <ToastContainer \n                autoClose={5000} \n                transition={Slide}\n              />\n            </div>\n          </Grid.Row>\n        </Container>\n      </div>\n    </Page>\n  )\n}\n\nexport default withTranslation()(CSStandalonePage)\n\n\n\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { PASSWORD_CHANGE_SCHEMA } from './yupSchema'\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Button,\n  List,\n} from \"tabler-react\"\n\nimport { UPDATE_ACCOUNT_PASSWORD } from \"../../../queries/system/auth\"\nimport UserPasswordChangeForm from './UserPasswordChangeForm';\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserChangePassword({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const [updatePassword] = useMutation(UPDATE_ACCOUNT_PASSWORD)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin} >\n      {/* TODO: point imageURL to logo */}\n      <Formik\n        initialValues={{ \n          passwordCurrent: \"\",\n          passwordNew: \"\",\n          passwordNew2: \"\"\n        }}\n        validationSchema={PASSWORD_CHANGE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            let vars = {\n              input: {\n                passwordCurrent: values.passwordCurrent,\n                passwordNew: values.passwordNew\n              }\n            }\n\n            updatePassword({ variables: vars })\n              .then(({ data }) => {\n                console.log('got data', data)\n                setTimeout(() => toast.success((t('user.change_password.success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                }), 300)\n                window.history.back()\n              }).catch((error) => {\n                console.log('#############')\n                console.log(error.messages)\n                console.log(error.graphQLErrors)\n                console.log(Object.keys(error))\n\n                if (error.graphQLErrors) {\n                  let i\n                  for (i = 0; i < error.graphQLErrors.length; i++) {\n                    toast.error(error.graphQLErrors[0].message\n                        .replace(/'/g, \"\")\n                        .replace(/,/g, \"\")\n                        .replace(/\\[/g, \"\")\n                        .replace(/\\]/g, \"\"), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  }\n                } else {\n                  // Show general error message\n                  toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                }\n                \n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <UserPasswordChangeForm\n            isSubmitting={isSubmitting}\n            etFieldValue={setFieldValue}\n            esetFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n          />\n        )}\n      </Formik>    \n      <h5>{t('user.change_password.requirements')}</h5>\n      <List>\n        <List.Item>{t('user.change_password.requirement_not_a_digit')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_not_common')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_min_length')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_not_similar_account')}</List.Item>\n      </List>\n      {/* Cancel button below form */}\n      <Button \n        block\n        color=\"link\"\n        onClick={(event) => {\n          event.preventDefault()  \n          window.history.back()\n        }}\n      >\n        {t('general.cancel')}\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\n\nexport default withTranslation()(withRouter(UserChangePassword))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\n// import CSDatePicker from \"../../ui/CSDatePicker\"\n// import ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nconst UserLoginForm = ({ t, history, isSubmitting, errors }) => (\n  <FoForm className=\"card\" autoComplete=\"off\">\n    <Card.Body className=\"p-6\">\n      <Card.Title>\n        {t('user.login.title')}\n      </Card.Title>\n      <Form.Group label={t('user.login.email')}>\n        <Field type=\"text\" \n                name=\"email\" \n                placeholder={t('user.login.email_placeholder')}\n                className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.password')}>\n        <Field type=\"password\" \n                name=\"password\" \n                placeholder={t('user.login.password_placeholder')}\n                className={(errors.password) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"password\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Footer>\n        <Grid.Row>\n          <Grid.Col md={6}>\n            <Button \n              block\n              loading={isSubmitting}\n              color=\"primary\"\n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.login')}\n            </Button>\n          </Grid.Col>\n          <Grid.Col md={6}>\n            <Button \n              color=\"link\"\n              RootComponent=\"a\"\n              href={(window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") ? \n                \"http://localhost:8000/d/accounts/password/reset/\" :\n                \"/d/accounts/password/reset/\"\n              } \n            >\n              {t('user.register.reset_password')}\n            </Button>\n          </Grid.Col>\n        </Grid.Row>\n      </Form.Footer>\n    </Card.Body>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(UserLoginForm))\n\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport { TOKEN_AUTH } from \"../../../queries/system/auth\"\nimport { CSAuth } from \"../../../tools/authentication\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport UserLoginForm from \"./UserLoginForm\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLogin({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const [ doTokenAuth ] = useMutation(TOKEN_AUTH)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin} >\n      <div className=\"text-center text-muted mb-1\">\n        {organization ? organization.name : \"\"}\n      </div>\n      <Formik\n        initialValues={{ \n          email: \"\",\n          password: \"\"\n        }}\n        // validationSchema={ACCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            let vars = {\n              username: values.email,\n              password: values.password,\n            }\n\n            doTokenAuth({ variables: vars,\n              refetchQueries: [\n                // // Refetch list\n                // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                // // Refresh local cached results for this account\n                // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                // TODO: Add link to \"feature switcher\" here\n                const next = localStorage.getItem(CSLS.AUTH_LOGIN_NEXT) || \"/user/welcome\"\n                CSAuth.login(data.tokenAuth)\n                setTimeout(() => history.push(next), 500)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log(error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors }) => (\n          <UserLoginForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n          />\n        )}\n      </Formik>    \n      <div className=\"text-center\">\n        <h5>{t('user.register.create_account')}</h5>\n        {t('user.register.create_account_msg')} <br />\n        {t('user.register.create_account_msg_click_below')} <br />\n      </div>\n      <Button \n        block\n        color=\"link\"\n        RootComponent=\"a\"\n        href={(window.location.hostname === \"localhost\" || window.location.hostname === \"dev.costasiella.com\") ? \n          \"http://localhost:8000/d/accounts/signup/\" :\n          \"/d/accounts/signup/\"\n        } \n      >\n        {t('user.register.create_account')} <Icon name=\"chevron-right\" />\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\n\nexport default withTranslation()(withRouter(UserLogin))","import React, { useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { ToastContainer, Slide} from 'react-toastify'\nimport {\n  Card,\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLoginRequired({t, match, history}) {\n  const [active, setActive] = useState(false);\n\n  return (\n    <CSStandaloneFormPage>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.login_required.title')}\n          </Card.Title>\n          {t('user.login_required.message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              setTimeout(() => history.push('/user/login'), 250)\n            }}\n          >\n            {t('user.login_required.go_to_login')} <Icon name=\"chevron-right\" />\n          </Button>\n        </Card.Body>\n      </Card>\n      <ToastContainer \n          autoClose={5000} \n          transition={Slide}\n      />\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserLoginRequired))","import React, { useContext, useState } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Button,\n} from \"tabler-react\"\n\nimport OrganizationContext from '../../context/OrganizationContext'\nimport { CSAuth } from \"../../../tools/authentication\"\nimport { TOKEN_COOKIE_DELETE, TOKEN_REFRESH_COOKIE_DELETE } from \"../../../queries/system/auth\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLogout({t, match, history}) {\n  const [ deleteCookie ] = useMutation(TOKEN_COOKIE_DELETE)\n  const [ deleteRefreshCookie ] = useMutation(TOKEN_REFRESH_COOKIE_DELETE)\n  const [active, setActive] = useState(false)\n\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin}>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.logout.title')}\n          </Card.Title>\n          {t('user.logout.confirmation_message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              CSAuth.logout()\n              deleteCookie().then(({ data }) => {\n                console.log('got data', data)\n                })\n              .catch((error) => {\n                console.log(error)\n              })\n              deleteRefreshCookie().then(({ data }) => {\n                console.log('got data', data)\n                })\n              .catch((error) => {\n                console.log(error)\n              })\n              setTimeout(() => toast.info(t('user.logout.success'), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              }), 350)\n              setTimeout(() => history.push('/'), 250)\n            }}\n          >\n            {t('general.logout')}\n          </Button>\n        </Card.Body>\n      </Card>\n      <Button \n        block\n        color=\"link\"\n        onClick={(event) => {\n          event.preventDefault()  \n          window.history.back()\n        }}\n      >\n        {t('general.cancel')}\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserLogout))","import React, { useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { ToastContainer } from 'react-toastify'\n\nimport {\n  Card,\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\nfunction UserSessionExpired({t, match, history}) {\n  // const organization = useContext(OrganizationContext)\n  // console.log(organization)\n\n  const [active, setActive] = useState(false);\n\n  return (\n    <CSStandaloneFormPage>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.session_expired.title')}\n          </Card.Title>\n          {t('user.session_expired.message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              setTimeout(() => history.push('/user/login'), 250)\n            }}\n          >\n            {t('user.session_expired.go_to_login')} <Icon name=\"chevron-right\" />\n          </Button>\n        </Card.Body>\n      </Card>\n      <ToastContainer autoClose={5000}/>\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserSessionExpired))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport GET_USER_PROFILE from \"../../../queries/system/get_user_profile\"\n\n\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport CSStandalonePageWide from \"../../ui/CSStandalonePageWide\"\n\n\nfunction Welcome({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n  const { loading, error, data } = useQuery(GET_USER_PROFILE, {\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      <Dimmer active={true} loader={true} />\n    </CSStandalonePageWide>\n  )\n  if (error) return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </CSStandalonePageWide>\n  )\n\n  const user = data.user\n  console.log(user)\n\n  if (!user.employee && !user.instructor) {\n    history.push(\"/\")\n  } \n\n\n  return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      <div className=\"text-center mb-5\">\n        <h2>{t(\"general.welcome\")} {user.firstName}</h2>\n        <h5>{t(\"user.welcome.where_next_question\")}</h5>\n      </div>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={3} offsetMd={3}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.title\")}</h5>\n              {t(\"user.welcome.shop_explanation\")} <br /><br />\n              <Link to=\"/\">\n                <Button \n                  block\n                  outline\n                  color=\"primary\"\n                >\n                  {t(\"user.welcome.shop_to\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={3}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"general.backend\")}</h5>\n              {t(\"user.welcome.backend_explantion\")} <br /><br />\n              <Link to=\"/backend\">\n                <Button \n                  block\n                  outline\n                  color=\"primary\"\n                >\n                  {t(\"user.welcome.backend_to\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <HasPermissionWrapper resource=\"selfcheckin\" permission=\"view\" hideLoading={true}>\n          <Grid.Col xs={12} sm={12} md={3} offsetMd={3}>\n            <Card>\n              <Card.Body>\n                <h5>{t(\"selfcheckin.home.title\")}</h5>\n                {t(\"user.welcome.selfcheckin_explantion\")} <br /><br />\n                <Link to=\"/selfcheckin\">\n                  <Button \n                    block\n                    outline\n                    color=\"primary\"\n                  >\n                    {t(\"user.welcome.selfcheckin_to\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </HasPermissionWrapper>\n      </Grid.Row>\n    </CSStandalonePageWide>\n  )\n}\n\nexport default withTranslation()(withRouter(Welcome))","import * as React from \"react\";\n\nimport { Error404Page } from \"tabler-react\";\n\n// type Props = {||}\n\n// function Error404(props: Props): React.Node {\n//   return <Error404Page />\n// }\n\nfunction Error404() {\n  return <Error404Page />\n}\n\nexport default Error404\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_BANK_ACCOUNTS = gql`\n  query AccountBankAccounts($before: String, $after: String, $account: ID!) {\n    accountBankAccounts(first: 1, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          number\n          holder\n          bic\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n\nexport const UPDATE_BANK_ACCOUNT = gql`\n  mutation UpdateBankAccount($input:UpdateAccountBankAccountInput!) {\n    updateAccountBankAccount(input: $input) {\n      accountBankAccount {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst ShopAccountBankAccountForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card title={t(\"shop.account.bank_account.title\")} >\n    <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.holder')}>\n              <Field type=\"text\" \n                      name=\"holder\" \n                      className={(errors.holder) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.number')}>\n              <Field type=\"text\" \n                      name=\"number\" \n                      className={(errors.number) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"number\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.bic')}>\n              <Field type=\"text\" \n                      name=\"bic\" \n                      className={(errors.bic) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopAccountBankAccountForm))\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_BANK_ACCOUNT_SCHEMA = Yup.object().shape({\n    holder: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    number: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport { GET_ACCOUNT_BANK_ACCOUNTS, UPDATE_BANK_ACCOUNT } from \"./queries\"\n\nimport ShopAccountProfileBase from \"../ShopAccountProfileBase\"\nimport ShopAccountBankAccountForm from \"./ShopAccountBankAccountForm\"\nimport { ACCOUNT_BANK_ACCOUNT_SCHEMA } from \"./yupSchema\"\n\n\nfunction ShopAccountBankAccount({t, match, history}) {\n  // TODO fetch returnUrl from local storage to see if the user comes from a shop subscription component\n  const nextUrl = localStorage.getItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT)\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNTS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateBankAccount ] = useMutation(UPDATE_BANK_ACCOUNT)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.bank_account.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  const user = dataUser.user\n  const bankAccount = data.accountBankAccounts.edges[0].node\n\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Formik\n            initialValues={{ \n              number: bankAccount.number,\n              holder: bankAccount.holder,\n              bic: bankAccount.bic\n            }}\n            validationSchema={ACCOUNT_BANK_ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: bankAccount.id,\n                  number: values.number,\n                  holder: values.holder,\n                  bic: values.bic\n                }\n\n                updateBankAccount({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // // Refetch list\n                    // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // // Refresh local cached results for this account\n                    // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    if (nextUrl) {\n                      history.push(nextUrl)\n                    }\n\n                    toast.success((t('shop.account.bank_account.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n              <ShopAccountBankAccountForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                returnUrl={\"/shop/account\"}\n              />\n            )}\n          </Formik>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountBankAccount))","// import React, { Component } from 'react';\n// import logo from './logo.svg';\n\nimport React from 'react'\nimport {\n  Route, \n  Switch, \n  HashRouter,\n  Redirect\n} from 'react-router-dom'\nimport { withTranslation } from 'react-i18next'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { toast } from 'react-toastify'\n\n\nimport { GET_APP_SETTINGS_QUERY } from \"./components/settings/general/date_time/queries\"\nimport { GET_ORGANIZATION_QUERY } from \"./components/organization/organization/queries\"\nimport { TOKEN_REFRESH } from \"./queries/system/auth\"\n\n// Import moment locale\n// import moment from 'moment'\nimport 'moment/locale/nl'\n\nimport CSStandalonePageLoader from './components/ui/CSStandalonePageLoader'\n\nimport { AppSettingsProvider } from \"./components/context/AppSettingsContext\"\nimport { OrganizationProvider } from \"./components/context/OrganizationContext\"\n\nimport CookiePolicy from './components/shop/cookie_policy/CookiePolicy'\nimport HomeHome from './components/home/home/HomeHome'\n\nimport AutomationHome from './components/automation/home/AutomationHome'\nimport AutomationAccountSubscriptionCredits from './components/automation/account/subscription/credits/AutomationAccountSubscriptionCredits'\nimport AutomationAccountSubscriptionCreditAdd from './components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditAdd'\nimport AutomationAccountSubscriptionCreditExpiration \n  from './components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpiration'\nimport AutomationAccountSubscriptionCreditExpirationAdd\n  from './components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpirationAdd'\nimport AutomationAccountSubscriptionInvoices from './components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoices'\nimport AutomationAccountSubscriptionInvoicesAdd from './components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesAdd'\nimport AutomationAccountSubscriptionMollieCollections \n  from './components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollections'\nimport AutomationAccountSubscriptionMollieCollectionAdd\n  from './components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionAdd'\n\nimport FinanceHome from './components/finance/home/FinanceHome'\nimport FinanceCostCenters from './components/finance/costcenters/FinanceCostCenters'\nimport FinanceCostCenterAdd from './components/finance/costcenters/FinanceCostCenterAdd'\nimport FinanceCostCenterEdit from './components/finance/costcenters/FinanceCostCenterEdit'\nimport FinanceGLAccounts from './components/finance/glaccounts/FinanceGLAccounts'\nimport FinanceGLAccountAdd from './components/finance/glaccounts/FinanceGLAccountAdd'\nimport FinanceGLAccountEdit from './components/finance/glaccounts/FinanceGLAccountEdit'\nimport FinanceInvoices from './components/finance/invoices/FinanceInvoices'\nimport FinanceInvoicesExport from './components/finance/invoices/export/FinanceInvoicesExport'\nimport FinanceInvoiceEdit from './components/finance/invoices/edit/FinanceInvoiceEdit'\nimport FinanceInvoiceGroups from './components/finance/invoices/groups/FinanceInvoiceGroups'\nimport FinanceInvoiceGroupAdd from './components/finance/invoices/groups/FinanceInvoiceGroupAdd'\nimport FinanceInvoiceGroupEdit from './components/finance/invoices/groups/FinanceInvoiceGroupEdit'\nimport FinanceInvoiceGroupDefaults from './components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaults'\nimport FinanceInvoicePaymentAdd from './components/finance/invoices/payments/FinanceInvoicePaymentAdd'\nimport FinanceInvoicePaymentEdit from './components/finance/invoices/payments/FinanceInvoicePaymentEdit'\nimport FinanceOrders from './components/finance/orders/FinanceOrders'\nimport FinancePaymentBatches from './components/finance/payment_batches/FinancePaymentBatches'\nimport FinancePaymentBatchAddWhat from './components/finance/payment_batches/FinancePaymentBatchAddWhat'\nimport FinancePaymentBatchView from './components/finance/payment_batches/FinancePaymentBatchView'\nimport FinancePaymentCollectionBatchAdd from './components/finance/payment_batches/FinancePaymentCollectionBatchAdd'\nimport FinancePaymentCollectionBatchEdit from './components/finance/payment_batches/FinancePaymentCollectionBatchEdit'\nimport FinancePaymentBatchCategories from './components/finance/payment_batch_categories/FinancePaymentBatchCategories'\nimport FinancePaymentBatchCategoryAdd from './components/finance/payment_batch_categories/FinancePaymentBatchCategoryAdd'\nimport FinancePaymentBatchCategoryEdit from './components/finance/payment_batch_categories/FinancePaymentBatchCategoryEdit'\nimport FinanceOrderEdit from './components/finance/orders/edit/FinanceOrderEdit'\nimport FinancePaymentMethods from './components/finance/payment_methods/FinancePaymentMethods'\nimport FinancePaymentMethodAdd from './components/finance/payment_methods/FinancePaymentMethodAdd'\nimport FinancePaymentMethodEdit from './components/finance/payment_methods/FinancePaymentMethodEdit'\nimport FinanceTaxRates from './components/finance/taxrates/FinanceTaxRates'\nimport FinanceTaxRatesAdd from './components/finance/taxrates/FinanceTaxRateAdd'\nimport FinanceTaxRatesEdit from './components/finance/taxrates/FinanceTaxRateEdit'\nimport FinanceTaxRatesSummary from './components/finance/taxrates_summary/FinanceTaxRatesSummary'\n\nimport InsightHome from './components/insight/home/InsightHome'\nimport InsightClasspasses from './components/insight/classpasses/InsightClasspasses'\nimport InsightRevenue from './components/insight/revenue/InsightRevenue'\nimport InsightSubscriptions from './components/insight/subscriptions/InsightSubscriptions'\nimport InsightTrialpasses from './components/insight/trialpasses/InsightTrialpasses'\n\nimport OrganizationHome from './components/organization/home/OrganizationHome'\nimport OrganizationEdit from './components/organization/organization/OrganizationEdit'\nimport OrganizationBranding from './components/organization/organization/branding/OrganizationBranding'\nimport OrganizationBrandingEdit from './components/organization/organization/branding/OrganizationBrandingEdit'\nimport OrganizationAnnouncements from './components/organization/announcements/OrganizationAnnouncements'\nimport OrganizationAnnouncementAdd from './components/organization/announcements/OrganizationAnnouncementAdd'\nimport OrganizationAnnouncementEdit from './components/organization/announcements/OrganizationAnnouncementEdit'\nimport OrganizationAppointments from './components/organization/appointment_categories/appointments/OrganizationAppointments'\nimport OrganizationAppointmentAdd from './components/organization/appointment_categories/appointments/OrganizationAppointmentAdd'\nimport OrganizationAppointmentEdit from './components/organization/appointment_categories/appointments/OrganizationAppointmentEdit'\nimport OrganizationAppointmentCategories from './components/organization/appointment_categories/OrganizationAppointmentCategories'\nimport OrganizationAppointmentCategoryAdd from './components/organization/appointment_categories/OrganizationAppointmentCategoryAdd'\nimport OrganizationAppointmentCategoryEdit from './components/organization/appointment_categories/OrganizationAppointmentCategoryEdit'\nimport OrganizationAppointmentPrices from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPrices'\nimport OrganizationAppointmentPriceAdd from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceAdd'\nimport OrganizationAppointmentPriceEdit from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceEdit'\nimport OrganizationClasspasses from './components/organization/classpasses/OrganizationClasspasses'\nimport OrganizationClasspassAdd from './components/organization/classpasses/OrganizationClasspassAdd'\nimport OrganizationClasspassEdit from './components/organization/classpasses/OrganizationClasspassEdit'\nimport OrganizationClasspassesGroups from './components/organization/classpasses_groups/OrganizationClasspassesGroups'\nimport OrganizationClasspassesGroupAdd from './components/organization/classpasses_groups/OrganizationClasspassesGroupAdd'\nimport OrganizationClasspassesGroupEdit from './components/organization/classpasses_groups/OrganizationClasspassesGroupEdit'\nimport OrganizationClasspassesGroupEditPasses from './components/organization/classpasses_groups/OrganizationClasspassesGroupEditPasses'\nimport OrganizationClasstypes from './components/organization/classtypes/OrganizationClasstypes'\nimport OrganizationClasstypeAdd from './components/organization/classtypes/OrganizationClasstypeAdd'\nimport OrganizationClasstypeEdit from './components/organization/classtypes/OrganizationClasstypeEdit'\nimport OrganizationClasstypeEditImage from './components/organization/classtypes/OrganizationClasstypeEditImage'\nimport OrganizationDiscoveries from './components/organization/discovery/OrganizationDiscoveries'\nimport OrganizationDiscoveryAdd from './components/organization/discovery/OrganizationDiscoveryAdd'\nimport OrganizationDiscoveryEdit from './components/organization/discovery/OrganizationDiscoveryEdit'\nimport OrganizationDocuments from './components/organization/documents/OrganizationDocuments'\nimport OrganizationListDocuments from './components/organization/documents/OrganizationListDocuments'\nimport OrganizationDocumentAdd from './components/organization/documents/OrganizationDocumentAdd'\nimport OrganizationDocumentEdit from './components/organization/documents/OrganizationDocumentEdit'\nimport OrganizationHolidays from './components/organization/holidays/OrganizationHolidays'\nimport OrganizationHolidayAdd from './components/organization/holidays/OrganizationHolidayAdd'\nimport OrganizationHolidayEdit from './components/organization/holidays/OrganizationHolidayEdit'\nimport OrganizationHolidayEditLocations from './components/organization/holidays/OrganizationHolidayEditLocations'\nimport OrganizationLanguages from './components/organization/languages/OrganizationLanguages'\nimport OrganizationLanguageAdd from './components/organization/languages/OrganizationLanguageAdd'\nimport OrganizationLanguageEdit from './components/organization/languages/OrganizationLanguageEdit'\nimport OrganizationLocations from './components/organization/locations/OrganizationLocations'\nimport OrganizationLocationAdd from './components/organization/locations/OrganizationLocationAdd'\nimport OrganizationLocationEdit from './components/organization/locations/OrganizationLocationEdit'\nimport OrganizationLocationRooms from './components/organization/locations/rooms/OrganizationLocationRooms'\nimport OrganizationLocationRoomAdd from './components/organization/locations/rooms/OrganizationLocationRoomAdd'\nimport OrganizationLocationRoomEdit from './components/organization/locations/rooms/OrganizationLocationRoomEdit'\nimport OrganizationLevels from './components/organization/levels/OrganizationLevels'\nimport OrganizationLevelAdd from './components/organization/levels/OrganizationLevelAdd'\nimport OrganizationLevelEdit from './components/organization/levels/OrganizationLevelEdit'\nimport OrganizationShifts from './components/organization/shifts/OrganizationShifts'\nimport OrganizationShiftAdd from './components/organization/shifts/OrganizationShiftAdd'\nimport OrganizationShiftEdit from './components/organization/shifts/OrganizationShiftEdit'\nimport OrganizationSubscriptions from './components/organization/subscriptions/OrganizationSubscriptions'\nimport OrganizationSubscriptionAdd from './components/organization/subscriptions/OrganizationSubscriptionAdd'\nimport OrganizationSubscriptionEdit from './components/organization/subscriptions/OrganizationSubscriptionEdit'\nimport OrganizationSubscriptionsGroups from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroups'\nimport OrganizationSubscriptionsGroupAdd from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupAdd'\nimport OrganizationSubscriptionsGroupEdit from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEdit'\nimport OrganizationSubscriptionsGroupEditSubscriptions from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEditSubscriptions'\nimport OrganizationSubscriptionsPrices from './components/organization/subscriptions/prices/OrganizationSubscriptionsPrices'\nimport OrganizationSubscriptionPriceAdd from './components/organization/subscriptions/prices/OrganizationSubscriptionPriceAdd'\nimport OrganizationSubscriptionPriceEdit from './components/organization/subscriptions/prices/OrganizationSubscriptionPriceEdit'\n\nimport RelationsHome from './components/relations/home/RelationsHome'\nimport RelationsAccounts from './components/relations/accounts/RelationsAccounts'\nimport RelationsAccountAdd from './components/relations/accounts/RelationsAccountAdd'\nimport RelationsAccountProfile from './components/relations/accounts/RelationsAccountProfile'\nimport RelationsAccountProfileImage from './components/relations/accounts/RelationsAccountProfileImage'\nimport AccountAcceptedDocuments from './components/relations/accounts/accepted_documents/AcceptedDocuments.jsx'\nimport RelationsAccountBankAccount from './components/relations/accounts/bank_accounts/RelationsAccountBankAccount'\nimport RelationsAccountBankAccountMandateAdd from './components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateAdd'\nimport RelationsAccountBankAccountMandateEdit from './components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateEdit'\nimport RelationsAccountClasses from './components/relations/accounts/classes/AccountClasses'\nimport AccountClasspasses from './components/relations/accounts/classpasses/AccountClasspasses'\nimport AccountClasspassAdd from './components/relations/accounts/classpasses/AccountClasspassAdd'\nimport AccountClasspassEdit from './components/relations/accounts/classpasses/AccountClasspassEdit'\nimport AccountClasspassClasses from './components/relations/accounts/classpass_classes/AccountClasspassClasses'\nimport AccountDocuments from './components/relations/accounts/documents/AccountDocuments'\nimport AccountDocumentAdd from './components/relations/accounts/documents/AccountDocumentAdd'\nimport AccountDocumentEdit from './components/relations/accounts/documents/AccountDocumentEdit'\nimport AccountFinancePaymentBatchCategoryItems from \n  './components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItems'\nimport AccountFinancePaymentBatchCategoryItemAdd from \n'./components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemAdd'\nimport AccountFinancePaymentBatchCategoryItemEdit from \n'./components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemEdit'\nimport AccountInvoices from './components/relations/accounts/invoices/AccountInvoices'\nimport AccountInvoiceAdd from './components/relations/accounts/invoices/AccountInvoiceAdd'\nimport AccountMemberships from './components/relations/accounts/memberships/AccountMemberships'\nimport AccountMembershipAdd from './components/relations/accounts/memberships/AccountMembershipAdd'\nimport AccountMembershipEdit from './components/relations/accounts/memberships/AccountMembershipEdit'\nimport AccountNotes from './components/relations/accounts/notes/AccountNotes.jsx'\nimport AccountNoteAdd from './components/relations/accounts/notes/AccountNoteAdd.jsx'\nimport AccountNoteEdit from './components/relations/accounts/notes/AccountNoteEdit.jsx'\nimport AccountOrders from './components/relations/accounts/orders/AccountOrders'\nimport AccountScheduleEventTickets from './components/relations/accounts/schedule_event_tickets/AccountScheduleEventTickets'\nimport AccountSubscriptions from './components/relations/accounts/subscriptions/AccountSubscriptions'\nimport AccountSubscriptionAdd from './components/relations/accounts/subscriptions/AccountSubscriptionAdd'\nimport AccountSubscriptionEdit from './components/relations/accounts/subscriptions/edit/AccountSubscriptionEdit'\nimport AccountSubscriptionEditAltPrices from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPrices'\nimport AccountSubscriptionEditAltPriceAdd from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceAdd'\nimport AccountSubscriptionEditAltPriceEdit from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceEdit'\nimport AccountSubscriptionEditBlocks from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlocks'\nimport AccountSubscriptionEditBlockAdd from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockAdd'\nimport AccountSubscriptionEditBlockEdit from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockEdit'\nimport AccountSubscriptionEditCredits from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCredits'\nimport AccountSubscriptionEditCreditAdd from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAdd'\nimport AccountSubscriptionEditCreditEdit from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEdit'\nimport AccountSubscriptionEditInvoices from './components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoices'\nimport AccountSubscriptionEditInvoiceAdd from './components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAdd'\nimport AccountSubscriptionEditPauses from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauses'\nimport AccountSubscriptionEditPauseAdd from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseAdd'\nimport AccountSubscriptionEditPauseEdit from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseEdit'\nimport RelationsAccountInstructorProfile from './components/relations/accounts/instructor_profile/RelationsAccountInstructorProfile'\nimport RelationsB2B from './components/relations/b2b/RelationsB2B'\nimport RelationsB2BAdd from './components/relations/b2b/RelationsB2BAdd.jsx'\nimport RelationsB2BEdit from './components/relations/b2b/RelationsB2BEdit.jsx'\n\nimport ScheduleHome from './components/schedule/home/ScheduleHome'\nimport ScheduleAppointments from './components/schedule/appointments/ScheduleAppointments'\nimport ScheduleAppointmentAdd from './components/schedule/appointments/ScheduleAppointmentAdd'\nimport ScheduleAppointmentEditAll from './components/schedule/appointments/all/edit/ScheduleAppointmentEditAll'\nimport ScheduleClasses from './components/schedule/classes/ScheduleClasses'\nimport ScheduleClassAdd from './components/schedule/classes/ScheduleClassAdd'\nimport ScheduleClassEditAll from './components/schedule/classes/all/edit/ScheduleClassEditAll'\nimport ScheduleClassEnrollments from './components/schedule/classes/all/enrollments/ScheduleClassEnrollments'\nimport ScheduleClassEnrollmentsSearch from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentsSearch'\nimport ScheduleClassEnrollmentAdd from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentAdd'\nimport ScheduleClassEnrollmentEdit from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentEdit'\nimport ScheduleClassEnrollmentOptions from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentOptions'\nimport ScheduleClassClasspasses from './components/schedule/classes/all/classpasses/ScheduleClassClasspasses'\nimport ScheduleClassSubscriptions from './components/schedule/classes/all/subscriptions/ScheduleClassSubscriptions'\nimport ScheduleClassInstructors from './components/schedule/classes/all/instructors/ScheduleClassInstructors'\nimport ScheduleClassInstructorAdd from './components/schedule/classes/all/instructors/ScheduleClassInstructorAdd'\nimport ScheduleClassInstructorEdit from './components/schedule/classes/all/instructors/ScheduleClassInstructorEdit'\nimport ScheduleClassAttendance from './components/schedule/classes/class/attendance/ScheduleClassAttendance'\nimport ScheduleClassAttendanceChart from './components/schedule/classes/class/attendance_chart/ScheduleClassAttendanceChart'\nimport ScheduleClassBook from './components/schedule/classes/class/book/ScheduleClassBook'\nimport ScheduleClassEdit from './components/schedule/classes/class/edit/ScheduleClassEdit'\nimport ScheduleClassPrices from './components/schedule/classes/all/prices/ScheduleClassPrices'\nimport ScheduleClassPriceAdd from './components/schedule/classes/all/prices/ScheduleClassPriceAdd'\nimport ScheduleClassPriceEdit from './components/schedule/classes/all/prices/ScheduleClassPriceEdit'\nimport ScheduleEvents from './components/schedule/events/ScheduleEvents'\nimport ScheduleEventAdd from './components/schedule/events/ScheduleEventAdd'\nimport ScheduleEventEdit from './components/schedule/events/edit/ScheduleEventEdit'\nimport ScheduleEventActivities from './components/schedule/events/activities/ScheduleEventActivities'\nimport ScheduleEventActivityAdd from './components/schedule/events/activities/ScheduleEventActivityAdd'\nimport ScheduleEventActivityEdit from './components/schedule/events/activities/ScheduleEventActivityEdit'\nimport ScheduleEventActivityAttendance from './components/schedule/events/activities/attendance/ScheduleEventActivityAttendance'\nimport ScheduleEventEarlybirds from './components/schedule/events/earlybirds/ScheduleEventEarlybirds'\nimport ScheduleEventEarlybirdAdd from './components/schedule/events/earlybirds/ScheduleEventEarlybirdAdd'\nimport ScheduleEventEarlybirdEdit from './components/schedule/events/earlybirds/ScheduleEventEarlybirdEdit'\nimport ScheduleEventMedia from './components/schedule/events/media/ScheduleEventMedia'\nimport ScheduleEventMediaAdd from './components/schedule/events/media/ScheduleEventMediaAdd'\nimport ScheduleEventMediaEdit from './components/schedule/events/media/ScheduleEventMediaEdit'\nimport ScheduleEventTickets from './components/schedule/events/tickets/ScheduleEventTickets'\nimport ScheduleEventTicketAdd from './components/schedule/events/tickets/ScheduleEventTicketAdd'\nimport ScheduleEventTicketEdit from './components/schedule/events/tickets/ScheduleEventTicketEdit'\nimport ScheduleEventTicketEditActivities from './components/schedule/events/tickets/activities/ScheduleEventTicketEditActivities'\nimport ScheduleEventTicketEditCustomers from './components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomers'\nimport ScheduleEventTicketEditCustomersSearch from './components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomersSearch'\nimport ScheduleShifts from './components/schedule/shifts/ScheduleShifts'\nimport ScheduleShiftAdd from './components/schedule/shifts/ScheduleShiftAdd'\nimport ScheduleShiftEditAll from './components/schedule/shifts/all/edit/ScheduleShiftEditAll'\nimport ScheduleShiftEdit from './components/schedule/shifts/shift/edit/ScheduleShiftEdit'\nimport ScheduleShiftEmployees from './components/schedule/shifts/all/employees/ScheduleShiftEmployees'\nimport ScheduleShiftEmployeeAdd from './components/schedule/shifts/all/employees/ScheduleShiftEmployeeAdd'\nimport ScheduleShiftEmployeeEdit from './components/schedule/shifts/all/employees/ScheduleShiftEmployeeEdit'\n\nimport SelfCheckinCheckin from './components/selfcheckin/Checkin/Checkin'\nimport SelfCheckinBookingOptions from './components/selfcheckin/BookingOptions/BookingOptions'\nimport SelfCheckinLocations from './components/selfcheckin/Locations/Locations'\nimport SelfCheckinLocationClasses from './components/selfcheckin/LocationClasses/LocationClasses'\n\nimport SettingsAbout from './components/settings/about/SettingsAbout'\nimport SettingsFinanceBankAccounts from './components/settings/finance/bank_accounts/SettingsFinanceBankAccounts'\nimport SettingsFinanceCurrency from './components/settings/finance/currency/SettingsFinanceCurrency'\nimport SettingsGeneralDateTime from './components/settings/general/date_time/SettingsGeneralDateTime'\nimport SettingsGeneralSystem from './components/settings/general/system/SettingsGeneralSystem'\nimport SettingsHome from './components/settings/home/SettingsHome'\nimport SettingsIntegrationMailChimp from './components/settings/integration/mailchimp/SettingsIntegrationMailChimp'\nimport SettingsIntegrationMollie from './components/settings/integration/mollie/SettingsIntegrationMollie'\nimport SettingsMailMailChimpLists from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpLists'\nimport SettingsMailMailChimpListAdd from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpListAdd'\nimport SettingsMailMailChimpListEdit from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpListEdit'\nimport SettingsMailTemplates from './components/settings/mail/templates/SettingsMailTemplates'\nimport SettingsMailTemplateEdit from './components/settings/mail/templates/SettingsMailTemplateEdit'\nimport SettingsShopFeatures from './components/settings/shop/features/SettingsShopFeatures'\nimport SettingsWorkflowClassBooking from './components/settings/workflow/class_booking/SettingsWorkflowClassBooking'\nimport SettingsWorkflowShop from './components/settings/workflow/shop/SettingsWorkflowShop'\nimport SettingsWorkflowSubscriptionPauses from './components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPauses'\nimport SettingsWorkflowTrial from './components/settings/workflow/trial/SettingsWorkflowTrial'\n\nimport ShopAccountHome from './components/shop/account/home/ShopAccountHome'\nimport ShopAccountClassCancel from './components/shop/account/class_cancel/ShopAccountClassCancel'\nimport ShopAccountClassInfo from './components/shop/account/class_info/ShopAccountClassInfo'\nimport ShopAccountClasspasses from './components/shop/account/classpasses/ShopAccountClasspasses'\nimport ShopAccountEventTickets from './components/shop/account/event_tickets/ShopAccountEventTickets'\nimport ShopAccountInvoicePayment from './components/shop/account/invoice_payment/ShopAccountInvoicePayment'\nimport ShopAccountInvoicePaymentStatus from './components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatus'\nimport ShopAccountInvoices from './components/shop/account/invoices/ShopAccountInvoices'\nimport ShopAccountMailingLists from './components/shop/account/mailing_lists/ShopAccountMailingLists'\nimport ShopAccountOrders from './components/shop/account/orders/ShopAccountOrders'\nimport ShopAccountProfile from './components/shop/account/profile/ShopAccountProfile'\nimport ShopAccountSubscriptions from './components/shop/account/subscriptions/ShopAccountSubscriptions'\nimport ShopClassBook from './components/shop/classes/book/ShopClassBook'\nimport ShopClassBooked from './components/shop/classes/booked/ShopClassBooked'\nimport ShopClassesSchedule from './components/shop/classes/schedule/ShopClassesSchedule'\nimport ShopContact from './components/shop/contact/ShopContact'\nimport ShopEvents from './components/shop/events/ShopEvents'\nimport ShopEvent from './components/shop/event/ShopEvent'\nimport ShopEventTicket from './components/shop/event_ticket/ShopEventTicket'\nimport ShopHome from './components/shop/home/ShopHome'\nimport ShopCheckoutPayment from './components/shop/checkout/payment/ShopCheckoutPayment'\nimport ShopCheckoutComplete from './components/shop/checkout/complete/ShopCheckoutComplete'\nimport ShopClasses from './components/shop/account/classes/ShopAccountClasses'\nimport ShopClasspasses from './components/shop/classpasses/ShopClasspasses'\nimport ShopClasspass from './components/shop/classpass/ShopClasspass'\nimport ShopSubscriptions from './components/shop/subscriptions/ShopSubscriptions'\nimport ShopSubscription from './components/shop/subscription/ShopSubscription'\nimport ShopSubscriptionDirectDebitActivated from './components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivated'\n\nimport UserChangePassword from './components/user/password/UserPasswordChange'\nimport UserLogin from './components/user/login/UserLogin'\nimport UserLoginRequired from './components/user/login/UserLoginRequired'\nimport UserLogout from './components/user/login/UserLogout'\nimport UserSessionExpired from './components/user/session/UserSessionExpired'\nimport UserWelcome from './components/user/welcome/UserWelcome'\n\n\nimport Error404 from \"./components/Error404\"\n\nimport CSLS from \"./tools/cs_local_storage\"\nimport { CSAuth } from './tools/authentication'\nimport ShopAccountBankAccount from './components/shop/account/bank_account/ShopAccountBankAccount'\n\n\nfunction SetCurrentUrlAsNext() {\n  console.log(\"Storing current location as next in local storage\")\n  const currentUrl = window.location.href\n  const next = currentUrl.split(\"#\")[1]\n  console.log(next)\n  localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, next)\n}\n\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  let authTokenExpired = false\n  console.log(rest.path)\n\n  const ContinueAsYouAre = <Route {...rest} render={(props) => ( <Component {...props} /> )} />\n  const LoginRequired = <Route {...rest} render={(props) => ( <Redirect to='/user/login/required' /> )} />\n  const SessionExpired = <Route {...rest} render={(props) => ( <Redirect to='/user/session/expired' /> )} />\n  \n  // Check expiration\n  const tokenExp = localStorage.getItem(CSLS.AUTH_TOKEN_EXP)\n  if ((new Date() / 1000) >= tokenExp) {\n    authTokenExpired = true\n  }\n\n  if (authTokenExpired) {\n    const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n    if (refreshTokenExp == null) {\n      console.log(\"refresh token not found\")\n      SetCurrentUrlAsNext()\n      \n      return LoginRequired\n    } else if ((new Date() / 1000) >= refreshTokenExp) {\n      console.log(\"refresh token expired\")\n      console.log(new Date() / 1000)\n      console.log(refreshTokenExp)\n      SetCurrentUrlAsNext()\n\n      return SessionExpired\n    } else {\n      // Refresh token\n      console.log(\"auth token expired\")\n      console.log(new Date() / 1000)\n      console.log(refreshTokenExp)\n\n      doTokenRefresh().then(({ data }) => {\n        console.log('got refresh data', data)\n        CSAuth.updateTokenInfo(data.refreshToken)\n        return ContinueAsYouAre\n      }).catch((error) => {\n        toast.error(error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n        console.log('there was an error refreshing the token', error) \n        SetCurrentUrlAsNext()\n        console.log(\"REDIRECT BACK TO LOGIN\")\n        window.location.href = \"/#/user/login\"\n        window.location.reload()\n      })\n    }\n  } else {\n    return ContinueAsYouAre\n  }\n  return null\n}\n\n\nfunction AppRoot({ t }) {\n  const { loading: loadingAppSettings, error: errorAppSettings, data: dataAppSettings } = useQuery(GET_APP_SETTINGS_QUERY)\n  const { loading: loadingOrganization, error: errorOrganization, data: dataOrganization } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {id: \"T3JnYW5pemF0aW9uTm9kZToxMDA=\"}\n  })\n\n\n\n  if (loadingAppSettings || loadingOrganization) {\n    return (\n      <CSStandalonePageLoader />\n    )\n  }\n  if (errorAppSettings || errorOrganization) {\n    if (errorAppSettings.message === \"Signature has expired\")  {\n      return \"\"\n    } else {\n      return (\n        <div>\n          { t('settings.error_loading') } <br />\n          { errorAppSettings.message } <br />\n          { errorOrganization.message}\n        </div>\n      )\n    }\n  }\n\n  // Register \"US\" locale for moment\n  // moment.locale('en-US')\n  let appSettings = dataAppSettings.appSettings\n  let organization = dataOrganization.organization\n\n  return (\n    <AppSettingsProvider value={appSettings}>\n      <OrganizationProvider value={organization}>\n        <HashRouter>\n          <Switch>\n            {/* COOKIE POLICY */}\n            <Route exact path=\"/cookie_policy\" component={CookiePolicy} />\n            {/* BACKEND HOME */}\n            <PrivateRoute exact path=\"/backend\" component={HomeHome} />\n\n            {/* AUTOMATION */}\n            <PrivateRoute exact path=\"/automation\" component={AutomationHome} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits\" \n                                component={AutomationAccountSubscriptionCredits} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits/add\" \n                                component={AutomationAccountSubscriptionCreditAdd} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits_expiration\" \n                                component={AutomationAccountSubscriptionCreditExpiration} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits_expiration/add\" \n                                component={AutomationAccountSubscriptionCreditExpirationAdd} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/invoices\" \n                                component={AutomationAccountSubscriptionInvoices} />    \n            <PrivateRoute exact path=\"/automation/account/subscriptions/invoices/add\" \n                                component={AutomationAccountSubscriptionInvoicesAdd} />    \n            <PrivateRoute exact path=\"/automation/account/subscriptions/mollie_collections\" \n                                component={AutomationAccountSubscriptionMollieCollections} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/mollie_collections/add\" \n                                component={AutomationAccountSubscriptionMollieCollectionAdd} />\n\n            \n            {/* FINANCE */}\n            <PrivateRoute exact path=\"/finance\" component={FinanceHome} />\n            <PrivateRoute exact path=\"/finance/costcenters\" component={FinanceCostCenters} />\n            <PrivateRoute exact path=\"/finance/costcenters/add\" component={FinanceCostCenterAdd} />\n            <PrivateRoute exact path=\"/finance/costcenters/edit/:id\" component={FinanceCostCenterEdit} />\n            <PrivateRoute exact path=\"/finance/invoices\" component={FinanceInvoices} />\n            <PrivateRoute exact path=\"/finance/invoices/export\" component={FinanceInvoicesExport} />\n            <PrivateRoute exact path=\"/finance/invoices/edit/:id\" component={FinanceInvoiceEdit} />\n            <PrivateRoute exact path=\"/finance/invoices/groups\" component={FinanceInvoiceGroups} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/add\" component={FinanceInvoiceGroupAdd} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/edit/:id\" component={FinanceInvoiceGroupEdit} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/defaults\" component={FinanceInvoiceGroupDefaults} />\n            <PrivateRoute exact path=\"/finance/invoices/:invoice_id/payment/add\" component={FinanceInvoicePaymentAdd} />\n            <PrivateRoute exact path=\"/finance/invoices/:invoice_id/payment/edit/:id\" component={FinanceInvoicePaymentEdit} />\n            <PrivateRoute exact path=\"/finance/glaccounts\" component={FinanceGLAccounts} />\n            <PrivateRoute exact path=\"/finance/glaccounts/add\" component={FinanceGLAccountAdd} />\n            <PrivateRoute exact path=\"/finance/glaccounts/edit/:id\" component={FinanceGLAccountEdit} />\n            <PrivateRoute exact path=\"/finance/orders\" component={FinanceOrders} />\n            <PrivateRoute exact path=\"/finance/orders/edit/:id\" component={FinanceOrderEdit} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type\" component={FinancePaymentBatches} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/add_what\" component={FinancePaymentBatchAddWhat} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/view/:id\" component={FinancePaymentBatchView} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/add/:category_type\" component={FinancePaymentCollectionBatchAdd} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/edit/:id\" component={FinancePaymentCollectionBatchEdit} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories\" component={FinancePaymentBatchCategories} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories/add\" component={FinancePaymentBatchCategoryAdd} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories/edit/:id\" component={FinancePaymentBatchCategoryEdit} />\n            <PrivateRoute exact path=\"/finance/paymentmethods\" component={FinancePaymentMethods} />\n            <PrivateRoute exact path=\"/finance/paymentmethods/add\" component={FinancePaymentMethodAdd} />\n            <PrivateRoute exact path=\"/finance/paymentmethods/edit/:id\" component={FinancePaymentMethodEdit} />\n            <PrivateRoute exact path=\"/finance/taxrates\" component={FinanceTaxRates} />\n            <PrivateRoute exact path=\"/finance/taxrates/add\" component={FinanceTaxRatesAdd} />\n            <PrivateRoute exact path=\"/finance/taxrates/edit/:id\" component={FinanceTaxRatesEdit} />\n            <PrivateRoute exact path=\"/finance/taxrates_summary\" component={FinanceTaxRatesSummary} />\n            \n            {/* ORGANIZATION */}\n            <PrivateRoute exact path=\"/organization\" component={OrganizationHome} />\n            <PrivateRoute exact path=\"/organization/edit/:id\" component={OrganizationEdit} />\n            <PrivateRoute exact path=\"/organization/edit/:id/branding\" component={OrganizationBranding} />\n            <PrivateRoute exact path=\"/organization/edit/:id/branding/:update_field\" component={OrganizationBrandingEdit} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id\" component={OrganizationDocuments} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type\" component={OrganizationListDocuments} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type/add\" component={OrganizationDocumentAdd} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type/edit/:id\" component={OrganizationDocumentEdit} />\n            <PrivateRoute exact path=\"/organization/announcements\" component={OrganizationAnnouncements} />\n            <PrivateRoute exact path=\"/organization/announcements/add\" component={OrganizationAnnouncementAdd} />\n            <PrivateRoute exact path=\"/organization/announcements/edit/:id\" component={OrganizationAnnouncementEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories\" component={OrganizationAppointmentCategories} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/add\" component={OrganizationAppointmentCategoryAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/edit/:id\" component={OrganizationAppointmentCategoryEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments\" component={OrganizationAppointments} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/add/\" component={OrganizationAppointmentAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/edit/:id\" component={OrganizationAppointmentEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id\" \n                  component={OrganizationAppointmentPrices} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id/add\" \n                  component={OrganizationAppointmentPriceAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id/edit/:id\" \n                  component={OrganizationAppointmentPriceEdit} />\n            <PrivateRoute exact path=\"/organization/classpasses\" component={OrganizationClasspasses} />\n            <PrivateRoute exact path=\"/organization/classpasses/add\" component={OrganizationClasspassAdd} />\n            <PrivateRoute exact path=\"/organization/classpasses/edit/:id\" component={OrganizationClasspassEdit} />    \n            <PrivateRoute exact path=\"/organization/classpasses/groups\" component={OrganizationClasspassesGroups} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/add\" component={OrganizationClasspassesGroupAdd} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/edit/:id\" component={OrganizationClasspassesGroupEdit} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/edit/passes/:id\" component={OrganizationClasspassesGroupEditPasses} />\n            <PrivateRoute exact path=\"/organization/classtypes\" component={OrganizationClasstypes} />\n            <PrivateRoute exact path=\"/organization/classtypes/add\" component={OrganizationClasstypeAdd} />\n            <PrivateRoute exact path=\"/organization/classtypes/edit/:id\" component={OrganizationClasstypeEdit} />\n            <PrivateRoute exact path=\"/organization/classtypes/edit_image/:id\" component={OrganizationClasstypeEditImage} />\n            <PrivateRoute exact path=\"/organization/discoveries\" component={OrganizationDiscoveries} />\n            <PrivateRoute exact path=\"/organization/discoveries/add\" component={OrganizationDiscoveryAdd} /> \n            <PrivateRoute exact path=\"/organization/discoveries/edit/:id\" component={OrganizationDiscoveryEdit} /> \n            <PrivateRoute exact path=\"/organization/holidays\" component={OrganizationHolidays} />\n            <PrivateRoute exact path=\"/organization/holidays/add\" component={OrganizationHolidayAdd} />\n            <PrivateRoute exact path=\"/organization/holidays/edit/:id\" component={OrganizationHolidayEdit} />\n            <PrivateRoute exact path=\"/organization/holidays/edit/:id/locations\" component={OrganizationHolidayEditLocations} />\n            <PrivateRoute exact path=\"/organization/languages\" component={OrganizationLanguages} />\n            <PrivateRoute exact path=\"/organization/languages/add\" component={OrganizationLanguageAdd} />\n            <PrivateRoute exact path=\"/organization/languages/edit/:id\" component={OrganizationLanguageEdit} />\n            <PrivateRoute exact path=\"/organization/levels\" component={OrganizationLevels} />\n            <PrivateRoute exact path=\"/organization/levels/add\" component={OrganizationLevelAdd} />\n            <PrivateRoute exact path=\"/organization/levels/edit/:id\" component={OrganizationLevelEdit} />\n            <PrivateRoute exact path=\"/organization/locations\" component={OrganizationLocations} />\n            <PrivateRoute exact path=\"/organization/locations/add\" component={OrganizationLocationAdd} />\n            <PrivateRoute exact path=\"/organization/locations/edit/:id\" component={OrganizationLocationEdit} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/:location_id\" component={OrganizationLocationRooms} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/add/:location_id\" component={OrganizationLocationRoomAdd} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/edit/:location_id/:id\" component={OrganizationLocationRoomEdit} />\n            <PrivateRoute exact path=\"/organization/shifts\" component={OrganizationShifts} />\n            <PrivateRoute exact path=\"/organization/shifts/add\" component={OrganizationShiftAdd} />\n            <PrivateRoute exact path=\"/organization/shifts/edit/:id\" component={OrganizationShiftEdit} /> \n            {/* <PrivateRoute exact path=\"/organization/memberships\" component={OrganizationMemberships} />\n            <PrivateRoute exact path=\"/organization/memberships/add\" component={OrganizationMembershipAdd} />\n            <PrivateRoute exact path=\"/organization/memberships/edit/:id\" component={OrganizationMembershipEdit} />  */}\n            <PrivateRoute exact path=\"/organization/subscriptions\" component={OrganizationSubscriptions} />\n            <PrivateRoute exact path=\"/organization/subscriptions/add\" component={OrganizationSubscriptionAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/edit/:id\" component={OrganizationSubscriptionEdit} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups\" component={OrganizationSubscriptionsGroups} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/add\" component={OrganizationSubscriptionsGroupAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/edit/:id\" component={OrganizationSubscriptionsGroupEdit} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/edit/subscriptions/:id\" component={OrganizationSubscriptionsGroupEditSubscriptions} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/:subscription_id\" component={OrganizationSubscriptionsPrices} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/add/:subscription_id\" component={OrganizationSubscriptionPriceAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/edit/:subscription_id/:id\" component={OrganizationSubscriptionPriceEdit} />\n\n            {/* RELATIONS */}\n            <PrivateRoute exact path=\"/relations\" component={RelationsHome} />\n            <PrivateRoute exact path=\"/relations/accounts\" component={RelationsAccounts} />\n            <PrivateRoute exact path=\"/relations/accounts/add\" component={RelationsAccountAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/profile\" component={RelationsAccountProfile} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/profile/image\" component={RelationsAccountProfileImage} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/accepted_documents\" component={AccountAcceptedDocuments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts\" component={RelationsAccountBankAccount} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts/:bank_account_id/mandates/add\" \n                          component={RelationsAccountBankAccountMandateAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts/:bank_account_id/mandates/edit/:id\" \n                          component={RelationsAccountBankAccountMandateEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classes\" component={RelationsAccountClasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses\" component={AccountClasspasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/add\" component={AccountClasspassAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/edit/:id\" component={AccountClasspassEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/classes/:id\" component={AccountClasspassClasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents\" component={AccountDocuments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents/add\" component={AccountDocumentAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents/edit/:id\" component={AccountDocumentEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items\" \n                          component={AccountFinancePaymentBatchCategoryItems} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items/add\" \n                          component={AccountFinancePaymentBatchCategoryItemAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items/edit/:id\" \n                          component={AccountFinancePaymentBatchCategoryItemEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/invoices\" component={AccountInvoices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/invoices/add\" component={AccountInvoiceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships\" component={AccountMemberships} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships/add\" component={AccountMembershipAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships/edit/:id\" component={AccountMembershipEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes\" component={AccountNotes} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes/add\" component={AccountNoteAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes/edit/:id\" component={AccountNoteEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/orders\" component={AccountOrders} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/event_tickets\" component={AccountScheduleEventTickets} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions\" component={AccountSubscriptions} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/add\" component={AccountSubscriptionAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id\" \n                          component={AccountSubscriptionEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices\" \n                          component={AccountSubscriptionEditAltPrices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices/add\" \n                          component={AccountSubscriptionEditAltPriceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices/edit/:id\" \n                          component={AccountSubscriptionEditAltPriceEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks\" component={AccountSubscriptionEditBlocks} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks/add\" component={AccountSubscriptionEditBlockAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks/edit/:id\" \n                          component={AccountSubscriptionEditBlockEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits\" component={AccountSubscriptionEditCredits} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits/add\" component={AccountSubscriptionEditCreditAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits/edit/:id\" \n                          component={AccountSubscriptionEditCreditEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/invoices\" \n              component={AccountSubscriptionEditInvoices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/invoices/add\" \n              component={AccountSubscriptionEditInvoiceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses\" component={AccountSubscriptionEditPauses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses/add\" component={AccountSubscriptionEditPauseAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses/edit/:id\" \n                          component={AccountSubscriptionEditPauseEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/instructor_profile\" component={RelationsAccountInstructorProfile} />\n            <PrivateRoute exact path=\"/relations/b2b\" component={RelationsB2B} />\n            <PrivateRoute exact path=\"/relations/b2b/add\" component={RelationsB2BAdd} />\n            <PrivateRoute exact path=\"/relations/b2b/:business_id/edit\" component={RelationsB2BEdit} />\n\n            {/* SCHEDULE */}\n            <PrivateRoute exact path=\"/schedule\" component={ScheduleHome} />\n            <PrivateRoute exact path=\"/schedule/appointments\" component={ScheduleAppointments} />\n            <PrivateRoute exact path=\"/schedule/appointments/add\" component={ScheduleAppointmentAdd} />\n            <PrivateRoute exact path=\"/schedule/appointments/all/edit/:appointment_id\" component={ScheduleAppointmentEditAll} />\n            <PrivateRoute exact path=\"/schedule/classes\" component={ScheduleClasses} />\n            <PrivateRoute exact path=\"/schedule/classes/add/\" component={ScheduleClassAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/edit/:class_id/\" component={ScheduleClassEditAll} />\n            <PrivateRoute exact path=\"/schedule/classes/all/classpasses/:class_id/\" component={ScheduleClassClasspasses} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/\" component={ScheduleClassEnrollments} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/search\" component={ScheduleClassEnrollmentsSearch} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/add/:account_id/:account_subscription_id\" \n                          component={ScheduleClassEnrollmentAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/edit/:id\" \n                          component={ScheduleClassEnrollmentEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/options/:account_id\" component={ScheduleClassEnrollmentOptions} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/\" component={ScheduleClassPrices} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/add\" component={ScheduleClassPriceAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/edit/:id\" component={ScheduleClassPriceEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/all/subscriptions/:class_id/\" component={ScheduleClassSubscriptions} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/\" component={ScheduleClassInstructors} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/add\" component={ScheduleClassInstructorAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/edit/:id\" component={ScheduleClassInstructorEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/class/attendance/:class_id/:date\" component={ScheduleClassAttendance} />\n            <PrivateRoute exact path=\"/schedule/classes/class/attendance_chart/:class_id/:date\" \n                          component={ScheduleClassAttendanceChart} />\n            <PrivateRoute exact path=\"/schedule/classes/class/book/:class_id/:date/:account_id\" component={ScheduleClassBook} />\n            <PrivateRoute exact path=\"/schedule/classes/class/edit/:class_id/:date\" component={ScheduleClassEdit} />\n            <PrivateRoute exact path=\"/schedule/events\" component={ScheduleEvents} />\n            <PrivateRoute exact path=\"/schedule/events/add\" component={ScheduleEventAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id\" component={ScheduleEventEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities\" component={ScheduleEventActivities} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/add\" component={ScheduleEventActivityAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/edit/:id\" component={ScheduleEventActivityEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/edit/:id/attendance\" \n                          component={ScheduleEventActivityAttendance} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds\" component={ScheduleEventEarlybirds} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds/add\" component={ScheduleEventEarlybirdAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds/edit/:id\" component={ScheduleEventEarlybirdEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media\" component={ScheduleEventMedia} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media/add\" component={ScheduleEventMediaAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media/edit/:id\" component={ScheduleEventMediaEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets\" component={ScheduleEventTickets} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/add\" component={ScheduleEventTicketAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id\" component={ScheduleEventTicketEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/activities\" component={ScheduleEventTicketEditActivities} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/customers\" component={ScheduleEventTicketEditCustomers} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/customers/search\" \n                          component={ScheduleEventTicketEditCustomersSearch} />\n            <PrivateRoute exact path=\"/schedule/shifts\" component={ScheduleShifts} />\n            <PrivateRoute exact path=\"/schedule/shifts/add\" component={ScheduleShiftAdd} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/edit/:shift_id/\" component={ScheduleShiftEditAll} />\n            <PrivateRoute exact path=\"/schedule/shifts/shift/edit/:shift_id/:date\" component={ScheduleShiftEdit} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/\" component={ScheduleShiftEmployees} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/add\" component={ScheduleShiftEmployeeAdd} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/edit/:id\" component={ScheduleShiftEmployeeEdit} />\n\n\n            {/* Insight */}\n            <PrivateRoute exact path=\"/insight\" component={InsightHome} />\n            <PrivateRoute exact path=\"/insight/classpasses\" component={InsightClasspasses} />\n            <PrivateRoute exact path=\"/insight/revenue\" component={InsightRevenue} />\n            <PrivateRoute exact path=\"/insight/subscriptions\" component={InsightSubscriptions} />\n            <PrivateRoute exact path=\"/insight/trialpasses\" component={InsightTrialpasses} />\n\n            {/* Self Check-in */}\n            <PrivateRoute exact path=\"/selfcheckin/checkin/:location_id/:class_id/:date\" component={SelfCheckinCheckin} />\n            <PrivateRoute exact path=\"/selfcheckin/book/:location_id/:class_id/:date/:account_id\" \n                                component={SelfCheckinBookingOptions} />\n            <PrivateRoute exact path=\"/selfcheckin\" component={SelfCheckinLocations} />\n            <PrivateRoute exact path=\"/selfcheckin/location/:location_id\" component={SelfCheckinLocationClasses} />\n\n            {/* Shop */}\n            <Route exact path = \"/\" component={ShopHome} />\n            <PrivateRoute exact path = \"/shop/account\" component={ShopAccountHome} />\n            <PrivateRoute exact path = \"/shop/account/bank_account\" component={ShopAccountBankAccount} />\n            <PrivateRoute exact path = \"/shop/account/class_cancel/:class_id/:date/:attendance_id\" \n                                component={ShopAccountClassCancel} />\n            <PrivateRoute exact path = \"/shop/account/class_info/:class_id/:date\" component={ShopAccountClassInfo} />\n            <PrivateRoute exact path = \"/shop/account/classes\" component={ShopClasses} />\n            <PrivateRoute exact path = \"/shop/account/classpasses\" component={ShopAccountClasspasses} />\n            <PrivateRoute exact path = \"/shop/account/event_tickets\" component={ShopAccountEventTickets} />\n            <PrivateRoute exact path = \"/shop/account/invoice_payment/:id\" component={ShopAccountInvoicePayment} />\n            <PrivateRoute exact path = \"/shop/account/invoice_payment_status/:id\" component={ShopAccountInvoicePaymentStatus} />\n            <PrivateRoute exact path = \"/shop/account/invoices\" component={ShopAccountInvoices} />\n            <PrivateRoute exact path = \"/shop/account/mailing_lists\" component={ShopAccountMailingLists} />\n            <PrivateRoute exact path = \"/shop/account/orders\" component={ShopAccountOrders} />\n            <PrivateRoute exact path = \"/shop/account/profile\" component={ShopAccountProfile} />\n            <PrivateRoute exact path = \"/shop/account/subscriptions\" component={ShopAccountSubscriptions} />\n            <PrivateRoute exact path = \"/shop/checkout/payment/:id\" component={ShopCheckoutPayment} />\n            <PrivateRoute exact path = \"/shop/checkout/complete/:id\" component={ShopCheckoutComplete} />\n            <Route exact path = \"/shop/classes\" component={ShopClassesSchedule} />\n            <PrivateRoute exact path = \"/shop/classes/book/:class_id/:date\" component={ShopClassBook} />\n            <PrivateRoute exact path = \"/shop/classes/booked/:class_id/:date\" component={ShopClassBooked} />\n            <Route exact path = \"/shop/classpasses\" component={ShopClasspasses} />\n            <PrivateRoute exact path = \"/shop/classpass/:id\" component={ShopClasspass} />\n            <PrivateRoute exact path = \"/shop/classpass/:id/:class_id/:date\" component={ShopClasspass} />\n            <Route exact path = \"/shop/contact\" component={ShopContact} />\n            <Route exact path = \"/shop/events\" component={ShopEvents} />\n            <PrivateRoute exact path = \"/shop/events/:event_id\" component={ShopEvent} />\n            <PrivateRoute exact path = \"/shop/events/:event_id/ticket/:id\" component={ShopEventTicket} />\n            <Route exact path = \"/shop/subscriptions\" component={ShopSubscriptions} />\n            <PrivateRoute exact path = \"/shop/subscription/:id\" component={ShopSubscription} />\n            <PrivateRoute exact path = \"/shop/subscription/direct_debit_activated/:id\" component={ShopSubscriptionDirectDebitActivated} />\n\n            {/* Settings */}\n            <PrivateRoute exact path=\"/settings\" component={SettingsHome} />\n            <PrivateRoute exact path=\"/settings/about\" component={SettingsAbout} />\n            <PrivateRoute exact path=\"/settings/finance/bank_accounts\" component={SettingsFinanceBankAccounts} />\n            <PrivateRoute exact path=\"/settings/finance/currency\" component={SettingsFinanceCurrency} />\n            <PrivateRoute exact path=\"/settings/general/datetime\" component={SettingsGeneralDateTime} />\n            <PrivateRoute exact path=\"/settings/general/system\" component={SettingsGeneralSystem} />\n            <PrivateRoute exact path=\"/settings/integration/mailchimp\" component={SettingsIntegrationMailChimp} />\n            <PrivateRoute exact path=\"/settings/integration/mollie\" component={SettingsIntegrationMollie} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists\" component={SettingsMailMailChimpLists} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists/add\" component={SettingsMailMailChimpListAdd} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists/edit/:id\" component={SettingsMailMailChimpListEdit} />\n            <PrivateRoute exact path=\"/settings/mail/templates\" component={SettingsMailTemplates} />\n            <PrivateRoute exact path=\"/settings/mail/templates/edit/:id\" component={SettingsMailTemplateEdit} />\n            <PrivateRoute exact path=\"/settings/shop/features\" component={SettingsShopFeatures} />\n            <PrivateRoute exact path=\"/settings/workflow/class_booking\" component={SettingsWorkflowClassBooking} />\n            <PrivateRoute exact path=\"/settings/workflow/shop\" component={SettingsWorkflowShop} />\n            <PrivateRoute exact path=\"/settings/workflow/subscription_pauses\" component={SettingsWorkflowSubscriptionPauses} />\n            <PrivateRoute exact path=\"/settings/workflow/trial\" component={SettingsWorkflowTrial} />\n\n            {/* User */}\n            <PrivateRoute exact path=\"/user/password/change\" component={UserChangePassword} />\n            <Route exact path=\"/user/login\" component={UserLogin} />\n            <Route exact path=\"/user/login/required\" component={UserLoginRequired} />\n            <Route exact path=\"/user/logout\" component={UserLogout} />\n            <Route exact path=\"/user/session/expired\" component={UserSessionExpired} />\n            <Route exact path=\"/user/welcome\" component={UserWelcome} />\n            \n            <Route component={Error404} />\n          </Switch>\n        </HashRouter>\n      </OrganizationProvider>\n    </AppSettingsProvider>\n  )\n}\n\nexport default withTranslation()(AppRoot)\n\n","import React from 'react'\nimport {\n  ApolloClient,\n  ApolloLink,\n  from,\n  createHttpLink,\n  InMemoryCache,\n  ApolloProvider,\n  Observable,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\n// import { setContext } from '@apollo/client/link/context';\nimport Cookies from 'js-cookie';\n\nimport { TOKEN_REFRESH } from \"./queries/system/auth\"\n\nimport CSEC from \"./tools/cs_error_codes\"\nimport CSLS from \"./tools/cs_local_storage\"\nimport { CSAuth } from './tools/authentication'\n\n// Main app\nimport AppRoot from \"./AppRoot\"\n\n// Tabler css \nimport \"tabler-react/dist/Tabler.css\"\n// React-datepicker css\nimport \"react-datepicker/dist/react-datepicker.css\"\n// App css\nimport './App.css'\n\n\n// Register \"nl\" locale for react-datepicker\n// https://reactdatepicker.com/#example-17\n// import { registerLocale } from \"react-datepicker\"\n// import nl from 'date-fns/locale/nl';\n// registerLocale('nl', nl);\n\n// This allows <string>.trunc(x)\n// eslint-disable-next-line no-extend-native\nString.prototype.trunc = \n  function(n){\n      return this.substr(0, n-1) + (this.length > n ? '...' : '')\n  }\n\nfunction SetCurrentUrlAsNext() {\n  console.log(\"Storing current location as next in local storage\")\n  const currentUrl = window.location.href\n  const next = currentUrl.split(\"#\")[1]\n  console.log(next)\n  if ((next !== \"/user/login\") && (next !== \"/user/session/expired\") && (next !== \"/user/login/required\") && (next)) {\n    // This is a dirty hack to work around the following, a user refreshes the page but has an expired refreshtoken.\n    // This will produce an error on the orinal component, setting the correct next URL in localStorage. However, \n    // the code below will move the user to /user/login, which will also error at first, thus /user/login always\n    // gets set... we don't want that. This flow can be refactored at some point, but it works for now. \n    localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, next)\n  } \n}\n  \n\nconst errorLink = onError(({ graphQLErrors, networkError, operation, forward, response }) => {\n  console.log(operation)\n  \n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      )\n    });\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n\n  // request size check\n  if (graphQLErrors && graphQLErrors[0].message === \"Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.\") {\n    console.error('CHOSEN FILE EXCEEDS SIZE LIMIT')\n  }\n\n  // Token refresh check\n  // if (graphQLErrors && graphQLErrors[0].message === \"Signature has expired\") {\n  if (response) {\n    let i\n    for (i = 0; i < response.errors.length; i++) {\n      if (response.errors[i].extensions && response.errors[i].extensions.code === CSEC.USER_NOT_LOGGED_IN) {\n        console.log(graphQLErrors[0])\n        console.log('Time to refresh the token')\n\n        let authTokenExpired = false\n        let refreshTokenExpired = false\n        const tokenExp = localStorage.getItem(CSLS.AUTH_TOKEN_EXP)\n        const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n\n        if ((new Date() / 1000) >= tokenExp) {\n          authTokenExpired = true\n          \n          if ((new Date() / 1000) >= refreshTokenExp) {\n            refreshTokenExpired = true\n            // Remove any remaining token data\n            CSAuth.cleanup()\n            // Store current location, user has to login again\n            SetCurrentUrlAsNext()\n          }\n        }\n        \n        if (authTokenExpired && !refreshTokenExpired) {\n          console.log(\"refresh token... somehow...\")\n          console.log(localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN))\n\n          return new Observable(observer => {\n            client.mutate({\n              mutation: TOKEN_REFRESH,\n            })\n              .then(({ data }) => { \n                console.log(data)\n                CSAuth.updateTokenInfo(data.refreshToken)\n              })\n              .then(() => {\n                const subscriber = {\n                  next: observer.next.bind(observer),\n                  error: observer.error.bind(observer),\n                  complete: observer.complete.bind(observer)\n                };\n\n                // Retry last failed request\n                forward(operation).subscribe(subscriber);\n              })\n              .catch(error => {\n                // No refresh or client token available, we force user to login, after a cleanup\n                console.log(\"Failed to refresh the token, onwards to the login page\")\n                observer.error(error);\n                CSAuth.cleanup()\n                window.location.href = \"/#/user/login\"\n                window.location.reload()\n              });\n          })\n        } else if (refreshTokenExpired) {\n          window.location.href = \"#/user/session/expired\"\n          window.location.reload()\n        } else {\n          window.location.href = \"#/user/login/required\"\n          window.location.reload()\n        }\n      }\n    }\n  }\n})\n\n   \n// // Fetch CSRF Token\n// let csrftoken\n// async function getCsrfToken() {\n//   if (csrftoken) return csrftoken\n\n//   csrftoken = await fetch('/d/csrf/')\n//     .then(response => response.json())\n//     .then(data => data.csrfToken)\n\n//   return await csrftoken\n// }\n\n// Fetch CSRF Token from Cookie\nlet csrftoken\nasync function getCsrfToken() {\n  if (csrftoken) return csrftoken\n\n  await fetch('/d/csrf/')\n    .then(response => response.json())\n\n  // For troubleshooting\n  // const result =  await fetch('/d/csrf/')\n  //   .then(response => response.json())\n  // console.log(reuslt)\n\n  csrftoken = Cookies.get('csrftoken');\n  \n  return await csrftoken\n}\n\nconst httpLink = createHttpLink({\n  uri: '/d/graphql/',\n  credentials: 'same-origin',\n  // request: async (operation) => {\n  //   const csrftoken = await getCsrfToken();\n  //   Cookies.set('csrftoken', csrftoken);\n  //   // set the cookie 'csrftoken'\n  //   operation.setContext({\n  //       // set the 'X-CSRFToken' header to the csrftoken\n  //       headers: {\n  //           'X-CSRFToken': csrftoken,\n  //       },\n  //   })}\n});\n\nconst csrfMiddleware = new ApolloLink(async (operation, forward) => {\n  const csrftoken = await getCsrfToken();\n  Cookies.set('csrftoken', csrftoken);\n\n  operation.setContext({\n    // set the 'X-CSRFToken' header to the csrftoken\n    headers: {\n        'X-CSRFToken': csrftoken,\n    },\n  })\n\n  return forward(operation)\n})\n\n// const authLink = setContext(async (request, { headers }) => {\n//   // get the authentication token from local storage if it exists\n//   // const token = localStorage.getItem(CSLS.AUTH_TOKEN)\n//   // return the headers to the context so httpLink can read them\n//   return {\n//     headers: {\n//       ...headers,\n//       // Authorization: token ? `JWT ${token}`: ''\n//     }\n//   }\n// });\n\n// set up ApolloClient\nconst client = new ApolloClient({\n  link: from([csrfMiddleware, errorLink, httpLink]),\n  cache: new InMemoryCache(),\n})\n\n\nfunction App() {\n  // Register \"NL\" locale for moment\n  // moment.locale('en-US')\n\n  return (\n    <ApolloProvider client={client}>\n      <AppRoot />\n    </ApolloProvider>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './i18n'\nimport './index.css'\nimport \"./c3jscustom.css\"\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}